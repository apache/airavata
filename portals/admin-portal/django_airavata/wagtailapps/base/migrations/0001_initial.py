# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2018-04-10 21:43
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.embeds.blocks
import wagtail.images.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0040_page_draft_title'),
        ('wagtailimages', '0019_delete_filter'),
    ]

    operations = [
        migrations.CreateModel(
            name='Announcements',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('announcement_text', models.CharField(default='Announcement Text', help_text='Provide an announcement text', max_length=255)),
                ('announcement_link', models.CharField(default='Announcement Link', help_text='Give a redirect link for announcement', max_length=255)),
            ],
            options={
                'verbose_name_plural': 'Announcement',
            },
        ),
        migrations.CreateModel(
            name='BlankPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('show_navbar', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], default=True, help_text="Choose yes if you want to display the navbar on home page and no if you don't want to.", max_length=5)),
                ('show_nav_extra', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], default=True, help_text="Choose yes if you want the secondary navbar to show on home page or no if you don't want to", max_length=5)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='CustomCss',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('css', wagtail.core.fields.StreamField((('css_block', wagtail.core.blocks.RawHTMLBlock(help_text='Write Css Here', required=True)), ('css_comment', wagtail.core.blocks.StructBlock((('message', wagtail.core.blocks.TextBlock(help_text='Write some comment to mark the css', required=True)),)))), blank=True, default='', help_text='Write custom css and give comments as necessary', null=True, verbose_name='CSS block')),
            ],
            options={
                'verbose_name_plural': 'Custom CSS',
            },
        ),
        migrations.CreateModel(
            name='CustomHeaderLinks',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('header_link_text', models.CharField(help_text='Give a Link text', max_length=25)),
                ('header_link', models.CharField(blank=True, help_text='Provide a redirect Link', max_length=255, null=True)),
                ('header_sub_link_text1', models.CharField(blank=True, help_text='Give a Sub Link 1 text', max_length=25, null=True)),
                ('header_sub_link_text2', models.CharField(blank=True, help_text='Give a Sub Link 2 text', max_length=25, null=True)),
                ('header_sub_link_text3', models.CharField(blank=True, help_text='Give a Sub Link 3 text', max_length=25, null=True)),
                ('header_sub_link_text4', models.CharField(blank=True, help_text='Give a Sub Link 4 text', max_length=25, null=True)),
                ('header_sub_link1', models.CharField(blank=True, help_text='Provide a redirect Link for sublink 1', max_length=255, null=True)),
                ('header_sub_link2', models.CharField(blank=True, help_text='Provide a redirect Link for sublink 2', max_length=255, null=True)),
                ('header_sub_link3', models.CharField(blank=True, help_text='Provide a redirect Link for sublink 3', max_length=255, null=True)),
                ('header_sub_link4', models.CharField(blank=True, help_text='Provide a redirect Link for sublink 4', max_length=255, null=True)),
                ('body', models.CharField(blank=True, help_text='Give a title text', max_length=255, null=True)),
            ],
            options={
                'verbose_name_plural': 'Header Custom Links',
            },
        ),
        migrations.CreateModel(
            name='FooterText',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('footer', wagtail.core.fields.StreamField((('paragraph_block', wagtail.core.blocks.StructBlock((('custom_class', wagtail.core.blocks.TextBlock(blank=True, help_text='control this element by giving unique class names separated by space and styling the class in css', required=False)), ('body', wagtail.core.blocks.RichTextBlock())))), ('image_block', wagtail.core.blocks.StructBlock((('image', wagtail.images.blocks.ImageChooserBlock(required=True)), ('caption', wagtail.core.blocks.CharBlock(required=False)), ('width', wagtail.core.blocks.CharBlock(required=False)), ('height', wagtail.core.blocks.IntegerBlock(required=False)), ('redirect_url', wagtail.core.blocks.TextBlock(blank=True, help_text='Give a redirect link on clicking the image', null=True, required=False)), ('custom_class', wagtail.core.blocks.TextBlock(blank=True, help_text='control this element by giving unique class names separated by space and styling the class in css', required=False))))), ('embed_block', wagtail.core.blocks.StructBlock((('embed', wagtail.embeds.blocks.EmbedBlock()), ('custom_class', wagtail.core.blocks.TextBlock(blank=True, help_text='control this element by giving unique class names separated by space and styling the class in css', required=False))))), ('heading_block', wagtail.core.blocks.StructBlock((('heading_text', wagtail.core.blocks.CharBlock(classname='title', required=True)), ('size', wagtail.core.blocks.ChoiceBlock(blank=True, choices=[('', 'Select a header size'), ('h1', 'H1'), ('h2', 'H2'), ('h3', 'H3'), ('h4', 'H4')], required=False)), ('custom_class', wagtail.core.blocks.TextBlock(blank=True, help_text='control this element by giving unique class names separated by space and styling the class in css', required=False))))), ('bootstrap_jumbotron', wagtail.core.blocks.StructBlock((('title', wagtail.core.blocks.TextBlock()), ('body', wagtail.core.blocks.RichTextBlock()), ('button_text', wagtail.core.blocks.TextBlock(required=False)), ('button_link', wagtail.core.blocks.TextBlock(required=False)), ('button_color', wagtail.core.blocks.ChoiceBlock(blank=True, choices=[('btn-primary', 'DEFAULT'), ('btn-danger', 'RED'), ('btn-secondary', 'GREY'), ('btn-success', 'GREEN'), ('btn-warning', 'ORANGE')], help_text='select a button color', required=False)), ('button_size', wagtail.core.blocks.ChoiceBlock(blank=True, choices=[('', 'DEFAULT'), ('btn-lg', 'LARGE'), ('btn-sm', 'SMALL')], help_text='select a button size', required=False)), ('custom_class', wagtail.core.blocks.TextBlock(blank=True, help_text='control this element by giving unique class names separated by space and styling the class in css', required=False))))), ('bootstrap_alert', wagtail.core.blocks.StructBlock((('alert_text', wagtail.core.blocks.TextBlock()), ('alert_color', wagtail.core.blocks.ChoiceBlock(blank=True, choices=[('alert-primary', 'DEFAULT'), ('alert-secondary', 'GREY'), ('alert-success', 'GREEN'), ('alert-danger', 'RED'), ('alert-warning', 'ORANGE'), ('alert-dark', 'DARK'), ('alert-light', 'LIGHT')], help_text='select a background color', required=False)), ('is_link', wagtail.core.blocks.BooleanBlock(required=False)), ('alert_link', wagtail.core.blocks.TextBlock(required=False)), ('custom_class', wagtail.core.blocks.TextBlock(blank=True, help_text='control this element by giving unique class names separated by space and styling the class in css', required=False))))), ('bootstrap_button', wagtail.core.blocks.StructBlock((('button_text', wagtail.core.blocks.TextBlock()), ('button_link', wagtail.core.blocks.TextBlock()), ('button_color', wagtail.core.blocks.ChoiceBlock(blank=True, choices=[('btn-primary', 'DEFAULT'), ('btn-danger', 'RED'), ('btn-secondary', 'GREY'), ('btn-success', 'GREEN'), ('btn-warning', 'ORANGE')], help_text='select a button color', required=False)), ('button_size', wagtail.core.blocks.ChoiceBlock(blank=True, choices=[('', 'DEFAULT'), ('btn-lg', 'LARGE'), ('btn-sm', 'SMALL')], help_text='select a button size', required=False)), ('custom_class', wagtail.core.blocks.TextBlock(blank=True, help_text='control this element by giving unique class names separated by space and styling the class in css', required=False))))), ('bootstrap_card', wagtail.core.blocks.StructBlock((('card_width', wagtail.core.blocks.IntegerBlock(help_text='18 works best for card')), ('is_card_img', wagtail.core.blocks.BooleanBlock(required=False)), ('card_img', wagtail.images.blocks.ImageChooserBlock(required=False)), ('card_img_width', wagtail.core.blocks.IntegerBlock(help_text='provide an image width', required=False)), ('card_img_height', wagtail.core.blocks.IntegerBlock(help_text='provide an image height', required=False)), ('card_title', wagtail.core.blocks.TextBlock(blank=True, null=True, required=False)), ('card_text', wagtail.core.blocks.RichTextBlock(blank=True, null=True, required=False)), ('card_bg_color', wagtail.core.blocks.ChoiceBlock(blank=True, choices=[('bg-primary', 'DEFAULT'), ('bg-secondary', 'GREY'), ('bg-success', 'GREEN'), ('bg-danger', 'RED'), ('bg-warning', 'ORANGE'), ('bg-dark', 'DARK'), ('bg-light', 'LIGHT')], help_text='select a background color', required=False)), ('card_text_color', wagtail.core.blocks.ChoiceBlock(blank=True, choices=[('text-primary', 'DEFAULT'), ('text-secondary', 'GREY'), ('text-success', 'GREEN'), ('text-danger', 'RED'), ('text-warning', 'ORANGE'), ('text-dark', 'DARK'), ('text-light', 'LIGHT')], help_text='select a text color', required=False)), ('btn_text', wagtail.core.blocks.TextBlock(required=False)), ('btn_color', wagtail.core.blocks.ChoiceBlock(blank=True, choices=[('btn-primary', 'DEFAULT'), ('btn-danger', 'RED'), ('btn-secondary', 'GREY'), ('btn-success', 'GREEN'), ('btn-warning', 'ORANGE')], help_text='select a button color', required=False)), ('btn_link', wagtail.core.blocks.TextBlock(required=False)), ('custom_class', wagtail.core.blocks.TextBlock(blank=True, help_text='control this element by giving unique class names separated by space and styling the class in css', required=False))))), ('bootstrap_carousel', wagtail.core.blocks.StructBlock((('c_image1', wagtail.images.blocks.ImageChooserBlock(required=True)), ('c_image1_title', wagtail.core.blocks.TextBlock(blank=True, help_text='Give a title for image 1', required=False)), ('c_image1_body', wagtail.core.blocks.TextBlock(blank=True, help_text='Give a body for image 1', required=False)), ('c_image2', wagtail.images.blocks.ImageChooserBlock(required=False)), ('c_image2_title', wagtail.core.blocks.TextBlock(blank=True, help_text='Give a title for image 2', required=False)), ('c_image2_body', wagtail.core.blocks.TextBlock(blank=True, help_text='Give a body for image 2', required=False)), ('c_image3', wagtail.images.blocks.ImageChooserBlock(required=False)), ('c_image3_title', wagtail.core.blocks.TextBlock(blank=True, help_text='Give a title for image 3', required=False)), ('c_image3_body', wagtail.core.blocks.TextBlock(blank=True, help_text='Give a body for image 3', required=False)), ('c_image4', wagtail.images.blocks.ImageChooserBlock(required=False)), ('c_image4_title', wagtail.core.blocks.TextBlock(blank=True, help_text='Give a title for image 4', required=False)), ('c_image4_body', wagtail.core.blocks.TextBlock(blank=True, help_text='Give a body for image 4', required=False)), ('c_image5', wagtail.images.blocks.ImageChooserBlock(required=False)), ('c_image5_title', wagtail.core.blocks.TextBlock(blank=True, help_text='Give a title for image 5', required=False)), ('c_image5_body', wagtail.core.blocks.TextBlock(blank=True, help_text='Give a body for image 5', required=False)), ('custom_class', wagtail.core.blocks.TextBlock(blank=True, help_text='control this element by giving unique class names separated by space and styling the class in css', required=False))))), ('bootstrap_well', wagtail.core.blocks.StructBlock((('message', wagtail.core.blocks.RichTextBlock(help_text='Enter some message inside well')), ('well_bg_color', wagtail.core.blocks.ChoiceBlock(blank=True, choices=[('bg-primary', 'DEFAULT'), ('bg-secondary', 'GREY'), ('bg-success', 'GREEN'), ('bg-danger', 'RED'), ('bg-warning', 'ORANGE'), ('bg-dark', 'DARK'), ('bg-light', 'LIGHT')], help_text='select a background color', required=False)), ('custom_class', wagtail.core.blocks.TextBlock(blank=True, help_text='control this element by giving unique class names separated by space and styling the class in css', required=False))))), ('horizontal_rule', wagtail.core.blocks.StructBlock((('thickness', wagtail.core.blocks.IntegerBlock(blank=True, help_text='Enter a thickness integer value. Eg(10)', required=False)), ('bg_color', wagtail.core.blocks.TextBlock(help_text='Enter a hexcode color for the rule Eg(#000000)', required=True)), ('custom_class', wagtail.core.blocks.TextBlock(blank=True, help_text='control this element by giving unique class names separated by space and styling the class in css', required=False))))), ('bootstrap_media_object', wagtail.core.blocks.StructBlock((('media_img', wagtail.images.blocks.ImageChooserBlock(required=True)), ('media_img_alt', wagtail.core.blocks.TextBlock(required=True)), ('media_img_width', wagtail.core.blocks.IntegerBlock(blank=True, help_text='Enter an image width as an integer value. Eg(50)', required=False)), ('media_img_height', wagtail.core.blocks.IntegerBlock(blank=True, help_text='Enter an image height as an integer value Eg(50)', required=False)), ('heading_text', wagtail.core.blocks.TextBlock(blank=True, help_text='enter some heading text for media object', required=False)), ('body_text', wagtail.core.blocks.RichTextBlock(help_text='Enter some message for the media object', required=True)), ('custom_class', wagtail.core.blocks.TextBlock(blank=True, help_text='control this element by giving unique class names separated by space and styling the class in css', required=False))))), ('placeholder_block', wagtail.core.blocks.StructBlock((('custom_class', wagtail.core.blocks.TextBlock(blank=True, help_text='control this element by giving unique class names separated by space and styling the class in css', required=False)),)))), blank=True, null=True, verbose_name='Footer content block')),
            ],
            options={
                'verbose_name_plural': 'Footer',
            },
        ),
        migrations.CreateModel(
            name='HomePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('hero_text', models.CharField(blank=True, help_text='Write an introduction for the bakery', max_length=255, null=True)),
                ('hero_cta', models.CharField(blank=True, help_text='Text to display on Call to Action', max_length=255, null=True, verbose_name='Hero CTA')),
                ('body', wagtail.core.fields.StreamField((('paragraph_block', wagtail.core.blocks.StructBlock((('custom_class', wagtail.core.blocks.TextBlock(blank=True, help_text='control this element by giving unique class names separated by space and styling the class in css', required=False)), ('body', wagtail.core.blocks.RichTextBlock())))), ('image_block', wagtail.core.blocks.StructBlock((('image', wagtail.images.blocks.ImageChooserBlock(required=True)), ('caption', wagtail.core.blocks.CharBlock(required=False)), ('width', wagtail.core.blocks.CharBlock(required=False)), ('height', wagtail.core.blocks.IntegerBlock(required=False)), ('redirect_url', wagtail.core.blocks.TextBlock(blank=True, help_text='Give a redirect link on clicking the image', null=True, required=False)), ('custom_class', wagtail.core.blocks.TextBlock(blank=True, help_text='control this element by giving unique class names separated by space and styling the class in css', required=False))))), ('embed_block', wagtail.core.blocks.StructBlock((('embed', wagtail.embeds.blocks.EmbedBlock()), ('custom_class', wagtail.core.blocks.TextBlock(blank=True, help_text='control this element by giving unique class names separated by space and styling the class in css', required=False))))), ('heading_block', wagtail.core.blocks.StructBlock((('heading_text', wagtail.core.blocks.CharBlock(classname='title', required=True)), ('size', wagtail.core.blocks.ChoiceBlock(blank=True, choices=[('', 'Select a header size'), ('h1', 'H1'), ('h2', 'H2'), ('h3', 'H3'), ('h4', 'H4')], required=False)), ('custom_class', wagtail.core.blocks.TextBlock(blank=True, help_text='control this element by giving unique class names separated by space and styling the class in css', required=False))))), ('bootstrap_jumbotron', wagtail.core.blocks.StructBlock((('title', wagtail.core.blocks.TextBlock()), ('body', wagtail.core.blocks.RichTextBlock()), ('button_text', wagtail.core.blocks.TextBlock(required=False)), ('button_link', wagtail.core.blocks.TextBlock(required=False)), ('button_color', wagtail.core.blocks.ChoiceBlock(blank=True, choices=[('btn-primary', 'DEFAULT'), ('btn-danger', 'RED'), ('btn-secondary', 'GREY'), ('btn-success', 'GREEN'), ('btn-warning', 'ORANGE')], help_text='select a button color', required=False)), ('button_size', wagtail.core.blocks.ChoiceBlock(blank=True, choices=[('', 'DEFAULT'), ('btn-lg', 'LARGE'), ('btn-sm', 'SMALL')], help_text='select a button size', required=False)), ('custom_class', wagtail.core.blocks.TextBlock(blank=True, help_text='control this element by giving unique class names separated by space and styling the class in css', required=False))))), ('bootstrap_alert', wagtail.core.blocks.StructBlock((('alert_text', wagtail.core.blocks.TextBlock()), ('alert_color', wagtail.core.blocks.ChoiceBlock(blank=True, choices=[('alert-primary', 'DEFAULT'), ('alert-secondary', 'GREY'), ('alert-success', 'GREEN'), ('alert-danger', 'RED'), ('alert-warning', 'ORANGE'), ('alert-dark', 'DARK'), ('alert-light', 'LIGHT')], help_text='select a background color', required=False)), ('is_link', wagtail.core.blocks.BooleanBlock(required=False)), ('alert_link', wagtail.core.blocks.TextBlock(required=False)), ('custom_class', wagtail.core.blocks.TextBlock(blank=True, help_text='control this element by giving unique class names separated by space and styling the class in css', required=False))))), ('bootstrap_button', wagtail.core.blocks.StructBlock((('button_text', wagtail.core.blocks.TextBlock()), ('button_link', wagtail.core.blocks.TextBlock()), ('button_color', wagtail.core.blocks.ChoiceBlock(blank=True, choices=[('btn-primary', 'DEFAULT'), ('btn-danger', 'RED'), ('btn-secondary', 'GREY'), ('btn-success', 'GREEN'), ('btn-warning', 'ORANGE')], help_text='select a button color', required=False)), ('button_size', wagtail.core.blocks.ChoiceBlock(blank=True, choices=[('', 'DEFAULT'), ('btn-lg', 'LARGE'), ('btn-sm', 'SMALL')], help_text='select a button size', required=False)), ('custom_class', wagtail.core.blocks.TextBlock(blank=True, help_text='control this element by giving unique class names separated by space and styling the class in css', required=False))))), ('bootstrap_card', wagtail.core.blocks.StructBlock((('card_width', wagtail.core.blocks.IntegerBlock(help_text='18 works best for card')), ('is_card_img', wagtail.core.blocks.BooleanBlock(required=False)), ('card_img', wagtail.images.blocks.ImageChooserBlock(required=False)), ('card_img_width', wagtail.core.blocks.IntegerBlock(help_text='provide an image width', required=False)), ('card_img_height', wagtail.core.blocks.IntegerBlock(help_text='provide an image height', required=False)), ('card_title', wagtail.core.blocks.TextBlock(blank=True, null=True, required=False)), ('card_text', wagtail.core.blocks.RichTextBlock(blank=True, null=True, required=False)), ('card_bg_color', wagtail.core.blocks.ChoiceBlock(blank=True, choices=[('bg-primary', 'DEFAULT'), ('bg-secondary', 'GREY'), ('bg-success', 'GREEN'), ('bg-danger', 'RED'), ('bg-warning', 'ORANGE'), ('bg-dark', 'DARK'), ('bg-light', 'LIGHT')], help_text='select a background color', required=False)), ('card_text_color', wagtail.core.blocks.ChoiceBlock(blank=True, choices=[('text-primary', 'DEFAULT'), ('text-secondary', 'GREY'), ('text-success', 'GREEN'), ('text-danger', 'RED'), ('text-warning', 'ORANGE'), ('text-dark', 'DARK'), ('text-light', 'LIGHT')], help_text='select a text color', required=False)), ('btn_text', wagtail.core.blocks.TextBlock(required=False)), ('btn_color', wagtail.core.blocks.ChoiceBlock(blank=True, choices=[('btn-primary', 'DEFAULT'), ('btn-danger', 'RED'), ('btn-secondary', 'GREY'), ('btn-success', 'GREEN'), ('btn-warning', 'ORANGE')], help_text='select a button color', required=False)), ('btn_link', wagtail.core.blocks.TextBlock(required=False)), ('custom_class', wagtail.core.blocks.TextBlock(blank=True, help_text='control this element by giving unique class names separated by space and styling the class in css', required=False))))), ('bootstrap_carousel', wagtail.core.blocks.StructBlock((('c_image1', wagtail.images.blocks.ImageChooserBlock(required=True)), ('c_image1_title', wagtail.core.blocks.TextBlock(blank=True, help_text='Give a title for image 1', required=False)), ('c_image1_body', wagtail.core.blocks.TextBlock(blank=True, help_text='Give a body for image 1', required=False)), ('c_image2', wagtail.images.blocks.ImageChooserBlock(required=False)), ('c_image2_title', wagtail.core.blocks.TextBlock(blank=True, help_text='Give a title for image 2', required=False)), ('c_image2_body', wagtail.core.blocks.TextBlock(blank=True, help_text='Give a body for image 2', required=False)), ('c_image3', wagtail.images.blocks.ImageChooserBlock(required=False)), ('c_image3_title', wagtail.core.blocks.TextBlock(blank=True, help_text='Give a title for image 3', required=False)), ('c_image3_body', wagtail.core.blocks.TextBlock(blank=True, help_text='Give a body for image 3', required=False)), ('c_image4', wagtail.images.blocks.ImageChooserBlock(required=False)), ('c_image4_title', wagtail.core.blocks.TextBlock(blank=True, help_text='Give a title for image 4', required=False)), ('c_image4_body', wagtail.core.blocks.TextBlock(blank=True, help_text='Give a body for image 4', required=False)), ('c_image5', wagtail.images.blocks.ImageChooserBlock(required=False)), ('c_image5_title', wagtail.core.blocks.TextBlock(blank=True, help_text='Give a title for image 5', required=False)), ('c_image5_body', wagtail.core.blocks.TextBlock(blank=True, help_text='Give a body for image 5', required=False)), ('custom_class', wagtail.core.blocks.TextBlock(blank=True, help_text='control this element by giving unique class names separated by space and styling the class in css', required=False))))), ('bootstrap_well', wagtail.core.blocks.StructBlock((('message', wagtail.core.blocks.RichTextBlock(help_text='Enter some message inside well')), ('well_bg_color', wagtail.core.blocks.ChoiceBlock(blank=True, choices=[('bg-primary', 'DEFAULT'), ('bg-secondary', 'GREY'), ('bg-success', 'GREEN'), ('bg-danger', 'RED'), ('bg-warning', 'ORANGE'), ('bg-dark', 'DARK'), ('bg-light', 'LIGHT')], help_text='select a background color', required=False)), ('custom_class', wagtail.core.blocks.TextBlock(blank=True, help_text='control this element by giving unique class names separated by space and styling the class in css', required=False))))), ('horizontal_rule', wagtail.core.blocks.StructBlock((('thickness', wagtail.core.blocks.IntegerBlock(blank=True, help_text='Enter a thickness integer value. Eg(10)', required=False)), ('bg_color', wagtail.core.blocks.TextBlock(help_text='Enter a hexcode color for the rule Eg(#000000)', required=True)), ('custom_class', wagtail.core.blocks.TextBlock(blank=True, help_text='control this element by giving unique class names separated by space and styling the class in css', required=False))))), ('bootstrap_media_object', wagtail.core.blocks.StructBlock((('media_img', wagtail.images.blocks.ImageChooserBlock(required=True)), ('media_img_alt', wagtail.core.blocks.TextBlock(required=True)), ('media_img_width', wagtail.core.blocks.IntegerBlock(blank=True, help_text='Enter an image width as an integer value. Eg(50)', required=False)), ('media_img_height', wagtail.core.blocks.IntegerBlock(blank=True, help_text='Enter an image height as an integer value Eg(50)', required=False)), ('heading_text', wagtail.core.blocks.TextBlock(blank=True, help_text='enter some heading text for media object', required=False)), ('body_text', wagtail.core.blocks.RichTextBlock(help_text='Enter some message for the media object', required=True)), ('custom_class', wagtail.core.blocks.TextBlock(blank=True, help_text='control this element by giving unique class names separated by space and styling the class in css', required=False))))), ('placeholder_block', wagtail.core.blocks.StructBlock((('custom_class', wagtail.core.blocks.TextBlock(blank=True, help_text='control this element by giving unique class names separated by space and styling the class in css', required=False)),)))), blank=True, null=True, verbose_name='Home content block')),
                ('features_text', wagtail.core.fields.RichTextField(blank=True, help_text='Write some feature description', null=True)),
                ('feature_1_title', models.CharField(help_text='Feature Title 1', max_length=255)),
                ('feature_1_text', wagtail.core.fields.RichTextField(blank=True, help_text='Write some feature 1 text description', null=True)),
                ('feature_2_title', models.CharField(help_text='Feature Title 2', max_length=255)),
                ('feature_2_text', wagtail.core.fields.RichTextField(blank=True, help_text='Write some feature 2 text description', null=True)),
                ('feature_3_title', models.CharField(help_text='Feature Title 3', max_length=255)),
                ('feature_3_text', wagtail.core.fields.RichTextField(blank=True, help_text='Write some feature 3 text description', null=True)),
                ('feature_4_title', models.CharField(help_text='Feature Title 4', max_length=255)),
                ('feature_4_text', wagtail.core.fields.RichTextField(blank=True, help_text='Write some feature 4 text description', null=True)),
                ('custom_body_message', wagtail.core.fields.RichTextField(blank=True, help_text='Write some custom body message!', null=True)),
                ('show_navbar', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], default=True, help_text="Choose yes if you want to display the navbar on home page and no if you don't want to.", max_length=5)),
                ('show_nav_extra', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], default=True, help_text="Choose yes if you want the secondary navbar to show on home page or no if you don't want to", max_length=5)),
                ('banner_image', models.ForeignKey(blank=True, help_text='Choose Banner Image', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
                ('feature_logo_1', models.ForeignKey(blank=True, help_text='Feature Logo 1', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
                ('feature_logo_2', models.ForeignKey(blank=True, help_text='Feature Logo 2', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
                ('feature_logo_3', models.ForeignKey(blank=True, help_text='Feature Logo 3', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
                ('feature_logo_4', models.ForeignKey(blank=True, help_text='Feature Logo 4', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
                ('hero_cta_link', models.ForeignKey(blank=True, help_text='Choose a page to link to for the Call to Action', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.Page', verbose_name='Hero CTA link')),
                ('image', models.ForeignKey(blank=True, help_text='Homepage image', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
                ('site_logo', models.ForeignKey(blank=True, help_text='Site Logo', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='Navbar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logo_redirect_link', models.CharField(blank=True, default='#', help_text='Provide a redirection link for the logo or logo text Eg. (https://www.google.com/)', max_length=255, null=True)),
                ('logo_width', models.IntegerField(blank=True, default='144', help_text='Provide a width for the logo', null=True)),
                ('logo_height', models.IntegerField(blank=True, default='43', help_text='Provide a height for the logo', null=True)),
                ('logo_text', models.CharField(blank=True, help_text='Give a title text as an alternative to logo. Eg.(SEAGRID)', max_length=255, null=True)),
                ('logo_text_color', models.CharField(blank=True, help_text='Give a color for logo text if you have a logo text Eg.(#FFFFFF)', max_length=100, null=True)),
                ('logo_text_size', models.IntegerField(blank=True, help_text='Give a text size as number of pixels Eg.(30)', null=True)),
                ('logo', models.ForeignKey(blank=True, help_text='Brand Logo', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
            ],
            options={
                'verbose_name_plural': 'Navbar',
            },
        ),
        migrations.CreateModel(
            name='NavExtra',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nav_logo_width', models.IntegerField(blank=True, help_text='Navbar Logo width', null=True)),
                ('nav_logo_height', models.IntegerField(blank=True, help_text='Navbar Logo height', null=True)),
                ('nav_text1', models.CharField(help_text='Give a text for link 1', max_length=25)),
                ('faicon1', models.CharField(help_text='Provide a class name of icon from font awesome website', max_length=50)),
                ('nav_link1', models.CharField(help_text='Provide a link address for link 1', max_length=255)),
                ('nav_text2', models.CharField(blank=True, help_text='Give a text for link 2', max_length=25, null=True)),
                ('faicon2', models.CharField(blank=True, help_text='Provide a class name of icon from font awesome website', max_length=50, null=True)),
                ('nav_link2', models.CharField(blank=True, help_text='Provide a link address for link 2', max_length=255, null=True)),
                ('nav_text3', models.CharField(blank=True, help_text='Give a text for link 3', max_length=25, null=True)),
                ('faicon3', models.CharField(blank=True, help_text='Provide a class name of icon from font awesome website', max_length=50, null=True)),
                ('nav_link3', models.CharField(blank=True, help_text='Provide a link address for link 3', max_length=255, null=True)),
                ('custom_class', models.CharField(blank=True, help_text='Provide custom class names separated by space to gain extra control of nav', max_length=255, null=True)),
                ('nav_logo', models.ForeignKey(blank=True, help_text='Nav Extra Logo', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
            ],
            options={
                'verbose_name_plural': 'Nav extra',
            },
        ),
        migrations.CreateModel(
            name='RowBlankPageRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('body', wagtail.core.fields.StreamField((('paragraph_block', wagtail.core.blocks.StructBlock((('custom_class', wagtail.core.blocks.TextBlock(blank=True, help_text='control this element by giving unique class names separated by space and styling the class in css', required=False)), ('body', wagtail.core.blocks.RichTextBlock())))), ('image_block', wagtail.core.blocks.StructBlock((('image', wagtail.images.blocks.ImageChooserBlock(required=True)), ('caption', wagtail.core.blocks.CharBlock(required=False)), ('width', wagtail.core.blocks.CharBlock(required=False)), ('height', wagtail.core.blocks.IntegerBlock(required=False)), ('redirect_url', wagtail.core.blocks.TextBlock(blank=True, help_text='Give a redirect link on clicking the image', null=True, required=False)), ('custom_class', wagtail.core.blocks.TextBlock(blank=True, help_text='control this element by giving unique class names separated by space and styling the class in css', required=False))))), ('embed_block', wagtail.core.blocks.StructBlock((('embed', wagtail.embeds.blocks.EmbedBlock()), ('custom_class', wagtail.core.blocks.TextBlock(blank=True, help_text='control this element by giving unique class names separated by space and styling the class in css', required=False))))), ('heading_block', wagtail.core.blocks.StructBlock((('heading_text', wagtail.core.blocks.CharBlock(classname='title', required=True)), ('size', wagtail.core.blocks.ChoiceBlock(blank=True, choices=[('', 'Select a header size'), ('h1', 'H1'), ('h2', 'H2'), ('h3', 'H3'), ('h4', 'H4')], required=False)), ('custom_class', wagtail.core.blocks.TextBlock(blank=True, help_text='control this element by giving unique class names separated by space and styling the class in css', required=False))))), ('bootstrap_jumbotron', wagtail.core.blocks.StructBlock((('title', wagtail.core.blocks.TextBlock()), ('body', wagtail.core.blocks.RichTextBlock()), ('button_text', wagtail.core.blocks.TextBlock(required=False)), ('button_link', wagtail.core.blocks.TextBlock(required=False)), ('button_color', wagtail.core.blocks.ChoiceBlock(blank=True, choices=[('btn-primary', 'DEFAULT'), ('btn-danger', 'RED'), ('btn-secondary', 'GREY'), ('btn-success', 'GREEN'), ('btn-warning', 'ORANGE')], help_text='select a button color', required=False)), ('button_size', wagtail.core.blocks.ChoiceBlock(blank=True, choices=[('', 'DEFAULT'), ('btn-lg', 'LARGE'), ('btn-sm', 'SMALL')], help_text='select a button size', required=False)), ('custom_class', wagtail.core.blocks.TextBlock(blank=True, help_text='control this element by giving unique class names separated by space and styling the class in css', required=False))))), ('bootstrap_alert', wagtail.core.blocks.StructBlock((('alert_text', wagtail.core.blocks.TextBlock()), ('alert_color', wagtail.core.blocks.ChoiceBlock(blank=True, choices=[('alert-primary', 'DEFAULT'), ('alert-secondary', 'GREY'), ('alert-success', 'GREEN'), ('alert-danger', 'RED'), ('alert-warning', 'ORANGE'), ('alert-dark', 'DARK'), ('alert-light', 'LIGHT')], help_text='select a background color', required=False)), ('is_link', wagtail.core.blocks.BooleanBlock(required=False)), ('alert_link', wagtail.core.blocks.TextBlock(required=False)), ('custom_class', wagtail.core.blocks.TextBlock(blank=True, help_text='control this element by giving unique class names separated by space and styling the class in css', required=False))))), ('bootstrap_button', wagtail.core.blocks.StructBlock((('button_text', wagtail.core.blocks.TextBlock()), ('button_link', wagtail.core.blocks.TextBlock()), ('button_color', wagtail.core.blocks.ChoiceBlock(blank=True, choices=[('btn-primary', 'DEFAULT'), ('btn-danger', 'RED'), ('btn-secondary', 'GREY'), ('btn-success', 'GREEN'), ('btn-warning', 'ORANGE')], help_text='select a button color', required=False)), ('button_size', wagtail.core.blocks.ChoiceBlock(blank=True, choices=[('', 'DEFAULT'), ('btn-lg', 'LARGE'), ('btn-sm', 'SMALL')], help_text='select a button size', required=False)), ('custom_class', wagtail.core.blocks.TextBlock(blank=True, help_text='control this element by giving unique class names separated by space and styling the class in css', required=False))))), ('bootstrap_card', wagtail.core.blocks.StructBlock((('card_width', wagtail.core.blocks.IntegerBlock(help_text='18 works best for card')), ('is_card_img', wagtail.core.blocks.BooleanBlock(required=False)), ('card_img', wagtail.images.blocks.ImageChooserBlock(required=False)), ('card_img_width', wagtail.core.blocks.IntegerBlock(help_text='provide an image width', required=False)), ('card_img_height', wagtail.core.blocks.IntegerBlock(help_text='provide an image height', required=False)), ('card_title', wagtail.core.blocks.TextBlock(blank=True, null=True, required=False)), ('card_text', wagtail.core.blocks.RichTextBlock(blank=True, null=True, required=False)), ('card_bg_color', wagtail.core.blocks.ChoiceBlock(blank=True, choices=[('bg-primary', 'DEFAULT'), ('bg-secondary', 'GREY'), ('bg-success', 'GREEN'), ('bg-danger', 'RED'), ('bg-warning', 'ORANGE'), ('bg-dark', 'DARK'), ('bg-light', 'LIGHT')], help_text='select a background color', required=False)), ('card_text_color', wagtail.core.blocks.ChoiceBlock(blank=True, choices=[('text-primary', 'DEFAULT'), ('text-secondary', 'GREY'), ('text-success', 'GREEN'), ('text-danger', 'RED'), ('text-warning', 'ORANGE'), ('text-dark', 'DARK'), ('text-light', 'LIGHT')], help_text='select a text color', required=False)), ('btn_text', wagtail.core.blocks.TextBlock(required=False)), ('btn_color', wagtail.core.blocks.ChoiceBlock(blank=True, choices=[('btn-primary', 'DEFAULT'), ('btn-danger', 'RED'), ('btn-secondary', 'GREY'), ('btn-success', 'GREEN'), ('btn-warning', 'ORANGE')], help_text='select a button color', required=False)), ('btn_link', wagtail.core.blocks.TextBlock(required=False)), ('custom_class', wagtail.core.blocks.TextBlock(blank=True, help_text='control this element by giving unique class names separated by space and styling the class in css', required=False))))), ('bootstrap_carousel', wagtail.core.blocks.StructBlock((('c_image1', wagtail.images.blocks.ImageChooserBlock(required=True)), ('c_image1_title', wagtail.core.blocks.TextBlock(blank=True, help_text='Give a title for image 1', required=False)), ('c_image1_body', wagtail.core.blocks.TextBlock(blank=True, help_text='Give a body for image 1', required=False)), ('c_image2', wagtail.images.blocks.ImageChooserBlock(required=False)), ('c_image2_title', wagtail.core.blocks.TextBlock(blank=True, help_text='Give a title for image 2', required=False)), ('c_image2_body', wagtail.core.blocks.TextBlock(blank=True, help_text='Give a body for image 2', required=False)), ('c_image3', wagtail.images.blocks.ImageChooserBlock(required=False)), ('c_image3_title', wagtail.core.blocks.TextBlock(blank=True, help_text='Give a title for image 3', required=False)), ('c_image3_body', wagtail.core.blocks.TextBlock(blank=True, help_text='Give a body for image 3', required=False)), ('c_image4', wagtail.images.blocks.ImageChooserBlock(required=False)), ('c_image4_title', wagtail.core.blocks.TextBlock(blank=True, help_text='Give a title for image 4', required=False)), ('c_image4_body', wagtail.core.blocks.TextBlock(blank=True, help_text='Give a body for image 4', required=False)), ('c_image5', wagtail.images.blocks.ImageChooserBlock(required=False)), ('c_image5_title', wagtail.core.blocks.TextBlock(blank=True, help_text='Give a title for image 5', required=False)), ('c_image5_body', wagtail.core.blocks.TextBlock(blank=True, help_text='Give a body for image 5', required=False)), ('custom_class', wagtail.core.blocks.TextBlock(blank=True, help_text='control this element by giving unique class names separated by space and styling the class in css', required=False))))), ('bootstrap_well', wagtail.core.blocks.StructBlock((('message', wagtail.core.blocks.RichTextBlock(help_text='Enter some message inside well')), ('well_bg_color', wagtail.core.blocks.ChoiceBlock(blank=True, choices=[('bg-primary', 'DEFAULT'), ('bg-secondary', 'GREY'), ('bg-success', 'GREEN'), ('bg-danger', 'RED'), ('bg-warning', 'ORANGE'), ('bg-dark', 'DARK'), ('bg-light', 'LIGHT')], help_text='select a background color', required=False)), ('custom_class', wagtail.core.blocks.TextBlock(blank=True, help_text='control this element by giving unique class names separated by space and styling the class in css', required=False))))), ('horizontal_rule', wagtail.core.blocks.StructBlock((('thickness', wagtail.core.blocks.IntegerBlock(blank=True, help_text='Enter a thickness integer value. Eg(10)', required=False)), ('bg_color', wagtail.core.blocks.TextBlock(help_text='Enter a hexcode color for the rule Eg(#000000)', required=True)), ('custom_class', wagtail.core.blocks.TextBlock(blank=True, help_text='control this element by giving unique class names separated by space and styling the class in css', required=False))))), ('bootstrap_media_object', wagtail.core.blocks.StructBlock((('media_img', wagtail.images.blocks.ImageChooserBlock(required=True)), ('media_img_alt', wagtail.core.blocks.TextBlock(required=True)), ('media_img_width', wagtail.core.blocks.IntegerBlock(blank=True, help_text='Enter an image width as an integer value. Eg(50)', required=False)), ('media_img_height', wagtail.core.blocks.IntegerBlock(blank=True, help_text='Enter an image height as an integer value Eg(50)', required=False)), ('heading_text', wagtail.core.blocks.TextBlock(blank=True, help_text='enter some heading text for media object', required=False)), ('body_text', wagtail.core.blocks.RichTextBlock(help_text='Enter some message for the media object', required=True)), ('custom_class', wagtail.core.blocks.TextBlock(blank=True, help_text='control this element by giving unique class names separated by space and styling the class in css', required=False))))), ('placeholder_block', wagtail.core.blocks.StructBlock((('custom_class', wagtail.core.blocks.TextBlock(blank=True, help_text='control this element by giving unique class names separated by space and styling the class in css', required=False)),)))), blank=True, null=True, verbose_name='Row Content')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='row', to='django_airavata_wagtail_base.BlankPage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
    ]
