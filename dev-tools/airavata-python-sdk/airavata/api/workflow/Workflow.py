#
# Autogenerated by Thrift Compiler (0.22.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:enum,type_hints
#

from __future__ import annotations
import typing
from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec
from uuid import UUID
from enum import IntEnum

import sys
import airavata.base.api.BaseAPI
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(airavata.base.api.BaseAPI.Iface):
    def getAllWorkflows(self) -> list[str]:
        pass

    def getWorkflow(self, workflowTemplateId: str) -> airavata.model.ttypes.WorkflowModel:
        """
        Parameters:
         - workflowTemplateId

        """
        pass

    def deleteWorkflow(self, workflowTemplateId: str) -> None:
        """
        Parameters:
         - workflowTemplateId

        """
        pass

    def registerWorkflow(self, workflow: airavata.model.ttypes.WorkflowModel) -> str:
        """
        Parameters:
         - workflow

        """
        pass

    def updateWorkflow(self, workflowTemplateId: str, workflow: airavata.model.ttypes.WorkflowModel) -> None:
        """
        Parameters:
         - workflowTemplateId
         - workflow

        """
        pass

    def getWorkflowTemplateId(self, workflowName: str) -> str:
        """
        Parameters:
         - workflowName

        """
        pass

    def isWorkflowExistWithName(self, workflowName: str) -> bool:
        """
        Parameters:
         - workflowName

        """
        pass


class Client(airavata.base.api.BaseAPI.Client, Iface):
    def __init__(self, iprot, oprot=None):
        airavata.base.api.BaseAPI.Client.__init__(self, iprot, oprot)

    def getAllWorkflows(self) -> list[str]:
        self.send_getAllWorkflows()
        return self.recv_getAllWorkflows()

    def send_getAllWorkflows(self):
        self._oprot.writeMessageBegin('getAllWorkflows', TMessageType.CALL, self._seqid)
        args = getAllWorkflows_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getAllWorkflows(self) -> list[str]:
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getAllWorkflows_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ire is not None:
            raise result.ire
        if result.ace is not None:
            raise result.ace
        if result.ase is not None:
            raise result.ase
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getAllWorkflows failed: unknown result")

    def getWorkflow(self, workflowTemplateId: str) -> airavata.model.ttypes.WorkflowModel:
        """
        Parameters:
         - workflowTemplateId

        """
        self.send_getWorkflow(workflowTemplateId)
        return self.recv_getWorkflow()

    def send_getWorkflow(self, workflowTemplateId: str):
        self._oprot.writeMessageBegin('getWorkflow', TMessageType.CALL, self._seqid)
        args = getWorkflow_args()
        args.workflowTemplateId = workflowTemplateId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getWorkflow(self) -> airavata.model.ttypes.WorkflowModel:
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getWorkflow_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ire is not None:
            raise result.ire
        if result.ace is not None:
            raise result.ace
        if result.ase is not None:
            raise result.ase
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getWorkflow failed: unknown result")

    def deleteWorkflow(self, workflowTemplateId: str) -> None:
        """
        Parameters:
         - workflowTemplateId

        """
        self.send_deleteWorkflow(workflowTemplateId)
        self.recv_deleteWorkflow()

    def send_deleteWorkflow(self, workflowTemplateId: str):
        self._oprot.writeMessageBegin('deleteWorkflow', TMessageType.CALL, self._seqid)
        args = deleteWorkflow_args()
        args.workflowTemplateId = workflowTemplateId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_deleteWorkflow(self) -> None:
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = deleteWorkflow_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.ire is not None:
            raise result.ire
        if result.ace is not None:
            raise result.ace
        if result.ase is not None:
            raise result.ase
        return

    def registerWorkflow(self, workflow: airavata.model.ttypes.WorkflowModel) -> str:
        """
        Parameters:
         - workflow

        """
        self.send_registerWorkflow(workflow)
        return self.recv_registerWorkflow()

    def send_registerWorkflow(self, workflow: airavata.model.ttypes.WorkflowModel):
        self._oprot.writeMessageBegin('registerWorkflow', TMessageType.CALL, self._seqid)
        args = registerWorkflow_args()
        args.workflow = workflow
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_registerWorkflow(self) -> str:
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = registerWorkflow_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ire is not None:
            raise result.ire
        if result.ace is not None:
            raise result.ace
        if result.ase is not None:
            raise result.ase
        raise TApplicationException(TApplicationException.MISSING_RESULT, "registerWorkflow failed: unknown result")

    def updateWorkflow(self, workflowTemplateId: str, workflow: airavata.model.ttypes.WorkflowModel) -> None:
        """
        Parameters:
         - workflowTemplateId
         - workflow

        """
        self.send_updateWorkflow(workflowTemplateId, workflow)
        self.recv_updateWorkflow()

    def send_updateWorkflow(self, workflowTemplateId: str, workflow: airavata.model.ttypes.WorkflowModel):
        self._oprot.writeMessageBegin('updateWorkflow', TMessageType.CALL, self._seqid)
        args = updateWorkflow_args()
        args.workflowTemplateId = workflowTemplateId
        args.workflow = workflow
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_updateWorkflow(self) -> None:
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = updateWorkflow_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.ire is not None:
            raise result.ire
        if result.ace is not None:
            raise result.ace
        if result.ase is not None:
            raise result.ase
        return

    def getWorkflowTemplateId(self, workflowName: str) -> str:
        """
        Parameters:
         - workflowName

        """
        self.send_getWorkflowTemplateId(workflowName)
        return self.recv_getWorkflowTemplateId()

    def send_getWorkflowTemplateId(self, workflowName: str):
        self._oprot.writeMessageBegin('getWorkflowTemplateId', TMessageType.CALL, self._seqid)
        args = getWorkflowTemplateId_args()
        args.workflowName = workflowName
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getWorkflowTemplateId(self) -> str:
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getWorkflowTemplateId_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ire is not None:
            raise result.ire
        if result.ace is not None:
            raise result.ace
        if result.ase is not None:
            raise result.ase
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getWorkflowTemplateId failed: unknown result")

    def isWorkflowExistWithName(self, workflowName: str) -> bool:
        """
        Parameters:
         - workflowName

        """
        self.send_isWorkflowExistWithName(workflowName)
        return self.recv_isWorkflowExistWithName()

    def send_isWorkflowExistWithName(self, workflowName: str):
        self._oprot.writeMessageBegin('isWorkflowExistWithName', TMessageType.CALL, self._seqid)
        args = isWorkflowExistWithName_args()
        args.workflowName = workflowName
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_isWorkflowExistWithName(self) -> bool:
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = isWorkflowExistWithName_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ire is not None:
            raise result.ire
        if result.ace is not None:
            raise result.ace
        if result.ase is not None:
            raise result.ase
        raise TApplicationException(TApplicationException.MISSING_RESULT, "isWorkflowExistWithName failed: unknown result")


class Processor(airavata.base.api.BaseAPI.Processor, Iface, TProcessor):
    def __init__(self, handler):
        airavata.base.api.BaseAPI.Processor.__init__(self, handler)
        self._processMap["getAllWorkflows"] = Processor.process_getAllWorkflows
        self._processMap["getWorkflow"] = Processor.process_getWorkflow
        self._processMap["deleteWorkflow"] = Processor.process_deleteWorkflow
        self._processMap["registerWorkflow"] = Processor.process_registerWorkflow
        self._processMap["updateWorkflow"] = Processor.process_updateWorkflow
        self._processMap["getWorkflowTemplateId"] = Processor.process_getWorkflowTemplateId
        self._processMap["isWorkflowExistWithName"] = Processor.process_isWorkflowExistWithName
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_getAllWorkflows(self, seqid, iprot, oprot):
        args = getAllWorkflows_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getAllWorkflows_result()
        try:
            result.success = self._handler.getAllWorkflows()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except airavata.api.error.ttypes.InvalidRequestException as ire:
            msg_type = TMessageType.REPLY
            result.ire = ire
        except airavata.api.error.ttypes.AiravataClientException as ace:
            msg_type = TMessageType.REPLY
            result.ace = ace
        except airavata.api.error.ttypes.AiravataSystemException as ase:
            msg_type = TMessageType.REPLY
            result.ase = ase
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getAllWorkflows", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getWorkflow(self, seqid, iprot, oprot):
        args = getWorkflow_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getWorkflow_result()
        try:
            result.success = self._handler.getWorkflow(args.workflowTemplateId)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except airavata.api.error.ttypes.InvalidRequestException as ire:
            msg_type = TMessageType.REPLY
            result.ire = ire
        except airavata.api.error.ttypes.AiravataClientException as ace:
            msg_type = TMessageType.REPLY
            result.ace = ace
        except airavata.api.error.ttypes.AiravataSystemException as ase:
            msg_type = TMessageType.REPLY
            result.ase = ase
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getWorkflow", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_deleteWorkflow(self, seqid, iprot, oprot):
        args = deleteWorkflow_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = deleteWorkflow_result()
        try:
            self._handler.deleteWorkflow(args.workflowTemplateId)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except airavata.api.error.ttypes.InvalidRequestException as ire:
            msg_type = TMessageType.REPLY
            result.ire = ire
        except airavata.api.error.ttypes.AiravataClientException as ace:
            msg_type = TMessageType.REPLY
            result.ace = ace
        except airavata.api.error.ttypes.AiravataSystemException as ase:
            msg_type = TMessageType.REPLY
            result.ase = ase
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("deleteWorkflow", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_registerWorkflow(self, seqid, iprot, oprot):
        args = registerWorkflow_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = registerWorkflow_result()
        try:
            result.success = self._handler.registerWorkflow(args.workflow)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except airavata.api.error.ttypes.InvalidRequestException as ire:
            msg_type = TMessageType.REPLY
            result.ire = ire
        except airavata.api.error.ttypes.AiravataClientException as ace:
            msg_type = TMessageType.REPLY
            result.ace = ace
        except airavata.api.error.ttypes.AiravataSystemException as ase:
            msg_type = TMessageType.REPLY
            result.ase = ase
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("registerWorkflow", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_updateWorkflow(self, seqid, iprot, oprot):
        args = updateWorkflow_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updateWorkflow_result()
        try:
            self._handler.updateWorkflow(args.workflowTemplateId, args.workflow)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except airavata.api.error.ttypes.InvalidRequestException as ire:
            msg_type = TMessageType.REPLY
            result.ire = ire
        except airavata.api.error.ttypes.AiravataClientException as ace:
            msg_type = TMessageType.REPLY
            result.ace = ace
        except airavata.api.error.ttypes.AiravataSystemException as ase:
            msg_type = TMessageType.REPLY
            result.ase = ase
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("updateWorkflow", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getWorkflowTemplateId(self, seqid, iprot, oprot):
        args = getWorkflowTemplateId_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getWorkflowTemplateId_result()
        try:
            result.success = self._handler.getWorkflowTemplateId(args.workflowName)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except airavata.api.error.ttypes.InvalidRequestException as ire:
            msg_type = TMessageType.REPLY
            result.ire = ire
        except airavata.api.error.ttypes.AiravataClientException as ace:
            msg_type = TMessageType.REPLY
            result.ace = ace
        except airavata.api.error.ttypes.AiravataSystemException as ase:
            msg_type = TMessageType.REPLY
            result.ase = ase
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getWorkflowTemplateId", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_isWorkflowExistWithName(self, seqid, iprot, oprot):
        args = isWorkflowExistWithName_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = isWorkflowExistWithName_result()
        try:
            result.success = self._handler.isWorkflowExistWithName(args.workflowName)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except airavata.api.error.ttypes.InvalidRequestException as ire:
            msg_type = TMessageType.REPLY
            result.ire = ire
        except airavata.api.error.ttypes.AiravataClientException as ace:
            msg_type = TMessageType.REPLY
            result.ace = ace
        except airavata.api.error.ttypes.AiravataSystemException as ase:
            msg_type = TMessageType.REPLY
            result.ase = ase
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("isWorkflowExistWithName", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class getAllWorkflows_args(object):
    thrift_spec: typing.Any = None


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getAllWorkflows_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getAllWorkflows_args)
getAllWorkflows_args.thrift_spec = (
)


class getAllWorkflows_result(object):
    """
    Attributes:
     - success
     - ire
     - ace
     - ase

    """
    thrift_spec: typing.Any = None


    def __init__(self, success: typing.Optional[list[str]] = None, ire: typing.Optional[airavata.api.error.ttypes.InvalidRequestException] = None, ace: typing.Optional[airavata.api.error.ttypes.AiravataClientException] = None, ase: typing.Optional[airavata.api.error.ttypes.AiravataSystemException] = None,):
        self.success: typing.Optional[list[str]] = success
        self.ire: typing.Optional[airavata.api.error.ttypes.InvalidRequestException] = ire
        self.ace: typing.Optional[airavata.api.error.ttypes.AiravataClientException] = ace
        self.ase: typing.Optional[airavata.api.error.ttypes.AiravataSystemException] = ase

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.success.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ire = airavata.api.error.ttypes.InvalidRequestException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ace = airavata.api.error.ttypes.AiravataClientException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ase = airavata.api.error.ttypes.AiravataSystemException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getAllWorkflows_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRING, len(self.success))
            for iter6 in self.success:
                oprot.writeString(iter6.encode('utf-8') if sys.version_info[0] == 2 else iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ire is not None:
            oprot.writeFieldBegin('ire', TType.STRUCT, 1)
            self.ire.write(oprot)
            oprot.writeFieldEnd()
        if self.ace is not None:
            oprot.writeFieldBegin('ace', TType.STRUCT, 2)
            self.ace.write(oprot)
            oprot.writeFieldEnd()
        if self.ase is not None:
            oprot.writeFieldBegin('ase', TType.STRUCT, 3)
            self.ase.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getAllWorkflows_result)
getAllWorkflows_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRING, 'UTF8', False), None, ),  # 0
    (1, TType.STRUCT, 'ire', [airavata.api.error.ttypes.InvalidRequestException, None], None, ),  # 1
    (2, TType.STRUCT, 'ace', [airavata.api.error.ttypes.AiravataClientException, None], None, ),  # 2
    (3, TType.STRUCT, 'ase', [airavata.api.error.ttypes.AiravataSystemException, None], None, ),  # 3
)


class getWorkflow_args(object):
    """
    Attributes:
     - workflowTemplateId

    """
    thrift_spec: typing.Any = None


    def __init__(self, workflowTemplateId: str = None,):
        self.workflowTemplateId: str = workflowTemplateId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.workflowTemplateId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getWorkflow_args')
        if self.workflowTemplateId is not None:
            oprot.writeFieldBegin('workflowTemplateId', TType.STRING, 1)
            oprot.writeString(self.workflowTemplateId.encode('utf-8') if sys.version_info[0] == 2 else self.workflowTemplateId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.workflowTemplateId is None:
            raise TProtocolException(message='Required field workflowTemplateId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getWorkflow_args)
getWorkflow_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'workflowTemplateId', 'UTF8', None, ),  # 1
)


class getWorkflow_result(object):
    """
    Attributes:
     - success
     - ire
     - ace
     - ase

    """
    thrift_spec: typing.Any = None


    def __init__(self, success: typing.Optional[airavata.model.ttypes.WorkflowModel] = None, ire: typing.Optional[airavata.api.error.ttypes.InvalidRequestException] = None, ace: typing.Optional[airavata.api.error.ttypes.AiravataClientException] = None, ase: typing.Optional[airavata.api.error.ttypes.AiravataSystemException] = None,):
        self.success: typing.Optional[airavata.model.ttypes.WorkflowModel] = success
        self.ire: typing.Optional[airavata.api.error.ttypes.InvalidRequestException] = ire
        self.ace: typing.Optional[airavata.api.error.ttypes.AiravataClientException] = ace
        self.ase: typing.Optional[airavata.api.error.ttypes.AiravataSystemException] = ase

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = airavata.model.ttypes.WorkflowModel()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ire = airavata.api.error.ttypes.InvalidRequestException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ace = airavata.api.error.ttypes.AiravataClientException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ase = airavata.api.error.ttypes.AiravataSystemException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getWorkflow_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ire is not None:
            oprot.writeFieldBegin('ire', TType.STRUCT, 1)
            self.ire.write(oprot)
            oprot.writeFieldEnd()
        if self.ace is not None:
            oprot.writeFieldBegin('ace', TType.STRUCT, 2)
            self.ace.write(oprot)
            oprot.writeFieldEnd()
        if self.ase is not None:
            oprot.writeFieldBegin('ase', TType.STRUCT, 3)
            self.ase.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getWorkflow_result)
getWorkflow_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [airavata.model.ttypes.WorkflowModel, None], None, ),  # 0
    (1, TType.STRUCT, 'ire', [airavata.api.error.ttypes.InvalidRequestException, None], None, ),  # 1
    (2, TType.STRUCT, 'ace', [airavata.api.error.ttypes.AiravataClientException, None], None, ),  # 2
    (3, TType.STRUCT, 'ase', [airavata.api.error.ttypes.AiravataSystemException, None], None, ),  # 3
)


class deleteWorkflow_args(object):
    """
    Attributes:
     - workflowTemplateId

    """
    thrift_spec: typing.Any = None


    def __init__(self, workflowTemplateId: str = None,):
        self.workflowTemplateId: str = workflowTemplateId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.workflowTemplateId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('deleteWorkflow_args')
        if self.workflowTemplateId is not None:
            oprot.writeFieldBegin('workflowTemplateId', TType.STRING, 1)
            oprot.writeString(self.workflowTemplateId.encode('utf-8') if sys.version_info[0] == 2 else self.workflowTemplateId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.workflowTemplateId is None:
            raise TProtocolException(message='Required field workflowTemplateId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(deleteWorkflow_args)
deleteWorkflow_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'workflowTemplateId', 'UTF8', None, ),  # 1
)


class deleteWorkflow_result(object):
    """
    Attributes:
     - ire
     - ace
     - ase

    """
    thrift_spec: typing.Any = None


    def __init__(self, ire: typing.Optional[airavata.api.error.ttypes.InvalidRequestException] = None, ace: typing.Optional[airavata.api.error.ttypes.AiravataClientException] = None, ase: typing.Optional[airavata.api.error.ttypes.AiravataSystemException] = None,):
        self.ire: typing.Optional[airavata.api.error.ttypes.InvalidRequestException] = ire
        self.ace: typing.Optional[airavata.api.error.ttypes.AiravataClientException] = ace
        self.ase: typing.Optional[airavata.api.error.ttypes.AiravataSystemException] = ase

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ire = airavata.api.error.ttypes.InvalidRequestException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ace = airavata.api.error.ttypes.AiravataClientException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ase = airavata.api.error.ttypes.AiravataSystemException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('deleteWorkflow_result')
        if self.ire is not None:
            oprot.writeFieldBegin('ire', TType.STRUCT, 1)
            self.ire.write(oprot)
            oprot.writeFieldEnd()
        if self.ace is not None:
            oprot.writeFieldBegin('ace', TType.STRUCT, 2)
            self.ace.write(oprot)
            oprot.writeFieldEnd()
        if self.ase is not None:
            oprot.writeFieldBegin('ase', TType.STRUCT, 3)
            self.ase.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(deleteWorkflow_result)
deleteWorkflow_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'ire', [airavata.api.error.ttypes.InvalidRequestException, None], None, ),  # 1
    (2, TType.STRUCT, 'ace', [airavata.api.error.ttypes.AiravataClientException, None], None, ),  # 2
    (3, TType.STRUCT, 'ase', [airavata.api.error.ttypes.AiravataSystemException, None], None, ),  # 3
)


class registerWorkflow_args(object):
    """
    Attributes:
     - workflow

    """
    thrift_spec: typing.Any = None


    def __init__(self, workflow: airavata.model.ttypes.WorkflowModel = None,):
        self.workflow: airavata.model.ttypes.WorkflowModel = workflow

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.workflow = airavata.model.ttypes.WorkflowModel()
                    self.workflow.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('registerWorkflow_args')
        if self.workflow is not None:
            oprot.writeFieldBegin('workflow', TType.STRUCT, 1)
            self.workflow.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.workflow is None:
            raise TProtocolException(message='Required field workflow is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(registerWorkflow_args)
registerWorkflow_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'workflow', [airavata.model.ttypes.WorkflowModel, None], None, ),  # 1
)


class registerWorkflow_result(object):
    """
    Attributes:
     - success
     - ire
     - ace
     - ase

    """
    thrift_spec: typing.Any = None


    def __init__(self, success: typing.Optional[str] = None, ire: typing.Optional[airavata.api.error.ttypes.InvalidRequestException] = None, ace: typing.Optional[airavata.api.error.ttypes.AiravataClientException] = None, ase: typing.Optional[airavata.api.error.ttypes.AiravataSystemException] = None,):
        self.success: typing.Optional[str] = success
        self.ire: typing.Optional[airavata.api.error.ttypes.InvalidRequestException] = ire
        self.ace: typing.Optional[airavata.api.error.ttypes.AiravataClientException] = ace
        self.ase: typing.Optional[airavata.api.error.ttypes.AiravataSystemException] = ase

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ire = airavata.api.error.ttypes.InvalidRequestException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ace = airavata.api.error.ttypes.AiravataClientException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ase = airavata.api.error.ttypes.AiravataSystemException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('registerWorkflow_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success.encode('utf-8') if sys.version_info[0] == 2 else self.success)
            oprot.writeFieldEnd()
        if self.ire is not None:
            oprot.writeFieldBegin('ire', TType.STRUCT, 1)
            self.ire.write(oprot)
            oprot.writeFieldEnd()
        if self.ace is not None:
            oprot.writeFieldBegin('ace', TType.STRUCT, 2)
            self.ace.write(oprot)
            oprot.writeFieldEnd()
        if self.ase is not None:
            oprot.writeFieldBegin('ase', TType.STRUCT, 3)
            self.ase.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(registerWorkflow_result)
registerWorkflow_result.thrift_spec = (
    (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
    (1, TType.STRUCT, 'ire', [airavata.api.error.ttypes.InvalidRequestException, None], None, ),  # 1
    (2, TType.STRUCT, 'ace', [airavata.api.error.ttypes.AiravataClientException, None], None, ),  # 2
    (3, TType.STRUCT, 'ase', [airavata.api.error.ttypes.AiravataSystemException, None], None, ),  # 3
)


class updateWorkflow_args(object):
    """
    Attributes:
     - workflowTemplateId
     - workflow

    """
    thrift_spec: typing.Any = None


    def __init__(self, workflowTemplateId: str = None, workflow: airavata.model.ttypes.WorkflowModel = None,):
        self.workflowTemplateId: str = workflowTemplateId
        self.workflow: airavata.model.ttypes.WorkflowModel = workflow

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.workflowTemplateId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.workflow = airavata.model.ttypes.WorkflowModel()
                    self.workflow.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('updateWorkflow_args')
        if self.workflowTemplateId is not None:
            oprot.writeFieldBegin('workflowTemplateId', TType.STRING, 1)
            oprot.writeString(self.workflowTemplateId.encode('utf-8') if sys.version_info[0] == 2 else self.workflowTemplateId)
            oprot.writeFieldEnd()
        if self.workflow is not None:
            oprot.writeFieldBegin('workflow', TType.STRUCT, 2)
            self.workflow.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.workflowTemplateId is None:
            raise TProtocolException(message='Required field workflowTemplateId is unset!')
        if self.workflow is None:
            raise TProtocolException(message='Required field workflow is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(updateWorkflow_args)
updateWorkflow_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'workflowTemplateId', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'workflow', [airavata.model.ttypes.WorkflowModel, None], None, ),  # 2
)


class updateWorkflow_result(object):
    """
    Attributes:
     - ire
     - ace
     - ase

    """
    thrift_spec: typing.Any = None


    def __init__(self, ire: typing.Optional[airavata.api.error.ttypes.InvalidRequestException] = None, ace: typing.Optional[airavata.api.error.ttypes.AiravataClientException] = None, ase: typing.Optional[airavata.api.error.ttypes.AiravataSystemException] = None,):
        self.ire: typing.Optional[airavata.api.error.ttypes.InvalidRequestException] = ire
        self.ace: typing.Optional[airavata.api.error.ttypes.AiravataClientException] = ace
        self.ase: typing.Optional[airavata.api.error.ttypes.AiravataSystemException] = ase

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ire = airavata.api.error.ttypes.InvalidRequestException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ace = airavata.api.error.ttypes.AiravataClientException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ase = airavata.api.error.ttypes.AiravataSystemException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('updateWorkflow_result')
        if self.ire is not None:
            oprot.writeFieldBegin('ire', TType.STRUCT, 1)
            self.ire.write(oprot)
            oprot.writeFieldEnd()
        if self.ace is not None:
            oprot.writeFieldBegin('ace', TType.STRUCT, 2)
            self.ace.write(oprot)
            oprot.writeFieldEnd()
        if self.ase is not None:
            oprot.writeFieldBegin('ase', TType.STRUCT, 3)
            self.ase.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(updateWorkflow_result)
updateWorkflow_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'ire', [airavata.api.error.ttypes.InvalidRequestException, None], None, ),  # 1
    (2, TType.STRUCT, 'ace', [airavata.api.error.ttypes.AiravataClientException, None], None, ),  # 2
    (3, TType.STRUCT, 'ase', [airavata.api.error.ttypes.AiravataSystemException, None], None, ),  # 3
)


class getWorkflowTemplateId_args(object):
    """
    Attributes:
     - workflowName

    """
    thrift_spec: typing.Any = None


    def __init__(self, workflowName: str = None,):
        self.workflowName: str = workflowName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.workflowName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getWorkflowTemplateId_args')
        if self.workflowName is not None:
            oprot.writeFieldBegin('workflowName', TType.STRING, 1)
            oprot.writeString(self.workflowName.encode('utf-8') if sys.version_info[0] == 2 else self.workflowName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.workflowName is None:
            raise TProtocolException(message='Required field workflowName is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getWorkflowTemplateId_args)
getWorkflowTemplateId_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'workflowName', 'UTF8', None, ),  # 1
)


class getWorkflowTemplateId_result(object):
    """
    Attributes:
     - success
     - ire
     - ace
     - ase

    """
    thrift_spec: typing.Any = None


    def __init__(self, success: typing.Optional[str] = None, ire: typing.Optional[airavata.api.error.ttypes.InvalidRequestException] = None, ace: typing.Optional[airavata.api.error.ttypes.AiravataClientException] = None, ase: typing.Optional[airavata.api.error.ttypes.AiravataSystemException] = None,):
        self.success: typing.Optional[str] = success
        self.ire: typing.Optional[airavata.api.error.ttypes.InvalidRequestException] = ire
        self.ace: typing.Optional[airavata.api.error.ttypes.AiravataClientException] = ace
        self.ase: typing.Optional[airavata.api.error.ttypes.AiravataSystemException] = ase

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ire = airavata.api.error.ttypes.InvalidRequestException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ace = airavata.api.error.ttypes.AiravataClientException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ase = airavata.api.error.ttypes.AiravataSystemException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getWorkflowTemplateId_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success.encode('utf-8') if sys.version_info[0] == 2 else self.success)
            oprot.writeFieldEnd()
        if self.ire is not None:
            oprot.writeFieldBegin('ire', TType.STRUCT, 1)
            self.ire.write(oprot)
            oprot.writeFieldEnd()
        if self.ace is not None:
            oprot.writeFieldBegin('ace', TType.STRUCT, 2)
            self.ace.write(oprot)
            oprot.writeFieldEnd()
        if self.ase is not None:
            oprot.writeFieldBegin('ase', TType.STRUCT, 3)
            self.ase.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getWorkflowTemplateId_result)
getWorkflowTemplateId_result.thrift_spec = (
    (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
    (1, TType.STRUCT, 'ire', [airavata.api.error.ttypes.InvalidRequestException, None], None, ),  # 1
    (2, TType.STRUCT, 'ace', [airavata.api.error.ttypes.AiravataClientException, None], None, ),  # 2
    (3, TType.STRUCT, 'ase', [airavata.api.error.ttypes.AiravataSystemException, None], None, ),  # 3
)


class isWorkflowExistWithName_args(object):
    """
    Attributes:
     - workflowName

    """
    thrift_spec: typing.Any = None


    def __init__(self, workflowName: str = None,):
        self.workflowName: str = workflowName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.workflowName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('isWorkflowExistWithName_args')
        if self.workflowName is not None:
            oprot.writeFieldBegin('workflowName', TType.STRING, 1)
            oprot.writeString(self.workflowName.encode('utf-8') if sys.version_info[0] == 2 else self.workflowName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.workflowName is None:
            raise TProtocolException(message='Required field workflowName is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(isWorkflowExistWithName_args)
isWorkflowExistWithName_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'workflowName', 'UTF8', None, ),  # 1
)


class isWorkflowExistWithName_result(object):
    """
    Attributes:
     - success
     - ire
     - ace
     - ase

    """
    thrift_spec: typing.Any = None


    def __init__(self, success: typing.Optional[bool] = None, ire: typing.Optional[airavata.api.error.ttypes.InvalidRequestException] = None, ace: typing.Optional[airavata.api.error.ttypes.AiravataClientException] = None, ase: typing.Optional[airavata.api.error.ttypes.AiravataSystemException] = None,):
        self.success: typing.Optional[bool] = success
        self.ire: typing.Optional[airavata.api.error.ttypes.InvalidRequestException] = ire
        self.ace: typing.Optional[airavata.api.error.ttypes.AiravataClientException] = ace
        self.ase: typing.Optional[airavata.api.error.ttypes.AiravataSystemException] = ase

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ire = airavata.api.error.ttypes.InvalidRequestException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ace = airavata.api.error.ttypes.AiravataClientException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ase = airavata.api.error.ttypes.AiravataSystemException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('isWorkflowExistWithName_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.ire is not None:
            oprot.writeFieldBegin('ire', TType.STRUCT, 1)
            self.ire.write(oprot)
            oprot.writeFieldEnd()
        if self.ace is not None:
            oprot.writeFieldBegin('ace', TType.STRUCT, 2)
            self.ace.write(oprot)
            oprot.writeFieldEnd()
        if self.ase is not None:
            oprot.writeFieldBegin('ase', TType.STRUCT, 3)
            self.ase.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(isWorkflowExistWithName_result)
isWorkflowExistWithName_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ire', [airavata.api.error.ttypes.InvalidRequestException, None], None, ),  # 1
    (2, TType.STRUCT, 'ace', [airavata.api.error.ttypes.AiravataClientException, None], None, ),  # 2
    (3, TType.STRUCT, 'ase', [airavata.api.error.ttypes.AiravataSystemException, None], None, ),  # 3
)
fix_spec(all_structs)
del all_structs
