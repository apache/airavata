#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.21.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:enum,type_hints
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from airavata.api.workflow import Workflow
from airavata.api.workflow.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('   getAllWorkflows()')
    print('  WorkflowModel getWorkflow(string workflowTemplateId)')
    print('  void deleteWorkflow(string workflowTemplateId)')
    print('  string registerWorkflow(WorkflowModel workflow)')
    print('  void updateWorkflow(string workflowTemplateId, WorkflowModel workflow)')
    print('  string getWorkflowTemplateId(string workflowName)')
    print('  bool isWorkflowExistWithName(string workflowName)')
    print('  string getAPIVersion()')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = Workflow.Client(protocol)
transport.open()

if cmd == 'getAllWorkflows':
    if len(args) != 0:
        print('getAllWorkflows requires 0 args')
        sys.exit(1)
    pp.pprint(client.getAllWorkflows())

elif cmd == 'getWorkflow':
    if len(args) != 1:
        print('getWorkflow requires 1 args')
        sys.exit(1)
    pp.pprint(client.getWorkflow(args[0],))

elif cmd == 'deleteWorkflow':
    if len(args) != 1:
        print('deleteWorkflow requires 1 args')
        sys.exit(1)
    pp.pprint(client.deleteWorkflow(args[0],))

elif cmd == 'registerWorkflow':
    if len(args) != 1:
        print('registerWorkflow requires 1 args')
        sys.exit(1)
    pp.pprint(client.registerWorkflow(eval(args[0]),))

elif cmd == 'updateWorkflow':
    if len(args) != 2:
        print('updateWorkflow requires 2 args')
        sys.exit(1)
    pp.pprint(client.updateWorkflow(args[0], eval(args[1]),))

elif cmd == 'getWorkflowTemplateId':
    if len(args) != 1:
        print('getWorkflowTemplateId requires 1 args')
        sys.exit(1)
    pp.pprint(client.getWorkflowTemplateId(args[0],))

elif cmd == 'isWorkflowExistWithName':
    if len(args) != 1:
        print('isWorkflowExistWithName requires 1 args')
        sys.exit(1)
    pp.pprint(client.isWorkflowExistWithName(args[0],))

elif cmd == 'getAPIVersion':
    if len(args) != 0:
        print('getAPIVersion requires 0 args')
        sys.exit(1)
    pp.pprint(client.getAPIVersion())

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
