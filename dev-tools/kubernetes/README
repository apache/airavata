# Testing Kubernetes with the Container ecosystem of Airavata

Airavata repo already has many Dockerfiles to run services individually. There were also many cases where different orchestration platforms were tested with airavata.But, Kubernetes was not really tested with airavata. This is one POC on Kubernetes airavata.

# Status of the POC

## Exploring Kubernetes

Kubernetes, as told above, is an Orchestration Layer for orchestrating containers. There are different open source APIs for Containers creations and most popular of them is Docker.There are already some docker files which package airavata into docker containers.

Airavata PGA Dockerfile: https://github.com/apache/airavata/pull/122

Airavata Backend Components: https://github.com/apache/airavata/pull/67


### Thought Process and Approach

Initial Step is to understand the different components involved in Kubernetes. In that process, it is important to setup a Kubernetes Cluster and experiment with things.

Kubernetes cluster was setup on Jetstream. There is master node running on 149.165.169.147 and a slave node for Kubernetes is running on 149.165.169.156.

Kubernetes mainly has three components in them. One is kubernetes orchestration engine. One is etcd which is a distributed key-value store. Keys can be stored in this keystore and can be reliably accessed in a distributed eco-system. Kubernetes recommends this keystore to be used to store network configurations of the cluster.

Kubernetes needs a subnet to be given as input through etcd keystore. Whenever a new Pod is created under the master, IP Address is allocated from that subnet. This clears the problems when a pod is down. As a range is allocated, we can directly hit the gateway address and through another service called Flanneld, the request is routed.

![](https://github.com/hiteshkumardasika/airavata/blob/master/test.png)

Kubernetes has the concept called Pods. Pods are an abstraction over a group of containers. Each pod will have one service running. That service can be run in one containers or many depending on the request load. This detail is taken care by Kubernetes.

To manage and lease subnets for pods, Flanneld is used. It is an application which takes the subnets that are allocated to Kubernetes from the etcd Keystore and leases subnets to the pods in Kubernetes.

In jetstream, there are options to create your own Private networks and also subnets inside those networks. This feature was leveraged.

## Status right now

Configuring private networks and allocating subnets was a trouble initially. Theoretical concepts were familiar, but when it came to implementation, it took a bit more time to understand and figure out who all the puzzles where put in place. It was also essential to get an understanding of each service like etcd, flanneld and kubectl and also understand the need of them. Hence, right now i was able to configure kubernetes and setup the cluster. I am in process of starting a pod and understanding how to start a container through a Dockerfile which i already have.

Kubectl is a kubernetes control utility that is similar to the docker cli utility and given an image starting a pod is not a big task. Hence continuing my existing task by starting all the Airavata components in different pods and seeing how everything works.


## Kubernetes with Airavata - Will it Fit the Architecture?

Airavata already has a very good distibuted architecture and also different applications are clearly separated.(Micro Service Architecture). Hence it would be a good fit for orchestration in general. Specifically the advantage we get with Kubernetes is that this orchestration framework at a pretty low level.By this I mean at the request-response level, irrespective of the Softwares or frameworks which are at the top.

For example:
Kubernetes can be configured to be run along with Apache Mesos and Mesos can take care of the resource management at a level above Kubernetes. But, kubernetes is configured to load balance Mesos itslef and hence it is a better distributed architecture. This approach can be debated but for now it seems logical.


