#
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

###########################################################################
#
#  This properties file provides configuration for all Airavata Services:
#  API Server, Registry, Workflow Interpreter, GFac, Orchestrator
#
###########################################################################

###########################################################################
#  API Server Registry Configuration
###########################################################################

sharing.enabled={{enable_sharing}}

# Properties for default user mode
default.registry.user={{ default_registry_user }}
default.registry.password={{ default_registry_password }}
default.gateway={{ default_gateway }}
default.gateway={{ default_gateway }}

###########################################################################
#  DB Configuration
###########################################################################

airavata.jdbc.user={{ db_user }}
airavata.jdbc.password={{ db_password }}
airavata.jdbc.validationQuery=SELECT 1

## Derby database configuration
#airavata.jdbc.driver=org.apache.derby.jdbc.ClientDriver
#airavata.jdbc.url=jdbc:derby://localhost:1527/airavata;create=true;user=airavata;password=airavata
# MariaDB database configuration
airavata.jdbc.driver=org.mariadb.jdbc.Driver
airavata.jdbc.url=jdbc:mariadb://{{ db_server }}:{{ db_server_port }}/airavata

###########################################################################
#  Orchestrator Server Configurations
###########################################################################
api.server.min.threads=50
job.validators=org.apache.airavata.orchestrator.core.validator.impl.BatchQueueValidator,org.apache.airavata.orchestrator.core.validator.impl.ExperimentStatusValidator
job.validators.enabled=true
host.scheduler=org.apache.airavata.orchestrator.core.schedule.DefaultHostScheduler

###########################################################################
#  Registry Server Configurations
###########################################################################
api.server.host={{registry_host}}
api.server.port={{registry_port}}
api.server.min.threads=50

###########################################################################
#  Job Scheduler can send informative email messages to you about the status of your job.
# Specify a string which consists of either the single character "n" (no mail), or one or more
#  of the characters "a" (send mail when job is aborted), "b" (send mail when job begins),
# and "e" (send mail when job terminates).  The default is "a" if not specified.
###########################################################################

job.notification.enabled=true
#Provide comma separated email ids as a string if more than one
job.notification.emailids=

###########################################################################
# Credential Store module Configuration
###########################################################################
credential.store.keystore.url={{ keystores_location }}/{{ cred_keystore_src_path | basename }}
credential.store.keystore.alias={{ cred_keystore_alias }}
credential.store.keystore.password={{ cred_keystore_passwd }}

# SSH PKI key pair or ssh password can be used SSH based sshKeyAuthentication is used.
# if user specify both password sshKeyAuthentication gets the higher preference

################# ---------- For ssh key pair sshKeyAuthentication ------------------- ################
#ssh.public.key=/path to public key for ssh
#ssh.private.key=/path to private key file for ssh
#ssh.keypass=passphrase for the private key
#ssh.username=username for ssh connection
## If you set "yes" for ssh.strict.hostKey.checking, then you must provide known hosts file path
#ssh.strict.hostKey.checking=yes/no
#ssh.known.hosts.file=/path to known hosts file
### Incase of password sshKeyAuthentication.
#ssh.password=Password for ssh connection

################ ---------- BES Properties ------------------- ###############
#bes.ca.cert.path=<location>/certificates/cacert.pem
#bes.ca.key.path=<location>/certificates/cakey.pem
#bes.ca.key.pass=passphrase

###########################################################################
# Monitoring module Configuration
###########################################################################

#This will be the primary monitoring tool which runs in airavata, in future there will be multiple monitoring
#mechanisms and one would be able to start a monitor
monitors=org.apache.airavata.gfac.monitor.impl.pull.qstat.QstatMonitor,org.apache.airavata.gfac.monitor.impl.LocalJobMonitor

#These properties will used to enable email base monitoring
monitor.email.host={{ monitor_email_host }}
monitor.email.address={{ monitor_email_address }}
monitor.email.password={{ monitor_email_password }}
monitor.email.folder.name=INBOX
# either imaps or pop3
monitor.email.store.protocol=imaps
#These property will be used to query the email server periodically. value in milliseconds(ms).
monitor.email.interval.millis=10000

###########################################################################
# AMQP Notification Configuration
###########################################################################
#for simple scenarios we can use the guest user
#rabbitmq.broker.url=amqp://localhost:5672
#for production scenarios, give url as amqp://userName:password@hostName:portNumber/virtualHost, create user, virtualhost
# and give permissions, refer: http://blog.dtzq.com/2012/06/rabbitmq-users-and-virtual-hosts.html
rabbitmq.broker.url={{ rabbitmq_broker_url }}
rabbitmq.status.exchange.name=status_exchange
rabbitmq.process.exchange.name=process_exchange
rabbitmq.experiment.exchange.name=experiment_exchange
rabbitmq.durable.queue=false
rabbitmq.prefetch.count=200

###########################################################################
# Zookeeper Server Configuration
###########################################################################
zookeeper.server.connection={{ zookeeper_connection_url }}

########################################################################
## API Security Configuration
########################################################################
security.manager.class=org.apache.airavata.service.security.KeyCloakSecurityManager
### TLS related configuration ####
TLS.enabled={{ tls_enable }}
TLS.client.timeout=10000
#### keystore configuration ####
keystore.path={{ keystores_location }}/{{ keystore_src_path | basename }}
keystore.password={{ keystore_passwd }}
{% if client_truststore_src_path is defined %}
{% endif %}
#### authorization cache related configuration ####
authz.cache.enabled=true
authz.cache.manager.class=org.apache.airavata.service.security.authzcache.DefaultAuthzCacheManager
authz.cache.size=1000

###########################################################################
# Iam Admin services Configuration
###########################################################################
iam.server.url={{ iam_server_url }}
iam.server.super.admin.username={{ iam_server_super_admin_username }}
iam.server.super.admin.password={{ iam_server_super_admin_password }}

###########################################################################
# ThriftClientPool Configuration
###########################################################################
thrift.client.pool.abandoned.removal.enabled={{ thrift_client_pool_abandoned_removal_enabled }}
thrift.client.pool.abandoned.removal.logged={{ thrift_client_pool_abandoned_removal_logged }}

###########################################################################
# Platform Monitoring Configuration
###########################################################################
monitor.prometheus.enabled={{ monitoring_enabled }}
monitor.prometheus.host={{ monitoring_host }}
monitor.prometheus.port={{ monitoring_port }}


###########################################################################
# Metascheduler And Compute Resource Monitoring Configuration
###########################################################################
monitor.job.submission.enabled={{ cluster_monitoring_enabled }}
monitor.job.submission.interval.millis=18000
metascheduler.cluster.scanning.interval={{ cluster_scanning_interval }}
metascheduler.cluster.scanning.parallel.jobs={{ cluster_scanning_parallel_jobs }}

compute.resource.selection.policy.class={{ metascheduler_resource_selection_policy_class }}
compute.resource.rescheduler.policy.class = {{ compute_resource_rescheduler_policy_class }}

metascheduler.gateway={{ metascheduler_gateway }}
metascheduler.group.resource.profile={{ metascheduler_group_resource_profile }}
metascheduler.username={{ metascheduler_username }}
metascheduler.maximum.rescheduler.threshold = {{ metascheduler_maximum_rescheduler_threshold }}

metascheduler.job.scanning.interval={{job_scanning_interval}}

data.analyzer.enabled=false
data.analyzer.gateways=dev-ultrascan
data.analyzer.scanning.interval.millis=3600
data.analyzer.scanning.parallel.jobs=1
data.analyzer.interval.seconds=5


