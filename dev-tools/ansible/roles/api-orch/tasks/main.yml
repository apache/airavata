#
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

---
################################################################################
# api-orch deployment
- name: Create api-orchestrator deployment directory
  file: path="{{ api_orch_dir }}" state=directory owner="{{ user }}" group="{{ group }}"
  when: build|success

- name: Check previous deployments
  stat: path="{{ api_orch_dir }}/{{ airavata_dist }}" get_md5=no get_checksum=no
  register: check

- name: check if api-orch systemd unit file is installed
  stat:
    path: "{{ api_orch_systemd_unit_file }}"
  register: systemd_unit_file

- name: stop api-orch
  service: name=apiorch state=stopped
  when: systemd_unit_file.stat.exists
  become: yes
  become_user: root

- name: Delete previous deployments
  file: path="{{ api_orch_dir }}/{{ airavata_dist }}" state=absent

- name: Copy distribution to api-orcheatrator deployment directory
  unarchive: src="{{ airavata_source_dir }}/modules/distribution/target/{{ airavata_dist_name }}"
             dest="{{ api_orch_dir }}/"
             copy=no

- name: set api-orch private ip
  set_fact:
    api_server_host: "{{ api_server_bind_host }}"
    orchestrator_host: "{{ orchestrator_bind_host }}"
    cred_store_server_host: "{{ cred_store_server_bind_host }}"
    registry_host: "{{ registry_bind_host }}"
    sharing_registry_host: "{{ sharing_registry_bind_host }}"
    profile_service_host: "{{ profile_service_bind_host }}"


- name: Copy Airavata server properties file
  template: src=airavata-server.properties.j2
            dest="{{ api_orch_dir }}/{{ airavata_dist }}/bin/airavata-server.properties"
            owner={{ user }}
            group={{ group }}
            mode="u=rw,g=r,o=r"

- name: Copy logback configuration file
  template: src=logback.xml.j2
            dest="{{ api_orch_dir }}/{{ airavata_dist }}/bin/logback.xml"
            owner={{ user }}
            group={{ group }}
            mode="u=rw,g=r,o=r"

- name: create logs directory
  file: path="{{ api_orch_log_dir }}" state=directory owner={{ user }} group={{ group }}

- name: Copy MariaDB connector jar to lib
  get_url: url="{{ mariadb_connector_jar_url }}"
          dest="{{ api_orch_dir }}/{{ airavata_dist }}/lib/"
          owner={{ user }}
          group={{ group }}

- name: allow only selected networks to access Airavata Sharing Registry
  firewalld:
    zone: public
    permanent: yes
    state: enabled
    immediate: yes
    rich_rule: rule family=ipv4 source address="{{ item }}" port port="{{ sharing_registry_port }}" protocol=tcp accept
  with_items:
    - "{{ sharing_subnets }}"
  become_user: root

- name: allow only selected networks to access Airavata Registry
  firewalld:
    zone: public
    permanent: yes
    state: enabled
    immediate: yes
    rich_rule: rule family=ipv4 source address="{{ item }}" port port="{{ registry_port }}" protocol=tcp accept
  with_items:
    - "{{ registry_subnets }}"
  become_user: root

- name: allow only selected networks to access Airavata Credential Store
  firewalld:
    zone: public
    permanent: yes
    state: enabled
    immediate: yes
    rich_rule: rule family=ipv4 source address="{{ item }}" port port="{{ cred_store_port }}" protocol=tcp accept
  with_items:
    - "{{ credential_store_subnets }}"
  become_user: root

- name: allow all networks to access Airavata API Server over TLS
  firewalld:
    zone: public
    permanent: yes
    state: enabled
    immediate: yes
    port: "{{ api_server_tls_port }}/tcp"
  become_user: root

- name: allow all networks to access Airavata Profile service
  firewalld:
    zone: public
    permanent: yes
    state: enabled
    immediate: yes
    port: "{{ profile_service_port }}/tcp"
  become_user: root

- name: Openning API Server Monitoring Port
  firewalld:
    zone: public
    permanent: yes
    state: enabled
    immediate: yes
    rich_rule: rule family=ipv4 source address="{{ item }}" port port="{{ api_server_monitoring_port }}" protocol=tcp accept
  with_items:
    - "{{ monitoring_subnets }}"
  become_user: root

- name: Install api-orch systemd script
  template: src=apiorch.service.j2
            dest="{{ api_orch_systemd_unit_file }}"
  become: yes
  become_user: root

- name: start api-orch
  service: name=apiorch state=started enabled=yes daemon_reload=yes
  become: yes
  become_user: root
...
