// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package workspace_model

import (
	"bytes"
	"reflect"
	"database/sql/driver"
	"errors"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"airavata_commons"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = airavata_commons.GoUnusedProtection__
type GatewayApprovalStatus int64
const (
  GatewayApprovalStatus_REQUESTED GatewayApprovalStatus = 0
  GatewayApprovalStatus_APPROVED GatewayApprovalStatus = 1
  GatewayApprovalStatus_ACTIVE GatewayApprovalStatus = 2
  GatewayApprovalStatus_DEACTIVATED GatewayApprovalStatus = 3
  GatewayApprovalStatus_CANCELLED GatewayApprovalStatus = 4
  GatewayApprovalStatus_DENIED GatewayApprovalStatus = 5
  GatewayApprovalStatus_CREATED GatewayApprovalStatus = 6
  GatewayApprovalStatus_DEPLOYED GatewayApprovalStatus = 7
)

func (p GatewayApprovalStatus) String() string {
  switch p {
  case GatewayApprovalStatus_REQUESTED: return "REQUESTED"
  case GatewayApprovalStatus_APPROVED: return "APPROVED"
  case GatewayApprovalStatus_ACTIVE: return "ACTIVE"
  case GatewayApprovalStatus_DEACTIVATED: return "DEACTIVATED"
  case GatewayApprovalStatus_CANCELLED: return "CANCELLED"
  case GatewayApprovalStatus_DENIED: return "DENIED"
  case GatewayApprovalStatus_CREATED: return "CREATED"
  case GatewayApprovalStatus_DEPLOYED: return "DEPLOYED"
  }
  return "<UNSET>"
}

func GatewayApprovalStatusFromString(s string) (GatewayApprovalStatus, error) {
  switch s {
  case "REQUESTED": return GatewayApprovalStatus_REQUESTED, nil 
  case "APPROVED": return GatewayApprovalStatus_APPROVED, nil 
  case "ACTIVE": return GatewayApprovalStatus_ACTIVE, nil 
  case "DEACTIVATED": return GatewayApprovalStatus_DEACTIVATED, nil 
  case "CANCELLED": return GatewayApprovalStatus_CANCELLED, nil 
  case "DENIED": return GatewayApprovalStatus_DENIED, nil 
  case "CREATED": return GatewayApprovalStatus_CREATED, nil 
  case "DEPLOYED": return GatewayApprovalStatus_DEPLOYED, nil 
  }
  return GatewayApprovalStatus(0), fmt.Errorf("not a valid GatewayApprovalStatus string")
}


func GatewayApprovalStatusPtr(v GatewayApprovalStatus) *GatewayApprovalStatus { return &v }

func (p GatewayApprovalStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *GatewayApprovalStatus) UnmarshalText(text []byte) error {
q, err := GatewayApprovalStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *GatewayApprovalStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = GatewayApprovalStatus(v)
return nil
}

func (p * GatewayApprovalStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type NotificationPriority int64
const (
  NotificationPriority_LOW NotificationPriority = 0
  NotificationPriority_NORMAL NotificationPriority = 1
  NotificationPriority_HIGH NotificationPriority = 2
)

func (p NotificationPriority) String() string {
  switch p {
  case NotificationPriority_LOW: return "LOW"
  case NotificationPriority_NORMAL: return "NORMAL"
  case NotificationPriority_HIGH: return "HIGH"
  }
  return "<UNSET>"
}

func NotificationPriorityFromString(s string) (NotificationPriority, error) {
  switch s {
  case "LOW": return NotificationPriority_LOW, nil 
  case "NORMAL": return NotificationPriority_NORMAL, nil 
  case "HIGH": return NotificationPriority_HIGH, nil 
  }
  return NotificationPriority(0), fmt.Errorf("not a valid NotificationPriority string")
}


func NotificationPriorityPtr(v NotificationPriority) *NotificationPriority { return &v }

func (p NotificationPriority) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *NotificationPriority) UnmarshalText(text []byte) error {
q, err := NotificationPriorityFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *NotificationPriority) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = NotificationPriority(v)
return nil
}

func (p * NotificationPriority) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - GroupName
//  - Description
type Group struct {
  GroupName string `thrift:"groupName,1,required" db:"groupName" json:"groupName"`
  Description *string `thrift:"description,2" db:"description" json:"description,omitempty"`
}

func NewGroup() *Group {
  return &Group{}
}


func (p *Group) GetGroupName() string {
  return p.GroupName
}
var Group_Description_DEFAULT string
func (p *Group) GetDescription() string {
  if !p.IsSetDescription() {
    return Group_Description_DEFAULT
  }
return *p.Description
}
func (p *Group) IsSetDescription() bool {
  return p.Description != nil
}

func (p *Group) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetGroupName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGroupName = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetGroupName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GroupName is not set"));
  }
  return nil
}

func (p *Group)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.GroupName = v
}
  return nil
}

func (p *Group)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Description = &v
}
  return nil
}

func (p *Group) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Group"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Group) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groupName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:groupName: ", p), err) }
  if err := oprot.WriteString(string(p.GroupName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:groupName: ", p), err) }
  return err
}

func (p *Group) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetDescription() {
    if err := oprot.WriteFieldBegin("description", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:description: ", p), err) }
    if err := oprot.WriteString(string(*p.Description)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.description (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:description: ", p), err) }
  }
  return err
}

func (p *Group) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Group(%+v)", *p)
}

// Attributes:
//  - ProjectID
//  - Owner
//  - GatewayId
//  - Name
//  - Description
//  - CreationTime
//  - SharedUsers
//  - SharedGroups
type Project struct {
  ProjectID string `thrift:"projectID,1,required" db:"projectID" json:"projectID"`
  Owner string `thrift:"owner,2,required" db:"owner" json:"owner"`
  GatewayId string `thrift:"gatewayId,3,required" db:"gatewayId" json:"gatewayId"`
  Name string `thrift:"name,4,required" db:"name" json:"name"`
  Description *string `thrift:"description,5" db:"description" json:"description,omitempty"`
  CreationTime *int64 `thrift:"creationTime,6" db:"creationTime" json:"creationTime,omitempty"`
  SharedUsers []string `thrift:"sharedUsers,7" db:"sharedUsers" json:"sharedUsers,omitempty"`
  SharedGroups []string `thrift:"sharedGroups,8" db:"sharedGroups" json:"sharedGroups,omitempty"`
}

func NewProject() *Project {
  return &Project{
ProjectID: "DO_NOT_SET_AT_CLIENTS",
}
}


func (p *Project) GetProjectID() string {
  return p.ProjectID
}

func (p *Project) GetOwner() string {
  return p.Owner
}

func (p *Project) GetGatewayId() string {
  return p.GatewayId
}

func (p *Project) GetName() string {
  return p.Name
}
var Project_Description_DEFAULT string
func (p *Project) GetDescription() string {
  if !p.IsSetDescription() {
    return Project_Description_DEFAULT
  }
return *p.Description
}
var Project_CreationTime_DEFAULT int64
func (p *Project) GetCreationTime() int64 {
  if !p.IsSetCreationTime() {
    return Project_CreationTime_DEFAULT
  }
return *p.CreationTime
}
var Project_SharedUsers_DEFAULT []string

func (p *Project) GetSharedUsers() []string {
  return p.SharedUsers
}
var Project_SharedGroups_DEFAULT []string

func (p *Project) GetSharedGroups() []string {
  return p.SharedGroups
}
func (p *Project) IsSetDescription() bool {
  return p.Description != nil
}

func (p *Project) IsSetCreationTime() bool {
  return p.CreationTime != nil
}

func (p *Project) IsSetSharedUsers() bool {
  return p.SharedUsers != nil
}

func (p *Project) IsSetSharedGroups() bool {
  return p.SharedGroups != nil
}

func (p *Project) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetProjectID bool = false;
  var issetOwner bool = false;
  var issetGatewayId bool = false;
  var issetName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProjectID = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetOwner = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetName = true
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetProjectID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProjectID is not set"));
  }
  if !issetOwner{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Owner is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  if !issetName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"));
  }
  return nil
}

func (p *Project)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ProjectID = v
}
  return nil
}

func (p *Project)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Owner = v
}
  return nil
}

func (p *Project)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *Project)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *Project)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Description = &v
}
  return nil
}

func (p *Project)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.CreationTime = &v
}
  return nil
}

func (p *Project)  ReadField7(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.SharedUsers =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.SharedUsers = append(p.SharedUsers, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Project)  ReadField8(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.SharedGroups =  tSlice
  for i := 0; i < size; i ++ {
var _elem1 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem1 = v
}
    p.SharedGroups = append(p.SharedGroups, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Project) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Project"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Project) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("projectID", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:projectID: ", p), err) }
  if err := oprot.WriteString(string(p.ProjectID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.projectID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:projectID: ", p), err) }
  return err
}

func (p *Project) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("owner", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:owner: ", p), err) }
  if err := oprot.WriteString(string(p.Owner)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.owner (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:owner: ", p), err) }
  return err
}

func (p *Project) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gatewayId: ", p), err) }
  return err
}

func (p *Project) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:name: ", p), err) }
  return err
}

func (p *Project) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetDescription() {
    if err := oprot.WriteFieldBegin("description", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:description: ", p), err) }
    if err := oprot.WriteString(string(*p.Description)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.description (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:description: ", p), err) }
  }
  return err
}

func (p *Project) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetCreationTime() {
    if err := oprot.WriteFieldBegin("creationTime", thrift.I64, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:creationTime: ", p), err) }
    if err := oprot.WriteI64(int64(*p.CreationTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.creationTime (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:creationTime: ", p), err) }
  }
  return err
}

func (p *Project) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetSharedUsers() {
    if err := oprot.WriteFieldBegin("sharedUsers", thrift.LIST, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:sharedUsers: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.SharedUsers)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.SharedUsers {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:sharedUsers: ", p), err) }
  }
  return err
}

func (p *Project) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetSharedGroups() {
    if err := oprot.WriteFieldBegin("sharedGroups", thrift.LIST, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:sharedGroups: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.SharedGroups)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.SharedGroups {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:sharedGroups: ", p), err) }
  }
  return err
}

func (p *Project) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Project(%+v)", *p)
}

// Attributes:
//  - AiravataInternalUserId
//  - UserName
//  - GatewayId
//  - FirstName
//  - LastName
//  - Email
type User struct {
  AiravataInternalUserId string `thrift:"airavataInternalUserId,1,required" db:"airavataInternalUserId" json:"airavataInternalUserId"`
  UserName *string `thrift:"userName,2" db:"userName" json:"userName,omitempty"`
  GatewayId string `thrift:"gatewayId,3,required" db:"gatewayId" json:"gatewayId"`
  FirstName *string `thrift:"firstName,4" db:"firstName" json:"firstName,omitempty"`
  LastName *string `thrift:"lastName,5" db:"lastName" json:"lastName,omitempty"`
  Email *string `thrift:"email,6" db:"email" json:"email,omitempty"`
}

func NewUser() *User {
  return &User{
AiravataInternalUserId: "DO_NOT_SET_AT_CLIENTS",
}
}


func (p *User) GetAiravataInternalUserId() string {
  return p.AiravataInternalUserId
}
var User_UserName_DEFAULT string
func (p *User) GetUserName() string {
  if !p.IsSetUserName() {
    return User_UserName_DEFAULT
  }
return *p.UserName
}

func (p *User) GetGatewayId() string {
  return p.GatewayId
}
var User_FirstName_DEFAULT string
func (p *User) GetFirstName() string {
  if !p.IsSetFirstName() {
    return User_FirstName_DEFAULT
  }
return *p.FirstName
}
var User_LastName_DEFAULT string
func (p *User) GetLastName() string {
  if !p.IsSetLastName() {
    return User_LastName_DEFAULT
  }
return *p.LastName
}
var User_Email_DEFAULT string
func (p *User) GetEmail() string {
  if !p.IsSetEmail() {
    return User_Email_DEFAULT
  }
return *p.Email
}
func (p *User) IsSetUserName() bool {
  return p.UserName != nil
}

func (p *User) IsSetFirstName() bool {
  return p.FirstName != nil
}

func (p *User) IsSetLastName() bool {
  return p.LastName != nil
}

func (p *User) IsSetEmail() bool {
  return p.Email != nil
}

func (p *User) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAiravataInternalUserId bool = false;
  var issetGatewayId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAiravataInternalUserId = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAiravataInternalUserId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AiravataInternalUserId is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  return nil
}

func (p *User)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AiravataInternalUserId = v
}
  return nil
}

func (p *User)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserName = &v
}
  return nil
}

func (p *User)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *User)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.FirstName = &v
}
  return nil
}

func (p *User)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.LastName = &v
}
  return nil
}

func (p *User)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Email = &v
}
  return nil
}

func (p *User) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("User"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *User) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("airavataInternalUserId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:airavataInternalUserId: ", p), err) }
  if err := oprot.WriteString(string(p.AiravataInternalUserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.airavataInternalUserId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:airavataInternalUserId: ", p), err) }
  return err
}

func (p *User) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetUserName() {
    if err := oprot.WriteFieldBegin("userName", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userName: ", p), err) }
    if err := oprot.WriteString(string(*p.UserName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.userName (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userName: ", p), err) }
  }
  return err
}

func (p *User) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gatewayId: ", p), err) }
  return err
}

func (p *User) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetFirstName() {
    if err := oprot.WriteFieldBegin("firstName", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:firstName: ", p), err) }
    if err := oprot.WriteString(string(*p.FirstName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.firstName (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:firstName: ", p), err) }
  }
  return err
}

func (p *User) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetLastName() {
    if err := oprot.WriteFieldBegin("lastName", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:lastName: ", p), err) }
    if err := oprot.WriteString(string(*p.LastName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.lastName (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:lastName: ", p), err) }
  }
  return err
}

func (p *User) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetEmail() {
    if err := oprot.WriteFieldBegin("email", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:email: ", p), err) }
    if err := oprot.WriteString(string(*p.Email)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.email (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:email: ", p), err) }
  }
  return err
}

func (p *User) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("User(%+v)", *p)
}

// Attributes:
//  - AiravataInternalGatewayId
//  - GatewayId
//  - GatewayApprovalStatus
//  - GatewayName
//  - Domain
//  - EmailAddress
//  - GatewayAcronym
//  - GatewayURL
//  - GatewayPublicAbstract
//  - ReviewProposalDescription
//  - GatewayAdminFirstName
//  - GatewayAdminLastName
//  - GatewayAdminEmail
//  - IdentityServerUserName
//  - IdentityServerPasswordToken
//  - DeclinedReason
//  - OauthClientId
//  - OauthClientSecret
//  - RequestCreationTime
//  - RequesterUsername
type Gateway struct {
  AiravataInternalGatewayId *string `thrift:"airavataInternalGatewayId,1" db:"airavataInternalGatewayId" json:"airavataInternalGatewayId,omitempty"`
  GatewayId string `thrift:"gatewayId,2,required" db:"gatewayId" json:"gatewayId"`
  GatewayApprovalStatus GatewayApprovalStatus `thrift:"gatewayApprovalStatus,3,required" db:"gatewayApprovalStatus" json:"gatewayApprovalStatus"`
  GatewayName *string `thrift:"gatewayName,4" db:"gatewayName" json:"gatewayName,omitempty"`
  Domain *string `thrift:"domain,5" db:"domain" json:"domain,omitempty"`
  EmailAddress *string `thrift:"emailAddress,6" db:"emailAddress" json:"emailAddress,omitempty"`
  GatewayAcronym *string `thrift:"gatewayAcronym,7" db:"gatewayAcronym" json:"gatewayAcronym,omitempty"`
  GatewayURL *string `thrift:"gatewayURL,8" db:"gatewayURL" json:"gatewayURL,omitempty"`
  GatewayPublicAbstract *string `thrift:"gatewayPublicAbstract,9" db:"gatewayPublicAbstract" json:"gatewayPublicAbstract,omitempty"`
  ReviewProposalDescription *string `thrift:"reviewProposalDescription,10" db:"reviewProposalDescription" json:"reviewProposalDescription,omitempty"`
  GatewayAdminFirstName *string `thrift:"gatewayAdminFirstName,11" db:"gatewayAdminFirstName" json:"gatewayAdminFirstName,omitempty"`
  GatewayAdminLastName *string `thrift:"gatewayAdminLastName,12" db:"gatewayAdminLastName" json:"gatewayAdminLastName,omitempty"`
  GatewayAdminEmail *string `thrift:"gatewayAdminEmail,13" db:"gatewayAdminEmail" json:"gatewayAdminEmail,omitempty"`
  IdentityServerUserName *string `thrift:"identityServerUserName,14" db:"identityServerUserName" json:"identityServerUserName,omitempty"`
  IdentityServerPasswordToken *string `thrift:"identityServerPasswordToken,15" db:"identityServerPasswordToken" json:"identityServerPasswordToken,omitempty"`
  DeclinedReason *string `thrift:"declinedReason,16" db:"declinedReason" json:"declinedReason,omitempty"`
  OauthClientId *string `thrift:"oauthClientId,17" db:"oauthClientId" json:"oauthClientId,omitempty"`
  OauthClientSecret *string `thrift:"oauthClientSecret,18" db:"oauthClientSecret" json:"oauthClientSecret,omitempty"`
  RequestCreationTime *int64 `thrift:"requestCreationTime,19" db:"requestCreationTime" json:"requestCreationTime,omitempty"`
  RequesterUsername *string `thrift:"requesterUsername,20" db:"requesterUsername" json:"requesterUsername,omitempty"`
}

func NewGateway() *Gateway {
  return &Gateway{}
}

var Gateway_AiravataInternalGatewayId_DEFAULT string
func (p *Gateway) GetAiravataInternalGatewayId() string {
  if !p.IsSetAiravataInternalGatewayId() {
    return Gateway_AiravataInternalGatewayId_DEFAULT
  }
return *p.AiravataInternalGatewayId
}

func (p *Gateway) GetGatewayId() string {
  return p.GatewayId
}

func (p *Gateway) GetGatewayApprovalStatus() GatewayApprovalStatus {
  return p.GatewayApprovalStatus
}
var Gateway_GatewayName_DEFAULT string
func (p *Gateway) GetGatewayName() string {
  if !p.IsSetGatewayName() {
    return Gateway_GatewayName_DEFAULT
  }
return *p.GatewayName
}
var Gateway_Domain_DEFAULT string
func (p *Gateway) GetDomain() string {
  if !p.IsSetDomain() {
    return Gateway_Domain_DEFAULT
  }
return *p.Domain
}
var Gateway_EmailAddress_DEFAULT string
func (p *Gateway) GetEmailAddress() string {
  if !p.IsSetEmailAddress() {
    return Gateway_EmailAddress_DEFAULT
  }
return *p.EmailAddress
}
var Gateway_GatewayAcronym_DEFAULT string
func (p *Gateway) GetGatewayAcronym() string {
  if !p.IsSetGatewayAcronym() {
    return Gateway_GatewayAcronym_DEFAULT
  }
return *p.GatewayAcronym
}
var Gateway_GatewayURL_DEFAULT string
func (p *Gateway) GetGatewayURL() string {
  if !p.IsSetGatewayURL() {
    return Gateway_GatewayURL_DEFAULT
  }
return *p.GatewayURL
}
var Gateway_GatewayPublicAbstract_DEFAULT string
func (p *Gateway) GetGatewayPublicAbstract() string {
  if !p.IsSetGatewayPublicAbstract() {
    return Gateway_GatewayPublicAbstract_DEFAULT
  }
return *p.GatewayPublicAbstract
}
var Gateway_ReviewProposalDescription_DEFAULT string
func (p *Gateway) GetReviewProposalDescription() string {
  if !p.IsSetReviewProposalDescription() {
    return Gateway_ReviewProposalDescription_DEFAULT
  }
return *p.ReviewProposalDescription
}
var Gateway_GatewayAdminFirstName_DEFAULT string
func (p *Gateway) GetGatewayAdminFirstName() string {
  if !p.IsSetGatewayAdminFirstName() {
    return Gateway_GatewayAdminFirstName_DEFAULT
  }
return *p.GatewayAdminFirstName
}
var Gateway_GatewayAdminLastName_DEFAULT string
func (p *Gateway) GetGatewayAdminLastName() string {
  if !p.IsSetGatewayAdminLastName() {
    return Gateway_GatewayAdminLastName_DEFAULT
  }
return *p.GatewayAdminLastName
}
var Gateway_GatewayAdminEmail_DEFAULT string
func (p *Gateway) GetGatewayAdminEmail() string {
  if !p.IsSetGatewayAdminEmail() {
    return Gateway_GatewayAdminEmail_DEFAULT
  }
return *p.GatewayAdminEmail
}
var Gateway_IdentityServerUserName_DEFAULT string
func (p *Gateway) GetIdentityServerUserName() string {
  if !p.IsSetIdentityServerUserName() {
    return Gateway_IdentityServerUserName_DEFAULT
  }
return *p.IdentityServerUserName
}
var Gateway_IdentityServerPasswordToken_DEFAULT string
func (p *Gateway) GetIdentityServerPasswordToken() string {
  if !p.IsSetIdentityServerPasswordToken() {
    return Gateway_IdentityServerPasswordToken_DEFAULT
  }
return *p.IdentityServerPasswordToken
}
var Gateway_DeclinedReason_DEFAULT string
func (p *Gateway) GetDeclinedReason() string {
  if !p.IsSetDeclinedReason() {
    return Gateway_DeclinedReason_DEFAULT
  }
return *p.DeclinedReason
}
var Gateway_OauthClientId_DEFAULT string
func (p *Gateway) GetOauthClientId() string {
  if !p.IsSetOauthClientId() {
    return Gateway_OauthClientId_DEFAULT
  }
return *p.OauthClientId
}
var Gateway_OauthClientSecret_DEFAULT string
func (p *Gateway) GetOauthClientSecret() string {
  if !p.IsSetOauthClientSecret() {
    return Gateway_OauthClientSecret_DEFAULT
  }
return *p.OauthClientSecret
}
var Gateway_RequestCreationTime_DEFAULT int64
func (p *Gateway) GetRequestCreationTime() int64 {
  if !p.IsSetRequestCreationTime() {
    return Gateway_RequestCreationTime_DEFAULT
  }
return *p.RequestCreationTime
}
var Gateway_RequesterUsername_DEFAULT string
func (p *Gateway) GetRequesterUsername() string {
  if !p.IsSetRequesterUsername() {
    return Gateway_RequesterUsername_DEFAULT
  }
return *p.RequesterUsername
}
func (p *Gateway) IsSetAiravataInternalGatewayId() bool {
  return p.AiravataInternalGatewayId != nil
}

func (p *Gateway) IsSetGatewayName() bool {
  return p.GatewayName != nil
}

func (p *Gateway) IsSetDomain() bool {
  return p.Domain != nil
}

func (p *Gateway) IsSetEmailAddress() bool {
  return p.EmailAddress != nil
}

func (p *Gateway) IsSetGatewayAcronym() bool {
  return p.GatewayAcronym != nil
}

func (p *Gateway) IsSetGatewayURL() bool {
  return p.GatewayURL != nil
}

func (p *Gateway) IsSetGatewayPublicAbstract() bool {
  return p.GatewayPublicAbstract != nil
}

func (p *Gateway) IsSetReviewProposalDescription() bool {
  return p.ReviewProposalDescription != nil
}

func (p *Gateway) IsSetGatewayAdminFirstName() bool {
  return p.GatewayAdminFirstName != nil
}

func (p *Gateway) IsSetGatewayAdminLastName() bool {
  return p.GatewayAdminLastName != nil
}

func (p *Gateway) IsSetGatewayAdminEmail() bool {
  return p.GatewayAdminEmail != nil
}

func (p *Gateway) IsSetIdentityServerUserName() bool {
  return p.IdentityServerUserName != nil
}

func (p *Gateway) IsSetIdentityServerPasswordToken() bool {
  return p.IdentityServerPasswordToken != nil
}

func (p *Gateway) IsSetDeclinedReason() bool {
  return p.DeclinedReason != nil
}

func (p *Gateway) IsSetOauthClientId() bool {
  return p.OauthClientId != nil
}

func (p *Gateway) IsSetOauthClientSecret() bool {
  return p.OauthClientSecret != nil
}

func (p *Gateway) IsSetRequestCreationTime() bool {
  return p.RequestCreationTime != nil
}

func (p *Gateway) IsSetRequesterUsername() bool {
  return p.RequesterUsername != nil
}

func (p *Gateway) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetGatewayId bool = false;
  var issetGatewayApprovalStatus bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayApprovalStatus = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField19(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  if !issetGatewayApprovalStatus{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayApprovalStatus is not set"));
  }
  return nil
}

func (p *Gateway)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AiravataInternalGatewayId = &v
}
  return nil
}

func (p *Gateway)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *Gateway)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := GatewayApprovalStatus(v)
  p.GatewayApprovalStatus = temp
}
  return nil
}

func (p *Gateway)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.GatewayName = &v
}
  return nil
}

func (p *Gateway)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Domain = &v
}
  return nil
}

func (p *Gateway)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.EmailAddress = &v
}
  return nil
}

func (p *Gateway)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.GatewayAcronym = &v
}
  return nil
}

func (p *Gateway)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.GatewayURL = &v
}
  return nil
}

func (p *Gateway)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.GatewayPublicAbstract = &v
}
  return nil
}

func (p *Gateway)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.ReviewProposalDescription = &v
}
  return nil
}

func (p *Gateway)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.GatewayAdminFirstName = &v
}
  return nil
}

func (p *Gateway)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.GatewayAdminLastName = &v
}
  return nil
}

func (p *Gateway)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.GatewayAdminEmail = &v
}
  return nil
}

func (p *Gateway)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.IdentityServerUserName = &v
}
  return nil
}

func (p *Gateway)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.IdentityServerPasswordToken = &v
}
  return nil
}

func (p *Gateway)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.DeclinedReason = &v
}
  return nil
}

func (p *Gateway)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.OauthClientId = &v
}
  return nil
}

func (p *Gateway)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.OauthClientSecret = &v
}
  return nil
}

func (p *Gateway)  ReadField19(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.RequestCreationTime = &v
}
  return nil
}

func (p *Gateway)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.RequesterUsername = &v
}
  return nil
}

func (p *Gateway) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Gateway"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Gateway) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetAiravataInternalGatewayId() {
    if err := oprot.WriteFieldBegin("airavataInternalGatewayId", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:airavataInternalGatewayId: ", p), err) }
    if err := oprot.WriteString(string(*p.AiravataInternalGatewayId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.airavataInternalGatewayId (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:airavataInternalGatewayId: ", p), err) }
  }
  return err
}

func (p *Gateway) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayId: ", p), err) }
  return err
}

func (p *Gateway) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayApprovalStatus", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gatewayApprovalStatus: ", p), err) }
  if err := oprot.WriteI32(int32(p.GatewayApprovalStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayApprovalStatus (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gatewayApprovalStatus: ", p), err) }
  return err
}

func (p *Gateway) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetGatewayName() {
    if err := oprot.WriteFieldBegin("gatewayName", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:gatewayName: ", p), err) }
    if err := oprot.WriteString(string(*p.GatewayName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.gatewayName (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:gatewayName: ", p), err) }
  }
  return err
}

func (p *Gateway) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetDomain() {
    if err := oprot.WriteFieldBegin("domain", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:domain: ", p), err) }
    if err := oprot.WriteString(string(*p.Domain)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.domain (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:domain: ", p), err) }
  }
  return err
}

func (p *Gateway) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetEmailAddress() {
    if err := oprot.WriteFieldBegin("emailAddress", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:emailAddress: ", p), err) }
    if err := oprot.WriteString(string(*p.EmailAddress)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.emailAddress (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:emailAddress: ", p), err) }
  }
  return err
}

func (p *Gateway) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetGatewayAcronym() {
    if err := oprot.WriteFieldBegin("gatewayAcronym", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:gatewayAcronym: ", p), err) }
    if err := oprot.WriteString(string(*p.GatewayAcronym)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.gatewayAcronym (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:gatewayAcronym: ", p), err) }
  }
  return err
}

func (p *Gateway) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetGatewayURL() {
    if err := oprot.WriteFieldBegin("gatewayURL", thrift.STRING, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:gatewayURL: ", p), err) }
    if err := oprot.WriteString(string(*p.GatewayURL)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.gatewayURL (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:gatewayURL: ", p), err) }
  }
  return err
}

func (p *Gateway) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetGatewayPublicAbstract() {
    if err := oprot.WriteFieldBegin("gatewayPublicAbstract", thrift.STRING, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:gatewayPublicAbstract: ", p), err) }
    if err := oprot.WriteString(string(*p.GatewayPublicAbstract)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.gatewayPublicAbstract (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:gatewayPublicAbstract: ", p), err) }
  }
  return err
}

func (p *Gateway) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetReviewProposalDescription() {
    if err := oprot.WriteFieldBegin("reviewProposalDescription", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:reviewProposalDescription: ", p), err) }
    if err := oprot.WriteString(string(*p.ReviewProposalDescription)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.reviewProposalDescription (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:reviewProposalDescription: ", p), err) }
  }
  return err
}

func (p *Gateway) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetGatewayAdminFirstName() {
    if err := oprot.WriteFieldBegin("gatewayAdminFirstName", thrift.STRING, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:gatewayAdminFirstName: ", p), err) }
    if err := oprot.WriteString(string(*p.GatewayAdminFirstName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.gatewayAdminFirstName (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:gatewayAdminFirstName: ", p), err) }
  }
  return err
}

func (p *Gateway) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetGatewayAdminLastName() {
    if err := oprot.WriteFieldBegin("gatewayAdminLastName", thrift.STRING, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:gatewayAdminLastName: ", p), err) }
    if err := oprot.WriteString(string(*p.GatewayAdminLastName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.gatewayAdminLastName (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:gatewayAdminLastName: ", p), err) }
  }
  return err
}

func (p *Gateway) writeField13(oprot thrift.TProtocol) (err error) {
  if p.IsSetGatewayAdminEmail() {
    if err := oprot.WriteFieldBegin("gatewayAdminEmail", thrift.STRING, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:gatewayAdminEmail: ", p), err) }
    if err := oprot.WriteString(string(*p.GatewayAdminEmail)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.gatewayAdminEmail (13) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:gatewayAdminEmail: ", p), err) }
  }
  return err
}

func (p *Gateway) writeField14(oprot thrift.TProtocol) (err error) {
  if p.IsSetIdentityServerUserName() {
    if err := oprot.WriteFieldBegin("identityServerUserName", thrift.STRING, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:identityServerUserName: ", p), err) }
    if err := oprot.WriteString(string(*p.IdentityServerUserName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.identityServerUserName (14) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:identityServerUserName: ", p), err) }
  }
  return err
}

func (p *Gateway) writeField15(oprot thrift.TProtocol) (err error) {
  if p.IsSetIdentityServerPasswordToken() {
    if err := oprot.WriteFieldBegin("identityServerPasswordToken", thrift.STRING, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:identityServerPasswordToken: ", p), err) }
    if err := oprot.WriteString(string(*p.IdentityServerPasswordToken)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.identityServerPasswordToken (15) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:identityServerPasswordToken: ", p), err) }
  }
  return err
}

func (p *Gateway) writeField16(oprot thrift.TProtocol) (err error) {
  if p.IsSetDeclinedReason() {
    if err := oprot.WriteFieldBegin("declinedReason", thrift.STRING, 16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:declinedReason: ", p), err) }
    if err := oprot.WriteString(string(*p.DeclinedReason)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.declinedReason (16) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 16:declinedReason: ", p), err) }
  }
  return err
}

func (p *Gateway) writeField17(oprot thrift.TProtocol) (err error) {
  if p.IsSetOauthClientId() {
    if err := oprot.WriteFieldBegin("oauthClientId", thrift.STRING, 17); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:oauthClientId: ", p), err) }
    if err := oprot.WriteString(string(*p.OauthClientId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.oauthClientId (17) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 17:oauthClientId: ", p), err) }
  }
  return err
}

func (p *Gateway) writeField18(oprot thrift.TProtocol) (err error) {
  if p.IsSetOauthClientSecret() {
    if err := oprot.WriteFieldBegin("oauthClientSecret", thrift.STRING, 18); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:oauthClientSecret: ", p), err) }
    if err := oprot.WriteString(string(*p.OauthClientSecret)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.oauthClientSecret (18) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 18:oauthClientSecret: ", p), err) }
  }
  return err
}

func (p *Gateway) writeField19(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestCreationTime() {
    if err := oprot.WriteFieldBegin("requestCreationTime", thrift.I64, 19); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:requestCreationTime: ", p), err) }
    if err := oprot.WriteI64(int64(*p.RequestCreationTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.requestCreationTime (19) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 19:requestCreationTime: ", p), err) }
  }
  return err
}

func (p *Gateway) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequesterUsername() {
    if err := oprot.WriteFieldBegin("requesterUsername", thrift.STRING, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:requesterUsername: ", p), err) }
    if err := oprot.WriteString(string(*p.RequesterUsername)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.requesterUsername (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:requesterUsername: ", p), err) }
  }
  return err
}

func (p *Gateway) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Gateway(%+v)", *p)
}

// Attributes:
//  - NotificationId
//  - GatewayId
//  - Title
//  - NotificationMessage
//  - CreationTime
//  - PublishedTime
//  - ExpirationTime
//  - Priority
type Notification struct {
  NotificationId *string `thrift:"notificationId,1" db:"notificationId" json:"notificationId,omitempty"`
  GatewayId string `thrift:"gatewayId,2,required" db:"gatewayId" json:"gatewayId"`
  Title string `thrift:"title,3,required" db:"title" json:"title"`
  NotificationMessage string `thrift:"notificationMessage,4,required" db:"notificationMessage" json:"notificationMessage"`
  CreationTime *int64 `thrift:"creationTime,5" db:"creationTime" json:"creationTime,omitempty"`
  PublishedTime *int64 `thrift:"publishedTime,6" db:"publishedTime" json:"publishedTime,omitempty"`
  ExpirationTime *int64 `thrift:"expirationTime,7" db:"expirationTime" json:"expirationTime,omitempty"`
  Priority *NotificationPriority `thrift:"priority,8" db:"priority" json:"priority,omitempty"`
}

func NewNotification() *Notification {
  return &Notification{}
}

var Notification_NotificationId_DEFAULT string
func (p *Notification) GetNotificationId() string {
  if !p.IsSetNotificationId() {
    return Notification_NotificationId_DEFAULT
  }
return *p.NotificationId
}

func (p *Notification) GetGatewayId() string {
  return p.GatewayId
}

func (p *Notification) GetTitle() string {
  return p.Title
}

func (p *Notification) GetNotificationMessage() string {
  return p.NotificationMessage
}
var Notification_CreationTime_DEFAULT int64
func (p *Notification) GetCreationTime() int64 {
  if !p.IsSetCreationTime() {
    return Notification_CreationTime_DEFAULT
  }
return *p.CreationTime
}
var Notification_PublishedTime_DEFAULT int64
func (p *Notification) GetPublishedTime() int64 {
  if !p.IsSetPublishedTime() {
    return Notification_PublishedTime_DEFAULT
  }
return *p.PublishedTime
}
var Notification_ExpirationTime_DEFAULT int64
func (p *Notification) GetExpirationTime() int64 {
  if !p.IsSetExpirationTime() {
    return Notification_ExpirationTime_DEFAULT
  }
return *p.ExpirationTime
}
var Notification_Priority_DEFAULT NotificationPriority
func (p *Notification) GetPriority() NotificationPriority {
  if !p.IsSetPriority() {
    return Notification_Priority_DEFAULT
  }
return *p.Priority
}
func (p *Notification) IsSetNotificationId() bool {
  return p.NotificationId != nil
}

func (p *Notification) IsSetCreationTime() bool {
  return p.CreationTime != nil
}

func (p *Notification) IsSetPublishedTime() bool {
  return p.PublishedTime != nil
}

func (p *Notification) IsSetExpirationTime() bool {
  return p.ExpirationTime != nil
}

func (p *Notification) IsSetPriority() bool {
  return p.Priority != nil
}

func (p *Notification) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetGatewayId bool = false;
  var issetTitle bool = false;
  var issetNotificationMessage bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetTitle = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetNotificationMessage = true
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  if !issetTitle{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Title is not set"));
  }
  if !issetNotificationMessage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NotificationMessage is not set"));
  }
  return nil
}

func (p *Notification)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.NotificationId = &v
}
  return nil
}

func (p *Notification)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *Notification)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Title = v
}
  return nil
}

func (p *Notification)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NotificationMessage = v
}
  return nil
}

func (p *Notification)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CreationTime = &v
}
  return nil
}

func (p *Notification)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.PublishedTime = &v
}
  return nil
}

func (p *Notification)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.ExpirationTime = &v
}
  return nil
}

func (p *Notification)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  temp := NotificationPriority(v)
  p.Priority = &temp
}
  return nil
}

func (p *Notification) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Notification"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Notification) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetNotificationId() {
    if err := oprot.WriteFieldBegin("notificationId", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:notificationId: ", p), err) }
    if err := oprot.WriteString(string(*p.NotificationId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.notificationId (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:notificationId: ", p), err) }
  }
  return err
}

func (p *Notification) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayId: ", p), err) }
  return err
}

func (p *Notification) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("title", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:title: ", p), err) }
  if err := oprot.WriteString(string(p.Title)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.title (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:title: ", p), err) }
  return err
}

func (p *Notification) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("notificationMessage", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:notificationMessage: ", p), err) }
  if err := oprot.WriteString(string(p.NotificationMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationMessage (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:notificationMessage: ", p), err) }
  return err
}

func (p *Notification) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetCreationTime() {
    if err := oprot.WriteFieldBegin("creationTime", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:creationTime: ", p), err) }
    if err := oprot.WriteI64(int64(*p.CreationTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.creationTime (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:creationTime: ", p), err) }
  }
  return err
}

func (p *Notification) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetPublishedTime() {
    if err := oprot.WriteFieldBegin("publishedTime", thrift.I64, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:publishedTime: ", p), err) }
    if err := oprot.WriteI64(int64(*p.PublishedTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.publishedTime (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:publishedTime: ", p), err) }
  }
  return err
}

func (p *Notification) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetExpirationTime() {
    if err := oprot.WriteFieldBegin("expirationTime", thrift.I64, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:expirationTime: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ExpirationTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.expirationTime (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:expirationTime: ", p), err) }
  }
  return err
}

func (p *Notification) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetPriority() {
    if err := oprot.WriteFieldBegin("priority", thrift.I32, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:priority: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Priority)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.priority (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:priority: ", p), err) }
  }
  return err
}

func (p *Notification) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Notification(%+v)", *p)
}

