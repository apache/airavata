// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package db_event_model

import (
	"bytes"
	"reflect"
	"database/sql/driver"
	"errors"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type CrudType int64
const (
  CrudType_CREATE CrudType = 0
  CrudType_READ CrudType = 1
  CrudType_UPDATE CrudType = 2
  CrudType_DELETE CrudType = 3
)

func (p CrudType) String() string {
  switch p {
  case CrudType_CREATE: return "CREATE"
  case CrudType_READ: return "READ"
  case CrudType_UPDATE: return "UPDATE"
  case CrudType_DELETE: return "DELETE"
  }
  return "<UNSET>"
}

func CrudTypeFromString(s string) (CrudType, error) {
  switch s {
  case "CREATE": return CrudType_CREATE, nil 
  case "READ": return CrudType_READ, nil 
  case "UPDATE": return CrudType_UPDATE, nil 
  case "DELETE": return CrudType_DELETE, nil 
  }
  return CrudType(0), fmt.Errorf("not a valid CrudType string")
}


func CrudTypePtr(v CrudType) *CrudType { return &v }

func (p CrudType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *CrudType) UnmarshalText(text []byte) error {
q, err := CrudTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *CrudType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = CrudType(v)
return nil
}

func (p * CrudType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type EntityType int64
const (
  EntityType_USER_PROFILE EntityType = 0
  EntityType_TENANT EntityType = 1
  EntityType_GROUP EntityType = 2
  EntityType_PROJECT EntityType = 3
  EntityType_EXPERIMENT EntityType = 4
  EntityType_APPLICATION EntityType = 5
  EntityType_SHARING EntityType = 6
  EntityType_REGISTRY EntityType = 7
)

func (p EntityType) String() string {
  switch p {
  case EntityType_USER_PROFILE: return "USER_PROFILE"
  case EntityType_TENANT: return "TENANT"
  case EntityType_GROUP: return "GROUP"
  case EntityType_PROJECT: return "PROJECT"
  case EntityType_EXPERIMENT: return "EXPERIMENT"
  case EntityType_APPLICATION: return "APPLICATION"
  case EntityType_SHARING: return "SHARING"
  case EntityType_REGISTRY: return "REGISTRY"
  }
  return "<UNSET>"
}

func EntityTypeFromString(s string) (EntityType, error) {
  switch s {
  case "USER_PROFILE": return EntityType_USER_PROFILE, nil 
  case "TENANT": return EntityType_TENANT, nil 
  case "GROUP": return EntityType_GROUP, nil 
  case "PROJECT": return EntityType_PROJECT, nil 
  case "EXPERIMENT": return EntityType_EXPERIMENT, nil 
  case "APPLICATION": return EntityType_APPLICATION, nil 
  case "SHARING": return EntityType_SHARING, nil 
  case "REGISTRY": return EntityType_REGISTRY, nil 
  }
  return EntityType(0), fmt.Errorf("not a valid EntityType string")
}


func EntityTypePtr(v EntityType) *EntityType { return &v }

func (p EntityType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *EntityType) UnmarshalText(text []byte) error {
q, err := EntityTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *EntityType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = EntityType(v)
return nil
}

func (p * EntityType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type DBEventType int64
const (
  DBEventType_PUBLISHER DBEventType = 0
  DBEventType_SUBSCRIBER DBEventType = 1
)

func (p DBEventType) String() string {
  switch p {
  case DBEventType_PUBLISHER: return "PUBLISHER"
  case DBEventType_SUBSCRIBER: return "SUBSCRIBER"
  }
  return "<UNSET>"
}

func DBEventTypeFromString(s string) (DBEventType, error) {
  switch s {
  case "PUBLISHER": return DBEventType_PUBLISHER, nil 
  case "SUBSCRIBER": return DBEventType_SUBSCRIBER, nil 
  }
  return DBEventType(0), fmt.Errorf("not a valid DBEventType string")
}


func DBEventTypePtr(v DBEventType) *DBEventType { return &v }

func (p DBEventType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *DBEventType) UnmarshalText(text []byte) error {
q, err := DBEventTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *DBEventType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = DBEventType(v)
return nil
}

func (p * DBEventType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - CrudType
//  - EntityType
//  - EntityDataModel
type DBEventPublisherContext struct {
  CrudType CrudType `thrift:"crudType,1,required" db:"crudType" json:"crudType"`
  EntityType EntityType `thrift:"entityType,2,required" db:"entityType" json:"entityType"`
  EntityDataModel []byte `thrift:"entityDataModel,3,required" db:"entityDataModel" json:"entityDataModel"`
}

func NewDBEventPublisherContext() *DBEventPublisherContext {
  return &DBEventPublisherContext{}
}


func (p *DBEventPublisherContext) GetCrudType() CrudType {
  return p.CrudType
}

func (p *DBEventPublisherContext) GetEntityType() EntityType {
  return p.EntityType
}

func (p *DBEventPublisherContext) GetEntityDataModel() []byte {
  return p.EntityDataModel
}
func (p *DBEventPublisherContext) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetCrudType bool = false;
  var issetEntityType bool = false;
  var issetEntityDataModel bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetCrudType = true
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetEntityType = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetEntityDataModel = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetCrudType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CrudType is not set"));
  }
  if !issetEntityType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field EntityType is not set"));
  }
  if !issetEntityDataModel{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field EntityDataModel is not set"));
  }
  return nil
}

func (p *DBEventPublisherContext)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := CrudType(v)
  p.CrudType = temp
}
  return nil
}

func (p *DBEventPublisherContext)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := EntityType(v)
  p.EntityType = temp
}
  return nil
}

func (p *DBEventPublisherContext)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.EntityDataModel = v
}
  return nil
}

func (p *DBEventPublisherContext) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DBEventPublisherContext"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DBEventPublisherContext) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("crudType", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:crudType: ", p), err) }
  if err := oprot.WriteI32(int32(p.CrudType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.crudType (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:crudType: ", p), err) }
  return err
}

func (p *DBEventPublisherContext) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("entityType", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:entityType: ", p), err) }
  if err := oprot.WriteI32(int32(p.EntityType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.entityType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:entityType: ", p), err) }
  return err
}

func (p *DBEventPublisherContext) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("entityDataModel", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entityDataModel: ", p), err) }
  if err := oprot.WriteBinary(p.EntityDataModel); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.entityDataModel (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entityDataModel: ", p), err) }
  return err
}

func (p *DBEventPublisherContext) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DBEventPublisherContext(%+v)", *p)
}

// Attributes:
//  - PublisherContext
type DBEventPublisher struct {
  PublisherContext *DBEventPublisherContext `thrift:"publisherContext,1,required" db:"publisherContext" json:"publisherContext"`
}

func NewDBEventPublisher() *DBEventPublisher {
  return &DBEventPublisher{}
}

var DBEventPublisher_PublisherContext_DEFAULT *DBEventPublisherContext
func (p *DBEventPublisher) GetPublisherContext() *DBEventPublisherContext {
  if !p.IsSetPublisherContext() {
    return DBEventPublisher_PublisherContext_DEFAULT
  }
return p.PublisherContext
}
func (p *DBEventPublisher) IsSetPublisherContext() bool {
  return p.PublisherContext != nil
}

func (p *DBEventPublisher) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetPublisherContext bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetPublisherContext = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetPublisherContext{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PublisherContext is not set"));
  }
  return nil
}

func (p *DBEventPublisher)  ReadField1(iprot thrift.TProtocol) error {
  p.PublisherContext = &DBEventPublisherContext{}
  if err := p.PublisherContext.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PublisherContext), err)
  }
  return nil
}

func (p *DBEventPublisher) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DBEventPublisher"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DBEventPublisher) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("publisherContext", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:publisherContext: ", p), err) }
  if err := p.PublisherContext.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PublisherContext), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:publisherContext: ", p), err) }
  return err
}

func (p *DBEventPublisher) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DBEventPublisher(%+v)", *p)
}

// Attributes:
//  - SubscriberService
type DBEventSubscriber struct {
  SubscriberService string `thrift:"subscriberService,1,required" db:"subscriberService" json:"subscriberService"`
}

func NewDBEventSubscriber() *DBEventSubscriber {
  return &DBEventSubscriber{}
}


func (p *DBEventSubscriber) GetSubscriberService() string {
  return p.SubscriberService
}
func (p *DBEventSubscriber) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetSubscriberService bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetSubscriberService = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetSubscriberService{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SubscriberService is not set"));
  }
  return nil
}

func (p *DBEventSubscriber)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SubscriberService = v
}
  return nil
}

func (p *DBEventSubscriber) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DBEventSubscriber"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DBEventSubscriber) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("subscriberService", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:subscriberService: ", p), err) }
  if err := oprot.WriteString(string(p.SubscriberService)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.subscriberService (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:subscriberService: ", p), err) }
  return err
}

func (p *DBEventSubscriber) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DBEventSubscriber(%+v)", *p)
}

// Attributes:
//  - Publisher
//  - Subscriber
type DBEventMessageContext struct {
  Publisher *DBEventPublisher `thrift:"publisher,1" db:"publisher" json:"publisher,omitempty"`
  Subscriber *DBEventSubscriber `thrift:"subscriber,2" db:"subscriber" json:"subscriber,omitempty"`
}

func NewDBEventMessageContext() *DBEventMessageContext {
  return &DBEventMessageContext{}
}

var DBEventMessageContext_Publisher_DEFAULT *DBEventPublisher
func (p *DBEventMessageContext) GetPublisher() *DBEventPublisher {
  if !p.IsSetPublisher() {
    return DBEventMessageContext_Publisher_DEFAULT
  }
return p.Publisher
}
var DBEventMessageContext_Subscriber_DEFAULT *DBEventSubscriber
func (p *DBEventMessageContext) GetSubscriber() *DBEventSubscriber {
  if !p.IsSetSubscriber() {
    return DBEventMessageContext_Subscriber_DEFAULT
  }
return p.Subscriber
}
func (p *DBEventMessageContext) CountSetFieldsDBEventMessageContext() int {
  count := 0
  if (p.IsSetPublisher()) {
    count++
  }
  if (p.IsSetSubscriber()) {
    count++
  }
  return count

}

func (p *DBEventMessageContext) IsSetPublisher() bool {
  return p.Publisher != nil
}

func (p *DBEventMessageContext) IsSetSubscriber() bool {
  return p.Subscriber != nil
}

func (p *DBEventMessageContext) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DBEventMessageContext)  ReadField1(iprot thrift.TProtocol) error {
  p.Publisher = &DBEventPublisher{}
  if err := p.Publisher.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Publisher), err)
  }
  return nil
}

func (p *DBEventMessageContext)  ReadField2(iprot thrift.TProtocol) error {
  p.Subscriber = &DBEventSubscriber{}
  if err := p.Subscriber.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Subscriber), err)
  }
  return nil
}

func (p *DBEventMessageContext) Write(oprot thrift.TProtocol) error {
  if c := p.CountSetFieldsDBEventMessageContext(); c != 1 {
    return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
  }
  if err := oprot.WriteStructBegin("DBEventMessageContext"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DBEventMessageContext) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetPublisher() {
    if err := oprot.WriteFieldBegin("publisher", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:publisher: ", p), err) }
    if err := p.Publisher.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Publisher), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:publisher: ", p), err) }
  }
  return err
}

func (p *DBEventMessageContext) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetSubscriber() {
    if err := oprot.WriteFieldBegin("subscriber", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:subscriber: ", p), err) }
    if err := p.Subscriber.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Subscriber), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:subscriber: ", p), err) }
  }
  return err
}

func (p *DBEventMessageContext) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DBEventMessageContext(%+v)", *p)
}

// Attributes:
//  - DbEventType
//  - MessageContext
//  - PublisherService
type DBEventMessage struct {
  DbEventType DBEventType `thrift:"dbEventType,1,required" db:"dbEventType" json:"dbEventType"`
  MessageContext *DBEventMessageContext `thrift:"messageContext,2,required" db:"messageContext" json:"messageContext"`
  PublisherService string `thrift:"publisherService,3,required" db:"publisherService" json:"publisherService"`
}

func NewDBEventMessage() *DBEventMessage {
  return &DBEventMessage{}
}


func (p *DBEventMessage) GetDbEventType() DBEventType {
  return p.DbEventType
}
var DBEventMessage_MessageContext_DEFAULT *DBEventMessageContext
func (p *DBEventMessage) GetMessageContext() *DBEventMessageContext {
  if !p.IsSetMessageContext() {
    return DBEventMessage_MessageContext_DEFAULT
  }
return p.MessageContext
}

func (p *DBEventMessage) GetPublisherService() string {
  return p.PublisherService
}
func (p *DBEventMessage) IsSetMessageContext() bool {
  return p.MessageContext != nil
}

func (p *DBEventMessage) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetDbEventType bool = false;
  var issetMessageContext bool = false;
  var issetPublisherService bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetDbEventType = true
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetMessageContext = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetPublisherService = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetDbEventType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DbEventType is not set"));
  }
  if !issetMessageContext{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MessageContext is not set"));
  }
  if !issetPublisherService{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PublisherService is not set"));
  }
  return nil
}

func (p *DBEventMessage)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := DBEventType(v)
  p.DbEventType = temp
}
  return nil
}

func (p *DBEventMessage)  ReadField2(iprot thrift.TProtocol) error {
  p.MessageContext = &DBEventMessageContext{}
  if err := p.MessageContext.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MessageContext), err)
  }
  return nil
}

func (p *DBEventMessage)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PublisherService = v
}
  return nil
}

func (p *DBEventMessage) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DBEventMessage"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DBEventMessage) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dbEventType", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbEventType: ", p), err) }
  if err := oprot.WriteI32(int32(p.DbEventType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbEventType (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbEventType: ", p), err) }
  return err
}

func (p *DBEventMessage) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("messageContext", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:messageContext: ", p), err) }
  if err := p.MessageContext.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MessageContext), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:messageContext: ", p), err) }
  return err
}

func (p *DBEventMessage) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("publisherService", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:publisherService: ", p), err) }
  if err := oprot.WriteString(string(p.PublisherService)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.publisherService (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:publisherService: ", p), err) }
  return err
}

func (p *DBEventMessage) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DBEventMessage(%+v)", *p)
}

