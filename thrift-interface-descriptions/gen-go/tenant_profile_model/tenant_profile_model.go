// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package tenant_profile_model

import (
	"bytes"
	"reflect"
	"database/sql/driver"
	"errors"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"airavata_commons"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = airavata_commons.GoUnusedProtection__
type TenantApprovalStatus int64
const (
  TenantApprovalStatus_REQUESTED TenantApprovalStatus = 0
  TenantApprovalStatus_APPROVED TenantApprovalStatus = 1
  TenantApprovalStatus_ACTIVE TenantApprovalStatus = 2
  TenantApprovalStatus_DEACTIVATED TenantApprovalStatus = 3
  TenantApprovalStatus_CANCELLED TenantApprovalStatus = 4
  TenantApprovalStatus_DENIED TenantApprovalStatus = 5
  TenantApprovalStatus_CREATED TenantApprovalStatus = 6
  TenantApprovalStatus_DEPLOYED TenantApprovalStatus = 7
)

func (p TenantApprovalStatus) String() string {
  switch p {
  case TenantApprovalStatus_REQUESTED: return "REQUESTED"
  case TenantApprovalStatus_APPROVED: return "APPROVED"
  case TenantApprovalStatus_ACTIVE: return "ACTIVE"
  case TenantApprovalStatus_DEACTIVATED: return "DEACTIVATED"
  case TenantApprovalStatus_CANCELLED: return "CANCELLED"
  case TenantApprovalStatus_DENIED: return "DENIED"
  case TenantApprovalStatus_CREATED: return "CREATED"
  case TenantApprovalStatus_DEPLOYED: return "DEPLOYED"
  }
  return "<UNSET>"
}

func TenantApprovalStatusFromString(s string) (TenantApprovalStatus, error) {
  switch s {
  case "REQUESTED": return TenantApprovalStatus_REQUESTED, nil 
  case "APPROVED": return TenantApprovalStatus_APPROVED, nil 
  case "ACTIVE": return TenantApprovalStatus_ACTIVE, nil 
  case "DEACTIVATED": return TenantApprovalStatus_DEACTIVATED, nil 
  case "CANCELLED": return TenantApprovalStatus_CANCELLED, nil 
  case "DENIED": return TenantApprovalStatus_DENIED, nil 
  case "CREATED": return TenantApprovalStatus_CREATED, nil 
  case "DEPLOYED": return TenantApprovalStatus_DEPLOYED, nil 
  }
  return TenantApprovalStatus(0), fmt.Errorf("not a valid TenantApprovalStatus string")
}


func TenantApprovalStatusPtr(v TenantApprovalStatus) *TenantApprovalStatus { return &v }

func (p TenantApprovalStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TenantApprovalStatus) UnmarshalText(text []byte) error {
q, err := TenantApprovalStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TenantApprovalStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TenantApprovalStatus(v)
return nil
}

func (p * TenantApprovalStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - TenantAdminFirstName
//  - TenantAdminLastName
//  - TenantAdminEmail
type TenantPreferences struct {
  // unused fields # 1 to 9
  TenantAdminFirstName *string `thrift:"tenantAdminFirstName,10" db:"tenantAdminFirstName" json:"tenantAdminFirstName,omitempty"`
  TenantAdminLastName *string `thrift:"tenantAdminLastName,11" db:"tenantAdminLastName" json:"tenantAdminLastName,omitempty"`
  TenantAdminEmail *string `thrift:"tenantAdminEmail,12" db:"tenantAdminEmail" json:"tenantAdminEmail,omitempty"`
}

func NewTenantPreferences() *TenantPreferences {
  return &TenantPreferences{}
}

var TenantPreferences_TenantAdminFirstName_DEFAULT string
func (p *TenantPreferences) GetTenantAdminFirstName() string {
  if !p.IsSetTenantAdminFirstName() {
    return TenantPreferences_TenantAdminFirstName_DEFAULT
  }
return *p.TenantAdminFirstName
}
var TenantPreferences_TenantAdminLastName_DEFAULT string
func (p *TenantPreferences) GetTenantAdminLastName() string {
  if !p.IsSetTenantAdminLastName() {
    return TenantPreferences_TenantAdminLastName_DEFAULT
  }
return *p.TenantAdminLastName
}
var TenantPreferences_TenantAdminEmail_DEFAULT string
func (p *TenantPreferences) GetTenantAdminEmail() string {
  if !p.IsSetTenantAdminEmail() {
    return TenantPreferences_TenantAdminEmail_DEFAULT
  }
return *p.TenantAdminEmail
}
func (p *TenantPreferences) IsSetTenantAdminFirstName() bool {
  return p.TenantAdminFirstName != nil
}

func (p *TenantPreferences) IsSetTenantAdminLastName() bool {
  return p.TenantAdminLastName != nil
}

func (p *TenantPreferences) IsSetTenantAdminEmail() bool {
  return p.TenantAdminEmail != nil
}

func (p *TenantPreferences) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TenantPreferences)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.TenantAdminFirstName = &v
}
  return nil
}

func (p *TenantPreferences)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.TenantAdminLastName = &v
}
  return nil
}

func (p *TenantPreferences)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.TenantAdminEmail = &v
}
  return nil
}

func (p *TenantPreferences) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TenantPreferences"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TenantPreferences) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetTenantAdminFirstName() {
    if err := oprot.WriteFieldBegin("tenantAdminFirstName", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:tenantAdminFirstName: ", p), err) }
    if err := oprot.WriteString(string(*p.TenantAdminFirstName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.tenantAdminFirstName (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:tenantAdminFirstName: ", p), err) }
  }
  return err
}

func (p *TenantPreferences) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetTenantAdminLastName() {
    if err := oprot.WriteFieldBegin("tenantAdminLastName", thrift.STRING, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:tenantAdminLastName: ", p), err) }
    if err := oprot.WriteString(string(*p.TenantAdminLastName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.tenantAdminLastName (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:tenantAdminLastName: ", p), err) }
  }
  return err
}

func (p *TenantPreferences) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetTenantAdminEmail() {
    if err := oprot.WriteFieldBegin("tenantAdminEmail", thrift.STRING, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:tenantAdminEmail: ", p), err) }
    if err := oprot.WriteString(string(*p.TenantAdminEmail)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.tenantAdminEmail (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:tenantAdminEmail: ", p), err) }
  }
  return err
}

func (p *TenantPreferences) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TenantPreferences(%+v)", *p)
}

// Attributes:
//  - OauthClientId
//  - OauthClientSecret
//  - IdentityServerUserName
//  - IdentityServerPasswordToken
type TenantConfig struct {
  // unused fields # 1 to 12
  IdentityServerUserName *string `thrift:"identityServerUserName,13" db:"identityServerUserName" json:"identityServerUserName,omitempty"`
  IdentityServerPasswordToken *string `thrift:"identityServerPasswordToken,14" db:"identityServerPasswordToken" json:"identityServerPasswordToken,omitempty"`
  // unused field # 15
  OauthClientId *string `thrift:"oauthClientId,16" db:"oauthClientId" json:"oauthClientId,omitempty"`
  OauthClientSecret *string `thrift:"oauthClientSecret,17" db:"oauthClientSecret" json:"oauthClientSecret,omitempty"`
}

func NewTenantConfig() *TenantConfig {
  return &TenantConfig{}
}

var TenantConfig_OauthClientId_DEFAULT string
func (p *TenantConfig) GetOauthClientId() string {
  if !p.IsSetOauthClientId() {
    return TenantConfig_OauthClientId_DEFAULT
  }
return *p.OauthClientId
}
var TenantConfig_OauthClientSecret_DEFAULT string
func (p *TenantConfig) GetOauthClientSecret() string {
  if !p.IsSetOauthClientSecret() {
    return TenantConfig_OauthClientSecret_DEFAULT
  }
return *p.OauthClientSecret
}
var TenantConfig_IdentityServerUserName_DEFAULT string
func (p *TenantConfig) GetIdentityServerUserName() string {
  if !p.IsSetIdentityServerUserName() {
    return TenantConfig_IdentityServerUserName_DEFAULT
  }
return *p.IdentityServerUserName
}
var TenantConfig_IdentityServerPasswordToken_DEFAULT string
func (p *TenantConfig) GetIdentityServerPasswordToken() string {
  if !p.IsSetIdentityServerPasswordToken() {
    return TenantConfig_IdentityServerPasswordToken_DEFAULT
  }
return *p.IdentityServerPasswordToken
}
func (p *TenantConfig) IsSetOauthClientId() bool {
  return p.OauthClientId != nil
}

func (p *TenantConfig) IsSetOauthClientSecret() bool {
  return p.OauthClientSecret != nil
}

func (p *TenantConfig) IsSetIdentityServerUserName() bool {
  return p.IdentityServerUserName != nil
}

func (p *TenantConfig) IsSetIdentityServerPasswordToken() bool {
  return p.IdentityServerPasswordToken != nil
}

func (p *TenantConfig) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 16:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TenantConfig)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.OauthClientId = &v
}
  return nil
}

func (p *TenantConfig)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.OauthClientSecret = &v
}
  return nil
}

func (p *TenantConfig)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.IdentityServerUserName = &v
}
  return nil
}

func (p *TenantConfig)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.IdentityServerPasswordToken = &v
}
  return nil
}

func (p *TenantConfig) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TenantConfig"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TenantConfig) writeField13(oprot thrift.TProtocol) (err error) {
  if p.IsSetIdentityServerUserName() {
    if err := oprot.WriteFieldBegin("identityServerUserName", thrift.STRING, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:identityServerUserName: ", p), err) }
    if err := oprot.WriteString(string(*p.IdentityServerUserName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.identityServerUserName (13) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:identityServerUserName: ", p), err) }
  }
  return err
}

func (p *TenantConfig) writeField14(oprot thrift.TProtocol) (err error) {
  if p.IsSetIdentityServerPasswordToken() {
    if err := oprot.WriteFieldBegin("identityServerPasswordToken", thrift.STRING, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:identityServerPasswordToken: ", p), err) }
    if err := oprot.WriteString(string(*p.IdentityServerPasswordToken)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.identityServerPasswordToken (14) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:identityServerPasswordToken: ", p), err) }
  }
  return err
}

func (p *TenantConfig) writeField16(oprot thrift.TProtocol) (err error) {
  if p.IsSetOauthClientId() {
    if err := oprot.WriteFieldBegin("oauthClientId", thrift.STRING, 16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:oauthClientId: ", p), err) }
    if err := oprot.WriteString(string(*p.OauthClientId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.oauthClientId (16) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 16:oauthClientId: ", p), err) }
  }
  return err
}

func (p *TenantConfig) writeField17(oprot thrift.TProtocol) (err error) {
  if p.IsSetOauthClientSecret() {
    if err := oprot.WriteFieldBegin("oauthClientSecret", thrift.STRING, 17); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:oauthClientSecret: ", p), err) }
    if err := oprot.WriteString(string(*p.OauthClientSecret)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.oauthClientSecret (17) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 17:oauthClientSecret: ", p), err) }
  }
  return err
}

func (p *TenantConfig) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TenantConfig(%+v)", *p)
}

// Attributes:
//  - TenantId
//  - TenantApprovalStatus
//  - TenantName
//  - Domain
//  - EmailAddress
//  - TenantAcronym
//  - TenantURL
//  - TenantPublicAbstract
//  - ReviewProposalDescription
//  - DeclinedReason
//  - RequestCreationTime
//  - RequesterUsername
type Tenant struct {
  TenantId string `thrift:"tenantId,1,required" db:"tenantId" json:"tenantId"`
  TenantApprovalStatus TenantApprovalStatus `thrift:"tenantApprovalStatus,2,required" db:"tenantApprovalStatus" json:"tenantApprovalStatus"`
  TenantName *string `thrift:"tenantName,3" db:"tenantName" json:"tenantName,omitempty"`
  Domain *string `thrift:"domain,4" db:"domain" json:"domain,omitempty"`
  EmailAddress *string `thrift:"emailAddress,5" db:"emailAddress" json:"emailAddress,omitempty"`
  TenantAcronym *string `thrift:"tenantAcronym,6" db:"tenantAcronym" json:"tenantAcronym,omitempty"`
  TenantURL *string `thrift:"tenantURL,7" db:"tenantURL" json:"tenantURL,omitempty"`
  TenantPublicAbstract *string `thrift:"tenantPublicAbstract,8" db:"tenantPublicAbstract" json:"tenantPublicAbstract,omitempty"`
  ReviewProposalDescription *string `thrift:"reviewProposalDescription,9" db:"reviewProposalDescription" json:"reviewProposalDescription,omitempty"`
  // unused fields # 10 to 14
  DeclinedReason *string `thrift:"declinedReason,15" db:"declinedReason" json:"declinedReason,omitempty"`
  // unused fields # 16 to 17
  RequestCreationTime *int64 `thrift:"requestCreationTime,18" db:"requestCreationTime" json:"requestCreationTime,omitempty"`
  RequesterUsername *string `thrift:"requesterUsername,19" db:"requesterUsername" json:"requesterUsername,omitempty"`
}

func NewTenant() *Tenant {
  return &Tenant{}
}


func (p *Tenant) GetTenantId() string {
  return p.TenantId
}

func (p *Tenant) GetTenantApprovalStatus() TenantApprovalStatus {
  return p.TenantApprovalStatus
}
var Tenant_TenantName_DEFAULT string
func (p *Tenant) GetTenantName() string {
  if !p.IsSetTenantName() {
    return Tenant_TenantName_DEFAULT
  }
return *p.TenantName
}
var Tenant_Domain_DEFAULT string
func (p *Tenant) GetDomain() string {
  if !p.IsSetDomain() {
    return Tenant_Domain_DEFAULT
  }
return *p.Domain
}
var Tenant_EmailAddress_DEFAULT string
func (p *Tenant) GetEmailAddress() string {
  if !p.IsSetEmailAddress() {
    return Tenant_EmailAddress_DEFAULT
  }
return *p.EmailAddress
}
var Tenant_TenantAcronym_DEFAULT string
func (p *Tenant) GetTenantAcronym() string {
  if !p.IsSetTenantAcronym() {
    return Tenant_TenantAcronym_DEFAULT
  }
return *p.TenantAcronym
}
var Tenant_TenantURL_DEFAULT string
func (p *Tenant) GetTenantURL() string {
  if !p.IsSetTenantURL() {
    return Tenant_TenantURL_DEFAULT
  }
return *p.TenantURL
}
var Tenant_TenantPublicAbstract_DEFAULT string
func (p *Tenant) GetTenantPublicAbstract() string {
  if !p.IsSetTenantPublicAbstract() {
    return Tenant_TenantPublicAbstract_DEFAULT
  }
return *p.TenantPublicAbstract
}
var Tenant_ReviewProposalDescription_DEFAULT string
func (p *Tenant) GetReviewProposalDescription() string {
  if !p.IsSetReviewProposalDescription() {
    return Tenant_ReviewProposalDescription_DEFAULT
  }
return *p.ReviewProposalDescription
}
var Tenant_DeclinedReason_DEFAULT string
func (p *Tenant) GetDeclinedReason() string {
  if !p.IsSetDeclinedReason() {
    return Tenant_DeclinedReason_DEFAULT
  }
return *p.DeclinedReason
}
var Tenant_RequestCreationTime_DEFAULT int64
func (p *Tenant) GetRequestCreationTime() int64 {
  if !p.IsSetRequestCreationTime() {
    return Tenant_RequestCreationTime_DEFAULT
  }
return *p.RequestCreationTime
}
var Tenant_RequesterUsername_DEFAULT string
func (p *Tenant) GetRequesterUsername() string {
  if !p.IsSetRequesterUsername() {
    return Tenant_RequesterUsername_DEFAULT
  }
return *p.RequesterUsername
}
func (p *Tenant) IsSetTenantName() bool {
  return p.TenantName != nil
}

func (p *Tenant) IsSetDomain() bool {
  return p.Domain != nil
}

func (p *Tenant) IsSetEmailAddress() bool {
  return p.EmailAddress != nil
}

func (p *Tenant) IsSetTenantAcronym() bool {
  return p.TenantAcronym != nil
}

func (p *Tenant) IsSetTenantURL() bool {
  return p.TenantURL != nil
}

func (p *Tenant) IsSetTenantPublicAbstract() bool {
  return p.TenantPublicAbstract != nil
}

func (p *Tenant) IsSetReviewProposalDescription() bool {
  return p.ReviewProposalDescription != nil
}

func (p *Tenant) IsSetDeclinedReason() bool {
  return p.DeclinedReason != nil
}

func (p *Tenant) IsSetRequestCreationTime() bool {
  return p.RequestCreationTime != nil
}

func (p *Tenant) IsSetRequesterUsername() bool {
  return p.RequesterUsername != nil
}

func (p *Tenant) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTenantId bool = false;
  var issetTenantApprovalStatus bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetTenantId = true
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetTenantApprovalStatus = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField19(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTenantId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TenantId is not set"));
  }
  if !issetTenantApprovalStatus{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TenantApprovalStatus is not set"));
  }
  return nil
}

func (p *Tenant)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TenantId = v
}
  return nil
}

func (p *Tenant)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TenantApprovalStatus(v)
  p.TenantApprovalStatus = temp
}
  return nil
}

func (p *Tenant)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TenantName = &v
}
  return nil
}

func (p *Tenant)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Domain = &v
}
  return nil
}

func (p *Tenant)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.EmailAddress = &v
}
  return nil
}

func (p *Tenant)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.TenantAcronym = &v
}
  return nil
}

func (p *Tenant)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.TenantURL = &v
}
  return nil
}

func (p *Tenant)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.TenantPublicAbstract = &v
}
  return nil
}

func (p *Tenant)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.ReviewProposalDescription = &v
}
  return nil
}

func (p *Tenant)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.DeclinedReason = &v
}
  return nil
}

func (p *Tenant)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.RequestCreationTime = &v
}
  return nil
}

func (p *Tenant)  ReadField19(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.RequesterUsername = &v
}
  return nil
}

func (p *Tenant) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Tenant"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Tenant) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tenantId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tenantId: ", p), err) }
  if err := oprot.WriteString(string(p.TenantId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tenantId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tenantId: ", p), err) }
  return err
}

func (p *Tenant) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tenantApprovalStatus", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tenantApprovalStatus: ", p), err) }
  if err := oprot.WriteI32(int32(p.TenantApprovalStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tenantApprovalStatus (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tenantApprovalStatus: ", p), err) }
  return err
}

func (p *Tenant) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetTenantName() {
    if err := oprot.WriteFieldBegin("tenantName", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tenantName: ", p), err) }
    if err := oprot.WriteString(string(*p.TenantName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.tenantName (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tenantName: ", p), err) }
  }
  return err
}

func (p *Tenant) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetDomain() {
    if err := oprot.WriteFieldBegin("domain", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:domain: ", p), err) }
    if err := oprot.WriteString(string(*p.Domain)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.domain (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:domain: ", p), err) }
  }
  return err
}

func (p *Tenant) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetEmailAddress() {
    if err := oprot.WriteFieldBegin("emailAddress", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:emailAddress: ", p), err) }
    if err := oprot.WriteString(string(*p.EmailAddress)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.emailAddress (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:emailAddress: ", p), err) }
  }
  return err
}

func (p *Tenant) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetTenantAcronym() {
    if err := oprot.WriteFieldBegin("tenantAcronym", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:tenantAcronym: ", p), err) }
    if err := oprot.WriteString(string(*p.TenantAcronym)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.tenantAcronym (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:tenantAcronym: ", p), err) }
  }
  return err
}

func (p *Tenant) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetTenantURL() {
    if err := oprot.WriteFieldBegin("tenantURL", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:tenantURL: ", p), err) }
    if err := oprot.WriteString(string(*p.TenantURL)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.tenantURL (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:tenantURL: ", p), err) }
  }
  return err
}

func (p *Tenant) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetTenantPublicAbstract() {
    if err := oprot.WriteFieldBegin("tenantPublicAbstract", thrift.STRING, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:tenantPublicAbstract: ", p), err) }
    if err := oprot.WriteString(string(*p.TenantPublicAbstract)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.tenantPublicAbstract (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:tenantPublicAbstract: ", p), err) }
  }
  return err
}

func (p *Tenant) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetReviewProposalDescription() {
    if err := oprot.WriteFieldBegin("reviewProposalDescription", thrift.STRING, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:reviewProposalDescription: ", p), err) }
    if err := oprot.WriteString(string(*p.ReviewProposalDescription)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.reviewProposalDescription (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:reviewProposalDescription: ", p), err) }
  }
  return err
}

func (p *Tenant) writeField15(oprot thrift.TProtocol) (err error) {
  if p.IsSetDeclinedReason() {
    if err := oprot.WriteFieldBegin("declinedReason", thrift.STRING, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:declinedReason: ", p), err) }
    if err := oprot.WriteString(string(*p.DeclinedReason)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.declinedReason (15) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:declinedReason: ", p), err) }
  }
  return err
}

func (p *Tenant) writeField18(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestCreationTime() {
    if err := oprot.WriteFieldBegin("requestCreationTime", thrift.I64, 18); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:requestCreationTime: ", p), err) }
    if err := oprot.WriteI64(int64(*p.RequestCreationTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.requestCreationTime (18) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 18:requestCreationTime: ", p), err) }
  }
  return err
}

func (p *Tenant) writeField19(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequesterUsername() {
    if err := oprot.WriteFieldBegin("requesterUsername", thrift.STRING, 19); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:requesterUsername: ", p), err) }
    if err := oprot.WriteString(string(*p.RequesterUsername)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.requesterUsername (19) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 19:requesterUsername: ", p), err) }
  }
  return err
}

func (p *Tenant) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Tenant(%+v)", *p)
}

