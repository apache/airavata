// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package replica_catalog_models

import (
	"bytes"
	"reflect"
	"database/sql/driver"
	"errors"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type ReplicaLocationCategory int64
const (
  ReplicaLocationCategory_GATEWAY_DATA_STORE ReplicaLocationCategory = 0
  ReplicaLocationCategory_COMPUTE_RESOURCE ReplicaLocationCategory = 1
  ReplicaLocationCategory_LONG_TERM_STORAGE_RESOURCE ReplicaLocationCategory = 2
  ReplicaLocationCategory_OTHER ReplicaLocationCategory = 3
)

func (p ReplicaLocationCategory) String() string {
  switch p {
  case ReplicaLocationCategory_GATEWAY_DATA_STORE: return "GATEWAY_DATA_STORE"
  case ReplicaLocationCategory_COMPUTE_RESOURCE: return "COMPUTE_RESOURCE"
  case ReplicaLocationCategory_LONG_TERM_STORAGE_RESOURCE: return "LONG_TERM_STORAGE_RESOURCE"
  case ReplicaLocationCategory_OTHER: return "OTHER"
  }
  return "<UNSET>"
}

func ReplicaLocationCategoryFromString(s string) (ReplicaLocationCategory, error) {
  switch s {
  case "GATEWAY_DATA_STORE": return ReplicaLocationCategory_GATEWAY_DATA_STORE, nil 
  case "COMPUTE_RESOURCE": return ReplicaLocationCategory_COMPUTE_RESOURCE, nil 
  case "LONG_TERM_STORAGE_RESOURCE": return ReplicaLocationCategory_LONG_TERM_STORAGE_RESOURCE, nil 
  case "OTHER": return ReplicaLocationCategory_OTHER, nil 
  }
  return ReplicaLocationCategory(0), fmt.Errorf("not a valid ReplicaLocationCategory string")
}


func ReplicaLocationCategoryPtr(v ReplicaLocationCategory) *ReplicaLocationCategory { return &v }

func (p ReplicaLocationCategory) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ReplicaLocationCategory) UnmarshalText(text []byte) error {
q, err := ReplicaLocationCategoryFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ReplicaLocationCategory) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ReplicaLocationCategory(v)
return nil
}

func (p * ReplicaLocationCategory) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ReplicaPersistentType int64
const (
  ReplicaPersistentType_TRANSIENT ReplicaPersistentType = 0
  ReplicaPersistentType_PERSISTENT ReplicaPersistentType = 1
)

func (p ReplicaPersistentType) String() string {
  switch p {
  case ReplicaPersistentType_TRANSIENT: return "TRANSIENT"
  case ReplicaPersistentType_PERSISTENT: return "PERSISTENT"
  }
  return "<UNSET>"
}

func ReplicaPersistentTypeFromString(s string) (ReplicaPersistentType, error) {
  switch s {
  case "TRANSIENT": return ReplicaPersistentType_TRANSIENT, nil 
  case "PERSISTENT": return ReplicaPersistentType_PERSISTENT, nil 
  }
  return ReplicaPersistentType(0), fmt.Errorf("not a valid ReplicaPersistentType string")
}


func ReplicaPersistentTypePtr(v ReplicaPersistentType) *ReplicaPersistentType { return &v }

func (p ReplicaPersistentType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ReplicaPersistentType) UnmarshalText(text []byte) error {
q, err := ReplicaPersistentTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ReplicaPersistentType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ReplicaPersistentType(v)
return nil
}

func (p * ReplicaPersistentType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type DataProductType int64
const (
  DataProductType_FILE DataProductType = 0
  DataProductType_COLLECTION DataProductType = 1
)

func (p DataProductType) String() string {
  switch p {
  case DataProductType_FILE: return "FILE"
  case DataProductType_COLLECTION: return "COLLECTION"
  }
  return "<UNSET>"
}

func DataProductTypeFromString(s string) (DataProductType, error) {
  switch s {
  case "FILE": return DataProductType_FILE, nil 
  case "COLLECTION": return DataProductType_COLLECTION, nil 
  }
  return DataProductType(0), fmt.Errorf("not a valid DataProductType string")
}


func DataProductTypePtr(v DataProductType) *DataProductType { return &v }

func (p DataProductType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *DataProductType) UnmarshalText(text []byte) error {
q, err := DataProductTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *DataProductType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = DataProductType(v)
return nil
}

func (p * DataProductType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - ReplicaId
//  - ProductUri
//  - ReplicaName
//  - ReplicaDescription
//  - CreationTime
//  - LastModifiedTime
//  - ValidUntilTime
//  - ReplicaLocationCategory
//  - ReplicaPersistentType
//  - StorageResourceId
//  - FilePath
//  - ReplicaMetadata
type DataReplicaLocationModel struct {
  ReplicaId *string `thrift:"replicaId,1" db:"replicaId" json:"replicaId,omitempty"`
  ProductUri *string `thrift:"productUri,2" db:"productUri" json:"productUri,omitempty"`
  ReplicaName *string `thrift:"replicaName,3" db:"replicaName" json:"replicaName,omitempty"`
  ReplicaDescription *string `thrift:"replicaDescription,4" db:"replicaDescription" json:"replicaDescription,omitempty"`
  CreationTime *int64 `thrift:"creationTime,5" db:"creationTime" json:"creationTime,omitempty"`
  LastModifiedTime *int64 `thrift:"lastModifiedTime,6" db:"lastModifiedTime" json:"lastModifiedTime,omitempty"`
  ValidUntilTime *int64 `thrift:"validUntilTime,7" db:"validUntilTime" json:"validUntilTime,omitempty"`
  ReplicaLocationCategory *ReplicaLocationCategory `thrift:"replicaLocationCategory,8" db:"replicaLocationCategory" json:"replicaLocationCategory,omitempty"`
  ReplicaPersistentType *ReplicaPersistentType `thrift:"replicaPersistentType,9" db:"replicaPersistentType" json:"replicaPersistentType,omitempty"`
  StorageResourceId *string `thrift:"storageResourceId,10" db:"storageResourceId" json:"storageResourceId,omitempty"`
  FilePath *string `thrift:"filePath,11" db:"filePath" json:"filePath,omitempty"`
  ReplicaMetadata map[string]string `thrift:"replicaMetadata,12" db:"replicaMetadata" json:"replicaMetadata,omitempty"`
}

func NewDataReplicaLocationModel() *DataReplicaLocationModel {
  return &DataReplicaLocationModel{}
}

var DataReplicaLocationModel_ReplicaId_DEFAULT string
func (p *DataReplicaLocationModel) GetReplicaId() string {
  if !p.IsSetReplicaId() {
    return DataReplicaLocationModel_ReplicaId_DEFAULT
  }
return *p.ReplicaId
}
var DataReplicaLocationModel_ProductUri_DEFAULT string
func (p *DataReplicaLocationModel) GetProductUri() string {
  if !p.IsSetProductUri() {
    return DataReplicaLocationModel_ProductUri_DEFAULT
  }
return *p.ProductUri
}
var DataReplicaLocationModel_ReplicaName_DEFAULT string
func (p *DataReplicaLocationModel) GetReplicaName() string {
  if !p.IsSetReplicaName() {
    return DataReplicaLocationModel_ReplicaName_DEFAULT
  }
return *p.ReplicaName
}
var DataReplicaLocationModel_ReplicaDescription_DEFAULT string
func (p *DataReplicaLocationModel) GetReplicaDescription() string {
  if !p.IsSetReplicaDescription() {
    return DataReplicaLocationModel_ReplicaDescription_DEFAULT
  }
return *p.ReplicaDescription
}
var DataReplicaLocationModel_CreationTime_DEFAULT int64
func (p *DataReplicaLocationModel) GetCreationTime() int64 {
  if !p.IsSetCreationTime() {
    return DataReplicaLocationModel_CreationTime_DEFAULT
  }
return *p.CreationTime
}
var DataReplicaLocationModel_LastModifiedTime_DEFAULT int64
func (p *DataReplicaLocationModel) GetLastModifiedTime() int64 {
  if !p.IsSetLastModifiedTime() {
    return DataReplicaLocationModel_LastModifiedTime_DEFAULT
  }
return *p.LastModifiedTime
}
var DataReplicaLocationModel_ValidUntilTime_DEFAULT int64
func (p *DataReplicaLocationModel) GetValidUntilTime() int64 {
  if !p.IsSetValidUntilTime() {
    return DataReplicaLocationModel_ValidUntilTime_DEFAULT
  }
return *p.ValidUntilTime
}
var DataReplicaLocationModel_ReplicaLocationCategory_DEFAULT ReplicaLocationCategory
func (p *DataReplicaLocationModel) GetReplicaLocationCategory() ReplicaLocationCategory {
  if !p.IsSetReplicaLocationCategory() {
    return DataReplicaLocationModel_ReplicaLocationCategory_DEFAULT
  }
return *p.ReplicaLocationCategory
}
var DataReplicaLocationModel_ReplicaPersistentType_DEFAULT ReplicaPersistentType
func (p *DataReplicaLocationModel) GetReplicaPersistentType() ReplicaPersistentType {
  if !p.IsSetReplicaPersistentType() {
    return DataReplicaLocationModel_ReplicaPersistentType_DEFAULT
  }
return *p.ReplicaPersistentType
}
var DataReplicaLocationModel_StorageResourceId_DEFAULT string
func (p *DataReplicaLocationModel) GetStorageResourceId() string {
  if !p.IsSetStorageResourceId() {
    return DataReplicaLocationModel_StorageResourceId_DEFAULT
  }
return *p.StorageResourceId
}
var DataReplicaLocationModel_FilePath_DEFAULT string
func (p *DataReplicaLocationModel) GetFilePath() string {
  if !p.IsSetFilePath() {
    return DataReplicaLocationModel_FilePath_DEFAULT
  }
return *p.FilePath
}
var DataReplicaLocationModel_ReplicaMetadata_DEFAULT map[string]string

func (p *DataReplicaLocationModel) GetReplicaMetadata() map[string]string {
  return p.ReplicaMetadata
}
func (p *DataReplicaLocationModel) IsSetReplicaId() bool {
  return p.ReplicaId != nil
}

func (p *DataReplicaLocationModel) IsSetProductUri() bool {
  return p.ProductUri != nil
}

func (p *DataReplicaLocationModel) IsSetReplicaName() bool {
  return p.ReplicaName != nil
}

func (p *DataReplicaLocationModel) IsSetReplicaDescription() bool {
  return p.ReplicaDescription != nil
}

func (p *DataReplicaLocationModel) IsSetCreationTime() bool {
  return p.CreationTime != nil
}

func (p *DataReplicaLocationModel) IsSetLastModifiedTime() bool {
  return p.LastModifiedTime != nil
}

func (p *DataReplicaLocationModel) IsSetValidUntilTime() bool {
  return p.ValidUntilTime != nil
}

func (p *DataReplicaLocationModel) IsSetReplicaLocationCategory() bool {
  return p.ReplicaLocationCategory != nil
}

func (p *DataReplicaLocationModel) IsSetReplicaPersistentType() bool {
  return p.ReplicaPersistentType != nil
}

func (p *DataReplicaLocationModel) IsSetStorageResourceId() bool {
  return p.StorageResourceId != nil
}

func (p *DataReplicaLocationModel) IsSetFilePath() bool {
  return p.FilePath != nil
}

func (p *DataReplicaLocationModel) IsSetReplicaMetadata() bool {
  return p.ReplicaMetadata != nil
}

func (p *DataReplicaLocationModel) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DataReplicaLocationModel)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReplicaId = &v
}
  return nil
}

func (p *DataReplicaLocationModel)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ProductUri = &v
}
  return nil
}

func (p *DataReplicaLocationModel)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ReplicaName = &v
}
  return nil
}

func (p *DataReplicaLocationModel)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ReplicaDescription = &v
}
  return nil
}

func (p *DataReplicaLocationModel)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CreationTime = &v
}
  return nil
}

func (p *DataReplicaLocationModel)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.LastModifiedTime = &v
}
  return nil
}

func (p *DataReplicaLocationModel)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.ValidUntilTime = &v
}
  return nil
}

func (p *DataReplicaLocationModel)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  temp := ReplicaLocationCategory(v)
  p.ReplicaLocationCategory = &temp
}
  return nil
}

func (p *DataReplicaLocationModel)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  temp := ReplicaPersistentType(v)
  p.ReplicaPersistentType = &temp
}
  return nil
}

func (p *DataReplicaLocationModel)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.StorageResourceId = &v
}
  return nil
}

func (p *DataReplicaLocationModel)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.FilePath = &v
}
  return nil
}

func (p *DataReplicaLocationModel)  ReadField12(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.ReplicaMetadata =  tMap
  for i := 0; i < size; i ++ {
var _key0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key0 = v
}
var _val1 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val1 = v
}
    p.ReplicaMetadata[_key0] = _val1
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *DataReplicaLocationModel) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DataReplicaLocationModel"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DataReplicaLocationModel) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetReplicaId() {
    if err := oprot.WriteFieldBegin("replicaId", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:replicaId: ", p), err) }
    if err := oprot.WriteString(string(*p.ReplicaId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.replicaId (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:replicaId: ", p), err) }
  }
  return err
}

func (p *DataReplicaLocationModel) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetProductUri() {
    if err := oprot.WriteFieldBegin("productUri", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:productUri: ", p), err) }
    if err := oprot.WriteString(string(*p.ProductUri)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.productUri (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:productUri: ", p), err) }
  }
  return err
}

func (p *DataReplicaLocationModel) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetReplicaName() {
    if err := oprot.WriteFieldBegin("replicaName", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:replicaName: ", p), err) }
    if err := oprot.WriteString(string(*p.ReplicaName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.replicaName (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:replicaName: ", p), err) }
  }
  return err
}

func (p *DataReplicaLocationModel) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetReplicaDescription() {
    if err := oprot.WriteFieldBegin("replicaDescription", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:replicaDescription: ", p), err) }
    if err := oprot.WriteString(string(*p.ReplicaDescription)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.replicaDescription (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:replicaDescription: ", p), err) }
  }
  return err
}

func (p *DataReplicaLocationModel) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetCreationTime() {
    if err := oprot.WriteFieldBegin("creationTime", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:creationTime: ", p), err) }
    if err := oprot.WriteI64(int64(*p.CreationTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.creationTime (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:creationTime: ", p), err) }
  }
  return err
}

func (p *DataReplicaLocationModel) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetLastModifiedTime() {
    if err := oprot.WriteFieldBegin("lastModifiedTime", thrift.I64, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:lastModifiedTime: ", p), err) }
    if err := oprot.WriteI64(int64(*p.LastModifiedTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.lastModifiedTime (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:lastModifiedTime: ", p), err) }
  }
  return err
}

func (p *DataReplicaLocationModel) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetValidUntilTime() {
    if err := oprot.WriteFieldBegin("validUntilTime", thrift.I64, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:validUntilTime: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ValidUntilTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.validUntilTime (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:validUntilTime: ", p), err) }
  }
  return err
}

func (p *DataReplicaLocationModel) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetReplicaLocationCategory() {
    if err := oprot.WriteFieldBegin("replicaLocationCategory", thrift.I32, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:replicaLocationCategory: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ReplicaLocationCategory)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.replicaLocationCategory (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:replicaLocationCategory: ", p), err) }
  }
  return err
}

func (p *DataReplicaLocationModel) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetReplicaPersistentType() {
    if err := oprot.WriteFieldBegin("replicaPersistentType", thrift.I32, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:replicaPersistentType: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ReplicaPersistentType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.replicaPersistentType (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:replicaPersistentType: ", p), err) }
  }
  return err
}

func (p *DataReplicaLocationModel) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetStorageResourceId() {
    if err := oprot.WriteFieldBegin("storageResourceId", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:storageResourceId: ", p), err) }
    if err := oprot.WriteString(string(*p.StorageResourceId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.storageResourceId (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:storageResourceId: ", p), err) }
  }
  return err
}

func (p *DataReplicaLocationModel) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetFilePath() {
    if err := oprot.WriteFieldBegin("filePath", thrift.STRING, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:filePath: ", p), err) }
    if err := oprot.WriteString(string(*p.FilePath)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.filePath (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:filePath: ", p), err) }
  }
  return err
}

func (p *DataReplicaLocationModel) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetReplicaMetadata() {
    if err := oprot.WriteFieldBegin("replicaMetadata", thrift.MAP, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:replicaMetadata: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ReplicaMetadata)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.ReplicaMetadata {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:replicaMetadata: ", p), err) }
  }
  return err
}

func (p *DataReplicaLocationModel) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DataReplicaLocationModel(%+v)", *p)
}

// Attributes:
//  - ProductUri
//  - GatewayId
//  - ParentProductUri
//  - ProductName
//  - ProductDescription
//  - OwnerName
//  - DataProductType
//  - ProductSize
//  - CreationTime
//  - LastModifiedTime
//  - ProductMetadata
//  - ReplicaLocations
type DataProductModel struct {
  ProductUri *string `thrift:"productUri,1" db:"productUri" json:"productUri,omitempty"`
  GatewayId *string `thrift:"gatewayId,2" db:"gatewayId" json:"gatewayId,omitempty"`
  ParentProductUri *string `thrift:"parentProductUri,3" db:"parentProductUri" json:"parentProductUri,omitempty"`
  ProductName *string `thrift:"productName,4" db:"productName" json:"productName,omitempty"`
  ProductDescription *string `thrift:"productDescription,5" db:"productDescription" json:"productDescription,omitempty"`
  OwnerName *string `thrift:"ownerName,6" db:"ownerName" json:"ownerName,omitempty"`
  DataProductType *DataProductType `thrift:"dataProductType,7" db:"dataProductType" json:"dataProductType,omitempty"`
  ProductSize *int32 `thrift:"productSize,8" db:"productSize" json:"productSize,omitempty"`
  CreationTime *int64 `thrift:"creationTime,9" db:"creationTime" json:"creationTime,omitempty"`
  LastModifiedTime *int64 `thrift:"lastModifiedTime,10" db:"lastModifiedTime" json:"lastModifiedTime,omitempty"`
  ProductMetadata map[string]string `thrift:"productMetadata,11" db:"productMetadata" json:"productMetadata,omitempty"`
  ReplicaLocations []*DataReplicaLocationModel `thrift:"replicaLocations,12" db:"replicaLocations" json:"replicaLocations,omitempty"`
}

func NewDataProductModel() *DataProductModel {
  return &DataProductModel{}
}

var DataProductModel_ProductUri_DEFAULT string
func (p *DataProductModel) GetProductUri() string {
  if !p.IsSetProductUri() {
    return DataProductModel_ProductUri_DEFAULT
  }
return *p.ProductUri
}
var DataProductModel_GatewayId_DEFAULT string
func (p *DataProductModel) GetGatewayId() string {
  if !p.IsSetGatewayId() {
    return DataProductModel_GatewayId_DEFAULT
  }
return *p.GatewayId
}
var DataProductModel_ParentProductUri_DEFAULT string
func (p *DataProductModel) GetParentProductUri() string {
  if !p.IsSetParentProductUri() {
    return DataProductModel_ParentProductUri_DEFAULT
  }
return *p.ParentProductUri
}
var DataProductModel_ProductName_DEFAULT string
func (p *DataProductModel) GetProductName() string {
  if !p.IsSetProductName() {
    return DataProductModel_ProductName_DEFAULT
  }
return *p.ProductName
}
var DataProductModel_ProductDescription_DEFAULT string
func (p *DataProductModel) GetProductDescription() string {
  if !p.IsSetProductDescription() {
    return DataProductModel_ProductDescription_DEFAULT
  }
return *p.ProductDescription
}
var DataProductModel_OwnerName_DEFAULT string
func (p *DataProductModel) GetOwnerName() string {
  if !p.IsSetOwnerName() {
    return DataProductModel_OwnerName_DEFAULT
  }
return *p.OwnerName
}
var DataProductModel_DataProductType_DEFAULT DataProductType
func (p *DataProductModel) GetDataProductType() DataProductType {
  if !p.IsSetDataProductType() {
    return DataProductModel_DataProductType_DEFAULT
  }
return *p.DataProductType
}
var DataProductModel_ProductSize_DEFAULT int32
func (p *DataProductModel) GetProductSize() int32 {
  if !p.IsSetProductSize() {
    return DataProductModel_ProductSize_DEFAULT
  }
return *p.ProductSize
}
var DataProductModel_CreationTime_DEFAULT int64
func (p *DataProductModel) GetCreationTime() int64 {
  if !p.IsSetCreationTime() {
    return DataProductModel_CreationTime_DEFAULT
  }
return *p.CreationTime
}
var DataProductModel_LastModifiedTime_DEFAULT int64
func (p *DataProductModel) GetLastModifiedTime() int64 {
  if !p.IsSetLastModifiedTime() {
    return DataProductModel_LastModifiedTime_DEFAULT
  }
return *p.LastModifiedTime
}
var DataProductModel_ProductMetadata_DEFAULT map[string]string

func (p *DataProductModel) GetProductMetadata() map[string]string {
  return p.ProductMetadata
}
var DataProductModel_ReplicaLocations_DEFAULT []*DataReplicaLocationModel

func (p *DataProductModel) GetReplicaLocations() []*DataReplicaLocationModel {
  return p.ReplicaLocations
}
func (p *DataProductModel) IsSetProductUri() bool {
  return p.ProductUri != nil
}

func (p *DataProductModel) IsSetGatewayId() bool {
  return p.GatewayId != nil
}

func (p *DataProductModel) IsSetParentProductUri() bool {
  return p.ParentProductUri != nil
}

func (p *DataProductModel) IsSetProductName() bool {
  return p.ProductName != nil
}

func (p *DataProductModel) IsSetProductDescription() bool {
  return p.ProductDescription != nil
}

func (p *DataProductModel) IsSetOwnerName() bool {
  return p.OwnerName != nil
}

func (p *DataProductModel) IsSetDataProductType() bool {
  return p.DataProductType != nil
}

func (p *DataProductModel) IsSetProductSize() bool {
  return p.ProductSize != nil
}

func (p *DataProductModel) IsSetCreationTime() bool {
  return p.CreationTime != nil
}

func (p *DataProductModel) IsSetLastModifiedTime() bool {
  return p.LastModifiedTime != nil
}

func (p *DataProductModel) IsSetProductMetadata() bool {
  return p.ProductMetadata != nil
}

func (p *DataProductModel) IsSetReplicaLocations() bool {
  return p.ReplicaLocations != nil
}

func (p *DataProductModel) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DataProductModel)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ProductUri = &v
}
  return nil
}

func (p *DataProductModel)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayId = &v
}
  return nil
}

func (p *DataProductModel)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ParentProductUri = &v
}
  return nil
}

func (p *DataProductModel)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ProductName = &v
}
  return nil
}

func (p *DataProductModel)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ProductDescription = &v
}
  return nil
}

func (p *DataProductModel)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.OwnerName = &v
}
  return nil
}

func (p *DataProductModel)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := DataProductType(v)
  p.DataProductType = &temp
}
  return nil
}

func (p *DataProductModel)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.ProductSize = &v
}
  return nil
}

func (p *DataProductModel)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.CreationTime = &v
}
  return nil
}

func (p *DataProductModel)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.LastModifiedTime = &v
}
  return nil
}

func (p *DataProductModel)  ReadField11(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.ProductMetadata =  tMap
  for i := 0; i < size; i ++ {
var _key2 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key2 = v
}
var _val3 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val3 = v
}
    p.ProductMetadata[_key2] = _val3
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *DataProductModel)  ReadField12(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*DataReplicaLocationModel, 0, size)
  p.ReplicaLocations =  tSlice
  for i := 0; i < size; i ++ {
    _elem4 := &DataReplicaLocationModel{}
    if err := _elem4.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
    }
    p.ReplicaLocations = append(p.ReplicaLocations, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DataProductModel) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DataProductModel"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DataProductModel) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetProductUri() {
    if err := oprot.WriteFieldBegin("productUri", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:productUri: ", p), err) }
    if err := oprot.WriteString(string(*p.ProductUri)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.productUri (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:productUri: ", p), err) }
  }
  return err
}

func (p *DataProductModel) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetGatewayId() {
    if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayId: ", p), err) }
    if err := oprot.WriteString(string(*p.GatewayId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.gatewayId (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayId: ", p), err) }
  }
  return err
}

func (p *DataProductModel) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetParentProductUri() {
    if err := oprot.WriteFieldBegin("parentProductUri", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:parentProductUri: ", p), err) }
    if err := oprot.WriteString(string(*p.ParentProductUri)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.parentProductUri (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:parentProductUri: ", p), err) }
  }
  return err
}

func (p *DataProductModel) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetProductName() {
    if err := oprot.WriteFieldBegin("productName", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:productName: ", p), err) }
    if err := oprot.WriteString(string(*p.ProductName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.productName (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:productName: ", p), err) }
  }
  return err
}

func (p *DataProductModel) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetProductDescription() {
    if err := oprot.WriteFieldBegin("productDescription", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:productDescription: ", p), err) }
    if err := oprot.WriteString(string(*p.ProductDescription)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.productDescription (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:productDescription: ", p), err) }
  }
  return err
}

func (p *DataProductModel) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetOwnerName() {
    if err := oprot.WriteFieldBegin("ownerName", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:ownerName: ", p), err) }
    if err := oprot.WriteString(string(*p.OwnerName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ownerName (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:ownerName: ", p), err) }
  }
  return err
}

func (p *DataProductModel) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetDataProductType() {
    if err := oprot.WriteFieldBegin("dataProductType", thrift.I32, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:dataProductType: ", p), err) }
    if err := oprot.WriteI32(int32(*p.DataProductType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.dataProductType (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:dataProductType: ", p), err) }
  }
  return err
}

func (p *DataProductModel) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetProductSize() {
    if err := oprot.WriteFieldBegin("productSize", thrift.I32, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:productSize: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ProductSize)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.productSize (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:productSize: ", p), err) }
  }
  return err
}

func (p *DataProductModel) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetCreationTime() {
    if err := oprot.WriteFieldBegin("creationTime", thrift.I64, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:creationTime: ", p), err) }
    if err := oprot.WriteI64(int64(*p.CreationTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.creationTime (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:creationTime: ", p), err) }
  }
  return err
}

func (p *DataProductModel) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetLastModifiedTime() {
    if err := oprot.WriteFieldBegin("lastModifiedTime", thrift.I64, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:lastModifiedTime: ", p), err) }
    if err := oprot.WriteI64(int64(*p.LastModifiedTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.lastModifiedTime (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:lastModifiedTime: ", p), err) }
  }
  return err
}

func (p *DataProductModel) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetProductMetadata() {
    if err := oprot.WriteFieldBegin("productMetadata", thrift.MAP, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:productMetadata: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ProductMetadata)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.ProductMetadata {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:productMetadata: ", p), err) }
  }
  return err
}

func (p *DataProductModel) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetReplicaLocations() {
    if err := oprot.WriteFieldBegin("replicaLocations", thrift.LIST, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:replicaLocations: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ReplicaLocations)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ReplicaLocations {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:replicaLocations: ", p), err) }
  }
  return err
}

func (p *DataProductModel) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DataProductModel(%+v)", *p)
}

