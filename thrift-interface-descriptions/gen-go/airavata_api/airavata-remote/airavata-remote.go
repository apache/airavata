// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
        "context"
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        "git.apache.org/thrift.git/lib/go/thrift"
	"airavata_errors"
	"security_model"
	"airavata_data_models"
	"credential_store_data_models"
	"status_models"
	"job_model"
	"experiment_model"
	"workspace_model"
	"scheduling_model"
	"application_io_models"
	"application_deployment_model"
	"application_interface_model"
	"compute_resource_model"
	"storage_resource_model"
	"gateway_resource_profile_model"
	"user_resource_profile_model"
	"data_movement_models"
	"workflow_data_model"
	"replica_catalog_models"
	"group_manager_model"
	"user_profile_model"
        "airavata_api"
)

var _ = airavata_errors.GoUnusedProtection__
var _ = security_model.GoUnusedProtection__
var _ = airavata_data_models.GoUnusedProtection__
var _ = credential_store_data_models.GoUnusedProtection__
var _ = status_models.GoUnusedProtection__
var _ = job_model.GoUnusedProtection__
var _ = experiment_model.GoUnusedProtection__
var _ = workspace_model.GoUnusedProtection__
var _ = scheduling_model.GoUnusedProtection__
var _ = application_io_models.GoUnusedProtection__
var _ = application_deployment_model.GoUnusedProtection__
var _ = application_interface_model.GoUnusedProtection__
var _ = compute_resource_model.GoUnusedProtection__
var _ = storage_resource_model.GoUnusedProtection__
var _ = gateway_resource_profile_model.GoUnusedProtection__
var _ = user_resource_profile_model.GoUnusedProtection__
var _ = data_movement_models.GoUnusedProtection__
var _ = workflow_data_model.GoUnusedProtection__
var _ = replica_catalog_models.GoUnusedProtection__
var _ = group_manager_model.GoUnusedProtection__
var _ = user_profile_model.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  string getAPIVersion(AuthzToken authzToken)")
  fmt.Fprintln(os.Stderr, "  bool isUserExists(AuthzToken authzToken, string gatewayId, string userName)")
  fmt.Fprintln(os.Stderr, "  string addGateway(AuthzToken authzToken, Gateway gateway)")
  fmt.Fprintln(os.Stderr, "   getAllUsersInGateway(AuthzToken authzToken, string gatewayId)")
  fmt.Fprintln(os.Stderr, "  bool updateGateway(AuthzToken authzToken, string gatewayId, Gateway updatedGateway)")
  fmt.Fprintln(os.Stderr, "  Gateway getGateway(AuthzToken authzToken, string gatewayId)")
  fmt.Fprintln(os.Stderr, "  bool deleteGateway(AuthzToken authzToken, string gatewayId)")
  fmt.Fprintln(os.Stderr, "   getAllGateways(AuthzToken authzToken)")
  fmt.Fprintln(os.Stderr, "  bool isGatewayExist(AuthzToken authzToken, string gatewayId)")
  fmt.Fprintln(os.Stderr, "  string createNotification(AuthzToken authzToken, Notification notification)")
  fmt.Fprintln(os.Stderr, "  bool updateNotification(AuthzToken authzToken, Notification notification)")
  fmt.Fprintln(os.Stderr, "  bool deleteNotification(AuthzToken authzToken, string gatewayId, string notificationId)")
  fmt.Fprintln(os.Stderr, "  Notification getNotification(AuthzToken authzToken, string gatewayId, string notificationId)")
  fmt.Fprintln(os.Stderr, "   getAllNotifications(AuthzToken authzToken, string gatewayId)")
  fmt.Fprintln(os.Stderr, "  string generateAndRegisterSSHKeys(AuthzToken authzToken, string gatewayId, string userName, string description, CredentialOwnerType credentialOwnerType)")
  fmt.Fprintln(os.Stderr, "  string registerPwdCredential(AuthzToken authzToken, string gatewayId, string portalUserName, string loginUserName, string password, string description)")
  fmt.Fprintln(os.Stderr, "  string getSSHPubKey(AuthzToken authzToken, string airavataCredStoreToken, string gatewayId)")
  fmt.Fprintln(os.Stderr, "   getAllGatewaySSHPubKeys(AuthzToken authzToken, string gatewayId)")
  fmt.Fprintln(os.Stderr, "   getAllCredentialSummaryForGateway(AuthzToken authzToken, SummaryType type, string gatewayId)")
  fmt.Fprintln(os.Stderr, "   getAllCredentialSummaryForUsersInGateway(AuthzToken authzToken, SummaryType type, string gatewayId, string userId)")
  fmt.Fprintln(os.Stderr, "   getAllGatewayPWDCredentials(AuthzToken authzToken, string gatewayId)")
  fmt.Fprintln(os.Stderr, "  bool deleteSSHPubKey(AuthzToken authzToken, string airavataCredStoreToken, string gatewayId)")
  fmt.Fprintln(os.Stderr, "  bool deletePWDCredential(AuthzToken authzToken, string airavataCredStoreToken, string gatewayId)")
  fmt.Fprintln(os.Stderr, "  string createProject(AuthzToken authzToken, string gatewayId, Project project)")
  fmt.Fprintln(os.Stderr, "  void updateProject(AuthzToken authzToken, string projectId, Project updatedProject)")
  fmt.Fprintln(os.Stderr, "  Project getProject(AuthzToken authzToken, string projectId)")
  fmt.Fprintln(os.Stderr, "  bool deleteProject(AuthzToken authzToken, string projectId)")
  fmt.Fprintln(os.Stderr, "   getUserProjects(AuthzToken authzToken, string gatewayId, string userName, i32 limit, i32 offset)")
  fmt.Fprintln(os.Stderr, "   searchProjects(AuthzToken authzToken, string gatewayId, string userName,  filters, i32 limit, i32 offset)")
  fmt.Fprintln(os.Stderr, "   searchExperiments(AuthzToken authzToken, string gatewayId, string userName,  filters, i32 limit, i32 offset)")
  fmt.Fprintln(os.Stderr, "  ExperimentStatistics getExperimentStatistics(AuthzToken authzToken, string gatewayId, i64 fromTime, i64 toTime, string userName, string applicationName, string resourceHostName)")
  fmt.Fprintln(os.Stderr, "   getExperimentsInProject(AuthzToken authzToken, string projectId, i32 limit, i32 offset)")
  fmt.Fprintln(os.Stderr, "   getUserExperiments(AuthzToken authzToken, string gatewayId, string userName, i32 limit, i32 offset)")
  fmt.Fprintln(os.Stderr, "  string createExperiment(AuthzToken authzToken, string gatewayId, ExperimentModel experiment)")
  fmt.Fprintln(os.Stderr, "  bool deleteExperiment(AuthzToken authzToken, string experimentId)")
  fmt.Fprintln(os.Stderr, "  ExperimentModel getExperiment(AuthzToken authzToken, string airavataExperimentId)")
  fmt.Fprintln(os.Stderr, "  ExperimentModel getExperimentByAdmin(AuthzToken authzToken, string airavataExperimentId)")
  fmt.Fprintln(os.Stderr, "  ExperimentModel getDetailedExperimentTree(AuthzToken authzToken, string airavataExperimentId)")
  fmt.Fprintln(os.Stderr, "  void updateExperiment(AuthzToken authzToken, string airavataExperimentId, ExperimentModel experiment)")
  fmt.Fprintln(os.Stderr, "  void updateExperimentConfiguration(AuthzToken authzToken, string airavataExperimentId, UserConfigurationDataModel userConfiguration)")
  fmt.Fprintln(os.Stderr, "  void updateResourceScheduleing(AuthzToken authzToken, string airavataExperimentId, ComputationalResourceSchedulingModel resourceScheduling)")
  fmt.Fprintln(os.Stderr, "  bool validateExperiment(AuthzToken authzToken, string airavataExperimentId)")
  fmt.Fprintln(os.Stderr, "  void launchExperiment(AuthzToken authzToken, string airavataExperimentId, string gatewayId)")
  fmt.Fprintln(os.Stderr, "  ExperimentStatus getExperimentStatus(AuthzToken authzToken, string airavataExperimentId)")
  fmt.Fprintln(os.Stderr, "   getExperimentOutputs(AuthzToken authzToken, string airavataExperimentId)")
  fmt.Fprintln(os.Stderr, "   getIntermediateOutputs(AuthzToken authzToken, string airavataExperimentId)")
  fmt.Fprintln(os.Stderr, "   getJobStatuses(AuthzToken authzToken, string airavataExperimentId)")
  fmt.Fprintln(os.Stderr, "   getJobDetails(AuthzToken authzToken, string airavataExperimentId)")
  fmt.Fprintln(os.Stderr, "  string cloneExperiment(AuthzToken authzToken, string existingExperimentID, string newExperimentName, string newExperimentProjectId)")
  fmt.Fprintln(os.Stderr, "  string cloneExperimentByAdmin(AuthzToken authzToken, string existingExperimentID, string newExperimentName, string newExperimentProjectId)")
  fmt.Fprintln(os.Stderr, "  void terminateExperiment(AuthzToken authzToken, string airavataExperimentId, string gatewayId)")
  fmt.Fprintln(os.Stderr, "  string registerApplicationModule(AuthzToken authzToken, string gatewayId, ApplicationModule applicationModule)")
  fmt.Fprintln(os.Stderr, "  ApplicationModule getApplicationModule(AuthzToken authzToken, string appModuleId)")
  fmt.Fprintln(os.Stderr, "  bool updateApplicationModule(AuthzToken authzToken, string appModuleId, ApplicationModule applicationModule)")
  fmt.Fprintln(os.Stderr, "   getAllAppModules(AuthzToken authzToken, string gatewayId)")
  fmt.Fprintln(os.Stderr, "  bool deleteApplicationModule(AuthzToken authzToken, string appModuleId)")
  fmt.Fprintln(os.Stderr, "  string registerApplicationDeployment(AuthzToken authzToken, string gatewayId, ApplicationDeploymentDescription applicationDeployment)")
  fmt.Fprintln(os.Stderr, "  ApplicationDeploymentDescription getApplicationDeployment(AuthzToken authzToken, string appDeploymentId)")
  fmt.Fprintln(os.Stderr, "  bool updateApplicationDeployment(AuthzToken authzToken, string appDeploymentId, ApplicationDeploymentDescription applicationDeployment)")
  fmt.Fprintln(os.Stderr, "  bool deleteApplicationDeployment(AuthzToken authzToken, string appDeploymentId)")
  fmt.Fprintln(os.Stderr, "   getAllApplicationDeployments(AuthzToken authzToken, string gatewayId)")
  fmt.Fprintln(os.Stderr, "   getAppModuleDeployedResources(AuthzToken authzToken, string appModuleId)")
  fmt.Fprintln(os.Stderr, "  string registerApplicationInterface(AuthzToken authzToken, string gatewayId, ApplicationInterfaceDescription applicationInterface)")
  fmt.Fprintln(os.Stderr, "  string cloneApplicationInterface(AuthzToken authzToken, string existingAppInterfaceID, string newApplicationName, string gatewayId)")
  fmt.Fprintln(os.Stderr, "  ApplicationInterfaceDescription getApplicationInterface(AuthzToken authzToken, string appInterfaceId)")
  fmt.Fprintln(os.Stderr, "  bool updateApplicationInterface(AuthzToken authzToken, string appInterfaceId, ApplicationInterfaceDescription applicationInterface)")
  fmt.Fprintln(os.Stderr, "  bool deleteApplicationInterface(AuthzToken authzToken, string appInterfaceId)")
  fmt.Fprintln(os.Stderr, "   getAllApplicationInterfaceNames(AuthzToken authzToken, string gatewayId)")
  fmt.Fprintln(os.Stderr, "   getAllApplicationInterfaces(AuthzToken authzToken, string gatewayId)")
  fmt.Fprintln(os.Stderr, "   getApplicationInputs(AuthzToken authzToken, string appInterfaceId)")
  fmt.Fprintln(os.Stderr, "   getApplicationOutputs(AuthzToken authzToken, string appInterfaceId)")
  fmt.Fprintln(os.Stderr, "   getAvailableAppInterfaceComputeResources(AuthzToken authzToken, string appInterfaceId)")
  fmt.Fprintln(os.Stderr, "  string registerComputeResource(AuthzToken authzToken, ComputeResourceDescription computeResourceDescription)")
  fmt.Fprintln(os.Stderr, "  ComputeResourceDescription getComputeResource(AuthzToken authzToken, string computeResourceId)")
  fmt.Fprintln(os.Stderr, "   getAllComputeResourceNames(AuthzToken authzToken)")
  fmt.Fprintln(os.Stderr, "  bool updateComputeResource(AuthzToken authzToken, string computeResourceId, ComputeResourceDescription computeResourceDescription)")
  fmt.Fprintln(os.Stderr, "  bool deleteComputeResource(AuthzToken authzToken, string computeResourceId)")
  fmt.Fprintln(os.Stderr, "  string registerStorageResource(AuthzToken authzToken, StorageResourceDescription storageResourceDescription)")
  fmt.Fprintln(os.Stderr, "  StorageResourceDescription getStorageResource(AuthzToken authzToken, string storageResourceId)")
  fmt.Fprintln(os.Stderr, "   getAllStorageResourceNames(AuthzToken authzToken)")
  fmt.Fprintln(os.Stderr, "  bool updateStorageResource(AuthzToken authzToken, string storageResourceId, StorageResourceDescription storageResourceDescription)")
  fmt.Fprintln(os.Stderr, "  bool deleteStorageResource(AuthzToken authzToken, string storageResourceId)")
  fmt.Fprintln(os.Stderr, "  string addLocalSubmissionDetails(AuthzToken authzToken, string computeResourceId, i32 priorityOrder, LOCALSubmission localSubmission)")
  fmt.Fprintln(os.Stderr, "  bool updateLocalSubmissionDetails(AuthzToken authzToken, string jobSubmissionInterfaceId, LOCALSubmission localSubmission)")
  fmt.Fprintln(os.Stderr, "  LOCALSubmission getLocalJobSubmission(AuthzToken authzToken, string jobSubmissionId)")
  fmt.Fprintln(os.Stderr, "  string addSSHJobSubmissionDetails(AuthzToken authzToken, string computeResourceId, i32 priorityOrder, SSHJobSubmission sshJobSubmission)")
  fmt.Fprintln(os.Stderr, "  string addSSHForkJobSubmissionDetails(AuthzToken authzToken, string computeResourceId, i32 priorityOrder, SSHJobSubmission sshJobSubmission)")
  fmt.Fprintln(os.Stderr, "  SSHJobSubmission getSSHJobSubmission(AuthzToken authzToken, string jobSubmissionId)")
  fmt.Fprintln(os.Stderr, "  string addUNICOREJobSubmissionDetails(AuthzToken authzToken, string computeResourceId, i32 priorityOrder, UnicoreJobSubmission unicoreJobSubmission)")
  fmt.Fprintln(os.Stderr, "  UnicoreJobSubmission getUnicoreJobSubmission(AuthzToken authzToken, string jobSubmissionId)")
  fmt.Fprintln(os.Stderr, "  string addCloudJobSubmissionDetails(AuthzToken authzToken, string computeResourceId, i32 priorityOrder, CloudJobSubmission cloudSubmission)")
  fmt.Fprintln(os.Stderr, "  CloudJobSubmission getCloudJobSubmission(AuthzToken authzToken, string jobSubmissionId)")
  fmt.Fprintln(os.Stderr, "  bool updateSSHJobSubmissionDetails(AuthzToken authzToken, string jobSubmissionInterfaceId, SSHJobSubmission sshJobSubmission)")
  fmt.Fprintln(os.Stderr, "  bool updateCloudJobSubmissionDetails(AuthzToken authzToken, string jobSubmissionInterfaceId, CloudJobSubmission sshJobSubmission)")
  fmt.Fprintln(os.Stderr, "  bool updateUnicoreJobSubmissionDetails(AuthzToken authzToken, string jobSubmissionInterfaceId, UnicoreJobSubmission unicoreJobSubmission)")
  fmt.Fprintln(os.Stderr, "  string addLocalDataMovementDetails(AuthzToken authzToken, string productUri, DMType dataMoveType, i32 priorityOrder, LOCALDataMovement localDataMovement)")
  fmt.Fprintln(os.Stderr, "  bool updateLocalDataMovementDetails(AuthzToken authzToken, string dataMovementInterfaceId, LOCALDataMovement localDataMovement)")
  fmt.Fprintln(os.Stderr, "  LOCALDataMovement getLocalDataMovement(AuthzToken authzToken, string dataMovementId)")
  fmt.Fprintln(os.Stderr, "  string addSCPDataMovementDetails(AuthzToken authzToken, string productUri, DMType dataMoveType, i32 priorityOrder, SCPDataMovement scpDataMovement)")
  fmt.Fprintln(os.Stderr, "  bool updateSCPDataMovementDetails(AuthzToken authzToken, string dataMovementInterfaceId, SCPDataMovement scpDataMovement)")
  fmt.Fprintln(os.Stderr, "  SCPDataMovement getSCPDataMovement(AuthzToken authzToken, string dataMovementId)")
  fmt.Fprintln(os.Stderr, "  string addUnicoreDataMovementDetails(AuthzToken authzToken, string productUri, DMType dataMoveType, i32 priorityOrder, UnicoreDataMovement unicoreDataMovement)")
  fmt.Fprintln(os.Stderr, "  bool updateUnicoreDataMovementDetails(AuthzToken authzToken, string dataMovementInterfaceId, UnicoreDataMovement unicoreDataMovement)")
  fmt.Fprintln(os.Stderr, "  UnicoreDataMovement getUnicoreDataMovement(AuthzToken authzToken, string dataMovementId)")
  fmt.Fprintln(os.Stderr, "  string addGridFTPDataMovementDetails(AuthzToken authzToken, string productUri, DMType dataMoveType, i32 priorityOrder, GridFTPDataMovement gridFTPDataMovement)")
  fmt.Fprintln(os.Stderr, "  bool updateGridFTPDataMovementDetails(AuthzToken authzToken, string dataMovementInterfaceId, GridFTPDataMovement gridFTPDataMovement)")
  fmt.Fprintln(os.Stderr, "  GridFTPDataMovement getGridFTPDataMovement(AuthzToken authzToken, string dataMovementId)")
  fmt.Fprintln(os.Stderr, "  bool changeJobSubmissionPriority(AuthzToken authzToken, string jobSubmissionInterfaceId, i32 newPriorityOrder)")
  fmt.Fprintln(os.Stderr, "  bool changeDataMovementPriority(AuthzToken authzToken, string dataMovementInterfaceId, i32 newPriorityOrder)")
  fmt.Fprintln(os.Stderr, "  bool changeJobSubmissionPriorities(AuthzToken authzToken,  jobSubmissionPriorityMap)")
  fmt.Fprintln(os.Stderr, "  bool changeDataMovementPriorities(AuthzToken authzToken,  dataMovementPriorityMap)")
  fmt.Fprintln(os.Stderr, "  bool deleteJobSubmissionInterface(AuthzToken authzToken, string computeResourceId, string jobSubmissionInterfaceId)")
  fmt.Fprintln(os.Stderr, "  bool deleteDataMovementInterface(AuthzToken authzToken, string productUri, string dataMovementInterfaceId, DMType dataMoveType)")
  fmt.Fprintln(os.Stderr, "  string registerResourceJobManager(AuthzToken authzToken, ResourceJobManager resourceJobManager)")
  fmt.Fprintln(os.Stderr, "  bool updateResourceJobManager(AuthzToken authzToken, string resourceJobManagerId, ResourceJobManager updatedResourceJobManager)")
  fmt.Fprintln(os.Stderr, "  ResourceJobManager getResourceJobManager(AuthzToken authzToken, string resourceJobManagerId)")
  fmt.Fprintln(os.Stderr, "  bool deleteResourceJobManager(AuthzToken authzToken, string resourceJobManagerId)")
  fmt.Fprintln(os.Stderr, "  bool deleteBatchQueue(AuthzToken authzToken, string computeResourceId, string queueName)")
  fmt.Fprintln(os.Stderr, "  string registerGatewayResourceProfile(AuthzToken authzToken, GatewayResourceProfile gatewayResourceProfile)")
  fmt.Fprintln(os.Stderr, "  GatewayResourceProfile getGatewayResourceProfile(AuthzToken authzToken, string gatewayID)")
  fmt.Fprintln(os.Stderr, "  bool updateGatewayResourceProfile(AuthzToken authzToken, string gatewayID, GatewayResourceProfile gatewayResourceProfile)")
  fmt.Fprintln(os.Stderr, "  bool deleteGatewayResourceProfile(AuthzToken authzToken, string gatewayID)")
  fmt.Fprintln(os.Stderr, "  bool addGatewayComputeResourcePreference(AuthzToken authzToken, string gatewayID, string computeResourceId, ComputeResourcePreference computeResourcePreference)")
  fmt.Fprintln(os.Stderr, "  bool addGatewayStoragePreference(AuthzToken authzToken, string gatewayID, string storageResourceId, StoragePreference storagePreference)")
  fmt.Fprintln(os.Stderr, "  ComputeResourcePreference getGatewayComputeResourcePreference(AuthzToken authzToken, string gatewayID, string computeResourceId)")
  fmt.Fprintln(os.Stderr, "  StoragePreference getGatewayStoragePreference(AuthzToken authzToken, string gatewayID, string storageResourceId)")
  fmt.Fprintln(os.Stderr, "   getAllGatewayComputeResourcePreferences(AuthzToken authzToken, string gatewayID)")
  fmt.Fprintln(os.Stderr, "   getAllGatewayStoragePreferences(AuthzToken authzToken, string gatewayID)")
  fmt.Fprintln(os.Stderr, "   getAllGatewayResourceProfiles(AuthzToken authzToken)")
  fmt.Fprintln(os.Stderr, "  bool updateGatewayComputeResourcePreference(AuthzToken authzToken, string gatewayID, string computeResourceId, ComputeResourcePreference computeResourcePreference)")
  fmt.Fprintln(os.Stderr, "  bool updateGatewayStoragePreference(AuthzToken authzToken, string gatewayID, string storageId, StoragePreference storagePreference)")
  fmt.Fprintln(os.Stderr, "  bool deleteGatewayComputeResourcePreference(AuthzToken authzToken, string gatewayID, string computeResourceId)")
  fmt.Fprintln(os.Stderr, "  bool deleteGatewayStoragePreference(AuthzToken authzToken, string gatewayID, string storageId)")
  fmt.Fprintln(os.Stderr, "  string registerUserResourceProfile(AuthzToken authzToken, UserResourceProfile userResourceProfile)")
  fmt.Fprintln(os.Stderr, "  UserResourceProfile getUserResourceProfile(AuthzToken authzToken, string userId, string gatewayID)")
  fmt.Fprintln(os.Stderr, "  bool updateUserResourceProfile(AuthzToken authzToken, string userId, string gatewayID, UserResourceProfile userResourceProfile)")
  fmt.Fprintln(os.Stderr, "  bool deleteUserResourceProfile(AuthzToken authzToken, string userId, string gatewayID)")
  fmt.Fprintln(os.Stderr, "  bool addUserComputeResourcePreference(AuthzToken authzToken, string userId, string gatewayID, string userComputeResourceId, UserComputeResourcePreference userComputeResourcePreference)")
  fmt.Fprintln(os.Stderr, "  bool addUserStoragePreference(AuthzToken authzToken, string userId, string gatewayID, string userStorageResourceId, UserStoragePreference userStoragePreference)")
  fmt.Fprintln(os.Stderr, "  UserComputeResourcePreference getUserComputeResourcePreference(AuthzToken authzToken, string userId, string gatewayID, string userComputeResourceId)")
  fmt.Fprintln(os.Stderr, "  UserStoragePreference getUserStoragePreference(AuthzToken authzToken, string userId, string gatewayID, string userStorageResourceId)")
  fmt.Fprintln(os.Stderr, "   getAllUserComputeResourcePreferences(AuthzToken authzToken, string userId, string gatewayID)")
  fmt.Fprintln(os.Stderr, "   getAllUserStoragePreferences(AuthzToken authzToken, string userId, string gatewayID)")
  fmt.Fprintln(os.Stderr, "   getAllUserResourceProfiles(AuthzToken authzToken)")
  fmt.Fprintln(os.Stderr, "  bool updateUserComputeResourcePreference(AuthzToken authzToken, string userId, string gatewayID, string userComputeResourceId, UserComputeResourcePreference userComputeResourcePreference)")
  fmt.Fprintln(os.Stderr, "  bool updateUserStoragePreference(AuthzToken authzToken, string userId, string gatewayID, string userStorageId, UserStoragePreference userStoragePreference)")
  fmt.Fprintln(os.Stderr, "  bool deleteUserComputeResourcePreference(AuthzToken authzToken, string userId, string gatewayID, string userComputeResourceId)")
  fmt.Fprintln(os.Stderr, "  bool deleteUserStoragePreference(AuthzToken authzToken, string userId, string gatewayID, string userStorageId)")
  fmt.Fprintln(os.Stderr, "   getAllWorkflows(AuthzToken authzToken, string gatewayId)")
  fmt.Fprintln(os.Stderr, "   getLatestQueueStatuses(AuthzToken authzToken)")
  fmt.Fprintln(os.Stderr, "  WorkflowModel getWorkflow(AuthzToken authzToken, string workflowTemplateId)")
  fmt.Fprintln(os.Stderr, "  void deleteWorkflow(AuthzToken authzToken, string workflowTemplateId)")
  fmt.Fprintln(os.Stderr, "  string registerWorkflow(AuthzToken authzToken, string gatewayId, WorkflowModel workflow)")
  fmt.Fprintln(os.Stderr, "  void updateWorkflow(AuthzToken authzToken, string workflowTemplateId, WorkflowModel workflow)")
  fmt.Fprintln(os.Stderr, "  string getWorkflowTemplateId(AuthzToken authzToken, string workflowName)")
  fmt.Fprintln(os.Stderr, "  bool isWorkflowExistWithName(AuthzToken authzToken, string workflowName)")
  fmt.Fprintln(os.Stderr, "  string registerDataProduct(AuthzToken authzToken, DataProductModel dataProductModel)")
  fmt.Fprintln(os.Stderr, "  DataProductModel getDataProduct(AuthzToken authzToken, string dataProductUri)")
  fmt.Fprintln(os.Stderr, "  string registerReplicaLocation(AuthzToken authzToken, DataReplicaLocationModel replicaLocationModel)")
  fmt.Fprintln(os.Stderr, "  DataProductModel getParentDataProduct(AuthzToken authzToken, string productUri)")
  fmt.Fprintln(os.Stderr, "   getChildDataProducts(AuthzToken authzToken, string productUri)")
  fmt.Fprintln(os.Stderr, "  bool shareResourceWithUsers(AuthzToken authzToken, string resourceId, ResourceType resourceType,  userPermissionList)")
  fmt.Fprintln(os.Stderr, "  bool revokeSharingOfResourceFromUsers(AuthzToken authzToken, string resourceId, ResourceType resourceType,  userPermissionList)")
  fmt.Fprintln(os.Stderr, "   getAllAccessibleUsers(AuthzToken authzToken, string resourceId, ResourceType resourceType, ResourcePermissionType permissionType)")
  fmt.Fprintln(os.Stderr, "  string createGroup(AuthzToken authzToken, GroupModel groupModel)")
  fmt.Fprintln(os.Stderr, "  bool updateGroup(AuthzToken authzToken, GroupModel groupModel)")
  fmt.Fprintln(os.Stderr, "  bool deleteGroup(AuthzToken authzToken, string groupId, string ownerId)")
  fmt.Fprintln(os.Stderr, "  GroupModel getGroup(AuthzToken authzToken, string groupId)")
  fmt.Fprintln(os.Stderr, "   getAllGroupsUserBelongs(AuthzToken authzToken, string userName)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    parsedUrl, err := url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  client := airavata_api.NewAiravataClientFactory(trans, protocolFactory)
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "getAPIVersion":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAPIVersion requires 1 args")
      flag.Usage()
    }
    arg396 := flag.Arg(1)
    mbTrans397 := thrift.NewTMemoryBufferLen(len(arg396))
    defer mbTrans397.Close()
    _, err398 := mbTrans397.WriteString(arg396)
    if err398 != nil {
      Usage()
      return
    }
    factory399 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt400 := factory399.GetProtocol(mbTrans397)
    argvalue0 := security_model.NewAuthzToken()
    err401 := argvalue0.Read(jsProt400)
    if err401 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetAPIVersion(context.Background(), value0))
    fmt.Print("\n")
    break
  case "isUserExists":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "IsUserExists requires 3 args")
      flag.Usage()
    }
    arg402 := flag.Arg(1)
    mbTrans403 := thrift.NewTMemoryBufferLen(len(arg402))
    defer mbTrans403.Close()
    _, err404 := mbTrans403.WriteString(arg402)
    if err404 != nil {
      Usage()
      return
    }
    factory405 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt406 := factory405.GetProtocol(mbTrans403)
    argvalue0 := security_model.NewAuthzToken()
    err407 := argvalue0.Read(jsProt406)
    if err407 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.IsUserExists(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "addGateway":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AddGateway requires 2 args")
      flag.Usage()
    }
    arg410 := flag.Arg(1)
    mbTrans411 := thrift.NewTMemoryBufferLen(len(arg410))
    defer mbTrans411.Close()
    _, err412 := mbTrans411.WriteString(arg410)
    if err412 != nil {
      Usage()
      return
    }
    factory413 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt414 := factory413.GetProtocol(mbTrans411)
    argvalue0 := security_model.NewAuthzToken()
    err415 := argvalue0.Read(jsProt414)
    if err415 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg416 := flag.Arg(2)
    mbTrans417 := thrift.NewTMemoryBufferLen(len(arg416))
    defer mbTrans417.Close()
    _, err418 := mbTrans417.WriteString(arg416)
    if err418 != nil {
      Usage()
      return
    }
    factory419 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt420 := factory419.GetProtocol(mbTrans417)
    argvalue1 := workspace_model.NewGateway()
    err421 := argvalue1.Read(jsProt420)
    if err421 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.AddGateway(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getAllUsersInGateway":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAllUsersInGateway requires 2 args")
      flag.Usage()
    }
    arg422 := flag.Arg(1)
    mbTrans423 := thrift.NewTMemoryBufferLen(len(arg422))
    defer mbTrans423.Close()
    _, err424 := mbTrans423.WriteString(arg422)
    if err424 != nil {
      Usage()
      return
    }
    factory425 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt426 := factory425.GetProtocol(mbTrans423)
    argvalue0 := security_model.NewAuthzToken()
    err427 := argvalue0.Read(jsProt426)
    if err427 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetAllUsersInGateway(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateGateway":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateGateway requires 3 args")
      flag.Usage()
    }
    arg429 := flag.Arg(1)
    mbTrans430 := thrift.NewTMemoryBufferLen(len(arg429))
    defer mbTrans430.Close()
    _, err431 := mbTrans430.WriteString(arg429)
    if err431 != nil {
      Usage()
      return
    }
    factory432 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt433 := factory432.GetProtocol(mbTrans430)
    argvalue0 := security_model.NewAuthzToken()
    err434 := argvalue0.Read(jsProt433)
    if err434 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg436 := flag.Arg(3)
    mbTrans437 := thrift.NewTMemoryBufferLen(len(arg436))
    defer mbTrans437.Close()
    _, err438 := mbTrans437.WriteString(arg436)
    if err438 != nil {
      Usage()
      return
    }
    factory439 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt440 := factory439.GetProtocol(mbTrans437)
    argvalue2 := workspace_model.NewGateway()
    err441 := argvalue2.Read(jsProt440)
    if err441 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.UpdateGateway(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getGateway":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetGateway requires 2 args")
      flag.Usage()
    }
    arg442 := flag.Arg(1)
    mbTrans443 := thrift.NewTMemoryBufferLen(len(arg442))
    defer mbTrans443.Close()
    _, err444 := mbTrans443.WriteString(arg442)
    if err444 != nil {
      Usage()
      return
    }
    factory445 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt446 := factory445.GetProtocol(mbTrans443)
    argvalue0 := security_model.NewAuthzToken()
    err447 := argvalue0.Read(jsProt446)
    if err447 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetGateway(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "deleteGateway":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "DeleteGateway requires 2 args")
      flag.Usage()
    }
    arg449 := flag.Arg(1)
    mbTrans450 := thrift.NewTMemoryBufferLen(len(arg449))
    defer mbTrans450.Close()
    _, err451 := mbTrans450.WriteString(arg449)
    if err451 != nil {
      Usage()
      return
    }
    factory452 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt453 := factory452.GetProtocol(mbTrans450)
    argvalue0 := security_model.NewAuthzToken()
    err454 := argvalue0.Read(jsProt453)
    if err454 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.DeleteGateway(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getAllGateways":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAllGateways requires 1 args")
      flag.Usage()
    }
    arg456 := flag.Arg(1)
    mbTrans457 := thrift.NewTMemoryBufferLen(len(arg456))
    defer mbTrans457.Close()
    _, err458 := mbTrans457.WriteString(arg456)
    if err458 != nil {
      Usage()
      return
    }
    factory459 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt460 := factory459.GetProtocol(mbTrans457)
    argvalue0 := security_model.NewAuthzToken()
    err461 := argvalue0.Read(jsProt460)
    if err461 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetAllGateways(context.Background(), value0))
    fmt.Print("\n")
    break
  case "isGatewayExist":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "IsGatewayExist requires 2 args")
      flag.Usage()
    }
    arg462 := flag.Arg(1)
    mbTrans463 := thrift.NewTMemoryBufferLen(len(arg462))
    defer mbTrans463.Close()
    _, err464 := mbTrans463.WriteString(arg462)
    if err464 != nil {
      Usage()
      return
    }
    factory465 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt466 := factory465.GetProtocol(mbTrans463)
    argvalue0 := security_model.NewAuthzToken()
    err467 := argvalue0.Read(jsProt466)
    if err467 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.IsGatewayExist(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "createNotification":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CreateNotification requires 2 args")
      flag.Usage()
    }
    arg469 := flag.Arg(1)
    mbTrans470 := thrift.NewTMemoryBufferLen(len(arg469))
    defer mbTrans470.Close()
    _, err471 := mbTrans470.WriteString(arg469)
    if err471 != nil {
      Usage()
      return
    }
    factory472 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt473 := factory472.GetProtocol(mbTrans470)
    argvalue0 := security_model.NewAuthzToken()
    err474 := argvalue0.Read(jsProt473)
    if err474 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg475 := flag.Arg(2)
    mbTrans476 := thrift.NewTMemoryBufferLen(len(arg475))
    defer mbTrans476.Close()
    _, err477 := mbTrans476.WriteString(arg475)
    if err477 != nil {
      Usage()
      return
    }
    factory478 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt479 := factory478.GetProtocol(mbTrans476)
    argvalue1 := workspace_model.NewNotification()
    err480 := argvalue1.Read(jsProt479)
    if err480 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.CreateNotification(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateNotification":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateNotification requires 2 args")
      flag.Usage()
    }
    arg481 := flag.Arg(1)
    mbTrans482 := thrift.NewTMemoryBufferLen(len(arg481))
    defer mbTrans482.Close()
    _, err483 := mbTrans482.WriteString(arg481)
    if err483 != nil {
      Usage()
      return
    }
    factory484 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt485 := factory484.GetProtocol(mbTrans482)
    argvalue0 := security_model.NewAuthzToken()
    err486 := argvalue0.Read(jsProt485)
    if err486 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg487 := flag.Arg(2)
    mbTrans488 := thrift.NewTMemoryBufferLen(len(arg487))
    defer mbTrans488.Close()
    _, err489 := mbTrans488.WriteString(arg487)
    if err489 != nil {
      Usage()
      return
    }
    factory490 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt491 := factory490.GetProtocol(mbTrans488)
    argvalue1 := workspace_model.NewNotification()
    err492 := argvalue1.Read(jsProt491)
    if err492 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateNotification(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "deleteNotification":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DeleteNotification requires 3 args")
      flag.Usage()
    }
    arg493 := flag.Arg(1)
    mbTrans494 := thrift.NewTMemoryBufferLen(len(arg493))
    defer mbTrans494.Close()
    _, err495 := mbTrans494.WriteString(arg493)
    if err495 != nil {
      Usage()
      return
    }
    factory496 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt497 := factory496.GetProtocol(mbTrans494)
    argvalue0 := security_model.NewAuthzToken()
    err498 := argvalue0.Read(jsProt497)
    if err498 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.DeleteNotification(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getNotification":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetNotification requires 3 args")
      flag.Usage()
    }
    arg501 := flag.Arg(1)
    mbTrans502 := thrift.NewTMemoryBufferLen(len(arg501))
    defer mbTrans502.Close()
    _, err503 := mbTrans502.WriteString(arg501)
    if err503 != nil {
      Usage()
      return
    }
    factory504 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt505 := factory504.GetProtocol(mbTrans502)
    argvalue0 := security_model.NewAuthzToken()
    err506 := argvalue0.Read(jsProt505)
    if err506 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetNotification(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getAllNotifications":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAllNotifications requires 2 args")
      flag.Usage()
    }
    arg509 := flag.Arg(1)
    mbTrans510 := thrift.NewTMemoryBufferLen(len(arg509))
    defer mbTrans510.Close()
    _, err511 := mbTrans510.WriteString(arg509)
    if err511 != nil {
      Usage()
      return
    }
    factory512 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt513 := factory512.GetProtocol(mbTrans510)
    argvalue0 := security_model.NewAuthzToken()
    err514 := argvalue0.Read(jsProt513)
    if err514 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetAllNotifications(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "generateAndRegisterSSHKeys":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "GenerateAndRegisterSSHKeys requires 5 args")
      flag.Usage()
    }
    arg516 := flag.Arg(1)
    mbTrans517 := thrift.NewTMemoryBufferLen(len(arg516))
    defer mbTrans517.Close()
    _, err518 := mbTrans517.WriteString(arg516)
    if err518 != nil {
      Usage()
      return
    }
    factory519 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt520 := factory519.GetProtocol(mbTrans517)
    argvalue0 := security_model.NewAuthzToken()
    err521 := argvalue0.Read(jsProt520)
    if err521 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    tmp4, err := (strconv.Atoi(flag.Arg(5)))
    if err != nil {
      Usage()
     return
    }
    argvalue4 := airavata_api.CredentialOwnerType(tmp4)
    value4 := argvalue4
    fmt.Print(client.GenerateAndRegisterSSHKeys(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "registerPwdCredential":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "RegisterPwdCredential requires 6 args")
      flag.Usage()
    }
    arg525 := flag.Arg(1)
    mbTrans526 := thrift.NewTMemoryBufferLen(len(arg525))
    defer mbTrans526.Close()
    _, err527 := mbTrans526.WriteString(arg525)
    if err527 != nil {
      Usage()
      return
    }
    factory528 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt529 := factory528.GetProtocol(mbTrans526)
    argvalue0 := security_model.NewAuthzToken()
    err530 := argvalue0.Read(jsProt529)
    if err530 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    argvalue5 := flag.Arg(6)
    value5 := argvalue5
    fmt.Print(client.RegisterPwdCredential(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "getSSHPubKey":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetSSHPubKey requires 3 args")
      flag.Usage()
    }
    arg536 := flag.Arg(1)
    mbTrans537 := thrift.NewTMemoryBufferLen(len(arg536))
    defer mbTrans537.Close()
    _, err538 := mbTrans537.WriteString(arg536)
    if err538 != nil {
      Usage()
      return
    }
    factory539 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt540 := factory539.GetProtocol(mbTrans537)
    argvalue0 := security_model.NewAuthzToken()
    err541 := argvalue0.Read(jsProt540)
    if err541 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetSSHPubKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getAllGatewaySSHPubKeys":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAllGatewaySSHPubKeys requires 2 args")
      flag.Usage()
    }
    arg544 := flag.Arg(1)
    mbTrans545 := thrift.NewTMemoryBufferLen(len(arg544))
    defer mbTrans545.Close()
    _, err546 := mbTrans545.WriteString(arg544)
    if err546 != nil {
      Usage()
      return
    }
    factory547 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt548 := factory547.GetProtocol(mbTrans545)
    argvalue0 := security_model.NewAuthzToken()
    err549 := argvalue0.Read(jsProt548)
    if err549 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetAllGatewaySSHPubKeys(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getAllCredentialSummaryForGateway":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetAllCredentialSummaryForGateway requires 3 args")
      flag.Usage()
    }
    arg551 := flag.Arg(1)
    mbTrans552 := thrift.NewTMemoryBufferLen(len(arg551))
    defer mbTrans552.Close()
    _, err553 := mbTrans552.WriteString(arg551)
    if err553 != nil {
      Usage()
      return
    }
    factory554 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt555 := factory554.GetProtocol(mbTrans552)
    argvalue0 := security_model.NewAuthzToken()
    err556 := argvalue0.Read(jsProt555)
    if err556 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := airavata_api.SummaryType(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetAllCredentialSummaryForGateway(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getAllCredentialSummaryForUsersInGateway":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetAllCredentialSummaryForUsersInGateway requires 4 args")
      flag.Usage()
    }
    arg558 := flag.Arg(1)
    mbTrans559 := thrift.NewTMemoryBufferLen(len(arg558))
    defer mbTrans559.Close()
    _, err560 := mbTrans559.WriteString(arg558)
    if err560 != nil {
      Usage()
      return
    }
    factory561 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt562 := factory561.GetProtocol(mbTrans559)
    argvalue0 := security_model.NewAuthzToken()
    err563 := argvalue0.Read(jsProt562)
    if err563 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := airavata_api.SummaryType(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.GetAllCredentialSummaryForUsersInGateway(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getAllGatewayPWDCredentials":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAllGatewayPWDCredentials requires 2 args")
      flag.Usage()
    }
    arg566 := flag.Arg(1)
    mbTrans567 := thrift.NewTMemoryBufferLen(len(arg566))
    defer mbTrans567.Close()
    _, err568 := mbTrans567.WriteString(arg566)
    if err568 != nil {
      Usage()
      return
    }
    factory569 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt570 := factory569.GetProtocol(mbTrans567)
    argvalue0 := security_model.NewAuthzToken()
    err571 := argvalue0.Read(jsProt570)
    if err571 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetAllGatewayPWDCredentials(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "deleteSSHPubKey":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DeleteSSHPubKey requires 3 args")
      flag.Usage()
    }
    arg573 := flag.Arg(1)
    mbTrans574 := thrift.NewTMemoryBufferLen(len(arg573))
    defer mbTrans574.Close()
    _, err575 := mbTrans574.WriteString(arg573)
    if err575 != nil {
      Usage()
      return
    }
    factory576 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt577 := factory576.GetProtocol(mbTrans574)
    argvalue0 := security_model.NewAuthzToken()
    err578 := argvalue0.Read(jsProt577)
    if err578 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.DeleteSSHPubKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "deletePWDCredential":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DeletePWDCredential requires 3 args")
      flag.Usage()
    }
    arg581 := flag.Arg(1)
    mbTrans582 := thrift.NewTMemoryBufferLen(len(arg581))
    defer mbTrans582.Close()
    _, err583 := mbTrans582.WriteString(arg581)
    if err583 != nil {
      Usage()
      return
    }
    factory584 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt585 := factory584.GetProtocol(mbTrans582)
    argvalue0 := security_model.NewAuthzToken()
    err586 := argvalue0.Read(jsProt585)
    if err586 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.DeletePWDCredential(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "createProject":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "CreateProject requires 3 args")
      flag.Usage()
    }
    arg589 := flag.Arg(1)
    mbTrans590 := thrift.NewTMemoryBufferLen(len(arg589))
    defer mbTrans590.Close()
    _, err591 := mbTrans590.WriteString(arg589)
    if err591 != nil {
      Usage()
      return
    }
    factory592 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt593 := factory592.GetProtocol(mbTrans590)
    argvalue0 := security_model.NewAuthzToken()
    err594 := argvalue0.Read(jsProt593)
    if err594 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg596 := flag.Arg(3)
    mbTrans597 := thrift.NewTMemoryBufferLen(len(arg596))
    defer mbTrans597.Close()
    _, err598 := mbTrans597.WriteString(arg596)
    if err598 != nil {
      Usage()
      return
    }
    factory599 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt600 := factory599.GetProtocol(mbTrans597)
    argvalue2 := workspace_model.NewProject()
    err601 := argvalue2.Read(jsProt600)
    if err601 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.CreateProject(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "updateProject":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateProject requires 3 args")
      flag.Usage()
    }
    arg602 := flag.Arg(1)
    mbTrans603 := thrift.NewTMemoryBufferLen(len(arg602))
    defer mbTrans603.Close()
    _, err604 := mbTrans603.WriteString(arg602)
    if err604 != nil {
      Usage()
      return
    }
    factory605 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt606 := factory605.GetProtocol(mbTrans603)
    argvalue0 := security_model.NewAuthzToken()
    err607 := argvalue0.Read(jsProt606)
    if err607 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg609 := flag.Arg(3)
    mbTrans610 := thrift.NewTMemoryBufferLen(len(arg609))
    defer mbTrans610.Close()
    _, err611 := mbTrans610.WriteString(arg609)
    if err611 != nil {
      Usage()
      return
    }
    factory612 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt613 := factory612.GetProtocol(mbTrans610)
    argvalue2 := workspace_model.NewProject()
    err614 := argvalue2.Read(jsProt613)
    if err614 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.UpdateProject(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getProject":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetProject requires 2 args")
      flag.Usage()
    }
    arg615 := flag.Arg(1)
    mbTrans616 := thrift.NewTMemoryBufferLen(len(arg615))
    defer mbTrans616.Close()
    _, err617 := mbTrans616.WriteString(arg615)
    if err617 != nil {
      Usage()
      return
    }
    factory618 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt619 := factory618.GetProtocol(mbTrans616)
    argvalue0 := security_model.NewAuthzToken()
    err620 := argvalue0.Read(jsProt619)
    if err620 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetProject(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "deleteProject":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "DeleteProject requires 2 args")
      flag.Usage()
    }
    arg622 := flag.Arg(1)
    mbTrans623 := thrift.NewTMemoryBufferLen(len(arg622))
    defer mbTrans623.Close()
    _, err624 := mbTrans623.WriteString(arg622)
    if err624 != nil {
      Usage()
      return
    }
    factory625 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt626 := factory625.GetProtocol(mbTrans623)
    argvalue0 := security_model.NewAuthzToken()
    err627 := argvalue0.Read(jsProt626)
    if err627 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.DeleteProject(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getUserProjects":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "GetUserProjects requires 5 args")
      flag.Usage()
    }
    arg629 := flag.Arg(1)
    mbTrans630 := thrift.NewTMemoryBufferLen(len(arg629))
    defer mbTrans630.Close()
    _, err631 := mbTrans630.WriteString(arg629)
    if err631 != nil {
      Usage()
      return
    }
    factory632 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt633 := factory632.GetProtocol(mbTrans630)
    argvalue0 := security_model.NewAuthzToken()
    err634 := argvalue0.Read(jsProt633)
    if err634 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    tmp3, err637 := (strconv.Atoi(flag.Arg(4)))
    if err637 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    tmp4, err638 := (strconv.Atoi(flag.Arg(5)))
    if err638 != nil {
      Usage()
      return
    }
    argvalue4 := int32(tmp4)
    value4 := argvalue4
    fmt.Print(client.GetUserProjects(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "searchProjects":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "SearchProjects requires 6 args")
      flag.Usage()
    }
    arg639 := flag.Arg(1)
    mbTrans640 := thrift.NewTMemoryBufferLen(len(arg639))
    defer mbTrans640.Close()
    _, err641 := mbTrans640.WriteString(arg639)
    if err641 != nil {
      Usage()
      return
    }
    factory642 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt643 := factory642.GetProtocol(mbTrans640)
    argvalue0 := security_model.NewAuthzToken()
    err644 := argvalue0.Read(jsProt643)
    if err644 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    arg647 := flag.Arg(4)
    mbTrans648 := thrift.NewTMemoryBufferLen(len(arg647))
    defer mbTrans648.Close()
    _, err649 := mbTrans648.WriteString(arg647)
    if err649 != nil { 
      Usage()
      return
    }
    factory650 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt651 := factory650.GetProtocol(mbTrans648)
    containerStruct3 := airavata_api.NewAiravataSearchProjectsArgs()
    err652 := containerStruct3.ReadField4(jsProt651)
    if err652 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.Filters
    value3 := argvalue3
    tmp4, err653 := (strconv.Atoi(flag.Arg(5)))
    if err653 != nil {
      Usage()
      return
    }
    argvalue4 := int32(tmp4)
    value4 := argvalue4
    tmp5, err654 := (strconv.Atoi(flag.Arg(6)))
    if err654 != nil {
      Usage()
      return
    }
    argvalue5 := int32(tmp5)
    value5 := argvalue5
    fmt.Print(client.SearchProjects(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "searchExperiments":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "SearchExperiments requires 6 args")
      flag.Usage()
    }
    arg655 := flag.Arg(1)
    mbTrans656 := thrift.NewTMemoryBufferLen(len(arg655))
    defer mbTrans656.Close()
    _, err657 := mbTrans656.WriteString(arg655)
    if err657 != nil {
      Usage()
      return
    }
    factory658 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt659 := factory658.GetProtocol(mbTrans656)
    argvalue0 := security_model.NewAuthzToken()
    err660 := argvalue0.Read(jsProt659)
    if err660 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    arg663 := flag.Arg(4)
    mbTrans664 := thrift.NewTMemoryBufferLen(len(arg663))
    defer mbTrans664.Close()
    _, err665 := mbTrans664.WriteString(arg663)
    if err665 != nil { 
      Usage()
      return
    }
    factory666 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt667 := factory666.GetProtocol(mbTrans664)
    containerStruct3 := airavata_api.NewAiravataSearchExperimentsArgs()
    err668 := containerStruct3.ReadField4(jsProt667)
    if err668 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.Filters
    value3 := argvalue3
    tmp4, err669 := (strconv.Atoi(flag.Arg(5)))
    if err669 != nil {
      Usage()
      return
    }
    argvalue4 := int32(tmp4)
    value4 := argvalue4
    tmp5, err670 := (strconv.Atoi(flag.Arg(6)))
    if err670 != nil {
      Usage()
      return
    }
    argvalue5 := int32(tmp5)
    value5 := argvalue5
    fmt.Print(client.SearchExperiments(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "getExperimentStatistics":
    if flag.NArg() - 1 != 7 {
      fmt.Fprintln(os.Stderr, "GetExperimentStatistics requires 7 args")
      flag.Usage()
    }
    arg671 := flag.Arg(1)
    mbTrans672 := thrift.NewTMemoryBufferLen(len(arg671))
    defer mbTrans672.Close()
    _, err673 := mbTrans672.WriteString(arg671)
    if err673 != nil {
      Usage()
      return
    }
    factory674 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt675 := factory674.GetProtocol(mbTrans672)
    argvalue0 := security_model.NewAuthzToken()
    err676 := argvalue0.Read(jsProt675)
    if err676 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2, err678 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err678 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3, err679 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err679 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    argvalue5 := flag.Arg(6)
    value5 := argvalue5
    argvalue6 := flag.Arg(7)
    value6 := argvalue6
    fmt.Print(client.GetExperimentStatistics(context.Background(), value0, value1, value2, value3, value4, value5, value6))
    fmt.Print("\n")
    break
  case "getExperimentsInProject":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetExperimentsInProject requires 4 args")
      flag.Usage()
    }
    arg683 := flag.Arg(1)
    mbTrans684 := thrift.NewTMemoryBufferLen(len(arg683))
    defer mbTrans684.Close()
    _, err685 := mbTrans684.WriteString(arg683)
    if err685 != nil {
      Usage()
      return
    }
    factory686 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt687 := factory686.GetProtocol(mbTrans684)
    argvalue0 := security_model.NewAuthzToken()
    err688 := argvalue0.Read(jsProt687)
    if err688 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err690 := (strconv.Atoi(flag.Arg(3)))
    if err690 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    tmp3, err691 := (strconv.Atoi(flag.Arg(4)))
    if err691 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    fmt.Print(client.GetExperimentsInProject(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getUserExperiments":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "GetUserExperiments requires 5 args")
      flag.Usage()
    }
    arg692 := flag.Arg(1)
    mbTrans693 := thrift.NewTMemoryBufferLen(len(arg692))
    defer mbTrans693.Close()
    _, err694 := mbTrans693.WriteString(arg692)
    if err694 != nil {
      Usage()
      return
    }
    factory695 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt696 := factory695.GetProtocol(mbTrans693)
    argvalue0 := security_model.NewAuthzToken()
    err697 := argvalue0.Read(jsProt696)
    if err697 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    tmp3, err700 := (strconv.Atoi(flag.Arg(4)))
    if err700 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    tmp4, err701 := (strconv.Atoi(flag.Arg(5)))
    if err701 != nil {
      Usage()
      return
    }
    argvalue4 := int32(tmp4)
    value4 := argvalue4
    fmt.Print(client.GetUserExperiments(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "createExperiment":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "CreateExperiment requires 3 args")
      flag.Usage()
    }
    arg702 := flag.Arg(1)
    mbTrans703 := thrift.NewTMemoryBufferLen(len(arg702))
    defer mbTrans703.Close()
    _, err704 := mbTrans703.WriteString(arg702)
    if err704 != nil {
      Usage()
      return
    }
    factory705 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt706 := factory705.GetProtocol(mbTrans703)
    argvalue0 := security_model.NewAuthzToken()
    err707 := argvalue0.Read(jsProt706)
    if err707 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg709 := flag.Arg(3)
    mbTrans710 := thrift.NewTMemoryBufferLen(len(arg709))
    defer mbTrans710.Close()
    _, err711 := mbTrans710.WriteString(arg709)
    if err711 != nil {
      Usage()
      return
    }
    factory712 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt713 := factory712.GetProtocol(mbTrans710)
    argvalue2 := experiment_model.NewExperimentModel()
    err714 := argvalue2.Read(jsProt713)
    if err714 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.CreateExperiment(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "deleteExperiment":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "DeleteExperiment requires 2 args")
      flag.Usage()
    }
    arg715 := flag.Arg(1)
    mbTrans716 := thrift.NewTMemoryBufferLen(len(arg715))
    defer mbTrans716.Close()
    _, err717 := mbTrans716.WriteString(arg715)
    if err717 != nil {
      Usage()
      return
    }
    factory718 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt719 := factory718.GetProtocol(mbTrans716)
    argvalue0 := security_model.NewAuthzToken()
    err720 := argvalue0.Read(jsProt719)
    if err720 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.DeleteExperiment(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getExperiment":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetExperiment requires 2 args")
      flag.Usage()
    }
    arg722 := flag.Arg(1)
    mbTrans723 := thrift.NewTMemoryBufferLen(len(arg722))
    defer mbTrans723.Close()
    _, err724 := mbTrans723.WriteString(arg722)
    if err724 != nil {
      Usage()
      return
    }
    factory725 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt726 := factory725.GetProtocol(mbTrans723)
    argvalue0 := security_model.NewAuthzToken()
    err727 := argvalue0.Read(jsProt726)
    if err727 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetExperiment(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getExperimentByAdmin":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetExperimentByAdmin requires 2 args")
      flag.Usage()
    }
    arg729 := flag.Arg(1)
    mbTrans730 := thrift.NewTMemoryBufferLen(len(arg729))
    defer mbTrans730.Close()
    _, err731 := mbTrans730.WriteString(arg729)
    if err731 != nil {
      Usage()
      return
    }
    factory732 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt733 := factory732.GetProtocol(mbTrans730)
    argvalue0 := security_model.NewAuthzToken()
    err734 := argvalue0.Read(jsProt733)
    if err734 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetExperimentByAdmin(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getDetailedExperimentTree":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetDetailedExperimentTree requires 2 args")
      flag.Usage()
    }
    arg736 := flag.Arg(1)
    mbTrans737 := thrift.NewTMemoryBufferLen(len(arg736))
    defer mbTrans737.Close()
    _, err738 := mbTrans737.WriteString(arg736)
    if err738 != nil {
      Usage()
      return
    }
    factory739 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt740 := factory739.GetProtocol(mbTrans737)
    argvalue0 := security_model.NewAuthzToken()
    err741 := argvalue0.Read(jsProt740)
    if err741 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetDetailedExperimentTree(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateExperiment":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateExperiment requires 3 args")
      flag.Usage()
    }
    arg743 := flag.Arg(1)
    mbTrans744 := thrift.NewTMemoryBufferLen(len(arg743))
    defer mbTrans744.Close()
    _, err745 := mbTrans744.WriteString(arg743)
    if err745 != nil {
      Usage()
      return
    }
    factory746 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt747 := factory746.GetProtocol(mbTrans744)
    argvalue0 := security_model.NewAuthzToken()
    err748 := argvalue0.Read(jsProt747)
    if err748 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg750 := flag.Arg(3)
    mbTrans751 := thrift.NewTMemoryBufferLen(len(arg750))
    defer mbTrans751.Close()
    _, err752 := mbTrans751.WriteString(arg750)
    if err752 != nil {
      Usage()
      return
    }
    factory753 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt754 := factory753.GetProtocol(mbTrans751)
    argvalue2 := experiment_model.NewExperimentModel()
    err755 := argvalue2.Read(jsProt754)
    if err755 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.UpdateExperiment(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "updateExperimentConfiguration":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateExperimentConfiguration requires 3 args")
      flag.Usage()
    }
    arg756 := flag.Arg(1)
    mbTrans757 := thrift.NewTMemoryBufferLen(len(arg756))
    defer mbTrans757.Close()
    _, err758 := mbTrans757.WriteString(arg756)
    if err758 != nil {
      Usage()
      return
    }
    factory759 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt760 := factory759.GetProtocol(mbTrans757)
    argvalue0 := security_model.NewAuthzToken()
    err761 := argvalue0.Read(jsProt760)
    if err761 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg763 := flag.Arg(3)
    mbTrans764 := thrift.NewTMemoryBufferLen(len(arg763))
    defer mbTrans764.Close()
    _, err765 := mbTrans764.WriteString(arg763)
    if err765 != nil {
      Usage()
      return
    }
    factory766 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt767 := factory766.GetProtocol(mbTrans764)
    argvalue2 := experiment_model.NewUserConfigurationDataModel()
    err768 := argvalue2.Read(jsProt767)
    if err768 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.UpdateExperimentConfiguration(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "updateResourceScheduleing":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateResourceScheduleing requires 3 args")
      flag.Usage()
    }
    arg769 := flag.Arg(1)
    mbTrans770 := thrift.NewTMemoryBufferLen(len(arg769))
    defer mbTrans770.Close()
    _, err771 := mbTrans770.WriteString(arg769)
    if err771 != nil {
      Usage()
      return
    }
    factory772 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt773 := factory772.GetProtocol(mbTrans770)
    argvalue0 := security_model.NewAuthzToken()
    err774 := argvalue0.Read(jsProt773)
    if err774 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg776 := flag.Arg(3)
    mbTrans777 := thrift.NewTMemoryBufferLen(len(arg776))
    defer mbTrans777.Close()
    _, err778 := mbTrans777.WriteString(arg776)
    if err778 != nil {
      Usage()
      return
    }
    factory779 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt780 := factory779.GetProtocol(mbTrans777)
    argvalue2 := scheduling_model.NewComputationalResourceSchedulingModel()
    err781 := argvalue2.Read(jsProt780)
    if err781 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.UpdateResourceScheduleing(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "validateExperiment":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ValidateExperiment requires 2 args")
      flag.Usage()
    }
    arg782 := flag.Arg(1)
    mbTrans783 := thrift.NewTMemoryBufferLen(len(arg782))
    defer mbTrans783.Close()
    _, err784 := mbTrans783.WriteString(arg782)
    if err784 != nil {
      Usage()
      return
    }
    factory785 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt786 := factory785.GetProtocol(mbTrans783)
    argvalue0 := security_model.NewAuthzToken()
    err787 := argvalue0.Read(jsProt786)
    if err787 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.ValidateExperiment(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "launchExperiment":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "LaunchExperiment requires 3 args")
      flag.Usage()
    }
    arg789 := flag.Arg(1)
    mbTrans790 := thrift.NewTMemoryBufferLen(len(arg789))
    defer mbTrans790.Close()
    _, err791 := mbTrans790.WriteString(arg789)
    if err791 != nil {
      Usage()
      return
    }
    factory792 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt793 := factory792.GetProtocol(mbTrans790)
    argvalue0 := security_model.NewAuthzToken()
    err794 := argvalue0.Read(jsProt793)
    if err794 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.LaunchExperiment(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getExperimentStatus":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetExperimentStatus requires 2 args")
      flag.Usage()
    }
    arg797 := flag.Arg(1)
    mbTrans798 := thrift.NewTMemoryBufferLen(len(arg797))
    defer mbTrans798.Close()
    _, err799 := mbTrans798.WriteString(arg797)
    if err799 != nil {
      Usage()
      return
    }
    factory800 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt801 := factory800.GetProtocol(mbTrans798)
    argvalue0 := security_model.NewAuthzToken()
    err802 := argvalue0.Read(jsProt801)
    if err802 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetExperimentStatus(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getExperimentOutputs":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetExperimentOutputs requires 2 args")
      flag.Usage()
    }
    arg804 := flag.Arg(1)
    mbTrans805 := thrift.NewTMemoryBufferLen(len(arg804))
    defer mbTrans805.Close()
    _, err806 := mbTrans805.WriteString(arg804)
    if err806 != nil {
      Usage()
      return
    }
    factory807 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt808 := factory807.GetProtocol(mbTrans805)
    argvalue0 := security_model.NewAuthzToken()
    err809 := argvalue0.Read(jsProt808)
    if err809 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetExperimentOutputs(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getIntermediateOutputs":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetIntermediateOutputs requires 2 args")
      flag.Usage()
    }
    arg811 := flag.Arg(1)
    mbTrans812 := thrift.NewTMemoryBufferLen(len(arg811))
    defer mbTrans812.Close()
    _, err813 := mbTrans812.WriteString(arg811)
    if err813 != nil {
      Usage()
      return
    }
    factory814 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt815 := factory814.GetProtocol(mbTrans812)
    argvalue0 := security_model.NewAuthzToken()
    err816 := argvalue0.Read(jsProt815)
    if err816 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetIntermediateOutputs(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getJobStatuses":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetJobStatuses requires 2 args")
      flag.Usage()
    }
    arg818 := flag.Arg(1)
    mbTrans819 := thrift.NewTMemoryBufferLen(len(arg818))
    defer mbTrans819.Close()
    _, err820 := mbTrans819.WriteString(arg818)
    if err820 != nil {
      Usage()
      return
    }
    factory821 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt822 := factory821.GetProtocol(mbTrans819)
    argvalue0 := security_model.NewAuthzToken()
    err823 := argvalue0.Read(jsProt822)
    if err823 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetJobStatuses(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getJobDetails":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetJobDetails requires 2 args")
      flag.Usage()
    }
    arg825 := flag.Arg(1)
    mbTrans826 := thrift.NewTMemoryBufferLen(len(arg825))
    defer mbTrans826.Close()
    _, err827 := mbTrans826.WriteString(arg825)
    if err827 != nil {
      Usage()
      return
    }
    factory828 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt829 := factory828.GetProtocol(mbTrans826)
    argvalue0 := security_model.NewAuthzToken()
    err830 := argvalue0.Read(jsProt829)
    if err830 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetJobDetails(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "cloneExperiment":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "CloneExperiment requires 4 args")
      flag.Usage()
    }
    arg832 := flag.Arg(1)
    mbTrans833 := thrift.NewTMemoryBufferLen(len(arg832))
    defer mbTrans833.Close()
    _, err834 := mbTrans833.WriteString(arg832)
    if err834 != nil {
      Usage()
      return
    }
    factory835 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt836 := factory835.GetProtocol(mbTrans833)
    argvalue0 := security_model.NewAuthzToken()
    err837 := argvalue0.Read(jsProt836)
    if err837 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.CloneExperiment(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "cloneExperimentByAdmin":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "CloneExperimentByAdmin requires 4 args")
      flag.Usage()
    }
    arg841 := flag.Arg(1)
    mbTrans842 := thrift.NewTMemoryBufferLen(len(arg841))
    defer mbTrans842.Close()
    _, err843 := mbTrans842.WriteString(arg841)
    if err843 != nil {
      Usage()
      return
    }
    factory844 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt845 := factory844.GetProtocol(mbTrans842)
    argvalue0 := security_model.NewAuthzToken()
    err846 := argvalue0.Read(jsProt845)
    if err846 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.CloneExperimentByAdmin(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "terminateExperiment":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "TerminateExperiment requires 3 args")
      flag.Usage()
    }
    arg850 := flag.Arg(1)
    mbTrans851 := thrift.NewTMemoryBufferLen(len(arg850))
    defer mbTrans851.Close()
    _, err852 := mbTrans851.WriteString(arg850)
    if err852 != nil {
      Usage()
      return
    }
    factory853 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt854 := factory853.GetProtocol(mbTrans851)
    argvalue0 := security_model.NewAuthzToken()
    err855 := argvalue0.Read(jsProt854)
    if err855 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.TerminateExperiment(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "registerApplicationModule":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "RegisterApplicationModule requires 3 args")
      flag.Usage()
    }
    arg858 := flag.Arg(1)
    mbTrans859 := thrift.NewTMemoryBufferLen(len(arg858))
    defer mbTrans859.Close()
    _, err860 := mbTrans859.WriteString(arg858)
    if err860 != nil {
      Usage()
      return
    }
    factory861 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt862 := factory861.GetProtocol(mbTrans859)
    argvalue0 := security_model.NewAuthzToken()
    err863 := argvalue0.Read(jsProt862)
    if err863 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg865 := flag.Arg(3)
    mbTrans866 := thrift.NewTMemoryBufferLen(len(arg865))
    defer mbTrans866.Close()
    _, err867 := mbTrans866.WriteString(arg865)
    if err867 != nil {
      Usage()
      return
    }
    factory868 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt869 := factory868.GetProtocol(mbTrans866)
    argvalue2 := application_deployment_model.NewApplicationModule()
    err870 := argvalue2.Read(jsProt869)
    if err870 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.RegisterApplicationModule(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getApplicationModule":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetApplicationModule requires 2 args")
      flag.Usage()
    }
    arg871 := flag.Arg(1)
    mbTrans872 := thrift.NewTMemoryBufferLen(len(arg871))
    defer mbTrans872.Close()
    _, err873 := mbTrans872.WriteString(arg871)
    if err873 != nil {
      Usage()
      return
    }
    factory874 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt875 := factory874.GetProtocol(mbTrans872)
    argvalue0 := security_model.NewAuthzToken()
    err876 := argvalue0.Read(jsProt875)
    if err876 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetApplicationModule(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateApplicationModule":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateApplicationModule requires 3 args")
      flag.Usage()
    }
    arg878 := flag.Arg(1)
    mbTrans879 := thrift.NewTMemoryBufferLen(len(arg878))
    defer mbTrans879.Close()
    _, err880 := mbTrans879.WriteString(arg878)
    if err880 != nil {
      Usage()
      return
    }
    factory881 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt882 := factory881.GetProtocol(mbTrans879)
    argvalue0 := security_model.NewAuthzToken()
    err883 := argvalue0.Read(jsProt882)
    if err883 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg885 := flag.Arg(3)
    mbTrans886 := thrift.NewTMemoryBufferLen(len(arg885))
    defer mbTrans886.Close()
    _, err887 := mbTrans886.WriteString(arg885)
    if err887 != nil {
      Usage()
      return
    }
    factory888 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt889 := factory888.GetProtocol(mbTrans886)
    argvalue2 := application_deployment_model.NewApplicationModule()
    err890 := argvalue2.Read(jsProt889)
    if err890 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.UpdateApplicationModule(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getAllAppModules":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAllAppModules requires 2 args")
      flag.Usage()
    }
    arg891 := flag.Arg(1)
    mbTrans892 := thrift.NewTMemoryBufferLen(len(arg891))
    defer mbTrans892.Close()
    _, err893 := mbTrans892.WriteString(arg891)
    if err893 != nil {
      Usage()
      return
    }
    factory894 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt895 := factory894.GetProtocol(mbTrans892)
    argvalue0 := security_model.NewAuthzToken()
    err896 := argvalue0.Read(jsProt895)
    if err896 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetAllAppModules(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "deleteApplicationModule":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "DeleteApplicationModule requires 2 args")
      flag.Usage()
    }
    arg898 := flag.Arg(1)
    mbTrans899 := thrift.NewTMemoryBufferLen(len(arg898))
    defer mbTrans899.Close()
    _, err900 := mbTrans899.WriteString(arg898)
    if err900 != nil {
      Usage()
      return
    }
    factory901 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt902 := factory901.GetProtocol(mbTrans899)
    argvalue0 := security_model.NewAuthzToken()
    err903 := argvalue0.Read(jsProt902)
    if err903 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.DeleteApplicationModule(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "registerApplicationDeployment":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "RegisterApplicationDeployment requires 3 args")
      flag.Usage()
    }
    arg905 := flag.Arg(1)
    mbTrans906 := thrift.NewTMemoryBufferLen(len(arg905))
    defer mbTrans906.Close()
    _, err907 := mbTrans906.WriteString(arg905)
    if err907 != nil {
      Usage()
      return
    }
    factory908 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt909 := factory908.GetProtocol(mbTrans906)
    argvalue0 := security_model.NewAuthzToken()
    err910 := argvalue0.Read(jsProt909)
    if err910 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg912 := flag.Arg(3)
    mbTrans913 := thrift.NewTMemoryBufferLen(len(arg912))
    defer mbTrans913.Close()
    _, err914 := mbTrans913.WriteString(arg912)
    if err914 != nil {
      Usage()
      return
    }
    factory915 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt916 := factory915.GetProtocol(mbTrans913)
    argvalue2 := application_deployment_model.NewApplicationDeploymentDescription()
    err917 := argvalue2.Read(jsProt916)
    if err917 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.RegisterApplicationDeployment(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getApplicationDeployment":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetApplicationDeployment requires 2 args")
      flag.Usage()
    }
    arg918 := flag.Arg(1)
    mbTrans919 := thrift.NewTMemoryBufferLen(len(arg918))
    defer mbTrans919.Close()
    _, err920 := mbTrans919.WriteString(arg918)
    if err920 != nil {
      Usage()
      return
    }
    factory921 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt922 := factory921.GetProtocol(mbTrans919)
    argvalue0 := security_model.NewAuthzToken()
    err923 := argvalue0.Read(jsProt922)
    if err923 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetApplicationDeployment(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateApplicationDeployment":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateApplicationDeployment requires 3 args")
      flag.Usage()
    }
    arg925 := flag.Arg(1)
    mbTrans926 := thrift.NewTMemoryBufferLen(len(arg925))
    defer mbTrans926.Close()
    _, err927 := mbTrans926.WriteString(arg925)
    if err927 != nil {
      Usage()
      return
    }
    factory928 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt929 := factory928.GetProtocol(mbTrans926)
    argvalue0 := security_model.NewAuthzToken()
    err930 := argvalue0.Read(jsProt929)
    if err930 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg932 := flag.Arg(3)
    mbTrans933 := thrift.NewTMemoryBufferLen(len(arg932))
    defer mbTrans933.Close()
    _, err934 := mbTrans933.WriteString(arg932)
    if err934 != nil {
      Usage()
      return
    }
    factory935 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt936 := factory935.GetProtocol(mbTrans933)
    argvalue2 := application_deployment_model.NewApplicationDeploymentDescription()
    err937 := argvalue2.Read(jsProt936)
    if err937 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.UpdateApplicationDeployment(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "deleteApplicationDeployment":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "DeleteApplicationDeployment requires 2 args")
      flag.Usage()
    }
    arg938 := flag.Arg(1)
    mbTrans939 := thrift.NewTMemoryBufferLen(len(arg938))
    defer mbTrans939.Close()
    _, err940 := mbTrans939.WriteString(arg938)
    if err940 != nil {
      Usage()
      return
    }
    factory941 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt942 := factory941.GetProtocol(mbTrans939)
    argvalue0 := security_model.NewAuthzToken()
    err943 := argvalue0.Read(jsProt942)
    if err943 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.DeleteApplicationDeployment(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getAllApplicationDeployments":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAllApplicationDeployments requires 2 args")
      flag.Usage()
    }
    arg945 := flag.Arg(1)
    mbTrans946 := thrift.NewTMemoryBufferLen(len(arg945))
    defer mbTrans946.Close()
    _, err947 := mbTrans946.WriteString(arg945)
    if err947 != nil {
      Usage()
      return
    }
    factory948 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt949 := factory948.GetProtocol(mbTrans946)
    argvalue0 := security_model.NewAuthzToken()
    err950 := argvalue0.Read(jsProt949)
    if err950 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetAllApplicationDeployments(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getAppModuleDeployedResources":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAppModuleDeployedResources requires 2 args")
      flag.Usage()
    }
    arg952 := flag.Arg(1)
    mbTrans953 := thrift.NewTMemoryBufferLen(len(arg952))
    defer mbTrans953.Close()
    _, err954 := mbTrans953.WriteString(arg952)
    if err954 != nil {
      Usage()
      return
    }
    factory955 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt956 := factory955.GetProtocol(mbTrans953)
    argvalue0 := security_model.NewAuthzToken()
    err957 := argvalue0.Read(jsProt956)
    if err957 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetAppModuleDeployedResources(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "registerApplicationInterface":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "RegisterApplicationInterface requires 3 args")
      flag.Usage()
    }
    arg959 := flag.Arg(1)
    mbTrans960 := thrift.NewTMemoryBufferLen(len(arg959))
    defer mbTrans960.Close()
    _, err961 := mbTrans960.WriteString(arg959)
    if err961 != nil {
      Usage()
      return
    }
    factory962 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt963 := factory962.GetProtocol(mbTrans960)
    argvalue0 := security_model.NewAuthzToken()
    err964 := argvalue0.Read(jsProt963)
    if err964 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg966 := flag.Arg(3)
    mbTrans967 := thrift.NewTMemoryBufferLen(len(arg966))
    defer mbTrans967.Close()
    _, err968 := mbTrans967.WriteString(arg966)
    if err968 != nil {
      Usage()
      return
    }
    factory969 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt970 := factory969.GetProtocol(mbTrans967)
    argvalue2 := application_interface_model.NewApplicationInterfaceDescription()
    err971 := argvalue2.Read(jsProt970)
    if err971 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.RegisterApplicationInterface(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "cloneApplicationInterface":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "CloneApplicationInterface requires 4 args")
      flag.Usage()
    }
    arg972 := flag.Arg(1)
    mbTrans973 := thrift.NewTMemoryBufferLen(len(arg972))
    defer mbTrans973.Close()
    _, err974 := mbTrans973.WriteString(arg972)
    if err974 != nil {
      Usage()
      return
    }
    factory975 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt976 := factory975.GetProtocol(mbTrans973)
    argvalue0 := security_model.NewAuthzToken()
    err977 := argvalue0.Read(jsProt976)
    if err977 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.CloneApplicationInterface(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getApplicationInterface":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetApplicationInterface requires 2 args")
      flag.Usage()
    }
    arg981 := flag.Arg(1)
    mbTrans982 := thrift.NewTMemoryBufferLen(len(arg981))
    defer mbTrans982.Close()
    _, err983 := mbTrans982.WriteString(arg981)
    if err983 != nil {
      Usage()
      return
    }
    factory984 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt985 := factory984.GetProtocol(mbTrans982)
    argvalue0 := security_model.NewAuthzToken()
    err986 := argvalue0.Read(jsProt985)
    if err986 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetApplicationInterface(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateApplicationInterface":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateApplicationInterface requires 3 args")
      flag.Usage()
    }
    arg988 := flag.Arg(1)
    mbTrans989 := thrift.NewTMemoryBufferLen(len(arg988))
    defer mbTrans989.Close()
    _, err990 := mbTrans989.WriteString(arg988)
    if err990 != nil {
      Usage()
      return
    }
    factory991 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt992 := factory991.GetProtocol(mbTrans989)
    argvalue0 := security_model.NewAuthzToken()
    err993 := argvalue0.Read(jsProt992)
    if err993 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg995 := flag.Arg(3)
    mbTrans996 := thrift.NewTMemoryBufferLen(len(arg995))
    defer mbTrans996.Close()
    _, err997 := mbTrans996.WriteString(arg995)
    if err997 != nil {
      Usage()
      return
    }
    factory998 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt999 := factory998.GetProtocol(mbTrans996)
    argvalue2 := application_interface_model.NewApplicationInterfaceDescription()
    err1000 := argvalue2.Read(jsProt999)
    if err1000 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.UpdateApplicationInterface(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "deleteApplicationInterface":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "DeleteApplicationInterface requires 2 args")
      flag.Usage()
    }
    arg1001 := flag.Arg(1)
    mbTrans1002 := thrift.NewTMemoryBufferLen(len(arg1001))
    defer mbTrans1002.Close()
    _, err1003 := mbTrans1002.WriteString(arg1001)
    if err1003 != nil {
      Usage()
      return
    }
    factory1004 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1005 := factory1004.GetProtocol(mbTrans1002)
    argvalue0 := security_model.NewAuthzToken()
    err1006 := argvalue0.Read(jsProt1005)
    if err1006 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.DeleteApplicationInterface(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getAllApplicationInterfaceNames":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAllApplicationInterfaceNames requires 2 args")
      flag.Usage()
    }
    arg1008 := flag.Arg(1)
    mbTrans1009 := thrift.NewTMemoryBufferLen(len(arg1008))
    defer mbTrans1009.Close()
    _, err1010 := mbTrans1009.WriteString(arg1008)
    if err1010 != nil {
      Usage()
      return
    }
    factory1011 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1012 := factory1011.GetProtocol(mbTrans1009)
    argvalue0 := security_model.NewAuthzToken()
    err1013 := argvalue0.Read(jsProt1012)
    if err1013 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetAllApplicationInterfaceNames(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getAllApplicationInterfaces":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAllApplicationInterfaces requires 2 args")
      flag.Usage()
    }
    arg1015 := flag.Arg(1)
    mbTrans1016 := thrift.NewTMemoryBufferLen(len(arg1015))
    defer mbTrans1016.Close()
    _, err1017 := mbTrans1016.WriteString(arg1015)
    if err1017 != nil {
      Usage()
      return
    }
    factory1018 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1019 := factory1018.GetProtocol(mbTrans1016)
    argvalue0 := security_model.NewAuthzToken()
    err1020 := argvalue0.Read(jsProt1019)
    if err1020 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetAllApplicationInterfaces(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getApplicationInputs":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetApplicationInputs requires 2 args")
      flag.Usage()
    }
    arg1022 := flag.Arg(1)
    mbTrans1023 := thrift.NewTMemoryBufferLen(len(arg1022))
    defer mbTrans1023.Close()
    _, err1024 := mbTrans1023.WriteString(arg1022)
    if err1024 != nil {
      Usage()
      return
    }
    factory1025 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1026 := factory1025.GetProtocol(mbTrans1023)
    argvalue0 := security_model.NewAuthzToken()
    err1027 := argvalue0.Read(jsProt1026)
    if err1027 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetApplicationInputs(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getApplicationOutputs":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetApplicationOutputs requires 2 args")
      flag.Usage()
    }
    arg1029 := flag.Arg(1)
    mbTrans1030 := thrift.NewTMemoryBufferLen(len(arg1029))
    defer mbTrans1030.Close()
    _, err1031 := mbTrans1030.WriteString(arg1029)
    if err1031 != nil {
      Usage()
      return
    }
    factory1032 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1033 := factory1032.GetProtocol(mbTrans1030)
    argvalue0 := security_model.NewAuthzToken()
    err1034 := argvalue0.Read(jsProt1033)
    if err1034 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetApplicationOutputs(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getAvailableAppInterfaceComputeResources":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAvailableAppInterfaceComputeResources requires 2 args")
      flag.Usage()
    }
    arg1036 := flag.Arg(1)
    mbTrans1037 := thrift.NewTMemoryBufferLen(len(arg1036))
    defer mbTrans1037.Close()
    _, err1038 := mbTrans1037.WriteString(arg1036)
    if err1038 != nil {
      Usage()
      return
    }
    factory1039 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1040 := factory1039.GetProtocol(mbTrans1037)
    argvalue0 := security_model.NewAuthzToken()
    err1041 := argvalue0.Read(jsProt1040)
    if err1041 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetAvailableAppInterfaceComputeResources(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "registerComputeResource":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RegisterComputeResource requires 2 args")
      flag.Usage()
    }
    arg1043 := flag.Arg(1)
    mbTrans1044 := thrift.NewTMemoryBufferLen(len(arg1043))
    defer mbTrans1044.Close()
    _, err1045 := mbTrans1044.WriteString(arg1043)
    if err1045 != nil {
      Usage()
      return
    }
    factory1046 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1047 := factory1046.GetProtocol(mbTrans1044)
    argvalue0 := security_model.NewAuthzToken()
    err1048 := argvalue0.Read(jsProt1047)
    if err1048 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1049 := flag.Arg(2)
    mbTrans1050 := thrift.NewTMemoryBufferLen(len(arg1049))
    defer mbTrans1050.Close()
    _, err1051 := mbTrans1050.WriteString(arg1049)
    if err1051 != nil {
      Usage()
      return
    }
    factory1052 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1053 := factory1052.GetProtocol(mbTrans1050)
    argvalue1 := compute_resource_model.NewComputeResourceDescription()
    err1054 := argvalue1.Read(jsProt1053)
    if err1054 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RegisterComputeResource(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getComputeResource":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetComputeResource requires 2 args")
      flag.Usage()
    }
    arg1055 := flag.Arg(1)
    mbTrans1056 := thrift.NewTMemoryBufferLen(len(arg1055))
    defer mbTrans1056.Close()
    _, err1057 := mbTrans1056.WriteString(arg1055)
    if err1057 != nil {
      Usage()
      return
    }
    factory1058 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1059 := factory1058.GetProtocol(mbTrans1056)
    argvalue0 := security_model.NewAuthzToken()
    err1060 := argvalue0.Read(jsProt1059)
    if err1060 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetComputeResource(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getAllComputeResourceNames":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAllComputeResourceNames requires 1 args")
      flag.Usage()
    }
    arg1062 := flag.Arg(1)
    mbTrans1063 := thrift.NewTMemoryBufferLen(len(arg1062))
    defer mbTrans1063.Close()
    _, err1064 := mbTrans1063.WriteString(arg1062)
    if err1064 != nil {
      Usage()
      return
    }
    factory1065 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1066 := factory1065.GetProtocol(mbTrans1063)
    argvalue0 := security_model.NewAuthzToken()
    err1067 := argvalue0.Read(jsProt1066)
    if err1067 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetAllComputeResourceNames(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateComputeResource":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateComputeResource requires 3 args")
      flag.Usage()
    }
    arg1068 := flag.Arg(1)
    mbTrans1069 := thrift.NewTMemoryBufferLen(len(arg1068))
    defer mbTrans1069.Close()
    _, err1070 := mbTrans1069.WriteString(arg1068)
    if err1070 != nil {
      Usage()
      return
    }
    factory1071 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1072 := factory1071.GetProtocol(mbTrans1069)
    argvalue0 := security_model.NewAuthzToken()
    err1073 := argvalue0.Read(jsProt1072)
    if err1073 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1075 := flag.Arg(3)
    mbTrans1076 := thrift.NewTMemoryBufferLen(len(arg1075))
    defer mbTrans1076.Close()
    _, err1077 := mbTrans1076.WriteString(arg1075)
    if err1077 != nil {
      Usage()
      return
    }
    factory1078 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1079 := factory1078.GetProtocol(mbTrans1076)
    argvalue2 := compute_resource_model.NewComputeResourceDescription()
    err1080 := argvalue2.Read(jsProt1079)
    if err1080 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.UpdateComputeResource(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "deleteComputeResource":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "DeleteComputeResource requires 2 args")
      flag.Usage()
    }
    arg1081 := flag.Arg(1)
    mbTrans1082 := thrift.NewTMemoryBufferLen(len(arg1081))
    defer mbTrans1082.Close()
    _, err1083 := mbTrans1082.WriteString(arg1081)
    if err1083 != nil {
      Usage()
      return
    }
    factory1084 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1085 := factory1084.GetProtocol(mbTrans1082)
    argvalue0 := security_model.NewAuthzToken()
    err1086 := argvalue0.Read(jsProt1085)
    if err1086 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.DeleteComputeResource(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "registerStorageResource":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RegisterStorageResource requires 2 args")
      flag.Usage()
    }
    arg1088 := flag.Arg(1)
    mbTrans1089 := thrift.NewTMemoryBufferLen(len(arg1088))
    defer mbTrans1089.Close()
    _, err1090 := mbTrans1089.WriteString(arg1088)
    if err1090 != nil {
      Usage()
      return
    }
    factory1091 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1092 := factory1091.GetProtocol(mbTrans1089)
    argvalue0 := security_model.NewAuthzToken()
    err1093 := argvalue0.Read(jsProt1092)
    if err1093 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1094 := flag.Arg(2)
    mbTrans1095 := thrift.NewTMemoryBufferLen(len(arg1094))
    defer mbTrans1095.Close()
    _, err1096 := mbTrans1095.WriteString(arg1094)
    if err1096 != nil {
      Usage()
      return
    }
    factory1097 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1098 := factory1097.GetProtocol(mbTrans1095)
    argvalue1 := storage_resource_model.NewStorageResourceDescription()
    err1099 := argvalue1.Read(jsProt1098)
    if err1099 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RegisterStorageResource(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getStorageResource":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetStorageResource requires 2 args")
      flag.Usage()
    }
    arg1100 := flag.Arg(1)
    mbTrans1101 := thrift.NewTMemoryBufferLen(len(arg1100))
    defer mbTrans1101.Close()
    _, err1102 := mbTrans1101.WriteString(arg1100)
    if err1102 != nil {
      Usage()
      return
    }
    factory1103 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1104 := factory1103.GetProtocol(mbTrans1101)
    argvalue0 := security_model.NewAuthzToken()
    err1105 := argvalue0.Read(jsProt1104)
    if err1105 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetStorageResource(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getAllStorageResourceNames":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAllStorageResourceNames requires 1 args")
      flag.Usage()
    }
    arg1107 := flag.Arg(1)
    mbTrans1108 := thrift.NewTMemoryBufferLen(len(arg1107))
    defer mbTrans1108.Close()
    _, err1109 := mbTrans1108.WriteString(arg1107)
    if err1109 != nil {
      Usage()
      return
    }
    factory1110 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1111 := factory1110.GetProtocol(mbTrans1108)
    argvalue0 := security_model.NewAuthzToken()
    err1112 := argvalue0.Read(jsProt1111)
    if err1112 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetAllStorageResourceNames(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateStorageResource":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateStorageResource requires 3 args")
      flag.Usage()
    }
    arg1113 := flag.Arg(1)
    mbTrans1114 := thrift.NewTMemoryBufferLen(len(arg1113))
    defer mbTrans1114.Close()
    _, err1115 := mbTrans1114.WriteString(arg1113)
    if err1115 != nil {
      Usage()
      return
    }
    factory1116 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1117 := factory1116.GetProtocol(mbTrans1114)
    argvalue0 := security_model.NewAuthzToken()
    err1118 := argvalue0.Read(jsProt1117)
    if err1118 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1120 := flag.Arg(3)
    mbTrans1121 := thrift.NewTMemoryBufferLen(len(arg1120))
    defer mbTrans1121.Close()
    _, err1122 := mbTrans1121.WriteString(arg1120)
    if err1122 != nil {
      Usage()
      return
    }
    factory1123 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1124 := factory1123.GetProtocol(mbTrans1121)
    argvalue2 := storage_resource_model.NewStorageResourceDescription()
    err1125 := argvalue2.Read(jsProt1124)
    if err1125 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.UpdateStorageResource(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "deleteStorageResource":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "DeleteStorageResource requires 2 args")
      flag.Usage()
    }
    arg1126 := flag.Arg(1)
    mbTrans1127 := thrift.NewTMemoryBufferLen(len(arg1126))
    defer mbTrans1127.Close()
    _, err1128 := mbTrans1127.WriteString(arg1126)
    if err1128 != nil {
      Usage()
      return
    }
    factory1129 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1130 := factory1129.GetProtocol(mbTrans1127)
    argvalue0 := security_model.NewAuthzToken()
    err1131 := argvalue0.Read(jsProt1130)
    if err1131 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.DeleteStorageResource(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "addLocalSubmissionDetails":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AddLocalSubmissionDetails requires 4 args")
      flag.Usage()
    }
    arg1133 := flag.Arg(1)
    mbTrans1134 := thrift.NewTMemoryBufferLen(len(arg1133))
    defer mbTrans1134.Close()
    _, err1135 := mbTrans1134.WriteString(arg1133)
    if err1135 != nil {
      Usage()
      return
    }
    factory1136 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1137 := factory1136.GetProtocol(mbTrans1134)
    argvalue0 := security_model.NewAuthzToken()
    err1138 := argvalue0.Read(jsProt1137)
    if err1138 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err1140 := (strconv.Atoi(flag.Arg(3)))
    if err1140 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    arg1141 := flag.Arg(4)
    mbTrans1142 := thrift.NewTMemoryBufferLen(len(arg1141))
    defer mbTrans1142.Close()
    _, err1143 := mbTrans1142.WriteString(arg1141)
    if err1143 != nil {
      Usage()
      return
    }
    factory1144 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1145 := factory1144.GetProtocol(mbTrans1142)
    argvalue3 := compute_resource_model.NewLOCALSubmission()
    err1146 := argvalue3.Read(jsProt1145)
    if err1146 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AddLocalSubmissionDetails(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "updateLocalSubmissionDetails":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateLocalSubmissionDetails requires 3 args")
      flag.Usage()
    }
    arg1147 := flag.Arg(1)
    mbTrans1148 := thrift.NewTMemoryBufferLen(len(arg1147))
    defer mbTrans1148.Close()
    _, err1149 := mbTrans1148.WriteString(arg1147)
    if err1149 != nil {
      Usage()
      return
    }
    factory1150 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1151 := factory1150.GetProtocol(mbTrans1148)
    argvalue0 := security_model.NewAuthzToken()
    err1152 := argvalue0.Read(jsProt1151)
    if err1152 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1154 := flag.Arg(3)
    mbTrans1155 := thrift.NewTMemoryBufferLen(len(arg1154))
    defer mbTrans1155.Close()
    _, err1156 := mbTrans1155.WriteString(arg1154)
    if err1156 != nil {
      Usage()
      return
    }
    factory1157 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1158 := factory1157.GetProtocol(mbTrans1155)
    argvalue2 := compute_resource_model.NewLOCALSubmission()
    err1159 := argvalue2.Read(jsProt1158)
    if err1159 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.UpdateLocalSubmissionDetails(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getLocalJobSubmission":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetLocalJobSubmission requires 2 args")
      flag.Usage()
    }
    arg1160 := flag.Arg(1)
    mbTrans1161 := thrift.NewTMemoryBufferLen(len(arg1160))
    defer mbTrans1161.Close()
    _, err1162 := mbTrans1161.WriteString(arg1160)
    if err1162 != nil {
      Usage()
      return
    }
    factory1163 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1164 := factory1163.GetProtocol(mbTrans1161)
    argvalue0 := security_model.NewAuthzToken()
    err1165 := argvalue0.Read(jsProt1164)
    if err1165 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetLocalJobSubmission(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "addSSHJobSubmissionDetails":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AddSSHJobSubmissionDetails requires 4 args")
      flag.Usage()
    }
    arg1167 := flag.Arg(1)
    mbTrans1168 := thrift.NewTMemoryBufferLen(len(arg1167))
    defer mbTrans1168.Close()
    _, err1169 := mbTrans1168.WriteString(arg1167)
    if err1169 != nil {
      Usage()
      return
    }
    factory1170 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1171 := factory1170.GetProtocol(mbTrans1168)
    argvalue0 := security_model.NewAuthzToken()
    err1172 := argvalue0.Read(jsProt1171)
    if err1172 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err1174 := (strconv.Atoi(flag.Arg(3)))
    if err1174 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    arg1175 := flag.Arg(4)
    mbTrans1176 := thrift.NewTMemoryBufferLen(len(arg1175))
    defer mbTrans1176.Close()
    _, err1177 := mbTrans1176.WriteString(arg1175)
    if err1177 != nil {
      Usage()
      return
    }
    factory1178 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1179 := factory1178.GetProtocol(mbTrans1176)
    argvalue3 := compute_resource_model.NewSSHJobSubmission()
    err1180 := argvalue3.Read(jsProt1179)
    if err1180 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AddSSHJobSubmissionDetails(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "addSSHForkJobSubmissionDetails":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AddSSHForkJobSubmissionDetails requires 4 args")
      flag.Usage()
    }
    arg1181 := flag.Arg(1)
    mbTrans1182 := thrift.NewTMemoryBufferLen(len(arg1181))
    defer mbTrans1182.Close()
    _, err1183 := mbTrans1182.WriteString(arg1181)
    if err1183 != nil {
      Usage()
      return
    }
    factory1184 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1185 := factory1184.GetProtocol(mbTrans1182)
    argvalue0 := security_model.NewAuthzToken()
    err1186 := argvalue0.Read(jsProt1185)
    if err1186 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err1188 := (strconv.Atoi(flag.Arg(3)))
    if err1188 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    arg1189 := flag.Arg(4)
    mbTrans1190 := thrift.NewTMemoryBufferLen(len(arg1189))
    defer mbTrans1190.Close()
    _, err1191 := mbTrans1190.WriteString(arg1189)
    if err1191 != nil {
      Usage()
      return
    }
    factory1192 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1193 := factory1192.GetProtocol(mbTrans1190)
    argvalue3 := compute_resource_model.NewSSHJobSubmission()
    err1194 := argvalue3.Read(jsProt1193)
    if err1194 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AddSSHForkJobSubmissionDetails(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getSSHJobSubmission":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetSSHJobSubmission requires 2 args")
      flag.Usage()
    }
    arg1195 := flag.Arg(1)
    mbTrans1196 := thrift.NewTMemoryBufferLen(len(arg1195))
    defer mbTrans1196.Close()
    _, err1197 := mbTrans1196.WriteString(arg1195)
    if err1197 != nil {
      Usage()
      return
    }
    factory1198 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1199 := factory1198.GetProtocol(mbTrans1196)
    argvalue0 := security_model.NewAuthzToken()
    err1200 := argvalue0.Read(jsProt1199)
    if err1200 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetSSHJobSubmission(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "addUNICOREJobSubmissionDetails":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AddUNICOREJobSubmissionDetails requires 4 args")
      flag.Usage()
    }
    arg1202 := flag.Arg(1)
    mbTrans1203 := thrift.NewTMemoryBufferLen(len(arg1202))
    defer mbTrans1203.Close()
    _, err1204 := mbTrans1203.WriteString(arg1202)
    if err1204 != nil {
      Usage()
      return
    }
    factory1205 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1206 := factory1205.GetProtocol(mbTrans1203)
    argvalue0 := security_model.NewAuthzToken()
    err1207 := argvalue0.Read(jsProt1206)
    if err1207 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err1209 := (strconv.Atoi(flag.Arg(3)))
    if err1209 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    arg1210 := flag.Arg(4)
    mbTrans1211 := thrift.NewTMemoryBufferLen(len(arg1210))
    defer mbTrans1211.Close()
    _, err1212 := mbTrans1211.WriteString(arg1210)
    if err1212 != nil {
      Usage()
      return
    }
    factory1213 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1214 := factory1213.GetProtocol(mbTrans1211)
    argvalue3 := compute_resource_model.NewUnicoreJobSubmission()
    err1215 := argvalue3.Read(jsProt1214)
    if err1215 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AddUNICOREJobSubmissionDetails(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getUnicoreJobSubmission":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetUnicoreJobSubmission requires 2 args")
      flag.Usage()
    }
    arg1216 := flag.Arg(1)
    mbTrans1217 := thrift.NewTMemoryBufferLen(len(arg1216))
    defer mbTrans1217.Close()
    _, err1218 := mbTrans1217.WriteString(arg1216)
    if err1218 != nil {
      Usage()
      return
    }
    factory1219 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1220 := factory1219.GetProtocol(mbTrans1217)
    argvalue0 := security_model.NewAuthzToken()
    err1221 := argvalue0.Read(jsProt1220)
    if err1221 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetUnicoreJobSubmission(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "addCloudJobSubmissionDetails":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AddCloudJobSubmissionDetails requires 4 args")
      flag.Usage()
    }
    arg1223 := flag.Arg(1)
    mbTrans1224 := thrift.NewTMemoryBufferLen(len(arg1223))
    defer mbTrans1224.Close()
    _, err1225 := mbTrans1224.WriteString(arg1223)
    if err1225 != nil {
      Usage()
      return
    }
    factory1226 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1227 := factory1226.GetProtocol(mbTrans1224)
    argvalue0 := security_model.NewAuthzToken()
    err1228 := argvalue0.Read(jsProt1227)
    if err1228 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err1230 := (strconv.Atoi(flag.Arg(3)))
    if err1230 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    arg1231 := flag.Arg(4)
    mbTrans1232 := thrift.NewTMemoryBufferLen(len(arg1231))
    defer mbTrans1232.Close()
    _, err1233 := mbTrans1232.WriteString(arg1231)
    if err1233 != nil {
      Usage()
      return
    }
    factory1234 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1235 := factory1234.GetProtocol(mbTrans1232)
    argvalue3 := compute_resource_model.NewCloudJobSubmission()
    err1236 := argvalue3.Read(jsProt1235)
    if err1236 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AddCloudJobSubmissionDetails(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getCloudJobSubmission":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetCloudJobSubmission requires 2 args")
      flag.Usage()
    }
    arg1237 := flag.Arg(1)
    mbTrans1238 := thrift.NewTMemoryBufferLen(len(arg1237))
    defer mbTrans1238.Close()
    _, err1239 := mbTrans1238.WriteString(arg1237)
    if err1239 != nil {
      Usage()
      return
    }
    factory1240 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1241 := factory1240.GetProtocol(mbTrans1238)
    argvalue0 := security_model.NewAuthzToken()
    err1242 := argvalue0.Read(jsProt1241)
    if err1242 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetCloudJobSubmission(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateSSHJobSubmissionDetails":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateSSHJobSubmissionDetails requires 3 args")
      flag.Usage()
    }
    arg1244 := flag.Arg(1)
    mbTrans1245 := thrift.NewTMemoryBufferLen(len(arg1244))
    defer mbTrans1245.Close()
    _, err1246 := mbTrans1245.WriteString(arg1244)
    if err1246 != nil {
      Usage()
      return
    }
    factory1247 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1248 := factory1247.GetProtocol(mbTrans1245)
    argvalue0 := security_model.NewAuthzToken()
    err1249 := argvalue0.Read(jsProt1248)
    if err1249 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1251 := flag.Arg(3)
    mbTrans1252 := thrift.NewTMemoryBufferLen(len(arg1251))
    defer mbTrans1252.Close()
    _, err1253 := mbTrans1252.WriteString(arg1251)
    if err1253 != nil {
      Usage()
      return
    }
    factory1254 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1255 := factory1254.GetProtocol(mbTrans1252)
    argvalue2 := compute_resource_model.NewSSHJobSubmission()
    err1256 := argvalue2.Read(jsProt1255)
    if err1256 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.UpdateSSHJobSubmissionDetails(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "updateCloudJobSubmissionDetails":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateCloudJobSubmissionDetails requires 3 args")
      flag.Usage()
    }
    arg1257 := flag.Arg(1)
    mbTrans1258 := thrift.NewTMemoryBufferLen(len(arg1257))
    defer mbTrans1258.Close()
    _, err1259 := mbTrans1258.WriteString(arg1257)
    if err1259 != nil {
      Usage()
      return
    }
    factory1260 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1261 := factory1260.GetProtocol(mbTrans1258)
    argvalue0 := security_model.NewAuthzToken()
    err1262 := argvalue0.Read(jsProt1261)
    if err1262 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1264 := flag.Arg(3)
    mbTrans1265 := thrift.NewTMemoryBufferLen(len(arg1264))
    defer mbTrans1265.Close()
    _, err1266 := mbTrans1265.WriteString(arg1264)
    if err1266 != nil {
      Usage()
      return
    }
    factory1267 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1268 := factory1267.GetProtocol(mbTrans1265)
    argvalue2 := compute_resource_model.NewCloudJobSubmission()
    err1269 := argvalue2.Read(jsProt1268)
    if err1269 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.UpdateCloudJobSubmissionDetails(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "updateUnicoreJobSubmissionDetails":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateUnicoreJobSubmissionDetails requires 3 args")
      flag.Usage()
    }
    arg1270 := flag.Arg(1)
    mbTrans1271 := thrift.NewTMemoryBufferLen(len(arg1270))
    defer mbTrans1271.Close()
    _, err1272 := mbTrans1271.WriteString(arg1270)
    if err1272 != nil {
      Usage()
      return
    }
    factory1273 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1274 := factory1273.GetProtocol(mbTrans1271)
    argvalue0 := security_model.NewAuthzToken()
    err1275 := argvalue0.Read(jsProt1274)
    if err1275 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1277 := flag.Arg(3)
    mbTrans1278 := thrift.NewTMemoryBufferLen(len(arg1277))
    defer mbTrans1278.Close()
    _, err1279 := mbTrans1278.WriteString(arg1277)
    if err1279 != nil {
      Usage()
      return
    }
    factory1280 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1281 := factory1280.GetProtocol(mbTrans1278)
    argvalue2 := compute_resource_model.NewUnicoreJobSubmission()
    err1282 := argvalue2.Read(jsProt1281)
    if err1282 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.UpdateUnicoreJobSubmissionDetails(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "addLocalDataMovementDetails":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "AddLocalDataMovementDetails requires 5 args")
      flag.Usage()
    }
    arg1283 := flag.Arg(1)
    mbTrans1284 := thrift.NewTMemoryBufferLen(len(arg1283))
    defer mbTrans1284.Close()
    _, err1285 := mbTrans1284.WriteString(arg1283)
    if err1285 != nil {
      Usage()
      return
    }
    factory1286 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1287 := factory1286.GetProtocol(mbTrans1284)
    argvalue0 := security_model.NewAuthzToken()
    err1288 := argvalue0.Read(jsProt1287)
    if err1288 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := airavata_api.DMType(tmp2)
    value2 := argvalue2
    tmp3, err1290 := (strconv.Atoi(flag.Arg(4)))
    if err1290 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    arg1291 := flag.Arg(5)
    mbTrans1292 := thrift.NewTMemoryBufferLen(len(arg1291))
    defer mbTrans1292.Close()
    _, err1293 := mbTrans1292.WriteString(arg1291)
    if err1293 != nil {
      Usage()
      return
    }
    factory1294 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1295 := factory1294.GetProtocol(mbTrans1292)
    argvalue4 := data_movement_models.NewLOCALDataMovement()
    err1296 := argvalue4.Read(jsProt1295)
    if err1296 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.AddLocalDataMovementDetails(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "updateLocalDataMovementDetails":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateLocalDataMovementDetails requires 3 args")
      flag.Usage()
    }
    arg1297 := flag.Arg(1)
    mbTrans1298 := thrift.NewTMemoryBufferLen(len(arg1297))
    defer mbTrans1298.Close()
    _, err1299 := mbTrans1298.WriteString(arg1297)
    if err1299 != nil {
      Usage()
      return
    }
    factory1300 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1301 := factory1300.GetProtocol(mbTrans1298)
    argvalue0 := security_model.NewAuthzToken()
    err1302 := argvalue0.Read(jsProt1301)
    if err1302 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1304 := flag.Arg(3)
    mbTrans1305 := thrift.NewTMemoryBufferLen(len(arg1304))
    defer mbTrans1305.Close()
    _, err1306 := mbTrans1305.WriteString(arg1304)
    if err1306 != nil {
      Usage()
      return
    }
    factory1307 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1308 := factory1307.GetProtocol(mbTrans1305)
    argvalue2 := data_movement_models.NewLOCALDataMovement()
    err1309 := argvalue2.Read(jsProt1308)
    if err1309 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.UpdateLocalDataMovementDetails(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getLocalDataMovement":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetLocalDataMovement requires 2 args")
      flag.Usage()
    }
    arg1310 := flag.Arg(1)
    mbTrans1311 := thrift.NewTMemoryBufferLen(len(arg1310))
    defer mbTrans1311.Close()
    _, err1312 := mbTrans1311.WriteString(arg1310)
    if err1312 != nil {
      Usage()
      return
    }
    factory1313 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1314 := factory1313.GetProtocol(mbTrans1311)
    argvalue0 := security_model.NewAuthzToken()
    err1315 := argvalue0.Read(jsProt1314)
    if err1315 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetLocalDataMovement(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "addSCPDataMovementDetails":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "AddSCPDataMovementDetails requires 5 args")
      flag.Usage()
    }
    arg1317 := flag.Arg(1)
    mbTrans1318 := thrift.NewTMemoryBufferLen(len(arg1317))
    defer mbTrans1318.Close()
    _, err1319 := mbTrans1318.WriteString(arg1317)
    if err1319 != nil {
      Usage()
      return
    }
    factory1320 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1321 := factory1320.GetProtocol(mbTrans1318)
    argvalue0 := security_model.NewAuthzToken()
    err1322 := argvalue0.Read(jsProt1321)
    if err1322 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := airavata_api.DMType(tmp2)
    value2 := argvalue2
    tmp3, err1324 := (strconv.Atoi(flag.Arg(4)))
    if err1324 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    arg1325 := flag.Arg(5)
    mbTrans1326 := thrift.NewTMemoryBufferLen(len(arg1325))
    defer mbTrans1326.Close()
    _, err1327 := mbTrans1326.WriteString(arg1325)
    if err1327 != nil {
      Usage()
      return
    }
    factory1328 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1329 := factory1328.GetProtocol(mbTrans1326)
    argvalue4 := data_movement_models.NewSCPDataMovement()
    err1330 := argvalue4.Read(jsProt1329)
    if err1330 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.AddSCPDataMovementDetails(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "updateSCPDataMovementDetails":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateSCPDataMovementDetails requires 3 args")
      flag.Usage()
    }
    arg1331 := flag.Arg(1)
    mbTrans1332 := thrift.NewTMemoryBufferLen(len(arg1331))
    defer mbTrans1332.Close()
    _, err1333 := mbTrans1332.WriteString(arg1331)
    if err1333 != nil {
      Usage()
      return
    }
    factory1334 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1335 := factory1334.GetProtocol(mbTrans1332)
    argvalue0 := security_model.NewAuthzToken()
    err1336 := argvalue0.Read(jsProt1335)
    if err1336 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1338 := flag.Arg(3)
    mbTrans1339 := thrift.NewTMemoryBufferLen(len(arg1338))
    defer mbTrans1339.Close()
    _, err1340 := mbTrans1339.WriteString(arg1338)
    if err1340 != nil {
      Usage()
      return
    }
    factory1341 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1342 := factory1341.GetProtocol(mbTrans1339)
    argvalue2 := data_movement_models.NewSCPDataMovement()
    err1343 := argvalue2.Read(jsProt1342)
    if err1343 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.UpdateSCPDataMovementDetails(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getSCPDataMovement":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetSCPDataMovement requires 2 args")
      flag.Usage()
    }
    arg1344 := flag.Arg(1)
    mbTrans1345 := thrift.NewTMemoryBufferLen(len(arg1344))
    defer mbTrans1345.Close()
    _, err1346 := mbTrans1345.WriteString(arg1344)
    if err1346 != nil {
      Usage()
      return
    }
    factory1347 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1348 := factory1347.GetProtocol(mbTrans1345)
    argvalue0 := security_model.NewAuthzToken()
    err1349 := argvalue0.Read(jsProt1348)
    if err1349 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetSCPDataMovement(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "addUnicoreDataMovementDetails":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "AddUnicoreDataMovementDetails requires 5 args")
      flag.Usage()
    }
    arg1351 := flag.Arg(1)
    mbTrans1352 := thrift.NewTMemoryBufferLen(len(arg1351))
    defer mbTrans1352.Close()
    _, err1353 := mbTrans1352.WriteString(arg1351)
    if err1353 != nil {
      Usage()
      return
    }
    factory1354 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1355 := factory1354.GetProtocol(mbTrans1352)
    argvalue0 := security_model.NewAuthzToken()
    err1356 := argvalue0.Read(jsProt1355)
    if err1356 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := airavata_api.DMType(tmp2)
    value2 := argvalue2
    tmp3, err1358 := (strconv.Atoi(flag.Arg(4)))
    if err1358 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    arg1359 := flag.Arg(5)
    mbTrans1360 := thrift.NewTMemoryBufferLen(len(arg1359))
    defer mbTrans1360.Close()
    _, err1361 := mbTrans1360.WriteString(arg1359)
    if err1361 != nil {
      Usage()
      return
    }
    factory1362 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1363 := factory1362.GetProtocol(mbTrans1360)
    argvalue4 := data_movement_models.NewUnicoreDataMovement()
    err1364 := argvalue4.Read(jsProt1363)
    if err1364 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.AddUnicoreDataMovementDetails(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "updateUnicoreDataMovementDetails":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateUnicoreDataMovementDetails requires 3 args")
      flag.Usage()
    }
    arg1365 := flag.Arg(1)
    mbTrans1366 := thrift.NewTMemoryBufferLen(len(arg1365))
    defer mbTrans1366.Close()
    _, err1367 := mbTrans1366.WriteString(arg1365)
    if err1367 != nil {
      Usage()
      return
    }
    factory1368 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1369 := factory1368.GetProtocol(mbTrans1366)
    argvalue0 := security_model.NewAuthzToken()
    err1370 := argvalue0.Read(jsProt1369)
    if err1370 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1372 := flag.Arg(3)
    mbTrans1373 := thrift.NewTMemoryBufferLen(len(arg1372))
    defer mbTrans1373.Close()
    _, err1374 := mbTrans1373.WriteString(arg1372)
    if err1374 != nil {
      Usage()
      return
    }
    factory1375 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1376 := factory1375.GetProtocol(mbTrans1373)
    argvalue2 := data_movement_models.NewUnicoreDataMovement()
    err1377 := argvalue2.Read(jsProt1376)
    if err1377 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.UpdateUnicoreDataMovementDetails(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getUnicoreDataMovement":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetUnicoreDataMovement requires 2 args")
      flag.Usage()
    }
    arg1378 := flag.Arg(1)
    mbTrans1379 := thrift.NewTMemoryBufferLen(len(arg1378))
    defer mbTrans1379.Close()
    _, err1380 := mbTrans1379.WriteString(arg1378)
    if err1380 != nil {
      Usage()
      return
    }
    factory1381 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1382 := factory1381.GetProtocol(mbTrans1379)
    argvalue0 := security_model.NewAuthzToken()
    err1383 := argvalue0.Read(jsProt1382)
    if err1383 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetUnicoreDataMovement(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "addGridFTPDataMovementDetails":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "AddGridFTPDataMovementDetails requires 5 args")
      flag.Usage()
    }
    arg1385 := flag.Arg(1)
    mbTrans1386 := thrift.NewTMemoryBufferLen(len(arg1385))
    defer mbTrans1386.Close()
    _, err1387 := mbTrans1386.WriteString(arg1385)
    if err1387 != nil {
      Usage()
      return
    }
    factory1388 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1389 := factory1388.GetProtocol(mbTrans1386)
    argvalue0 := security_model.NewAuthzToken()
    err1390 := argvalue0.Read(jsProt1389)
    if err1390 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := airavata_api.DMType(tmp2)
    value2 := argvalue2
    tmp3, err1392 := (strconv.Atoi(flag.Arg(4)))
    if err1392 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    arg1393 := flag.Arg(5)
    mbTrans1394 := thrift.NewTMemoryBufferLen(len(arg1393))
    defer mbTrans1394.Close()
    _, err1395 := mbTrans1394.WriteString(arg1393)
    if err1395 != nil {
      Usage()
      return
    }
    factory1396 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1397 := factory1396.GetProtocol(mbTrans1394)
    argvalue4 := data_movement_models.NewGridFTPDataMovement()
    err1398 := argvalue4.Read(jsProt1397)
    if err1398 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.AddGridFTPDataMovementDetails(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "updateGridFTPDataMovementDetails":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateGridFTPDataMovementDetails requires 3 args")
      flag.Usage()
    }
    arg1399 := flag.Arg(1)
    mbTrans1400 := thrift.NewTMemoryBufferLen(len(arg1399))
    defer mbTrans1400.Close()
    _, err1401 := mbTrans1400.WriteString(arg1399)
    if err1401 != nil {
      Usage()
      return
    }
    factory1402 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1403 := factory1402.GetProtocol(mbTrans1400)
    argvalue0 := security_model.NewAuthzToken()
    err1404 := argvalue0.Read(jsProt1403)
    if err1404 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1406 := flag.Arg(3)
    mbTrans1407 := thrift.NewTMemoryBufferLen(len(arg1406))
    defer mbTrans1407.Close()
    _, err1408 := mbTrans1407.WriteString(arg1406)
    if err1408 != nil {
      Usage()
      return
    }
    factory1409 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1410 := factory1409.GetProtocol(mbTrans1407)
    argvalue2 := data_movement_models.NewGridFTPDataMovement()
    err1411 := argvalue2.Read(jsProt1410)
    if err1411 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.UpdateGridFTPDataMovementDetails(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getGridFTPDataMovement":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetGridFTPDataMovement requires 2 args")
      flag.Usage()
    }
    arg1412 := flag.Arg(1)
    mbTrans1413 := thrift.NewTMemoryBufferLen(len(arg1412))
    defer mbTrans1413.Close()
    _, err1414 := mbTrans1413.WriteString(arg1412)
    if err1414 != nil {
      Usage()
      return
    }
    factory1415 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1416 := factory1415.GetProtocol(mbTrans1413)
    argvalue0 := security_model.NewAuthzToken()
    err1417 := argvalue0.Read(jsProt1416)
    if err1417 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetGridFTPDataMovement(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "changeJobSubmissionPriority":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "ChangeJobSubmissionPriority requires 3 args")
      flag.Usage()
    }
    arg1419 := flag.Arg(1)
    mbTrans1420 := thrift.NewTMemoryBufferLen(len(arg1419))
    defer mbTrans1420.Close()
    _, err1421 := mbTrans1420.WriteString(arg1419)
    if err1421 != nil {
      Usage()
      return
    }
    factory1422 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1423 := factory1422.GetProtocol(mbTrans1420)
    argvalue0 := security_model.NewAuthzToken()
    err1424 := argvalue0.Read(jsProt1423)
    if err1424 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err1426 := (strconv.Atoi(flag.Arg(3)))
    if err1426 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.ChangeJobSubmissionPriority(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "changeDataMovementPriority":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "ChangeDataMovementPriority requires 3 args")
      flag.Usage()
    }
    arg1427 := flag.Arg(1)
    mbTrans1428 := thrift.NewTMemoryBufferLen(len(arg1427))
    defer mbTrans1428.Close()
    _, err1429 := mbTrans1428.WriteString(arg1427)
    if err1429 != nil {
      Usage()
      return
    }
    factory1430 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1431 := factory1430.GetProtocol(mbTrans1428)
    argvalue0 := security_model.NewAuthzToken()
    err1432 := argvalue0.Read(jsProt1431)
    if err1432 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err1434 := (strconv.Atoi(flag.Arg(3)))
    if err1434 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.ChangeDataMovementPriority(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "changeJobSubmissionPriorities":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ChangeJobSubmissionPriorities requires 2 args")
      flag.Usage()
    }
    arg1435 := flag.Arg(1)
    mbTrans1436 := thrift.NewTMemoryBufferLen(len(arg1435))
    defer mbTrans1436.Close()
    _, err1437 := mbTrans1436.WriteString(arg1435)
    if err1437 != nil {
      Usage()
      return
    }
    factory1438 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1439 := factory1438.GetProtocol(mbTrans1436)
    argvalue0 := security_model.NewAuthzToken()
    err1440 := argvalue0.Read(jsProt1439)
    if err1440 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1441 := flag.Arg(2)
    mbTrans1442 := thrift.NewTMemoryBufferLen(len(arg1441))
    defer mbTrans1442.Close()
    _, err1443 := mbTrans1442.WriteString(arg1441)
    if err1443 != nil { 
      Usage()
      return
    }
    factory1444 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1445 := factory1444.GetProtocol(mbTrans1442)
    containerStruct1 := airavata_api.NewAiravataChangeJobSubmissionPrioritiesArgs()
    err1446 := containerStruct1.ReadField2(jsProt1445)
    if err1446 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.JobSubmissionPriorityMap
    value1 := argvalue1
    fmt.Print(client.ChangeJobSubmissionPriorities(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "changeDataMovementPriorities":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ChangeDataMovementPriorities requires 2 args")
      flag.Usage()
    }
    arg1447 := flag.Arg(1)
    mbTrans1448 := thrift.NewTMemoryBufferLen(len(arg1447))
    defer mbTrans1448.Close()
    _, err1449 := mbTrans1448.WriteString(arg1447)
    if err1449 != nil {
      Usage()
      return
    }
    factory1450 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1451 := factory1450.GetProtocol(mbTrans1448)
    argvalue0 := security_model.NewAuthzToken()
    err1452 := argvalue0.Read(jsProt1451)
    if err1452 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1453 := flag.Arg(2)
    mbTrans1454 := thrift.NewTMemoryBufferLen(len(arg1453))
    defer mbTrans1454.Close()
    _, err1455 := mbTrans1454.WriteString(arg1453)
    if err1455 != nil { 
      Usage()
      return
    }
    factory1456 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1457 := factory1456.GetProtocol(mbTrans1454)
    containerStruct1 := airavata_api.NewAiravataChangeDataMovementPrioritiesArgs()
    err1458 := containerStruct1.ReadField2(jsProt1457)
    if err1458 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.DataMovementPriorityMap
    value1 := argvalue1
    fmt.Print(client.ChangeDataMovementPriorities(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "deleteJobSubmissionInterface":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DeleteJobSubmissionInterface requires 3 args")
      flag.Usage()
    }
    arg1459 := flag.Arg(1)
    mbTrans1460 := thrift.NewTMemoryBufferLen(len(arg1459))
    defer mbTrans1460.Close()
    _, err1461 := mbTrans1460.WriteString(arg1459)
    if err1461 != nil {
      Usage()
      return
    }
    factory1462 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1463 := factory1462.GetProtocol(mbTrans1460)
    argvalue0 := security_model.NewAuthzToken()
    err1464 := argvalue0.Read(jsProt1463)
    if err1464 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.DeleteJobSubmissionInterface(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "deleteDataMovementInterface":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DeleteDataMovementInterface requires 4 args")
      flag.Usage()
    }
    arg1467 := flag.Arg(1)
    mbTrans1468 := thrift.NewTMemoryBufferLen(len(arg1467))
    defer mbTrans1468.Close()
    _, err1469 := mbTrans1468.WriteString(arg1467)
    if err1469 != nil {
      Usage()
      return
    }
    factory1470 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1471 := factory1470.GetProtocol(mbTrans1468)
    argvalue0 := security_model.NewAuthzToken()
    err1472 := argvalue0.Read(jsProt1471)
    if err1472 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := airavata_api.DMType(tmp3)
    value3 := argvalue3
    fmt.Print(client.DeleteDataMovementInterface(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "registerResourceJobManager":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RegisterResourceJobManager requires 2 args")
      flag.Usage()
    }
    arg1475 := flag.Arg(1)
    mbTrans1476 := thrift.NewTMemoryBufferLen(len(arg1475))
    defer mbTrans1476.Close()
    _, err1477 := mbTrans1476.WriteString(arg1475)
    if err1477 != nil {
      Usage()
      return
    }
    factory1478 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1479 := factory1478.GetProtocol(mbTrans1476)
    argvalue0 := security_model.NewAuthzToken()
    err1480 := argvalue0.Read(jsProt1479)
    if err1480 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1481 := flag.Arg(2)
    mbTrans1482 := thrift.NewTMemoryBufferLen(len(arg1481))
    defer mbTrans1482.Close()
    _, err1483 := mbTrans1482.WriteString(arg1481)
    if err1483 != nil {
      Usage()
      return
    }
    factory1484 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1485 := factory1484.GetProtocol(mbTrans1482)
    argvalue1 := compute_resource_model.NewResourceJobManager()
    err1486 := argvalue1.Read(jsProt1485)
    if err1486 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RegisterResourceJobManager(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateResourceJobManager":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateResourceJobManager requires 3 args")
      flag.Usage()
    }
    arg1487 := flag.Arg(1)
    mbTrans1488 := thrift.NewTMemoryBufferLen(len(arg1487))
    defer mbTrans1488.Close()
    _, err1489 := mbTrans1488.WriteString(arg1487)
    if err1489 != nil {
      Usage()
      return
    }
    factory1490 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1491 := factory1490.GetProtocol(mbTrans1488)
    argvalue0 := security_model.NewAuthzToken()
    err1492 := argvalue0.Read(jsProt1491)
    if err1492 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1494 := flag.Arg(3)
    mbTrans1495 := thrift.NewTMemoryBufferLen(len(arg1494))
    defer mbTrans1495.Close()
    _, err1496 := mbTrans1495.WriteString(arg1494)
    if err1496 != nil {
      Usage()
      return
    }
    factory1497 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1498 := factory1497.GetProtocol(mbTrans1495)
    argvalue2 := compute_resource_model.NewResourceJobManager()
    err1499 := argvalue2.Read(jsProt1498)
    if err1499 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.UpdateResourceJobManager(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getResourceJobManager":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetResourceJobManager requires 2 args")
      flag.Usage()
    }
    arg1500 := flag.Arg(1)
    mbTrans1501 := thrift.NewTMemoryBufferLen(len(arg1500))
    defer mbTrans1501.Close()
    _, err1502 := mbTrans1501.WriteString(arg1500)
    if err1502 != nil {
      Usage()
      return
    }
    factory1503 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1504 := factory1503.GetProtocol(mbTrans1501)
    argvalue0 := security_model.NewAuthzToken()
    err1505 := argvalue0.Read(jsProt1504)
    if err1505 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetResourceJobManager(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "deleteResourceJobManager":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "DeleteResourceJobManager requires 2 args")
      flag.Usage()
    }
    arg1507 := flag.Arg(1)
    mbTrans1508 := thrift.NewTMemoryBufferLen(len(arg1507))
    defer mbTrans1508.Close()
    _, err1509 := mbTrans1508.WriteString(arg1507)
    if err1509 != nil {
      Usage()
      return
    }
    factory1510 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1511 := factory1510.GetProtocol(mbTrans1508)
    argvalue0 := security_model.NewAuthzToken()
    err1512 := argvalue0.Read(jsProt1511)
    if err1512 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.DeleteResourceJobManager(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "deleteBatchQueue":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DeleteBatchQueue requires 3 args")
      flag.Usage()
    }
    arg1514 := flag.Arg(1)
    mbTrans1515 := thrift.NewTMemoryBufferLen(len(arg1514))
    defer mbTrans1515.Close()
    _, err1516 := mbTrans1515.WriteString(arg1514)
    if err1516 != nil {
      Usage()
      return
    }
    factory1517 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1518 := factory1517.GetProtocol(mbTrans1515)
    argvalue0 := security_model.NewAuthzToken()
    err1519 := argvalue0.Read(jsProt1518)
    if err1519 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.DeleteBatchQueue(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "registerGatewayResourceProfile":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RegisterGatewayResourceProfile requires 2 args")
      flag.Usage()
    }
    arg1522 := flag.Arg(1)
    mbTrans1523 := thrift.NewTMemoryBufferLen(len(arg1522))
    defer mbTrans1523.Close()
    _, err1524 := mbTrans1523.WriteString(arg1522)
    if err1524 != nil {
      Usage()
      return
    }
    factory1525 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1526 := factory1525.GetProtocol(mbTrans1523)
    argvalue0 := security_model.NewAuthzToken()
    err1527 := argvalue0.Read(jsProt1526)
    if err1527 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1528 := flag.Arg(2)
    mbTrans1529 := thrift.NewTMemoryBufferLen(len(arg1528))
    defer mbTrans1529.Close()
    _, err1530 := mbTrans1529.WriteString(arg1528)
    if err1530 != nil {
      Usage()
      return
    }
    factory1531 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1532 := factory1531.GetProtocol(mbTrans1529)
    argvalue1 := gateway_resource_profile_model.NewGatewayResourceProfile()
    err1533 := argvalue1.Read(jsProt1532)
    if err1533 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RegisterGatewayResourceProfile(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getGatewayResourceProfile":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetGatewayResourceProfile requires 2 args")
      flag.Usage()
    }
    arg1534 := flag.Arg(1)
    mbTrans1535 := thrift.NewTMemoryBufferLen(len(arg1534))
    defer mbTrans1535.Close()
    _, err1536 := mbTrans1535.WriteString(arg1534)
    if err1536 != nil {
      Usage()
      return
    }
    factory1537 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1538 := factory1537.GetProtocol(mbTrans1535)
    argvalue0 := security_model.NewAuthzToken()
    err1539 := argvalue0.Read(jsProt1538)
    if err1539 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetGatewayResourceProfile(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateGatewayResourceProfile":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateGatewayResourceProfile requires 3 args")
      flag.Usage()
    }
    arg1541 := flag.Arg(1)
    mbTrans1542 := thrift.NewTMemoryBufferLen(len(arg1541))
    defer mbTrans1542.Close()
    _, err1543 := mbTrans1542.WriteString(arg1541)
    if err1543 != nil {
      Usage()
      return
    }
    factory1544 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1545 := factory1544.GetProtocol(mbTrans1542)
    argvalue0 := security_model.NewAuthzToken()
    err1546 := argvalue0.Read(jsProt1545)
    if err1546 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1548 := flag.Arg(3)
    mbTrans1549 := thrift.NewTMemoryBufferLen(len(arg1548))
    defer mbTrans1549.Close()
    _, err1550 := mbTrans1549.WriteString(arg1548)
    if err1550 != nil {
      Usage()
      return
    }
    factory1551 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1552 := factory1551.GetProtocol(mbTrans1549)
    argvalue2 := gateway_resource_profile_model.NewGatewayResourceProfile()
    err1553 := argvalue2.Read(jsProt1552)
    if err1553 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.UpdateGatewayResourceProfile(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "deleteGatewayResourceProfile":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "DeleteGatewayResourceProfile requires 2 args")
      flag.Usage()
    }
    arg1554 := flag.Arg(1)
    mbTrans1555 := thrift.NewTMemoryBufferLen(len(arg1554))
    defer mbTrans1555.Close()
    _, err1556 := mbTrans1555.WriteString(arg1554)
    if err1556 != nil {
      Usage()
      return
    }
    factory1557 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1558 := factory1557.GetProtocol(mbTrans1555)
    argvalue0 := security_model.NewAuthzToken()
    err1559 := argvalue0.Read(jsProt1558)
    if err1559 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.DeleteGatewayResourceProfile(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "addGatewayComputeResourcePreference":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AddGatewayComputeResourcePreference requires 4 args")
      flag.Usage()
    }
    arg1561 := flag.Arg(1)
    mbTrans1562 := thrift.NewTMemoryBufferLen(len(arg1561))
    defer mbTrans1562.Close()
    _, err1563 := mbTrans1562.WriteString(arg1561)
    if err1563 != nil {
      Usage()
      return
    }
    factory1564 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1565 := factory1564.GetProtocol(mbTrans1562)
    argvalue0 := security_model.NewAuthzToken()
    err1566 := argvalue0.Read(jsProt1565)
    if err1566 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    arg1569 := flag.Arg(4)
    mbTrans1570 := thrift.NewTMemoryBufferLen(len(arg1569))
    defer mbTrans1570.Close()
    _, err1571 := mbTrans1570.WriteString(arg1569)
    if err1571 != nil {
      Usage()
      return
    }
    factory1572 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1573 := factory1572.GetProtocol(mbTrans1570)
    argvalue3 := gateway_resource_profile_model.NewComputeResourcePreference()
    err1574 := argvalue3.Read(jsProt1573)
    if err1574 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AddGatewayComputeResourcePreference(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "addGatewayStoragePreference":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AddGatewayStoragePreference requires 4 args")
      flag.Usage()
    }
    arg1575 := flag.Arg(1)
    mbTrans1576 := thrift.NewTMemoryBufferLen(len(arg1575))
    defer mbTrans1576.Close()
    _, err1577 := mbTrans1576.WriteString(arg1575)
    if err1577 != nil {
      Usage()
      return
    }
    factory1578 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1579 := factory1578.GetProtocol(mbTrans1576)
    argvalue0 := security_model.NewAuthzToken()
    err1580 := argvalue0.Read(jsProt1579)
    if err1580 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    arg1583 := flag.Arg(4)
    mbTrans1584 := thrift.NewTMemoryBufferLen(len(arg1583))
    defer mbTrans1584.Close()
    _, err1585 := mbTrans1584.WriteString(arg1583)
    if err1585 != nil {
      Usage()
      return
    }
    factory1586 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1587 := factory1586.GetProtocol(mbTrans1584)
    argvalue3 := gateway_resource_profile_model.NewStoragePreference()
    err1588 := argvalue3.Read(jsProt1587)
    if err1588 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AddGatewayStoragePreference(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getGatewayComputeResourcePreference":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetGatewayComputeResourcePreference requires 3 args")
      flag.Usage()
    }
    arg1589 := flag.Arg(1)
    mbTrans1590 := thrift.NewTMemoryBufferLen(len(arg1589))
    defer mbTrans1590.Close()
    _, err1591 := mbTrans1590.WriteString(arg1589)
    if err1591 != nil {
      Usage()
      return
    }
    factory1592 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1593 := factory1592.GetProtocol(mbTrans1590)
    argvalue0 := security_model.NewAuthzToken()
    err1594 := argvalue0.Read(jsProt1593)
    if err1594 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetGatewayComputeResourcePreference(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getGatewayStoragePreference":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetGatewayStoragePreference requires 3 args")
      flag.Usage()
    }
    arg1597 := flag.Arg(1)
    mbTrans1598 := thrift.NewTMemoryBufferLen(len(arg1597))
    defer mbTrans1598.Close()
    _, err1599 := mbTrans1598.WriteString(arg1597)
    if err1599 != nil {
      Usage()
      return
    }
    factory1600 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1601 := factory1600.GetProtocol(mbTrans1598)
    argvalue0 := security_model.NewAuthzToken()
    err1602 := argvalue0.Read(jsProt1601)
    if err1602 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetGatewayStoragePreference(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getAllGatewayComputeResourcePreferences":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAllGatewayComputeResourcePreferences requires 2 args")
      flag.Usage()
    }
    arg1605 := flag.Arg(1)
    mbTrans1606 := thrift.NewTMemoryBufferLen(len(arg1605))
    defer mbTrans1606.Close()
    _, err1607 := mbTrans1606.WriteString(arg1605)
    if err1607 != nil {
      Usage()
      return
    }
    factory1608 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1609 := factory1608.GetProtocol(mbTrans1606)
    argvalue0 := security_model.NewAuthzToken()
    err1610 := argvalue0.Read(jsProt1609)
    if err1610 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetAllGatewayComputeResourcePreferences(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getAllGatewayStoragePreferences":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAllGatewayStoragePreferences requires 2 args")
      flag.Usage()
    }
    arg1612 := flag.Arg(1)
    mbTrans1613 := thrift.NewTMemoryBufferLen(len(arg1612))
    defer mbTrans1613.Close()
    _, err1614 := mbTrans1613.WriteString(arg1612)
    if err1614 != nil {
      Usage()
      return
    }
    factory1615 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1616 := factory1615.GetProtocol(mbTrans1613)
    argvalue0 := security_model.NewAuthzToken()
    err1617 := argvalue0.Read(jsProt1616)
    if err1617 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetAllGatewayStoragePreferences(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getAllGatewayResourceProfiles":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAllGatewayResourceProfiles requires 1 args")
      flag.Usage()
    }
    arg1619 := flag.Arg(1)
    mbTrans1620 := thrift.NewTMemoryBufferLen(len(arg1619))
    defer mbTrans1620.Close()
    _, err1621 := mbTrans1620.WriteString(arg1619)
    if err1621 != nil {
      Usage()
      return
    }
    factory1622 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1623 := factory1622.GetProtocol(mbTrans1620)
    argvalue0 := security_model.NewAuthzToken()
    err1624 := argvalue0.Read(jsProt1623)
    if err1624 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetAllGatewayResourceProfiles(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateGatewayComputeResourcePreference":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "UpdateGatewayComputeResourcePreference requires 4 args")
      flag.Usage()
    }
    arg1625 := flag.Arg(1)
    mbTrans1626 := thrift.NewTMemoryBufferLen(len(arg1625))
    defer mbTrans1626.Close()
    _, err1627 := mbTrans1626.WriteString(arg1625)
    if err1627 != nil {
      Usage()
      return
    }
    factory1628 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1629 := factory1628.GetProtocol(mbTrans1626)
    argvalue0 := security_model.NewAuthzToken()
    err1630 := argvalue0.Read(jsProt1629)
    if err1630 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    arg1633 := flag.Arg(4)
    mbTrans1634 := thrift.NewTMemoryBufferLen(len(arg1633))
    defer mbTrans1634.Close()
    _, err1635 := mbTrans1634.WriteString(arg1633)
    if err1635 != nil {
      Usage()
      return
    }
    factory1636 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1637 := factory1636.GetProtocol(mbTrans1634)
    argvalue3 := gateway_resource_profile_model.NewComputeResourcePreference()
    err1638 := argvalue3.Read(jsProt1637)
    if err1638 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.UpdateGatewayComputeResourcePreference(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "updateGatewayStoragePreference":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "UpdateGatewayStoragePreference requires 4 args")
      flag.Usage()
    }
    arg1639 := flag.Arg(1)
    mbTrans1640 := thrift.NewTMemoryBufferLen(len(arg1639))
    defer mbTrans1640.Close()
    _, err1641 := mbTrans1640.WriteString(arg1639)
    if err1641 != nil {
      Usage()
      return
    }
    factory1642 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1643 := factory1642.GetProtocol(mbTrans1640)
    argvalue0 := security_model.NewAuthzToken()
    err1644 := argvalue0.Read(jsProt1643)
    if err1644 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    arg1647 := flag.Arg(4)
    mbTrans1648 := thrift.NewTMemoryBufferLen(len(arg1647))
    defer mbTrans1648.Close()
    _, err1649 := mbTrans1648.WriteString(arg1647)
    if err1649 != nil {
      Usage()
      return
    }
    factory1650 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1651 := factory1650.GetProtocol(mbTrans1648)
    argvalue3 := gateway_resource_profile_model.NewStoragePreference()
    err1652 := argvalue3.Read(jsProt1651)
    if err1652 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.UpdateGatewayStoragePreference(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "deleteGatewayComputeResourcePreference":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DeleteGatewayComputeResourcePreference requires 3 args")
      flag.Usage()
    }
    arg1653 := flag.Arg(1)
    mbTrans1654 := thrift.NewTMemoryBufferLen(len(arg1653))
    defer mbTrans1654.Close()
    _, err1655 := mbTrans1654.WriteString(arg1653)
    if err1655 != nil {
      Usage()
      return
    }
    factory1656 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1657 := factory1656.GetProtocol(mbTrans1654)
    argvalue0 := security_model.NewAuthzToken()
    err1658 := argvalue0.Read(jsProt1657)
    if err1658 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.DeleteGatewayComputeResourcePreference(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "deleteGatewayStoragePreference":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DeleteGatewayStoragePreference requires 3 args")
      flag.Usage()
    }
    arg1661 := flag.Arg(1)
    mbTrans1662 := thrift.NewTMemoryBufferLen(len(arg1661))
    defer mbTrans1662.Close()
    _, err1663 := mbTrans1662.WriteString(arg1661)
    if err1663 != nil {
      Usage()
      return
    }
    factory1664 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1665 := factory1664.GetProtocol(mbTrans1662)
    argvalue0 := security_model.NewAuthzToken()
    err1666 := argvalue0.Read(jsProt1665)
    if err1666 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.DeleteGatewayStoragePreference(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "registerUserResourceProfile":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RegisterUserResourceProfile requires 2 args")
      flag.Usage()
    }
    arg1669 := flag.Arg(1)
    mbTrans1670 := thrift.NewTMemoryBufferLen(len(arg1669))
    defer mbTrans1670.Close()
    _, err1671 := mbTrans1670.WriteString(arg1669)
    if err1671 != nil {
      Usage()
      return
    }
    factory1672 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1673 := factory1672.GetProtocol(mbTrans1670)
    argvalue0 := security_model.NewAuthzToken()
    err1674 := argvalue0.Read(jsProt1673)
    if err1674 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1675 := flag.Arg(2)
    mbTrans1676 := thrift.NewTMemoryBufferLen(len(arg1675))
    defer mbTrans1676.Close()
    _, err1677 := mbTrans1676.WriteString(arg1675)
    if err1677 != nil {
      Usage()
      return
    }
    factory1678 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1679 := factory1678.GetProtocol(mbTrans1676)
    argvalue1 := user_resource_profile_model.NewUserResourceProfile()
    err1680 := argvalue1.Read(jsProt1679)
    if err1680 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RegisterUserResourceProfile(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getUserResourceProfile":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetUserResourceProfile requires 3 args")
      flag.Usage()
    }
    arg1681 := flag.Arg(1)
    mbTrans1682 := thrift.NewTMemoryBufferLen(len(arg1681))
    defer mbTrans1682.Close()
    _, err1683 := mbTrans1682.WriteString(arg1681)
    if err1683 != nil {
      Usage()
      return
    }
    factory1684 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1685 := factory1684.GetProtocol(mbTrans1682)
    argvalue0 := security_model.NewAuthzToken()
    err1686 := argvalue0.Read(jsProt1685)
    if err1686 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetUserResourceProfile(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "updateUserResourceProfile":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "UpdateUserResourceProfile requires 4 args")
      flag.Usage()
    }
    arg1689 := flag.Arg(1)
    mbTrans1690 := thrift.NewTMemoryBufferLen(len(arg1689))
    defer mbTrans1690.Close()
    _, err1691 := mbTrans1690.WriteString(arg1689)
    if err1691 != nil {
      Usage()
      return
    }
    factory1692 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1693 := factory1692.GetProtocol(mbTrans1690)
    argvalue0 := security_model.NewAuthzToken()
    err1694 := argvalue0.Read(jsProt1693)
    if err1694 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    arg1697 := flag.Arg(4)
    mbTrans1698 := thrift.NewTMemoryBufferLen(len(arg1697))
    defer mbTrans1698.Close()
    _, err1699 := mbTrans1698.WriteString(arg1697)
    if err1699 != nil {
      Usage()
      return
    }
    factory1700 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1701 := factory1700.GetProtocol(mbTrans1698)
    argvalue3 := user_resource_profile_model.NewUserResourceProfile()
    err1702 := argvalue3.Read(jsProt1701)
    if err1702 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.UpdateUserResourceProfile(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "deleteUserResourceProfile":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DeleteUserResourceProfile requires 3 args")
      flag.Usage()
    }
    arg1703 := flag.Arg(1)
    mbTrans1704 := thrift.NewTMemoryBufferLen(len(arg1703))
    defer mbTrans1704.Close()
    _, err1705 := mbTrans1704.WriteString(arg1703)
    if err1705 != nil {
      Usage()
      return
    }
    factory1706 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1707 := factory1706.GetProtocol(mbTrans1704)
    argvalue0 := security_model.NewAuthzToken()
    err1708 := argvalue0.Read(jsProt1707)
    if err1708 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.DeleteUserResourceProfile(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "addUserComputeResourcePreference":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "AddUserComputeResourcePreference requires 5 args")
      flag.Usage()
    }
    arg1711 := flag.Arg(1)
    mbTrans1712 := thrift.NewTMemoryBufferLen(len(arg1711))
    defer mbTrans1712.Close()
    _, err1713 := mbTrans1712.WriteString(arg1711)
    if err1713 != nil {
      Usage()
      return
    }
    factory1714 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1715 := factory1714.GetProtocol(mbTrans1712)
    argvalue0 := security_model.NewAuthzToken()
    err1716 := argvalue0.Read(jsProt1715)
    if err1716 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    arg1720 := flag.Arg(5)
    mbTrans1721 := thrift.NewTMemoryBufferLen(len(arg1720))
    defer mbTrans1721.Close()
    _, err1722 := mbTrans1721.WriteString(arg1720)
    if err1722 != nil {
      Usage()
      return
    }
    factory1723 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1724 := factory1723.GetProtocol(mbTrans1721)
    argvalue4 := user_resource_profile_model.NewUserComputeResourcePreference()
    err1725 := argvalue4.Read(jsProt1724)
    if err1725 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.AddUserComputeResourcePreference(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "addUserStoragePreference":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "AddUserStoragePreference requires 5 args")
      flag.Usage()
    }
    arg1726 := flag.Arg(1)
    mbTrans1727 := thrift.NewTMemoryBufferLen(len(arg1726))
    defer mbTrans1727.Close()
    _, err1728 := mbTrans1727.WriteString(arg1726)
    if err1728 != nil {
      Usage()
      return
    }
    factory1729 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1730 := factory1729.GetProtocol(mbTrans1727)
    argvalue0 := security_model.NewAuthzToken()
    err1731 := argvalue0.Read(jsProt1730)
    if err1731 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    arg1735 := flag.Arg(5)
    mbTrans1736 := thrift.NewTMemoryBufferLen(len(arg1735))
    defer mbTrans1736.Close()
    _, err1737 := mbTrans1736.WriteString(arg1735)
    if err1737 != nil {
      Usage()
      return
    }
    factory1738 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1739 := factory1738.GetProtocol(mbTrans1736)
    argvalue4 := user_resource_profile_model.NewUserStoragePreference()
    err1740 := argvalue4.Read(jsProt1739)
    if err1740 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.AddUserStoragePreference(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "getUserComputeResourcePreference":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetUserComputeResourcePreference requires 4 args")
      flag.Usage()
    }
    arg1741 := flag.Arg(1)
    mbTrans1742 := thrift.NewTMemoryBufferLen(len(arg1741))
    defer mbTrans1742.Close()
    _, err1743 := mbTrans1742.WriteString(arg1741)
    if err1743 != nil {
      Usage()
      return
    }
    factory1744 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1745 := factory1744.GetProtocol(mbTrans1742)
    argvalue0 := security_model.NewAuthzToken()
    err1746 := argvalue0.Read(jsProt1745)
    if err1746 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.GetUserComputeResourcePreference(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getUserStoragePreference":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetUserStoragePreference requires 4 args")
      flag.Usage()
    }
    arg1750 := flag.Arg(1)
    mbTrans1751 := thrift.NewTMemoryBufferLen(len(arg1750))
    defer mbTrans1751.Close()
    _, err1752 := mbTrans1751.WriteString(arg1750)
    if err1752 != nil {
      Usage()
      return
    }
    factory1753 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1754 := factory1753.GetProtocol(mbTrans1751)
    argvalue0 := security_model.NewAuthzToken()
    err1755 := argvalue0.Read(jsProt1754)
    if err1755 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.GetUserStoragePreference(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getAllUserComputeResourcePreferences":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetAllUserComputeResourcePreferences requires 3 args")
      flag.Usage()
    }
    arg1759 := flag.Arg(1)
    mbTrans1760 := thrift.NewTMemoryBufferLen(len(arg1759))
    defer mbTrans1760.Close()
    _, err1761 := mbTrans1760.WriteString(arg1759)
    if err1761 != nil {
      Usage()
      return
    }
    factory1762 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1763 := factory1762.GetProtocol(mbTrans1760)
    argvalue0 := security_model.NewAuthzToken()
    err1764 := argvalue0.Read(jsProt1763)
    if err1764 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetAllUserComputeResourcePreferences(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getAllUserStoragePreferences":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetAllUserStoragePreferences requires 3 args")
      flag.Usage()
    }
    arg1767 := flag.Arg(1)
    mbTrans1768 := thrift.NewTMemoryBufferLen(len(arg1767))
    defer mbTrans1768.Close()
    _, err1769 := mbTrans1768.WriteString(arg1767)
    if err1769 != nil {
      Usage()
      return
    }
    factory1770 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1771 := factory1770.GetProtocol(mbTrans1768)
    argvalue0 := security_model.NewAuthzToken()
    err1772 := argvalue0.Read(jsProt1771)
    if err1772 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetAllUserStoragePreferences(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getAllUserResourceProfiles":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAllUserResourceProfiles requires 1 args")
      flag.Usage()
    }
    arg1775 := flag.Arg(1)
    mbTrans1776 := thrift.NewTMemoryBufferLen(len(arg1775))
    defer mbTrans1776.Close()
    _, err1777 := mbTrans1776.WriteString(arg1775)
    if err1777 != nil {
      Usage()
      return
    }
    factory1778 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1779 := factory1778.GetProtocol(mbTrans1776)
    argvalue0 := security_model.NewAuthzToken()
    err1780 := argvalue0.Read(jsProt1779)
    if err1780 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetAllUserResourceProfiles(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateUserComputeResourcePreference":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "UpdateUserComputeResourcePreference requires 5 args")
      flag.Usage()
    }
    arg1781 := flag.Arg(1)
    mbTrans1782 := thrift.NewTMemoryBufferLen(len(arg1781))
    defer mbTrans1782.Close()
    _, err1783 := mbTrans1782.WriteString(arg1781)
    if err1783 != nil {
      Usage()
      return
    }
    factory1784 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1785 := factory1784.GetProtocol(mbTrans1782)
    argvalue0 := security_model.NewAuthzToken()
    err1786 := argvalue0.Read(jsProt1785)
    if err1786 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    arg1790 := flag.Arg(5)
    mbTrans1791 := thrift.NewTMemoryBufferLen(len(arg1790))
    defer mbTrans1791.Close()
    _, err1792 := mbTrans1791.WriteString(arg1790)
    if err1792 != nil {
      Usage()
      return
    }
    factory1793 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1794 := factory1793.GetProtocol(mbTrans1791)
    argvalue4 := user_resource_profile_model.NewUserComputeResourcePreference()
    err1795 := argvalue4.Read(jsProt1794)
    if err1795 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.UpdateUserComputeResourcePreference(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "updateUserStoragePreference":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "UpdateUserStoragePreference requires 5 args")
      flag.Usage()
    }
    arg1796 := flag.Arg(1)
    mbTrans1797 := thrift.NewTMemoryBufferLen(len(arg1796))
    defer mbTrans1797.Close()
    _, err1798 := mbTrans1797.WriteString(arg1796)
    if err1798 != nil {
      Usage()
      return
    }
    factory1799 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1800 := factory1799.GetProtocol(mbTrans1797)
    argvalue0 := security_model.NewAuthzToken()
    err1801 := argvalue0.Read(jsProt1800)
    if err1801 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    arg1805 := flag.Arg(5)
    mbTrans1806 := thrift.NewTMemoryBufferLen(len(arg1805))
    defer mbTrans1806.Close()
    _, err1807 := mbTrans1806.WriteString(arg1805)
    if err1807 != nil {
      Usage()
      return
    }
    factory1808 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1809 := factory1808.GetProtocol(mbTrans1806)
    argvalue4 := user_resource_profile_model.NewUserStoragePreference()
    err1810 := argvalue4.Read(jsProt1809)
    if err1810 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.UpdateUserStoragePreference(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "deleteUserComputeResourcePreference":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DeleteUserComputeResourcePreference requires 4 args")
      flag.Usage()
    }
    arg1811 := flag.Arg(1)
    mbTrans1812 := thrift.NewTMemoryBufferLen(len(arg1811))
    defer mbTrans1812.Close()
    _, err1813 := mbTrans1812.WriteString(arg1811)
    if err1813 != nil {
      Usage()
      return
    }
    factory1814 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1815 := factory1814.GetProtocol(mbTrans1812)
    argvalue0 := security_model.NewAuthzToken()
    err1816 := argvalue0.Read(jsProt1815)
    if err1816 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.DeleteUserComputeResourcePreference(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "deleteUserStoragePreference":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DeleteUserStoragePreference requires 4 args")
      flag.Usage()
    }
    arg1820 := flag.Arg(1)
    mbTrans1821 := thrift.NewTMemoryBufferLen(len(arg1820))
    defer mbTrans1821.Close()
    _, err1822 := mbTrans1821.WriteString(arg1820)
    if err1822 != nil {
      Usage()
      return
    }
    factory1823 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1824 := factory1823.GetProtocol(mbTrans1821)
    argvalue0 := security_model.NewAuthzToken()
    err1825 := argvalue0.Read(jsProt1824)
    if err1825 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.DeleteUserStoragePreference(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getAllWorkflows":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAllWorkflows requires 2 args")
      flag.Usage()
    }
    arg1829 := flag.Arg(1)
    mbTrans1830 := thrift.NewTMemoryBufferLen(len(arg1829))
    defer mbTrans1830.Close()
    _, err1831 := mbTrans1830.WriteString(arg1829)
    if err1831 != nil {
      Usage()
      return
    }
    factory1832 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1833 := factory1832.GetProtocol(mbTrans1830)
    argvalue0 := security_model.NewAuthzToken()
    err1834 := argvalue0.Read(jsProt1833)
    if err1834 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetAllWorkflows(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getLatestQueueStatuses":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetLatestQueueStatuses requires 1 args")
      flag.Usage()
    }
    arg1836 := flag.Arg(1)
    mbTrans1837 := thrift.NewTMemoryBufferLen(len(arg1836))
    defer mbTrans1837.Close()
    _, err1838 := mbTrans1837.WriteString(arg1836)
    if err1838 != nil {
      Usage()
      return
    }
    factory1839 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1840 := factory1839.GetProtocol(mbTrans1837)
    argvalue0 := security_model.NewAuthzToken()
    err1841 := argvalue0.Read(jsProt1840)
    if err1841 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetLatestQueueStatuses(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getWorkflow":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetWorkflow requires 2 args")
      flag.Usage()
    }
    arg1842 := flag.Arg(1)
    mbTrans1843 := thrift.NewTMemoryBufferLen(len(arg1842))
    defer mbTrans1843.Close()
    _, err1844 := mbTrans1843.WriteString(arg1842)
    if err1844 != nil {
      Usage()
      return
    }
    factory1845 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1846 := factory1845.GetProtocol(mbTrans1843)
    argvalue0 := security_model.NewAuthzToken()
    err1847 := argvalue0.Read(jsProt1846)
    if err1847 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetWorkflow(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "deleteWorkflow":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "DeleteWorkflow requires 2 args")
      flag.Usage()
    }
    arg1849 := flag.Arg(1)
    mbTrans1850 := thrift.NewTMemoryBufferLen(len(arg1849))
    defer mbTrans1850.Close()
    _, err1851 := mbTrans1850.WriteString(arg1849)
    if err1851 != nil {
      Usage()
      return
    }
    factory1852 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1853 := factory1852.GetProtocol(mbTrans1850)
    argvalue0 := security_model.NewAuthzToken()
    err1854 := argvalue0.Read(jsProt1853)
    if err1854 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.DeleteWorkflow(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "registerWorkflow":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "RegisterWorkflow requires 3 args")
      flag.Usage()
    }
    arg1856 := flag.Arg(1)
    mbTrans1857 := thrift.NewTMemoryBufferLen(len(arg1856))
    defer mbTrans1857.Close()
    _, err1858 := mbTrans1857.WriteString(arg1856)
    if err1858 != nil {
      Usage()
      return
    }
    factory1859 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1860 := factory1859.GetProtocol(mbTrans1857)
    argvalue0 := security_model.NewAuthzToken()
    err1861 := argvalue0.Read(jsProt1860)
    if err1861 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1863 := flag.Arg(3)
    mbTrans1864 := thrift.NewTMemoryBufferLen(len(arg1863))
    defer mbTrans1864.Close()
    _, err1865 := mbTrans1864.WriteString(arg1863)
    if err1865 != nil {
      Usage()
      return
    }
    factory1866 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1867 := factory1866.GetProtocol(mbTrans1864)
    argvalue2 := workflow_data_model.NewWorkflowModel()
    err1868 := argvalue2.Read(jsProt1867)
    if err1868 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.RegisterWorkflow(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "updateWorkflow":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateWorkflow requires 3 args")
      flag.Usage()
    }
    arg1869 := flag.Arg(1)
    mbTrans1870 := thrift.NewTMemoryBufferLen(len(arg1869))
    defer mbTrans1870.Close()
    _, err1871 := mbTrans1870.WriteString(arg1869)
    if err1871 != nil {
      Usage()
      return
    }
    factory1872 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1873 := factory1872.GetProtocol(mbTrans1870)
    argvalue0 := security_model.NewAuthzToken()
    err1874 := argvalue0.Read(jsProt1873)
    if err1874 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1876 := flag.Arg(3)
    mbTrans1877 := thrift.NewTMemoryBufferLen(len(arg1876))
    defer mbTrans1877.Close()
    _, err1878 := mbTrans1877.WriteString(arg1876)
    if err1878 != nil {
      Usage()
      return
    }
    factory1879 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1880 := factory1879.GetProtocol(mbTrans1877)
    argvalue2 := workflow_data_model.NewWorkflowModel()
    err1881 := argvalue2.Read(jsProt1880)
    if err1881 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.UpdateWorkflow(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getWorkflowTemplateId":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetWorkflowTemplateId requires 2 args")
      flag.Usage()
    }
    arg1882 := flag.Arg(1)
    mbTrans1883 := thrift.NewTMemoryBufferLen(len(arg1882))
    defer mbTrans1883.Close()
    _, err1884 := mbTrans1883.WriteString(arg1882)
    if err1884 != nil {
      Usage()
      return
    }
    factory1885 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1886 := factory1885.GetProtocol(mbTrans1883)
    argvalue0 := security_model.NewAuthzToken()
    err1887 := argvalue0.Read(jsProt1886)
    if err1887 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetWorkflowTemplateId(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "isWorkflowExistWithName":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "IsWorkflowExistWithName requires 2 args")
      flag.Usage()
    }
    arg1889 := flag.Arg(1)
    mbTrans1890 := thrift.NewTMemoryBufferLen(len(arg1889))
    defer mbTrans1890.Close()
    _, err1891 := mbTrans1890.WriteString(arg1889)
    if err1891 != nil {
      Usage()
      return
    }
    factory1892 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1893 := factory1892.GetProtocol(mbTrans1890)
    argvalue0 := security_model.NewAuthzToken()
    err1894 := argvalue0.Read(jsProt1893)
    if err1894 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.IsWorkflowExistWithName(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "registerDataProduct":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RegisterDataProduct requires 2 args")
      flag.Usage()
    }
    arg1896 := flag.Arg(1)
    mbTrans1897 := thrift.NewTMemoryBufferLen(len(arg1896))
    defer mbTrans1897.Close()
    _, err1898 := mbTrans1897.WriteString(arg1896)
    if err1898 != nil {
      Usage()
      return
    }
    factory1899 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1900 := factory1899.GetProtocol(mbTrans1897)
    argvalue0 := security_model.NewAuthzToken()
    err1901 := argvalue0.Read(jsProt1900)
    if err1901 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1902 := flag.Arg(2)
    mbTrans1903 := thrift.NewTMemoryBufferLen(len(arg1902))
    defer mbTrans1903.Close()
    _, err1904 := mbTrans1903.WriteString(arg1902)
    if err1904 != nil {
      Usage()
      return
    }
    factory1905 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1906 := factory1905.GetProtocol(mbTrans1903)
    argvalue1 := replica_catalog_models.NewDataProductModel()
    err1907 := argvalue1.Read(jsProt1906)
    if err1907 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RegisterDataProduct(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getDataProduct":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetDataProduct requires 2 args")
      flag.Usage()
    }
    arg1908 := flag.Arg(1)
    mbTrans1909 := thrift.NewTMemoryBufferLen(len(arg1908))
    defer mbTrans1909.Close()
    _, err1910 := mbTrans1909.WriteString(arg1908)
    if err1910 != nil {
      Usage()
      return
    }
    factory1911 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1912 := factory1911.GetProtocol(mbTrans1909)
    argvalue0 := security_model.NewAuthzToken()
    err1913 := argvalue0.Read(jsProt1912)
    if err1913 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetDataProduct(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "registerReplicaLocation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RegisterReplicaLocation requires 2 args")
      flag.Usage()
    }
    arg1915 := flag.Arg(1)
    mbTrans1916 := thrift.NewTMemoryBufferLen(len(arg1915))
    defer mbTrans1916.Close()
    _, err1917 := mbTrans1916.WriteString(arg1915)
    if err1917 != nil {
      Usage()
      return
    }
    factory1918 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1919 := factory1918.GetProtocol(mbTrans1916)
    argvalue0 := security_model.NewAuthzToken()
    err1920 := argvalue0.Read(jsProt1919)
    if err1920 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1921 := flag.Arg(2)
    mbTrans1922 := thrift.NewTMemoryBufferLen(len(arg1921))
    defer mbTrans1922.Close()
    _, err1923 := mbTrans1922.WriteString(arg1921)
    if err1923 != nil {
      Usage()
      return
    }
    factory1924 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1925 := factory1924.GetProtocol(mbTrans1922)
    argvalue1 := replica_catalog_models.NewDataReplicaLocationModel()
    err1926 := argvalue1.Read(jsProt1925)
    if err1926 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RegisterReplicaLocation(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getParentDataProduct":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetParentDataProduct requires 2 args")
      flag.Usage()
    }
    arg1927 := flag.Arg(1)
    mbTrans1928 := thrift.NewTMemoryBufferLen(len(arg1927))
    defer mbTrans1928.Close()
    _, err1929 := mbTrans1928.WriteString(arg1927)
    if err1929 != nil {
      Usage()
      return
    }
    factory1930 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1931 := factory1930.GetProtocol(mbTrans1928)
    argvalue0 := security_model.NewAuthzToken()
    err1932 := argvalue0.Read(jsProt1931)
    if err1932 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetParentDataProduct(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getChildDataProducts":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetChildDataProducts requires 2 args")
      flag.Usage()
    }
    arg1934 := flag.Arg(1)
    mbTrans1935 := thrift.NewTMemoryBufferLen(len(arg1934))
    defer mbTrans1935.Close()
    _, err1936 := mbTrans1935.WriteString(arg1934)
    if err1936 != nil {
      Usage()
      return
    }
    factory1937 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1938 := factory1937.GetProtocol(mbTrans1935)
    argvalue0 := security_model.NewAuthzToken()
    err1939 := argvalue0.Read(jsProt1938)
    if err1939 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetChildDataProducts(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "shareResourceWithUsers":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "ShareResourceWithUsers requires 4 args")
      flag.Usage()
    }
    arg1941 := flag.Arg(1)
    mbTrans1942 := thrift.NewTMemoryBufferLen(len(arg1941))
    defer mbTrans1942.Close()
    _, err1943 := mbTrans1942.WriteString(arg1941)
    if err1943 != nil {
      Usage()
      return
    }
    factory1944 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1945 := factory1944.GetProtocol(mbTrans1942)
    argvalue0 := security_model.NewAuthzToken()
    err1946 := argvalue0.Read(jsProt1945)
    if err1946 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := airavata_api.ResourceType(tmp2)
    value2 := argvalue2
    arg1948 := flag.Arg(4)
    mbTrans1949 := thrift.NewTMemoryBufferLen(len(arg1948))
    defer mbTrans1949.Close()
    _, err1950 := mbTrans1949.WriteString(arg1948)
    if err1950 != nil { 
      Usage()
      return
    }
    factory1951 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1952 := factory1951.GetProtocol(mbTrans1949)
    containerStruct3 := airavata_api.NewAiravataShareResourceWithUsersArgs()
    err1953 := containerStruct3.ReadField4(jsProt1952)
    if err1953 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.UserPermissionList
    value3 := argvalue3
    fmt.Print(client.ShareResourceWithUsers(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "revokeSharingOfResourceFromUsers":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "RevokeSharingOfResourceFromUsers requires 4 args")
      flag.Usage()
    }
    arg1954 := flag.Arg(1)
    mbTrans1955 := thrift.NewTMemoryBufferLen(len(arg1954))
    defer mbTrans1955.Close()
    _, err1956 := mbTrans1955.WriteString(arg1954)
    if err1956 != nil {
      Usage()
      return
    }
    factory1957 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1958 := factory1957.GetProtocol(mbTrans1955)
    argvalue0 := security_model.NewAuthzToken()
    err1959 := argvalue0.Read(jsProt1958)
    if err1959 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := airavata_api.ResourceType(tmp2)
    value2 := argvalue2
    arg1961 := flag.Arg(4)
    mbTrans1962 := thrift.NewTMemoryBufferLen(len(arg1961))
    defer mbTrans1962.Close()
    _, err1963 := mbTrans1962.WriteString(arg1961)
    if err1963 != nil { 
      Usage()
      return
    }
    factory1964 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1965 := factory1964.GetProtocol(mbTrans1962)
    containerStruct3 := airavata_api.NewAiravataRevokeSharingOfResourceFromUsersArgs()
    err1966 := containerStruct3.ReadField4(jsProt1965)
    if err1966 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.UserPermissionList
    value3 := argvalue3
    fmt.Print(client.RevokeSharingOfResourceFromUsers(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getAllAccessibleUsers":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetAllAccessibleUsers requires 4 args")
      flag.Usage()
    }
    arg1967 := flag.Arg(1)
    mbTrans1968 := thrift.NewTMemoryBufferLen(len(arg1967))
    defer mbTrans1968.Close()
    _, err1969 := mbTrans1968.WriteString(arg1967)
    if err1969 != nil {
      Usage()
      return
    }
    factory1970 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1971 := factory1970.GetProtocol(mbTrans1968)
    argvalue0 := security_model.NewAuthzToken()
    err1972 := argvalue0.Read(jsProt1971)
    if err1972 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := airavata_api.ResourceType(tmp2)
    value2 := argvalue2
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := airavata_api.ResourcePermissionType(tmp3)
    value3 := argvalue3
    fmt.Print(client.GetAllAccessibleUsers(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "createGroup":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CreateGroup requires 2 args")
      flag.Usage()
    }
    arg1974 := flag.Arg(1)
    mbTrans1975 := thrift.NewTMemoryBufferLen(len(arg1974))
    defer mbTrans1975.Close()
    _, err1976 := mbTrans1975.WriteString(arg1974)
    if err1976 != nil {
      Usage()
      return
    }
    factory1977 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1978 := factory1977.GetProtocol(mbTrans1975)
    argvalue0 := security_model.NewAuthzToken()
    err1979 := argvalue0.Read(jsProt1978)
    if err1979 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1980 := flag.Arg(2)
    mbTrans1981 := thrift.NewTMemoryBufferLen(len(arg1980))
    defer mbTrans1981.Close()
    _, err1982 := mbTrans1981.WriteString(arg1980)
    if err1982 != nil {
      Usage()
      return
    }
    factory1983 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1984 := factory1983.GetProtocol(mbTrans1981)
    argvalue1 := group_manager_model.NewGroupModel()
    err1985 := argvalue1.Read(jsProt1984)
    if err1985 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.CreateGroup(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateGroup":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateGroup requires 2 args")
      flag.Usage()
    }
    arg1986 := flag.Arg(1)
    mbTrans1987 := thrift.NewTMemoryBufferLen(len(arg1986))
    defer mbTrans1987.Close()
    _, err1988 := mbTrans1987.WriteString(arg1986)
    if err1988 != nil {
      Usage()
      return
    }
    factory1989 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1990 := factory1989.GetProtocol(mbTrans1987)
    argvalue0 := security_model.NewAuthzToken()
    err1991 := argvalue0.Read(jsProt1990)
    if err1991 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1992 := flag.Arg(2)
    mbTrans1993 := thrift.NewTMemoryBufferLen(len(arg1992))
    defer mbTrans1993.Close()
    _, err1994 := mbTrans1993.WriteString(arg1992)
    if err1994 != nil {
      Usage()
      return
    }
    factory1995 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1996 := factory1995.GetProtocol(mbTrans1993)
    argvalue1 := group_manager_model.NewGroupModel()
    err1997 := argvalue1.Read(jsProt1996)
    if err1997 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateGroup(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "deleteGroup":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DeleteGroup requires 3 args")
      flag.Usage()
    }
    arg1998 := flag.Arg(1)
    mbTrans1999 := thrift.NewTMemoryBufferLen(len(arg1998))
    defer mbTrans1999.Close()
    _, err2000 := mbTrans1999.WriteString(arg1998)
    if err2000 != nil {
      Usage()
      return
    }
    factory2001 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2002 := factory2001.GetProtocol(mbTrans1999)
    argvalue0 := security_model.NewAuthzToken()
    err2003 := argvalue0.Read(jsProt2002)
    if err2003 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.DeleteGroup(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getGroup":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetGroup requires 2 args")
      flag.Usage()
    }
    arg2006 := flag.Arg(1)
    mbTrans2007 := thrift.NewTMemoryBufferLen(len(arg2006))
    defer mbTrans2007.Close()
    _, err2008 := mbTrans2007.WriteString(arg2006)
    if err2008 != nil {
      Usage()
      return
    }
    factory2009 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2010 := factory2009.GetProtocol(mbTrans2007)
    argvalue0 := security_model.NewAuthzToken()
    err2011 := argvalue0.Read(jsProt2010)
    if err2011 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetGroup(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getAllGroupsUserBelongs":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAllGroupsUserBelongs requires 2 args")
      flag.Usage()
    }
    arg2013 := flag.Arg(1)
    mbTrans2014 := thrift.NewTMemoryBufferLen(len(arg2013))
    defer mbTrans2014.Close()
    _, err2015 := mbTrans2014.WriteString(arg2013)
    if err2015 != nil {
      Usage()
      return
    }
    factory2016 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2017 := factory2016.GetProtocol(mbTrans2014)
    argvalue0 := security_model.NewAuthzToken()
    err2018 := argvalue0.Read(jsProt2017)
    if err2018 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetAllGroupsUserBelongs(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
