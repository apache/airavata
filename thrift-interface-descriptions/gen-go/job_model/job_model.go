// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package job_model

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"status_models"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = status_models.GoUnusedProtection__
// Attributes:
//  - JobId
//  - TaskId
//  - ProcessId
//  - JobDescription
//  - CreationTime
//  - JobStatuses
//  - ComputeResourceConsumed
//  - JobName
//  - WorkingDir
//  - StdOut
//  - StdErr
//  - ExitCode
type JobModel struct {
  JobId string `thrift:"jobId,1,required" db:"jobId" json:"jobId"`
  TaskId string `thrift:"taskId,2,required" db:"taskId" json:"taskId"`
  ProcessId string `thrift:"processId,3,required" db:"processId" json:"processId"`
  JobDescription string `thrift:"jobDescription,4,required" db:"jobDescription" json:"jobDescription"`
  CreationTime *int64 `thrift:"creationTime,5" db:"creationTime" json:"creationTime,omitempty"`
  JobStatuses []*status_models.JobStatus `thrift:"jobStatuses,6" db:"jobStatuses" json:"jobStatuses,omitempty"`
  ComputeResourceConsumed *string `thrift:"computeResourceConsumed,7" db:"computeResourceConsumed" json:"computeResourceConsumed,omitempty"`
  JobName *string `thrift:"jobName,8" db:"jobName" json:"jobName,omitempty"`
  WorkingDir *string `thrift:"workingDir,9" db:"workingDir" json:"workingDir,omitempty"`
  StdOut *string `thrift:"stdOut,10" db:"stdOut" json:"stdOut,omitempty"`
  StdErr *string `thrift:"stdErr,11" db:"stdErr" json:"stdErr,omitempty"`
  ExitCode *int32 `thrift:"exitCode,12" db:"exitCode" json:"exitCode,omitempty"`
}

func NewJobModel() *JobModel {
  return &JobModel{}
}


func (p *JobModel) GetJobId() string {
  return p.JobId
}

func (p *JobModel) GetTaskId() string {
  return p.TaskId
}

func (p *JobModel) GetProcessId() string {
  return p.ProcessId
}

func (p *JobModel) GetJobDescription() string {
  return p.JobDescription
}
var JobModel_CreationTime_DEFAULT int64
func (p *JobModel) GetCreationTime() int64 {
  if !p.IsSetCreationTime() {
    return JobModel_CreationTime_DEFAULT
  }
return *p.CreationTime
}
var JobModel_JobStatuses_DEFAULT []*status_models.JobStatus

func (p *JobModel) GetJobStatuses() []*status_models.JobStatus {
  return p.JobStatuses
}
var JobModel_ComputeResourceConsumed_DEFAULT string
func (p *JobModel) GetComputeResourceConsumed() string {
  if !p.IsSetComputeResourceConsumed() {
    return JobModel_ComputeResourceConsumed_DEFAULT
  }
return *p.ComputeResourceConsumed
}
var JobModel_JobName_DEFAULT string
func (p *JobModel) GetJobName() string {
  if !p.IsSetJobName() {
    return JobModel_JobName_DEFAULT
  }
return *p.JobName
}
var JobModel_WorkingDir_DEFAULT string
func (p *JobModel) GetWorkingDir() string {
  if !p.IsSetWorkingDir() {
    return JobModel_WorkingDir_DEFAULT
  }
return *p.WorkingDir
}
var JobModel_StdOut_DEFAULT string
func (p *JobModel) GetStdOut() string {
  if !p.IsSetStdOut() {
    return JobModel_StdOut_DEFAULT
  }
return *p.StdOut
}
var JobModel_StdErr_DEFAULT string
func (p *JobModel) GetStdErr() string {
  if !p.IsSetStdErr() {
    return JobModel_StdErr_DEFAULT
  }
return *p.StdErr
}
var JobModel_ExitCode_DEFAULT int32
func (p *JobModel) GetExitCode() int32 {
  if !p.IsSetExitCode() {
    return JobModel_ExitCode_DEFAULT
  }
return *p.ExitCode
}
func (p *JobModel) IsSetCreationTime() bool {
  return p.CreationTime != nil
}

func (p *JobModel) IsSetJobStatuses() bool {
  return p.JobStatuses != nil
}

func (p *JobModel) IsSetComputeResourceConsumed() bool {
  return p.ComputeResourceConsumed != nil
}

func (p *JobModel) IsSetJobName() bool {
  return p.JobName != nil
}

func (p *JobModel) IsSetWorkingDir() bool {
  return p.WorkingDir != nil
}

func (p *JobModel) IsSetStdOut() bool {
  return p.StdOut != nil
}

func (p *JobModel) IsSetStdErr() bool {
  return p.StdErr != nil
}

func (p *JobModel) IsSetExitCode() bool {
  return p.ExitCode != nil
}

func (p *JobModel) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetJobId bool = false;
  var issetTaskId bool = false;
  var issetProcessId bool = false;
  var issetJobDescription bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetJobId = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetTaskId = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProcessId = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetJobDescription = true
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetJobId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field JobId is not set"));
  }
  if !issetTaskId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TaskId is not set"));
  }
  if !issetProcessId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProcessId is not set"));
  }
  if !issetJobDescription{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field JobDescription is not set"));
  }
  return nil
}

func (p *JobModel)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.JobId = v
}
  return nil
}

func (p *JobModel)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TaskId = v
}
  return nil
}

func (p *JobModel)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ProcessId = v
}
  return nil
}

func (p *JobModel)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.JobDescription = v
}
  return nil
}

func (p *JobModel)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CreationTime = &v
}
  return nil
}

func (p *JobModel)  ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*status_models.JobStatus, 0, size)
  p.JobStatuses =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &status_models.JobStatus{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.JobStatuses = append(p.JobStatuses, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *JobModel)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.ComputeResourceConsumed = &v
}
  return nil
}

func (p *JobModel)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.JobName = &v
}
  return nil
}

func (p *JobModel)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.WorkingDir = &v
}
  return nil
}

func (p *JobModel)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.StdOut = &v
}
  return nil
}

func (p *JobModel)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.StdErr = &v
}
  return nil
}

func (p *JobModel)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.ExitCode = &v
}
  return nil
}

func (p *JobModel) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("JobModel"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JobModel) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("jobId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:jobId: ", p), err) }
  if err := oprot.WriteString(string(p.JobId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.jobId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:jobId: ", p), err) }
  return err
}

func (p *JobModel) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("taskId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:taskId: ", p), err) }
  if err := oprot.WriteString(string(p.TaskId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.taskId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:taskId: ", p), err) }
  return err
}

func (p *JobModel) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("processId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:processId: ", p), err) }
  if err := oprot.WriteString(string(p.ProcessId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.processId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:processId: ", p), err) }
  return err
}

func (p *JobModel) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("jobDescription", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:jobDescription: ", p), err) }
  if err := oprot.WriteString(string(p.JobDescription)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.jobDescription (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:jobDescription: ", p), err) }
  return err
}

func (p *JobModel) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetCreationTime() {
    if err := oprot.WriteFieldBegin("creationTime", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:creationTime: ", p), err) }
    if err := oprot.WriteI64(int64(*p.CreationTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.creationTime (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:creationTime: ", p), err) }
  }
  return err
}

func (p *JobModel) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetJobStatuses() {
    if err := oprot.WriteFieldBegin("jobStatuses", thrift.LIST, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:jobStatuses: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.JobStatuses)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.JobStatuses {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:jobStatuses: ", p), err) }
  }
  return err
}

func (p *JobModel) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetComputeResourceConsumed() {
    if err := oprot.WriteFieldBegin("computeResourceConsumed", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:computeResourceConsumed: ", p), err) }
    if err := oprot.WriteString(string(*p.ComputeResourceConsumed)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.computeResourceConsumed (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:computeResourceConsumed: ", p), err) }
  }
  return err
}

func (p *JobModel) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetJobName() {
    if err := oprot.WriteFieldBegin("jobName", thrift.STRING, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:jobName: ", p), err) }
    if err := oprot.WriteString(string(*p.JobName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jobName (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:jobName: ", p), err) }
  }
  return err
}

func (p *JobModel) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetWorkingDir() {
    if err := oprot.WriteFieldBegin("workingDir", thrift.STRING, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:workingDir: ", p), err) }
    if err := oprot.WriteString(string(*p.WorkingDir)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.workingDir (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:workingDir: ", p), err) }
  }
  return err
}

func (p *JobModel) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetStdOut() {
    if err := oprot.WriteFieldBegin("stdOut", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:stdOut: ", p), err) }
    if err := oprot.WriteString(string(*p.StdOut)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.stdOut (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:stdOut: ", p), err) }
  }
  return err
}

func (p *JobModel) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetStdErr() {
    if err := oprot.WriteFieldBegin("stdErr", thrift.STRING, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:stdErr: ", p), err) }
    if err := oprot.WriteString(string(*p.StdErr)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.stdErr (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:stdErr: ", p), err) }
  }
  return err
}

func (p *JobModel) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetExitCode() {
    if err := oprot.WriteFieldBegin("exitCode", thrift.I32, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:exitCode: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ExitCode)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.exitCode (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:exitCode: ", p), err) }
  }
  return err
}

func (p *JobModel) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JobModel(%+v)", *p)
}

