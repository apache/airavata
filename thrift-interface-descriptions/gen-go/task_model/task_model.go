// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package task_model

import (
	"bytes"
	"reflect"
	"database/sql/driver"
	"errors"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"airavata_commons"
	"compute_resource_model"
	"data_movement_models"
	"application_io_models"
	"status_models"
	"job_model"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = airavata_commons.GoUnusedProtection__
var _ = compute_resource_model.GoUnusedProtection__
var _ = data_movement_models.GoUnusedProtection__
var _ = application_io_models.GoUnusedProtection__
var _ = status_models.GoUnusedProtection__
var _ = job_model.GoUnusedProtection__
//TaskTypes: An enumerated list of TaskTypes. Task being generic, the task type will provide the concrete interpretation.
//
type TaskTypes int64
const (
  TaskTypes_ENV_SETUP TaskTypes = 0
  TaskTypes_DATA_STAGING TaskTypes = 1
  TaskTypes_JOB_SUBMISSION TaskTypes = 2
  TaskTypes_ENV_CLEANUP TaskTypes = 3
  TaskTypes_MONITORING TaskTypes = 4
  TaskTypes_OUTPUT_FETCHING TaskTypes = 5
)

func (p TaskTypes) String() string {
  switch p {
  case TaskTypes_ENV_SETUP: return "ENV_SETUP"
  case TaskTypes_DATA_STAGING: return "DATA_STAGING"
  case TaskTypes_JOB_SUBMISSION: return "JOB_SUBMISSION"
  case TaskTypes_ENV_CLEANUP: return "ENV_CLEANUP"
  case TaskTypes_MONITORING: return "MONITORING"
  case TaskTypes_OUTPUT_FETCHING: return "OUTPUT_FETCHING"
  }
  return "<UNSET>"
}

func TaskTypesFromString(s string) (TaskTypes, error) {
  switch s {
  case "ENV_SETUP": return TaskTypes_ENV_SETUP, nil 
  case "DATA_STAGING": return TaskTypes_DATA_STAGING, nil 
  case "JOB_SUBMISSION": return TaskTypes_JOB_SUBMISSION, nil 
  case "ENV_CLEANUP": return TaskTypes_ENV_CLEANUP, nil 
  case "MONITORING": return TaskTypes_MONITORING, nil 
  case "OUTPUT_FETCHING": return TaskTypes_OUTPUT_FETCHING, nil 
  }
  return TaskTypes(0), fmt.Errorf("not a valid TaskTypes string")
}


func TaskTypesPtr(v TaskTypes) *TaskTypes { return &v }

func (p TaskTypes) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TaskTypes) UnmarshalText(text []byte) error {
q, err := TaskTypesFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TaskTypes) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TaskTypes(v)
return nil
}

func (p * TaskTypes) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//DataStagingTaskModel: A structure holding the data staging task details.
//
//Source and Destination locations includes standard representation of protocol, host, port and path
//  A friendly description of the task, usally used to communicate information to users.
//
type DataStageType int64
const (
  DataStageType_INPUT DataStageType = 0
  DataStageType_OUPUT DataStageType = 1
  DataStageType_ARCHIVE_OUTPUT DataStageType = 2
)

func (p DataStageType) String() string {
  switch p {
  case DataStageType_INPUT: return "INPUT"
  case DataStageType_OUPUT: return "OUPUT"
  case DataStageType_ARCHIVE_OUTPUT: return "ARCHIVE_OUTPUT"
  }
  return "<UNSET>"
}

func DataStageTypeFromString(s string) (DataStageType, error) {
  switch s {
  case "INPUT": return DataStageType_INPUT, nil 
  case "OUPUT": return DataStageType_OUPUT, nil 
  case "ARCHIVE_OUTPUT": return DataStageType_ARCHIVE_OUTPUT, nil 
  }
  return DataStageType(0), fmt.Errorf("not a valid DataStageType string")
}


func DataStageTypePtr(v DataStageType) *DataStageType { return &v }

func (p DataStageType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *DataStageType) UnmarshalText(text []byte) error {
q, err := DataStageTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *DataStageType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = DataStageType(v)
return nil
}

func (p * DataStageType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// TaskModel: A structure holding the generic task details.
// 
// taskDetail:
//   A friendly description of the task, usally used to communicate information to users.
// 
// subTaskModel:
//   A generic byte object for the Task developer to store internal serialized data into registry catalogs.
// 
// Attributes:
//  - TaskId
//  - TaskType
//  - ParentProcessId
//  - CreationTime
//  - LastUpdateTime
//  - TaskStatuses
//  - TaskDetail
//  - SubTaskModel
//  - TaskErrors
//  - Jobs
type TaskModel struct {
  TaskId string `thrift:"taskId,1,required" db:"taskId" json:"taskId"`
  TaskType TaskTypes `thrift:"taskType,2,required" db:"taskType" json:"taskType"`
  ParentProcessId string `thrift:"parentProcessId,3,required" db:"parentProcessId" json:"parentProcessId"`
  CreationTime int64 `thrift:"creationTime,4,required" db:"creationTime" json:"creationTime"`
  LastUpdateTime int64 `thrift:"lastUpdateTime,5,required" db:"lastUpdateTime" json:"lastUpdateTime"`
  TaskStatuses []*status_models.TaskStatus `thrift:"taskStatuses,6,required" db:"taskStatuses" json:"taskStatuses"`
  TaskDetail *string `thrift:"taskDetail,7" db:"taskDetail" json:"taskDetail,omitempty"`
  SubTaskModel []byte `thrift:"subTaskModel,8" db:"subTaskModel" json:"subTaskModel,omitempty"`
  TaskErrors []*airavata_commons.ErrorModel `thrift:"taskErrors,9" db:"taskErrors" json:"taskErrors,omitempty"`
  Jobs []*job_model.JobModel `thrift:"jobs,10" db:"jobs" json:"jobs,omitempty"`
}

func NewTaskModel() *TaskModel {
  return &TaskModel{
TaskId: "DO_NOT_SET_AT_CLIENTS",
}
}


func (p *TaskModel) GetTaskId() string {
  return p.TaskId
}

func (p *TaskModel) GetTaskType() TaskTypes {
  return p.TaskType
}

func (p *TaskModel) GetParentProcessId() string {
  return p.ParentProcessId
}

func (p *TaskModel) GetCreationTime() int64 {
  return p.CreationTime
}

func (p *TaskModel) GetLastUpdateTime() int64 {
  return p.LastUpdateTime
}

func (p *TaskModel) GetTaskStatuses() []*status_models.TaskStatus {
  return p.TaskStatuses
}
var TaskModel_TaskDetail_DEFAULT string
func (p *TaskModel) GetTaskDetail() string {
  if !p.IsSetTaskDetail() {
    return TaskModel_TaskDetail_DEFAULT
  }
return *p.TaskDetail
}
var TaskModel_SubTaskModel_DEFAULT []byte

func (p *TaskModel) GetSubTaskModel() []byte {
  return p.SubTaskModel
}
var TaskModel_TaskErrors_DEFAULT []*airavata_commons.ErrorModel

func (p *TaskModel) GetTaskErrors() []*airavata_commons.ErrorModel {
  return p.TaskErrors
}
var TaskModel_Jobs_DEFAULT []*job_model.JobModel

func (p *TaskModel) GetJobs() []*job_model.JobModel {
  return p.Jobs
}
func (p *TaskModel) IsSetTaskDetail() bool {
  return p.TaskDetail != nil
}

func (p *TaskModel) IsSetSubTaskModel() bool {
  return p.SubTaskModel != nil
}

func (p *TaskModel) IsSetTaskErrors() bool {
  return p.TaskErrors != nil
}

func (p *TaskModel) IsSetJobs() bool {
  return p.Jobs != nil
}

func (p *TaskModel) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTaskId bool = false;
  var issetTaskType bool = false;
  var issetParentProcessId bool = false;
  var issetCreationTime bool = false;
  var issetLastUpdateTime bool = false;
  var issetTaskStatuses bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetTaskId = true
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetTaskType = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetParentProcessId = true
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetCreationTime = true
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetLastUpdateTime = true
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetTaskStatuses = true
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTaskId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TaskId is not set"));
  }
  if !issetTaskType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TaskType is not set"));
  }
  if !issetParentProcessId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ParentProcessId is not set"));
  }
  if !issetCreationTime{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CreationTime is not set"));
  }
  if !issetLastUpdateTime{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LastUpdateTime is not set"));
  }
  if !issetTaskStatuses{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TaskStatuses is not set"));
  }
  return nil
}

func (p *TaskModel)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TaskId = v
}
  return nil
}

func (p *TaskModel)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TaskTypes(v)
  p.TaskType = temp
}
  return nil
}

func (p *TaskModel)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ParentProcessId = v
}
  return nil
}

func (p *TaskModel)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.CreationTime = v
}
  return nil
}

func (p *TaskModel)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.LastUpdateTime = v
}
  return nil
}

func (p *TaskModel)  ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*status_models.TaskStatus, 0, size)
  p.TaskStatuses =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &status_models.TaskStatus{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.TaskStatuses = append(p.TaskStatuses, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TaskModel)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.TaskDetail = &v
}
  return nil
}

func (p *TaskModel)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.SubTaskModel = v
}
  return nil
}

func (p *TaskModel)  ReadField9(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*airavata_commons.ErrorModel, 0, size)
  p.TaskErrors =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &airavata_commons.ErrorModel{
    ErrorId: "DO_NOT_SET_AT_CLIENTS",
}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.TaskErrors = append(p.TaskErrors, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TaskModel)  ReadField10(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*job_model.JobModel, 0, size)
  p.Jobs =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &job_model.JobModel{}
    if err := _elem2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.Jobs = append(p.Jobs, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TaskModel) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TaskModel"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TaskModel) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("taskId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:taskId: ", p), err) }
  if err := oprot.WriteString(string(p.TaskId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.taskId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:taskId: ", p), err) }
  return err
}

func (p *TaskModel) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("taskType", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:taskType: ", p), err) }
  if err := oprot.WriteI32(int32(p.TaskType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.taskType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:taskType: ", p), err) }
  return err
}

func (p *TaskModel) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("parentProcessId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:parentProcessId: ", p), err) }
  if err := oprot.WriteString(string(p.ParentProcessId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.parentProcessId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:parentProcessId: ", p), err) }
  return err
}

func (p *TaskModel) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("creationTime", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:creationTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreationTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.creationTime (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:creationTime: ", p), err) }
  return err
}

func (p *TaskModel) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lastUpdateTime", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:lastUpdateTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.LastUpdateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastUpdateTime (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:lastUpdateTime: ", p), err) }
  return err
}

func (p *TaskModel) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("taskStatuses", thrift.LIST, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:taskStatuses: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TaskStatuses)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.TaskStatuses {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:taskStatuses: ", p), err) }
  return err
}

func (p *TaskModel) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetTaskDetail() {
    if err := oprot.WriteFieldBegin("taskDetail", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:taskDetail: ", p), err) }
    if err := oprot.WriteString(string(*p.TaskDetail)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.taskDetail (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:taskDetail: ", p), err) }
  }
  return err
}

func (p *TaskModel) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetSubTaskModel() {
    if err := oprot.WriteFieldBegin("subTaskModel", thrift.STRING, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:subTaskModel: ", p), err) }
    if err := oprot.WriteBinary(p.SubTaskModel); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.subTaskModel (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:subTaskModel: ", p), err) }
  }
  return err
}

func (p *TaskModel) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetTaskErrors() {
    if err := oprot.WriteFieldBegin("taskErrors", thrift.LIST, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:taskErrors: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TaskErrors)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.TaskErrors {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:taskErrors: ", p), err) }
  }
  return err
}

func (p *TaskModel) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetJobs() {
    if err := oprot.WriteFieldBegin("jobs", thrift.LIST, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:jobs: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Jobs)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Jobs {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:jobs: ", p), err) }
  }
  return err
}

func (p *TaskModel) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TaskModel(%+v)", *p)
}

// Attributes:
//  - Source
//  - Destination
//  - Type
//  - TransferStartTime
//  - TransferEndTime
//  - TransferRate
//  - ProcessInput
//  - ProcessOutput
type DataStagingTaskModel struct {
  Source string `thrift:"source,1,required" db:"source" json:"source"`
  Destination string `thrift:"destination,2,required" db:"destination" json:"destination"`
  Type DataStageType `thrift:"type,3,required" db:"type" json:"type"`
  TransferStartTime *int64 `thrift:"transferStartTime,4" db:"transferStartTime" json:"transferStartTime,omitempty"`
  TransferEndTime *int64 `thrift:"transferEndTime,5" db:"transferEndTime" json:"transferEndTime,omitempty"`
  TransferRate *string `thrift:"transferRate,6" db:"transferRate" json:"transferRate,omitempty"`
  ProcessInput *application_io_models.InputDataObjectType `thrift:"processInput,7" db:"processInput" json:"processInput,omitempty"`
  ProcessOutput *application_io_models.OutputDataObjectType `thrift:"processOutput,8" db:"processOutput" json:"processOutput,omitempty"`
}

func NewDataStagingTaskModel() *DataStagingTaskModel {
  return &DataStagingTaskModel{}
}


func (p *DataStagingTaskModel) GetSource() string {
  return p.Source
}

func (p *DataStagingTaskModel) GetDestination() string {
  return p.Destination
}

func (p *DataStagingTaskModel) GetType() DataStageType {
  return p.Type
}
var DataStagingTaskModel_TransferStartTime_DEFAULT int64
func (p *DataStagingTaskModel) GetTransferStartTime() int64 {
  if !p.IsSetTransferStartTime() {
    return DataStagingTaskModel_TransferStartTime_DEFAULT
  }
return *p.TransferStartTime
}
var DataStagingTaskModel_TransferEndTime_DEFAULT int64
func (p *DataStagingTaskModel) GetTransferEndTime() int64 {
  if !p.IsSetTransferEndTime() {
    return DataStagingTaskModel_TransferEndTime_DEFAULT
  }
return *p.TransferEndTime
}
var DataStagingTaskModel_TransferRate_DEFAULT string
func (p *DataStagingTaskModel) GetTransferRate() string {
  if !p.IsSetTransferRate() {
    return DataStagingTaskModel_TransferRate_DEFAULT
  }
return *p.TransferRate
}
var DataStagingTaskModel_ProcessInput_DEFAULT *application_io_models.InputDataObjectType
func (p *DataStagingTaskModel) GetProcessInput() *application_io_models.InputDataObjectType {
  if !p.IsSetProcessInput() {
    return DataStagingTaskModel_ProcessInput_DEFAULT
  }
return p.ProcessInput
}
var DataStagingTaskModel_ProcessOutput_DEFAULT *application_io_models.OutputDataObjectType
func (p *DataStagingTaskModel) GetProcessOutput() *application_io_models.OutputDataObjectType {
  if !p.IsSetProcessOutput() {
    return DataStagingTaskModel_ProcessOutput_DEFAULT
  }
return p.ProcessOutput
}
func (p *DataStagingTaskModel) IsSetTransferStartTime() bool {
  return p.TransferStartTime != nil
}

func (p *DataStagingTaskModel) IsSetTransferEndTime() bool {
  return p.TransferEndTime != nil
}

func (p *DataStagingTaskModel) IsSetTransferRate() bool {
  return p.TransferRate != nil
}

func (p *DataStagingTaskModel) IsSetProcessInput() bool {
  return p.ProcessInput != nil
}

func (p *DataStagingTaskModel) IsSetProcessOutput() bool {
  return p.ProcessOutput != nil
}

func (p *DataStagingTaskModel) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetSource bool = false;
  var issetDestination bool = false;
  var issetType bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetSource = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetDestination = true
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetType = true
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetSource{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Source is not set"));
  }
  if !issetDestination{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Destination is not set"));
  }
  if !issetType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"));
  }
  return nil
}

func (p *DataStagingTaskModel)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Source = v
}
  return nil
}

func (p *DataStagingTaskModel)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Destination = v
}
  return nil
}

func (p *DataStagingTaskModel)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := DataStageType(v)
  p.Type = temp
}
  return nil
}

func (p *DataStagingTaskModel)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.TransferStartTime = &v
}
  return nil
}

func (p *DataStagingTaskModel)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.TransferEndTime = &v
}
  return nil
}

func (p *DataStagingTaskModel)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.TransferRate = &v
}
  return nil
}

func (p *DataStagingTaskModel)  ReadField7(iprot thrift.TProtocol) error {
  p.ProcessInput = &application_io_models.InputDataObjectType{}
  if err := p.ProcessInput.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ProcessInput), err)
  }
  return nil
}

func (p *DataStagingTaskModel)  ReadField8(iprot thrift.TProtocol) error {
  p.ProcessOutput = &application_io_models.OutputDataObjectType{}
  if err := p.ProcessOutput.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ProcessOutput), err)
  }
  return nil
}

func (p *DataStagingTaskModel) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DataStagingTaskModel"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DataStagingTaskModel) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("source", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:source: ", p), err) }
  if err := oprot.WriteString(string(p.Source)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.source (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:source: ", p), err) }
  return err
}

func (p *DataStagingTaskModel) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("destination", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:destination: ", p), err) }
  if err := oprot.WriteString(string(p.Destination)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.destination (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:destination: ", p), err) }
  return err
}

func (p *DataStagingTaskModel) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  return err
}

func (p *DataStagingTaskModel) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetTransferStartTime() {
    if err := oprot.WriteFieldBegin("transferStartTime", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:transferStartTime: ", p), err) }
    if err := oprot.WriteI64(int64(*p.TransferStartTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.transferStartTime (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:transferStartTime: ", p), err) }
  }
  return err
}

func (p *DataStagingTaskModel) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetTransferEndTime() {
    if err := oprot.WriteFieldBegin("transferEndTime", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:transferEndTime: ", p), err) }
    if err := oprot.WriteI64(int64(*p.TransferEndTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.transferEndTime (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:transferEndTime: ", p), err) }
  }
  return err
}

func (p *DataStagingTaskModel) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetTransferRate() {
    if err := oprot.WriteFieldBegin("transferRate", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:transferRate: ", p), err) }
    if err := oprot.WriteString(string(*p.TransferRate)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.transferRate (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:transferRate: ", p), err) }
  }
  return err
}

func (p *DataStagingTaskModel) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetProcessInput() {
    if err := oprot.WriteFieldBegin("processInput", thrift.STRUCT, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:processInput: ", p), err) }
    if err := p.ProcessInput.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ProcessInput), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:processInput: ", p), err) }
  }
  return err
}

func (p *DataStagingTaskModel) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetProcessOutput() {
    if err := oprot.WriteFieldBegin("processOutput", thrift.STRUCT, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:processOutput: ", p), err) }
    if err := p.ProcessOutput.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ProcessOutput), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:processOutput: ", p), err) }
  }
  return err
}

func (p *DataStagingTaskModel) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DataStagingTaskModel(%+v)", *p)
}

// EnvironmentSetupTaskModel: A structure holding the environment creation task details
// 
// 
// Attributes:
//  - Location
//  - Protocol
type EnvironmentSetupTaskModel struct {
  Location string `thrift:"location,1,required" db:"location" json:"location"`
  Protocol data_movement_models.SecurityProtocol `thrift:"protocol,2,required" db:"protocol" json:"protocol"`
}

func NewEnvironmentSetupTaskModel() *EnvironmentSetupTaskModel {
  return &EnvironmentSetupTaskModel{}
}


func (p *EnvironmentSetupTaskModel) GetLocation() string {
  return p.Location
}

func (p *EnvironmentSetupTaskModel) GetProtocol() data_movement_models.SecurityProtocol {
  return p.Protocol
}
func (p *EnvironmentSetupTaskModel) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetLocation bool = false;
  var issetProtocol bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetLocation = true
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProtocol = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetLocation{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Location is not set"));
  }
  if !issetProtocol{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Protocol is not set"));
  }
  return nil
}

func (p *EnvironmentSetupTaskModel)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Location = v
}
  return nil
}

func (p *EnvironmentSetupTaskModel)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := data_movement_models.SecurityProtocol(v)
  p.Protocol = temp
}
  return nil
}

func (p *EnvironmentSetupTaskModel) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("EnvironmentSetupTaskModel"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EnvironmentSetupTaskModel) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("location", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:location: ", p), err) }
  if err := oprot.WriteString(string(p.Location)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.location (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:location: ", p), err) }
  return err
}

func (p *EnvironmentSetupTaskModel) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("protocol", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:protocol: ", p), err) }
  if err := oprot.WriteI32(int32(p.Protocol)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.protocol (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:protocol: ", p), err) }
  return err
}

func (p *EnvironmentSetupTaskModel) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EnvironmentSetupTaskModel(%+v)", *p)
}

// Attributes:
//  - JobSubmissionProtocol
//  - MonitorMode
//  - WallTime
type JobSubmissionTaskModel struct {
  JobSubmissionProtocol compute_resource_model.JobSubmissionProtocol `thrift:"jobSubmissionProtocol,1,required" db:"jobSubmissionProtocol" json:"jobSubmissionProtocol"`
  MonitorMode compute_resource_model.MonitorMode `thrift:"monitorMode,2,required" db:"monitorMode" json:"monitorMode"`
  WallTime *int32 `thrift:"wallTime,3" db:"wallTime" json:"wallTime,omitempty"`
}

func NewJobSubmissionTaskModel() *JobSubmissionTaskModel {
  return &JobSubmissionTaskModel{}
}


func (p *JobSubmissionTaskModel) GetJobSubmissionProtocol() compute_resource_model.JobSubmissionProtocol {
  return p.JobSubmissionProtocol
}

func (p *JobSubmissionTaskModel) GetMonitorMode() compute_resource_model.MonitorMode {
  return p.MonitorMode
}
var JobSubmissionTaskModel_WallTime_DEFAULT int32
func (p *JobSubmissionTaskModel) GetWallTime() int32 {
  if !p.IsSetWallTime() {
    return JobSubmissionTaskModel_WallTime_DEFAULT
  }
return *p.WallTime
}
func (p *JobSubmissionTaskModel) IsSetWallTime() bool {
  return p.WallTime != nil
}

func (p *JobSubmissionTaskModel) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetJobSubmissionProtocol bool = false;
  var issetMonitorMode bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetJobSubmissionProtocol = true
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetMonitorMode = true
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetJobSubmissionProtocol{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field JobSubmissionProtocol is not set"));
  }
  if !issetMonitorMode{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MonitorMode is not set"));
  }
  return nil
}

func (p *JobSubmissionTaskModel)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := compute_resource_model.JobSubmissionProtocol(v)
  p.JobSubmissionProtocol = temp
}
  return nil
}

func (p *JobSubmissionTaskModel)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := compute_resource_model.MonitorMode(v)
  p.MonitorMode = temp
}
  return nil
}

func (p *JobSubmissionTaskModel)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.WallTime = &v
}
  return nil
}

func (p *JobSubmissionTaskModel) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("JobSubmissionTaskModel"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JobSubmissionTaskModel) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("jobSubmissionProtocol", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:jobSubmissionProtocol: ", p), err) }
  if err := oprot.WriteI32(int32(p.JobSubmissionProtocol)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.jobSubmissionProtocol (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:jobSubmissionProtocol: ", p), err) }
  return err
}

func (p *JobSubmissionTaskModel) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("monitorMode", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:monitorMode: ", p), err) }
  if err := oprot.WriteI32(int32(p.MonitorMode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.monitorMode (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:monitorMode: ", p), err) }
  return err
}

func (p *JobSubmissionTaskModel) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetWallTime() {
    if err := oprot.WriteFieldBegin("wallTime", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:wallTime: ", p), err) }
    if err := oprot.WriteI32(int32(*p.WallTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.wallTime (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:wallTime: ", p), err) }
  }
  return err
}

func (p *JobSubmissionTaskModel) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JobSubmissionTaskModel(%+v)", *p)
}

// Attributes:
//  - MonitorMode
type MonitorTaskModel struct {
  MonitorMode compute_resource_model.MonitorMode `thrift:"monitorMode,1,required" db:"monitorMode" json:"monitorMode"`
}

func NewMonitorTaskModel() *MonitorTaskModel {
  return &MonitorTaskModel{}
}


func (p *MonitorTaskModel) GetMonitorMode() compute_resource_model.MonitorMode {
  return p.MonitorMode
}
func (p *MonitorTaskModel) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMonitorMode bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetMonitorMode = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMonitorMode{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MonitorMode is not set"));
  }
  return nil
}

func (p *MonitorTaskModel)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := compute_resource_model.MonitorMode(v)
  p.MonitorMode = temp
}
  return nil
}

func (p *MonitorTaskModel) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MonitorTaskModel"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MonitorTaskModel) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("monitorMode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:monitorMode: ", p), err) }
  if err := oprot.WriteI32(int32(p.MonitorMode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.monitorMode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:monitorMode: ", p), err) }
  return err
}

func (p *MonitorTaskModel) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MonitorTaskModel(%+v)", *p)
}

