// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package application_io_models

import (
	"bytes"
	"reflect"
	"database/sql/driver"
	"errors"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"compute_resource_model"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = compute_resource_model.GoUnusedProtection__
//Data Types supported in Airavata. The primitive data types
//
type DataType int64
const (
  DataType_STRING DataType = 0
  DataType_INTEGER DataType = 1
  DataType_FLOAT DataType = 2
  DataType_URI DataType = 3
  DataType_URI_COLLECTION DataType = 4
  DataType_STDOUT DataType = 5
  DataType_STDERR DataType = 6
)

func (p DataType) String() string {
  switch p {
  case DataType_STRING: return "STRING"
  case DataType_INTEGER: return "INTEGER"
  case DataType_FLOAT: return "FLOAT"
  case DataType_URI: return "URI"
  case DataType_URI_COLLECTION: return "URI_COLLECTION"
  case DataType_STDOUT: return "STDOUT"
  case DataType_STDERR: return "STDERR"
  }
  return "<UNSET>"
}

func DataTypeFromString(s string) (DataType, error) {
  switch s {
  case "STRING": return DataType_STRING, nil 
  case "INTEGER": return DataType_INTEGER, nil 
  case "FLOAT": return DataType_FLOAT, nil 
  case "URI": return DataType_URI, nil 
  case "URI_COLLECTION": return DataType_URI_COLLECTION, nil 
  case "STDOUT": return DataType_STDOUT, nil 
  case "STDERR": return DataType_STDERR, nil 
  }
  return DataType(0), fmt.Errorf("not a valid DataType string")
}


func DataTypePtr(v DataType) *DataType { return &v }

func (p DataType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *DataType) UnmarshalText(text []byte) error {
q, err := DataTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *DataType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = DataType(v)
return nil
}

func (p * DataType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Application Inputs. The paramters describe how inputs are passed to the application.
// 
// name:
//   Name of the parameter.
// 
// value:
//   Value of the parameter. A default value could be set during registration.
// 
// type:
//   Data type of the parameter
// 
// applicationArguement:
//   The argument flag sent to the application. Such as -p pressure.
// 
// standardInput:
//   When this value is set, the parameter is sent as standard input rather than a parameter.
//   Typically this is passed using redirection operator ">".
// 
// userFriendlyDescription:
//   Description to be displayed at the user interface.
// 
// metaData:
//   Any metadat. This is typically ignore by Airavata and is used by gateways for application configuration.
// 
// 
// Attributes:
//  - Name
//  - Value
//  - Type
//  - ApplicationArgument
//  - StandardInput
//  - UserFriendlyDescription
//  - MetaData
//  - InputOrder
//  - IsRequired
//  - RequiredToAddedToCommandLine
//  - DataStaged
//  - StorageResourceId
//  - IsReadOnly
type InputDataObjectType struct {
  Name string `thrift:"name,1,required" db:"name" json:"name"`
  Value *string `thrift:"value,2" db:"value" json:"value,omitempty"`
  Type *DataType `thrift:"type,3" db:"type" json:"type,omitempty"`
  ApplicationArgument *string `thrift:"applicationArgument,4" db:"applicationArgument" json:"applicationArgument,omitempty"`
  StandardInput *bool `thrift:"standardInput,5" db:"standardInput" json:"standardInput,omitempty"`
  UserFriendlyDescription *string `thrift:"userFriendlyDescription,6" db:"userFriendlyDescription" json:"userFriendlyDescription,omitempty"`
  MetaData *string `thrift:"metaData,7" db:"metaData" json:"metaData,omitempty"`
  InputOrder *int32 `thrift:"inputOrder,8" db:"inputOrder" json:"inputOrder,omitempty"`
  IsRequired *bool `thrift:"isRequired,9" db:"isRequired" json:"isRequired,omitempty"`
  RequiredToAddedToCommandLine *bool `thrift:"requiredToAddedToCommandLine,10" db:"requiredToAddedToCommandLine" json:"requiredToAddedToCommandLine,omitempty"`
  DataStaged *bool `thrift:"dataStaged,11" db:"dataStaged" json:"dataStaged,omitempty"`
  StorageResourceId *string `thrift:"storageResourceId,12" db:"storageResourceId" json:"storageResourceId,omitempty"`
  IsReadOnly *bool `thrift:"isReadOnly,13" db:"isReadOnly" json:"isReadOnly,omitempty"`
}

func NewInputDataObjectType() *InputDataObjectType {
  return &InputDataObjectType{}
}


func (p *InputDataObjectType) GetName() string {
  return p.Name
}
var InputDataObjectType_Value_DEFAULT string
func (p *InputDataObjectType) GetValue() string {
  if !p.IsSetValue() {
    return InputDataObjectType_Value_DEFAULT
  }
return *p.Value
}
var InputDataObjectType_Type_DEFAULT DataType
func (p *InputDataObjectType) GetType() DataType {
  if !p.IsSetType() {
    return InputDataObjectType_Type_DEFAULT
  }
return *p.Type
}
var InputDataObjectType_ApplicationArgument_DEFAULT string
func (p *InputDataObjectType) GetApplicationArgument() string {
  if !p.IsSetApplicationArgument() {
    return InputDataObjectType_ApplicationArgument_DEFAULT
  }
return *p.ApplicationArgument
}
var InputDataObjectType_StandardInput_DEFAULT bool
func (p *InputDataObjectType) GetStandardInput() bool {
  if !p.IsSetStandardInput() {
    return InputDataObjectType_StandardInput_DEFAULT
  }
return *p.StandardInput
}
var InputDataObjectType_UserFriendlyDescription_DEFAULT string
func (p *InputDataObjectType) GetUserFriendlyDescription() string {
  if !p.IsSetUserFriendlyDescription() {
    return InputDataObjectType_UserFriendlyDescription_DEFAULT
  }
return *p.UserFriendlyDescription
}
var InputDataObjectType_MetaData_DEFAULT string
func (p *InputDataObjectType) GetMetaData() string {
  if !p.IsSetMetaData() {
    return InputDataObjectType_MetaData_DEFAULT
  }
return *p.MetaData
}
var InputDataObjectType_InputOrder_DEFAULT int32
func (p *InputDataObjectType) GetInputOrder() int32 {
  if !p.IsSetInputOrder() {
    return InputDataObjectType_InputOrder_DEFAULT
  }
return *p.InputOrder
}
var InputDataObjectType_IsRequired_DEFAULT bool
func (p *InputDataObjectType) GetIsRequired() bool {
  if !p.IsSetIsRequired() {
    return InputDataObjectType_IsRequired_DEFAULT
  }
return *p.IsRequired
}
var InputDataObjectType_RequiredToAddedToCommandLine_DEFAULT bool
func (p *InputDataObjectType) GetRequiredToAddedToCommandLine() bool {
  if !p.IsSetRequiredToAddedToCommandLine() {
    return InputDataObjectType_RequiredToAddedToCommandLine_DEFAULT
  }
return *p.RequiredToAddedToCommandLine
}
var InputDataObjectType_DataStaged_DEFAULT bool
func (p *InputDataObjectType) GetDataStaged() bool {
  if !p.IsSetDataStaged() {
    return InputDataObjectType_DataStaged_DEFAULT
  }
return *p.DataStaged
}
var InputDataObjectType_StorageResourceId_DEFAULT string
func (p *InputDataObjectType) GetStorageResourceId() string {
  if !p.IsSetStorageResourceId() {
    return InputDataObjectType_StorageResourceId_DEFAULT
  }
return *p.StorageResourceId
}
var InputDataObjectType_IsReadOnly_DEFAULT bool
func (p *InputDataObjectType) GetIsReadOnly() bool {
  if !p.IsSetIsReadOnly() {
    return InputDataObjectType_IsReadOnly_DEFAULT
  }
return *p.IsReadOnly
}
func (p *InputDataObjectType) IsSetValue() bool {
  return p.Value != nil
}

func (p *InputDataObjectType) IsSetType() bool {
  return p.Type != nil
}

func (p *InputDataObjectType) IsSetApplicationArgument() bool {
  return p.ApplicationArgument != nil
}

func (p *InputDataObjectType) IsSetStandardInput() bool {
  return p.StandardInput != nil
}

func (p *InputDataObjectType) IsSetUserFriendlyDescription() bool {
  return p.UserFriendlyDescription != nil
}

func (p *InputDataObjectType) IsSetMetaData() bool {
  return p.MetaData != nil
}

func (p *InputDataObjectType) IsSetInputOrder() bool {
  return p.InputOrder != nil
}

func (p *InputDataObjectType) IsSetIsRequired() bool {
  return p.IsRequired != nil
}

func (p *InputDataObjectType) IsSetRequiredToAddedToCommandLine() bool {
  return p.RequiredToAddedToCommandLine != nil
}

func (p *InputDataObjectType) IsSetDataStaged() bool {
  return p.DataStaged != nil
}

func (p *InputDataObjectType) IsSetStorageResourceId() bool {
  return p.StorageResourceId != nil
}

func (p *InputDataObjectType) IsSetIsReadOnly() bool {
  return p.IsReadOnly != nil
}

func (p *InputDataObjectType) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetName = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"));
  }
  return nil
}

func (p *InputDataObjectType)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *InputDataObjectType)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Value = &v
}
  return nil
}

func (p *InputDataObjectType)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := DataType(v)
  p.Type = &temp
}
  return nil
}

func (p *InputDataObjectType)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ApplicationArgument = &v
}
  return nil
}

func (p *InputDataObjectType)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.StandardInput = &v
}
  return nil
}

func (p *InputDataObjectType)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.UserFriendlyDescription = &v
}
  return nil
}

func (p *InputDataObjectType)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.MetaData = &v
}
  return nil
}

func (p *InputDataObjectType)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.InputOrder = &v
}
  return nil
}

func (p *InputDataObjectType)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.IsRequired = &v
}
  return nil
}

func (p *InputDataObjectType)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.RequiredToAddedToCommandLine = &v
}
  return nil
}

func (p *InputDataObjectType)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.DataStaged = &v
}
  return nil
}

func (p *InputDataObjectType)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.StorageResourceId = &v
}
  return nil
}

func (p *InputDataObjectType)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.IsReadOnly = &v
}
  return nil
}

func (p *InputDataObjectType) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InputDataObjectType"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InputDataObjectType) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *InputDataObjectType) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetValue() {
    if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
    if err := oprot.WriteString(string(*p.Value)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  }
  return err
}

func (p *InputDataObjectType) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetType() {
    if err := oprot.WriteFieldBegin("type", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Type)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  }
  return err
}

func (p *InputDataObjectType) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetApplicationArgument() {
    if err := oprot.WriteFieldBegin("applicationArgument", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:applicationArgument: ", p), err) }
    if err := oprot.WriteString(string(*p.ApplicationArgument)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.applicationArgument (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:applicationArgument: ", p), err) }
  }
  return err
}

func (p *InputDataObjectType) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetStandardInput() {
    if err := oprot.WriteFieldBegin("standardInput", thrift.BOOL, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:standardInput: ", p), err) }
    if err := oprot.WriteBool(bool(*p.StandardInput)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.standardInput (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:standardInput: ", p), err) }
  }
  return err
}

func (p *InputDataObjectType) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetUserFriendlyDescription() {
    if err := oprot.WriteFieldBegin("userFriendlyDescription", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:userFriendlyDescription: ", p), err) }
    if err := oprot.WriteString(string(*p.UserFriendlyDescription)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.userFriendlyDescription (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:userFriendlyDescription: ", p), err) }
  }
  return err
}

func (p *InputDataObjectType) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetMetaData() {
    if err := oprot.WriteFieldBegin("metaData", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:metaData: ", p), err) }
    if err := oprot.WriteString(string(*p.MetaData)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.metaData (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:metaData: ", p), err) }
  }
  return err
}

func (p *InputDataObjectType) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetInputOrder() {
    if err := oprot.WriteFieldBegin("inputOrder", thrift.I32, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:inputOrder: ", p), err) }
    if err := oprot.WriteI32(int32(*p.InputOrder)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.inputOrder (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:inputOrder: ", p), err) }
  }
  return err
}

func (p *InputDataObjectType) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetIsRequired() {
    if err := oprot.WriteFieldBegin("isRequired", thrift.BOOL, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:isRequired: ", p), err) }
    if err := oprot.WriteBool(bool(*p.IsRequired)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.isRequired (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:isRequired: ", p), err) }
  }
  return err
}

func (p *InputDataObjectType) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequiredToAddedToCommandLine() {
    if err := oprot.WriteFieldBegin("requiredToAddedToCommandLine", thrift.BOOL, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:requiredToAddedToCommandLine: ", p), err) }
    if err := oprot.WriteBool(bool(*p.RequiredToAddedToCommandLine)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.requiredToAddedToCommandLine (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:requiredToAddedToCommandLine: ", p), err) }
  }
  return err
}

func (p *InputDataObjectType) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetDataStaged() {
    if err := oprot.WriteFieldBegin("dataStaged", thrift.BOOL, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:dataStaged: ", p), err) }
    if err := oprot.WriteBool(bool(*p.DataStaged)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.dataStaged (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:dataStaged: ", p), err) }
  }
  return err
}

func (p *InputDataObjectType) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetStorageResourceId() {
    if err := oprot.WriteFieldBegin("storageResourceId", thrift.STRING, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:storageResourceId: ", p), err) }
    if err := oprot.WriteString(string(*p.StorageResourceId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.storageResourceId (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:storageResourceId: ", p), err) }
  }
  return err
}

func (p *InputDataObjectType) writeField13(oprot thrift.TProtocol) (err error) {
  if p.IsSetIsReadOnly() {
    if err := oprot.WriteFieldBegin("isReadOnly", thrift.BOOL, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:isReadOnly: ", p), err) }
    if err := oprot.WriteBool(bool(*p.IsReadOnly)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.isReadOnly (13) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:isReadOnly: ", p), err) }
  }
  return err
}

func (p *InputDataObjectType) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InputDataObjectType(%+v)", *p)
}

// Application Outputs. The paramters describe how outputs generated by the application.
// 
// name:
//   Name of the parameter.
// 
// value:
//   Value of the parameter.
// 
// type:
//   Data type of the parameter
// 
// applicationArguement:
//   The argument flag sent to the application. Such as -p pressure.
// 
// standardInput:
//   When this value is set, the parameter is sent as standard input rather than a parameter.
//   Typically this is passed using redirection operator ">".
// 
// userFriendlyDescription:
//   Description to be displayed at the user interface.
// 
// metaData:
//   Any metadat. This is typically ignore by Airavata and is used by gateways for application configuration.
// 
// 
// Attributes:
//  - Name
//  - Value
//  - Type
//  - ApplicationArgument
//  - IsRequired
//  - RequiredToAddedToCommandLine
//  - DataMovement
//  - Location
//  - SearchQuery
//  - OutputStreaming
//  - StorageResourceId
type OutputDataObjectType struct {
  Name string `thrift:"name,1,required" db:"name" json:"name"`
  Value *string `thrift:"value,2" db:"value" json:"value,omitempty"`
  Type *DataType `thrift:"type,3" db:"type" json:"type,omitempty"`
  ApplicationArgument *string `thrift:"applicationArgument,4" db:"applicationArgument" json:"applicationArgument,omitempty"`
  IsRequired *bool `thrift:"isRequired,5" db:"isRequired" json:"isRequired,omitempty"`
  RequiredToAddedToCommandLine *bool `thrift:"requiredToAddedToCommandLine,6" db:"requiredToAddedToCommandLine" json:"requiredToAddedToCommandLine,omitempty"`
  DataMovement *bool `thrift:"dataMovement,7" db:"dataMovement" json:"dataMovement,omitempty"`
  Location *string `thrift:"location,8" db:"location" json:"location,omitempty"`
  SearchQuery *string `thrift:"searchQuery,9" db:"searchQuery" json:"searchQuery,omitempty"`
  OutputStreaming *bool `thrift:"outputStreaming,10" db:"outputStreaming" json:"outputStreaming,omitempty"`
  StorageResourceId *string `thrift:"storageResourceId,11" db:"storageResourceId" json:"storageResourceId,omitempty"`
}

func NewOutputDataObjectType() *OutputDataObjectType {
  return &OutputDataObjectType{}
}


func (p *OutputDataObjectType) GetName() string {
  return p.Name
}
var OutputDataObjectType_Value_DEFAULT string
func (p *OutputDataObjectType) GetValue() string {
  if !p.IsSetValue() {
    return OutputDataObjectType_Value_DEFAULT
  }
return *p.Value
}
var OutputDataObjectType_Type_DEFAULT DataType
func (p *OutputDataObjectType) GetType() DataType {
  if !p.IsSetType() {
    return OutputDataObjectType_Type_DEFAULT
  }
return *p.Type
}
var OutputDataObjectType_ApplicationArgument_DEFAULT string
func (p *OutputDataObjectType) GetApplicationArgument() string {
  if !p.IsSetApplicationArgument() {
    return OutputDataObjectType_ApplicationArgument_DEFAULT
  }
return *p.ApplicationArgument
}
var OutputDataObjectType_IsRequired_DEFAULT bool
func (p *OutputDataObjectType) GetIsRequired() bool {
  if !p.IsSetIsRequired() {
    return OutputDataObjectType_IsRequired_DEFAULT
  }
return *p.IsRequired
}
var OutputDataObjectType_RequiredToAddedToCommandLine_DEFAULT bool
func (p *OutputDataObjectType) GetRequiredToAddedToCommandLine() bool {
  if !p.IsSetRequiredToAddedToCommandLine() {
    return OutputDataObjectType_RequiredToAddedToCommandLine_DEFAULT
  }
return *p.RequiredToAddedToCommandLine
}
var OutputDataObjectType_DataMovement_DEFAULT bool
func (p *OutputDataObjectType) GetDataMovement() bool {
  if !p.IsSetDataMovement() {
    return OutputDataObjectType_DataMovement_DEFAULT
  }
return *p.DataMovement
}
var OutputDataObjectType_Location_DEFAULT string
func (p *OutputDataObjectType) GetLocation() string {
  if !p.IsSetLocation() {
    return OutputDataObjectType_Location_DEFAULT
  }
return *p.Location
}
var OutputDataObjectType_SearchQuery_DEFAULT string
func (p *OutputDataObjectType) GetSearchQuery() string {
  if !p.IsSetSearchQuery() {
    return OutputDataObjectType_SearchQuery_DEFAULT
  }
return *p.SearchQuery
}
var OutputDataObjectType_OutputStreaming_DEFAULT bool
func (p *OutputDataObjectType) GetOutputStreaming() bool {
  if !p.IsSetOutputStreaming() {
    return OutputDataObjectType_OutputStreaming_DEFAULT
  }
return *p.OutputStreaming
}
var OutputDataObjectType_StorageResourceId_DEFAULT string
func (p *OutputDataObjectType) GetStorageResourceId() string {
  if !p.IsSetStorageResourceId() {
    return OutputDataObjectType_StorageResourceId_DEFAULT
  }
return *p.StorageResourceId
}
func (p *OutputDataObjectType) IsSetValue() bool {
  return p.Value != nil
}

func (p *OutputDataObjectType) IsSetType() bool {
  return p.Type != nil
}

func (p *OutputDataObjectType) IsSetApplicationArgument() bool {
  return p.ApplicationArgument != nil
}

func (p *OutputDataObjectType) IsSetIsRequired() bool {
  return p.IsRequired != nil
}

func (p *OutputDataObjectType) IsSetRequiredToAddedToCommandLine() bool {
  return p.RequiredToAddedToCommandLine != nil
}

func (p *OutputDataObjectType) IsSetDataMovement() bool {
  return p.DataMovement != nil
}

func (p *OutputDataObjectType) IsSetLocation() bool {
  return p.Location != nil
}

func (p *OutputDataObjectType) IsSetSearchQuery() bool {
  return p.SearchQuery != nil
}

func (p *OutputDataObjectType) IsSetOutputStreaming() bool {
  return p.OutputStreaming != nil
}

func (p *OutputDataObjectType) IsSetStorageResourceId() bool {
  return p.StorageResourceId != nil
}

func (p *OutputDataObjectType) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetName = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"));
  }
  return nil
}

func (p *OutputDataObjectType)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *OutputDataObjectType)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Value = &v
}
  return nil
}

func (p *OutputDataObjectType)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := DataType(v)
  p.Type = &temp
}
  return nil
}

func (p *OutputDataObjectType)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ApplicationArgument = &v
}
  return nil
}

func (p *OutputDataObjectType)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.IsRequired = &v
}
  return nil
}

func (p *OutputDataObjectType)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.RequiredToAddedToCommandLine = &v
}
  return nil
}

func (p *OutputDataObjectType)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.DataMovement = &v
}
  return nil
}

func (p *OutputDataObjectType)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Location = &v
}
  return nil
}

func (p *OutputDataObjectType)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.SearchQuery = &v
}
  return nil
}

func (p *OutputDataObjectType)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.OutputStreaming = &v
}
  return nil
}

func (p *OutputDataObjectType)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.StorageResourceId = &v
}
  return nil
}

func (p *OutputDataObjectType) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("OutputDataObjectType"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OutputDataObjectType) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *OutputDataObjectType) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetValue() {
    if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
    if err := oprot.WriteString(string(*p.Value)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  }
  return err
}

func (p *OutputDataObjectType) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetType() {
    if err := oprot.WriteFieldBegin("type", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Type)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  }
  return err
}

func (p *OutputDataObjectType) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetApplicationArgument() {
    if err := oprot.WriteFieldBegin("applicationArgument", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:applicationArgument: ", p), err) }
    if err := oprot.WriteString(string(*p.ApplicationArgument)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.applicationArgument (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:applicationArgument: ", p), err) }
  }
  return err
}

func (p *OutputDataObjectType) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetIsRequired() {
    if err := oprot.WriteFieldBegin("isRequired", thrift.BOOL, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:isRequired: ", p), err) }
    if err := oprot.WriteBool(bool(*p.IsRequired)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.isRequired (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:isRequired: ", p), err) }
  }
  return err
}

func (p *OutputDataObjectType) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequiredToAddedToCommandLine() {
    if err := oprot.WriteFieldBegin("requiredToAddedToCommandLine", thrift.BOOL, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:requiredToAddedToCommandLine: ", p), err) }
    if err := oprot.WriteBool(bool(*p.RequiredToAddedToCommandLine)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.requiredToAddedToCommandLine (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:requiredToAddedToCommandLine: ", p), err) }
  }
  return err
}

func (p *OutputDataObjectType) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetDataMovement() {
    if err := oprot.WriteFieldBegin("dataMovement", thrift.BOOL, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:dataMovement: ", p), err) }
    if err := oprot.WriteBool(bool(*p.DataMovement)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.dataMovement (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:dataMovement: ", p), err) }
  }
  return err
}

func (p *OutputDataObjectType) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetLocation() {
    if err := oprot.WriteFieldBegin("location", thrift.STRING, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:location: ", p), err) }
    if err := oprot.WriteString(string(*p.Location)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.location (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:location: ", p), err) }
  }
  return err
}

func (p *OutputDataObjectType) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetSearchQuery() {
    if err := oprot.WriteFieldBegin("searchQuery", thrift.STRING, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:searchQuery: ", p), err) }
    if err := oprot.WriteString(string(*p.SearchQuery)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.searchQuery (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:searchQuery: ", p), err) }
  }
  return err
}

func (p *OutputDataObjectType) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetOutputStreaming() {
    if err := oprot.WriteFieldBegin("outputStreaming", thrift.BOOL, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:outputStreaming: ", p), err) }
    if err := oprot.WriteBool(bool(*p.OutputStreaming)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.outputStreaming (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:outputStreaming: ", p), err) }
  }
  return err
}

func (p *OutputDataObjectType) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetStorageResourceId() {
    if err := oprot.WriteFieldBegin("storageResourceId", thrift.STRING, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:storageResourceId: ", p), err) }
    if err := oprot.WriteString(string(*p.StorageResourceId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.storageResourceId (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:storageResourceId: ", p), err) }
  }
  return err
}

func (p *OutputDataObjectType) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OutputDataObjectType(%+v)", *p)
}

