// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package messaging_events

import (
	"bytes"
	"reflect"
	"database/sql/driver"
	"errors"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"status_models"
	"application_io_models"
	"airavata_commons"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = status_models.GoUnusedProtection__
var _ = application_io_models.GoUnusedProtection__
var _ = airavata_commons.GoUnusedProtection__
type MessageLevel int64
const (
  MessageLevel_INFO MessageLevel = 0
  MessageLevel_DEBUG MessageLevel = 1
  MessageLevel_ERROR MessageLevel = 2
  MessageLevel_ACK MessageLevel = 3
)

func (p MessageLevel) String() string {
  switch p {
  case MessageLevel_INFO: return "INFO"
  case MessageLevel_DEBUG: return "DEBUG"
  case MessageLevel_ERROR: return "ERROR"
  case MessageLevel_ACK: return "ACK"
  }
  return "<UNSET>"
}

func MessageLevelFromString(s string) (MessageLevel, error) {
  switch s {
  case "INFO": return MessageLevel_INFO, nil 
  case "DEBUG": return MessageLevel_DEBUG, nil 
  case "ERROR": return MessageLevel_ERROR, nil 
  case "ACK": return MessageLevel_ACK, nil 
  }
  return MessageLevel(0), fmt.Errorf("not a valid MessageLevel string")
}


func MessageLevelPtr(v MessageLevel) *MessageLevel { return &v }

func (p MessageLevel) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *MessageLevel) UnmarshalText(text []byte) error {
q, err := MessageLevelFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *MessageLevel) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = MessageLevel(v)
return nil
}

func (p * MessageLevel) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type MessageType int64
const (
  MessageType_EXPERIMENT MessageType = 0
  MessageType_EXPERIMENT_CANCEL MessageType = 1
  MessageType_TASK MessageType = 2
  MessageType_PROCESS MessageType = 3
  MessageType_JOB MessageType = 4
  MessageType_LAUNCHPROCESS MessageType = 5
  MessageType_TERMINATEPROCESS MessageType = 6
  MessageType_PROCESSOUTPUT MessageType = 7
  MessageType_DB_EVENT MessageType = 8
)

func (p MessageType) String() string {
  switch p {
  case MessageType_EXPERIMENT: return "EXPERIMENT"
  case MessageType_EXPERIMENT_CANCEL: return "EXPERIMENT_CANCEL"
  case MessageType_TASK: return "TASK"
  case MessageType_PROCESS: return "PROCESS"
  case MessageType_JOB: return "JOB"
  case MessageType_LAUNCHPROCESS: return "LAUNCHPROCESS"
  case MessageType_TERMINATEPROCESS: return "TERMINATEPROCESS"
  case MessageType_PROCESSOUTPUT: return "PROCESSOUTPUT"
  case MessageType_DB_EVENT: return "DB_EVENT"
  }
  return "<UNSET>"
}

func MessageTypeFromString(s string) (MessageType, error) {
  switch s {
  case "EXPERIMENT": return MessageType_EXPERIMENT, nil 
  case "EXPERIMENT_CANCEL": return MessageType_EXPERIMENT_CANCEL, nil 
  case "TASK": return MessageType_TASK, nil 
  case "PROCESS": return MessageType_PROCESS, nil 
  case "JOB": return MessageType_JOB, nil 
  case "LAUNCHPROCESS": return MessageType_LAUNCHPROCESS, nil 
  case "TERMINATEPROCESS": return MessageType_TERMINATEPROCESS, nil 
  case "PROCESSOUTPUT": return MessageType_PROCESSOUTPUT, nil 
  case "DB_EVENT": return MessageType_DB_EVENT, nil 
  }
  return MessageType(0), fmt.Errorf("not a valid MessageType string")
}


func MessageTypePtr(v MessageType) *MessageType { return &v }

func (p MessageType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *MessageType) UnmarshalText(text []byte) error {
q, err := MessageTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *MessageType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = MessageType(v)
return nil
}

func (p * MessageType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - State
//  - ExperimentId
//  - GatewayId
type ExperimentStatusChangeEvent struct {
  State status_models.ExperimentState `thrift:"state,1,required" db:"state" json:"state"`
  ExperimentId string `thrift:"experimentId,2,required" db:"experimentId" json:"experimentId"`
  GatewayId string `thrift:"gatewayId,3,required" db:"gatewayId" json:"gatewayId"`
}

func NewExperimentStatusChangeEvent() *ExperimentStatusChangeEvent {
  return &ExperimentStatusChangeEvent{}
}


func (p *ExperimentStatusChangeEvent) GetState() status_models.ExperimentState {
  return p.State
}

func (p *ExperimentStatusChangeEvent) GetExperimentId() string {
  return p.ExperimentId
}

func (p *ExperimentStatusChangeEvent) GetGatewayId() string {
  return p.GatewayId
}
func (p *ExperimentStatusChangeEvent) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetState bool = false;
  var issetExperimentId bool = false;
  var issetGatewayId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetState = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetExperimentId = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetState{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field State is not set"));
  }
  if !issetExperimentId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ExperimentId is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  return nil
}

func (p *ExperimentStatusChangeEvent)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := status_models.ExperimentState(v)
  p.State = temp
}
  return nil
}

func (p *ExperimentStatusChangeEvent)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ExperimentId = v
}
  return nil
}

func (p *ExperimentStatusChangeEvent)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *ExperimentStatusChangeEvent) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ExperimentStatusChangeEvent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExperimentStatusChangeEvent) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("state", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:state: ", p), err) }
  if err := oprot.WriteI32(int32(p.State)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.state (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:state: ", p), err) }
  return err
}

func (p *ExperimentStatusChangeEvent) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("experimentId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:experimentId: ", p), err) }
  if err := oprot.WriteString(string(p.ExperimentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.experimentId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:experimentId: ", p), err) }
  return err
}

func (p *ExperimentStatusChangeEvent) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gatewayId: ", p), err) }
  return err
}

func (p *ExperimentStatusChangeEvent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExperimentStatusChangeEvent(%+v)", *p)
}

// Attributes:
//  - ProcessId
//  - ExperimentId
//  - GatewayId
type ProcessIdentifier struct {
  ProcessId string `thrift:"processId,1,required" db:"processId" json:"processId"`
  ExperimentId string `thrift:"experimentId,2,required" db:"experimentId" json:"experimentId"`
  GatewayId string `thrift:"gatewayId,3,required" db:"gatewayId" json:"gatewayId"`
}

func NewProcessIdentifier() *ProcessIdentifier {
  return &ProcessIdentifier{}
}


func (p *ProcessIdentifier) GetProcessId() string {
  return p.ProcessId
}

func (p *ProcessIdentifier) GetExperimentId() string {
  return p.ExperimentId
}

func (p *ProcessIdentifier) GetGatewayId() string {
  return p.GatewayId
}
func (p *ProcessIdentifier) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetProcessId bool = false;
  var issetExperimentId bool = false;
  var issetGatewayId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProcessId = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetExperimentId = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetProcessId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProcessId is not set"));
  }
  if !issetExperimentId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ExperimentId is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  return nil
}

func (p *ProcessIdentifier)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ProcessId = v
}
  return nil
}

func (p *ProcessIdentifier)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ExperimentId = v
}
  return nil
}

func (p *ProcessIdentifier)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *ProcessIdentifier) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ProcessIdentifier"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ProcessIdentifier) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("processId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:processId: ", p), err) }
  if err := oprot.WriteString(string(p.ProcessId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.processId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:processId: ", p), err) }
  return err
}

func (p *ProcessIdentifier) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("experimentId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:experimentId: ", p), err) }
  if err := oprot.WriteString(string(p.ExperimentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.experimentId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:experimentId: ", p), err) }
  return err
}

func (p *ProcessIdentifier) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gatewayId: ", p), err) }
  return err
}

func (p *ProcessIdentifier) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProcessIdentifier(%+v)", *p)
}

// Attributes:
//  - TaskId
//  - ProcessId
//  - ExperimentId
//  - GatewayId
type TaskIdentifier struct {
  TaskId string `thrift:"taskId,1,required" db:"taskId" json:"taskId"`
  ProcessId string `thrift:"processId,2,required" db:"processId" json:"processId"`
  ExperimentId string `thrift:"experimentId,3,required" db:"experimentId" json:"experimentId"`
  GatewayId string `thrift:"gatewayId,4,required" db:"gatewayId" json:"gatewayId"`
}

func NewTaskIdentifier() *TaskIdentifier {
  return &TaskIdentifier{}
}


func (p *TaskIdentifier) GetTaskId() string {
  return p.TaskId
}

func (p *TaskIdentifier) GetProcessId() string {
  return p.ProcessId
}

func (p *TaskIdentifier) GetExperimentId() string {
  return p.ExperimentId
}

func (p *TaskIdentifier) GetGatewayId() string {
  return p.GatewayId
}
func (p *TaskIdentifier) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTaskId bool = false;
  var issetProcessId bool = false;
  var issetExperimentId bool = false;
  var issetGatewayId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetTaskId = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProcessId = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetExperimentId = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTaskId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TaskId is not set"));
  }
  if !issetProcessId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProcessId is not set"));
  }
  if !issetExperimentId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ExperimentId is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  return nil
}

func (p *TaskIdentifier)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TaskId = v
}
  return nil
}

func (p *TaskIdentifier)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ProcessId = v
}
  return nil
}

func (p *TaskIdentifier)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ExperimentId = v
}
  return nil
}

func (p *TaskIdentifier)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *TaskIdentifier) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TaskIdentifier"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TaskIdentifier) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("taskId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:taskId: ", p), err) }
  if err := oprot.WriteString(string(p.TaskId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.taskId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:taskId: ", p), err) }
  return err
}

func (p *TaskIdentifier) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("processId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:processId: ", p), err) }
  if err := oprot.WriteString(string(p.ProcessId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.processId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:processId: ", p), err) }
  return err
}

func (p *TaskIdentifier) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("experimentId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:experimentId: ", p), err) }
  if err := oprot.WriteString(string(p.ExperimentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.experimentId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:experimentId: ", p), err) }
  return err
}

func (p *TaskIdentifier) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:gatewayId: ", p), err) }
  return err
}

func (p *TaskIdentifier) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TaskIdentifier(%+v)", *p)
}

// Attributes:
//  - State
//  - TaskIdentity
type TaskStatusChangeEvent struct {
  State status_models.TaskState `thrift:"state,1,required" db:"state" json:"state"`
  TaskIdentity *TaskIdentifier `thrift:"taskIdentity,2,required" db:"taskIdentity" json:"taskIdentity"`
}

func NewTaskStatusChangeEvent() *TaskStatusChangeEvent {
  return &TaskStatusChangeEvent{}
}


func (p *TaskStatusChangeEvent) GetState() status_models.TaskState {
  return p.State
}
var TaskStatusChangeEvent_TaskIdentity_DEFAULT *TaskIdentifier
func (p *TaskStatusChangeEvent) GetTaskIdentity() *TaskIdentifier {
  if !p.IsSetTaskIdentity() {
    return TaskStatusChangeEvent_TaskIdentity_DEFAULT
  }
return p.TaskIdentity
}
func (p *TaskStatusChangeEvent) IsSetTaskIdentity() bool {
  return p.TaskIdentity != nil
}

func (p *TaskStatusChangeEvent) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetState bool = false;
  var issetTaskIdentity bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetState = true
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetTaskIdentity = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetState{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field State is not set"));
  }
  if !issetTaskIdentity{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TaskIdentity is not set"));
  }
  return nil
}

func (p *TaskStatusChangeEvent)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := status_models.TaskState(v)
  p.State = temp
}
  return nil
}

func (p *TaskStatusChangeEvent)  ReadField2(iprot thrift.TProtocol) error {
  p.TaskIdentity = &TaskIdentifier{}
  if err := p.TaskIdentity.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TaskIdentity), err)
  }
  return nil
}

func (p *TaskStatusChangeEvent) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TaskStatusChangeEvent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TaskStatusChangeEvent) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("state", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:state: ", p), err) }
  if err := oprot.WriteI32(int32(p.State)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.state (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:state: ", p), err) }
  return err
}

func (p *TaskStatusChangeEvent) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("taskIdentity", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:taskIdentity: ", p), err) }
  if err := p.TaskIdentity.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TaskIdentity), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:taskIdentity: ", p), err) }
  return err
}

func (p *TaskStatusChangeEvent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TaskStatusChangeEvent(%+v)", *p)
}

// Attributes:
//  - State
//  - TaskIdentity
type TaskStatusChangeRequestEvent struct {
  State status_models.TaskState `thrift:"state,1,required" db:"state" json:"state"`
  TaskIdentity *TaskIdentifier `thrift:"taskIdentity,2,required" db:"taskIdentity" json:"taskIdentity"`
}

func NewTaskStatusChangeRequestEvent() *TaskStatusChangeRequestEvent {
  return &TaskStatusChangeRequestEvent{}
}


func (p *TaskStatusChangeRequestEvent) GetState() status_models.TaskState {
  return p.State
}
var TaskStatusChangeRequestEvent_TaskIdentity_DEFAULT *TaskIdentifier
func (p *TaskStatusChangeRequestEvent) GetTaskIdentity() *TaskIdentifier {
  if !p.IsSetTaskIdentity() {
    return TaskStatusChangeRequestEvent_TaskIdentity_DEFAULT
  }
return p.TaskIdentity
}
func (p *TaskStatusChangeRequestEvent) IsSetTaskIdentity() bool {
  return p.TaskIdentity != nil
}

func (p *TaskStatusChangeRequestEvent) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetState bool = false;
  var issetTaskIdentity bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetState = true
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetTaskIdentity = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetState{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field State is not set"));
  }
  if !issetTaskIdentity{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TaskIdentity is not set"));
  }
  return nil
}

func (p *TaskStatusChangeRequestEvent)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := status_models.TaskState(v)
  p.State = temp
}
  return nil
}

func (p *TaskStatusChangeRequestEvent)  ReadField2(iprot thrift.TProtocol) error {
  p.TaskIdentity = &TaskIdentifier{}
  if err := p.TaskIdentity.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TaskIdentity), err)
  }
  return nil
}

func (p *TaskStatusChangeRequestEvent) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TaskStatusChangeRequestEvent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TaskStatusChangeRequestEvent) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("state", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:state: ", p), err) }
  if err := oprot.WriteI32(int32(p.State)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.state (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:state: ", p), err) }
  return err
}

func (p *TaskStatusChangeRequestEvent) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("taskIdentity", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:taskIdentity: ", p), err) }
  if err := p.TaskIdentity.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TaskIdentity), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:taskIdentity: ", p), err) }
  return err
}

func (p *TaskStatusChangeRequestEvent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TaskStatusChangeRequestEvent(%+v)", *p)
}

// Attributes:
//  - State
//  - ProcessIdentity
type ProcessStatusChangeEvent struct {
  State status_models.ProcessState `thrift:"state,1,required" db:"state" json:"state"`
  ProcessIdentity *ProcessIdentifier `thrift:"processIdentity,2,required" db:"processIdentity" json:"processIdentity"`
}

func NewProcessStatusChangeEvent() *ProcessStatusChangeEvent {
  return &ProcessStatusChangeEvent{}
}


func (p *ProcessStatusChangeEvent) GetState() status_models.ProcessState {
  return p.State
}
var ProcessStatusChangeEvent_ProcessIdentity_DEFAULT *ProcessIdentifier
func (p *ProcessStatusChangeEvent) GetProcessIdentity() *ProcessIdentifier {
  if !p.IsSetProcessIdentity() {
    return ProcessStatusChangeEvent_ProcessIdentity_DEFAULT
  }
return p.ProcessIdentity
}
func (p *ProcessStatusChangeEvent) IsSetProcessIdentity() bool {
  return p.ProcessIdentity != nil
}

func (p *ProcessStatusChangeEvent) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetState bool = false;
  var issetProcessIdentity bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetState = true
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProcessIdentity = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetState{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field State is not set"));
  }
  if !issetProcessIdentity{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProcessIdentity is not set"));
  }
  return nil
}

func (p *ProcessStatusChangeEvent)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := status_models.ProcessState(v)
  p.State = temp
}
  return nil
}

func (p *ProcessStatusChangeEvent)  ReadField2(iprot thrift.TProtocol) error {
  p.ProcessIdentity = &ProcessIdentifier{}
  if err := p.ProcessIdentity.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ProcessIdentity), err)
  }
  return nil
}

func (p *ProcessStatusChangeEvent) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ProcessStatusChangeEvent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ProcessStatusChangeEvent) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("state", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:state: ", p), err) }
  if err := oprot.WriteI32(int32(p.State)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.state (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:state: ", p), err) }
  return err
}

func (p *ProcessStatusChangeEvent) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("processIdentity", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:processIdentity: ", p), err) }
  if err := p.ProcessIdentity.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ProcessIdentity), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:processIdentity: ", p), err) }
  return err
}

func (p *ProcessStatusChangeEvent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProcessStatusChangeEvent(%+v)", *p)
}

// Attributes:
//  - State
//  - ProcessIdentity
type ProcessStatusChangeRequestEvent struct {
  State status_models.ProcessState `thrift:"state,1,required" db:"state" json:"state"`
  ProcessIdentity *ProcessIdentifier `thrift:"processIdentity,2,required" db:"processIdentity" json:"processIdentity"`
}

func NewProcessStatusChangeRequestEvent() *ProcessStatusChangeRequestEvent {
  return &ProcessStatusChangeRequestEvent{}
}


func (p *ProcessStatusChangeRequestEvent) GetState() status_models.ProcessState {
  return p.State
}
var ProcessStatusChangeRequestEvent_ProcessIdentity_DEFAULT *ProcessIdentifier
func (p *ProcessStatusChangeRequestEvent) GetProcessIdentity() *ProcessIdentifier {
  if !p.IsSetProcessIdentity() {
    return ProcessStatusChangeRequestEvent_ProcessIdentity_DEFAULT
  }
return p.ProcessIdentity
}
func (p *ProcessStatusChangeRequestEvent) IsSetProcessIdentity() bool {
  return p.ProcessIdentity != nil
}

func (p *ProcessStatusChangeRequestEvent) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetState bool = false;
  var issetProcessIdentity bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetState = true
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProcessIdentity = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetState{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field State is not set"));
  }
  if !issetProcessIdentity{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProcessIdentity is not set"));
  }
  return nil
}

func (p *ProcessStatusChangeRequestEvent)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := status_models.ProcessState(v)
  p.State = temp
}
  return nil
}

func (p *ProcessStatusChangeRequestEvent)  ReadField2(iprot thrift.TProtocol) error {
  p.ProcessIdentity = &ProcessIdentifier{}
  if err := p.ProcessIdentity.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ProcessIdentity), err)
  }
  return nil
}

func (p *ProcessStatusChangeRequestEvent) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ProcessStatusChangeRequestEvent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ProcessStatusChangeRequestEvent) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("state", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:state: ", p), err) }
  if err := oprot.WriteI32(int32(p.State)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.state (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:state: ", p), err) }
  return err
}

func (p *ProcessStatusChangeRequestEvent) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("processIdentity", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:processIdentity: ", p), err) }
  if err := p.ProcessIdentity.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ProcessIdentity), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:processIdentity: ", p), err) }
  return err
}

func (p *ProcessStatusChangeRequestEvent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProcessStatusChangeRequestEvent(%+v)", *p)
}

// Attributes:
//  - Output
//  - TaskIdentity
type TaskOutputChangeEvent struct {
  Output []*application_io_models.OutputDataObjectType `thrift:"output,1,required" db:"output" json:"output"`
  TaskIdentity *TaskIdentifier `thrift:"taskIdentity,2,required" db:"taskIdentity" json:"taskIdentity"`
}

func NewTaskOutputChangeEvent() *TaskOutputChangeEvent {
  return &TaskOutputChangeEvent{}
}


func (p *TaskOutputChangeEvent) GetOutput() []*application_io_models.OutputDataObjectType {
  return p.Output
}
var TaskOutputChangeEvent_TaskIdentity_DEFAULT *TaskIdentifier
func (p *TaskOutputChangeEvent) GetTaskIdentity() *TaskIdentifier {
  if !p.IsSetTaskIdentity() {
    return TaskOutputChangeEvent_TaskIdentity_DEFAULT
  }
return p.TaskIdentity
}
func (p *TaskOutputChangeEvent) IsSetTaskIdentity() bool {
  return p.TaskIdentity != nil
}

func (p *TaskOutputChangeEvent) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetOutput bool = false;
  var issetTaskIdentity bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetOutput = true
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetTaskIdentity = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetOutput{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Output is not set"));
  }
  if !issetTaskIdentity{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TaskIdentity is not set"));
  }
  return nil
}

func (p *TaskOutputChangeEvent)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*application_io_models.OutputDataObjectType, 0, size)
  p.Output =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &application_io_models.OutputDataObjectType{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Output = append(p.Output, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TaskOutputChangeEvent)  ReadField2(iprot thrift.TProtocol) error {
  p.TaskIdentity = &TaskIdentifier{}
  if err := p.TaskIdentity.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TaskIdentity), err)
  }
  return nil
}

func (p *TaskOutputChangeEvent) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TaskOutputChangeEvent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TaskOutputChangeEvent) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("output", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:output: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Output)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Output {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:output: ", p), err) }
  return err
}

func (p *TaskOutputChangeEvent) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("taskIdentity", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:taskIdentity: ", p), err) }
  if err := p.TaskIdentity.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TaskIdentity), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:taskIdentity: ", p), err) }
  return err
}

func (p *TaskOutputChangeEvent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TaskOutputChangeEvent(%+v)", *p)
}

// Attributes:
//  - JobId
//  - TaskId
//  - ProcessId
//  - ExperimentId
//  - GatewayId
type JobIdentifier struct {
  JobId string `thrift:"jobId,1,required" db:"jobId" json:"jobId"`
  TaskId string `thrift:"taskId,2,required" db:"taskId" json:"taskId"`
  ProcessId string `thrift:"processId,3,required" db:"processId" json:"processId"`
  ExperimentId string `thrift:"experimentId,4,required" db:"experimentId" json:"experimentId"`
  GatewayId string `thrift:"gatewayId,5,required" db:"gatewayId" json:"gatewayId"`
}

func NewJobIdentifier() *JobIdentifier {
  return &JobIdentifier{}
}


func (p *JobIdentifier) GetJobId() string {
  return p.JobId
}

func (p *JobIdentifier) GetTaskId() string {
  return p.TaskId
}

func (p *JobIdentifier) GetProcessId() string {
  return p.ProcessId
}

func (p *JobIdentifier) GetExperimentId() string {
  return p.ExperimentId
}

func (p *JobIdentifier) GetGatewayId() string {
  return p.GatewayId
}
func (p *JobIdentifier) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetJobId bool = false;
  var issetTaskId bool = false;
  var issetProcessId bool = false;
  var issetExperimentId bool = false;
  var issetGatewayId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetJobId = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetTaskId = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProcessId = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetExperimentId = true
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetJobId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field JobId is not set"));
  }
  if !issetTaskId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TaskId is not set"));
  }
  if !issetProcessId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProcessId is not set"));
  }
  if !issetExperimentId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ExperimentId is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  return nil
}

func (p *JobIdentifier)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.JobId = v
}
  return nil
}

func (p *JobIdentifier)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TaskId = v
}
  return nil
}

func (p *JobIdentifier)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ProcessId = v
}
  return nil
}

func (p *JobIdentifier)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ExperimentId = v
}
  return nil
}

func (p *JobIdentifier)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *JobIdentifier) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("JobIdentifier"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JobIdentifier) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("jobId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:jobId: ", p), err) }
  if err := oprot.WriteString(string(p.JobId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.jobId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:jobId: ", p), err) }
  return err
}

func (p *JobIdentifier) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("taskId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:taskId: ", p), err) }
  if err := oprot.WriteString(string(p.TaskId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.taskId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:taskId: ", p), err) }
  return err
}

func (p *JobIdentifier) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("processId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:processId: ", p), err) }
  if err := oprot.WriteString(string(p.ProcessId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.processId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:processId: ", p), err) }
  return err
}

func (p *JobIdentifier) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("experimentId", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:experimentId: ", p), err) }
  if err := oprot.WriteString(string(p.ExperimentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.experimentId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:experimentId: ", p), err) }
  return err
}

func (p *JobIdentifier) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:gatewayId: ", p), err) }
  return err
}

func (p *JobIdentifier) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JobIdentifier(%+v)", *p)
}

// Attributes:
//  - ExperimentId
//  - GatewayId
type ExperimentSubmitEvent struct {
  ExperimentId string `thrift:"experimentId,1,required" db:"experimentId" json:"experimentId"`
  GatewayId string `thrift:"gatewayId,2,required" db:"gatewayId" json:"gatewayId"`
}

func NewExperimentSubmitEvent() *ExperimentSubmitEvent {
  return &ExperimentSubmitEvent{}
}


func (p *ExperimentSubmitEvent) GetExperimentId() string {
  return p.ExperimentId
}

func (p *ExperimentSubmitEvent) GetGatewayId() string {
  return p.GatewayId
}
func (p *ExperimentSubmitEvent) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetExperimentId bool = false;
  var issetGatewayId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetExperimentId = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetExperimentId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ExperimentId is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  return nil
}

func (p *ExperimentSubmitEvent)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ExperimentId = v
}
  return nil
}

func (p *ExperimentSubmitEvent)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *ExperimentSubmitEvent) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ExperimentSubmitEvent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExperimentSubmitEvent) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("experimentId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:experimentId: ", p), err) }
  if err := oprot.WriteString(string(p.ExperimentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.experimentId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:experimentId: ", p), err) }
  return err
}

func (p *ExperimentSubmitEvent) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayId: ", p), err) }
  return err
}

func (p *ExperimentSubmitEvent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExperimentSubmitEvent(%+v)", *p)
}

// Attributes:
//  - ProcessId
//  - GatewayId
//  - ExperimentId
//  - TokenId
type ProcessSubmitEvent struct {
  ProcessId string `thrift:"processId,1,required" db:"processId" json:"processId"`
  GatewayId string `thrift:"gatewayId,2,required" db:"gatewayId" json:"gatewayId"`
  ExperimentId string `thrift:"experimentId,3,required" db:"experimentId" json:"experimentId"`
  TokenId string `thrift:"tokenId,4,required" db:"tokenId" json:"tokenId"`
}

func NewProcessSubmitEvent() *ProcessSubmitEvent {
  return &ProcessSubmitEvent{}
}


func (p *ProcessSubmitEvent) GetProcessId() string {
  return p.ProcessId
}

func (p *ProcessSubmitEvent) GetGatewayId() string {
  return p.GatewayId
}

func (p *ProcessSubmitEvent) GetExperimentId() string {
  return p.ExperimentId
}

func (p *ProcessSubmitEvent) GetTokenId() string {
  return p.TokenId
}
func (p *ProcessSubmitEvent) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetProcessId bool = false;
  var issetGatewayId bool = false;
  var issetExperimentId bool = false;
  var issetTokenId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProcessId = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetExperimentId = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetTokenId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetProcessId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProcessId is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  if !issetExperimentId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ExperimentId is not set"));
  }
  if !issetTokenId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TokenId is not set"));
  }
  return nil
}

func (p *ProcessSubmitEvent)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ProcessId = v
}
  return nil
}

func (p *ProcessSubmitEvent)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *ProcessSubmitEvent)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ExperimentId = v
}
  return nil
}

func (p *ProcessSubmitEvent)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.TokenId = v
}
  return nil
}

func (p *ProcessSubmitEvent) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ProcessSubmitEvent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ProcessSubmitEvent) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("processId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:processId: ", p), err) }
  if err := oprot.WriteString(string(p.ProcessId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.processId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:processId: ", p), err) }
  return err
}

func (p *ProcessSubmitEvent) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayId: ", p), err) }
  return err
}

func (p *ProcessSubmitEvent) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("experimentId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:experimentId: ", p), err) }
  if err := oprot.WriteString(string(p.ExperimentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.experimentId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:experimentId: ", p), err) }
  return err
}

func (p *ProcessSubmitEvent) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tokenId", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:tokenId: ", p), err) }
  if err := oprot.WriteString(string(p.TokenId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tokenId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:tokenId: ", p), err) }
  return err
}

func (p *ProcessSubmitEvent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProcessSubmitEvent(%+v)", *p)
}

// Attributes:
//  - ProcessId
//  - GatewayId
//  - TokenId
type ProcessTerminateEvent struct {
  ProcessId string `thrift:"processId,1,required" db:"processId" json:"processId"`
  GatewayId string `thrift:"gatewayId,2,required" db:"gatewayId" json:"gatewayId"`
  TokenId string `thrift:"tokenId,3,required" db:"tokenId" json:"tokenId"`
}

func NewProcessTerminateEvent() *ProcessTerminateEvent {
  return &ProcessTerminateEvent{}
}


func (p *ProcessTerminateEvent) GetProcessId() string {
  return p.ProcessId
}

func (p *ProcessTerminateEvent) GetGatewayId() string {
  return p.GatewayId
}

func (p *ProcessTerminateEvent) GetTokenId() string {
  return p.TokenId
}
func (p *ProcessTerminateEvent) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetProcessId bool = false;
  var issetGatewayId bool = false;
  var issetTokenId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProcessId = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetTokenId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetProcessId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProcessId is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  if !issetTokenId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TokenId is not set"));
  }
  return nil
}

func (p *ProcessTerminateEvent)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ProcessId = v
}
  return nil
}

func (p *ProcessTerminateEvent)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *ProcessTerminateEvent)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TokenId = v
}
  return nil
}

func (p *ProcessTerminateEvent) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ProcessTerminateEvent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ProcessTerminateEvent) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("processId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:processId: ", p), err) }
  if err := oprot.WriteString(string(p.ProcessId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.processId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:processId: ", p), err) }
  return err
}

func (p *ProcessTerminateEvent) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayId: ", p), err) }
  return err
}

func (p *ProcessTerminateEvent) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tokenId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tokenId: ", p), err) }
  if err := oprot.WriteString(string(p.TokenId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tokenId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tokenId: ", p), err) }
  return err
}

func (p *ProcessTerminateEvent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProcessTerminateEvent(%+v)", *p)
}

// Attributes:
//  - State
//  - JobIdentity
type JobStatusChangeEvent struct {
  State status_models.JobState `thrift:"state,1,required" db:"state" json:"state"`
  JobIdentity *JobIdentifier `thrift:"jobIdentity,2,required" db:"jobIdentity" json:"jobIdentity"`
}

func NewJobStatusChangeEvent() *JobStatusChangeEvent {
  return &JobStatusChangeEvent{}
}


func (p *JobStatusChangeEvent) GetState() status_models.JobState {
  return p.State
}
var JobStatusChangeEvent_JobIdentity_DEFAULT *JobIdentifier
func (p *JobStatusChangeEvent) GetJobIdentity() *JobIdentifier {
  if !p.IsSetJobIdentity() {
    return JobStatusChangeEvent_JobIdentity_DEFAULT
  }
return p.JobIdentity
}
func (p *JobStatusChangeEvent) IsSetJobIdentity() bool {
  return p.JobIdentity != nil
}

func (p *JobStatusChangeEvent) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetState bool = false;
  var issetJobIdentity bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetState = true
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetJobIdentity = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetState{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field State is not set"));
  }
  if !issetJobIdentity{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field JobIdentity is not set"));
  }
  return nil
}

func (p *JobStatusChangeEvent)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := status_models.JobState(v)
  p.State = temp
}
  return nil
}

func (p *JobStatusChangeEvent)  ReadField2(iprot thrift.TProtocol) error {
  p.JobIdentity = &JobIdentifier{}
  if err := p.JobIdentity.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.JobIdentity), err)
  }
  return nil
}

func (p *JobStatusChangeEvent) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("JobStatusChangeEvent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JobStatusChangeEvent) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("state", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:state: ", p), err) }
  if err := oprot.WriteI32(int32(p.State)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.state (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:state: ", p), err) }
  return err
}

func (p *JobStatusChangeEvent) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("jobIdentity", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:jobIdentity: ", p), err) }
  if err := p.JobIdentity.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.JobIdentity), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:jobIdentity: ", p), err) }
  return err
}

func (p *JobStatusChangeEvent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JobStatusChangeEvent(%+v)", *p)
}

// Attributes:
//  - State
//  - JobIdentity
type JobStatusChangeRequestEvent struct {
  State status_models.JobState `thrift:"state,1,required" db:"state" json:"state"`
  JobIdentity *JobIdentifier `thrift:"jobIdentity,2,required" db:"jobIdentity" json:"jobIdentity"`
}

func NewJobStatusChangeRequestEvent() *JobStatusChangeRequestEvent {
  return &JobStatusChangeRequestEvent{}
}


func (p *JobStatusChangeRequestEvent) GetState() status_models.JobState {
  return p.State
}
var JobStatusChangeRequestEvent_JobIdentity_DEFAULT *JobIdentifier
func (p *JobStatusChangeRequestEvent) GetJobIdentity() *JobIdentifier {
  if !p.IsSetJobIdentity() {
    return JobStatusChangeRequestEvent_JobIdentity_DEFAULT
  }
return p.JobIdentity
}
func (p *JobStatusChangeRequestEvent) IsSetJobIdentity() bool {
  return p.JobIdentity != nil
}

func (p *JobStatusChangeRequestEvent) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetState bool = false;
  var issetJobIdentity bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetState = true
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetJobIdentity = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetState{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field State is not set"));
  }
  if !issetJobIdentity{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field JobIdentity is not set"));
  }
  return nil
}

func (p *JobStatusChangeRequestEvent)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := status_models.JobState(v)
  p.State = temp
}
  return nil
}

func (p *JobStatusChangeRequestEvent)  ReadField2(iprot thrift.TProtocol) error {
  p.JobIdentity = &JobIdentifier{}
  if err := p.JobIdentity.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.JobIdentity), err)
  }
  return nil
}

func (p *JobStatusChangeRequestEvent) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("JobStatusChangeRequestEvent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JobStatusChangeRequestEvent) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("state", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:state: ", p), err) }
  if err := oprot.WriteI32(int32(p.State)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.state (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:state: ", p), err) }
  return err
}

func (p *JobStatusChangeRequestEvent) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("jobIdentity", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:jobIdentity: ", p), err) }
  if err := p.JobIdentity.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.JobIdentity), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:jobIdentity: ", p), err) }
  return err
}

func (p *JobStatusChangeRequestEvent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JobStatusChangeRequestEvent(%+v)", *p)
}

// Attributes:
//  - Event
//  - MessageId
//  - MessageType
//  - UpdatedTime
//  - MessageLevel
type Message struct {
  Event []byte `thrift:"event,1,required" db:"event" json:"event"`
  MessageId string `thrift:"messageId,2,required" db:"messageId" json:"messageId"`
  MessageType MessageType `thrift:"messageType,3,required" db:"messageType" json:"messageType"`
  UpdatedTime *int64 `thrift:"updatedTime,4" db:"updatedTime" json:"updatedTime,omitempty"`
  MessageLevel *MessageLevel `thrift:"messageLevel,5" db:"messageLevel" json:"messageLevel,omitempty"`
}

func NewMessage() *Message {
  return &Message{
MessageId: "DO_NOT_SET_AT_CLIENTS",
}
}


func (p *Message) GetEvent() []byte {
  return p.Event
}

func (p *Message) GetMessageId() string {
  return p.MessageId
}

func (p *Message) GetMessageType() MessageType {
  return p.MessageType
}
var Message_UpdatedTime_DEFAULT int64
func (p *Message) GetUpdatedTime() int64 {
  if !p.IsSetUpdatedTime() {
    return Message_UpdatedTime_DEFAULT
  }
return *p.UpdatedTime
}
var Message_MessageLevel_DEFAULT MessageLevel
func (p *Message) GetMessageLevel() MessageLevel {
  if !p.IsSetMessageLevel() {
    return Message_MessageLevel_DEFAULT
  }
return *p.MessageLevel
}
func (p *Message) IsSetUpdatedTime() bool {
  return p.UpdatedTime != nil
}

func (p *Message) IsSetMessageLevel() bool {
  return p.MessageLevel != nil
}

func (p *Message) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetEvent bool = false;
  var issetMessageId bool = false;
  var issetMessageType bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetEvent = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetMessageId = true
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetMessageType = true
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetEvent{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Event is not set"));
  }
  if !issetMessageId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MessageId is not set"));
  }
  if !issetMessageType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MessageType is not set"));
  }
  return nil
}

func (p *Message)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Event = v
}
  return nil
}

func (p *Message)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MessageId = v
}
  return nil
}

func (p *Message)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := MessageType(v)
  p.MessageType = temp
}
  return nil
}

func (p *Message)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UpdatedTime = &v
}
  return nil
}

func (p *Message)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := MessageLevel(v)
  p.MessageLevel = &temp
}
  return nil
}

func (p *Message) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Message"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Message) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("event", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:event: ", p), err) }
  if err := oprot.WriteBinary(p.Event); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.event (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:event: ", p), err) }
  return err
}

func (p *Message) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("messageId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:messageId: ", p), err) }
  if err := oprot.WriteString(string(p.MessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.messageId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:messageId: ", p), err) }
  return err
}

func (p *Message) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("messageType", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:messageType: ", p), err) }
  if err := oprot.WriteI32(int32(p.MessageType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.messageType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:messageType: ", p), err) }
  return err
}

func (p *Message) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetUpdatedTime() {
    if err := oprot.WriteFieldBegin("updatedTime", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:updatedTime: ", p), err) }
    if err := oprot.WriteI64(int64(*p.UpdatedTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.updatedTime (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:updatedTime: ", p), err) }
  }
  return err
}

func (p *Message) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetMessageLevel() {
    if err := oprot.WriteFieldBegin("messageLevel", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:messageLevel: ", p), err) }
    if err := oprot.WriteI32(int32(*p.MessageLevel)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.messageLevel (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:messageLevel: ", p), err) }
  }
  return err
}

func (p *Message) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Message(%+v)", *p)
}

