// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package experiment_model

import (
	"bytes"
	"reflect"
	"database/sql/driver"
	"errors"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"airavata_commons"
	"application_io_models"
	"scheduling_model"
	"status_models"
	"process_model"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = airavata_commons.GoUnusedProtection__
var _ = application_io_models.GoUnusedProtection__
var _ = scheduling_model.GoUnusedProtection__
var _ = status_models.GoUnusedProtection__
var _ = process_model.GoUnusedProtection__
type ExperimentType int64
const (
  ExperimentType_SINGLE_APPLICATION ExperimentType = 0
  ExperimentType_WORKFLOW ExperimentType = 1
)

func (p ExperimentType) String() string {
  switch p {
  case ExperimentType_SINGLE_APPLICATION: return "SINGLE_APPLICATION"
  case ExperimentType_WORKFLOW: return "WORKFLOW"
  }
  return "<UNSET>"
}

func ExperimentTypeFromString(s string) (ExperimentType, error) {
  switch s {
  case "SINGLE_APPLICATION": return ExperimentType_SINGLE_APPLICATION, nil 
  case "WORKFLOW": return ExperimentType_WORKFLOW, nil 
  }
  return ExperimentType(0), fmt.Errorf("not a valid ExperimentType string")
}


func ExperimentTypePtr(v ExperimentType) *ExperimentType { return &v }

func (p ExperimentType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ExperimentType) UnmarshalText(text []byte) error {
q, err := ExperimentTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ExperimentType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ExperimentType(v)
return nil
}

func (p * ExperimentType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ExperimentSearchFields int64
const (
  ExperimentSearchFields_EXPERIMENT_NAME ExperimentSearchFields = 0
  ExperimentSearchFields_EXPERIMENT_DESC ExperimentSearchFields = 1
  ExperimentSearchFields_APPLICATION_ID ExperimentSearchFields = 2
  ExperimentSearchFields_FROM_DATE ExperimentSearchFields = 3
  ExperimentSearchFields_TO_DATE ExperimentSearchFields = 4
  ExperimentSearchFields_STATUS ExperimentSearchFields = 5
  ExperimentSearchFields_PROJECT_ID ExperimentSearchFields = 6
)

func (p ExperimentSearchFields) String() string {
  switch p {
  case ExperimentSearchFields_EXPERIMENT_NAME: return "EXPERIMENT_NAME"
  case ExperimentSearchFields_EXPERIMENT_DESC: return "EXPERIMENT_DESC"
  case ExperimentSearchFields_APPLICATION_ID: return "APPLICATION_ID"
  case ExperimentSearchFields_FROM_DATE: return "FROM_DATE"
  case ExperimentSearchFields_TO_DATE: return "TO_DATE"
  case ExperimentSearchFields_STATUS: return "STATUS"
  case ExperimentSearchFields_PROJECT_ID: return "PROJECT_ID"
  }
  return "<UNSET>"
}

func ExperimentSearchFieldsFromString(s string) (ExperimentSearchFields, error) {
  switch s {
  case "EXPERIMENT_NAME": return ExperimentSearchFields_EXPERIMENT_NAME, nil 
  case "EXPERIMENT_DESC": return ExperimentSearchFields_EXPERIMENT_DESC, nil 
  case "APPLICATION_ID": return ExperimentSearchFields_APPLICATION_ID, nil 
  case "FROM_DATE": return ExperimentSearchFields_FROM_DATE, nil 
  case "TO_DATE": return ExperimentSearchFields_TO_DATE, nil 
  case "STATUS": return ExperimentSearchFields_STATUS, nil 
  case "PROJECT_ID": return ExperimentSearchFields_PROJECT_ID, nil 
  }
  return ExperimentSearchFields(0), fmt.Errorf("not a valid ExperimentSearchFields string")
}


func ExperimentSearchFieldsPtr(v ExperimentSearchFields) *ExperimentSearchFields { return &v }

func (p ExperimentSearchFields) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ExperimentSearchFields) UnmarshalText(text []byte) error {
q, err := ExperimentSearchFieldsFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ExperimentSearchFields) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ExperimentSearchFields(v)
return nil
}

func (p * ExperimentSearchFields) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ProjectSearchFields int64
const (
  ProjectSearchFields_PROJECT_NAME ProjectSearchFields = 0
  ProjectSearchFields_PROJECT_DESCRIPTION ProjectSearchFields = 1
)

func (p ProjectSearchFields) String() string {
  switch p {
  case ProjectSearchFields_PROJECT_NAME: return "PROJECT_NAME"
  case ProjectSearchFields_PROJECT_DESCRIPTION: return "PROJECT_DESCRIPTION"
  }
  return "<UNSET>"
}

func ProjectSearchFieldsFromString(s string) (ProjectSearchFields, error) {
  switch s {
  case "PROJECT_NAME": return ProjectSearchFields_PROJECT_NAME, nil 
  case "PROJECT_DESCRIPTION": return ProjectSearchFields_PROJECT_DESCRIPTION, nil 
  }
  return ProjectSearchFields(0), fmt.Errorf("not a valid ProjectSearchFields string")
}


func ProjectSearchFieldsPtr(v ProjectSearchFields) *ProjectSearchFields { return &v }

func (p ProjectSearchFields) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ProjectSearchFields) UnmarshalText(text []byte) error {
q, err := ProjectSearchFieldsFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ProjectSearchFields) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ProjectSearchFields(v)
return nil
}

func (p * ProjectSearchFields) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// A structure holding the experiment configuration.
// 
// 
// 
// Attributes:
//  - AiravataAutoSchedule
//  - OverrideManualScheduledParams
//  - ShareExperimentPublicly
//  - ComputationalResourceScheduling
//  - ThrottleResources
//  - UserDN
//  - GenerateCert
//  - StorageId
//  - ExperimentDataDir
//  - UseUserCRPref
type UserConfigurationDataModel struct {
  AiravataAutoSchedule bool `thrift:"airavataAutoSchedule,1,required" db:"airavataAutoSchedule" json:"airavataAutoSchedule"`
  OverrideManualScheduledParams bool `thrift:"overrideManualScheduledParams,2,required" db:"overrideManualScheduledParams" json:"overrideManualScheduledParams"`
  ShareExperimentPublicly bool `thrift:"shareExperimentPublicly,3" db:"shareExperimentPublicly" json:"shareExperimentPublicly,omitempty"`
  ComputationalResourceScheduling *scheduling_model.ComputationalResourceSchedulingModel `thrift:"computationalResourceScheduling,4" db:"computationalResourceScheduling" json:"computationalResourceScheduling,omitempty"`
  ThrottleResources bool `thrift:"throttleResources,5" db:"throttleResources" json:"throttleResources,omitempty"`
  UserDN *string `thrift:"userDN,6" db:"userDN" json:"userDN,omitempty"`
  GenerateCert bool `thrift:"generateCert,7" db:"generateCert" json:"generateCert,omitempty"`
  StorageId *string `thrift:"storageId,8" db:"storageId" json:"storageId,omitempty"`
  ExperimentDataDir *string `thrift:"experimentDataDir,9" db:"experimentDataDir" json:"experimentDataDir,omitempty"`
  UseUserCRPref *bool `thrift:"useUserCRPref,10" db:"useUserCRPref" json:"useUserCRPref,omitempty"`
}

func NewUserConfigurationDataModel() *UserConfigurationDataModel {
  return &UserConfigurationDataModel{}
}


func (p *UserConfigurationDataModel) GetAiravataAutoSchedule() bool {
  return p.AiravataAutoSchedule
}

func (p *UserConfigurationDataModel) GetOverrideManualScheduledParams() bool {
  return p.OverrideManualScheduledParams
}
var UserConfigurationDataModel_ShareExperimentPublicly_DEFAULT bool = false

func (p *UserConfigurationDataModel) GetShareExperimentPublicly() bool {
  return p.ShareExperimentPublicly
}
var UserConfigurationDataModel_ComputationalResourceScheduling_DEFAULT *scheduling_model.ComputationalResourceSchedulingModel
func (p *UserConfigurationDataModel) GetComputationalResourceScheduling() *scheduling_model.ComputationalResourceSchedulingModel {
  if !p.IsSetComputationalResourceScheduling() {
    return UserConfigurationDataModel_ComputationalResourceScheduling_DEFAULT
  }
return p.ComputationalResourceScheduling
}
var UserConfigurationDataModel_ThrottleResources_DEFAULT bool = false

func (p *UserConfigurationDataModel) GetThrottleResources() bool {
  return p.ThrottleResources
}
var UserConfigurationDataModel_UserDN_DEFAULT string
func (p *UserConfigurationDataModel) GetUserDN() string {
  if !p.IsSetUserDN() {
    return UserConfigurationDataModel_UserDN_DEFAULT
  }
return *p.UserDN
}
var UserConfigurationDataModel_GenerateCert_DEFAULT bool = false

func (p *UserConfigurationDataModel) GetGenerateCert() bool {
  return p.GenerateCert
}
var UserConfigurationDataModel_StorageId_DEFAULT string
func (p *UserConfigurationDataModel) GetStorageId() string {
  if !p.IsSetStorageId() {
    return UserConfigurationDataModel_StorageId_DEFAULT
  }
return *p.StorageId
}
var UserConfigurationDataModel_ExperimentDataDir_DEFAULT string
func (p *UserConfigurationDataModel) GetExperimentDataDir() string {
  if !p.IsSetExperimentDataDir() {
    return UserConfigurationDataModel_ExperimentDataDir_DEFAULT
  }
return *p.ExperimentDataDir
}
var UserConfigurationDataModel_UseUserCRPref_DEFAULT bool
func (p *UserConfigurationDataModel) GetUseUserCRPref() bool {
  if !p.IsSetUseUserCRPref() {
    return UserConfigurationDataModel_UseUserCRPref_DEFAULT
  }
return *p.UseUserCRPref
}
func (p *UserConfigurationDataModel) IsSetShareExperimentPublicly() bool {
  return p.ShareExperimentPublicly != UserConfigurationDataModel_ShareExperimentPublicly_DEFAULT
}

func (p *UserConfigurationDataModel) IsSetComputationalResourceScheduling() bool {
  return p.ComputationalResourceScheduling != nil
}

func (p *UserConfigurationDataModel) IsSetThrottleResources() bool {
  return p.ThrottleResources != UserConfigurationDataModel_ThrottleResources_DEFAULT
}

func (p *UserConfigurationDataModel) IsSetUserDN() bool {
  return p.UserDN != nil
}

func (p *UserConfigurationDataModel) IsSetGenerateCert() bool {
  return p.GenerateCert != UserConfigurationDataModel_GenerateCert_DEFAULT
}

func (p *UserConfigurationDataModel) IsSetStorageId() bool {
  return p.StorageId != nil
}

func (p *UserConfigurationDataModel) IsSetExperimentDataDir() bool {
  return p.ExperimentDataDir != nil
}

func (p *UserConfigurationDataModel) IsSetUseUserCRPref() bool {
  return p.UseUserCRPref != nil
}

func (p *UserConfigurationDataModel) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAiravataAutoSchedule bool = false;
  var issetOverrideManualScheduledParams bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAiravataAutoSchedule = true
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetOverrideManualScheduledParams = true
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAiravataAutoSchedule{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AiravataAutoSchedule is not set"));
  }
  if !issetOverrideManualScheduledParams{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field OverrideManualScheduledParams is not set"));
  }
  return nil
}

func (p *UserConfigurationDataModel)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AiravataAutoSchedule = v
}
  return nil
}

func (p *UserConfigurationDataModel)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.OverrideManualScheduledParams = v
}
  return nil
}

func (p *UserConfigurationDataModel)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ShareExperimentPublicly = v
}
  return nil
}

func (p *UserConfigurationDataModel)  ReadField4(iprot thrift.TProtocol) error {
  p.ComputationalResourceScheduling = &scheduling_model.ComputationalResourceSchedulingModel{}
  if err := p.ComputationalResourceScheduling.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ComputationalResourceScheduling), err)
  }
  return nil
}

func (p *UserConfigurationDataModel)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ThrottleResources = v
}
  return nil
}

func (p *UserConfigurationDataModel)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.UserDN = &v
}
  return nil
}

func (p *UserConfigurationDataModel)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.GenerateCert = v
}
  return nil
}

func (p *UserConfigurationDataModel)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.StorageId = &v
}
  return nil
}

func (p *UserConfigurationDataModel)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.ExperimentDataDir = &v
}
  return nil
}

func (p *UserConfigurationDataModel)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.UseUserCRPref = &v
}
  return nil
}

func (p *UserConfigurationDataModel) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserConfigurationDataModel"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserConfigurationDataModel) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("airavataAutoSchedule", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:airavataAutoSchedule: ", p), err) }
  if err := oprot.WriteBool(bool(p.AiravataAutoSchedule)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.airavataAutoSchedule (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:airavataAutoSchedule: ", p), err) }
  return err
}

func (p *UserConfigurationDataModel) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("overrideManualScheduledParams", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:overrideManualScheduledParams: ", p), err) }
  if err := oprot.WriteBool(bool(p.OverrideManualScheduledParams)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.overrideManualScheduledParams (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:overrideManualScheduledParams: ", p), err) }
  return err
}

func (p *UserConfigurationDataModel) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetShareExperimentPublicly() {
    if err := oprot.WriteFieldBegin("shareExperimentPublicly", thrift.BOOL, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:shareExperimentPublicly: ", p), err) }
    if err := oprot.WriteBool(bool(p.ShareExperimentPublicly)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.shareExperimentPublicly (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:shareExperimentPublicly: ", p), err) }
  }
  return err
}

func (p *UserConfigurationDataModel) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetComputationalResourceScheduling() {
    if err := oprot.WriteFieldBegin("computationalResourceScheduling", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:computationalResourceScheduling: ", p), err) }
    if err := p.ComputationalResourceScheduling.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ComputationalResourceScheduling), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:computationalResourceScheduling: ", p), err) }
  }
  return err
}

func (p *UserConfigurationDataModel) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetThrottleResources() {
    if err := oprot.WriteFieldBegin("throttleResources", thrift.BOOL, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:throttleResources: ", p), err) }
    if err := oprot.WriteBool(bool(p.ThrottleResources)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.throttleResources (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:throttleResources: ", p), err) }
  }
  return err
}

func (p *UserConfigurationDataModel) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetUserDN() {
    if err := oprot.WriteFieldBegin("userDN", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:userDN: ", p), err) }
    if err := oprot.WriteString(string(*p.UserDN)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.userDN (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:userDN: ", p), err) }
  }
  return err
}

func (p *UserConfigurationDataModel) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetGenerateCert() {
    if err := oprot.WriteFieldBegin("generateCert", thrift.BOOL, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:generateCert: ", p), err) }
    if err := oprot.WriteBool(bool(p.GenerateCert)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.generateCert (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:generateCert: ", p), err) }
  }
  return err
}

func (p *UserConfigurationDataModel) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetStorageId() {
    if err := oprot.WriteFieldBegin("storageId", thrift.STRING, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:storageId: ", p), err) }
    if err := oprot.WriteString(string(*p.StorageId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.storageId (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:storageId: ", p), err) }
  }
  return err
}

func (p *UserConfigurationDataModel) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetExperimentDataDir() {
    if err := oprot.WriteFieldBegin("experimentDataDir", thrift.STRING, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:experimentDataDir: ", p), err) }
    if err := oprot.WriteString(string(*p.ExperimentDataDir)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.experimentDataDir (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:experimentDataDir: ", p), err) }
  }
  return err
}

func (p *UserConfigurationDataModel) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetUseUserCRPref() {
    if err := oprot.WriteFieldBegin("useUserCRPref", thrift.BOOL, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:useUserCRPref: ", p), err) }
    if err := oprot.WriteBool(bool(*p.UseUserCRPref)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.useUserCRPref (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:useUserCRPref: ", p), err) }
  }
  return err
}

func (p *UserConfigurationDataModel) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserConfigurationDataModel(%+v)", *p)
}

// A structure holding the experiment metadata and its child models.
// 
// userName:
//   The user name of the targeted gateway end user on whose behalf the experiment is being created.
//     the associated gateway identity can only be inferred from the security hand-shake so as to avoid
//     authorized Airavata Clients mimicking an unauthorized request. If a gateway is not registered with
//     Airavata, an authorization exception is thrown.
// 
// experimentName:
//   The name of the experiment as defined by the user. The name need not be unique as uniqueness is enforced
//      by the generated experiment id.
// 
// experimentDescription:
//    The verbose description of the experiment. This is an optional parameter.
// 
// Attributes:
//  - ExperimentId
//  - ProjectId
//  - GatewayId
//  - ExperimentType
//  - UserName
//  - ExperimentName
//  - CreationTime
//  - Description
//  - ExecutionId
//  - GatewayExecutionId
//  - GatewayInstanceId
//  - EnableEmailNotification
//  - EmailAddresses
//  - UserConfigurationData
//  - ExperimentInputs
//  - ExperimentOutputs
//  - ExperimentStatus
//  - Errors
//  - Processes
type ExperimentModel struct {
  ExperimentId string `thrift:"experimentId,1,required" db:"experimentId" json:"experimentId"`
  ProjectId string `thrift:"projectId,2,required" db:"projectId" json:"projectId"`
  GatewayId string `thrift:"gatewayId,3,required" db:"gatewayId" json:"gatewayId"`
  ExperimentType ExperimentType `thrift:"experimentType,4,required" db:"experimentType" json:"experimentType"`
  UserName string `thrift:"userName,5,required" db:"userName" json:"userName"`
  ExperimentName string `thrift:"experimentName,6,required" db:"experimentName" json:"experimentName"`
  CreationTime *int64 `thrift:"creationTime,7" db:"creationTime" json:"creationTime,omitempty"`
  Description *string `thrift:"description,8" db:"description" json:"description,omitempty"`
  ExecutionId *string `thrift:"executionId,9" db:"executionId" json:"executionId,omitempty"`
  GatewayExecutionId *string `thrift:"gatewayExecutionId,10" db:"gatewayExecutionId" json:"gatewayExecutionId,omitempty"`
  GatewayInstanceId *string `thrift:"gatewayInstanceId,11" db:"gatewayInstanceId" json:"gatewayInstanceId,omitempty"`
  EnableEmailNotification *bool `thrift:"enableEmailNotification,12" db:"enableEmailNotification" json:"enableEmailNotification,omitempty"`
  EmailAddresses []string `thrift:"emailAddresses,13" db:"emailAddresses" json:"emailAddresses,omitempty"`
  UserConfigurationData *UserConfigurationDataModel `thrift:"userConfigurationData,14" db:"userConfigurationData" json:"userConfigurationData,omitempty"`
  ExperimentInputs []*application_io_models.InputDataObjectType `thrift:"experimentInputs,15" db:"experimentInputs" json:"experimentInputs,omitempty"`
  ExperimentOutputs []*application_io_models.OutputDataObjectType `thrift:"experimentOutputs,16" db:"experimentOutputs" json:"experimentOutputs,omitempty"`
  ExperimentStatus []*status_models.ExperimentStatus `thrift:"experimentStatus,17" db:"experimentStatus" json:"experimentStatus,omitempty"`
  Errors []*airavata_commons.ErrorModel `thrift:"errors,18" db:"errors" json:"errors,omitempty"`
  Processes []*process_model.ProcessModel `thrift:"processes,19" db:"processes" json:"processes,omitempty"`
}

func NewExperimentModel() *ExperimentModel {
  return &ExperimentModel{
ExperimentId: "DO_NOT_SET_AT_CLIENTS",

ExperimentType: 0,
}
}


func (p *ExperimentModel) GetExperimentId() string {
  return p.ExperimentId
}

func (p *ExperimentModel) GetProjectId() string {
  return p.ProjectId
}

func (p *ExperimentModel) GetGatewayId() string {
  return p.GatewayId
}

func (p *ExperimentModel) GetExperimentType() ExperimentType {
  return p.ExperimentType
}

func (p *ExperimentModel) GetUserName() string {
  return p.UserName
}

func (p *ExperimentModel) GetExperimentName() string {
  return p.ExperimentName
}
var ExperimentModel_CreationTime_DEFAULT int64
func (p *ExperimentModel) GetCreationTime() int64 {
  if !p.IsSetCreationTime() {
    return ExperimentModel_CreationTime_DEFAULT
  }
return *p.CreationTime
}
var ExperimentModel_Description_DEFAULT string
func (p *ExperimentModel) GetDescription() string {
  if !p.IsSetDescription() {
    return ExperimentModel_Description_DEFAULT
  }
return *p.Description
}
var ExperimentModel_ExecutionId_DEFAULT string
func (p *ExperimentModel) GetExecutionId() string {
  if !p.IsSetExecutionId() {
    return ExperimentModel_ExecutionId_DEFAULT
  }
return *p.ExecutionId
}
var ExperimentModel_GatewayExecutionId_DEFAULT string
func (p *ExperimentModel) GetGatewayExecutionId() string {
  if !p.IsSetGatewayExecutionId() {
    return ExperimentModel_GatewayExecutionId_DEFAULT
  }
return *p.GatewayExecutionId
}
var ExperimentModel_GatewayInstanceId_DEFAULT string
func (p *ExperimentModel) GetGatewayInstanceId() string {
  if !p.IsSetGatewayInstanceId() {
    return ExperimentModel_GatewayInstanceId_DEFAULT
  }
return *p.GatewayInstanceId
}
var ExperimentModel_EnableEmailNotification_DEFAULT bool
func (p *ExperimentModel) GetEnableEmailNotification() bool {
  if !p.IsSetEnableEmailNotification() {
    return ExperimentModel_EnableEmailNotification_DEFAULT
  }
return *p.EnableEmailNotification
}
var ExperimentModel_EmailAddresses_DEFAULT []string

func (p *ExperimentModel) GetEmailAddresses() []string {
  return p.EmailAddresses
}
var ExperimentModel_UserConfigurationData_DEFAULT *UserConfigurationDataModel
func (p *ExperimentModel) GetUserConfigurationData() *UserConfigurationDataModel {
  if !p.IsSetUserConfigurationData() {
    return ExperimentModel_UserConfigurationData_DEFAULT
  }
return p.UserConfigurationData
}
var ExperimentModel_ExperimentInputs_DEFAULT []*application_io_models.InputDataObjectType

func (p *ExperimentModel) GetExperimentInputs() []*application_io_models.InputDataObjectType {
  return p.ExperimentInputs
}
var ExperimentModel_ExperimentOutputs_DEFAULT []*application_io_models.OutputDataObjectType

func (p *ExperimentModel) GetExperimentOutputs() []*application_io_models.OutputDataObjectType {
  return p.ExperimentOutputs
}
var ExperimentModel_ExperimentStatus_DEFAULT []*status_models.ExperimentStatus

func (p *ExperimentModel) GetExperimentStatus() []*status_models.ExperimentStatus {
  return p.ExperimentStatus
}
var ExperimentModel_Errors_DEFAULT []*airavata_commons.ErrorModel

func (p *ExperimentModel) GetErrors() []*airavata_commons.ErrorModel {
  return p.Errors
}
var ExperimentModel_Processes_DEFAULT []*process_model.ProcessModel

func (p *ExperimentModel) GetProcesses() []*process_model.ProcessModel {
  return p.Processes
}
func (p *ExperimentModel) IsSetCreationTime() bool {
  return p.CreationTime != nil
}

func (p *ExperimentModel) IsSetDescription() bool {
  return p.Description != nil
}

func (p *ExperimentModel) IsSetExecutionId() bool {
  return p.ExecutionId != nil
}

func (p *ExperimentModel) IsSetGatewayExecutionId() bool {
  return p.GatewayExecutionId != nil
}

func (p *ExperimentModel) IsSetGatewayInstanceId() bool {
  return p.GatewayInstanceId != nil
}

func (p *ExperimentModel) IsSetEnableEmailNotification() bool {
  return p.EnableEmailNotification != nil
}

func (p *ExperimentModel) IsSetEmailAddresses() bool {
  return p.EmailAddresses != nil
}

func (p *ExperimentModel) IsSetUserConfigurationData() bool {
  return p.UserConfigurationData != nil
}

func (p *ExperimentModel) IsSetExperimentInputs() bool {
  return p.ExperimentInputs != nil
}

func (p *ExperimentModel) IsSetExperimentOutputs() bool {
  return p.ExperimentOutputs != nil
}

func (p *ExperimentModel) IsSetExperimentStatus() bool {
  return p.ExperimentStatus != nil
}

func (p *ExperimentModel) IsSetErrors() bool {
  return p.Errors != nil
}

func (p *ExperimentModel) IsSetProcesses() bool {
  return p.Processes != nil
}

func (p *ExperimentModel) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetExperimentId bool = false;
  var issetProjectId bool = false;
  var issetGatewayId bool = false;
  var issetExperimentType bool = false;
  var issetUserName bool = false;
  var issetExperimentName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetExperimentId = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProjectId = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetExperimentType = true
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserName = true
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetExperimentName = true
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField19(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetExperimentId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ExperimentId is not set"));
  }
  if !issetProjectId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProjectId is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  if !issetExperimentType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ExperimentType is not set"));
  }
  if !issetUserName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserName is not set"));
  }
  if !issetExperimentName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ExperimentName is not set"));
  }
  return nil
}

func (p *ExperimentModel)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ExperimentId = v
}
  return nil
}

func (p *ExperimentModel)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ProjectId = v
}
  return nil
}

func (p *ExperimentModel)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *ExperimentModel)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := ExperimentType(v)
  p.ExperimentType = temp
}
  return nil
}

func (p *ExperimentModel)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.UserName = v
}
  return nil
}

func (p *ExperimentModel)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ExperimentName = v
}
  return nil
}

func (p *ExperimentModel)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.CreationTime = &v
}
  return nil
}

func (p *ExperimentModel)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Description = &v
}
  return nil
}

func (p *ExperimentModel)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.ExecutionId = &v
}
  return nil
}

func (p *ExperimentModel)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.GatewayExecutionId = &v
}
  return nil
}

func (p *ExperimentModel)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.GatewayInstanceId = &v
}
  return nil
}

func (p *ExperimentModel)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.EnableEmailNotification = &v
}
  return nil
}

func (p *ExperimentModel)  ReadField13(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.EmailAddresses =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.EmailAddresses = append(p.EmailAddresses, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ExperimentModel)  ReadField14(iprot thrift.TProtocol) error {
  p.UserConfigurationData = &UserConfigurationDataModel{}
  if err := p.UserConfigurationData.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserConfigurationData), err)
  }
  return nil
}

func (p *ExperimentModel)  ReadField15(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*application_io_models.InputDataObjectType, 0, size)
  p.ExperimentInputs =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &application_io_models.InputDataObjectType{}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.ExperimentInputs = append(p.ExperimentInputs, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ExperimentModel)  ReadField16(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*application_io_models.OutputDataObjectType, 0, size)
  p.ExperimentOutputs =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &application_io_models.OutputDataObjectType{}
    if err := _elem2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.ExperimentOutputs = append(p.ExperimentOutputs, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ExperimentModel)  ReadField17(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*status_models.ExperimentStatus, 0, size)
  p.ExperimentStatus =  tSlice
  for i := 0; i < size; i ++ {
    _elem3 := &status_models.ExperimentStatus{}
    if err := _elem3.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
    }
    p.ExperimentStatus = append(p.ExperimentStatus, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ExperimentModel)  ReadField18(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*airavata_commons.ErrorModel, 0, size)
  p.Errors =  tSlice
  for i := 0; i < size; i ++ {
    _elem4 := &airavata_commons.ErrorModel{
    ErrorId: "DO_NOT_SET_AT_CLIENTS",
}
    if err := _elem4.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
    }
    p.Errors = append(p.Errors, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ExperimentModel)  ReadField19(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*process_model.ProcessModel, 0, size)
  p.Processes =  tSlice
  for i := 0; i < size; i ++ {
    _elem5 := &process_model.ProcessModel{
    ProcessId: "DO_NOT_SET_AT_CLIENTS",
}
    if err := _elem5.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem5), err)
    }
    p.Processes = append(p.Processes, _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ExperimentModel) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ExperimentModel"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExperimentModel) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("experimentId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:experimentId: ", p), err) }
  if err := oprot.WriteString(string(p.ExperimentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.experimentId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:experimentId: ", p), err) }
  return err
}

func (p *ExperimentModel) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("projectId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:projectId: ", p), err) }
  if err := oprot.WriteString(string(p.ProjectId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.projectId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:projectId: ", p), err) }
  return err
}

func (p *ExperimentModel) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gatewayId: ", p), err) }
  return err
}

func (p *ExperimentModel) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("experimentType", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:experimentType: ", p), err) }
  if err := oprot.WriteI32(int32(p.ExperimentType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.experimentType (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:experimentType: ", p), err) }
  return err
}

func (p *ExperimentModel) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userName", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:userName: ", p), err) }
  if err := oprot.WriteString(string(p.UserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userName (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:userName: ", p), err) }
  return err
}

func (p *ExperimentModel) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("experimentName", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:experimentName: ", p), err) }
  if err := oprot.WriteString(string(p.ExperimentName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.experimentName (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:experimentName: ", p), err) }
  return err
}

func (p *ExperimentModel) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetCreationTime() {
    if err := oprot.WriteFieldBegin("creationTime", thrift.I64, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:creationTime: ", p), err) }
    if err := oprot.WriteI64(int64(*p.CreationTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.creationTime (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:creationTime: ", p), err) }
  }
  return err
}

func (p *ExperimentModel) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetDescription() {
    if err := oprot.WriteFieldBegin("description", thrift.STRING, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:description: ", p), err) }
    if err := oprot.WriteString(string(*p.Description)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.description (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:description: ", p), err) }
  }
  return err
}

func (p *ExperimentModel) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetExecutionId() {
    if err := oprot.WriteFieldBegin("executionId", thrift.STRING, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:executionId: ", p), err) }
    if err := oprot.WriteString(string(*p.ExecutionId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.executionId (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:executionId: ", p), err) }
  }
  return err
}

func (p *ExperimentModel) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetGatewayExecutionId() {
    if err := oprot.WriteFieldBegin("gatewayExecutionId", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:gatewayExecutionId: ", p), err) }
    if err := oprot.WriteString(string(*p.GatewayExecutionId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.gatewayExecutionId (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:gatewayExecutionId: ", p), err) }
  }
  return err
}

func (p *ExperimentModel) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetGatewayInstanceId() {
    if err := oprot.WriteFieldBegin("gatewayInstanceId", thrift.STRING, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:gatewayInstanceId: ", p), err) }
    if err := oprot.WriteString(string(*p.GatewayInstanceId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.gatewayInstanceId (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:gatewayInstanceId: ", p), err) }
  }
  return err
}

func (p *ExperimentModel) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetEnableEmailNotification() {
    if err := oprot.WriteFieldBegin("enableEmailNotification", thrift.BOOL, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:enableEmailNotification: ", p), err) }
    if err := oprot.WriteBool(bool(*p.EnableEmailNotification)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.enableEmailNotification (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:enableEmailNotification: ", p), err) }
  }
  return err
}

func (p *ExperimentModel) writeField13(oprot thrift.TProtocol) (err error) {
  if p.IsSetEmailAddresses() {
    if err := oprot.WriteFieldBegin("emailAddresses", thrift.LIST, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:emailAddresses: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.EmailAddresses)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.EmailAddresses {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:emailAddresses: ", p), err) }
  }
  return err
}

func (p *ExperimentModel) writeField14(oprot thrift.TProtocol) (err error) {
  if p.IsSetUserConfigurationData() {
    if err := oprot.WriteFieldBegin("userConfigurationData", thrift.STRUCT, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:userConfigurationData: ", p), err) }
    if err := p.UserConfigurationData.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserConfigurationData), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:userConfigurationData: ", p), err) }
  }
  return err
}

func (p *ExperimentModel) writeField15(oprot thrift.TProtocol) (err error) {
  if p.IsSetExperimentInputs() {
    if err := oprot.WriteFieldBegin("experimentInputs", thrift.LIST, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:experimentInputs: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ExperimentInputs)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ExperimentInputs {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:experimentInputs: ", p), err) }
  }
  return err
}

func (p *ExperimentModel) writeField16(oprot thrift.TProtocol) (err error) {
  if p.IsSetExperimentOutputs() {
    if err := oprot.WriteFieldBegin("experimentOutputs", thrift.LIST, 16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:experimentOutputs: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ExperimentOutputs)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ExperimentOutputs {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 16:experimentOutputs: ", p), err) }
  }
  return err
}

func (p *ExperimentModel) writeField17(oprot thrift.TProtocol) (err error) {
  if p.IsSetExperimentStatus() {
    if err := oprot.WriteFieldBegin("experimentStatus", thrift.LIST, 17); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:experimentStatus: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ExperimentStatus)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ExperimentStatus {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 17:experimentStatus: ", p), err) }
  }
  return err
}

func (p *ExperimentModel) writeField18(oprot thrift.TProtocol) (err error) {
  if p.IsSetErrors() {
    if err := oprot.WriteFieldBegin("errors", thrift.LIST, 18); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:errors: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Errors)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Errors {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 18:errors: ", p), err) }
  }
  return err
}

func (p *ExperimentModel) writeField19(oprot thrift.TProtocol) (err error) {
  if p.IsSetProcesses() {
    if err := oprot.WriteFieldBegin("processes", thrift.LIST, 19); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:processes: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Processes)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Processes {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 19:processes: ", p), err) }
  }
  return err
}

func (p *ExperimentModel) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExperimentModel(%+v)", *p)
}

// Attributes:
//  - ExperimentId
//  - ProjectId
//  - GatewayId
//  - CreationTime
//  - UserName
//  - Name
//  - Description
//  - ExecutionId
//  - ResourceHostId
//  - ExperimentStatus
//  - StatusUpdateTime
type ExperimentSummaryModel struct {
  ExperimentId string `thrift:"experimentId,1,required" db:"experimentId" json:"experimentId"`
  ProjectId string `thrift:"projectId,2,required" db:"projectId" json:"projectId"`
  GatewayId string `thrift:"gatewayId,3,required" db:"gatewayId" json:"gatewayId"`
  CreationTime *int64 `thrift:"creationTime,4" db:"creationTime" json:"creationTime,omitempty"`
  UserName string `thrift:"userName,5,required" db:"userName" json:"userName"`
  Name string `thrift:"name,6,required" db:"name" json:"name"`
  Description *string `thrift:"description,7" db:"description" json:"description,omitempty"`
  ExecutionId *string `thrift:"executionId,8" db:"executionId" json:"executionId,omitempty"`
  ResourceHostId *string `thrift:"resourceHostId,9" db:"resourceHostId" json:"resourceHostId,omitempty"`
  ExperimentStatus *string `thrift:"experimentStatus,10" db:"experimentStatus" json:"experimentStatus,omitempty"`
  // unused field # 11
  StatusUpdateTime *int64 `thrift:"statusUpdateTime,12" db:"statusUpdateTime" json:"statusUpdateTime,omitempty"`
}

func NewExperimentSummaryModel() *ExperimentSummaryModel {
  return &ExperimentSummaryModel{}
}


func (p *ExperimentSummaryModel) GetExperimentId() string {
  return p.ExperimentId
}

func (p *ExperimentSummaryModel) GetProjectId() string {
  return p.ProjectId
}

func (p *ExperimentSummaryModel) GetGatewayId() string {
  return p.GatewayId
}
var ExperimentSummaryModel_CreationTime_DEFAULT int64
func (p *ExperimentSummaryModel) GetCreationTime() int64 {
  if !p.IsSetCreationTime() {
    return ExperimentSummaryModel_CreationTime_DEFAULT
  }
return *p.CreationTime
}

func (p *ExperimentSummaryModel) GetUserName() string {
  return p.UserName
}

func (p *ExperimentSummaryModel) GetName() string {
  return p.Name
}
var ExperimentSummaryModel_Description_DEFAULT string
func (p *ExperimentSummaryModel) GetDescription() string {
  if !p.IsSetDescription() {
    return ExperimentSummaryModel_Description_DEFAULT
  }
return *p.Description
}
var ExperimentSummaryModel_ExecutionId_DEFAULT string
func (p *ExperimentSummaryModel) GetExecutionId() string {
  if !p.IsSetExecutionId() {
    return ExperimentSummaryModel_ExecutionId_DEFAULT
  }
return *p.ExecutionId
}
var ExperimentSummaryModel_ResourceHostId_DEFAULT string
func (p *ExperimentSummaryModel) GetResourceHostId() string {
  if !p.IsSetResourceHostId() {
    return ExperimentSummaryModel_ResourceHostId_DEFAULT
  }
return *p.ResourceHostId
}
var ExperimentSummaryModel_ExperimentStatus_DEFAULT string
func (p *ExperimentSummaryModel) GetExperimentStatus() string {
  if !p.IsSetExperimentStatus() {
    return ExperimentSummaryModel_ExperimentStatus_DEFAULT
  }
return *p.ExperimentStatus
}
var ExperimentSummaryModel_StatusUpdateTime_DEFAULT int64
func (p *ExperimentSummaryModel) GetStatusUpdateTime() int64 {
  if !p.IsSetStatusUpdateTime() {
    return ExperimentSummaryModel_StatusUpdateTime_DEFAULT
  }
return *p.StatusUpdateTime
}
func (p *ExperimentSummaryModel) IsSetCreationTime() bool {
  return p.CreationTime != nil
}

func (p *ExperimentSummaryModel) IsSetDescription() bool {
  return p.Description != nil
}

func (p *ExperimentSummaryModel) IsSetExecutionId() bool {
  return p.ExecutionId != nil
}

func (p *ExperimentSummaryModel) IsSetResourceHostId() bool {
  return p.ResourceHostId != nil
}

func (p *ExperimentSummaryModel) IsSetExperimentStatus() bool {
  return p.ExperimentStatus != nil
}

func (p *ExperimentSummaryModel) IsSetStatusUpdateTime() bool {
  return p.StatusUpdateTime != nil
}

func (p *ExperimentSummaryModel) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetExperimentId bool = false;
  var issetProjectId bool = false;
  var issetGatewayId bool = false;
  var issetUserName bool = false;
  var issetName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetExperimentId = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProjectId = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserName = true
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetName = true
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetExperimentId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ExperimentId is not set"));
  }
  if !issetProjectId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProjectId is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  if !issetUserName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserName is not set"));
  }
  if !issetName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"));
  }
  return nil
}

func (p *ExperimentSummaryModel)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ExperimentId = v
}
  return nil
}

func (p *ExperimentSummaryModel)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ProjectId = v
}
  return nil
}

func (p *ExperimentSummaryModel)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *ExperimentSummaryModel)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.CreationTime = &v
}
  return nil
}

func (p *ExperimentSummaryModel)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.UserName = v
}
  return nil
}

func (p *ExperimentSummaryModel)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *ExperimentSummaryModel)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Description = &v
}
  return nil
}

func (p *ExperimentSummaryModel)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.ExecutionId = &v
}
  return nil
}

func (p *ExperimentSummaryModel)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.ResourceHostId = &v
}
  return nil
}

func (p *ExperimentSummaryModel)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.ExperimentStatus = &v
}
  return nil
}

func (p *ExperimentSummaryModel)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.StatusUpdateTime = &v
}
  return nil
}

func (p *ExperimentSummaryModel) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ExperimentSummaryModel"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExperimentSummaryModel) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("experimentId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:experimentId: ", p), err) }
  if err := oprot.WriteString(string(p.ExperimentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.experimentId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:experimentId: ", p), err) }
  return err
}

func (p *ExperimentSummaryModel) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("projectId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:projectId: ", p), err) }
  if err := oprot.WriteString(string(p.ProjectId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.projectId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:projectId: ", p), err) }
  return err
}

func (p *ExperimentSummaryModel) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gatewayId: ", p), err) }
  return err
}

func (p *ExperimentSummaryModel) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetCreationTime() {
    if err := oprot.WriteFieldBegin("creationTime", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:creationTime: ", p), err) }
    if err := oprot.WriteI64(int64(*p.CreationTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.creationTime (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:creationTime: ", p), err) }
  }
  return err
}

func (p *ExperimentSummaryModel) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userName", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:userName: ", p), err) }
  if err := oprot.WriteString(string(p.UserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userName (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:userName: ", p), err) }
  return err
}

func (p *ExperimentSummaryModel) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:name: ", p), err) }
  return err
}

func (p *ExperimentSummaryModel) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetDescription() {
    if err := oprot.WriteFieldBegin("description", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:description: ", p), err) }
    if err := oprot.WriteString(string(*p.Description)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.description (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:description: ", p), err) }
  }
  return err
}

func (p *ExperimentSummaryModel) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetExecutionId() {
    if err := oprot.WriteFieldBegin("executionId", thrift.STRING, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:executionId: ", p), err) }
    if err := oprot.WriteString(string(*p.ExecutionId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.executionId (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:executionId: ", p), err) }
  }
  return err
}

func (p *ExperimentSummaryModel) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetResourceHostId() {
    if err := oprot.WriteFieldBegin("resourceHostId", thrift.STRING, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:resourceHostId: ", p), err) }
    if err := oprot.WriteString(string(*p.ResourceHostId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.resourceHostId (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:resourceHostId: ", p), err) }
  }
  return err
}

func (p *ExperimentSummaryModel) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetExperimentStatus() {
    if err := oprot.WriteFieldBegin("experimentStatus", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:experimentStatus: ", p), err) }
    if err := oprot.WriteString(string(*p.ExperimentStatus)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.experimentStatus (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:experimentStatus: ", p), err) }
  }
  return err
}

func (p *ExperimentSummaryModel) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatusUpdateTime() {
    if err := oprot.WriteFieldBegin("statusUpdateTime", thrift.I64, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:statusUpdateTime: ", p), err) }
    if err := oprot.WriteI64(int64(*p.StatusUpdateTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.statusUpdateTime (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:statusUpdateTime: ", p), err) }
  }
  return err
}

func (p *ExperimentSummaryModel) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExperimentSummaryModel(%+v)", *p)
}

// Attributes:
//  - AllExperimentCount
//  - CompletedExperimentCount
//  - CancelledExperimentCount
//  - FailedExperimentCount
//  - CreatedExperimentCount
//  - RunningExperimentCount
//  - AllExperiments
//  - CompletedExperiments
//  - FailedExperiments
//  - CancelledExperiments
//  - CreatedExperiments
//  - RunningExperiments
type ExperimentStatistics struct {
  AllExperimentCount int32 `thrift:"allExperimentCount,1,required" db:"allExperimentCount" json:"allExperimentCount"`
  CompletedExperimentCount int32 `thrift:"completedExperimentCount,2,required" db:"completedExperimentCount" json:"completedExperimentCount"`
  CancelledExperimentCount *int32 `thrift:"cancelledExperimentCount,3" db:"cancelledExperimentCount" json:"cancelledExperimentCount,omitempty"`
  FailedExperimentCount int32 `thrift:"failedExperimentCount,4,required" db:"failedExperimentCount" json:"failedExperimentCount"`
  CreatedExperimentCount int32 `thrift:"createdExperimentCount,5,required" db:"createdExperimentCount" json:"createdExperimentCount"`
  RunningExperimentCount int32 `thrift:"runningExperimentCount,6,required" db:"runningExperimentCount" json:"runningExperimentCount"`
  AllExperiments []*ExperimentSummaryModel `thrift:"allExperiments,7,required" db:"allExperiments" json:"allExperiments"`
  CompletedExperiments []*ExperimentSummaryModel `thrift:"completedExperiments,8" db:"completedExperiments" json:"completedExperiments,omitempty"`
  FailedExperiments []*ExperimentSummaryModel `thrift:"failedExperiments,9" db:"failedExperiments" json:"failedExperiments,omitempty"`
  CancelledExperiments []*ExperimentSummaryModel `thrift:"cancelledExperiments,10" db:"cancelledExperiments" json:"cancelledExperiments,omitempty"`
  CreatedExperiments []*ExperimentSummaryModel `thrift:"createdExperiments,11" db:"createdExperiments" json:"createdExperiments,omitempty"`
  RunningExperiments []*ExperimentSummaryModel `thrift:"runningExperiments,12" db:"runningExperiments" json:"runningExperiments,omitempty"`
}

func NewExperimentStatistics() *ExperimentStatistics {
  return &ExperimentStatistics{}
}


func (p *ExperimentStatistics) GetAllExperimentCount() int32 {
  return p.AllExperimentCount
}

func (p *ExperimentStatistics) GetCompletedExperimentCount() int32 {
  return p.CompletedExperimentCount
}
var ExperimentStatistics_CancelledExperimentCount_DEFAULT int32
func (p *ExperimentStatistics) GetCancelledExperimentCount() int32 {
  if !p.IsSetCancelledExperimentCount() {
    return ExperimentStatistics_CancelledExperimentCount_DEFAULT
  }
return *p.CancelledExperimentCount
}

func (p *ExperimentStatistics) GetFailedExperimentCount() int32 {
  return p.FailedExperimentCount
}

func (p *ExperimentStatistics) GetCreatedExperimentCount() int32 {
  return p.CreatedExperimentCount
}

func (p *ExperimentStatistics) GetRunningExperimentCount() int32 {
  return p.RunningExperimentCount
}

func (p *ExperimentStatistics) GetAllExperiments() []*ExperimentSummaryModel {
  return p.AllExperiments
}
var ExperimentStatistics_CompletedExperiments_DEFAULT []*ExperimentSummaryModel

func (p *ExperimentStatistics) GetCompletedExperiments() []*ExperimentSummaryModel {
  return p.CompletedExperiments
}
var ExperimentStatistics_FailedExperiments_DEFAULT []*ExperimentSummaryModel

func (p *ExperimentStatistics) GetFailedExperiments() []*ExperimentSummaryModel {
  return p.FailedExperiments
}
var ExperimentStatistics_CancelledExperiments_DEFAULT []*ExperimentSummaryModel

func (p *ExperimentStatistics) GetCancelledExperiments() []*ExperimentSummaryModel {
  return p.CancelledExperiments
}
var ExperimentStatistics_CreatedExperiments_DEFAULT []*ExperimentSummaryModel

func (p *ExperimentStatistics) GetCreatedExperiments() []*ExperimentSummaryModel {
  return p.CreatedExperiments
}
var ExperimentStatistics_RunningExperiments_DEFAULT []*ExperimentSummaryModel

func (p *ExperimentStatistics) GetRunningExperiments() []*ExperimentSummaryModel {
  return p.RunningExperiments
}
func (p *ExperimentStatistics) IsSetCancelledExperimentCount() bool {
  return p.CancelledExperimentCount != nil
}

func (p *ExperimentStatistics) IsSetCompletedExperiments() bool {
  return p.CompletedExperiments != nil
}

func (p *ExperimentStatistics) IsSetFailedExperiments() bool {
  return p.FailedExperiments != nil
}

func (p *ExperimentStatistics) IsSetCancelledExperiments() bool {
  return p.CancelledExperiments != nil
}

func (p *ExperimentStatistics) IsSetCreatedExperiments() bool {
  return p.CreatedExperiments != nil
}

func (p *ExperimentStatistics) IsSetRunningExperiments() bool {
  return p.RunningExperiments != nil
}

func (p *ExperimentStatistics) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAllExperimentCount bool = false;
  var issetCompletedExperimentCount bool = false;
  var issetFailedExperimentCount bool = false;
  var issetCreatedExperimentCount bool = false;
  var issetRunningExperimentCount bool = false;
  var issetAllExperiments bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAllExperimentCount = true
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetCompletedExperimentCount = true
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetFailedExperimentCount = true
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetCreatedExperimentCount = true
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRunningExperimentCount = true
    case 7:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAllExperiments = true
    case 8:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAllExperimentCount{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AllExperimentCount is not set"));
  }
  if !issetCompletedExperimentCount{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CompletedExperimentCount is not set"));
  }
  if !issetFailedExperimentCount{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field FailedExperimentCount is not set"));
  }
  if !issetCreatedExperimentCount{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CreatedExperimentCount is not set"));
  }
  if !issetRunningExperimentCount{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RunningExperimentCount is not set"));
  }
  if !issetAllExperiments{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AllExperiments is not set"));
  }
  return nil
}

func (p *ExperimentStatistics)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AllExperimentCount = v
}
  return nil
}

func (p *ExperimentStatistics)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CompletedExperimentCount = v
}
  return nil
}

func (p *ExperimentStatistics)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CancelledExperimentCount = &v
}
  return nil
}

func (p *ExperimentStatistics)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.FailedExperimentCount = v
}
  return nil
}

func (p *ExperimentStatistics)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CreatedExperimentCount = v
}
  return nil
}

func (p *ExperimentStatistics)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.RunningExperimentCount = v
}
  return nil
}

func (p *ExperimentStatistics)  ReadField7(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ExperimentSummaryModel, 0, size)
  p.AllExperiments =  tSlice
  for i := 0; i < size; i ++ {
    _elem6 := &ExperimentSummaryModel{}
    if err := _elem6.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
    }
    p.AllExperiments = append(p.AllExperiments, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ExperimentStatistics)  ReadField8(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ExperimentSummaryModel, 0, size)
  p.CompletedExperiments =  tSlice
  for i := 0; i < size; i ++ {
    _elem7 := &ExperimentSummaryModel{}
    if err := _elem7.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem7), err)
    }
    p.CompletedExperiments = append(p.CompletedExperiments, _elem7)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ExperimentStatistics)  ReadField9(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ExperimentSummaryModel, 0, size)
  p.FailedExperiments =  tSlice
  for i := 0; i < size; i ++ {
    _elem8 := &ExperimentSummaryModel{}
    if err := _elem8.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
    }
    p.FailedExperiments = append(p.FailedExperiments, _elem8)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ExperimentStatistics)  ReadField10(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ExperimentSummaryModel, 0, size)
  p.CancelledExperiments =  tSlice
  for i := 0; i < size; i ++ {
    _elem9 := &ExperimentSummaryModel{}
    if err := _elem9.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem9), err)
    }
    p.CancelledExperiments = append(p.CancelledExperiments, _elem9)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ExperimentStatistics)  ReadField11(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ExperimentSummaryModel, 0, size)
  p.CreatedExperiments =  tSlice
  for i := 0; i < size; i ++ {
    _elem10 := &ExperimentSummaryModel{}
    if err := _elem10.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
    }
    p.CreatedExperiments = append(p.CreatedExperiments, _elem10)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ExperimentStatistics)  ReadField12(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ExperimentSummaryModel, 0, size)
  p.RunningExperiments =  tSlice
  for i := 0; i < size; i ++ {
    _elem11 := &ExperimentSummaryModel{}
    if err := _elem11.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem11), err)
    }
    p.RunningExperiments = append(p.RunningExperiments, _elem11)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ExperimentStatistics) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ExperimentStatistics"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExperimentStatistics) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("allExperimentCount", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:allExperimentCount: ", p), err) }
  if err := oprot.WriteI32(int32(p.AllExperimentCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.allExperimentCount (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:allExperimentCount: ", p), err) }
  return err
}

func (p *ExperimentStatistics) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("completedExperimentCount", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:completedExperimentCount: ", p), err) }
  if err := oprot.WriteI32(int32(p.CompletedExperimentCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.completedExperimentCount (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:completedExperimentCount: ", p), err) }
  return err
}

func (p *ExperimentStatistics) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetCancelledExperimentCount() {
    if err := oprot.WriteFieldBegin("cancelledExperimentCount", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cancelledExperimentCount: ", p), err) }
    if err := oprot.WriteI32(int32(*p.CancelledExperimentCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.cancelledExperimentCount (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cancelledExperimentCount: ", p), err) }
  }
  return err
}

func (p *ExperimentStatistics) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("failedExperimentCount", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:failedExperimentCount: ", p), err) }
  if err := oprot.WriteI32(int32(p.FailedExperimentCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.failedExperimentCount (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:failedExperimentCount: ", p), err) }
  return err
}

func (p *ExperimentStatistics) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createdExperimentCount", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:createdExperimentCount: ", p), err) }
  if err := oprot.WriteI32(int32(p.CreatedExperimentCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdExperimentCount (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:createdExperimentCount: ", p), err) }
  return err
}

func (p *ExperimentStatistics) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("runningExperimentCount", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:runningExperimentCount: ", p), err) }
  if err := oprot.WriteI32(int32(p.RunningExperimentCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.runningExperimentCount (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:runningExperimentCount: ", p), err) }
  return err
}

func (p *ExperimentStatistics) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("allExperiments", thrift.LIST, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:allExperiments: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.AllExperiments)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.AllExperiments {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:allExperiments: ", p), err) }
  return err
}

func (p *ExperimentStatistics) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetCompletedExperiments() {
    if err := oprot.WriteFieldBegin("completedExperiments", thrift.LIST, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:completedExperiments: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CompletedExperiments)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.CompletedExperiments {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:completedExperiments: ", p), err) }
  }
  return err
}

func (p *ExperimentStatistics) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetFailedExperiments() {
    if err := oprot.WriteFieldBegin("failedExperiments", thrift.LIST, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:failedExperiments: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FailedExperiments)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.FailedExperiments {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:failedExperiments: ", p), err) }
  }
  return err
}

func (p *ExperimentStatistics) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetCancelledExperiments() {
    if err := oprot.WriteFieldBegin("cancelledExperiments", thrift.LIST, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:cancelledExperiments: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CancelledExperiments)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.CancelledExperiments {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:cancelledExperiments: ", p), err) }
  }
  return err
}

func (p *ExperimentStatistics) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetCreatedExperiments() {
    if err := oprot.WriteFieldBegin("createdExperiments", thrift.LIST, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:createdExperiments: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CreatedExperiments)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.CreatedExperiments {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:createdExperiments: ", p), err) }
  }
  return err
}

func (p *ExperimentStatistics) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetRunningExperiments() {
    if err := oprot.WriteFieldBegin("runningExperiments", thrift.LIST, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:runningExperiments: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RunningExperiments)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.RunningExperiments {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:runningExperiments: ", p), err) }
  }
  return err
}

func (p *ExperimentStatistics) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExperimentStatistics(%+v)", *p)
}

