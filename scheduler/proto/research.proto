syntax = "proto3";

package apache.airavata.scheduler.research;

option go_package = "github.com/apache/airavata/scheduler/core/dto";

import "google/protobuf/timestamp.proto";
import "common.proto";
import "experiment.proto";

// Research workflow status enumeration
enum ResearchWorkflowStatus {
  RESEARCH_WORKFLOW_STATUS_CREATED = 0;
  RESEARCH_WORKFLOW_STATUS_RUNNING = 1;
  RESEARCH_WORKFLOW_STATUS_COMPLETED = 2;
  RESEARCH_WORKFLOW_STATUS_FAILED = 3;
  RESEARCH_WORKFLOW_STATUS_CANCELLED = 4;
}

// Research workflow step
message ResearchWorkflowStep {
  string id = 1;
  string name = 2;
  string description = 3;
  string command_template = 4;
  repeated string dependencies = 5;
  map<string, string> parameters = 6;
  map<string, string> metadata = 7;
}

// Research workflow
message ResearchWorkflow {
  string id = 1;
  string name = 2;
  string description = 3;
  string project_id = 4;
  string owner = 5;
  ResearchWorkflowStatus status = 6;
  repeated ResearchWorkflowStep steps = 7;
  repeated apache.airavata.scheduler.experiment.Experiment experiments = 8;
  google.protobuf.Timestamp created_at = 9;
  google.protobuf.Timestamp updated_at = 10;
  map<string, string> metadata = 11;
  repeated apache.airavata.scheduler.common.Error errors = 12;
}

// Parameter substitution request
message ParameterSubstitutionRequest {
  string command_template = 1;
  map<string, string> parameters = 2;
  map<string, string> context = 3;
}

// Parameter substitution response
message ParameterSubstitutionResponse {
  string substituted_command = 1;
  map<string, string> used_parameters = 2;
  repeated string unused_parameters = 3;
  apache.airavata.scheduler.common.ValidationResult validation = 4;
}

// Generate tasks request
message GenerateTasksRequest {
  apache.airavata.scheduler.experiment.ExperimentSpec spec = 1;
  string compute_resource_id = 2;
  map<string, string> options = 3;
}

// Generate tasks response
message GenerateTasksResponse {
  repeated apache.airavata.scheduler.experiment.Task tasks = 1;
  int32 total_tasks = 2;
  apache.airavata.scheduler.common.ValidationResult validation = 3;
}

// Create research workflow request
message CreateResearchWorkflowRequest {
  string name = 1;
  string description = 2;
  string project_id = 3;
  string owner = 4;
  repeated ResearchWorkflowStep steps = 5;
  map<string, string> metadata = 6;
}

// Create research workflow response
message CreateResearchWorkflowResponse {
  ResearchWorkflow workflow = 1;
  apache.airavata.scheduler.common.ValidationResult validation = 2;
}

// Get research workflow request
message GetResearchWorkflowRequest {
  string workflow_id = 1;
  bool include_experiments = 2;
  bool include_metadata = 3;
}

// Get research workflow response
message GetResearchWorkflowResponse {
  ResearchWorkflow workflow = 1;
  bool found = 2;
}

// List research workflows request
message ListResearchWorkflowsRequest {
  string project_id = 1;
  string owner = 2;
  ResearchWorkflowStatus status = 3;
  apache.airavata.scheduler.common.PaginationRequest pagination = 4;
}

// List research workflows response
message ListResearchWorkflowsResponse {
  repeated ResearchWorkflow workflows = 1;
  apache.airavata.scheduler.common.PaginationResponse pagination = 2;
}

// Update research workflow request
message UpdateResearchWorkflowRequest {
  string workflow_id = 1;
  string name = 2;
  string description = 3;
  ResearchWorkflowStatus status = 4;
  repeated ResearchWorkflowStep steps = 5;
  map<string, string> metadata = 6;
}

// Update research workflow response
message UpdateResearchWorkflowResponse {
  ResearchWorkflow workflow = 1;
  apache.airavata.scheduler.common.ValidationResult validation = 2;
}

// Delete research workflow request
message DeleteResearchWorkflowRequest {
  string workflow_id = 1;
  bool force = 2;
}

// Delete research workflow response
message DeleteResearchWorkflowResponse {
  bool deleted = 1;
  string message = 2;
}

// Execute research workflow request
message ExecuteResearchWorkflowRequest {
  string workflow_id = 1;
  string compute_resource_id = 2;
  map<string, string> parameters = 3;
  map<string, string> options = 4;
}

// Execute research workflow response
message ExecuteResearchWorkflowResponse {
  string execution_id = 1;
  ResearchWorkflowStatus status = 2;
  repeated apache.airavata.scheduler.experiment.Experiment experiments = 3;
  apache.airavata.scheduler.common.ValidationResult validation = 4;
}