// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package user_resource_profile_model

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"compute_resource_model"
	"data_movement_models"
	"user_profile_model"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = compute_resource_model.GoUnusedProtection__
var _ = data_movement_models.GoUnusedProtection__
var _ = user_profile_model.GoUnusedProtection__
// User specific preferences for a Computer Resource
// 
// computeResourceId:
//   Corelate the preference to a compute resource.
// 
// 
// loginUserName:
//   If turned true, Airavata will override the preferences of better alternatives exist.
// 
// 
// preferredBatchQueue:
//  Gateways can choose a defualt batch queue based on average job dimention, reservations or other metrics.
// 
// scratchLocation:
//  Path to the local scratch space on a HPC cluster. Typically used to create working directory for job execution.
// 
// allocationProjectNumber:
//  Typically used on HPC machines to charge computing usage to a account number. For instance, on XSEDE once an
//    allocation is approved, an allocation number is assigned. Before passing this number with job submittions, the
//    account to be used has to be added to the allocation.
// 
// resourceSpecificCredentialStoreToken:
//  Resource specific credential store token. If this token is specified, then it is superceeded by the gateway's
//   default credential store.
// 
// 
// Attributes:
//  - ComputeResourceId
//  - LoginUserName
//  - PreferredBatchQueue
//  - ScratchLocation
//  - AllocationProjectNumber
//  - ResourceSpecificCredentialStoreToken
//  - QualityOfService
//  - Reservation
//  - ReservationStartTime
//  - ReservationEndTime
type UserComputeResourcePreference struct {
  ComputeResourceId string `thrift:"computeResourceId,1,required" db:"computeResourceId" json:"computeResourceId"`
  LoginUserName *string `thrift:"loginUserName,2" db:"loginUserName" json:"loginUserName,omitempty"`
  PreferredBatchQueue *string `thrift:"preferredBatchQueue,3" db:"preferredBatchQueue" json:"preferredBatchQueue,omitempty"`
  ScratchLocation *string `thrift:"scratchLocation,4" db:"scratchLocation" json:"scratchLocation,omitempty"`
  AllocationProjectNumber *string `thrift:"allocationProjectNumber,5" db:"allocationProjectNumber" json:"allocationProjectNumber,omitempty"`
  ResourceSpecificCredentialStoreToken *string `thrift:"resourceSpecificCredentialStoreToken,6" db:"resourceSpecificCredentialStoreToken" json:"resourceSpecificCredentialStoreToken,omitempty"`
  QualityOfService *string `thrift:"qualityOfService,7" db:"qualityOfService" json:"qualityOfService,omitempty"`
  Reservation *string `thrift:"reservation,8" db:"reservation" json:"reservation,omitempty"`
  ReservationStartTime *int64 `thrift:"reservationStartTime,9" db:"reservationStartTime" json:"reservationStartTime,omitempty"`
  ReservationEndTime *int64 `thrift:"reservationEndTime,10" db:"reservationEndTime" json:"reservationEndTime,omitempty"`
}

func NewUserComputeResourcePreference() *UserComputeResourcePreference {
  return &UserComputeResourcePreference{}
}


func (p *UserComputeResourcePreference) GetComputeResourceId() string {
  return p.ComputeResourceId
}
var UserComputeResourcePreference_LoginUserName_DEFAULT string
func (p *UserComputeResourcePreference) GetLoginUserName() string {
  if !p.IsSetLoginUserName() {
    return UserComputeResourcePreference_LoginUserName_DEFAULT
  }
return *p.LoginUserName
}
var UserComputeResourcePreference_PreferredBatchQueue_DEFAULT string
func (p *UserComputeResourcePreference) GetPreferredBatchQueue() string {
  if !p.IsSetPreferredBatchQueue() {
    return UserComputeResourcePreference_PreferredBatchQueue_DEFAULT
  }
return *p.PreferredBatchQueue
}
var UserComputeResourcePreference_ScratchLocation_DEFAULT string
func (p *UserComputeResourcePreference) GetScratchLocation() string {
  if !p.IsSetScratchLocation() {
    return UserComputeResourcePreference_ScratchLocation_DEFAULT
  }
return *p.ScratchLocation
}
var UserComputeResourcePreference_AllocationProjectNumber_DEFAULT string
func (p *UserComputeResourcePreference) GetAllocationProjectNumber() string {
  if !p.IsSetAllocationProjectNumber() {
    return UserComputeResourcePreference_AllocationProjectNumber_DEFAULT
  }
return *p.AllocationProjectNumber
}
var UserComputeResourcePreference_ResourceSpecificCredentialStoreToken_DEFAULT string
func (p *UserComputeResourcePreference) GetResourceSpecificCredentialStoreToken() string {
  if !p.IsSetResourceSpecificCredentialStoreToken() {
    return UserComputeResourcePreference_ResourceSpecificCredentialStoreToken_DEFAULT
  }
return *p.ResourceSpecificCredentialStoreToken
}
var UserComputeResourcePreference_QualityOfService_DEFAULT string
func (p *UserComputeResourcePreference) GetQualityOfService() string {
  if !p.IsSetQualityOfService() {
    return UserComputeResourcePreference_QualityOfService_DEFAULT
  }
return *p.QualityOfService
}
var UserComputeResourcePreference_Reservation_DEFAULT string
func (p *UserComputeResourcePreference) GetReservation() string {
  if !p.IsSetReservation() {
    return UserComputeResourcePreference_Reservation_DEFAULT
  }
return *p.Reservation
}
var UserComputeResourcePreference_ReservationStartTime_DEFAULT int64
func (p *UserComputeResourcePreference) GetReservationStartTime() int64 {
  if !p.IsSetReservationStartTime() {
    return UserComputeResourcePreference_ReservationStartTime_DEFAULT
  }
return *p.ReservationStartTime
}
var UserComputeResourcePreference_ReservationEndTime_DEFAULT int64
func (p *UserComputeResourcePreference) GetReservationEndTime() int64 {
  if !p.IsSetReservationEndTime() {
    return UserComputeResourcePreference_ReservationEndTime_DEFAULT
  }
return *p.ReservationEndTime
}
func (p *UserComputeResourcePreference) IsSetLoginUserName() bool {
  return p.LoginUserName != nil
}

func (p *UserComputeResourcePreference) IsSetPreferredBatchQueue() bool {
  return p.PreferredBatchQueue != nil
}

func (p *UserComputeResourcePreference) IsSetScratchLocation() bool {
  return p.ScratchLocation != nil
}

func (p *UserComputeResourcePreference) IsSetAllocationProjectNumber() bool {
  return p.AllocationProjectNumber != nil
}

func (p *UserComputeResourcePreference) IsSetResourceSpecificCredentialStoreToken() bool {
  return p.ResourceSpecificCredentialStoreToken != nil
}

func (p *UserComputeResourcePreference) IsSetQualityOfService() bool {
  return p.QualityOfService != nil
}

func (p *UserComputeResourcePreference) IsSetReservation() bool {
  return p.Reservation != nil
}

func (p *UserComputeResourcePreference) IsSetReservationStartTime() bool {
  return p.ReservationStartTime != nil
}

func (p *UserComputeResourcePreference) IsSetReservationEndTime() bool {
  return p.ReservationEndTime != nil
}

func (p *UserComputeResourcePreference) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetComputeResourceId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetComputeResourceId = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetComputeResourceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ComputeResourceId is not set"));
  }
  return nil
}

func (p *UserComputeResourcePreference)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ComputeResourceId = v
}
  return nil
}

func (p *UserComputeResourcePreference)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LoginUserName = &v
}
  return nil
}

func (p *UserComputeResourcePreference)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PreferredBatchQueue = &v
}
  return nil
}

func (p *UserComputeResourcePreference)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ScratchLocation = &v
}
  return nil
}

func (p *UserComputeResourcePreference)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.AllocationProjectNumber = &v
}
  return nil
}

func (p *UserComputeResourcePreference)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ResourceSpecificCredentialStoreToken = &v
}
  return nil
}

func (p *UserComputeResourcePreference)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.QualityOfService = &v
}
  return nil
}

func (p *UserComputeResourcePreference)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Reservation = &v
}
  return nil
}

func (p *UserComputeResourcePreference)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.ReservationStartTime = &v
}
  return nil
}

func (p *UserComputeResourcePreference)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.ReservationEndTime = &v
}
  return nil
}

func (p *UserComputeResourcePreference) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserComputeResourcePreference"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserComputeResourcePreference) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("computeResourceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:computeResourceId: ", p), err) }
  if err := oprot.WriteString(string(p.ComputeResourceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.computeResourceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:computeResourceId: ", p), err) }
  return err
}

func (p *UserComputeResourcePreference) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetLoginUserName() {
    if err := oprot.WriteFieldBegin("loginUserName", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:loginUserName: ", p), err) }
    if err := oprot.WriteString(string(*p.LoginUserName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.loginUserName (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:loginUserName: ", p), err) }
  }
  return err
}

func (p *UserComputeResourcePreference) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetPreferredBatchQueue() {
    if err := oprot.WriteFieldBegin("preferredBatchQueue", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:preferredBatchQueue: ", p), err) }
    if err := oprot.WriteString(string(*p.PreferredBatchQueue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.preferredBatchQueue (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:preferredBatchQueue: ", p), err) }
  }
  return err
}

func (p *UserComputeResourcePreference) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetScratchLocation() {
    if err := oprot.WriteFieldBegin("scratchLocation", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:scratchLocation: ", p), err) }
    if err := oprot.WriteString(string(*p.ScratchLocation)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.scratchLocation (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:scratchLocation: ", p), err) }
  }
  return err
}

func (p *UserComputeResourcePreference) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetAllocationProjectNumber() {
    if err := oprot.WriteFieldBegin("allocationProjectNumber", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:allocationProjectNumber: ", p), err) }
    if err := oprot.WriteString(string(*p.AllocationProjectNumber)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.allocationProjectNumber (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:allocationProjectNumber: ", p), err) }
  }
  return err
}

func (p *UserComputeResourcePreference) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetResourceSpecificCredentialStoreToken() {
    if err := oprot.WriteFieldBegin("resourceSpecificCredentialStoreToken", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:resourceSpecificCredentialStoreToken: ", p), err) }
    if err := oprot.WriteString(string(*p.ResourceSpecificCredentialStoreToken)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.resourceSpecificCredentialStoreToken (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:resourceSpecificCredentialStoreToken: ", p), err) }
  }
  return err
}

func (p *UserComputeResourcePreference) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetQualityOfService() {
    if err := oprot.WriteFieldBegin("qualityOfService", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:qualityOfService: ", p), err) }
    if err := oprot.WriteString(string(*p.QualityOfService)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.qualityOfService (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:qualityOfService: ", p), err) }
  }
  return err
}

func (p *UserComputeResourcePreference) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetReservation() {
    if err := oprot.WriteFieldBegin("reservation", thrift.STRING, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:reservation: ", p), err) }
    if err := oprot.WriteString(string(*p.Reservation)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.reservation (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:reservation: ", p), err) }
  }
  return err
}

func (p *UserComputeResourcePreference) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetReservationStartTime() {
    if err := oprot.WriteFieldBegin("reservationStartTime", thrift.I64, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:reservationStartTime: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ReservationStartTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.reservationStartTime (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:reservationStartTime: ", p), err) }
  }
  return err
}

func (p *UserComputeResourcePreference) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetReservationEndTime() {
    if err := oprot.WriteFieldBegin("reservationEndTime", thrift.I64, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:reservationEndTime: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ReservationEndTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.reservationEndTime (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:reservationEndTime: ", p), err) }
  }
  return err
}

func (p *UserComputeResourcePreference) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserComputeResourcePreference(%+v)", *p)
}

// Attributes:
//  - StorageResourceId
//  - LoginUserName
//  - FileSystemRootLocation
//  - ResourceSpecificCredentialStoreToken
type UserStoragePreference struct {
  StorageResourceId string `thrift:"storageResourceId,1,required" db:"storageResourceId" json:"storageResourceId"`
  LoginUserName *string `thrift:"loginUserName,2" db:"loginUserName" json:"loginUserName,omitempty"`
  FileSystemRootLocation *string `thrift:"fileSystemRootLocation,3" db:"fileSystemRootLocation" json:"fileSystemRootLocation,omitempty"`
  ResourceSpecificCredentialStoreToken *string `thrift:"resourceSpecificCredentialStoreToken,4" db:"resourceSpecificCredentialStoreToken" json:"resourceSpecificCredentialStoreToken,omitempty"`
}

func NewUserStoragePreference() *UserStoragePreference {
  return &UserStoragePreference{}
}


func (p *UserStoragePreference) GetStorageResourceId() string {
  return p.StorageResourceId
}
var UserStoragePreference_LoginUserName_DEFAULT string
func (p *UserStoragePreference) GetLoginUserName() string {
  if !p.IsSetLoginUserName() {
    return UserStoragePreference_LoginUserName_DEFAULT
  }
return *p.LoginUserName
}
var UserStoragePreference_FileSystemRootLocation_DEFAULT string
func (p *UserStoragePreference) GetFileSystemRootLocation() string {
  if !p.IsSetFileSystemRootLocation() {
    return UserStoragePreference_FileSystemRootLocation_DEFAULT
  }
return *p.FileSystemRootLocation
}
var UserStoragePreference_ResourceSpecificCredentialStoreToken_DEFAULT string
func (p *UserStoragePreference) GetResourceSpecificCredentialStoreToken() string {
  if !p.IsSetResourceSpecificCredentialStoreToken() {
    return UserStoragePreference_ResourceSpecificCredentialStoreToken_DEFAULT
  }
return *p.ResourceSpecificCredentialStoreToken
}
func (p *UserStoragePreference) IsSetLoginUserName() bool {
  return p.LoginUserName != nil
}

func (p *UserStoragePreference) IsSetFileSystemRootLocation() bool {
  return p.FileSystemRootLocation != nil
}

func (p *UserStoragePreference) IsSetResourceSpecificCredentialStoreToken() bool {
  return p.ResourceSpecificCredentialStoreToken != nil
}

func (p *UserStoragePreference) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetStorageResourceId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStorageResourceId = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetStorageResourceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StorageResourceId is not set"));
  }
  return nil
}

func (p *UserStoragePreference)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.StorageResourceId = v
}
  return nil
}

func (p *UserStoragePreference)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LoginUserName = &v
}
  return nil
}

func (p *UserStoragePreference)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.FileSystemRootLocation = &v
}
  return nil
}

func (p *UserStoragePreference)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ResourceSpecificCredentialStoreToken = &v
}
  return nil
}

func (p *UserStoragePreference) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserStoragePreference"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserStoragePreference) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("storageResourceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:storageResourceId: ", p), err) }
  if err := oprot.WriteString(string(p.StorageResourceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.storageResourceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:storageResourceId: ", p), err) }
  return err
}

func (p *UserStoragePreference) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetLoginUserName() {
    if err := oprot.WriteFieldBegin("loginUserName", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:loginUserName: ", p), err) }
    if err := oprot.WriteString(string(*p.LoginUserName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.loginUserName (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:loginUserName: ", p), err) }
  }
  return err
}

func (p *UserStoragePreference) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetFileSystemRootLocation() {
    if err := oprot.WriteFieldBegin("fileSystemRootLocation", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:fileSystemRootLocation: ", p), err) }
    if err := oprot.WriteString(string(*p.FileSystemRootLocation)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.fileSystemRootLocation (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:fileSystemRootLocation: ", p), err) }
  }
  return err
}

func (p *UserStoragePreference) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetResourceSpecificCredentialStoreToken() {
    if err := oprot.WriteFieldBegin("resourceSpecificCredentialStoreToken", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:resourceSpecificCredentialStoreToken: ", p), err) }
    if err := oprot.WriteString(string(*p.ResourceSpecificCredentialStoreToken)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.resourceSpecificCredentialStoreToken (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:resourceSpecificCredentialStoreToken: ", p), err) }
  }
  return err
}

func (p *UserStoragePreference) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserStoragePreference(%+v)", *p)
}

// User Resource Profile
// 
// userId:
// Unique identifier used to link user to corresponding user data model
// 
// gatewayID:
//  Unique identifier for the gateway assigned by Airavata. Corelate this to Airavata Admin API Gateway Registration.
// 
// credentialStoreToken:
//  Gateway's defualt credential store token.
// 
// computeResourcePreferences:
//  List of resource preferences for each of the registered compute resources.
// 
//  identityServerTenant:
// 
//  identityServerPwdCredToken:
// 
// isNull:
//  Indicates that this instance is just a container for a null value.
// 
// 
// Attributes:
//  - UserId
//  - GatewayID
//  - CredentialStoreToken
//  - UserComputeResourcePreferences
//  - UserStoragePreferences
//  - IdentityServerTenant
//  - IdentityServerPwdCredToken
//  - IsNull
type UserResourceProfile struct {
  UserId string `thrift:"userId,1,required" db:"userId" json:"userId"`
  GatewayID string `thrift:"gatewayID,2,required" db:"gatewayID" json:"gatewayID"`
  CredentialStoreToken *string `thrift:"credentialStoreToken,3" db:"credentialStoreToken" json:"credentialStoreToken,omitempty"`
  UserComputeResourcePreferences []*UserComputeResourcePreference `thrift:"userComputeResourcePreferences,4" db:"userComputeResourcePreferences" json:"userComputeResourcePreferences,omitempty"`
  UserStoragePreferences []*UserStoragePreference `thrift:"userStoragePreferences,5" db:"userStoragePreferences" json:"userStoragePreferences,omitempty"`
  IdentityServerTenant *string `thrift:"identityServerTenant,6" db:"identityServerTenant" json:"identityServerTenant,omitempty"`
  IdentityServerPwdCredToken *string `thrift:"identityServerPwdCredToken,7" db:"identityServerPwdCredToken" json:"identityServerPwdCredToken,omitempty"`
  IsNull bool `thrift:"isNull,8" db:"isNull" json:"isNull,omitempty"`
}

func NewUserResourceProfile() *UserResourceProfile {
  return &UserResourceProfile{}
}


func (p *UserResourceProfile) GetUserId() string {
  return p.UserId
}

func (p *UserResourceProfile) GetGatewayID() string {
  return p.GatewayID
}
var UserResourceProfile_CredentialStoreToken_DEFAULT string
func (p *UserResourceProfile) GetCredentialStoreToken() string {
  if !p.IsSetCredentialStoreToken() {
    return UserResourceProfile_CredentialStoreToken_DEFAULT
  }
return *p.CredentialStoreToken
}
var UserResourceProfile_UserComputeResourcePreferences_DEFAULT []*UserComputeResourcePreference

func (p *UserResourceProfile) GetUserComputeResourcePreferences() []*UserComputeResourcePreference {
  return p.UserComputeResourcePreferences
}
var UserResourceProfile_UserStoragePreferences_DEFAULT []*UserStoragePreference

func (p *UserResourceProfile) GetUserStoragePreferences() []*UserStoragePreference {
  return p.UserStoragePreferences
}
var UserResourceProfile_IdentityServerTenant_DEFAULT string
func (p *UserResourceProfile) GetIdentityServerTenant() string {
  if !p.IsSetIdentityServerTenant() {
    return UserResourceProfile_IdentityServerTenant_DEFAULT
  }
return *p.IdentityServerTenant
}
var UserResourceProfile_IdentityServerPwdCredToken_DEFAULT string
func (p *UserResourceProfile) GetIdentityServerPwdCredToken() string {
  if !p.IsSetIdentityServerPwdCredToken() {
    return UserResourceProfile_IdentityServerPwdCredToken_DEFAULT
  }
return *p.IdentityServerPwdCredToken
}
var UserResourceProfile_IsNull_DEFAULT bool = false

func (p *UserResourceProfile) GetIsNull() bool {
  return p.IsNull
}
func (p *UserResourceProfile) IsSetCredentialStoreToken() bool {
  return p.CredentialStoreToken != nil
}

func (p *UserResourceProfile) IsSetUserComputeResourcePreferences() bool {
  return p.UserComputeResourcePreferences != nil
}

func (p *UserResourceProfile) IsSetUserStoragePreferences() bool {
  return p.UserStoragePreferences != nil
}

func (p *UserResourceProfile) IsSetIdentityServerTenant() bool {
  return p.IdentityServerTenant != nil
}

func (p *UserResourceProfile) IsSetIdentityServerPwdCredToken() bool {
  return p.IdentityServerPwdCredToken != nil
}

func (p *UserResourceProfile) IsSetIsNull() bool {
  return p.IsNull != UserResourceProfile_IsNull_DEFAULT
}

func (p *UserResourceProfile) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetUserId bool = false;
  var issetGatewayID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserId = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayID = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetUserId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserId is not set"));
  }
  if !issetGatewayID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayID is not set"));
  }
  return nil
}

func (p *UserResourceProfile)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *UserResourceProfile)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayID = v
}
  return nil
}

func (p *UserResourceProfile)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CredentialStoreToken = &v
}
  return nil
}

func (p *UserResourceProfile)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*UserComputeResourcePreference, 0, size)
  p.UserComputeResourcePreferences =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &UserComputeResourcePreference{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.UserComputeResourcePreferences = append(p.UserComputeResourcePreferences, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UserResourceProfile)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*UserStoragePreference, 0, size)
  p.UserStoragePreferences =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &UserStoragePreference{}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.UserStoragePreferences = append(p.UserStoragePreferences, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UserResourceProfile)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.IdentityServerTenant = &v
}
  return nil
}

func (p *UserResourceProfile)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.IdentityServerPwdCredToken = &v
}
  return nil
}

func (p *UserResourceProfile)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.IsNull = v
}
  return nil
}

func (p *UserResourceProfile) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserResourceProfile"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserResourceProfile) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err) }
  if err := oprot.WriteString(string(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err) }
  return err
}

func (p *UserResourceProfile) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayID", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayID: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayID: ", p), err) }
  return err
}

func (p *UserResourceProfile) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetCredentialStoreToken() {
    if err := oprot.WriteFieldBegin("credentialStoreToken", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:credentialStoreToken: ", p), err) }
    if err := oprot.WriteString(string(*p.CredentialStoreToken)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.credentialStoreToken (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:credentialStoreToken: ", p), err) }
  }
  return err
}

func (p *UserResourceProfile) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetUserComputeResourcePreferences() {
    if err := oprot.WriteFieldBegin("userComputeResourcePreferences", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:userComputeResourcePreferences: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.UserComputeResourcePreferences)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.UserComputeResourcePreferences {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:userComputeResourcePreferences: ", p), err) }
  }
  return err
}

func (p *UserResourceProfile) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetUserStoragePreferences() {
    if err := oprot.WriteFieldBegin("userStoragePreferences", thrift.LIST, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:userStoragePreferences: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.UserStoragePreferences)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.UserStoragePreferences {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:userStoragePreferences: ", p), err) }
  }
  return err
}

func (p *UserResourceProfile) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetIdentityServerTenant() {
    if err := oprot.WriteFieldBegin("identityServerTenant", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:identityServerTenant: ", p), err) }
    if err := oprot.WriteString(string(*p.IdentityServerTenant)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.identityServerTenant (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:identityServerTenant: ", p), err) }
  }
  return err
}

func (p *UserResourceProfile) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetIdentityServerPwdCredToken() {
    if err := oprot.WriteFieldBegin("identityServerPwdCredToken", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:identityServerPwdCredToken: ", p), err) }
    if err := oprot.WriteString(string(*p.IdentityServerPwdCredToken)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.identityServerPwdCredToken (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:identityServerPwdCredToken: ", p), err) }
  }
  return err
}

func (p *UserResourceProfile) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetIsNull() {
    if err := oprot.WriteFieldBegin("isNull", thrift.BOOL, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:isNull: ", p), err) }
    if err := oprot.WriteBool(bool(p.IsNull)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.isNull (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:isNull: ", p), err) }
  }
  return err
}

func (p *UserResourceProfile) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserResourceProfile(%+v)", *p)
}

