// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package airavata_errors

import (
	"bytes"
	"reflect"
	"database/sql/driver"
	"errors"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"experiment_model"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = experiment_model.GoUnusedProtection__
//A list of Airavata API Error Message Types
//
// UNKNOWN: No information available about the error
//  
// PERMISSION_DENIED: Not permitted to perform action
//
// INTERNAL_ERROR: Unexpected problem with the service
//
// AUTHENTICATION_FAILURE: The client failed to authenticate.
//
// INVALID_AUTHORIZATION: Security Token and/or Username and/or password is incorrect
//  
// AUTHORIZATION_EXPIRED: Authentication token expired
// 
// UNKNOWN_GATEWAY_ID: The gateway is not registered with Airavata.
//
// UNSUPPORTED_OPERATION: Operation denied because it is currently unsupported.
type AiravataErrorType int64
const (
  AiravataErrorType_UNKNOWN AiravataErrorType = 0
  AiravataErrorType_PERMISSION_DENIED AiravataErrorType = 1
  AiravataErrorType_INTERNAL_ERROR AiravataErrorType = 2
  AiravataErrorType_AUTHENTICATION_FAILURE AiravataErrorType = 3
  AiravataErrorType_INVALID_AUTHORIZATION AiravataErrorType = 4
  AiravataErrorType_AUTHORIZATION_EXPIRED AiravataErrorType = 5
  AiravataErrorType_UNKNOWN_GATEWAY_ID AiravataErrorType = 6
  AiravataErrorType_UNSUPPORTED_OPERATION AiravataErrorType = 7
)

func (p AiravataErrorType) String() string {
  switch p {
  case AiravataErrorType_UNKNOWN: return "UNKNOWN"
  case AiravataErrorType_PERMISSION_DENIED: return "PERMISSION_DENIED"
  case AiravataErrorType_INTERNAL_ERROR: return "INTERNAL_ERROR"
  case AiravataErrorType_AUTHENTICATION_FAILURE: return "AUTHENTICATION_FAILURE"
  case AiravataErrorType_INVALID_AUTHORIZATION: return "INVALID_AUTHORIZATION"
  case AiravataErrorType_AUTHORIZATION_EXPIRED: return "AUTHORIZATION_EXPIRED"
  case AiravataErrorType_UNKNOWN_GATEWAY_ID: return "UNKNOWN_GATEWAY_ID"
  case AiravataErrorType_UNSUPPORTED_OPERATION: return "UNSUPPORTED_OPERATION"
  }
  return "<UNSET>"
}

func AiravataErrorTypeFromString(s string) (AiravataErrorType, error) {
  switch s {
  case "UNKNOWN": return AiravataErrorType_UNKNOWN, nil 
  case "PERMISSION_DENIED": return AiravataErrorType_PERMISSION_DENIED, nil 
  case "INTERNAL_ERROR": return AiravataErrorType_INTERNAL_ERROR, nil 
  case "AUTHENTICATION_FAILURE": return AiravataErrorType_AUTHENTICATION_FAILURE, nil 
  case "INVALID_AUTHORIZATION": return AiravataErrorType_INVALID_AUTHORIZATION, nil 
  case "AUTHORIZATION_EXPIRED": return AiravataErrorType_AUTHORIZATION_EXPIRED, nil 
  case "UNKNOWN_GATEWAY_ID": return AiravataErrorType_UNKNOWN_GATEWAY_ID, nil 
  case "UNSUPPORTED_OPERATION": return AiravataErrorType_UNSUPPORTED_OPERATION, nil 
  }
  return AiravataErrorType(0), fmt.Errorf("not a valid AiravataErrorType string")
}


func AiravataErrorTypePtr(v AiravataErrorType) *AiravataErrorType { return &v }

func (p AiravataErrorType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *AiravataErrorType) UnmarshalText(text []byte) error {
q, err := AiravataErrorTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *AiravataErrorType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = AiravataErrorType(v)
return nil
}

func (p * AiravataErrorType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// This exception is thrown when a client asks to perform an operation on an experiment that does not exist.
// 
// identifier:  A description of the experiment that was not found on the server.
// 
// key:  The value passed from the client in the identifier, which was not found.
// 
// Attributes:
//  - Message
type ExperimentNotFoundException struct {
  Message string `thrift:"message,1,required" db:"message" json:"message"`
}

func NewExperimentNotFoundException() *ExperimentNotFoundException {
  return &ExperimentNotFoundException{}
}


func (p *ExperimentNotFoundException) GetMessage() string {
  return p.Message
}
func (p *ExperimentNotFoundException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMessage bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetMessage = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMessage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"));
  }
  return nil
}

func (p *ExperimentNotFoundException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *ExperimentNotFoundException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ExperimentNotFoundException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExperimentNotFoundException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *ExperimentNotFoundException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExperimentNotFoundException(%+v)", *p)
}

func (p *ExperimentNotFoundException) Error() string {
  return p.String()
}

// 1:  optional  string identifier,
// 2:  optional  string key
// 
// 
// Attributes:
//  - Message
type ProjectNotFoundException struct {
  Message string `thrift:"message,1,required" db:"message" json:"message"`
}

func NewProjectNotFoundException() *ProjectNotFoundException {
  return &ProjectNotFoundException{}
}


func (p *ProjectNotFoundException) GetMessage() string {
  return p.Message
}
func (p *ProjectNotFoundException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMessage bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetMessage = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMessage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"));
  }
  return nil
}

func (p *ProjectNotFoundException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *ProjectNotFoundException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ProjectNotFoundException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ProjectNotFoundException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *ProjectNotFoundException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProjectNotFoundException(%+v)", *p)
}

func (p *ProjectNotFoundException) Error() string {
  return p.String()
}

// This exception is thrown for invalid requests that occur from any reasons like required input parameters are missing,
//  or a parameter is malformed.
// 
//  message: contains the associated error message.
// 
// Attributes:
//  - Message
type InvalidRequestException struct {
  Message string `thrift:"message,1,required" db:"message" json:"message"`
}

func NewInvalidRequestException() *InvalidRequestException {
  return &InvalidRequestException{}
}


func (p *InvalidRequestException) GetMessage() string {
  return p.Message
}
func (p *InvalidRequestException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMessage bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetMessage = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMessage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"));
  }
  return nil
}

func (p *InvalidRequestException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *InvalidRequestException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InvalidRequestException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InvalidRequestException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *InvalidRequestException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InvalidRequestException(%+v)", *p)
}

func (p *InvalidRequestException) Error() string {
  return p.String()
}

// This exception is thrown when RPC timeout gets exceeded.
type TimedOutException struct {
}

func NewTimedOutException() *TimedOutException {
  return &TimedOutException{}
}

func (p *TimedOutException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TimedOutException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TimedOutException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TimedOutException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TimedOutException(%+v)", *p)
}

func (p *TimedOutException) Error() string {
  return p.String()
}

// This exception is thrown for invalid sshKeyAuthentication requests.
// 
//  message: contains the cause of the authorization failure.
// 
// Attributes:
//  - Message
type AuthenticationException struct {
  Message string `thrift:"message,1,required" db:"message" json:"message"`
}

func NewAuthenticationException() *AuthenticationException {
  return &AuthenticationException{}
}


func (p *AuthenticationException) GetMessage() string {
  return p.Message
}
func (p *AuthenticationException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMessage bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetMessage = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMessage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"));
  }
  return nil
}

func (p *AuthenticationException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *AuthenticationException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AuthenticationException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthenticationException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *AuthenticationException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthenticationException(%+v)", *p)
}

func (p *AuthenticationException) Error() string {
  return p.String()
}

// This exception is thrown for invalid authorization requests such user does not have acces to an aplication or resource.
// 
//  message: contains the authorization failure message
// 
// Attributes:
//  - Message
type AuthorizationException struct {
  Message string `thrift:"message,1,required" db:"message" json:"message"`
}

func NewAuthorizationException() *AuthorizationException {
  return &AuthorizationException{}
}


func (p *AuthorizationException) GetMessage() string {
  return p.Message
}
func (p *AuthorizationException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMessage bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetMessage = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMessage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"));
  }
  return nil
}

func (p *AuthorizationException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *AuthorizationException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AuthorizationException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthorizationException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *AuthorizationException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthorizationException(%+v)", *p)
}

func (p *AuthorizationException) Error() string {
  return p.String()
}

// This exception is thrown when you try to save a duplicate entity that already exists
//   in the database.
// 
//   message: contains the associated error message
// 
// 
// Attributes:
//  - Message
type DuplicateEntryException struct {
  Message string `thrift:"message,1,required" db:"message" json:"message"`
}

func NewDuplicateEntryException() *DuplicateEntryException {
  return &DuplicateEntryException{}
}


func (p *DuplicateEntryException) GetMessage() string {
  return p.Message
}
func (p *DuplicateEntryException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMessage bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetMessage = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMessage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"));
  }
  return nil
}

func (p *DuplicateEntryException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *DuplicateEntryException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DuplicateEntryException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DuplicateEntryException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *DuplicateEntryException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DuplicateEntryException(%+v)", *p)
}

func (p *DuplicateEntryException) Error() string {
  return p.String()
}

// This exception is thrown by Airavata Services when a call fails as a result of
// a problem that a client may be able to resolve.  For example, if the user
// attempts to execute an application on a resource gateway does not have access to.
// 
// This exception would not be used for internal system errors that do not
// reflect user actions, but rather reflect a problem within the service that
// the client cannot resolve.
// 
// airavataErrorType:  The message type indicating the error that occurred.
//   must be one of the values of AiravataErrorType.
// 
// parameter:  If the error applied to a particular input parameter, this will
//   indicate which parameter.
// 
// Attributes:
//  - AiravataErrorType
//  - Parameter
type AiravataClientException struct {
  AiravataErrorType AiravataErrorType `thrift:"airavataErrorType,1,required" db:"airavataErrorType" json:"airavataErrorType"`
  Parameter *string `thrift:"parameter,2" db:"parameter" json:"parameter,omitempty"`
}

func NewAiravataClientException() *AiravataClientException {
  return &AiravataClientException{}
}


func (p *AiravataClientException) GetAiravataErrorType() AiravataErrorType {
  return p.AiravataErrorType
}
var AiravataClientException_Parameter_DEFAULT string
func (p *AiravataClientException) GetParameter() string {
  if !p.IsSetParameter() {
    return AiravataClientException_Parameter_DEFAULT
  }
return *p.Parameter
}
func (p *AiravataClientException) IsSetParameter() bool {
  return p.Parameter != nil
}

func (p *AiravataClientException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAiravataErrorType bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAiravataErrorType = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAiravataErrorType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AiravataErrorType is not set"));
  }
  return nil
}

func (p *AiravataClientException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := AiravataErrorType(v)
  p.AiravataErrorType = temp
}
  return nil
}

func (p *AiravataClientException)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Parameter = &v
}
  return nil
}

func (p *AiravataClientException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AiravataClientException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataClientException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("airavataErrorType", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:airavataErrorType: ", p), err) }
  if err := oprot.WriteI32(int32(p.AiravataErrorType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.airavataErrorType (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:airavataErrorType: ", p), err) }
  return err
}

func (p *AiravataClientException) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetParameter() {
    if err := oprot.WriteFieldBegin("parameter", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parameter: ", p), err) }
    if err := oprot.WriteString(string(*p.Parameter)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.parameter (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parameter: ", p), err) }
  }
  return err
}

func (p *AiravataClientException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataClientException(%+v)", *p)
}

func (p *AiravataClientException) Error() string {
  return p.String()
}

// Attributes:
//  - Result_
//  - ErrorDetails
type ValidatorResult_ struct {
  Result_ bool `thrift:"result,1,required" db:"result" json:"result"`
  ErrorDetails *string `thrift:"errorDetails,2" db:"errorDetails" json:"errorDetails,omitempty"`
}

func NewValidatorResult_() *ValidatorResult_ {
  return &ValidatorResult_{}
}


func (p *ValidatorResult_) GetResult_() bool {
  return p.Result_
}
var ValidatorResult__ErrorDetails_DEFAULT string
func (p *ValidatorResult_) GetErrorDetails() string {
  if !p.IsSetErrorDetails() {
    return ValidatorResult__ErrorDetails_DEFAULT
  }
return *p.ErrorDetails
}
func (p *ValidatorResult_) IsSetErrorDetails() bool {
  return p.ErrorDetails != nil
}

func (p *ValidatorResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetResult_ = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *ValidatorResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Result_ = v
}
  return nil
}

func (p *ValidatorResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ErrorDetails = &v
}
  return nil
}

func (p *ValidatorResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ValidatorResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ValidatorResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := oprot.WriteBool(bool(p.Result_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.result (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *ValidatorResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetErrorDetails() {
    if err := oprot.WriteFieldBegin("errorDetails", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:errorDetails: ", p), err) }
    if err := oprot.WriteString(string(*p.ErrorDetails)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.errorDetails (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:errorDetails: ", p), err) }
  }
  return err
}

func (p *ValidatorResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ValidatorResult_(%+v)", *p)
}

// Attributes:
//  - ValidationState
//  - ValidationResultList
type ValidationResults struct {
  ValidationState bool `thrift:"validationState,1,required" db:"validationState" json:"validationState"`
  ValidationResultList []*ValidatorResult_ `thrift:"validationResultList,2,required" db:"validationResultList" json:"validationResultList"`
}

func NewValidationResults() *ValidationResults {
  return &ValidationResults{}
}


func (p *ValidationResults) GetValidationState() bool {
  return p.ValidationState
}

func (p *ValidationResults) GetValidationResultList() []*ValidatorResult_ {
  return p.ValidationResultList
}
func (p *ValidationResults) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetValidationState bool = false;
  var issetValidationResultList bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetValidationState = true
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetValidationResultList = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetValidationState{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ValidationState is not set"));
  }
  if !issetValidationResultList{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ValidationResultList is not set"));
  }
  return nil
}

func (p *ValidationResults)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ValidationState = v
}
  return nil
}

func (p *ValidationResults)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ValidatorResult_, 0, size)
  p.ValidationResultList =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &ValidatorResult_{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.ValidationResultList = append(p.ValidationResultList, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ValidationResults) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ValidationResults"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ValidationResults) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("validationState", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:validationState: ", p), err) }
  if err := oprot.WriteBool(bool(p.ValidationState)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.validationState (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:validationState: ", p), err) }
  return err
}

func (p *ValidationResults) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("validationResultList", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:validationResultList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ValidationResultList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ValidationResultList {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:validationResultList: ", p), err) }
  return err
}

func (p *ValidationResults) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ValidationResults(%+v)", *p)
}

// Attributes:
//  - ValidationResult_
//  - ErrorMessage
type LaunchValidationException struct {
  ValidationResult_ *ValidationResults `thrift:"validationResult,1,required" db:"validationResult" json:"validationResult"`
  ErrorMessage *string `thrift:"errorMessage,2" db:"errorMessage" json:"errorMessage,omitempty"`
}

func NewLaunchValidationException() *LaunchValidationException {
  return &LaunchValidationException{}
}

var LaunchValidationException_ValidationResult__DEFAULT *ValidationResults
func (p *LaunchValidationException) GetValidationResult_() *ValidationResults {
  if !p.IsSetValidationResult_() {
    return LaunchValidationException_ValidationResult__DEFAULT
  }
return p.ValidationResult_
}
var LaunchValidationException_ErrorMessage_DEFAULT string
func (p *LaunchValidationException) GetErrorMessage() string {
  if !p.IsSetErrorMessage() {
    return LaunchValidationException_ErrorMessage_DEFAULT
  }
return *p.ErrorMessage
}
func (p *LaunchValidationException) IsSetValidationResult_() bool {
  return p.ValidationResult_ != nil
}

func (p *LaunchValidationException) IsSetErrorMessage() bool {
  return p.ErrorMessage != nil
}

func (p *LaunchValidationException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetValidationResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetValidationResult_ = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetValidationResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ValidationResult_ is not set"));
  }
  return nil
}

func (p *LaunchValidationException)  ReadField1(iprot thrift.TProtocol) error {
  p.ValidationResult_ = &ValidationResults{}
  if err := p.ValidationResult_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ValidationResult_), err)
  }
  return nil
}

func (p *LaunchValidationException)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ErrorMessage = &v
}
  return nil
}

func (p *LaunchValidationException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("LaunchValidationException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LaunchValidationException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("validationResult", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:validationResult: ", p), err) }
  if err := p.ValidationResult_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ValidationResult_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:validationResult: ", p), err) }
  return err
}

func (p *LaunchValidationException) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetErrorMessage() {
    if err := oprot.WriteFieldBegin("errorMessage", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:errorMessage: ", p), err) }
    if err := oprot.WriteString(string(*p.ErrorMessage)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.errorMessage (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:errorMessage: ", p), err) }
  }
  return err
}

func (p *LaunchValidationException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LaunchValidationException(%+v)", *p)
}

func (p *LaunchValidationException) Error() string {
  return p.String()
}

// This exception is thrown by Airavata Services when a call fails as a result of
// a problem in the service that could not be changed through client's action.
// 
// airavataErrorType:  The message type indicating the error that occurred.
//   must be one of the values of AiravataErrorType.
// 
// message:  This may contain additional information about the error
// 
// 
// Attributes:
//  - AiravataErrorType
//  - Message
type AiravataSystemException struct {
  AiravataErrorType AiravataErrorType `thrift:"airavataErrorType,1,required" db:"airavataErrorType" json:"airavataErrorType"`
  Message *string `thrift:"message,2" db:"message" json:"message,omitempty"`
}

func NewAiravataSystemException() *AiravataSystemException {
  return &AiravataSystemException{}
}


func (p *AiravataSystemException) GetAiravataErrorType() AiravataErrorType {
  return p.AiravataErrorType
}
var AiravataSystemException_Message_DEFAULT string
func (p *AiravataSystemException) GetMessage() string {
  if !p.IsSetMessage() {
    return AiravataSystemException_Message_DEFAULT
  }
return *p.Message
}
func (p *AiravataSystemException) IsSetMessage() bool {
  return p.Message != nil
}

func (p *AiravataSystemException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAiravataErrorType bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAiravataErrorType = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAiravataErrorType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AiravataErrorType is not set"));
  }
  return nil
}

func (p *AiravataSystemException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := AiravataErrorType(v)
  p.AiravataErrorType = temp
}
  return nil
}

func (p *AiravataSystemException)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = &v
}
  return nil
}

func (p *AiravataSystemException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AiravataSystemException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataSystemException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("airavataErrorType", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:airavataErrorType: ", p), err) }
  if err := oprot.WriteI32(int32(p.AiravataErrorType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.airavataErrorType (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:airavataErrorType: ", p), err) }
  return err
}

func (p *AiravataSystemException) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetMessage() {
    if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
    if err := oprot.WriteString(string(*p.Message)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  }
  return err
}

func (p *AiravataSystemException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataSystemException(%+v)", *p)
}

func (p *AiravataSystemException) Error() string {
  return p.String()
}

