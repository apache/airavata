// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package credential_store_data_models

import (
	"bytes"
	"reflect"
	"database/sql/driver"
	"errors"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type CredentialOwnerType int64
const (
  CredentialOwnerType_GATEWAY CredentialOwnerType = 0
  CredentialOwnerType_USER CredentialOwnerType = 1
)

func (p CredentialOwnerType) String() string {
  switch p {
  case CredentialOwnerType_GATEWAY: return "GATEWAY"
  case CredentialOwnerType_USER: return "USER"
  }
  return "<UNSET>"
}

func CredentialOwnerTypeFromString(s string) (CredentialOwnerType, error) {
  switch s {
  case "GATEWAY": return CredentialOwnerType_GATEWAY, nil 
  case "USER": return CredentialOwnerType_USER, nil 
  }
  return CredentialOwnerType(0), fmt.Errorf("not a valid CredentialOwnerType string")
}


func CredentialOwnerTypePtr(v CredentialOwnerType) *CredentialOwnerType { return &v }

func (p CredentialOwnerType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *CredentialOwnerType) UnmarshalText(text []byte) error {
q, err := CredentialOwnerTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *CredentialOwnerType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = CredentialOwnerType(v)
return nil
}

func (p * CredentialOwnerType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//Data Types supported in Airavata. The primitive data types
//
type SummaryType int64
const (
  SummaryType_SSH SummaryType = 0
  SummaryType_PASSWD SummaryType = 1
  SummaryType_CERT SummaryType = 2
)

func (p SummaryType) String() string {
  switch p {
  case SummaryType_SSH: return "SSH"
  case SummaryType_PASSWD: return "PASSWD"
  case SummaryType_CERT: return "CERT"
  }
  return "<UNSET>"
}

func SummaryTypeFromString(s string) (SummaryType, error) {
  switch s {
  case "SSH": return SummaryType_SSH, nil 
  case "PASSWD": return SummaryType_PASSWD, nil 
  case "CERT": return SummaryType_CERT, nil 
  }
  return SummaryType(0), fmt.Errorf("not a valid SummaryType string")
}


func SummaryTypePtr(v SummaryType) *SummaryType { return &v }

func (p SummaryType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SummaryType) UnmarshalText(text []byte) error {
q, err := SummaryTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SummaryType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SummaryType(v)
return nil
}

func (p * SummaryType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - GatewayId
//  - Username
//  - Passphrase
//  - PublicKey
//  - PrivateKey
//  - PersistedTime
//  - Token
//  - Description
//  - CredentialOwnerType
type SSHCredential struct {
  GatewayId string `thrift:"gatewayId,1,required" db:"gatewayId" json:"gatewayId"`
  Username string `thrift:"username,2,required" db:"username" json:"username"`
  Passphrase *string `thrift:"passphrase,3" db:"passphrase" json:"passphrase,omitempty"`
  PublicKey *string `thrift:"publicKey,4" db:"publicKey" json:"publicKey,omitempty"`
  PrivateKey *string `thrift:"privateKey,5" db:"privateKey" json:"privateKey,omitempty"`
  PersistedTime *int64 `thrift:"persistedTime,6" db:"persistedTime" json:"persistedTime,omitempty"`
  Token *string `thrift:"token,7" db:"token" json:"token,omitempty"`
  Description *string `thrift:"description,8" db:"description" json:"description,omitempty"`
  CredentialOwnerType CredentialOwnerType `thrift:"credentialOwnerType,9" db:"credentialOwnerType" json:"credentialOwnerType,omitempty"`
}

func NewSSHCredential() *SSHCredential {
  return &SSHCredential{
CredentialOwnerType: 0,
}
}


func (p *SSHCredential) GetGatewayId() string {
  return p.GatewayId
}

func (p *SSHCredential) GetUsername() string {
  return p.Username
}
var SSHCredential_Passphrase_DEFAULT string
func (p *SSHCredential) GetPassphrase() string {
  if !p.IsSetPassphrase() {
    return SSHCredential_Passphrase_DEFAULT
  }
return *p.Passphrase
}
var SSHCredential_PublicKey_DEFAULT string
func (p *SSHCredential) GetPublicKey() string {
  if !p.IsSetPublicKey() {
    return SSHCredential_PublicKey_DEFAULT
  }
return *p.PublicKey
}
var SSHCredential_PrivateKey_DEFAULT string
func (p *SSHCredential) GetPrivateKey() string {
  if !p.IsSetPrivateKey() {
    return SSHCredential_PrivateKey_DEFAULT
  }
return *p.PrivateKey
}
var SSHCredential_PersistedTime_DEFAULT int64
func (p *SSHCredential) GetPersistedTime() int64 {
  if !p.IsSetPersistedTime() {
    return SSHCredential_PersistedTime_DEFAULT
  }
return *p.PersistedTime
}
var SSHCredential_Token_DEFAULT string
func (p *SSHCredential) GetToken() string {
  if !p.IsSetToken() {
    return SSHCredential_Token_DEFAULT
  }
return *p.Token
}
var SSHCredential_Description_DEFAULT string
func (p *SSHCredential) GetDescription() string {
  if !p.IsSetDescription() {
    return SSHCredential_Description_DEFAULT
  }
return *p.Description
}
var SSHCredential_CredentialOwnerType_DEFAULT CredentialOwnerType = 0

func (p *SSHCredential) GetCredentialOwnerType() CredentialOwnerType {
  return p.CredentialOwnerType
}
func (p *SSHCredential) IsSetPassphrase() bool {
  return p.Passphrase != nil
}

func (p *SSHCredential) IsSetPublicKey() bool {
  return p.PublicKey != nil
}

func (p *SSHCredential) IsSetPrivateKey() bool {
  return p.PrivateKey != nil
}

func (p *SSHCredential) IsSetPersistedTime() bool {
  return p.PersistedTime != nil
}

func (p *SSHCredential) IsSetToken() bool {
  return p.Token != nil
}

func (p *SSHCredential) IsSetDescription() bool {
  return p.Description != nil
}

func (p *SSHCredential) IsSetCredentialOwnerType() bool {
  return p.CredentialOwnerType != SSHCredential_CredentialOwnerType_DEFAULT
}

func (p *SSHCredential) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetGatewayId bool = false;
  var issetUsername bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUsername = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  if !issetUsername{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Username is not set"));
  }
  return nil
}

func (p *SSHCredential)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *SSHCredential)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *SSHCredential)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Passphrase = &v
}
  return nil
}

func (p *SSHCredential)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PublicKey = &v
}
  return nil
}

func (p *SSHCredential)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.PrivateKey = &v
}
  return nil
}

func (p *SSHCredential)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.PersistedTime = &v
}
  return nil
}

func (p *SSHCredential)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Token = &v
}
  return nil
}

func (p *SSHCredential)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Description = &v
}
  return nil
}

func (p *SSHCredential)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  temp := CredentialOwnerType(v)
  p.CredentialOwnerType = temp
}
  return nil
}

func (p *SSHCredential) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SSHCredential"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SSHCredential) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:gatewayId: ", p), err) }
  return err
}

func (p *SSHCredential) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("username", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:username: ", p), err) }
  if err := oprot.WriteString(string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:username: ", p), err) }
  return err
}

func (p *SSHCredential) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetPassphrase() {
    if err := oprot.WriteFieldBegin("passphrase", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:passphrase: ", p), err) }
    if err := oprot.WriteString(string(*p.Passphrase)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.passphrase (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:passphrase: ", p), err) }
  }
  return err
}

func (p *SSHCredential) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetPublicKey() {
    if err := oprot.WriteFieldBegin("publicKey", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:publicKey: ", p), err) }
    if err := oprot.WriteString(string(*p.PublicKey)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.publicKey (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:publicKey: ", p), err) }
  }
  return err
}

func (p *SSHCredential) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetPrivateKey() {
    if err := oprot.WriteFieldBegin("privateKey", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:privateKey: ", p), err) }
    if err := oprot.WriteString(string(*p.PrivateKey)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.privateKey (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:privateKey: ", p), err) }
  }
  return err
}

func (p *SSHCredential) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetPersistedTime() {
    if err := oprot.WriteFieldBegin("persistedTime", thrift.I64, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:persistedTime: ", p), err) }
    if err := oprot.WriteI64(int64(*p.PersistedTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.persistedTime (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:persistedTime: ", p), err) }
  }
  return err
}

func (p *SSHCredential) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetToken() {
    if err := oprot.WriteFieldBegin("token", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:token: ", p), err) }
    if err := oprot.WriteString(string(*p.Token)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.token (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:token: ", p), err) }
  }
  return err
}

func (p *SSHCredential) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetDescription() {
    if err := oprot.WriteFieldBegin("description", thrift.STRING, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:description: ", p), err) }
    if err := oprot.WriteString(string(*p.Description)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.description (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:description: ", p), err) }
  }
  return err
}

func (p *SSHCredential) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetCredentialOwnerType() {
    if err := oprot.WriteFieldBegin("credentialOwnerType", thrift.I32, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:credentialOwnerType: ", p), err) }
    if err := oprot.WriteI32(int32(p.CredentialOwnerType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.credentialOwnerType (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:credentialOwnerType: ", p), err) }
  }
  return err
}

func (p *SSHCredential) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SSHCredential(%+v)", *p)
}

// Attributes:
//  - Type
//  - GatewayId
//  - Username
//  - PublicKey
//  - PersistedTime
//  - Token
//  - Description
type CredentialSummary struct {
  Type SummaryType `thrift:"type,1,required" db:"type" json:"type"`
  GatewayId string `thrift:"gatewayId,2,required" db:"gatewayId" json:"gatewayId"`
  Username string `thrift:"username,3,required" db:"username" json:"username"`
  PublicKey *string `thrift:"publicKey,4" db:"publicKey" json:"publicKey,omitempty"`
  PersistedTime *int64 `thrift:"persistedTime,5" db:"persistedTime" json:"persistedTime,omitempty"`
  Token string `thrift:"token,6,required" db:"token" json:"token"`
  Description *string `thrift:"description,7" db:"description" json:"description,omitempty"`
}

func NewCredentialSummary() *CredentialSummary {
  return &CredentialSummary{}
}


func (p *CredentialSummary) GetType() SummaryType {
  return p.Type
}

func (p *CredentialSummary) GetGatewayId() string {
  return p.GatewayId
}

func (p *CredentialSummary) GetUsername() string {
  return p.Username
}
var CredentialSummary_PublicKey_DEFAULT string
func (p *CredentialSummary) GetPublicKey() string {
  if !p.IsSetPublicKey() {
    return CredentialSummary_PublicKey_DEFAULT
  }
return *p.PublicKey
}
var CredentialSummary_PersistedTime_DEFAULT int64
func (p *CredentialSummary) GetPersistedTime() int64 {
  if !p.IsSetPersistedTime() {
    return CredentialSummary_PersistedTime_DEFAULT
  }
return *p.PersistedTime
}

func (p *CredentialSummary) GetToken() string {
  return p.Token
}
var CredentialSummary_Description_DEFAULT string
func (p *CredentialSummary) GetDescription() string {
  if !p.IsSetDescription() {
    return CredentialSummary_Description_DEFAULT
  }
return *p.Description
}
func (p *CredentialSummary) IsSetPublicKey() bool {
  return p.PublicKey != nil
}

func (p *CredentialSummary) IsSetPersistedTime() bool {
  return p.PersistedTime != nil
}

func (p *CredentialSummary) IsSetDescription() bool {
  return p.Description != nil
}

func (p *CredentialSummary) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetType bool = false;
  var issetGatewayId bool = false;
  var issetUsername bool = false;
  var issetToken bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetType = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUsername = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetToken = true
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  if !issetUsername{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Username is not set"));
  }
  if !issetToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Token is not set"));
  }
  return nil
}

func (p *CredentialSummary)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SummaryType(v)
  p.Type = temp
}
  return nil
}

func (p *CredentialSummary)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *CredentialSummary)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *CredentialSummary)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PublicKey = &v
}
  return nil
}

func (p *CredentialSummary)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.PersistedTime = &v
}
  return nil
}

func (p *CredentialSummary)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *CredentialSummary)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Description = &v
}
  return nil
}

func (p *CredentialSummary) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CredentialSummary"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CredentialSummary) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *CredentialSummary) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayId: ", p), err) }
  return err
}

func (p *CredentialSummary) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("username", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:username: ", p), err) }
  if err := oprot.WriteString(string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:username: ", p), err) }
  return err
}

func (p *CredentialSummary) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetPublicKey() {
    if err := oprot.WriteFieldBegin("publicKey", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:publicKey: ", p), err) }
    if err := oprot.WriteString(string(*p.PublicKey)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.publicKey (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:publicKey: ", p), err) }
  }
  return err
}

func (p *CredentialSummary) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetPersistedTime() {
    if err := oprot.WriteFieldBegin("persistedTime", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:persistedTime: ", p), err) }
    if err := oprot.WriteI64(int64(*p.PersistedTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.persistedTime (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:persistedTime: ", p), err) }
  }
  return err
}

func (p *CredentialSummary) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:token: ", p), err) }
  return err
}

func (p *CredentialSummary) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetDescription() {
    if err := oprot.WriteFieldBegin("description", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:description: ", p), err) }
    if err := oprot.WriteString(string(*p.Description)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.description (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:description: ", p), err) }
  }
  return err
}

func (p *CredentialSummary) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CredentialSummary(%+v)", *p)
}

// Attributes:
//  - GatewayName
//  - Username
//  - UserEmail
type CommunityUser struct {
  GatewayName string `thrift:"gatewayName,1,required" db:"gatewayName" json:"gatewayName"`
  Username string `thrift:"username,2,required" db:"username" json:"username"`
  UserEmail string `thrift:"userEmail,3,required" db:"userEmail" json:"userEmail"`
}

func NewCommunityUser() *CommunityUser {
  return &CommunityUser{}
}


func (p *CommunityUser) GetGatewayName() string {
  return p.GatewayName
}

func (p *CommunityUser) GetUsername() string {
  return p.Username
}

func (p *CommunityUser) GetUserEmail() string {
  return p.UserEmail
}
func (p *CommunityUser) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetGatewayName bool = false;
  var issetUsername bool = false;
  var issetUserEmail bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayName = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUsername = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserEmail = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetGatewayName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayName is not set"));
  }
  if !issetUsername{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Username is not set"));
  }
  if !issetUserEmail{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserEmail is not set"));
  }
  return nil
}

func (p *CommunityUser)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.GatewayName = v
}
  return nil
}

func (p *CommunityUser)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *CommunityUser)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.UserEmail = v
}
  return nil
}

func (p *CommunityUser) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CommunityUser"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CommunityUser) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:gatewayName: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:gatewayName: ", p), err) }
  return err
}

func (p *CommunityUser) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("username", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:username: ", p), err) }
  if err := oprot.WriteString(string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:username: ", p), err) }
  return err
}

func (p *CommunityUser) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userEmail", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userEmail: ", p), err) }
  if err := oprot.WriteString(string(p.UserEmail)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userEmail (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userEmail: ", p), err) }
  return err
}

func (p *CommunityUser) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CommunityUser(%+v)", *p)
}

// Attributes:
//  - CommunityUser
//  - X509Cert
//  - NotAfter
//  - PrivateKey
//  - LifeTime
//  - NotBefore
//  - PersistedTime
//  - Token
type CertificateCredential struct {
  CommunityUser *CommunityUser `thrift:"communityUser,1,required" db:"communityUser" json:"communityUser"`
  X509Cert string `thrift:"x509Cert,2,required" db:"x509Cert" json:"x509Cert"`
  NotAfter *string `thrift:"notAfter,3" db:"notAfter" json:"notAfter,omitempty"`
  PrivateKey *string `thrift:"privateKey,4" db:"privateKey" json:"privateKey,omitempty"`
  LifeTime *int64 `thrift:"lifeTime,5" db:"lifeTime" json:"lifeTime,omitempty"`
  NotBefore *string `thrift:"notBefore,6" db:"notBefore" json:"notBefore,omitempty"`
  PersistedTime *int64 `thrift:"persistedTime,7" db:"persistedTime" json:"persistedTime,omitempty"`
  Token *string `thrift:"token,8" db:"token" json:"token,omitempty"`
}

func NewCertificateCredential() *CertificateCredential {
  return &CertificateCredential{}
}

var CertificateCredential_CommunityUser_DEFAULT *CommunityUser
func (p *CertificateCredential) GetCommunityUser() *CommunityUser {
  if !p.IsSetCommunityUser() {
    return CertificateCredential_CommunityUser_DEFAULT
  }
return p.CommunityUser
}

func (p *CertificateCredential) GetX509Cert() string {
  return p.X509Cert
}
var CertificateCredential_NotAfter_DEFAULT string
func (p *CertificateCredential) GetNotAfter() string {
  if !p.IsSetNotAfter() {
    return CertificateCredential_NotAfter_DEFAULT
  }
return *p.NotAfter
}
var CertificateCredential_PrivateKey_DEFAULT string
func (p *CertificateCredential) GetPrivateKey() string {
  if !p.IsSetPrivateKey() {
    return CertificateCredential_PrivateKey_DEFAULT
  }
return *p.PrivateKey
}
var CertificateCredential_LifeTime_DEFAULT int64
func (p *CertificateCredential) GetLifeTime() int64 {
  if !p.IsSetLifeTime() {
    return CertificateCredential_LifeTime_DEFAULT
  }
return *p.LifeTime
}
var CertificateCredential_NotBefore_DEFAULT string
func (p *CertificateCredential) GetNotBefore() string {
  if !p.IsSetNotBefore() {
    return CertificateCredential_NotBefore_DEFAULT
  }
return *p.NotBefore
}
var CertificateCredential_PersistedTime_DEFAULT int64
func (p *CertificateCredential) GetPersistedTime() int64 {
  if !p.IsSetPersistedTime() {
    return CertificateCredential_PersistedTime_DEFAULT
  }
return *p.PersistedTime
}
var CertificateCredential_Token_DEFAULT string
func (p *CertificateCredential) GetToken() string {
  if !p.IsSetToken() {
    return CertificateCredential_Token_DEFAULT
  }
return *p.Token
}
func (p *CertificateCredential) IsSetCommunityUser() bool {
  return p.CommunityUser != nil
}

func (p *CertificateCredential) IsSetNotAfter() bool {
  return p.NotAfter != nil
}

func (p *CertificateCredential) IsSetPrivateKey() bool {
  return p.PrivateKey != nil
}

func (p *CertificateCredential) IsSetLifeTime() bool {
  return p.LifeTime != nil
}

func (p *CertificateCredential) IsSetNotBefore() bool {
  return p.NotBefore != nil
}

func (p *CertificateCredential) IsSetPersistedTime() bool {
  return p.PersistedTime != nil
}

func (p *CertificateCredential) IsSetToken() bool {
  return p.Token != nil
}

func (p *CertificateCredential) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetCommunityUser bool = false;
  var issetX509Cert bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetCommunityUser = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetX509Cert = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetCommunityUser{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CommunityUser is not set"));
  }
  if !issetX509Cert{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field X509Cert is not set"));
  }
  return nil
}

func (p *CertificateCredential)  ReadField1(iprot thrift.TProtocol) error {
  p.CommunityUser = &CommunityUser{}
  if err := p.CommunityUser.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CommunityUser), err)
  }
  return nil
}

func (p *CertificateCredential)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.X509Cert = v
}
  return nil
}

func (p *CertificateCredential)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NotAfter = &v
}
  return nil
}

func (p *CertificateCredential)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PrivateKey = &v
}
  return nil
}

func (p *CertificateCredential)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.LifeTime = &v
}
  return nil
}

func (p *CertificateCredential)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.NotBefore = &v
}
  return nil
}

func (p *CertificateCredential)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.PersistedTime = &v
}
  return nil
}

func (p *CertificateCredential)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Token = &v
}
  return nil
}

func (p *CertificateCredential) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CertificateCredential"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CertificateCredential) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("communityUser", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:communityUser: ", p), err) }
  if err := p.CommunityUser.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CommunityUser), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:communityUser: ", p), err) }
  return err
}

func (p *CertificateCredential) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("x509Cert", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:x509Cert: ", p), err) }
  if err := oprot.WriteString(string(p.X509Cert)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.x509Cert (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:x509Cert: ", p), err) }
  return err
}

func (p *CertificateCredential) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetNotAfter() {
    if err := oprot.WriteFieldBegin("notAfter", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notAfter: ", p), err) }
    if err := oprot.WriteString(string(*p.NotAfter)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.notAfter (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notAfter: ", p), err) }
  }
  return err
}

func (p *CertificateCredential) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetPrivateKey() {
    if err := oprot.WriteFieldBegin("privateKey", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:privateKey: ", p), err) }
    if err := oprot.WriteString(string(*p.PrivateKey)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.privateKey (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:privateKey: ", p), err) }
  }
  return err
}

func (p *CertificateCredential) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetLifeTime() {
    if err := oprot.WriteFieldBegin("lifeTime", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:lifeTime: ", p), err) }
    if err := oprot.WriteI64(int64(*p.LifeTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.lifeTime (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:lifeTime: ", p), err) }
  }
  return err
}

func (p *CertificateCredential) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetNotBefore() {
    if err := oprot.WriteFieldBegin("notBefore", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:notBefore: ", p), err) }
    if err := oprot.WriteString(string(*p.NotBefore)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.notBefore (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:notBefore: ", p), err) }
  }
  return err
}

func (p *CertificateCredential) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetPersistedTime() {
    if err := oprot.WriteFieldBegin("persistedTime", thrift.I64, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:persistedTime: ", p), err) }
    if err := oprot.WriteI64(int64(*p.PersistedTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.persistedTime (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:persistedTime: ", p), err) }
  }
  return err
}

func (p *CertificateCredential) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetToken() {
    if err := oprot.WriteFieldBegin("token", thrift.STRING, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:token: ", p), err) }
    if err := oprot.WriteString(string(*p.Token)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.token (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:token: ", p), err) }
  }
  return err
}

func (p *CertificateCredential) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CertificateCredential(%+v)", *p)
}

// Attributes:
//  - GatewayId
//  - PortalUserName
//  - LoginUserName
//  - Password
//  - Description
//  - PersistedTime
//  - Token
type PasswordCredential struct {
  GatewayId string `thrift:"gatewayId,1,required" db:"gatewayId" json:"gatewayId"`
  PortalUserName string `thrift:"portalUserName,2,required" db:"portalUserName" json:"portalUserName"`
  LoginUserName string `thrift:"loginUserName,3,required" db:"loginUserName" json:"loginUserName"`
  Password string `thrift:"password,4,required" db:"password" json:"password"`
  Description *string `thrift:"description,5" db:"description" json:"description,omitempty"`
  PersistedTime *int64 `thrift:"persistedTime,6" db:"persistedTime" json:"persistedTime,omitempty"`
  Token *string `thrift:"token,7" db:"token" json:"token,omitempty"`
}

func NewPasswordCredential() *PasswordCredential {
  return &PasswordCredential{}
}


func (p *PasswordCredential) GetGatewayId() string {
  return p.GatewayId
}

func (p *PasswordCredential) GetPortalUserName() string {
  return p.PortalUserName
}

func (p *PasswordCredential) GetLoginUserName() string {
  return p.LoginUserName
}

func (p *PasswordCredential) GetPassword() string {
  return p.Password
}
var PasswordCredential_Description_DEFAULT string
func (p *PasswordCredential) GetDescription() string {
  if !p.IsSetDescription() {
    return PasswordCredential_Description_DEFAULT
  }
return *p.Description
}
var PasswordCredential_PersistedTime_DEFAULT int64
func (p *PasswordCredential) GetPersistedTime() int64 {
  if !p.IsSetPersistedTime() {
    return PasswordCredential_PersistedTime_DEFAULT
  }
return *p.PersistedTime
}
var PasswordCredential_Token_DEFAULT string
func (p *PasswordCredential) GetToken() string {
  if !p.IsSetToken() {
    return PasswordCredential_Token_DEFAULT
  }
return *p.Token
}
func (p *PasswordCredential) IsSetDescription() bool {
  return p.Description != nil
}

func (p *PasswordCredential) IsSetPersistedTime() bool {
  return p.PersistedTime != nil
}

func (p *PasswordCredential) IsSetToken() bool {
  return p.Token != nil
}

func (p *PasswordCredential) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetGatewayId bool = false;
  var issetPortalUserName bool = false;
  var issetLoginUserName bool = false;
  var issetPassword bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetPortalUserName = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetLoginUserName = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetPassword = true
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  if !issetPortalUserName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PortalUserName is not set"));
  }
  if !issetLoginUserName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LoginUserName is not set"));
  }
  if !issetPassword{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Password is not set"));
  }
  return nil
}

func (p *PasswordCredential)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *PasswordCredential)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PortalUserName = v
}
  return nil
}

func (p *PasswordCredential)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LoginUserName = v
}
  return nil
}

func (p *PasswordCredential)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *PasswordCredential)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Description = &v
}
  return nil
}

func (p *PasswordCredential)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.PersistedTime = &v
}
  return nil
}

func (p *PasswordCredential)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Token = &v
}
  return nil
}

func (p *PasswordCredential) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PasswordCredential"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PasswordCredential) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:gatewayId: ", p), err) }
  return err
}

func (p *PasswordCredential) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("portalUserName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:portalUserName: ", p), err) }
  if err := oprot.WriteString(string(p.PortalUserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.portalUserName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:portalUserName: ", p), err) }
  return err
}

func (p *PasswordCredential) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("loginUserName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:loginUserName: ", p), err) }
  if err := oprot.WriteString(string(p.LoginUserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.loginUserName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:loginUserName: ", p), err) }
  return err
}

func (p *PasswordCredential) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("password", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:password: ", p), err) }
  if err := oprot.WriteString(string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:password: ", p), err) }
  return err
}

func (p *PasswordCredential) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetDescription() {
    if err := oprot.WriteFieldBegin("description", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:description: ", p), err) }
    if err := oprot.WriteString(string(*p.Description)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.description (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:description: ", p), err) }
  }
  return err
}

func (p *PasswordCredential) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetPersistedTime() {
    if err := oprot.WriteFieldBegin("persistedTime", thrift.I64, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:persistedTime: ", p), err) }
    if err := oprot.WriteI64(int64(*p.PersistedTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.persistedTime (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:persistedTime: ", p), err) }
  }
  return err
}

func (p *PasswordCredential) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetToken() {
    if err := oprot.WriteFieldBegin("token", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:token: ", p), err) }
    if err := oprot.WriteString(string(*p.Token)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.token (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:token: ", p), err) }
  }
  return err
}

func (p *PasswordCredential) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PasswordCredential(%+v)", *p)
}

