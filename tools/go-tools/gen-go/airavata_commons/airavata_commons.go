// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package airavata_commons

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - ErrorId
//  - CreationTime
//  - ActualErrorMessage
//  - UserFriendlyMessage
//  - TransientOrPersistent
//  - RootCauseErrorIdList
type ErrorModel struct {
  ErrorId string `thrift:"errorId,1,required" db:"errorId" json:"errorId"`
  CreationTime *int64 `thrift:"creationTime,2" db:"creationTime" json:"creationTime,omitempty"`
  ActualErrorMessage *string `thrift:"actualErrorMessage,3" db:"actualErrorMessage" json:"actualErrorMessage,omitempty"`
  UserFriendlyMessage *string `thrift:"userFriendlyMessage,4" db:"userFriendlyMessage" json:"userFriendlyMessage,omitempty"`
  TransientOrPersistent bool `thrift:"transientOrPersistent,5" db:"transientOrPersistent" json:"transientOrPersistent,omitempty"`
  RootCauseErrorIdList []string `thrift:"rootCauseErrorIdList,6" db:"rootCauseErrorIdList" json:"rootCauseErrorIdList,omitempty"`
}

func NewErrorModel() *ErrorModel {
  return &ErrorModel{
ErrorId: "DO_NOT_SET_AT_CLIENTS",
}
}


func (p *ErrorModel) GetErrorId() string {
  return p.ErrorId
}
var ErrorModel_CreationTime_DEFAULT int64
func (p *ErrorModel) GetCreationTime() int64 {
  if !p.IsSetCreationTime() {
    return ErrorModel_CreationTime_DEFAULT
  }
return *p.CreationTime
}
var ErrorModel_ActualErrorMessage_DEFAULT string
func (p *ErrorModel) GetActualErrorMessage() string {
  if !p.IsSetActualErrorMessage() {
    return ErrorModel_ActualErrorMessage_DEFAULT
  }
return *p.ActualErrorMessage
}
var ErrorModel_UserFriendlyMessage_DEFAULT string
func (p *ErrorModel) GetUserFriendlyMessage() string {
  if !p.IsSetUserFriendlyMessage() {
    return ErrorModel_UserFriendlyMessage_DEFAULT
  }
return *p.UserFriendlyMessage
}
var ErrorModel_TransientOrPersistent_DEFAULT bool = false

func (p *ErrorModel) GetTransientOrPersistent() bool {
  return p.TransientOrPersistent
}
var ErrorModel_RootCauseErrorIdList_DEFAULT []string

func (p *ErrorModel) GetRootCauseErrorIdList() []string {
  return p.RootCauseErrorIdList
}
func (p *ErrorModel) IsSetCreationTime() bool {
  return p.CreationTime != nil
}

func (p *ErrorModel) IsSetActualErrorMessage() bool {
  return p.ActualErrorMessage != nil
}

func (p *ErrorModel) IsSetUserFriendlyMessage() bool {
  return p.UserFriendlyMessage != nil
}

func (p *ErrorModel) IsSetTransientOrPersistent() bool {
  return p.TransientOrPersistent != ErrorModel_TransientOrPersistent_DEFAULT
}

func (p *ErrorModel) IsSetRootCauseErrorIdList() bool {
  return p.RootCauseErrorIdList != nil
}

func (p *ErrorModel) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetErrorId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetErrorId = true
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetErrorId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorId is not set"));
  }
  return nil
}

func (p *ErrorModel)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ErrorId = v
}
  return nil
}

func (p *ErrorModel)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CreationTime = &v
}
  return nil
}

func (p *ErrorModel)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ActualErrorMessage = &v
}
  return nil
}

func (p *ErrorModel)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UserFriendlyMessage = &v
}
  return nil
}

func (p *ErrorModel)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.TransientOrPersistent = v
}
  return nil
}

func (p *ErrorModel)  ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.RootCauseErrorIdList =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.RootCauseErrorIdList = append(p.RootCauseErrorIdList, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ErrorModel) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ErrorModel"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ErrorModel) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("errorId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:errorId: ", p), err) }
  if err := oprot.WriteString(string(p.ErrorId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errorId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:errorId: ", p), err) }
  return err
}

func (p *ErrorModel) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetCreationTime() {
    if err := oprot.WriteFieldBegin("creationTime", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:creationTime: ", p), err) }
    if err := oprot.WriteI64(int64(*p.CreationTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.creationTime (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:creationTime: ", p), err) }
  }
  return err
}

func (p *ErrorModel) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetActualErrorMessage() {
    if err := oprot.WriteFieldBegin("actualErrorMessage", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:actualErrorMessage: ", p), err) }
    if err := oprot.WriteString(string(*p.ActualErrorMessage)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.actualErrorMessage (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:actualErrorMessage: ", p), err) }
  }
  return err
}

func (p *ErrorModel) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetUserFriendlyMessage() {
    if err := oprot.WriteFieldBegin("userFriendlyMessage", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:userFriendlyMessage: ", p), err) }
    if err := oprot.WriteString(string(*p.UserFriendlyMessage)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.userFriendlyMessage (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:userFriendlyMessage: ", p), err) }
  }
  return err
}

func (p *ErrorModel) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetTransientOrPersistent() {
    if err := oprot.WriteFieldBegin("transientOrPersistent", thrift.BOOL, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:transientOrPersistent: ", p), err) }
    if err := oprot.WriteBool(bool(p.TransientOrPersistent)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.transientOrPersistent (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:transientOrPersistent: ", p), err) }
  }
  return err
}

func (p *ErrorModel) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetRootCauseErrorIdList() {
    if err := oprot.WriteFieldBegin("rootCauseErrorIdList", thrift.LIST, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:rootCauseErrorIdList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.RootCauseErrorIdList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.RootCauseErrorIdList {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:rootCauseErrorIdList: ", p), err) }
  }
  return err
}

func (p *ErrorModel) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ErrorModel(%+v)", *p)
}

// This data structure can be used to store the validation results
// captured during validation step and during the launchExperiment
// operation it can be easilly checked to see the errors occured
// during the experiment launch operation
// 
// 
// Attributes:
//  - Result_
//  - ErrorDetails
type ValidatorResult_ struct {
  Result_ bool `thrift:"result,1,required" db:"result" json:"result"`
  ErrorDetails *string `thrift:"errorDetails,2" db:"errorDetails" json:"errorDetails,omitempty"`
}

func NewValidatorResult_() *ValidatorResult_ {
  return &ValidatorResult_{}
}


func (p *ValidatorResult_) GetResult_() bool {
  return p.Result_
}
var ValidatorResult__ErrorDetails_DEFAULT string
func (p *ValidatorResult_) GetErrorDetails() string {
  if !p.IsSetErrorDetails() {
    return ValidatorResult__ErrorDetails_DEFAULT
  }
return *p.ErrorDetails
}
func (p *ValidatorResult_) IsSetErrorDetails() bool {
  return p.ErrorDetails != nil
}

func (p *ValidatorResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetResult_ = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *ValidatorResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Result_ = v
}
  return nil
}

func (p *ValidatorResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ErrorDetails = &v
}
  return nil
}

func (p *ValidatorResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ValidatorResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ValidatorResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := oprot.WriteBool(bool(p.Result_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.result (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *ValidatorResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetErrorDetails() {
    if err := oprot.WriteFieldBegin("errorDetails", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:errorDetails: ", p), err) }
    if err := oprot.WriteString(string(*p.ErrorDetails)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.errorDetails (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:errorDetails: ", p), err) }
  }
  return err
}

func (p *ValidatorResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ValidatorResult_(%+v)", *p)
}

// Attributes:
//  - ValidationState
//  - ValidationResultList
type ValidationResults struct {
  ValidationState bool `thrift:"validationState,1,required" db:"validationState" json:"validationState"`
  ValidationResultList []*ValidatorResult_ `thrift:"validationResultList,2,required" db:"validationResultList" json:"validationResultList"`
}

func NewValidationResults() *ValidationResults {
  return &ValidationResults{}
}


func (p *ValidationResults) GetValidationState() bool {
  return p.ValidationState
}

func (p *ValidationResults) GetValidationResultList() []*ValidatorResult_ {
  return p.ValidationResultList
}
func (p *ValidationResults) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetValidationState bool = false;
  var issetValidationResultList bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetValidationState = true
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetValidationResultList = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetValidationState{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ValidationState is not set"));
  }
  if !issetValidationResultList{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ValidationResultList is not set"));
  }
  return nil
}

func (p *ValidationResults)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ValidationState = v
}
  return nil
}

func (p *ValidationResults)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ValidatorResult_, 0, size)
  p.ValidationResultList =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &ValidatorResult_{}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.ValidationResultList = append(p.ValidationResultList, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ValidationResults) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ValidationResults"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ValidationResults) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("validationState", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:validationState: ", p), err) }
  if err := oprot.WriteBool(bool(p.ValidationState)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.validationState (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:validationState: ", p), err) }
  return err
}

func (p *ValidationResults) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("validationResultList", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:validationResultList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ValidationResultList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ValidationResultList {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:validationResultList: ", p), err) }
  return err
}

func (p *ValidationResults) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ValidationResults(%+v)", *p)
}

