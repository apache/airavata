// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package user_profile_model

import (
	"bytes"
	"reflect"
	"database/sql/driver"
	"errors"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"airavata_commons"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = airavata_commons.GoUnusedProtection__
type Status int64
const (
  Status_ACTIVE Status = 0
  Status_CONFIRMED Status = 1
  Status_APPROVED Status = 2
  Status_DELETED Status = 3
  Status_DUPLICATE Status = 4
  Status_GRACE_PERIOD Status = 5
  Status_INVITED Status = 6
  Status_DENIED Status = 7
  Status_PENDING Status = 8
  Status_PENDING_APPROVAL Status = 9
  Status_PENDING_CONFIRMATION Status = 10
  Status_SUSPENDED Status = 11
  Status_DECLINED Status = 12
  Status_EXPIRED Status = 13
)

func (p Status) String() string {
  switch p {
  case Status_ACTIVE: return "ACTIVE"
  case Status_CONFIRMED: return "CONFIRMED"
  case Status_APPROVED: return "APPROVED"
  case Status_DELETED: return "DELETED"
  case Status_DUPLICATE: return "DUPLICATE"
  case Status_GRACE_PERIOD: return "GRACE_PERIOD"
  case Status_INVITED: return "INVITED"
  case Status_DENIED: return "DENIED"
  case Status_PENDING: return "PENDING"
  case Status_PENDING_APPROVAL: return "PENDING_APPROVAL"
  case Status_PENDING_CONFIRMATION: return "PENDING_CONFIRMATION"
  case Status_SUSPENDED: return "SUSPENDED"
  case Status_DECLINED: return "DECLINED"
  case Status_EXPIRED: return "EXPIRED"
  }
  return "<UNSET>"
}

func StatusFromString(s string) (Status, error) {
  switch s {
  case "ACTIVE": return Status_ACTIVE, nil 
  case "CONFIRMED": return Status_CONFIRMED, nil 
  case "APPROVED": return Status_APPROVED, nil 
  case "DELETED": return Status_DELETED, nil 
  case "DUPLICATE": return Status_DUPLICATE, nil 
  case "GRACE_PERIOD": return Status_GRACE_PERIOD, nil 
  case "INVITED": return Status_INVITED, nil 
  case "DENIED": return Status_DENIED, nil 
  case "PENDING": return Status_PENDING, nil 
  case "PENDING_APPROVAL": return Status_PENDING_APPROVAL, nil 
  case "PENDING_CONFIRMATION": return Status_PENDING_CONFIRMATION, nil 
  case "SUSPENDED": return Status_SUSPENDED, nil 
  case "DECLINED": return Status_DECLINED, nil 
  case "EXPIRED": return Status_EXPIRED, nil 
  }
  return Status(0), fmt.Errorf("not a valid Status string")
}


func StatusPtr(v Status) *Status { return &v }

func (p Status) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *Status) UnmarshalText(text []byte) error {
q, err := StatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *Status) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = Status(v)
return nil
}

func (p * Status) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//U.S. Citizen (see: http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
//
type USCitizenship int64
const (
  USCitizenship_US_CITIZEN USCitizenship = 0
  USCitizenship_US_PERMANENT_RESIDENT USCitizenship = 1
  USCitizenship_OTHER_NON_US_CITIZEN USCitizenship = 2
)

func (p USCitizenship) String() string {
  switch p {
  case USCitizenship_US_CITIZEN: return "US_CITIZEN"
  case USCitizenship_US_PERMANENT_RESIDENT: return "US_PERMANENT_RESIDENT"
  case USCitizenship_OTHER_NON_US_CITIZEN: return "OTHER_NON_US_CITIZEN"
  }
  return "<UNSET>"
}

func USCitizenshipFromString(s string) (USCitizenship, error) {
  switch s {
  case "US_CITIZEN": return USCitizenship_US_CITIZEN, nil 
  case "US_PERMANENT_RESIDENT": return USCitizenship_US_PERMANENT_RESIDENT, nil 
  case "OTHER_NON_US_CITIZEN": return USCitizenship_OTHER_NON_US_CITIZEN, nil 
  }
  return USCitizenship(0), fmt.Errorf("not a valid USCitizenship string")
}


func USCitizenshipPtr(v USCitizenship) *USCitizenship { return &v }

func (p USCitizenship) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *USCitizenship) UnmarshalText(text []byte) error {
q, err := USCitizenshipFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *USCitizenship) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = USCitizenship(v)
return nil
}

func (p * USCitizenship) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//Hispanic or Latino - a person of Mexican, Puerto Rican, Cuban, South or
// Central American, or other Spanish culture or origin, regardless of race.
//
type Ethnicity int64
const (
  Ethnicity_HISPANIC_LATINO Ethnicity = 0
  Ethnicity_NOT_HISPANIC_LATINO Ethnicity = 1
)

func (p Ethnicity) String() string {
  switch p {
  case Ethnicity_HISPANIC_LATINO: return "HISPANIC_LATINO"
  case Ethnicity_NOT_HISPANIC_LATINO: return "NOT_HISPANIC_LATINO"
  }
  return "<UNSET>"
}

func EthnicityFromString(s string) (Ethnicity, error) {
  switch s {
  case "HISPANIC_LATINO": return Ethnicity_HISPANIC_LATINO, nil 
  case "NOT_HISPANIC_LATINO": return Ethnicity_NOT_HISPANIC_LATINO, nil 
  }
  return Ethnicity(0), fmt.Errorf("not a valid Ethnicity string")
}


func EthnicityPtr(v Ethnicity) *Ethnicity { return &v }

func (p Ethnicity) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *Ethnicity) UnmarshalText(text []byte) error {
q, err := EthnicityFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *Ethnicity) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = Ethnicity(v)
return nil
}

func (p * Ethnicity) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//* Asian - a person having origins in any of the original peoples of the Far East,
//*      Southeast Asia, or the Indian subcontinent including, for example, Cambodia,
// *      China, India, Japan, Korea, Malaysia, Pakistan, the Philippine Islands,
// *      Thailand, and Vietnam.
//* American Indian or Alaskan Native - a person having origins in any of the original
// *     peoples of North and South America (including Central America), and who maintains
//  *     tribal affiliation or community attachment.
//* Black or African American - a person having origins in any of the black racial groups
//*      of Africa.
//* Native Hawaiian or Pacific Islander - a person having origins in any of the original
//*      peoples of Hawaii, Guan, Samoa, or other Pacific Islands.
//* White - a person having origins in any of the original peoples of Europe, the Middle East, or North Africa.
//*
type Race int64
const (
  Race_ASIAN Race = 0
  Race_AMERICAN_INDIAN_OR_ALASKAN_NATIVE Race = 1
  Race_BLACK_OR_AFRICAN_AMERICAN Race = 2
  Race_NATIVE_HAWAIIAN_OR_PACIFIC_ISLANDER Race = 3
  Race_WHITE Race = 4
)

func (p Race) String() string {
  switch p {
  case Race_ASIAN: return "ASIAN"
  case Race_AMERICAN_INDIAN_OR_ALASKAN_NATIVE: return "AMERICAN_INDIAN_OR_ALASKAN_NATIVE"
  case Race_BLACK_OR_AFRICAN_AMERICAN: return "BLACK_OR_AFRICAN_AMERICAN"
  case Race_NATIVE_HAWAIIAN_OR_PACIFIC_ISLANDER: return "NATIVE_HAWAIIAN_OR_PACIFIC_ISLANDER"
  case Race_WHITE: return "WHITE"
  }
  return "<UNSET>"
}

func RaceFromString(s string) (Race, error) {
  switch s {
  case "ASIAN": return Race_ASIAN, nil 
  case "AMERICAN_INDIAN_OR_ALASKAN_NATIVE": return Race_AMERICAN_INDIAN_OR_ALASKAN_NATIVE, nil 
  case "BLACK_OR_AFRICAN_AMERICAN": return Race_BLACK_OR_AFRICAN_AMERICAN, nil 
  case "NATIVE_HAWAIIAN_OR_PACIFIC_ISLANDER": return Race_NATIVE_HAWAIIAN_OR_PACIFIC_ISLANDER, nil 
  case "WHITE": return Race_WHITE, nil 
  }
  return Race(0), fmt.Errorf("not a valid Race string")
}


func RacePtr(v Race) *Race { return &v }

func (p Race) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *Race) UnmarshalText(text []byte) error {
q, err := RaceFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *Race) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = Race(v)
return nil
}

func (p * Race) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type Disability int64
const (
  Disability_HEARING_IMAPAIRED Disability = 0
  Disability_VISUAL_IMPAIRED Disability = 1
  Disability_MOBILITY_OR_ORTHOPEDIC_IMPAIRMENT Disability = 2
  Disability_OTHER_IMPAIRMENT Disability = 3
)

func (p Disability) String() string {
  switch p {
  case Disability_HEARING_IMAPAIRED: return "HEARING_IMAPAIRED"
  case Disability_VISUAL_IMPAIRED: return "VISUAL_IMPAIRED"
  case Disability_MOBILITY_OR_ORTHOPEDIC_IMPAIRMENT: return "MOBILITY_OR_ORTHOPEDIC_IMPAIRMENT"
  case Disability_OTHER_IMPAIRMENT: return "OTHER_IMPAIRMENT"
  }
  return "<UNSET>"
}

func DisabilityFromString(s string) (Disability, error) {
  switch s {
  case "HEARING_IMAPAIRED": return Disability_HEARING_IMAPAIRED, nil 
  case "VISUAL_IMPAIRED": return Disability_VISUAL_IMPAIRED, nil 
  case "MOBILITY_OR_ORTHOPEDIC_IMPAIRMENT": return Disability_MOBILITY_OR_ORTHOPEDIC_IMPAIRMENT, nil 
  case "OTHER_IMPAIRMENT": return Disability_OTHER_IMPAIRMENT, nil 
  }
  return Disability(0), fmt.Errorf("not a valid Disability string")
}


func DisabilityPtr(v Disability) *Disability { return &v }

func (p Disability) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *Disability) UnmarshalText(text []byte) error {
q, err := DisabilityFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *Disability) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = Disability(v)
return nil
}

func (p * Disability) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// A structure holding the NSF Demographic information.
// 
// 
// 
// Attributes:
//  - AiravataInternalUserId
//  - Gender
//  - UsCitizenship
//  - Ethnicities
//  - Races
//  - Disabilities
type NSFDemographics struct {
  AiravataInternalUserId string `thrift:"airavataInternalUserId,1,required" db:"airavataInternalUserId" json:"airavataInternalUserId"`
  Gender *string `thrift:"gender,2" db:"gender" json:"gender,omitempty"`
  UsCitizenship *USCitizenship `thrift:"usCitizenship,3" db:"usCitizenship" json:"usCitizenship,omitempty"`
  Ethnicities []Ethnicity `thrift:"ethnicities,4" db:"ethnicities" json:"ethnicities,omitempty"`
  Races []Race `thrift:"races,5" db:"races" json:"races,omitempty"`
  Disabilities []Disability `thrift:"disabilities,6" db:"disabilities" json:"disabilities,omitempty"`
}

func NewNSFDemographics() *NSFDemographics {
  return &NSFDemographics{
AiravataInternalUserId: "DO_NOT_SET_AT_CLIENTS",
}
}


func (p *NSFDemographics) GetAiravataInternalUserId() string {
  return p.AiravataInternalUserId
}
var NSFDemographics_Gender_DEFAULT string
func (p *NSFDemographics) GetGender() string {
  if !p.IsSetGender() {
    return NSFDemographics_Gender_DEFAULT
  }
return *p.Gender
}
var NSFDemographics_UsCitizenship_DEFAULT USCitizenship
func (p *NSFDemographics) GetUsCitizenship() USCitizenship {
  if !p.IsSetUsCitizenship() {
    return NSFDemographics_UsCitizenship_DEFAULT
  }
return *p.UsCitizenship
}
var NSFDemographics_Ethnicities_DEFAULT []Ethnicity

func (p *NSFDemographics) GetEthnicities() []Ethnicity {
  return p.Ethnicities
}
var NSFDemographics_Races_DEFAULT []Race

func (p *NSFDemographics) GetRaces() []Race {
  return p.Races
}
var NSFDemographics_Disabilities_DEFAULT []Disability

func (p *NSFDemographics) GetDisabilities() []Disability {
  return p.Disabilities
}
func (p *NSFDemographics) IsSetGender() bool {
  return p.Gender != nil
}

func (p *NSFDemographics) IsSetUsCitizenship() bool {
  return p.UsCitizenship != nil
}

func (p *NSFDemographics) IsSetEthnicities() bool {
  return p.Ethnicities != nil
}

func (p *NSFDemographics) IsSetRaces() bool {
  return p.Races != nil
}

func (p *NSFDemographics) IsSetDisabilities() bool {
  return p.Disabilities != nil
}

func (p *NSFDemographics) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAiravataInternalUserId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAiravataInternalUserId = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAiravataInternalUserId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AiravataInternalUserId is not set"));
  }
  return nil
}

func (p *NSFDemographics)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AiravataInternalUserId = v
}
  return nil
}

func (p *NSFDemographics)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Gender = &v
}
  return nil
}

func (p *NSFDemographics)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := USCitizenship(v)
  p.UsCitizenship = &temp
}
  return nil
}

func (p *NSFDemographics)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]Ethnicity, 0, size)
  p.Ethnicities =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 Ethnicity
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := Ethnicity(v)
    _elem0 = temp
}
    p.Ethnicities = append(p.Ethnicities, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *NSFDemographics)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]Race, 0, size)
  p.Races =  tSlice
  for i := 0; i < size; i ++ {
var _elem1 Race
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := Race(v)
    _elem1 = temp
}
    p.Races = append(p.Races, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *NSFDemographics)  ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]Disability, 0, size)
  p.Disabilities =  tSlice
  for i := 0; i < size; i ++ {
var _elem2 Disability
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := Disability(v)
    _elem2 = temp
}
    p.Disabilities = append(p.Disabilities, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *NSFDemographics) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("NSFDemographics"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NSFDemographics) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("airavataInternalUserId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:airavataInternalUserId: ", p), err) }
  if err := oprot.WriteString(string(p.AiravataInternalUserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.airavataInternalUserId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:airavataInternalUserId: ", p), err) }
  return err
}

func (p *NSFDemographics) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetGender() {
    if err := oprot.WriteFieldBegin("gender", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gender: ", p), err) }
    if err := oprot.WriteString(string(*p.Gender)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.gender (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gender: ", p), err) }
  }
  return err
}

func (p *NSFDemographics) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetUsCitizenship() {
    if err := oprot.WriteFieldBegin("usCitizenship", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:usCitizenship: ", p), err) }
    if err := oprot.WriteI32(int32(*p.UsCitizenship)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.usCitizenship (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:usCitizenship: ", p), err) }
  }
  return err
}

func (p *NSFDemographics) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetEthnicities() {
    if err := oprot.WriteFieldBegin("ethnicities", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ethnicities: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I32, len(p.Ethnicities)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Ethnicities {
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ethnicities: ", p), err) }
  }
  return err
}

func (p *NSFDemographics) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetRaces() {
    if err := oprot.WriteFieldBegin("races", thrift.LIST, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:races: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I32, len(p.Races)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Races {
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:races: ", p), err) }
  }
  return err
}

func (p *NSFDemographics) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetDisabilities() {
    if err := oprot.WriteFieldBegin("disabilities", thrift.LIST, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:disabilities: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I32, len(p.Disabilities)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Disabilities {
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:disabilities: ", p), err) }
  }
  return err
}

func (p *NSFDemographics) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NSFDemographics(%+v)", *p)
}

// * A structure holding the user profile and its child models.
// *
// * Notes:
// *  The model does not include passwords as it is assumed an external identity provider is used to authenticate user.
// *  References:
// *     NSF Demographic Information - http://www.nsf.gov/pubs/2000/00form1225/00form1225.doc
// *     LDAP Schema - https://tools.ietf.org/html/rfc4519
// *     SCIM 2.0 - https://tools.ietf.org/html/rfc7643
// *
// * userModelVersion:
// *  Version number of profile
// *
// * airavataInternalUserId:
// *  internal to Airavata, not intended to be used outside of the Airavata platform or possibly by gateways
// *  (that is, never shown to users), never reassigned, REQUIRED
// *
// * userId:
// *  Externally assertable unique identifier. SAML (primarly in higher education, academic) tends to keep
// *   user name less opaque. OpenID Connect maintains them to be opaque.
// *
// * firstName, middleName, lastName:
// *  First and Last names as assertede by the user
// *
// * namePrefix, nameSuffix:
// *  prefix and suffix to the users name as asserted by the user
// *
// * emails:
// *   Email identifier are Verified, REQUIRED and MULTIVALUED
// *
// * userName:
// *  Name-based identifiers can be multivalues. To keep it simple, Airavata will make it a string.
// *   In the future these can be enumerated as:
//     *   Official name (as asserted possibly by some external identity provider)
//     *   Prefered name (as asserted or suggested by user directly)
//     *   Components:
//     *      givenName
//     *      surname (familyName)
//     *      displayName (often asserted by user to handle things like middle names, suffix, prefix, and the like)
// *
// * orcidId: ORCID ID - http://orcid.org/about/what-is-orcid)
// *
// * phones: Telephone MULTIVALUED
// *
// * country: Country of Residance
// *
// * nationality Countries of citizenship
// *
// * comments:
// *   Free-form information (treated as opaque by Airavata and simply passed to resource).
// *
// * labeledURI:
//   * Google Scholar, Web of Science, ACS, e.t.c
// *
// * timeZone:
// *  User’s preferred timezone - IANA Timezone Databases - http://www.iana.org/time-zones.
// *
// 
// Attributes:
//  - UserModelVersion
//  - AiravataInternalUserId
//  - UserId
//  - GatewayId
//  - Emails
//  - FirstName
//  - LastName
//  - MiddleName
//  - NamePrefix
//  - NameSuffix
//  - OrcidId
//  - Phones
//  - Country
//  - Nationality
//  - HomeOrganization
//  - OrginationAffiliation
//  - CreationTime
//  - LastAccessTime
//  - ValidUntil
//  - State
//  - Comments
//  - LabeledURI
//  - GpgKey
//  - TimeZone
//  - NsfDemographics
type UserProfile struct {
  UserModelVersion string `thrift:"userModelVersion,1,required" db:"userModelVersion" json:"userModelVersion"`
  AiravataInternalUserId string `thrift:"airavataInternalUserId,2,required" db:"airavataInternalUserId" json:"airavataInternalUserId"`
  UserId string `thrift:"userId,3,required" db:"userId" json:"userId"`
  GatewayId string `thrift:"gatewayId,4,required" db:"gatewayId" json:"gatewayId"`
  Emails []string `thrift:"emails,5,required" db:"emails" json:"emails"`
  FirstName string `thrift:"firstName,6,required" db:"firstName" json:"firstName"`
  LastName string `thrift:"lastName,7,required" db:"lastName" json:"lastName"`
  MiddleName *string `thrift:"middleName,8" db:"middleName" json:"middleName,omitempty"`
  NamePrefix *string `thrift:"namePrefix,9" db:"namePrefix" json:"namePrefix,omitempty"`
  NameSuffix *string `thrift:"nameSuffix,10" db:"nameSuffix" json:"nameSuffix,omitempty"`
  OrcidId *string `thrift:"orcidId,11" db:"orcidId" json:"orcidId,omitempty"`
  Phones []string `thrift:"phones,12" db:"phones" json:"phones,omitempty"`
  Country *string `thrift:"country,13" db:"country" json:"country,omitempty"`
  Nationality []string `thrift:"nationality,14" db:"nationality" json:"nationality,omitempty"`
  HomeOrganization *string `thrift:"homeOrganization,15" db:"homeOrganization" json:"homeOrganization,omitempty"`
  OrginationAffiliation *string `thrift:"orginationAffiliation,16" db:"orginationAffiliation" json:"orginationAffiliation,omitempty"`
  CreationTime int64 `thrift:"creationTime,17,required" db:"creationTime" json:"creationTime"`
  LastAccessTime int64 `thrift:"lastAccessTime,18,required" db:"lastAccessTime" json:"lastAccessTime"`
  ValidUntil int64 `thrift:"validUntil,19,required" db:"validUntil" json:"validUntil"`
  State Status `thrift:"State,20,required" db:"State" json:"State"`
  Comments *string `thrift:"comments,21" db:"comments" json:"comments,omitempty"`
  LabeledURI []string `thrift:"labeledURI,22" db:"labeledURI" json:"labeledURI,omitempty"`
  GpgKey *string `thrift:"gpgKey,23" db:"gpgKey" json:"gpgKey,omitempty"`
  TimeZone *string `thrift:"timeZone,24" db:"timeZone" json:"timeZone,omitempty"`
  NsfDemographics *NSFDemographics `thrift:"nsfDemographics,25" db:"nsfDemographics" json:"nsfDemographics,omitempty"`
}

func NewUserProfile() *UserProfile {
  return &UserProfile{
UserModelVersion: "1.0",

AiravataInternalUserId: "DO_NOT_SET_AT_CLIENTS",
}
}


func (p *UserProfile) GetUserModelVersion() string {
  return p.UserModelVersion
}

func (p *UserProfile) GetAiravataInternalUserId() string {
  return p.AiravataInternalUserId
}

func (p *UserProfile) GetUserId() string {
  return p.UserId
}

func (p *UserProfile) GetGatewayId() string {
  return p.GatewayId
}

func (p *UserProfile) GetEmails() []string {
  return p.Emails
}

func (p *UserProfile) GetFirstName() string {
  return p.FirstName
}

func (p *UserProfile) GetLastName() string {
  return p.LastName
}
var UserProfile_MiddleName_DEFAULT string
func (p *UserProfile) GetMiddleName() string {
  if !p.IsSetMiddleName() {
    return UserProfile_MiddleName_DEFAULT
  }
return *p.MiddleName
}
var UserProfile_NamePrefix_DEFAULT string
func (p *UserProfile) GetNamePrefix() string {
  if !p.IsSetNamePrefix() {
    return UserProfile_NamePrefix_DEFAULT
  }
return *p.NamePrefix
}
var UserProfile_NameSuffix_DEFAULT string
func (p *UserProfile) GetNameSuffix() string {
  if !p.IsSetNameSuffix() {
    return UserProfile_NameSuffix_DEFAULT
  }
return *p.NameSuffix
}
var UserProfile_OrcidId_DEFAULT string
func (p *UserProfile) GetOrcidId() string {
  if !p.IsSetOrcidId() {
    return UserProfile_OrcidId_DEFAULT
  }
return *p.OrcidId
}
var UserProfile_Phones_DEFAULT []string

func (p *UserProfile) GetPhones() []string {
  return p.Phones
}
var UserProfile_Country_DEFAULT string
func (p *UserProfile) GetCountry() string {
  if !p.IsSetCountry() {
    return UserProfile_Country_DEFAULT
  }
return *p.Country
}
var UserProfile_Nationality_DEFAULT []string

func (p *UserProfile) GetNationality() []string {
  return p.Nationality
}
var UserProfile_HomeOrganization_DEFAULT string
func (p *UserProfile) GetHomeOrganization() string {
  if !p.IsSetHomeOrganization() {
    return UserProfile_HomeOrganization_DEFAULT
  }
return *p.HomeOrganization
}
var UserProfile_OrginationAffiliation_DEFAULT string
func (p *UserProfile) GetOrginationAffiliation() string {
  if !p.IsSetOrginationAffiliation() {
    return UserProfile_OrginationAffiliation_DEFAULT
  }
return *p.OrginationAffiliation
}

func (p *UserProfile) GetCreationTime() int64 {
  return p.CreationTime
}

func (p *UserProfile) GetLastAccessTime() int64 {
  return p.LastAccessTime
}

func (p *UserProfile) GetValidUntil() int64 {
  return p.ValidUntil
}

func (p *UserProfile) GetState() Status {
  return p.State
}
var UserProfile_Comments_DEFAULT string
func (p *UserProfile) GetComments() string {
  if !p.IsSetComments() {
    return UserProfile_Comments_DEFAULT
  }
return *p.Comments
}
var UserProfile_LabeledURI_DEFAULT []string

func (p *UserProfile) GetLabeledURI() []string {
  return p.LabeledURI
}
var UserProfile_GpgKey_DEFAULT string
func (p *UserProfile) GetGpgKey() string {
  if !p.IsSetGpgKey() {
    return UserProfile_GpgKey_DEFAULT
  }
return *p.GpgKey
}
var UserProfile_TimeZone_DEFAULT string
func (p *UserProfile) GetTimeZone() string {
  if !p.IsSetTimeZone() {
    return UserProfile_TimeZone_DEFAULT
  }
return *p.TimeZone
}
var UserProfile_NsfDemographics_DEFAULT *NSFDemographics
func (p *UserProfile) GetNsfDemographics() *NSFDemographics {
  if !p.IsSetNsfDemographics() {
    return UserProfile_NsfDemographics_DEFAULT
  }
return p.NsfDemographics
}
func (p *UserProfile) IsSetMiddleName() bool {
  return p.MiddleName != nil
}

func (p *UserProfile) IsSetNamePrefix() bool {
  return p.NamePrefix != nil
}

func (p *UserProfile) IsSetNameSuffix() bool {
  return p.NameSuffix != nil
}

func (p *UserProfile) IsSetOrcidId() bool {
  return p.OrcidId != nil
}

func (p *UserProfile) IsSetPhones() bool {
  return p.Phones != nil
}

func (p *UserProfile) IsSetCountry() bool {
  return p.Country != nil
}

func (p *UserProfile) IsSetNationality() bool {
  return p.Nationality != nil
}

func (p *UserProfile) IsSetHomeOrganization() bool {
  return p.HomeOrganization != nil
}

func (p *UserProfile) IsSetOrginationAffiliation() bool {
  return p.OrginationAffiliation != nil
}

func (p *UserProfile) IsSetComments() bool {
  return p.Comments != nil
}

func (p *UserProfile) IsSetLabeledURI() bool {
  return p.LabeledURI != nil
}

func (p *UserProfile) IsSetGpgKey() bool {
  return p.GpgKey != nil
}

func (p *UserProfile) IsSetTimeZone() bool {
  return p.TimeZone != nil
}

func (p *UserProfile) IsSetNsfDemographics() bool {
  return p.NsfDemographics != nil
}

func (p *UserProfile) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetUserModelVersion bool = false;
  var issetAiravataInternalUserId bool = false;
  var issetUserId bool = false;
  var issetGatewayId bool = false;
  var issetEmails bool = false;
  var issetFirstName bool = false;
  var issetLastName bool = false;
  var issetCreationTime bool = false;
  var issetLastAccessTime bool = false;
  var issetValidUntil bool = false;
  var issetState bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserModelVersion = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAiravataInternalUserId = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserId = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetEmails = true
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetFirstName = true
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetLastName = true
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetCreationTime = true
    case 18:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetLastAccessTime = true
    case 19:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField19(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetValidUntil = true
    case 20:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetState = true
    case 21:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField21(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField22(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField23(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField24(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField25(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetUserModelVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserModelVersion is not set"));
  }
  if !issetAiravataInternalUserId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AiravataInternalUserId is not set"));
  }
  if !issetUserId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserId is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  if !issetEmails{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Emails is not set"));
  }
  if !issetFirstName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field FirstName is not set"));
  }
  if !issetLastName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LastName is not set"));
  }
  if !issetCreationTime{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CreationTime is not set"));
  }
  if !issetLastAccessTime{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LastAccessTime is not set"));
  }
  if !issetValidUntil{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ValidUntil is not set"));
  }
  if !issetState{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field State is not set"));
  }
  return nil
}

func (p *UserProfile)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserModelVersion = v
}
  return nil
}

func (p *UserProfile)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AiravataInternalUserId = v
}
  return nil
}

func (p *UserProfile)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *UserProfile)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *UserProfile)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Emails =  tSlice
  for i := 0; i < size; i ++ {
var _elem3 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem3 = v
}
    p.Emails = append(p.Emails, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UserProfile)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.FirstName = v
}
  return nil
}

func (p *UserProfile)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.LastName = v
}
  return nil
}

func (p *UserProfile)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.MiddleName = &v
}
  return nil
}

func (p *UserProfile)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.NamePrefix = &v
}
  return nil
}

func (p *UserProfile)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.NameSuffix = &v
}
  return nil
}

func (p *UserProfile)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.OrcidId = &v
}
  return nil
}

func (p *UserProfile)  ReadField12(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Phones =  tSlice
  for i := 0; i < size; i ++ {
var _elem4 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem4 = v
}
    p.Phones = append(p.Phones, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UserProfile)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.Country = &v
}
  return nil
}

func (p *UserProfile)  ReadField14(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Nationality =  tSlice
  for i := 0; i < size; i ++ {
var _elem5 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem5 = v
}
    p.Nationality = append(p.Nationality, _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UserProfile)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.HomeOrganization = &v
}
  return nil
}

func (p *UserProfile)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.OrginationAffiliation = &v
}
  return nil
}

func (p *UserProfile)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.CreationTime = v
}
  return nil
}

func (p *UserProfile)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.LastAccessTime = v
}
  return nil
}

func (p *UserProfile)  ReadField19(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.ValidUntil = v
}
  return nil
}

func (p *UserProfile)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  temp := Status(v)
  p.State = temp
}
  return nil
}

func (p *UserProfile)  ReadField21(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.Comments = &v
}
  return nil
}

func (p *UserProfile)  ReadField22(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.LabeledURI =  tSlice
  for i := 0; i < size; i ++ {
var _elem6 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem6 = v
}
    p.LabeledURI = append(p.LabeledURI, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UserProfile)  ReadField23(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.GpgKey = &v
}
  return nil
}

func (p *UserProfile)  ReadField24(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.TimeZone = &v
}
  return nil
}

func (p *UserProfile)  ReadField25(iprot thrift.TProtocol) error {
  p.NsfDemographics = &NSFDemographics{
  AiravataInternalUserId: "DO_NOT_SET_AT_CLIENTS",
}
  if err := p.NsfDemographics.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NsfDemographics), err)
  }
  return nil
}

func (p *UserProfile) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserProfile"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
    if err := p.writeField22(oprot); err != nil { return err }
    if err := p.writeField23(oprot); err != nil { return err }
    if err := p.writeField24(oprot); err != nil { return err }
    if err := p.writeField25(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserProfile) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userModelVersion", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userModelVersion: ", p), err) }
  if err := oprot.WriteString(string(p.UserModelVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userModelVersion (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userModelVersion: ", p), err) }
  return err
}

func (p *UserProfile) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("airavataInternalUserId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:airavataInternalUserId: ", p), err) }
  if err := oprot.WriteString(string(p.AiravataInternalUserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.airavataInternalUserId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:airavataInternalUserId: ", p), err) }
  return err
}

func (p *UserProfile) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userId: ", p), err) }
  if err := oprot.WriteString(string(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userId: ", p), err) }
  return err
}

func (p *UserProfile) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:gatewayId: ", p), err) }
  return err
}

func (p *UserProfile) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("emails", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:emails: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Emails)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Emails {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:emails: ", p), err) }
  return err
}

func (p *UserProfile) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("firstName", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:firstName: ", p), err) }
  if err := oprot.WriteString(string(p.FirstName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.firstName (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:firstName: ", p), err) }
  return err
}

func (p *UserProfile) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lastName", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:lastName: ", p), err) }
  if err := oprot.WriteString(string(p.LastName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastName (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:lastName: ", p), err) }
  return err
}

func (p *UserProfile) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetMiddleName() {
    if err := oprot.WriteFieldBegin("middleName", thrift.STRING, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:middleName: ", p), err) }
    if err := oprot.WriteString(string(*p.MiddleName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.middleName (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:middleName: ", p), err) }
  }
  return err
}

func (p *UserProfile) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetNamePrefix() {
    if err := oprot.WriteFieldBegin("namePrefix", thrift.STRING, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:namePrefix: ", p), err) }
    if err := oprot.WriteString(string(*p.NamePrefix)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.namePrefix (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:namePrefix: ", p), err) }
  }
  return err
}

func (p *UserProfile) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetNameSuffix() {
    if err := oprot.WriteFieldBegin("nameSuffix", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:nameSuffix: ", p), err) }
    if err := oprot.WriteString(string(*p.NameSuffix)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nameSuffix (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:nameSuffix: ", p), err) }
  }
  return err
}

func (p *UserProfile) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetOrcidId() {
    if err := oprot.WriteFieldBegin("orcidId", thrift.STRING, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:orcidId: ", p), err) }
    if err := oprot.WriteString(string(*p.OrcidId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.orcidId (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:orcidId: ", p), err) }
  }
  return err
}

func (p *UserProfile) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetPhones() {
    if err := oprot.WriteFieldBegin("phones", thrift.LIST, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:phones: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Phones)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Phones {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:phones: ", p), err) }
  }
  return err
}

func (p *UserProfile) writeField13(oprot thrift.TProtocol) (err error) {
  if p.IsSetCountry() {
    if err := oprot.WriteFieldBegin("country", thrift.STRING, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:country: ", p), err) }
    if err := oprot.WriteString(string(*p.Country)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.country (13) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:country: ", p), err) }
  }
  return err
}

func (p *UserProfile) writeField14(oprot thrift.TProtocol) (err error) {
  if p.IsSetNationality() {
    if err := oprot.WriteFieldBegin("nationality", thrift.LIST, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:nationality: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Nationality)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Nationality {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:nationality: ", p), err) }
  }
  return err
}

func (p *UserProfile) writeField15(oprot thrift.TProtocol) (err error) {
  if p.IsSetHomeOrganization() {
    if err := oprot.WriteFieldBegin("homeOrganization", thrift.STRING, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:homeOrganization: ", p), err) }
    if err := oprot.WriteString(string(*p.HomeOrganization)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.homeOrganization (15) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:homeOrganization: ", p), err) }
  }
  return err
}

func (p *UserProfile) writeField16(oprot thrift.TProtocol) (err error) {
  if p.IsSetOrginationAffiliation() {
    if err := oprot.WriteFieldBegin("orginationAffiliation", thrift.STRING, 16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:orginationAffiliation: ", p), err) }
    if err := oprot.WriteString(string(*p.OrginationAffiliation)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.orginationAffiliation (16) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 16:orginationAffiliation: ", p), err) }
  }
  return err
}

func (p *UserProfile) writeField17(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("creationTime", thrift.I64, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:creationTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreationTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.creationTime (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:creationTime: ", p), err) }
  return err
}

func (p *UserProfile) writeField18(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lastAccessTime", thrift.I64, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:lastAccessTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.LastAccessTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastAccessTime (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:lastAccessTime: ", p), err) }
  return err
}

func (p *UserProfile) writeField19(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("validUntil", thrift.I64, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:validUntil: ", p), err) }
  if err := oprot.WriteI64(int64(p.ValidUntil)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.validUntil (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:validUntil: ", p), err) }
  return err
}

func (p *UserProfile) writeField20(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("State", thrift.I32, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:State: ", p), err) }
  if err := oprot.WriteI32(int32(p.State)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.State (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:State: ", p), err) }
  return err
}

func (p *UserProfile) writeField21(oprot thrift.TProtocol) (err error) {
  if p.IsSetComments() {
    if err := oprot.WriteFieldBegin("comments", thrift.STRING, 21); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:comments: ", p), err) }
    if err := oprot.WriteString(string(*p.Comments)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.comments (21) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 21:comments: ", p), err) }
  }
  return err
}

func (p *UserProfile) writeField22(oprot thrift.TProtocol) (err error) {
  if p.IsSetLabeledURI() {
    if err := oprot.WriteFieldBegin("labeledURI", thrift.LIST, 22); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:labeledURI: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.LabeledURI)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.LabeledURI {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 22:labeledURI: ", p), err) }
  }
  return err
}

func (p *UserProfile) writeField23(oprot thrift.TProtocol) (err error) {
  if p.IsSetGpgKey() {
    if err := oprot.WriteFieldBegin("gpgKey", thrift.STRING, 23); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:gpgKey: ", p), err) }
    if err := oprot.WriteString(string(*p.GpgKey)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.gpgKey (23) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 23:gpgKey: ", p), err) }
  }
  return err
}

func (p *UserProfile) writeField24(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimeZone() {
    if err := oprot.WriteFieldBegin("timeZone", thrift.STRING, 24); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:timeZone: ", p), err) }
    if err := oprot.WriteString(string(*p.TimeZone)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timeZone (24) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 24:timeZone: ", p), err) }
  }
  return err
}

func (p *UserProfile) writeField25(oprot thrift.TProtocol) (err error) {
  if p.IsSetNsfDemographics() {
    if err := oprot.WriteFieldBegin("nsfDemographics", thrift.STRUCT, 25); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:nsfDemographics: ", p), err) }
    if err := p.NsfDemographics.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NsfDemographics), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 25:nsfDemographics: ", p), err) }
  }
  return err
}

func (p *UserProfile) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserProfile(%+v)", *p)
}

