// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package storage_resource_model

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"airavata_commons"
	"data_movement_models"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = airavata_commons.GoUnusedProtection__
var _ = data_movement_models.GoUnusedProtection__
// Storage Resource Description
// 
// storageResourceId: Airavata Internal Unique Identifier to distinguish Compute Resource.
// 
// hostName:
//   Fully Qualified Host Name.
// 
// storageResourceDescription:
//  A user friendly description of the resource.
// 
// 
// DataMovementProtocol:
//  Option to specify a prefered data movement mechanism of the available options.
// 
// 
// 
// Attributes:
//  - StorageResourceId
//  - HostName
//  - StorageResourceDescription
//  - Enabled
//  - DataMovementInterfaces
type StorageResourceDescription struct {
  StorageResourceId string `thrift:"storageResourceId,1,required" db:"storageResourceId" json:"storageResourceId"`
  HostName string `thrift:"hostName,2,required" db:"hostName" json:"hostName"`
  StorageResourceDescription *string `thrift:"storageResourceDescription,3" db:"storageResourceDescription" json:"storageResourceDescription,omitempty"`
  Enabled *bool `thrift:"enabled,4" db:"enabled" json:"enabled,omitempty"`
  DataMovementInterfaces []*data_movement_models.DataMovementInterface `thrift:"dataMovementInterfaces,5" db:"dataMovementInterfaces" json:"dataMovementInterfaces,omitempty"`
}

func NewStorageResourceDescription() *StorageResourceDescription {
  return &StorageResourceDescription{
StorageResourceId: "DO_NOT_SET_AT_CLIENTS",
}
}


func (p *StorageResourceDescription) GetStorageResourceId() string {
  return p.StorageResourceId
}

func (p *StorageResourceDescription) GetHostName() string {
  return p.HostName
}
var StorageResourceDescription_StorageResourceDescription_DEFAULT string
func (p *StorageResourceDescription) GetStorageResourceDescription() string {
  if !p.IsSetStorageResourceDescription() {
    return StorageResourceDescription_StorageResourceDescription_DEFAULT
  }
return *p.StorageResourceDescription
}
var StorageResourceDescription_Enabled_DEFAULT bool
func (p *StorageResourceDescription) GetEnabled() bool {
  if !p.IsSetEnabled() {
    return StorageResourceDescription_Enabled_DEFAULT
  }
return *p.Enabled
}
var StorageResourceDescription_DataMovementInterfaces_DEFAULT []*data_movement_models.DataMovementInterface

func (p *StorageResourceDescription) GetDataMovementInterfaces() []*data_movement_models.DataMovementInterface {
  return p.DataMovementInterfaces
}
func (p *StorageResourceDescription) IsSetStorageResourceDescription() bool {
  return p.StorageResourceDescription != nil
}

func (p *StorageResourceDescription) IsSetEnabled() bool {
  return p.Enabled != nil
}

func (p *StorageResourceDescription) IsSetDataMovementInterfaces() bool {
  return p.DataMovementInterfaces != nil
}

func (p *StorageResourceDescription) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetStorageResourceId bool = false;
  var issetHostName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStorageResourceId = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetHostName = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetStorageResourceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StorageResourceId is not set"));
  }
  if !issetHostName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field HostName is not set"));
  }
  return nil
}

func (p *StorageResourceDescription)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.StorageResourceId = v
}
  return nil
}

func (p *StorageResourceDescription)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.HostName = v
}
  return nil
}

func (p *StorageResourceDescription)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.StorageResourceDescription = &v
}
  return nil
}

func (p *StorageResourceDescription)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Enabled = &v
}
  return nil
}

func (p *StorageResourceDescription)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*data_movement_models.DataMovementInterface, 0, size)
  p.DataMovementInterfaces =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &data_movement_models.DataMovementInterface{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.DataMovementInterfaces = append(p.DataMovementInterfaces, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *StorageResourceDescription) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("StorageResourceDescription"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageResourceDescription) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("storageResourceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:storageResourceId: ", p), err) }
  if err := oprot.WriteString(string(p.StorageResourceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.storageResourceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:storageResourceId: ", p), err) }
  return err
}

func (p *StorageResourceDescription) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hostName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hostName: ", p), err) }
  if err := oprot.WriteString(string(p.HostName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hostName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hostName: ", p), err) }
  return err
}

func (p *StorageResourceDescription) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetStorageResourceDescription() {
    if err := oprot.WriteFieldBegin("storageResourceDescription", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:storageResourceDescription: ", p), err) }
    if err := oprot.WriteString(string(*p.StorageResourceDescription)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.storageResourceDescription (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:storageResourceDescription: ", p), err) }
  }
  return err
}

func (p *StorageResourceDescription) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetEnabled() {
    if err := oprot.WriteFieldBegin("enabled", thrift.BOOL, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:enabled: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Enabled)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.enabled (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:enabled: ", p), err) }
  }
  return err
}

func (p *StorageResourceDescription) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetDataMovementInterfaces() {
    if err := oprot.WriteFieldBegin("dataMovementInterfaces", thrift.LIST, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:dataMovementInterfaces: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.DataMovementInterfaces)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.DataMovementInterfaces {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:dataMovementInterfaces: ", p), err) }
  }
  return err
}

func (p *StorageResourceDescription) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageResourceDescription(%+v)", *p)
}

