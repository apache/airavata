// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package process_model

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"airavata_commons"
	"application_io_models"
	"status_models"
	"task_model"
	"scheduling_model"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = airavata_commons.GoUnusedProtection__
var _ = application_io_models.GoUnusedProtection__
var _ = status_models.GoUnusedProtection__
var _ = task_model.GoUnusedProtection__
var _ = scheduling_model.GoUnusedProtection__
// ProcessModel: A structure holding the process details. The infromation is derived based on user provided
//          configuration data or system inferred information from scheduling and QoS parameters.
// 
// processDetail:
//   A friendly description of the process, usally used to communicate information to users.
// 
// 
// 
// Attributes:
//  - ProcessId
//  - ExperimentId
//  - CreationTime
//  - LastUpdateTime
//  - ProcessStatuses
//  - ProcessDetail
//  - ApplicationInterfaceId
//  - ApplicationDeploymentId
//  - ComputeResourceId
//  - ProcessInputs
//  - ProcessOutputs
//  - ProcessResourceSchedule
//  - Tasks
//  - TaskDag
//  - ProcessErrors
//  - GatewayExecutionId
//  - EnableEmailNotification
//  - EmailAddresses
//  - StorageResourceId
//  - UserDn
//  - GenerateCert
//  - ExperimentDataDir
//  - UserName
//  - UseUserCRPref
type ProcessModel struct {
  ProcessId string `thrift:"processId,1,required" db:"processId" json:"processId"`
  ExperimentId string `thrift:"experimentId,2,required" db:"experimentId" json:"experimentId"`
  CreationTime *int64 `thrift:"creationTime,3" db:"creationTime" json:"creationTime,omitempty"`
  LastUpdateTime *int64 `thrift:"lastUpdateTime,4" db:"lastUpdateTime" json:"lastUpdateTime,omitempty"`
  ProcessStatuses []*status_models.ProcessStatus `thrift:"processStatuses,5" db:"processStatuses" json:"processStatuses,omitempty"`
  ProcessDetail *string `thrift:"processDetail,6" db:"processDetail" json:"processDetail,omitempty"`
  ApplicationInterfaceId *string `thrift:"applicationInterfaceId,7" db:"applicationInterfaceId" json:"applicationInterfaceId,omitempty"`
  ApplicationDeploymentId *string `thrift:"applicationDeploymentId,8" db:"applicationDeploymentId" json:"applicationDeploymentId,omitempty"`
  ComputeResourceId *string `thrift:"computeResourceId,9" db:"computeResourceId" json:"computeResourceId,omitempty"`
  ProcessInputs []*application_io_models.InputDataObjectType `thrift:"processInputs,10" db:"processInputs" json:"processInputs,omitempty"`
  ProcessOutputs []*application_io_models.OutputDataObjectType `thrift:"processOutputs,11" db:"processOutputs" json:"processOutputs,omitempty"`
  ProcessResourceSchedule *scheduling_model.ComputationalResourceSchedulingModel `thrift:"processResourceSchedule,12" db:"processResourceSchedule" json:"processResourceSchedule,omitempty"`
  Tasks []*task_model.TaskModel `thrift:"tasks,13" db:"tasks" json:"tasks,omitempty"`
  TaskDag *string `thrift:"taskDag,14" db:"taskDag" json:"taskDag,omitempty"`
  ProcessErrors []*airavata_commons.ErrorModel `thrift:"processErrors,15" db:"processErrors" json:"processErrors,omitempty"`
  GatewayExecutionId *string `thrift:"gatewayExecutionId,16" db:"gatewayExecutionId" json:"gatewayExecutionId,omitempty"`
  EnableEmailNotification *bool `thrift:"enableEmailNotification,17" db:"enableEmailNotification" json:"enableEmailNotification,omitempty"`
  EmailAddresses []string `thrift:"emailAddresses,18" db:"emailAddresses" json:"emailAddresses,omitempty"`
  StorageResourceId *string `thrift:"storageResourceId,19" db:"storageResourceId" json:"storageResourceId,omitempty"`
  UserDn *string `thrift:"userDn,20" db:"userDn" json:"userDn,omitempty"`
  GenerateCert bool `thrift:"generateCert,21" db:"generateCert" json:"generateCert,omitempty"`
  ExperimentDataDir *string `thrift:"experimentDataDir,22" db:"experimentDataDir" json:"experimentDataDir,omitempty"`
  UserName *string `thrift:"userName,23" db:"userName" json:"userName,omitempty"`
  UseUserCRPref *bool `thrift:"useUserCRPref,24" db:"useUserCRPref" json:"useUserCRPref,omitempty"`
}

func NewProcessModel() *ProcessModel {
  return &ProcessModel{
ProcessId: "DO_NOT_SET_AT_CLIENTS",
}
}


func (p *ProcessModel) GetProcessId() string {
  return p.ProcessId
}

func (p *ProcessModel) GetExperimentId() string {
  return p.ExperimentId
}
var ProcessModel_CreationTime_DEFAULT int64
func (p *ProcessModel) GetCreationTime() int64 {
  if !p.IsSetCreationTime() {
    return ProcessModel_CreationTime_DEFAULT
  }
return *p.CreationTime
}
var ProcessModel_LastUpdateTime_DEFAULT int64
func (p *ProcessModel) GetLastUpdateTime() int64 {
  if !p.IsSetLastUpdateTime() {
    return ProcessModel_LastUpdateTime_DEFAULT
  }
return *p.LastUpdateTime
}
var ProcessModel_ProcessStatuses_DEFAULT []*status_models.ProcessStatus

func (p *ProcessModel) GetProcessStatuses() []*status_models.ProcessStatus {
  return p.ProcessStatuses
}
var ProcessModel_ProcessDetail_DEFAULT string
func (p *ProcessModel) GetProcessDetail() string {
  if !p.IsSetProcessDetail() {
    return ProcessModel_ProcessDetail_DEFAULT
  }
return *p.ProcessDetail
}
var ProcessModel_ApplicationInterfaceId_DEFAULT string
func (p *ProcessModel) GetApplicationInterfaceId() string {
  if !p.IsSetApplicationInterfaceId() {
    return ProcessModel_ApplicationInterfaceId_DEFAULT
  }
return *p.ApplicationInterfaceId
}
var ProcessModel_ApplicationDeploymentId_DEFAULT string
func (p *ProcessModel) GetApplicationDeploymentId() string {
  if !p.IsSetApplicationDeploymentId() {
    return ProcessModel_ApplicationDeploymentId_DEFAULT
  }
return *p.ApplicationDeploymentId
}
var ProcessModel_ComputeResourceId_DEFAULT string
func (p *ProcessModel) GetComputeResourceId() string {
  if !p.IsSetComputeResourceId() {
    return ProcessModel_ComputeResourceId_DEFAULT
  }
return *p.ComputeResourceId
}
var ProcessModel_ProcessInputs_DEFAULT []*application_io_models.InputDataObjectType

func (p *ProcessModel) GetProcessInputs() []*application_io_models.InputDataObjectType {
  return p.ProcessInputs
}
var ProcessModel_ProcessOutputs_DEFAULT []*application_io_models.OutputDataObjectType

func (p *ProcessModel) GetProcessOutputs() []*application_io_models.OutputDataObjectType {
  return p.ProcessOutputs
}
var ProcessModel_ProcessResourceSchedule_DEFAULT *scheduling_model.ComputationalResourceSchedulingModel
func (p *ProcessModel) GetProcessResourceSchedule() *scheduling_model.ComputationalResourceSchedulingModel {
  if !p.IsSetProcessResourceSchedule() {
    return ProcessModel_ProcessResourceSchedule_DEFAULT
  }
return p.ProcessResourceSchedule
}
var ProcessModel_Tasks_DEFAULT []*task_model.TaskModel

func (p *ProcessModel) GetTasks() []*task_model.TaskModel {
  return p.Tasks
}
var ProcessModel_TaskDag_DEFAULT string
func (p *ProcessModel) GetTaskDag() string {
  if !p.IsSetTaskDag() {
    return ProcessModel_TaskDag_DEFAULT
  }
return *p.TaskDag
}
var ProcessModel_ProcessErrors_DEFAULT []*airavata_commons.ErrorModel

func (p *ProcessModel) GetProcessErrors() []*airavata_commons.ErrorModel {
  return p.ProcessErrors
}
var ProcessModel_GatewayExecutionId_DEFAULT string
func (p *ProcessModel) GetGatewayExecutionId() string {
  if !p.IsSetGatewayExecutionId() {
    return ProcessModel_GatewayExecutionId_DEFAULT
  }
return *p.GatewayExecutionId
}
var ProcessModel_EnableEmailNotification_DEFAULT bool
func (p *ProcessModel) GetEnableEmailNotification() bool {
  if !p.IsSetEnableEmailNotification() {
    return ProcessModel_EnableEmailNotification_DEFAULT
  }
return *p.EnableEmailNotification
}
var ProcessModel_EmailAddresses_DEFAULT []string

func (p *ProcessModel) GetEmailAddresses() []string {
  return p.EmailAddresses
}
var ProcessModel_StorageResourceId_DEFAULT string
func (p *ProcessModel) GetStorageResourceId() string {
  if !p.IsSetStorageResourceId() {
    return ProcessModel_StorageResourceId_DEFAULT
  }
return *p.StorageResourceId
}
var ProcessModel_UserDn_DEFAULT string
func (p *ProcessModel) GetUserDn() string {
  if !p.IsSetUserDn() {
    return ProcessModel_UserDn_DEFAULT
  }
return *p.UserDn
}
var ProcessModel_GenerateCert_DEFAULT bool = false

func (p *ProcessModel) GetGenerateCert() bool {
  return p.GenerateCert
}
var ProcessModel_ExperimentDataDir_DEFAULT string
func (p *ProcessModel) GetExperimentDataDir() string {
  if !p.IsSetExperimentDataDir() {
    return ProcessModel_ExperimentDataDir_DEFAULT
  }
return *p.ExperimentDataDir
}
var ProcessModel_UserName_DEFAULT string
func (p *ProcessModel) GetUserName() string {
  if !p.IsSetUserName() {
    return ProcessModel_UserName_DEFAULT
  }
return *p.UserName
}
var ProcessModel_UseUserCRPref_DEFAULT bool
func (p *ProcessModel) GetUseUserCRPref() bool {
  if !p.IsSetUseUserCRPref() {
    return ProcessModel_UseUserCRPref_DEFAULT
  }
return *p.UseUserCRPref
}
func (p *ProcessModel) IsSetCreationTime() bool {
  return p.CreationTime != nil
}

func (p *ProcessModel) IsSetLastUpdateTime() bool {
  return p.LastUpdateTime != nil
}

func (p *ProcessModel) IsSetProcessStatuses() bool {
  return p.ProcessStatuses != nil
}

func (p *ProcessModel) IsSetProcessDetail() bool {
  return p.ProcessDetail != nil
}

func (p *ProcessModel) IsSetApplicationInterfaceId() bool {
  return p.ApplicationInterfaceId != nil
}

func (p *ProcessModel) IsSetApplicationDeploymentId() bool {
  return p.ApplicationDeploymentId != nil
}

func (p *ProcessModel) IsSetComputeResourceId() bool {
  return p.ComputeResourceId != nil
}

func (p *ProcessModel) IsSetProcessInputs() bool {
  return p.ProcessInputs != nil
}

func (p *ProcessModel) IsSetProcessOutputs() bool {
  return p.ProcessOutputs != nil
}

func (p *ProcessModel) IsSetProcessResourceSchedule() bool {
  return p.ProcessResourceSchedule != nil
}

func (p *ProcessModel) IsSetTasks() bool {
  return p.Tasks != nil
}

func (p *ProcessModel) IsSetTaskDag() bool {
  return p.TaskDag != nil
}

func (p *ProcessModel) IsSetProcessErrors() bool {
  return p.ProcessErrors != nil
}

func (p *ProcessModel) IsSetGatewayExecutionId() bool {
  return p.GatewayExecutionId != nil
}

func (p *ProcessModel) IsSetEnableEmailNotification() bool {
  return p.EnableEmailNotification != nil
}

func (p *ProcessModel) IsSetEmailAddresses() bool {
  return p.EmailAddresses != nil
}

func (p *ProcessModel) IsSetStorageResourceId() bool {
  return p.StorageResourceId != nil
}

func (p *ProcessModel) IsSetUserDn() bool {
  return p.UserDn != nil
}

func (p *ProcessModel) IsSetGenerateCert() bool {
  return p.GenerateCert != ProcessModel_GenerateCert_DEFAULT
}

func (p *ProcessModel) IsSetExperimentDataDir() bool {
  return p.ExperimentDataDir != nil
}

func (p *ProcessModel) IsSetUserName() bool {
  return p.UserName != nil
}

func (p *ProcessModel) IsSetUseUserCRPref() bool {
  return p.UseUserCRPref != nil
}

func (p *ProcessModel) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetProcessId bool = false;
  var issetExperimentId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProcessId = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetExperimentId = true
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField19(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField21(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField22(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField23(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField24(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetProcessId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProcessId is not set"));
  }
  if !issetExperimentId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ExperimentId is not set"));
  }
  return nil
}

func (p *ProcessModel)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ProcessId = v
}
  return nil
}

func (p *ProcessModel)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ExperimentId = v
}
  return nil
}

func (p *ProcessModel)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CreationTime = &v
}
  return nil
}

func (p *ProcessModel)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.LastUpdateTime = &v
}
  return nil
}

func (p *ProcessModel)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*status_models.ProcessStatus, 0, size)
  p.ProcessStatuses =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &status_models.ProcessStatus{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.ProcessStatuses = append(p.ProcessStatuses, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ProcessModel)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ProcessDetail = &v
}
  return nil
}

func (p *ProcessModel)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.ApplicationInterfaceId = &v
}
  return nil
}

func (p *ProcessModel)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.ApplicationDeploymentId = &v
}
  return nil
}

func (p *ProcessModel)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.ComputeResourceId = &v
}
  return nil
}

func (p *ProcessModel)  ReadField10(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*application_io_models.InputDataObjectType, 0, size)
  p.ProcessInputs =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &application_io_models.InputDataObjectType{}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.ProcessInputs = append(p.ProcessInputs, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ProcessModel)  ReadField11(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*application_io_models.OutputDataObjectType, 0, size)
  p.ProcessOutputs =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &application_io_models.OutputDataObjectType{}
    if err := _elem2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.ProcessOutputs = append(p.ProcessOutputs, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ProcessModel)  ReadField12(iprot thrift.TProtocol) error {
  p.ProcessResourceSchedule = &scheduling_model.ComputationalResourceSchedulingModel{}
  if err := p.ProcessResourceSchedule.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ProcessResourceSchedule), err)
  }
  return nil
}

func (p *ProcessModel)  ReadField13(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*task_model.TaskModel, 0, size)
  p.Tasks =  tSlice
  for i := 0; i < size; i ++ {
    _elem3 := &task_model.TaskModel{
    TaskId: "DO_NOT_SET_AT_CLIENTS",
}
    if err := _elem3.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
    }
    p.Tasks = append(p.Tasks, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ProcessModel)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.TaskDag = &v
}
  return nil
}

func (p *ProcessModel)  ReadField15(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*airavata_commons.ErrorModel, 0, size)
  p.ProcessErrors =  tSlice
  for i := 0; i < size; i ++ {
    _elem4 := &airavata_commons.ErrorModel{
    ErrorId: "DO_NOT_SET_AT_CLIENTS",
}
    if err := _elem4.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
    }
    p.ProcessErrors = append(p.ProcessErrors, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ProcessModel)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.GatewayExecutionId = &v
}
  return nil
}

func (p *ProcessModel)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.EnableEmailNotification = &v
}
  return nil
}

func (p *ProcessModel)  ReadField18(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.EmailAddresses =  tSlice
  for i := 0; i < size; i ++ {
var _elem5 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem5 = v
}
    p.EmailAddresses = append(p.EmailAddresses, _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ProcessModel)  ReadField19(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.StorageResourceId = &v
}
  return nil
}

func (p *ProcessModel)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.UserDn = &v
}
  return nil
}

func (p *ProcessModel)  ReadField21(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.GenerateCert = v
}
  return nil
}

func (p *ProcessModel)  ReadField22(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.ExperimentDataDir = &v
}
  return nil
}

func (p *ProcessModel)  ReadField23(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.UserName = &v
}
  return nil
}

func (p *ProcessModel)  ReadField24(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.UseUserCRPref = &v
}
  return nil
}

func (p *ProcessModel) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ProcessModel"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
    if err := p.writeField22(oprot); err != nil { return err }
    if err := p.writeField23(oprot); err != nil { return err }
    if err := p.writeField24(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ProcessModel) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("processId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:processId: ", p), err) }
  if err := oprot.WriteString(string(p.ProcessId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.processId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:processId: ", p), err) }
  return err
}

func (p *ProcessModel) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("experimentId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:experimentId: ", p), err) }
  if err := oprot.WriteString(string(p.ExperimentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.experimentId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:experimentId: ", p), err) }
  return err
}

func (p *ProcessModel) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetCreationTime() {
    if err := oprot.WriteFieldBegin("creationTime", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:creationTime: ", p), err) }
    if err := oprot.WriteI64(int64(*p.CreationTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.creationTime (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:creationTime: ", p), err) }
  }
  return err
}

func (p *ProcessModel) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetLastUpdateTime() {
    if err := oprot.WriteFieldBegin("lastUpdateTime", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:lastUpdateTime: ", p), err) }
    if err := oprot.WriteI64(int64(*p.LastUpdateTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.lastUpdateTime (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:lastUpdateTime: ", p), err) }
  }
  return err
}

func (p *ProcessModel) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetProcessStatuses() {
    if err := oprot.WriteFieldBegin("processStatuses", thrift.LIST, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:processStatuses: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ProcessStatuses)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ProcessStatuses {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:processStatuses: ", p), err) }
  }
  return err
}

func (p *ProcessModel) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetProcessDetail() {
    if err := oprot.WriteFieldBegin("processDetail", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:processDetail: ", p), err) }
    if err := oprot.WriteString(string(*p.ProcessDetail)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.processDetail (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:processDetail: ", p), err) }
  }
  return err
}

func (p *ProcessModel) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetApplicationInterfaceId() {
    if err := oprot.WriteFieldBegin("applicationInterfaceId", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:applicationInterfaceId: ", p), err) }
    if err := oprot.WriteString(string(*p.ApplicationInterfaceId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.applicationInterfaceId (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:applicationInterfaceId: ", p), err) }
  }
  return err
}

func (p *ProcessModel) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetApplicationDeploymentId() {
    if err := oprot.WriteFieldBegin("applicationDeploymentId", thrift.STRING, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:applicationDeploymentId: ", p), err) }
    if err := oprot.WriteString(string(*p.ApplicationDeploymentId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.applicationDeploymentId (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:applicationDeploymentId: ", p), err) }
  }
  return err
}

func (p *ProcessModel) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetComputeResourceId() {
    if err := oprot.WriteFieldBegin("computeResourceId", thrift.STRING, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:computeResourceId: ", p), err) }
    if err := oprot.WriteString(string(*p.ComputeResourceId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.computeResourceId (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:computeResourceId: ", p), err) }
  }
  return err
}

func (p *ProcessModel) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetProcessInputs() {
    if err := oprot.WriteFieldBegin("processInputs", thrift.LIST, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:processInputs: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ProcessInputs)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ProcessInputs {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:processInputs: ", p), err) }
  }
  return err
}

func (p *ProcessModel) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetProcessOutputs() {
    if err := oprot.WriteFieldBegin("processOutputs", thrift.LIST, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:processOutputs: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ProcessOutputs)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ProcessOutputs {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:processOutputs: ", p), err) }
  }
  return err
}

func (p *ProcessModel) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetProcessResourceSchedule() {
    if err := oprot.WriteFieldBegin("processResourceSchedule", thrift.STRUCT, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:processResourceSchedule: ", p), err) }
    if err := p.ProcessResourceSchedule.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ProcessResourceSchedule), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:processResourceSchedule: ", p), err) }
  }
  return err
}

func (p *ProcessModel) writeField13(oprot thrift.TProtocol) (err error) {
  if p.IsSetTasks() {
    if err := oprot.WriteFieldBegin("tasks", thrift.LIST, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:tasks: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tasks)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Tasks {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:tasks: ", p), err) }
  }
  return err
}

func (p *ProcessModel) writeField14(oprot thrift.TProtocol) (err error) {
  if p.IsSetTaskDag() {
    if err := oprot.WriteFieldBegin("taskDag", thrift.STRING, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:taskDag: ", p), err) }
    if err := oprot.WriteString(string(*p.TaskDag)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.taskDag (14) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:taskDag: ", p), err) }
  }
  return err
}

func (p *ProcessModel) writeField15(oprot thrift.TProtocol) (err error) {
  if p.IsSetProcessErrors() {
    if err := oprot.WriteFieldBegin("processErrors", thrift.LIST, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:processErrors: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ProcessErrors)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ProcessErrors {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:processErrors: ", p), err) }
  }
  return err
}

func (p *ProcessModel) writeField16(oprot thrift.TProtocol) (err error) {
  if p.IsSetGatewayExecutionId() {
    if err := oprot.WriteFieldBegin("gatewayExecutionId", thrift.STRING, 16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:gatewayExecutionId: ", p), err) }
    if err := oprot.WriteString(string(*p.GatewayExecutionId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.gatewayExecutionId (16) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 16:gatewayExecutionId: ", p), err) }
  }
  return err
}

func (p *ProcessModel) writeField17(oprot thrift.TProtocol) (err error) {
  if p.IsSetEnableEmailNotification() {
    if err := oprot.WriteFieldBegin("enableEmailNotification", thrift.BOOL, 17); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:enableEmailNotification: ", p), err) }
    if err := oprot.WriteBool(bool(*p.EnableEmailNotification)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.enableEmailNotification (17) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 17:enableEmailNotification: ", p), err) }
  }
  return err
}

func (p *ProcessModel) writeField18(oprot thrift.TProtocol) (err error) {
  if p.IsSetEmailAddresses() {
    if err := oprot.WriteFieldBegin("emailAddresses", thrift.LIST, 18); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:emailAddresses: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.EmailAddresses)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.EmailAddresses {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 18:emailAddresses: ", p), err) }
  }
  return err
}

func (p *ProcessModel) writeField19(oprot thrift.TProtocol) (err error) {
  if p.IsSetStorageResourceId() {
    if err := oprot.WriteFieldBegin("storageResourceId", thrift.STRING, 19); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:storageResourceId: ", p), err) }
    if err := oprot.WriteString(string(*p.StorageResourceId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.storageResourceId (19) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 19:storageResourceId: ", p), err) }
  }
  return err
}

func (p *ProcessModel) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetUserDn() {
    if err := oprot.WriteFieldBegin("userDn", thrift.STRING, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:userDn: ", p), err) }
    if err := oprot.WriteString(string(*p.UserDn)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.userDn (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:userDn: ", p), err) }
  }
  return err
}

func (p *ProcessModel) writeField21(oprot thrift.TProtocol) (err error) {
  if p.IsSetGenerateCert() {
    if err := oprot.WriteFieldBegin("generateCert", thrift.BOOL, 21); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:generateCert: ", p), err) }
    if err := oprot.WriteBool(bool(p.GenerateCert)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.generateCert (21) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 21:generateCert: ", p), err) }
  }
  return err
}

func (p *ProcessModel) writeField22(oprot thrift.TProtocol) (err error) {
  if p.IsSetExperimentDataDir() {
    if err := oprot.WriteFieldBegin("experimentDataDir", thrift.STRING, 22); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:experimentDataDir: ", p), err) }
    if err := oprot.WriteString(string(*p.ExperimentDataDir)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.experimentDataDir (22) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 22:experimentDataDir: ", p), err) }
  }
  return err
}

func (p *ProcessModel) writeField23(oprot thrift.TProtocol) (err error) {
  if p.IsSetUserName() {
    if err := oprot.WriteFieldBegin("userName", thrift.STRING, 23); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:userName: ", p), err) }
    if err := oprot.WriteString(string(*p.UserName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.userName (23) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 23:userName: ", p), err) }
  }
  return err
}

func (p *ProcessModel) writeField24(oprot thrift.TProtocol) (err error) {
  if p.IsSetUseUserCRPref() {
    if err := oprot.WriteFieldBegin("useUserCRPref", thrift.BOOL, 24); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:useUserCRPref: ", p), err) }
    if err := oprot.WriteBool(bool(*p.UseUserCRPref)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.useUserCRPref (24) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 24:useUserCRPref: ", p), err) }
  }
  return err
}

func (p *ProcessModel) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProcessModel(%+v)", *p)
}

