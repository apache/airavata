// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package airavata_api

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"airavata_errors"
	"security_model"
	"airavata_data_models"
	"credential_store_data_models"
	"status_models"
	"job_model"
	"experiment_model"
	"workspace_model"
	"scheduling_model"
	"application_io_models"
	"application_deployment_model"
	"application_interface_model"
	"compute_resource_model"
	"storage_resource_model"
	"gateway_resource_profile_model"
	"user_resource_profile_model"
	"data_movement_models"
	"workflow_data_model"
	"replica_catalog_models"
	"group_manager_model"
	"user_profile_model"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = airavata_errors.GoUnusedProtection__
var _ = security_model.GoUnusedProtection__
var _ = airavata_data_models.GoUnusedProtection__
var _ = credential_store_data_models.GoUnusedProtection__
var _ = status_models.GoUnusedProtection__
var _ = job_model.GoUnusedProtection__
var _ = experiment_model.GoUnusedProtection__
var _ = workspace_model.GoUnusedProtection__
var _ = scheduling_model.GoUnusedProtection__
var _ = application_io_models.GoUnusedProtection__
var _ = application_deployment_model.GoUnusedProtection__
var _ = application_interface_model.GoUnusedProtection__
var _ = compute_resource_model.GoUnusedProtection__
var _ = storage_resource_model.GoUnusedProtection__
var _ = gateway_resource_profile_model.GoUnusedProtection__
var _ = user_resource_profile_model.GoUnusedProtection__
var _ = data_movement_models.GoUnusedProtection__
var _ = workflow_data_model.GoUnusedProtection__
var _ = replica_catalog_models.GoUnusedProtection__
var _ = group_manager_model.GoUnusedProtection__
var _ = user_profile_model.GoUnusedProtection__
type Airavata interface {
  // Fetch Apache Airavata API version
  // 
  // 
  // Parameters:
  //  - AuthzToken
  GetAPIVersion(ctx context.Context, authzToken *security_model.AuthzToken) (r string, err error)
  // Verify if User Exists within Airavata.
  // 
  // @param gatewayId
  // 
  //  @param userName
  // 
  // @return true/false
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - GatewayId
  //  - UserName
  IsUserExists(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string, userName string) (r bool, err error)
  // Register a Gateway with Airavata.
  // 
  // @param gateway
  //    The gateway data model.
  // 
  // @return gatewayId
  //   Th unique identifier of the  newly registered gateway.
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - Gateway
  AddGateway(ctx context.Context, authzToken *security_model.AuthzToken, gateway *workspace_model.Gateway) (r string, err error)
  // Get all users in the gateway
  // 
  // @param gatewayId
  //    The gateway data model.
  // 
  // @return users
  //   list of usernames of the users in the gateway
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - GatewayId
  GetAllUsersInGateway(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string) (r []string, err error)
  // Update previously registered Gateway metadata.
  // 
  // @param gatewayId
  //    The gateway Id of the Gateway which require an update.
  // 
  // @return gateway
  //    Modified gateway obejct.
  // 
  // @exception AiravataClientException
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - GatewayId
  //  - UpdatedGateway
  UpdateGateway(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string, updatedGateway *workspace_model.Gateway) (r bool, err error)
  // Get Gateway details by providing gatewayId
  // 
  // @param gatewayId
  //    The gateway Id of the Gateway.
  // 
  // @return gateway
  //    Gateway obejct.
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - GatewayId
  GetGateway(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string) (r *workspace_model.Gateway, err error)
  // Delete a Gateway
  // 
  // @param gatewayId
  //    The gateway Id of the Gateway to be deleted.
  // 
  // @return boolean
  //    Boolean identifier for the success or failure of the deletion operation.
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - GatewayId
  DeleteGateway(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string) (r bool, err error)
  // Get All the Gateways Connected to Airavata.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  GetAllGateways(ctx context.Context, authzToken *security_model.AuthzToken) (r []*workspace_model.Gateway, err error)
  // Check for the Existance of a Gateway within Airavata
  // 
  // @param gatewayId
  //   Provide the gatewayId of the gateway you want to check the existancy
  // 
  // @return boolean
  //   Boolean idetifier for the existance or non-existane of the gatewayId
  // 
  // @return gatewayId
  //   return the gatewayId of the existing gateway.
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - GatewayId
  IsGatewayExist(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string) (r bool, err error)
  //   * API methods to retrieve notifications
  // *
  // 
  // Parameters:
  //  - AuthzToken
  //  - Notification
  CreateNotification(ctx context.Context, authzToken *security_model.AuthzToken, notification *workspace_model.Notification) (r string, err error)
  // Parameters:
  //  - AuthzToken
  //  - Notification
  UpdateNotification(ctx context.Context, authzToken *security_model.AuthzToken, notification *workspace_model.Notification) (r bool, err error)
  // Parameters:
  //  - AuthzToken
  //  - GatewayId
  //  - NotificationId
  DeleteNotification(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string, notificationId string) (r bool, err error)
  // Parameters:
  //  - AuthzToken
  //  - GatewayId
  //  - NotificationId
  GetNotification(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string, notificationId string) (r *workspace_model.Notification, err error)
  // Parameters:
  //  - AuthzToken
  //  - GatewayId
  GetAllNotifications(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string) (r []*workspace_model.Notification, err error)
  // Generate and Register SSH Key Pair with Airavata Credential Store.
  // 
  // @param gatewayId
  //    The identifier for the requested Gateway.
  // 
  // @param userName
  //    The User for which the credential should be registered. For community accounts, this user is the name of the
  //    community user name. For computational resources, this user name need not be the same user name on resoruces.
  // 
  // @param description
  //    The description field for a credential type, all type of credential can have a description.
  // 
  // @param credentialOwnerType
  //    The type of owner of this credential. Two possible values: GATEWAY (default) and USER
  // 
  // @return airavataCredStoreToken
  //   An SSH Key pair is generated and stored in the credential store and associated with users or community account
  //   belonging to a Gateway.
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - GatewayId
  //  - UserName
  //  - Description
  //  - CredentialOwnerType
  GenerateAndRegisterSSHKeys(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string, userName string, description string, credentialOwnerType credential_store_data_models.CredentialOwnerType) (r string, err error)
  // Generate and Register Username PWD Pair with Airavata Credential Store.
  // 
  // @param gatewayId
  //    The identifier for the requested Gateway.
  // 
  // @param portalUserName
  //    The User for which the credential should be registered. For community accounts, this user is the name of the
  //    community user name. For computational resources, this user name need not be the same user name on resoruces.
  // 
  // @param loginUserName
  // 
  // @param password
  // 
  // @return airavataCredStoreToken
  //   An SSH Key pair is generated and stored in the credential store and associated with users or community account
  //   belonging to a Gateway.
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - GatewayId
  //  - PortalUserName
  //  - LoginUserName
  //  - Password
  //  - Description
  RegisterPwdCredential(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string, portalUserName string, loginUserName string, password string, description string) (r string, err error)
  // Get a Public Key by Providing the Token
  // 
  // @param CredStoreToken
  //    Credential Store Token which you want to find the Public Key for.
  // 
  // @param gatewayId
  //    This is the unique identifier of your gateway where the token and public key was generated from.
  // 
  // @return publicKey
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - AiravataCredStoreToken
  //  - GatewayId
  GetSSHPubKey(ctx context.Context, authzToken *security_model.AuthzToken, airavataCredStoreToken string, gatewayId string) (r string, err error)
  // 
  // Get all Public Keys of the Gateway
  // 
  // @param CredStoreToken
  //    Credential Store Token which you want to find the Public Key for.
  // 
  // @param gatewayId
  //    This is the unique identifier of your gateway where the token and public key was generated from.
  // 
  // @return publicKey
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - GatewayId
  GetAllGatewaySSHPubKeys(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string) (r map[string]string, err error)
  // 
  // Get all Credential summaries for the Gateway
  // 
  // @param CredStoreToken
  //    Credential Store Token which you want to find the Public Key for.
  // 
  // @param credential_store_data_models.SummaryType
  //    Summary type : SSH,PASSWD or CERT
  // 
  // @param gatewayId
  //    This is the unique identifier of your gateway where the token and public key was generated from.
  // 
  // @return List of Credential Summary Objects
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - Type
  //  - GatewayId
  GetAllCredentialSummaryForGateway(ctx context.Context, authzToken *security_model.AuthzToken, type_a1 credential_store_data_models.SummaryType, gatewayId string) (r []*credential_store_data_models.CredentialSummary, err error)
  // 
  // Get all Credential summaries for user in a Gateway
  // 
  // @param CredStoreToken
  //    Credential Store Token which you want to find the Public Key for.
  // 
  // @param credential_store_data_models.SummaryType
  //    Summary type : SSH,PASSWD or CERT
  // 
  // @param gatewayId
  //    This is the unique identifier of your gateway where the token and public key was generated from.
  // 
  // @param userId
  //    This is the unique identifier of user whose public keys are to be fetched.
  // 
  // @return CredentialSummary
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - Type
  //  - GatewayId
  //  - UserId
  GetAllCredentialSummaryForUsersInGateway(ctx context.Context, authzToken *security_model.AuthzToken, type_a1 credential_store_data_models.SummaryType, gatewayId string, userId string) (r []*credential_store_data_models.CredentialSummary, err error)
  // Parameters:
  //  - AuthzToken
  //  - GatewayId
  GetAllGatewayPWDCredentials(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string) (r map[string]string, err error)
  // 
  // Delete a Gateway
  // 
  // @param gatewayId
  //    The gateway Id of the Gateway to be deleted.
  // 
  // @return boolean
  //    Boolean identifier for the success or failure of the deletion operation.
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - AiravataCredStoreToken
  //  - GatewayId
  DeleteSSHPubKey(ctx context.Context, authzToken *security_model.AuthzToken, airavataCredStoreToken string, gatewayId string) (r bool, err error)
  // Parameters:
  //  - AuthzToken
  //  - AiravataCredStoreToken
  //  - GatewayId
  DeletePWDCredential(ctx context.Context, authzToken *security_model.AuthzToken, airavataCredStoreToken string, gatewayId string) (r bool, err error)
  // 
  // Creates a Project with basic metadata.
  //    A Project is a container of experiments.
  // 
  // @param gatewayId
  //    The identifier for the requested gateway.
  // 
  // @param Project
  //    The Project Object described in the workspace_model.
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - GatewayId
  //  - Project
  CreateProject(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string, project *workspace_model.Project) (r string, err error)
  // 
  // Update an Existing Project
  // 
  // @param projectId
  //    The projectId of the project needed an update.
  // 
  // @return void
  //    Currently this does not return any value.
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - ProjectId
  //  - UpdatedProject
  UpdateProject(ctx context.Context, authzToken *security_model.AuthzToken, projectId string, updatedProject *workspace_model.Project) (err error)
  // 
  // Get a Project by ID
  //    This method is to obtain a project by providing a projectId.
  // 
  // @param projectId
  //    projectId of the project you require.
  // 
  // @return project
  //    project data model will be returned.
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - ProjectId
  GetProject(ctx context.Context, authzToken *security_model.AuthzToken, projectId string) (r *workspace_model.Project, err error)
  // 
  // Delete a Project
  //    This method is used to delete an existing Project.
  // 
  // @param projectId
  //    projectId of the project you want to delete.
  // 
  // @return boolean
  //    Boolean identifier for the success or failure of the deletion operation.
  // 
  //    NOTE: This method is not used within gateways connected with Airavata.
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - ProjectId
  DeleteProject(ctx context.Context, authzToken *security_model.AuthzToken, projectId string) (r bool, err error)
  // 
  // Get All User Projects
  // Get all Project for the user with pagination. Results will be ordered based on creation time DESC.
  // 
  // @param gatewayId
  //    The identifier for the requested gateway.
  // 
  // @param userName
  //    The identifier of the user.
  // 
  // @param limit
  //    The amount results to be fetched.
  // 
  // @param offset
  //    The starting point of the results to be fetched.
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - GatewayId
  //  - UserName
  //  - Limit
  //  - Offset
  GetUserProjects(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string, userName string, limit int32, offset int32) (r []*workspace_model.Project, err error)
  // 
  // Search User Projects
  // Search and get all Projects for user by project description or/and project name  with pagination.
  // Results will be ordered based on creation time DESC.
  // 
  // @param gatewayId
  //    The unique identifier of the gateway making the request.
  // 
  // @param userName
  //    The identifier of the user.
  // 
  // @param filters
  //    Map of multiple filter criteria. Currenlt search filters includes Project Name and Project Description
  // 
  // @param limit
  //    The amount results to be fetched.
  // 
  // @param offset
  //    The starting point of the results to be fetched.
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - GatewayId
  //  - UserName
  //  - Filters
  //  - Limit
  //  - Offset
  SearchProjects(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string, userName string, filters map[experiment_model.ProjectSearchFields]string, limit int32, offset int32) (r []*workspace_model.Project, err error)
  // Search Experiments.
  // Search Experiments by using multiple filter criteria with pagination. Results will be sorted based on creation time DESC.
  // 
  // @param gatewayId
  //       Identifier of the requested gateway.
  // 
  // @param userName
  //       Username of the user requesting the search function.
  // 
  // @param filters
  //       Map of multiple filter criteria. Currenlt search filters includes Experiment Name, Description, Application, etc....
  // 
  // @param limit
  //       Amount of results to be fetched.
  // 
  // @param offset
  //       The starting point of the results to be fetched.
  // 
  // @return ExperimentSummaryModel
  //    List of experiments for the given search filter. Here only the Experiment summary will be returned.
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - GatewayId
  //  - UserName
  //  - Filters
  //  - Limit
  //  - Offset
  SearchExperiments(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string, userName string, filters map[experiment_model.ExperimentSearchFields]string, limit int32, offset int32) (r []*experiment_model.ExperimentSummaryModel, err error)
  // 
  // Get Experiment Statistics
  // Get Experiment Statisitics for a given gateway for a specific time period. This feature is available only for admins of a particular gateway. Gateway admin access is managed by the user roles.
  // 
  // @param gatewayId
  //       Unique identifier of the gateway making the request to fetch statistics.
  // 
  // @param fromTime
  //       Starting date time.
  // 
  // @param toTime
  //       Ending data time.
  // 
  // @param userName
  //       Gateway username substring with which to further filter statistics.
  // 
  // @param applicationName
  //       Application id substring with which to further filter statistics.
  // 
  // @param resourceHostName
  //       Hostname id substring with which to further filter statistics.
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - GatewayId
  //  - FromTime
  //  - ToTime
  //  - UserName
  //  - ApplicationName
  //  - ResourceHostName
  GetExperimentStatistics(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string, fromTime int64, toTime int64, userName string, applicationName string, resourceHostName string) (r *experiment_model.ExperimentStatistics, err error)
  // 
  // Get All Experiments of the Project
  // Get Experiments within project with pagination. Results will be sorted based on creation time DESC.
  // 
  // @param projectId
  //       Uniqie identifier of the project.
  // 
  // @param limit
  //       Amount of results to be fetched.
  // 
  // @param offset
  //       The starting point of the results to be fetched.
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - ProjectId
  //  - Limit
  //  - Offset
  GetExperimentsInProject(ctx context.Context, authzToken *security_model.AuthzToken, projectId string, limit int32, offset int32) (r []*experiment_model.ExperimentModel, err error)
  // 
  // Get All Experiments of the User
  // Get experiments by user with pagination. Results will be sorted based on creation time DESC.
  // 
  // @param gatewayId
  //       Identifier of the requesting gateway.
  // 
  // @param userName
  //       Username of the requested end user.
  // 
  // @param limit
  //       Amount of results to be fetched.
  // 
  // @param offset
  //       The starting point of the results to be fetched.
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - GatewayId
  //  - UserName
  //  - Limit
  //  - Offset
  GetUserExperiments(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string, userName string, limit int32, offset int32) (r []*experiment_model.ExperimentModel, err error)
  //   *
  //   * Create New Experiment
  //   * Create an experiment for the specified user belonging to the gateway. The gateway identity is not explicitly passed
  //   *   but inferred from the sshKeyAuthentication header. This experiment is just a persistent place holder. The client
  //   *   has to subsequently configure and launch the created experiment. No action is taken on Airavata Server except
  //   *   registering the experiment in a persistent store.
  //   *
  //   * @param gatewayId
  //   *    The unique ID of the gateway where the experiment is been created.
  //   *
  //   * @param ExperimentModel
  //   *    The create experiment will require the basic experiment metadata like the name and description, intended user,
  //   *      the gateway identifer and if the experiment should be shared public by defualt. During the creation of an experiment
  //   *      the ExperimentMetadata is a required field.
  //   *
  //   * @return
  //   *   The server-side generated.airavata.registry.core.experiment.globally unique identifier.
  //   *
  //   * @throws org.apache.airavata.model.error.InvalidRequestException
  //   *    For any incorrect forming of the request itself.
  //   *
  //   * @throws org.apache.airavata.model.error.AiravataClientException
  //   *    The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
  //   *
  //   *      UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
  //   *         step, then Airavata Registry will not have a provenance area setup. The client has to follow
  //   *         gateway registration steps and retry this request.
  //   *
  //   *      AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
  //   *         For now this is a place holder.
  //   *
  //   *      INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
  //   *         is implemented, the authorization will be more substantial.
  //   *
  //   * @throws org.apache.airavata.model.error.AiravataSystemException
  //   *    This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
  //   *       rather an Airavata Administrator will be notified to take corrective action.
  //   *
  // *
  // 
  // Parameters:
  //  - AuthzToken
  //  - GatewayId
  //  - Experiment
  CreateExperiment(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string, experiment *experiment_model.ExperimentModel) (r string, err error)
  // 
  // Delete an Experiment
  // If the experiment is not already launched experiment can be deleted.
  // 
  // @param authzToken
  // 
  // @param experiementId
  //     Experiment ID of the experimnet you want to delete.
  // 
  // @return boolean
  //     Identifier for the success or failure of the deletion operation.
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - ExperimentId
  DeleteExperiment(ctx context.Context, authzToken *security_model.AuthzToken, experimentId string) (r bool, err error)
  //   *
  //   * Get Experiment
  //   * Fetch previously created experiment metadata.
  //   *
  //   * @param airavataExperimentId
  //   *    The unique identifier of the requested experiment. This ID is returned during the create experiment step.
  //   *
  //   * @return ExperimentModel
  //   *   This method will return the previously stored experiment metadata.
  //   *
  //   * @throws org.apache.airavata.model.error.InvalidRequestException
  //   *    For any incorrect forming of the request itself.
  //   *
  //   * @throws org.apache.airavata.model.error.ExperimentNotFoundException
  //   *    If the specified experiment is not previously created, then an Experiment Not Found Exception is thrown.
  //   *
  //   * @throws org.apache.airavata.model.error.AiravataClientException
  //   *    The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
  //   *
  //   *      UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
  //   *         step, then Airavata Registry will not have a provenance area setup. The client has to follow
  //   *         gateway registration steps and retry this request.
  //   *
  //   *      AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
  //   *         For now this is a place holder.
  //   *
  //   *      INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
  //   *         is implemented, the authorization will be more substantial.
  //   *
  //   * @throws org.apache.airavata.model.error.AiravataSystemException
  //   *    This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
  //   *       rather an Airavata Administrator will be notified to take corrective action.
  //   *
  // *
  // 
  // Parameters:
  //  - AuthzToken
  //  - AiravataExperimentId
  GetExperiment(ctx context.Context, authzToken *security_model.AuthzToken, airavataExperimentId string) (r *experiment_model.ExperimentModel, err error)
  //   *
  //   * Get Experiment by an admin user
  //   *
  //   * Used by an admin user to fetch previously created experiment metadata.
  //   *
  //   * @param airavataExperimentId
  //   *    The unique identifier of the requested experiment. This ID is returned during the create experiment step.
  //   *
  //   * @return ExperimentModel
  //   *   This method will return the previously stored experiment metadata.
  //   *
  //   * @throws org.apache.airavata.model.error.InvalidRequestException
  //   *    For any incorrect forming of the request itself.
  //   *
  //   * @throws org.apache.airavata.model.error.ExperimentNotFoundException
  //   *    If the specified experiment is not previously created, then an Experiment Not Found Exception is thrown.
  //   *
  //   * @throws org.apache.airavata.model.error.AiravataClientException
  //   *    The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
  //   *
  //   *      UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
  //   *         step, then Airavata Registry will not have a provenance area setup. The client has to follow
  //   *         gateway registration steps and retry this request.
  //   *
  //   *      AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
  //   *         For now this is a place holder.
  //   *
  //   *      INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
  //   *         is implemented, the authorization will be more substantial.
  //   *
  //   * @throws org.apache.airavata.model.error.AiravataSystemException
  //   *    This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
  //   *       rather an Airavata Administrator will be notified to take corrective action.
  //   *
  // *
  // 
  // Parameters:
  //  - AuthzToken
  //  - AiravataExperimentId
  GetExperimentByAdmin(ctx context.Context, authzToken *security_model.AuthzToken, airavataExperimentId string) (r *experiment_model.ExperimentModel, err error)
  // 
  // Get Complete Experiment Details
  // Fetch the completed nested tree structue of previously created experiment metadata which includes processes ->
  // tasks -> jobs information.
  // 
  // @param airavataExperimentId
  //    The identifier for the requested experiment. This is returned during the create experiment step.
  // 
  // @return ExperimentModel
  //   This method will return the previously stored experiment metadata including application input parameters, computational resource scheduling
  //   information, special input output handling and additional quality of service parameters.
  // 
  // @throws org.apache.airavata.model.error.InvalidRequestException
  //    For any incorrect forming of the request itself.
  // 
  // @throws org.apache.airavata.model.error.ExperimentNotFoundException
  //    If the specified experiment is not previously created, then an Experiment Not Found Exception is thrown.
  // 
  // @throws org.apache.airavata.model.error.AiravataClientException
  //    The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
  // 
  //      UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
  //         step, then Airavata Registry will not have a provenance area setup. The client has to follow
  //         gateway registration steps and retry this request.
  // 
  //      AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
  //         For now this is a place holder.
  // 
  //      INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
  //         is implemented, the authorization will be more substantial.
  // 
  // @throws org.apache.airavata.model.error.AiravataSystemException
  //    This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
  //       rather an Airavata Administrator will be notified to take corrective action.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - AiravataExperimentId
  GetDetailedExperimentTree(ctx context.Context, authzToken *security_model.AuthzToken, airavataExperimentId string) (r *experiment_model.ExperimentModel, err error)
  // 
  // Update a Previously Created Experiment
  // Configure the CREATED experiment with required inputs, scheduling and other quality of service parameters. This method only updates the experiment object within the registry.
  // The experiment has to be launched to make it actionable by the server.
  // 
  // @param airavataExperimentId
  //    The identifier for the requested experiment. This is returned during the create experiment step.
  // 
  // @param ExperimentModel
  //    The configuration information of the experiment with application input parameters, computational resource scheduling
  //      information, special input output handling and additional quality of service parameters.
  // 
  // @return
  //   This method call does not have a return value.
  // 
  // @throws org.apache.airavata.model.error.InvalidRequestException
  //    For any incorrect forming of the request itself.
  // 
  // @throws org.apache.airavata.model.error.ExperimentNotFoundException
  //    If the specified experiment is not previously created, then an Experiment Not Found Exception is thrown.
  // 
  // @throws org.apache.airavata.model.error.AiravataClientException
  //    The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
  //      
  //      UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
  //         step, then Airavata Registry will not have a provenance area setup. The client has to follow
  //         gateway registration steps and retry this request.
  // 
  //      AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
  //         For now this is a place holder.
  // 
  //      INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
  //         is implemented, the authorization will be more substantial.
  // 
  // @throws org.apache.airavata.model.error.AiravataSystemException
  //    This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
  //       rather an Airavata Administrator will be notified to take corrective action.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - AiravataExperimentId
  //  - Experiment
  UpdateExperiment(ctx context.Context, authzToken *security_model.AuthzToken, airavataExperimentId string, experiment *experiment_model.ExperimentModel) (err error)
  // Parameters:
  //  - AuthzToken
  //  - AiravataExperimentId
  //  - UserConfiguration
  UpdateExperimentConfiguration(ctx context.Context, authzToken *security_model.AuthzToken, airavataExperimentId string, userConfiguration *experiment_model.UserConfigurationDataModel) (err error)
  // Parameters:
  //  - AuthzToken
  //  - AiravataExperimentId
  //  - ResourceScheduling
  UpdateResourceScheduleing(ctx context.Context, authzToken *security_model.AuthzToken, airavataExperimentId string, resourceScheduling *scheduling_model.ComputationalResourceSchedulingModel) (err error)
  //  *
  //  * Validate experiment configuration.
  //  * A true in general indicates, the experiment is ready to be launched.
  //  *
  //  * @param airavataExperimentId
  //  *    Unique identifier of the experiment (Experimnent ID) of the experiment which need to be validated.
  //  *
  //  * @return boolean
  //  *      Identifier for the success or failure of the validation operation.
  //  *
  // *
  // 
  // Parameters:
  //  - AuthzToken
  //  - AiravataExperimentId
  ValidateExperiment(ctx context.Context, authzToken *security_model.AuthzToken, airavataExperimentId string) (r bool, err error)
  // 
  // Launch a Previously Created & Configured Experiment.
  // Airavata Server will then start processing the request and appropriate notifications and intermediate and output data will be subsequently available for this experiment.
  // 
  // @gatewayId
  //    ID of the gateway which will launch the experiment.
  // 
  // @param airavataExperimentId
  //    The identifier for the requested experiment. This is returned during the create experiment step.
  // 
  // @return
  //   This method call does not have a return value.
  // 
  // @throws org.apache.airavata.model.error.InvalidRequestException
  //    For any incorrect forming of the request itself.
  // 
  // @throws org.apache.airavata.model.error.ExperimentNotFoundException
  //    If the specified experiment is not previously created, then an Experiment Not Found Exception is thrown.
  // 
  // @throws org.apache.airavata.model.error.AiravataClientException
  //    The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
  //      
  //      UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
  //         step, then Airavata Registry will not have a provenance area setup. The client has to follow
  //         gateway registration steps and retry this request.
  // 
  //      AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
  //         For now this is a place holder.
  // 
  //      INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
  //         is implemented, the authorization will be more substantial.
  // 
  // @throws org.apache.airavata.model.error.AiravataSystemException
  //    This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
  //       rather an Airavata Administrator will be notified to take corrective action.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - AiravataExperimentId
  //  - GatewayId
  LaunchExperiment(ctx context.Context, authzToken *security_model.AuthzToken, airavataExperimentId string, gatewayId string) (err error)
  // 
  // Get Experiment Status
  // 
  // Obtain the status of an experiment by providing the Experiment Id
  // 
  // @param authzToken
  // 
  // @param airavataExperimentId
  //     Experiment ID of the experimnet you require the status.
  // 
  // @return ExperimentStatus
  //     ExperimentStatus model with the current status will be returned.
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - AiravataExperimentId
  GetExperimentStatus(ctx context.Context, authzToken *security_model.AuthzToken, airavataExperimentId string) (r *status_models.ExperimentStatus, err error)
  // 
  // Get Experiment Outputs
  // This method to be used when need to obtain final outputs of a certain Experiment
  // 
  // @param authzToken
  // 
  // @param airavataExperimentId
  //     Experiment ID of the experimnet you need the outputs.
  // 
  // @return list
  //     List of experiment outputs will be returned. They will be returned as a list of OutputDataObjectType for the experiment.
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - AiravataExperimentId
  GetExperimentOutputs(ctx context.Context, authzToken *security_model.AuthzToken, airavataExperimentId string) (r []*application_io_models.OutputDataObjectType, err error)
  // 
  // Get Intermediate Experiment Outputs
  // This method to be used when need to obtain intermediate outputs of a certain Experiment
  // 
  // @param authzToken
  // 
  // @param airavataExperimentId
  //     Experiment ID of the experimnet you need intermediate outputs.
  // 
  // @return list
  //     List of intermediate experiment outputs will be returned. They will be returned as a list of OutputDataObjectType for the experiment.
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - AiravataExperimentId
  GetIntermediateOutputs(ctx context.Context, authzToken *security_model.AuthzToken, airavataExperimentId string) (r []*application_io_models.OutputDataObjectType, err error)
  // 
  // Get Job Statuses for an Experiment
  // This method to be used when need to get the job status of an Experiment. An experiment may have one or many jobs; there for one or many job statuses may turnup
  // 
  // @param authzToken
  // 
  // @param experiementId
  //     Experiment ID of the experimnet you need the job statuses.
  // 
  // @return JobStatus
  //     Job status (string) for all all the existing jobs for the experiment will be returned in the form of a map
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - AiravataExperimentId
  GetJobStatuses(ctx context.Context, authzToken *security_model.AuthzToken, airavataExperimentId string) (r map[string]*status_models.JobStatus, err error)
  // 
  // Get Job Details for all the jobs within an Experiment.
  // This method to be used when need to get the job details for one or many jobs of an Experiment.
  // 
  // @param authzToken
  // 
  // @param experiementId
  //     Experiment ID of the experimnet you need job details.
  // 
  // @return list of JobDetails
  //     Job details.
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - AiravataExperimentId
  GetJobDetails(ctx context.Context, authzToken *security_model.AuthzToken, airavataExperimentId string) (r []*job_model.JobModel, err error)
  // 
  // Clone an Existing Experiment
  // Existing specified experiment is cloned and a new name is provided. A copy of the experiment configuration is made and is persisted with new metadata.
  //   The client has to subsequently update this configuration if needed and launch the cloned experiment.
  // 
  // @param newExperimentName
  //    experiment name that should be used in the cloned experiment
  // 
  // @param updatedExperiment
  //    Once an experiment is cloned, to disambiguate, the users are suggested to provide new metadata. This will again require
  //      the basic experiment metadata like the name and description, intended user, the gateway identifier and if the experiment
  //      should be shared public by default.
  // @param newExperimentProjectId
  //    The project in which to create the cloned experiment. This is optional and if null the experiment will be created
  //      in the same project as the existing experiment.
  // 
  // @return
  //   The server-side generated.airavata.registry.core.experiment.globally unique identifier (Experiment ID) for the newly cloned experiment.
  // 
  // @throws org.apache.airavata.model.error.InvalidRequestException
  //    For any incorrect forming of the request itself.
  // 
  // @throws org.apache.airavata.model.error.ExperimentNotFoundException
  //    If the specified experiment is not previously created, then an Experiment Not Found Exception is thrown.
  // 
  // @throws org.apache.airavata.model.error.AiravataClientException
  //    The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
  //      
  //      UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
  //         step, then Airavata Registry will not have a provenance area setup. The client has to follow
  //         gateway registration steps and retry this request.
  // 
  //      AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
  //         For now this is a place holder.
  // 
  //      INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
  //         is implemented, the authorization will be more substantial.
  // 
  // @throws org.apache.airavata.model.error.AiravataSystemException
  //    This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
  //       rather an Airavata Administrator will be notified to take corrective action.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - ExistingExperimentID
  //  - NewExperimentName_
  //  - NewExperimentProjectId_
  CloneExperiment(ctx context.Context, authzToken *security_model.AuthzToken, existingExperimentID string, newExperimentName string, newExperimentProjectId string) (r string, err error)
  // 
  // Clone an Existing Experiment by an admin user
  // Existing specified experiment is cloned and a new name is provided. A copy of the experiment configuration is made and is persisted with new metadata.
  //   The client has to subsequently update this configuration if needed and launch the cloned experiment.
  // 
  // @param newExperimentName
  //    experiment name that should be used in the cloned experiment
  // 
  // @param updatedExperiment
  //    Once an experiment is cloned, to disambiguate, the users are suggested to provide new metadata. This will again require
  //      the basic experiment metadata like the name and description, intended user, the gateway identifier and if the experiment
  //      should be shared public by default.
  // @param newExperimentProjectId
  //    The project in which to create the cloned experiment. This is optional and if null the experiment will be created
  //      in the same project as the existing experiment.
  // 
  // @return
  //   The server-side generated.airavata.registry.core.experiment.globally unique identifier (Experiment ID) for the newly cloned experiment.
  // 
  // @throws org.apache.airavata.model.error.InvalidRequestException
  //    For any incorrect forming of the request itself.
  // 
  // @throws org.apache.airavata.model.error.ExperimentNotFoundException
  //    If the specified experiment is not previously created, then an Experiment Not Found Exception is thrown.
  // 
  // @throws org.apache.airavata.model.error.AiravataClientException
  //    The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
  // 
  //      UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
  //         step, then Airavata Registry will not have a provenance area setup. The client has to follow
  //         gateway registration steps and retry this request.
  // 
  //      AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
  //         For now this is a place holder.
  // 
  //      INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
  //         is implemented, the authorization will be more substantial.
  // 
  // @throws org.apache.airavata.model.error.AiravataSystemException
  //    This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
  //       rather an Airavata Administrator will be notified to take corrective action.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - ExistingExperimentID
  //  - NewExperimentName_
  //  - NewExperimentProjectId_
  CloneExperimentByAdmin(ctx context.Context, authzToken *security_model.AuthzToken, existingExperimentID string, newExperimentName string, newExperimentProjectId string) (r string, err error)
  // 
  // Terminate a running Experiment.
  // 
  // @gatewayId
  //    ID of the gateway which will terminate the running Experiment.
  // 
  // @param airavataExperimentId
  //    The identifier of the experiment required termination. This ID is returned during the create experiment step.
  // 
  // @return status
  //   This method call does not have a return value.
  // 
  // @throws org.apache.airavata.model.error.InvalidRequestException
  //    For any incorrect forming of the request itself.
  // 
  // @throws org.apache.airavata.model.error.ExperimentNotFoundException
  //    If the specified experiment is not previously created, then an Experiment Not Found Exception is thrown.
  // 
  // @throws org.apache.airavata.model.error.AiravataClientException
  //    The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
  //      
  //      UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
  //         step, then Airavata Registry will not have a provenance area setup. The client has to follow
  //         gateway registration steps and retry this request.
  // 
  //      AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
  //         For now this is a place holder.
  // 
  //      INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
  //         is implemented, the authorization will be more substantial.
  // 
  // @throws org.apache.airavata.model.error.AiravataSystemException
  //    This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
  //       rather an Airavata Administrator will be notified to take corrective action.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - AiravataExperimentId
  //  - GatewayId
  TerminateExperiment(ctx context.Context, authzToken *security_model.AuthzToken, airavataExperimentId string, gatewayId string) (err error)
  // 
  // Register a Application Module.
  // 
  // @gatewayId
  //    ID of the gateway which is registering the new Application Module.
  // 
  // @param applicationModule
  //    Application Module Object created from the datamodel.
  // 
  // @return appModuleId
  //   Returns the server-side generated airavata appModule globally unique identifier.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - GatewayId
  //  - ApplicationModule
  RegisterApplicationModule(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string, applicationModule *application_deployment_model.ApplicationModule) (r string, err error)
  // 
  // Fetch a Application Module.
  // 
  // @param appModuleId
  //   The unique identifier of the application module required
  // 
  // @return applicationModule
  //   Returns an Application Module Object.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - AppModuleId
  GetApplicationModule(ctx context.Context, authzToken *security_model.AuthzToken, appModuleId string) (r *application_deployment_model.ApplicationModule, err error)
  // 
  // Update a Application Module.
  // 
  // @param appModuleId
  //   The identifier for the requested application module to be updated.
  // 
  // @param applicationModule
  //    Application Module Object created from the datamodel.
  // 
  // @return status
  //   Returns a success/failure of the update.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - AppModuleId
  //  - ApplicationModule
  UpdateApplicationModule(ctx context.Context, authzToken *security_model.AuthzToken, appModuleId string, applicationModule *application_deployment_model.ApplicationModule) (r bool, err error)
  // 
  // Fetch all Application Module Descriptions.
  // 
  // @param gatewayId
  //    ID of the gateway which need to list all available application deployment documentation.
  // 
  // @return list
  //    Returns the list of all Application Module Objects.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - GatewayId
  GetAllAppModules(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string) (r []*application_deployment_model.ApplicationModule, err error)
  // 
  // Delete an Application Module.
  // 
  // @param appModuleId
  //   The identifier of the Application Module to be deleted.
  // 
  // @return status
  //   Returns a success/failure of the deletion.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - AppModuleId
  DeleteApplicationModule(ctx context.Context, authzToken *security_model.AuthzToken, appModuleId string) (r bool, err error)
  // 
  // Register an Application Deployment.
  // 
  // @param gatewayId
  //    ID of the gateway which is registering the new Application Deployment.
  // 
  // @param applicationDeployment
  //    Application Module Object created from the datamodel.
  // 
  // @return appDeploymentId
  //   Returns a server-side generated airavata appDeployment globally unique identifier.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - GatewayId
  //  - ApplicationDeployment
  RegisterApplicationDeployment(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string, applicationDeployment *application_deployment_model.ApplicationDeploymentDescription) (r string, err error)
  // 
  // Fetch a Application Deployment.
  // 
  // @param appDeploymentId
  //   The identifier for the requested application module
  // 
  // @return applicationDeployment
  //   Returns a application Deployment Object.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - AppDeploymentId
  GetApplicationDeployment(ctx context.Context, authzToken *security_model.AuthzToken, appDeploymentId string) (r *application_deployment_model.ApplicationDeploymentDescription, err error)
  // 
  // Update an Application Deployment.
  // 
  // @param appDeploymentId
  //   The identifier of the requested application deployment to be updated.
  // 
  // @param appDeployment
  //    Application Deployment Object created from the datamodel.
  // 
  // @return status
  //   Returns a success/failure of the update.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - AppDeploymentId
  //  - ApplicationDeployment
  UpdateApplicationDeployment(ctx context.Context, authzToken *security_model.AuthzToken, appDeploymentId string, applicationDeployment *application_deployment_model.ApplicationDeploymentDescription) (r bool, err error)
  // 
  // Delete an Application Deployment.
  // 
  // @param appDeploymentId
  //   The unique identifier of application deployment to be deleted.
  // 
  // @return status
  //   Returns a success/failure of the deletion.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - AppDeploymentId
  DeleteApplicationDeployment(ctx context.Context, authzToken *security_model.AuthzToken, appDeploymentId string) (r bool, err error)
  // 
  // Fetch all Application Deployment Descriptions.
  // 
  // @param gatewayId
  //    ID of the gateway which need to list all available application deployment documentation.
  // 
  // @return list<applicationDeployment.
  //    Returns the list of all application Deployment Objects.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - GatewayId
  GetAllApplicationDeployments(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string) (r []*application_deployment_model.ApplicationDeploymentDescription, err error)
  // Fetch a list of Deployed Compute Hosts.
  // 
  // @param appModuleId
  //   The identifier for the requested application module
  // 
  // @return list<string>
  //   Returns a list of Deployed Resources.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - AppModuleId
  GetAppModuleDeployedResources(ctx context.Context, authzToken *security_model.AuthzToken, appModuleId string) (r []string, err error)
  // 
  // Register a Application Interface.
  // 
  // @param applicationInterface
  //    Application Module Object created from the datamodel.
  // 
  // @return appInterfaceId
  //   Returns a server-side generated airavata application interface globally unique identifier.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - GatewayId
  //  - ApplicationInterface
  RegisterApplicationInterface(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string, applicationInterface *application_interface_model.ApplicationInterfaceDescription) (r string, err error)
  // 
  // Clone an Application Interface.
  // 
  // @gatewayId
  //    The identifier for the gateway profile to be requested
  // 
  // @param existingAppInterfaceID
  //    Identifier of the existing Application interface you wich to clone.
  // 
  // @param newApplicationName
  //    Name for the new application interface.
  // 
  // @return appInterfaceId
  //    Returns a server-side generated globally unique identifier for the newly cloned application interface.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - ExistingAppInterfaceID
  //  - NewApplicationName_
  //  - GatewayId
  CloneApplicationInterface(ctx context.Context, authzToken *security_model.AuthzToken, existingAppInterfaceID string, newApplicationName string, gatewayId string) (r string, err error)
  // 
  // Fetch an Application Interface.
  // 
  // @param appInterfaceId
  //   The identifier for the requested application interface.
  // 
  // @return applicationInterface
  //   Returns an application Interface Object.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - AppInterfaceId
  GetApplicationInterface(ctx context.Context, authzToken *security_model.AuthzToken, appInterfaceId string) (r *application_interface_model.ApplicationInterfaceDescription, err error)
  // 
  // Update a Application Interface.
  // 
  // @param appInterfaceId
  //   The identifier of the requested application deployment to be updated.
  // 
  // @param appInterface
  //    Application Interface Object created from the datamodel.
  // 
  // @return status
  //   Returns a success/failure of the update.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - AppInterfaceId
  //  - ApplicationInterface
  UpdateApplicationInterface(ctx context.Context, authzToken *security_model.AuthzToken, appInterfaceId string, applicationInterface *application_interface_model.ApplicationInterfaceDescription) (r bool, err error)
  // 
  // Delete an Application Interface.
  // 
  // @param appInterfaceId
  //   The identifier for the requested application interface to be deleted.
  // 
  // @return status
  //   Returns a success/failure of the deletion.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - AppInterfaceId
  DeleteApplicationInterface(ctx context.Context, authzToken *security_model.AuthzToken, appInterfaceId string) (r bool, err error)
  // 
  // Fetch name and ID of  Application Interface documents.
  // 
  // 
  // @return map<applicationId, applicationInterfaceNames>
  //   Returns a list of application interfaces with corresponsing ID's
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - GatewayId
  GetAllApplicationInterfaceNames(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string) (r map[string]string, err error)
  // 
  // Fetch all Application Interface documents.
  // 
  // 
  // @return map<applicationId, applicationInterfaceNames>
  //   Returns a list of application interfaces documents (Application Interface ID, name, description, Inputs and Outputs objects).
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - GatewayId
  GetAllApplicationInterfaces(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string) (r []*application_interface_model.ApplicationInterfaceDescription, err error)
  // 
  // Fetch the list of Application Inputs.
  // 
  // @param appInterfaceId
  //   The identifier of the application interface which need inputs to be fetched.
  // 
  // @return list<application_interface_model.InputDataObjectType>
  //   Returns a list of application inputs.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - AppInterfaceId
  GetApplicationInputs(ctx context.Context, authzToken *security_model.AuthzToken, appInterfaceId string) (r []*application_io_models.InputDataObjectType, err error)
  // 
  // Fetch list of Application Outputs.
  // 
  // @param appInterfaceId
  //   The identifier of the application interface which need outputs to be fetched.
  // 
  // @return list<application_interface_model.OutputDataObjectType>
  //   Returns a list of application outputs.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - AppInterfaceId
  GetApplicationOutputs(ctx context.Context, authzToken *security_model.AuthzToken, appInterfaceId string) (r []*application_io_models.OutputDataObjectType, err error)
  // 
  // Fetch a list of all deployed Compute Hosts for a given application interfaces.
  // 
  // @param appInterfaceId
  //   The identifier for the requested application interface.
  // 
  // @return map<computeResourceId, computeResourceName>
  //   A map of registered compute resource id's and their corresponding hostnames.
  //   Deployments of each modules listed within the interfaces will be listed.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - AppInterfaceId
  GetAvailableAppInterfaceComputeResources(ctx context.Context, authzToken *security_model.AuthzToken, appInterfaceId string) (r map[string]string, err error)
  // Register a Compute Resource.
  // 
  // @param computeResourceDescription
  //    Compute Resource Object created from the datamodel.
  // 
  // @return computeResourceId
  //   Returns a server-side generated airavata compute resource globally unique identifier.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - ComputeResourceDescription
  RegisterComputeResource(ctx context.Context, authzToken *security_model.AuthzToken, computeResourceDescription *compute_resource_model.ComputeResourceDescription) (r string, err error)
  // Fetch the given Compute Resource.
  // 
  // @param computeResourceId
  //   The identifier for the requested compute resource
  // 
  // @return computeResourceDescription
  //    Compute Resource Object created from the datamodel..
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - ComputeResourceId
  GetComputeResource(ctx context.Context, authzToken *security_model.AuthzToken, computeResourceId string) (r *compute_resource_model.ComputeResourceDescription, err error)
  // 
  // Fetch all registered Compute Resources.
  // 
  // @return A map of registered compute resource id's and thier corresponding hostnames.
  //    Compute Resource Object created from the datamodel..
  // 
  // 
  // Parameters:
  //  - AuthzToken
  GetAllComputeResourceNames(ctx context.Context, authzToken *security_model.AuthzToken) (r map[string]string, err error)
  // Update a Compute Resource.
  // 
  // @param computeResourceId
  //   The identifier for the requested compute resource to be updated.
  // 
  // @param computeResourceDescription
  //    Compute Resource Object created from the datamodel.
  // 
  // @return status
  //   Returns a success/failure of the update.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - ComputeResourceId
  //  - ComputeResourceDescription
  UpdateComputeResource(ctx context.Context, authzToken *security_model.AuthzToken, computeResourceId string, computeResourceDescription *compute_resource_model.ComputeResourceDescription) (r bool, err error)
  // Delete a Compute Resource.
  // 
  // @param computeResourceId
  //   The identifier for the requested compute resource to be deleted.
  // 
  // @return status
  //   Returns a success/failure of the deletion.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - ComputeResourceId
  DeleteComputeResource(ctx context.Context, authzToken *security_model.AuthzToken, computeResourceId string) (r bool, err error)
  // Register a Storage Resource.
  // 
  // @param storageResourceDescription
  //    Storge Resource Object created from the datamodel.
  // 
  // @return storageResourceId
  //   Returns a server-side generated airavata storage resource globally unique identifier.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - StorageResourceDescription
  RegisterStorageResource(ctx context.Context, authzToken *security_model.AuthzToken, storageResourceDescription *storage_resource_model.StorageResourceDescription) (r string, err error)
  // Fetch the given Storage Resource.
  // 
  // @param storageResourceId
  //   The identifier for the requested storage resource
  // 
  // @return storageResourceDescription
  //    Storage Resource Object created from the datamodel..
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - StorageResourceId
  GetStorageResource(ctx context.Context, authzToken *security_model.AuthzToken, storageResourceId string) (r *storage_resource_model.StorageResourceDescription, err error)
  // Fetch all registered Storage Resources.
  // 
  // @return A map of registered compute resource id's and thier corresponding hostnames.
  //    Compute Resource Object created from the datamodel..
  // 
  // 
  // Parameters:
  //  - AuthzToken
  GetAllStorageResourceNames(ctx context.Context, authzToken *security_model.AuthzToken) (r map[string]string, err error)
  // Update a Storage Resource.
  // 
  // @param storageResourceId
  //   The identifier for the requested compute resource to be updated.
  // 
  // @param storageResourceDescription
  //    Storage Resource Object created from the datamodel.
  // 
  // @return status
  //   Returns a success/failure of the update.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - StorageResourceId
  //  - StorageResourceDescription
  UpdateStorageResource(ctx context.Context, authzToken *security_model.AuthzToken, storageResourceId string, storageResourceDescription *storage_resource_model.StorageResourceDescription) (r bool, err error)
  // Delete a Storage Resource.
  // 
  // @param storageResourceId
  //   The identifier of the requested compute resource to be deleted.
  // 
  // @return status
  //   Returns a success/failure of the deletion.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - StorageResourceId
  DeleteStorageResource(ctx context.Context, authzToken *security_model.AuthzToken, storageResourceId string) (r bool, err error)
  // Add a Local Job Submission details to a compute resource
  //  App catalog will return a jobSubmissionInterfaceId which will be added to the jobSubmissionInterfaces.
  // 
  // @param computeResourceId
  //   The identifier of the compute resource to which JobSubmission protocol to be added
  // 
  // @param priorityOrder
  //   Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.
  // 
  // @param localSubmission
  //   The LOCALSubmission object to be added to the resource.
  // 
  // @return status
  //   Returns the unique job submission id.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - ComputeResourceId
  //  - PriorityOrder
  //  - LocalSubmission
  AddLocalSubmissionDetails(ctx context.Context, authzToken *security_model.AuthzToken, computeResourceId string, priorityOrder int32, localSubmission *compute_resource_model.LOCALSubmission) (r string, err error)
  // Update the given Local Job Submission details
  // 
  // @param jobSubmissionInterfaceId
  //   The identifier of the JobSubmission Interface to be updated.
  // 
  // @param localSubmission
  //   The LOCALSubmission object to be updated.
  // 
  // @return status
  //   Returns a success/failure of the deletion.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - JobSubmissionInterfaceId
  //  - LocalSubmission
  UpdateLocalSubmissionDetails(ctx context.Context, authzToken *security_model.AuthzToken, jobSubmissionInterfaceId string, localSubmission *compute_resource_model.LOCALSubmission) (r bool, err error)
  // This method returns localJobSubmission object
  // @param jobSubmissionInterfaceId
  //   The identifier of the JobSubmission Interface to be retrieved.
  //  @return LOCALSubmission instance
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - JobSubmissionId
  GetLocalJobSubmission(ctx context.Context, authzToken *security_model.AuthzToken, jobSubmissionId string) (r *compute_resource_model.LOCALSubmission, err error)
  // Add a SSH Job Submission details to a compute resource
  //  App catalog will return a jobSubmissionInterfaceId which will be added to the jobSubmissionInterfaces.
  // 
  // @param computeResourceId
  //   The identifier of the compute resource to which JobSubmission protocol to be added
  // 
  // @param priorityOrder
  //   Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.
  // 
  // @param sshJobSubmission
  //   The SSHJobSubmission object to be added to the resource.
  // 
  // @return status
  //   Returns the unique job submission id.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - ComputeResourceId
  //  - PriorityOrder
  //  - SshJobSubmission
  AddSSHJobSubmissionDetails(ctx context.Context, authzToken *security_model.AuthzToken, computeResourceId string, priorityOrder int32, sshJobSubmission *compute_resource_model.SSHJobSubmission) (r string, err error)
  // Add a SSH_FORK Job Submission details to a compute resource
  //  App catalog will return a jobSubmissionInterfaceId which will be added to the jobSubmissionInterfaces.
  // 
  // @param computeResourceId
  //   The identifier of the compute resource to which JobSubmission protocol to be added
  // 
  // @param priorityOrder
  //   Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.
  // 
  // @param sshJobSubmission
  //   The SSHJobSubmission object to be added to the resource.
  // 
  // @return status
  //   Returns the unique job submission id.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - ComputeResourceId
  //  - PriorityOrder
  //  - SshJobSubmission
  AddSSHForkJobSubmissionDetails(ctx context.Context, authzToken *security_model.AuthzToken, computeResourceId string, priorityOrder int32, sshJobSubmission *compute_resource_model.SSHJobSubmission) (r string, err error)
  // This method returns SSHJobSubmission object
  // @param jobSubmissionInterfaceId
  //   The identifier of the JobSubmission Interface to be retrieved.
  //  @return SSHJobSubmission instance
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - JobSubmissionId
  GetSSHJobSubmission(ctx context.Context, authzToken *security_model.AuthzToken, jobSubmissionId string) (r *compute_resource_model.SSHJobSubmission, err error)
  // 
  // Add a UNICORE Job Submission details to a compute resource
  //  App catalog will return a jobSubmissionInterfaceId which will be added to the jobSubmissionInterfaces.
  // 
  // @param computeResourceId
  //   The identifier of the compute resource to which JobSubmission protocol to be added
  // 
  // @param priorityOrder
  //   Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.
  // 
  // @param unicoreJobSubmission
  //   The UnicoreJobSubmission object to be added to the resource.
  // 
  // @return status
  //  Returns the unique job submission id.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - ComputeResourceId
  //  - PriorityOrder
  //  - UnicoreJobSubmission
  AddUNICOREJobSubmissionDetails(ctx context.Context, authzToken *security_model.AuthzToken, computeResourceId string, priorityOrder int32, unicoreJobSubmission *compute_resource_model.UnicoreJobSubmission) (r string, err error)
  //   *
  //   * This method returns UnicoreJobSubmission object
  //   *
  //   * @param jobSubmissionInterfaceId
  //   *   The identifier of the JobSubmission Interface to be retrieved.
  //   *  @return UnicoreJobSubmission instance
  //   *
  // *
  // 
  // Parameters:
  //  - AuthzToken
  //  - JobSubmissionId
  GetUnicoreJobSubmission(ctx context.Context, authzToken *security_model.AuthzToken, jobSubmissionId string) (r *compute_resource_model.UnicoreJobSubmission, err error)
  //    *
  //    * Add a Cloud Job Submission details to a compute resource
  //    *  App catalog will return a jobSubmissionInterfaceId which will be added to the jobSubmissionInterfaces.
  //    *
  //    * @param computeResourceId
  //    *   The identifier of the compute resource to which JobSubmission protocol to be added
  //    *
  //    * @param priorityOrder
  //    *   Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.
  //    *
  //    * @param sshJobSubmission
  //    *   The SSHJobSubmission object to be added to the resource.
  //    *
  //    * @return status
  //    *   Returns the unique job submission id.
  //    *
  // *
  // 
  // Parameters:
  //  - AuthzToken
  //  - ComputeResourceId
  //  - PriorityOrder
  //  - CloudSubmission
  AddCloudJobSubmissionDetails(ctx context.Context, authzToken *security_model.AuthzToken, computeResourceId string, priorityOrder int32, cloudSubmission *compute_resource_model.CloudJobSubmission) (r string, err error)
  //    *
  //    * This method returns cloudJobSubmission object
  //    * @param jobSubmissionInterfaceI
  //        *   The identifier of the JobSubmission Interface to be retrieved.
  //    *  @return CloudJobSubmission instance
  // *
  // 
  // Parameters:
  //  - AuthzToken
  //  - JobSubmissionId
  GetCloudJobSubmission(ctx context.Context, authzToken *security_model.AuthzToken, jobSubmissionId string) (r *compute_resource_model.CloudJobSubmission, err error)
  // 
  // Update the given SSH Job Submission details
  // 
  // @param jobSubmissionInterfaceId
  //   The identifier of the JobSubmission Interface to be updated.
  // 
  // @param sshJobSubmission
  //   The SSHJobSubmission object to be updated.
  // 
  // @return status
  //   Returns a success/failure of the update.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - JobSubmissionInterfaceId
  //  - SshJobSubmission
  UpdateSSHJobSubmissionDetails(ctx context.Context, authzToken *security_model.AuthzToken, jobSubmissionInterfaceId string, sshJobSubmission *compute_resource_model.SSHJobSubmission) (r bool, err error)
  // 
  // Update the cloud Job Submission details
  // 
  // @param jobSubmissionInterfaceId
  //   The identifier of the JobSubmission Interface to be updated.
  // 
  // @param cloudJobSubmission
  //   The CloudJobSubmission object to be updated.
  // 
  // @return status
  //   Returns a success/failure of the update.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - JobSubmissionInterfaceId
  //  - SshJobSubmission
  UpdateCloudJobSubmissionDetails(ctx context.Context, authzToken *security_model.AuthzToken, jobSubmissionInterfaceId string, sshJobSubmission *compute_resource_model.CloudJobSubmission) (r bool, err error)
  // 
  // Update the UNIOCRE Job Submission details
  // 
  // @param jobSubmissionInterfaceId
  //   The identifier of the JobSubmission Interface to be updated.
  // 
  // @param UnicoreJobSubmission
  //   The UnicoreJobSubmission object to be updated.
  // 
  // @return status
  //   Returns a success/failure of the update.
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - JobSubmissionInterfaceId
  //  - UnicoreJobSubmission
  UpdateUnicoreJobSubmissionDetails(ctx context.Context, authzToken *security_model.AuthzToken, jobSubmissionInterfaceId string, unicoreJobSubmission *compute_resource_model.UnicoreJobSubmission) (r bool, err error)
  // 
  // Add a Local data movement details to a compute resource
  //  App catalog will return a dataMovementInterfaceId which will be added to the dataMovementInterfaces.
  // 
  // @param productUri
  //   The identifier of the compute resource to which JobSubmission protocol to be added
  // 
  // @param DMType
  //   DMType object to be added to the resource.
  // 
  // @param priorityOrder
  //   Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.
  // 
  // @param localDataMovement
  //   The LOCALDataMovement object to be added to the resource.
  // 
  // @return status
  //   Returns the unique job submission id.
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - ProductUri
  //  - DataMoveType
  //  - PriorityOrder
  //  - LocalDataMovement
  AddLocalDataMovementDetails(ctx context.Context, authzToken *security_model.AuthzToken, productUri string, dataMoveType data_movement_models.DMType, priorityOrder int32, localDataMovement *data_movement_models.LOCALDataMovement) (r string, err error)
  // 
  // Update the given Local data movement details
  // 
  // @param dataMovementInterfaceId
  //   The identifier of the data movement Interface to be updated.
  // 
  // @param localDataMovement
  //   The LOCALDataMovement object to be updated.
  // 
  // @return status
  //   Returns a success/failure of the update.
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - DataMovementInterfaceId
  //  - LocalDataMovement
  UpdateLocalDataMovementDetails(ctx context.Context, authzToken *security_model.AuthzToken, dataMovementInterfaceId string, localDataMovement *data_movement_models.LOCALDataMovement) (r bool, err error)
  // 
  // This method returns local datamovement object.
  // 
  // @param dataMovementId
  //   The identifier of the datamovement Interface to be retrieved.
  // 
  //  @return LOCALDataMovement instance
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - DataMovementId
  GetLocalDataMovement(ctx context.Context, authzToken *security_model.AuthzToken, dataMovementId string) (r *data_movement_models.LOCALDataMovement, err error)
  // 
  // Add a SCP data movement details to a compute resource
  //  App catalog will return a dataMovementInterfaceId which will be added to the dataMovementInterfaces.
  // 
  // @param productUri
  //   The identifier of the compute resource to which JobSubmission protocol to be added
  // 
  // @param priorityOrder
  //   Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.
  // 
  // @param scpDataMovement
  //   The SCPDataMovement object to be added to the resource.
  // 
  // @return status
  //   Returns the unique job submission id.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - ProductUri
  //  - DataMoveType
  //  - PriorityOrder
  //  - ScpDataMovement
  AddSCPDataMovementDetails(ctx context.Context, authzToken *security_model.AuthzToken, productUri string, dataMoveType data_movement_models.DMType, priorityOrder int32, scpDataMovement *data_movement_models.SCPDataMovement) (r string, err error)
  // 
  // Update the given scp data movement details
  //  App catalog will return a dataMovementInterfaceId which will be added to the dataMovementInterfaces.
  // 
  // @param dataMovementInterfaceId
  //   The identifier of the data movement Interface to be updated.
  // 
  // @param scpDataMovement
  //   The SCPDataMovement object to be updated.
  // 
  // @return status
  //   Returns a success/failure of the update.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - DataMovementInterfaceId
  //  - ScpDataMovement
  UpdateSCPDataMovementDetails(ctx context.Context, authzToken *security_model.AuthzToken, dataMovementInterfaceId string, scpDataMovement *data_movement_models.SCPDataMovement) (r bool, err error)
  // This method returns SCP datamovement object
  // 
  // @param dataMovementId
  //   The identifier of the datamovement Interface to be retrieved.
  // 
  // @return SCPDataMovement instance
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - DataMovementId
  GetSCPDataMovement(ctx context.Context, authzToken *security_model.AuthzToken, dataMovementId string) (r *data_movement_models.SCPDataMovement, err error)
  // 
  // Add a UNICORE data movement details to a compute resource
  //  App catalog will return a dataMovementInterfaceId which will be added to the dataMovementInterfaces.
  // 
  // @param productUri
  //   The identifier of the compute resource to which data movement protocol to be added
  // 
  // @param priorityOrder
  //   Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.
  // 
  // @param UnicoreDataMovement
  //   The UnicoreDataMovement object to be added to the resource.
  // 
  // @return status
  //   Returns the unique data movement id.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - ProductUri
  //  - DataMoveType
  //  - PriorityOrder
  //  - UnicoreDataMovement
  AddUnicoreDataMovementDetails(ctx context.Context, authzToken *security_model.AuthzToken, productUri string, dataMoveType data_movement_models.DMType, priorityOrder int32, unicoreDataMovement *data_movement_models.UnicoreDataMovement) (r string, err error)
  // 
  // Update a selected UNICORE data movement details
  //  App catalog will return a dataMovementInterfaceId which will be added to the dataMovementInterfaces.
  // 
  // @param dataMovementInterfaceId
  //   The identifier of the data movement Interface to be updated.
  // 
  // @param UnicoreDataMovement
  //   The UnicoreDataMovement object to be updated.
  // 
  // @return status
  //   Returns a success/failure of the update.
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - DataMovementInterfaceId
  //  - UnicoreDataMovement
  UpdateUnicoreDataMovementDetails(ctx context.Context, authzToken *security_model.AuthzToken, dataMovementInterfaceId string, unicoreDataMovement *data_movement_models.UnicoreDataMovement) (r bool, err error)
  // 
  // This method returns UNICORE datamovement object
  // 
  // @param dataMovementId
  //   The identifier of the datamovement Interface to be retrieved.
  // 
  // @return UnicoreDataMovement instance
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - DataMovementId
  GetUnicoreDataMovement(ctx context.Context, authzToken *security_model.AuthzToken, dataMovementId string) (r *data_movement_models.UnicoreDataMovement, err error)
  // 
  // Add a GridFTP data movement details to a compute resource
  //  App catalog will return a dataMovementInterfaceId which will be added to the dataMovementInterfaces.
  // 
  // @param productUri
  //   The identifier of the compute resource to which dataMovement protocol to be added
  // 
  // @param DMType
  //    The DMType object to be added to the resource.
  // 
  // @param priorityOrder
  //   Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.
  // 
  // @param gridFTPDataMovement
  //   The GridFTPDataMovement object to be added to the resource.
  // 
  // @return status
  //   Returns the unique data movement id.
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - ProductUri
  //  - DataMoveType
  //  - PriorityOrder
  //  - GridFTPDataMovement
  AddGridFTPDataMovementDetails(ctx context.Context, authzToken *security_model.AuthzToken, productUri string, dataMoveType data_movement_models.DMType, priorityOrder int32, gridFTPDataMovement *data_movement_models.GridFTPDataMovement) (r string, err error)
  // Update the given GridFTP data movement details to a compute resource
  //  App catalog will return a dataMovementInterfaceId which will be added to the dataMovementInterfaces.
  // 
  // @param dataMovementInterfaceId
  //   The identifier of the data movement Interface to be updated.
  // 
  // @param gridFTPDataMovement
  //   The GridFTPDataMovement object to be updated.
  // 
  // @return boolean
  //   Returns a success/failure of the update.
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - DataMovementInterfaceId
  //  - GridFTPDataMovement
  UpdateGridFTPDataMovementDetails(ctx context.Context, authzToken *security_model.AuthzToken, dataMovementInterfaceId string, gridFTPDataMovement *data_movement_models.GridFTPDataMovement) (r bool, err error)
  // This method returns GridFTP datamovement object
  // 
  // @param dataMovementId
  //   The identifier of the datamovement Interface to be retrieved.
  // 
  //  @return GridFTPDataMovement instance
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - DataMovementId
  GetGridFTPDataMovement(ctx context.Context, authzToken *security_model.AuthzToken, dataMovementId string) (r *data_movement_models.GridFTPDataMovement, err error)
  // Change the priority of a given job submisison interface
  // 
  // @param jobSubmissionInterfaceId
  //   The identifier of the JobSubmission Interface to be changed
  // 
  // @param priorityOrder
  //   The new priority of the job manager interface.
  // 
  // @return status
  //   Returns a success/failure of the change.
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - JobSubmissionInterfaceId
  //  - NewPriorityOrder_
  ChangeJobSubmissionPriority(ctx context.Context, authzToken *security_model.AuthzToken, jobSubmissionInterfaceId string, newPriorityOrder int32) (r bool, err error)
  // Change the priority of a given data movement interface
  // 
  // @param dataMovementInterfaceId
  //   The identifier of the DataMovement Interface to be changed
  // 
  // @param priorityOrder
  //   The new priority of the data movement interface.
  // 
  // @return status
  //   Returns a success/failure of the change.
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - DataMovementInterfaceId
  //  - NewPriorityOrder_
  ChangeDataMovementPriority(ctx context.Context, authzToken *security_model.AuthzToken, dataMovementInterfaceId string, newPriorityOrder int32) (r bool, err error)
  // Change the priorities of a given set of job submission interfaces
  // 
  // @param jobSubmissionPriorityMap
  //   A Map of identifiers of the JobSubmission Interfaces and thier associated priorities to be set.
  // 
  // @return status
  //   Returns a success/failure of the changes.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - JobSubmissionPriorityMap
  ChangeJobSubmissionPriorities(ctx context.Context, authzToken *security_model.AuthzToken, jobSubmissionPriorityMap map[string]int32) (r bool, err error)
  // Change the priorities of a given set of data movement interfaces
  // 
  // @param dataMovementPriorityMap
  //   A Map of identifiers of the DataMovement Interfaces and thier associated priorities to be set.
  // 
  // @return status
  //   Returns a success/failure of the changes.
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - DataMovementPriorityMap
  ChangeDataMovementPriorities(ctx context.Context, authzToken *security_model.AuthzToken, dataMovementPriorityMap map[string]int32) (r bool, err error)
  // Delete a given job submisison interface
  // 
  // @param jobSubmissionInterfaceId
  //   The identifier of the JobSubmission Interface to be changed
  // 
  // @return status
  //   Returns a success/failure of the deletion.
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - ComputeResourceId
  //  - JobSubmissionInterfaceId
  DeleteJobSubmissionInterface(ctx context.Context, authzToken *security_model.AuthzToken, computeResourceId string, jobSubmissionInterfaceId string) (r bool, err error)
  // Delete a given data movement interface
  // 
  // @param dataMovementInterfaceId
  //   The identifier of the DataMovement Interface to be changed
  // 
  // @return status
  //   Returns a success/failure of the deletion.
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - ProductUri
  //  - DataMovementInterfaceId
  //  - DataMoveType
  DeleteDataMovementInterface(ctx context.Context, authzToken *security_model.AuthzToken, productUri string, dataMovementInterfaceId string, dataMoveType data_movement_models.DMType) (r bool, err error)
  // Parameters:
  //  - AuthzToken
  //  - ResourceJobManager
  RegisterResourceJobManager(ctx context.Context, authzToken *security_model.AuthzToken, resourceJobManager *compute_resource_model.ResourceJobManager) (r string, err error)
  // Parameters:
  //  - AuthzToken
  //  - ResourceJobManagerId
  //  - UpdatedResourceJobManager
  UpdateResourceJobManager(ctx context.Context, authzToken *security_model.AuthzToken, resourceJobManagerId string, updatedResourceJobManager *compute_resource_model.ResourceJobManager) (r bool, err error)
  // Parameters:
  //  - AuthzToken
  //  - ResourceJobManagerId
  GetResourceJobManager(ctx context.Context, authzToken *security_model.AuthzToken, resourceJobManagerId string) (r *compute_resource_model.ResourceJobManager, err error)
  // Parameters:
  //  - AuthzToken
  //  - ResourceJobManagerId
  DeleteResourceJobManager(ctx context.Context, authzToken *security_model.AuthzToken, resourceJobManagerId string) (r bool, err error)
  // Delete a Compute Resource Queue
  // 
  // @param computeResourceId
  //   The identifier of the compute resource which has the queue to be deleted
  // 
  // @param queueName
  //   Name of the queue need to be deleted. Name is the uniqueue identifier for the queue within a compute resource
  // 
  // @return status
  //   Returns a success/failure of the deletion.
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - ComputeResourceId
  //  - QueueName
  DeleteBatchQueue(ctx context.Context, authzToken *security_model.AuthzToken, computeResourceId string, queueName string) (r bool, err error)
  // Register a Gateway Resource Profile.
  // 
  // @param gatewayResourceProfile
  //    Gateway Resource Profile Object.
  //    The GatewayID should be obtained from Airavata gateway registration and passed to register a corresponding
  //      resource profile.
  // 
  // @return status
  //   Returns a success/failure of the update.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - GatewayResourceProfile
  RegisterGatewayResourceProfile(ctx context.Context, authzToken *security_model.AuthzToken, gatewayResourceProfile *gateway_resource_profile_model.GatewayResourceProfile) (r string, err error)
  // Fetch the given Gateway Resource Profile.
  // 
  // @param gatewayID
  //   The identifier for the requested gateway resource.
  // 
  // @return gatewayResourceProfile
  //    Gateway Resource Profile Object.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - GatewayID
  GetGatewayResourceProfile(ctx context.Context, authzToken *security_model.AuthzToken, gatewayID string) (r *gateway_resource_profile_model.GatewayResourceProfile, err error)
  // Update a Gateway Resource Profile.
  // 
  // @param gatewayID
  //   The identifier for the requested gateway resource to be updated.
  // 
  // @param gatewayResourceProfile
  //    Gateway Resource Profile Object.
  // 
  // @return status
  //   Returns a success/failure of the update.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - GatewayID
  //  - GatewayResourceProfile
  UpdateGatewayResourceProfile(ctx context.Context, authzToken *security_model.AuthzToken, gatewayID string, gatewayResourceProfile *gateway_resource_profile_model.GatewayResourceProfile) (r bool, err error)
  // Delete the given Gateway Resource Profile.
  // 
  // @param gatewayID
  //   The identifier for the requested gateway resource to be deleted.
  // 
  // @return status
  //   Returns a success/failure of the deletion.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - GatewayID
  DeleteGatewayResourceProfile(ctx context.Context, authzToken *security_model.AuthzToken, gatewayID string) (r bool, err error)
  // Add a Compute Resource Preference to a registered gateway profile.
  // 
  // @param gatewayID
  //   The identifier for the gateway profile to be added.
  // 
  // @param computeResourceId
  //   Preferences related to a particular compute resource
  // 
  // @param computeResourcePreference
  //   The ComputeResourcePreference object to be added to the resource profile.
  // 
  // @return status
  //   Returns a success/failure of the addition. If a profile already exists, this operation will fail.
  //    Instead an update should be used.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - GatewayID
  //  - ComputeResourceId
  //  - ComputeResourcePreference
  AddGatewayComputeResourcePreference(ctx context.Context, authzToken *security_model.AuthzToken, gatewayID string, computeResourceId string, computeResourcePreference *gateway_resource_profile_model.ComputeResourcePreference) (r bool, err error)
  // Add a Storage Resource Preference to a registered gateway profile.
  // 
  // @param gatewayID
  //   The identifier of the gateway profile to be added.
  // 
  // @param storageResourceId
  //   Preferences related to a particular compute resource
  // 
  // @param computeResourcePreference
  //   The ComputeResourcePreference object to be added to the resource profile.
  // 
  // @return status
  //   Returns a success/failure of the addition. If a profile already exists, this operation will fail.
  //    Instead an update should be used.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - GatewayID
  //  - StorageResourceId
  //  - StoragePreference
  AddGatewayStoragePreference(ctx context.Context, authzToken *security_model.AuthzToken, gatewayID string, storageResourceId string, storagePreference *gateway_resource_profile_model.StoragePreference) (r bool, err error)
  // 
  // Fetch a Compute Resource Preference of a registered gateway profile.
  // 
  // @param gatewayID
  //   The identifier for the gateway profile to be requested
  // 
  // @param computeResourceId
  //   Preferences related to a particular compute resource
  // 
  // @return computeResourcePreference
  //   Returns the ComputeResourcePreference object.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - GatewayID
  //  - ComputeResourceId
  GetGatewayComputeResourcePreference(ctx context.Context, authzToken *security_model.AuthzToken, gatewayID string, computeResourceId string) (r *gateway_resource_profile_model.ComputeResourcePreference, err error)
  // 
  // Fetch a Storage Resource Preference of a registered gateway profile.
  // 
  // @param gatewayID
  //   The identifier of the gateway profile to request to fetch the particular storage resource preference.
  // 
  // @param storageResourceId
  //   Identifier of the Stprage Preference required to be fetched.
  // 
  // @return StoragePreference
  //   Returns the StoragePreference object.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - GatewayID
  //  - StorageResourceId
  GetGatewayStoragePreference(ctx context.Context, authzToken *security_model.AuthzToken, gatewayID string, storageResourceId string) (r *gateway_resource_profile_model.StoragePreference, err error)
  // 
  // Fetch all Compute Resource Preferences of a registered gateway profile.
  // 
  // @param gatewayID
  //   The identifier for the gateway profile to be requested
  // 
  // @return computeResourcePreference
  //   Returns the ComputeResourcePreference object.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - GatewayID
  GetAllGatewayComputeResourcePreferences(ctx context.Context, authzToken *security_model.AuthzToken, gatewayID string) (r []*gateway_resource_profile_model.ComputeResourcePreference, err error)
  // Fetch all Storage Resource Preferences of a registered gateway profile.
  // 
  // @param gatewayID
  //   The identifier for the gateway profile to be requested
  // 
  // @return StoragePreference
  //   Returns the StoragePreference object.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - GatewayID
  GetAllGatewayStoragePreferences(ctx context.Context, authzToken *security_model.AuthzToken, gatewayID string) (r []*gateway_resource_profile_model.StoragePreference, err error)
  // 
  // Fetch all Gateway Profiles registered
  // 
  // @return GatewayResourceProfile
  //   Returns all the GatewayResourcePrifle list object.
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  GetAllGatewayResourceProfiles(ctx context.Context, authzToken *security_model.AuthzToken) (r []*gateway_resource_profile_model.GatewayResourceProfile, err error)
  // Update a Compute Resource Preference to a registered gateway profile.
  // 
  // @param gatewayID
  //   The identifier for the gateway profile to be updated.
  // 
  // @param computeResourceId
  //   Preferences related to a particular compute resource
  // 
  // @param computeResourcePreference
  //   The ComputeResourcePreference object to be updated to the resource profile.
  // 
  // @return status
  //   Returns a success/failure of the updation.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - GatewayID
  //  - ComputeResourceId
  //  - ComputeResourcePreference
  UpdateGatewayComputeResourcePreference(ctx context.Context, authzToken *security_model.AuthzToken, gatewayID string, computeResourceId string, computeResourcePreference *gateway_resource_profile_model.ComputeResourcePreference) (r bool, err error)
  // Update a Storage Resource Preference of a registered gateway profile.
  // 
  // @param gatewayID
  //   The identifier of the gateway profile to be updated.
  // 
  // @param storageId
  //   The Storage resource identifier of the one that you want to update
  // 
  // @param storagePreference
  //   The storagePreference object to be updated to the resource profile.
  // 
  // @return status
  //   Returns a success/failure of the updation.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - GatewayID
  //  - StorageId
  //  - StoragePreference
  UpdateGatewayStoragePreference(ctx context.Context, authzToken *security_model.AuthzToken, gatewayID string, storageId string, storagePreference *gateway_resource_profile_model.StoragePreference) (r bool, err error)
  // Delete the Compute Resource Preference of a registered gateway profile.
  // 
  // @param gatewayID
  //   The identifier for the gateway profile to be deleted.
  // 
  // @param computeResourceId
  //   Preferences related to a particular compute resource
  // 
  // @return status
  //   Returns a success/failure of the deletion.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - GatewayID
  //  - ComputeResourceId
  DeleteGatewayComputeResourcePreference(ctx context.Context, authzToken *security_model.AuthzToken, gatewayID string, computeResourceId string) (r bool, err error)
  // Delete the Storage Resource Preference of a registered gateway profile.
  // 
  // @param gatewayID
  //   The identifier of the gateway profile to be deleted.
  // 
  // @param storageId
  //   ID of the storage preference you want to delete.
  // 
  // @return status
  //   Returns a success/failure of the deletion.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - GatewayID
  //  - StorageId
  DeleteGatewayStoragePreference(ctx context.Context, authzToken *security_model.AuthzToken, gatewayID string, storageId string) (r bool, err error)
  // Register User Resource Profile.
  // 
  // @param UserResourceProfile
  //    User Resource Profile Object.
  //    The userId should be obtained from Airavata user profile data model and passed to register a corresponding
  //      resource profile.
  // 
  // @return status
  //   Returns a success/failure of the update.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - UserResourceProfile
  RegisterUserResourceProfile(ctx context.Context, authzToken *security_model.AuthzToken, userResourceProfile *user_resource_profile_model.UserResourceProfile) (r string, err error)
  // Fetch the given User Resource Profile.
  // 
  // @param userId
  //   The identifier for the requested user resource profile.
  // 
  // @param gatewayID
  //   The identifier to link a gateway for the requested user resource profile.
  // 
  // @return UserResourceProfile
  //    User Resource Profile Object.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - UserId
  //  - GatewayID
  GetUserResourceProfile(ctx context.Context, authzToken *security_model.AuthzToken, userId string, gatewayID string) (r *user_resource_profile_model.UserResourceProfile, err error)
  // Update a User Resource Profile.
  // 
  // @param userId
  //   The identifier for the requested user resource to be updated.
  // 
  // @param gatewayID
  //   The identifier to link a gateway for the requested user resource profile.
  // 
  // @param UserResourceProfile
  //    User Resource Profile Object.
  // 
  // @return status
  //   Returns a success/failure of the update.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - UserId
  //  - GatewayID
  //  - UserResourceProfile
  UpdateUserResourceProfile(ctx context.Context, authzToken *security_model.AuthzToken, userId string, gatewayID string, userResourceProfile *user_resource_profile_model.UserResourceProfile) (r bool, err error)
  // Delete the given User Resource Profile.
  // 
  // @param userId
  //   The identifier for the requested user resource to be deleted.
  // 
  // @param gatewayID
  //   The identifier to link a gateway for the requested user resource profile.
  // 
  // @return status
  //   Returns a success/failure of the deletion.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - UserId
  //  - GatewayID
  DeleteUserResourceProfile(ctx context.Context, authzToken *security_model.AuthzToken, userId string, gatewayID string) (r bool, err error)
  // Add a Compute Resource Preference to a registered User profile.
  // 
  // @param userId
  //   The identifier for the User resource profile to be added.
  // 
  // @param gatewayID
  //   The identifier to link a gateway for the requested user resource profile.
  // 
  // @param computeResourceId
  //   Preferences related to a particular compute resource
  // 
  // @param computeResourcePreference
  //   The ComputeResourcePreference object to be added to the resource profile.
  // 
  // @return status
  //   Returns a success/failure of the addition. If a profile already exists, this operation will fail.
  //    Instead an update should be used.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - UserId
  //  - GatewayID
  //  - UserComputeResourceId
  //  - UserComputeResourcePreference
  AddUserComputeResourcePreference(ctx context.Context, authzToken *security_model.AuthzToken, userId string, gatewayID string, userComputeResourceId string, userComputeResourcePreference *user_resource_profile_model.UserComputeResourcePreference) (r bool, err error)
  // Add a Storage Resource Preference to a registered user resource profile.
  // 
  // @param userId
  //   The identifier of the user resource profile to be added.
  // 
  // @param gatewayID
  //   The identifier to link a gateway for the requested user resource profile.
  // 
  // @param storageResourceId
  //   Preferences related to a particular compute resource
  // 
  // @param computeResourcePreference
  //   The ComputeResourcePreference object to be added to the resource profile.
  // 
  // @return status
  //   Returns a success/failure of the addition. If a profile already exists, this operation will fail.
  //    Instead an update should be used.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - UserId
  //  - GatewayID
  //  - UserStorageResourceId
  //  - UserStoragePreference
  AddUserStoragePreference(ctx context.Context, authzToken *security_model.AuthzToken, userId string, gatewayID string, userStorageResourceId string, userStoragePreference *user_resource_profile_model.UserStoragePreference) (r bool, err error)
  // 
  // Fetch a Compute Resource Preference of a registered user resource profile.
  // 
  // @param userId
  //   The identifier for the user profile to be requested
  // 
  // @param gatewayID
  //   The identifier to link a gateway for the requested user resource profile.
  // 
  // @param userComputeResourceId
  //   Preferences related to a particular compute resource
  // 
  // @return computeResourcePreference
  //   Returns the ComputeResourcePreference object.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - UserId
  //  - GatewayID
  //  - UserComputeResourceId
  GetUserComputeResourcePreference(ctx context.Context, authzToken *security_model.AuthzToken, userId string, gatewayID string, userComputeResourceId string) (r *user_resource_profile_model.UserComputeResourcePreference, err error)
  // 
  // Fetch a Storage Resource Preference of a registered user resource profile.
  // 
  // @param userId
  //   The identifier of the user resource profile to request to fetch the particular storage resource preference.
  // 
  // @param gatewayID
  //   The identifier to link a gateway for the requested user resource profile.
  // 
  // @param userStorageResourceId
  //   Identifier of the Stprage Preference required to be fetched.
  // 
  // @return UserStoragePreference
  //   Returns the StoragePreference object.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - UserId
  //  - GatewayID
  //  - UserStorageResourceId
  GetUserStoragePreference(ctx context.Context, authzToken *security_model.AuthzToken, userId string, gatewayID string, userStorageResourceId string) (r *user_resource_profile_model.UserStoragePreference, err error)
  // 
  // Fetch all Compute Resource Preferences of a registered gateway profile.
  // 
  // @param userId
  //   The identifier of the user resource profile to request to fetch the particular storage resource preference.
  // 
  // @param gatewayID
  //   The identifier for the gateway profile to be requested
  // 
  // @return computeResourcePreference
  //   Returns the ComputeResourcePreference object.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - UserId
  //  - GatewayID
  GetAllUserComputeResourcePreferences(ctx context.Context, authzToken *security_model.AuthzToken, userId string, gatewayID string) (r []*user_resource_profile_model.UserComputeResourcePreference, err error)
  // Fetch all User Storage Resource Preferences of a registered user profile.
  // 
  // @param userId
  //   The identifier of the user resource profile to request to fetch the particular storage resource preference.
  // 
  // @param gatewayID
  //   The identifier for the gateway profile to be requested
  // 
  // @return StoragePreference
  //   Returns the StoragePreference object.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - UserId
  //  - GatewayID
  GetAllUserStoragePreferences(ctx context.Context, authzToken *security_model.AuthzToken, userId string, gatewayID string) (r []*user_resource_profile_model.UserStoragePreference, err error)
  // 
  // Fetch all user resources Profiles registered
  // 
  // @return UserResourceProfile
  //   Returns all the UserResourcePrifle list object.
  // 
  // 
  // 
  // Parameters:
  //  - AuthzToken
  GetAllUserResourceProfiles(ctx context.Context, authzToken *security_model.AuthzToken) (r []*user_resource_profile_model.UserResourceProfile, err error)
  // Update a Compute Resource Preference to a registered user resource profile.
  // 
  // @param userId
  //   The identifier for the user profile to be updated.
  // 
  // @param gatewayID
  //   The identifier to link a gateway for the requested user resource profile.
  // 
  // @param userComputeResourceId
  //   Preferences related to a particular compute resource
  // 
  // @param userComputeResourcePreference
  //   The ComputeResourcePreference object to be updated to the resource profile.
  // 
  // @return status
  //   Returns a success/failure of the updation.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - UserId
  //  - GatewayID
  //  - UserComputeResourceId
  //  - UserComputeResourcePreference
  UpdateUserComputeResourcePreference(ctx context.Context, authzToken *security_model.AuthzToken, userId string, gatewayID string, userComputeResourceId string, userComputeResourcePreference *user_resource_profile_model.UserComputeResourcePreference) (r bool, err error)
  // Update a Storage Resource Preference of a registered user resource profile.
  // 
  // @param userId
  //   The identifier of the user resource profile to be updated.
  // 
  // @param gatewayID
  //   The identifier to link a gateway for the requested user resource profile.
  // 
  // @param userStorageId
  //   The Storage resource identifier of the one that you want to update
  // 
  // @param userStoragePreference
  //   The storagePreference object to be updated to the resource profile.
  // 
  // @return status
  //   Returns a success/failure of the updation.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - UserId
  //  - GatewayID
  //  - UserStorageId
  //  - UserStoragePreference
  UpdateUserStoragePreference(ctx context.Context, authzToken *security_model.AuthzToken, userId string, gatewayID string, userStorageId string, userStoragePreference *user_resource_profile_model.UserStoragePreference) (r bool, err error)
  // Delete the Compute Resource Preference of a registered user resource profile.
  // 
  // @param userId
  //   The identifier for the user resource profile to be deleted.
  // 
  // @param gatewayID
  //   The identifier to link a gateway for the requested user resource profile.
  // 
  // @param userComputeResourceId
  //   Preferences related to a particular compute resource
  // 
  // @return status
  //   Returns a success/failure of the deletion.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - UserId
  //  - GatewayID
  //  - UserComputeResourceId
  DeleteUserComputeResourcePreference(ctx context.Context, authzToken *security_model.AuthzToken, userId string, gatewayID string, userComputeResourceId string) (r bool, err error)
  // Delete the Storage Resource Preference of a registered user resource profile.
  // 
  // @param userId
  //   The identifier of the user profile to be deleted.
  // 
  // @param gatewayID
  //   The identifier to link a gateway for the requested user resource profile.
  // 
  // @param userStorageId
  //   ID of the storage preference you want to delete.
  // 
  // @return status
  //   Returns a success/failure of the deletion.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - UserId
  //  - GatewayID
  //  - UserStorageId
  DeleteUserStoragePreference(ctx context.Context, authzToken *security_model.AuthzToken, userId string, gatewayID string, userStorageId string) (r bool, err error)
  // Parameters:
  //  - AuthzToken
  //  - GatewayId
  GetAllWorkflows(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string) (r []string, err error)
  // Parameters:
  //  - AuthzToken
  GetLatestQueueStatuses(ctx context.Context, authzToken *security_model.AuthzToken) (r []*status_models.QueueStatusModel, err error)
  // 
  // API Methods Related for Work-Flow Submission Features.
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - WorkflowTemplateId
  GetWorkflow(ctx context.Context, authzToken *security_model.AuthzToken, workflowTemplateId string) (r *workflow_data_model.WorkflowModel, err error)
  // Parameters:
  //  - AuthzToken
  //  - WorkflowTemplateId
  DeleteWorkflow(ctx context.Context, authzToken *security_model.AuthzToken, workflowTemplateId string) (err error)
  // Parameters:
  //  - AuthzToken
  //  - GatewayId
  //  - Workflow
  RegisterWorkflow(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string, workflow *workflow_data_model.WorkflowModel) (r string, err error)
  // Parameters:
  //  - AuthzToken
  //  - WorkflowTemplateId
  //  - Workflow
  UpdateWorkflow(ctx context.Context, authzToken *security_model.AuthzToken, workflowTemplateId string, workflow *workflow_data_model.WorkflowModel) (err error)
  // Parameters:
  //  - AuthzToken
  //  - WorkflowName
  GetWorkflowTemplateId(ctx context.Context, authzToken *security_model.AuthzToken, workflowName string) (r string, err error)
  // Parameters:
  //  - AuthzToken
  //  - WorkflowName
  IsWorkflowExistWithName(ctx context.Context, authzToken *security_model.AuthzToken, workflowName string) (r bool, err error)
  // API Methods related to replica catalog
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - DataProductModel
  RegisterDataProduct(ctx context.Context, authzToken *security_model.AuthzToken, dataProductModel *replica_catalog_models.DataProductModel) (r string, err error)
  // Parameters:
  //  - AuthzToken
  //  - DataProductUri
  GetDataProduct(ctx context.Context, authzToken *security_model.AuthzToken, dataProductUri string) (r *replica_catalog_models.DataProductModel, err error)
  // Parameters:
  //  - AuthzToken
  //  - ReplicaLocationModel
  RegisterReplicaLocation(ctx context.Context, authzToken *security_model.AuthzToken, replicaLocationModel *replica_catalog_models.DataReplicaLocationModel) (r string, err error)
  // Parameters:
  //  - AuthzToken
  //  - ProductUri
  GetParentDataProduct(ctx context.Context, authzToken *security_model.AuthzToken, productUri string) (r *replica_catalog_models.DataProductModel, err error)
  // Parameters:
  //  - AuthzToken
  //  - ProductUri
  GetChildDataProducts(ctx context.Context, authzToken *security_model.AuthzToken, productUri string) (r []*replica_catalog_models.DataProductModel, err error)
  // Group Manager and Data Sharing Related API methods
  // 
  // 
  // Parameters:
  //  - AuthzToken
  //  - ResourceId
  //  - ResourceType
  //  - UserPermissionList
  ShareResourceWithUsers(ctx context.Context, authzToken *security_model.AuthzToken, resourceId string, resourceType group_manager_model.ResourceType, userPermissionList map[string]group_manager_model.ResourcePermissionType) (r bool, err error)
  // Parameters:
  //  - AuthzToken
  //  - ResourceId
  //  - ResourceType
  //  - UserPermissionList
  RevokeSharingOfResourceFromUsers(ctx context.Context, authzToken *security_model.AuthzToken, resourceId string, resourceType group_manager_model.ResourceType, userPermissionList map[string]group_manager_model.ResourcePermissionType) (r bool, err error)
  // Parameters:
  //  - AuthzToken
  //  - ResourceId
  //  - ResourceType
  //  - PermissionType
  GetAllAccessibleUsers(ctx context.Context, authzToken *security_model.AuthzToken, resourceId string, resourceType group_manager_model.ResourceType, permissionType group_manager_model.ResourcePermissionType) (r []string, err error)
  // Parameters:
  //  - AuthzToken
  //  - GroupModel
  CreateGroup(ctx context.Context, authzToken *security_model.AuthzToken, groupModel *group_manager_model.GroupModel) (r string, err error)
  // Parameters:
  //  - AuthzToken
  //  - GroupModel
  UpdateGroup(ctx context.Context, authzToken *security_model.AuthzToken, groupModel *group_manager_model.GroupModel) (r bool, err error)
  // Parameters:
  //  - AuthzToken
  //  - GroupId
  //  - OwnerId
  DeleteGroup(ctx context.Context, authzToken *security_model.AuthzToken, groupId string, ownerId string) (r bool, err error)
  // Parameters:
  //  - AuthzToken
  //  - GroupId
  GetGroup(ctx context.Context, authzToken *security_model.AuthzToken, groupId string) (r *group_manager_model.GroupModel, err error)
  // Parameters:
  //  - AuthzToken
  //  - UserName
  GetAllGroupsUserBelongs(ctx context.Context, authzToken *security_model.AuthzToken, userName string) (r []*group_manager_model.GroupModel, err error)
}

type AiravataClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewAiravataClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *AiravataClient {
  return &AiravataClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewAiravataClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *AiravataClient {
  return &AiravataClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Fetch Apache Airavata API version
// 
// 
// Parameters:
//  - AuthzToken
func (p *AiravataClient) GetAPIVersion(ctx context.Context, authzToken *security_model.AuthzToken) (r string, err error) {
  if err = p.sendGetAPIVersion(authzToken); err != nil { return }
  return p.recvGetAPIVersion()
}

func (p *AiravataClient) sendGetAPIVersion(authzToken *security_model.AuthzToken)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getAPIVersion", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetAPIVersionArgs{
  AuthzToken : authzToken,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetAPIVersion() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getAPIVersion" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getAPIVersion failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getAPIVersion failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error1 error
    error1, err = error0.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getAPIVersion failed: invalid message type")
    return
  }
  result := AiravataGetAPIVersionResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Verify if User Exists within Airavata.
// 
// @param gatewayId
// 
//  @param userName
// 
// @return true/false
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - GatewayId
//  - UserName
func (p *AiravataClient) IsUserExists(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string, userName string) (r bool, err error) {
  if err = p.sendIsUserExists(authzToken, gatewayId, userName); err != nil { return }
  return p.recvIsUserExists()
}

func (p *AiravataClient) sendIsUserExists(authzToken *security_model.AuthzToken, gatewayId string, userName string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("isUserExists", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataIsUserExistsArgs{
  AuthzToken : authzToken,
  GatewayId : gatewayId,
  UserName : userName,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvIsUserExists() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "isUserExists" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "isUserExists failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "isUserExists failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error3 error
    error3, err = error2.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error3
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "isUserExists failed: invalid message type")
    return
  }
  result := AiravataIsUserExistsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Register a Gateway with Airavata.
// 
// @param gateway
//    The gateway data model.
// 
// @return gatewayId
//   Th unique identifier of the  newly registered gateway.
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - Gateway
func (p *AiravataClient) AddGateway(ctx context.Context, authzToken *security_model.AuthzToken, gateway *workspace_model.Gateway) (r string, err error) {
  if err = p.sendAddGateway(authzToken, gateway); err != nil { return }
  return p.recvAddGateway()
}

func (p *AiravataClient) sendAddGateway(authzToken *security_model.AuthzToken, gateway *workspace_model.Gateway)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("addGateway", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataAddGatewayArgs{
  AuthzToken : authzToken,
  Gateway : gateway,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvAddGateway() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "addGateway" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "addGateway failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "addGateway failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error5 error
    error5, err = error4.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error5
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addGateway failed: invalid message type")
    return
  }
  result := AiravataAddGatewayResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Get all users in the gateway
// 
// @param gatewayId
//    The gateway data model.
// 
// @return users
//   list of usernames of the users in the gateway
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - GatewayId
func (p *AiravataClient) GetAllUsersInGateway(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string) (r []string, err error) {
  if err = p.sendGetAllUsersInGateway(authzToken, gatewayId); err != nil { return }
  return p.recvGetAllUsersInGateway()
}

func (p *AiravataClient) sendGetAllUsersInGateway(authzToken *security_model.AuthzToken, gatewayId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getAllUsersInGateway", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetAllUsersInGatewayArgs{
  AuthzToken : authzToken,
  GatewayId : gatewayId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetAllUsersInGateway() (value []string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getAllUsersInGateway" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getAllUsersInGateway failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getAllUsersInGateway failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error7 error
    error7, err = error6.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error7
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getAllUsersInGateway failed: invalid message type")
    return
  }
  result := AiravataGetAllUsersInGatewayResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Update previously registered Gateway metadata.
// 
// @param gatewayId
//    The gateway Id of the Gateway which require an update.
// 
// @return gateway
//    Modified gateway obejct.
// 
// @exception AiravataClientException
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - GatewayId
//  - UpdatedGateway
func (p *AiravataClient) UpdateGateway(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string, updatedGateway *workspace_model.Gateway) (r bool, err error) {
  if err = p.sendUpdateGateway(authzToken, gatewayId, updatedGateway); err != nil { return }
  return p.recvUpdateGateway()
}

func (p *AiravataClient) sendUpdateGateway(authzToken *security_model.AuthzToken, gatewayId string, updatedGateway *workspace_model.Gateway)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateGateway", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataUpdateGatewayArgs{
  AuthzToken : authzToken,
  GatewayId : gatewayId,
  UpdatedGateway : updatedGateway,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvUpdateGateway() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateGateway" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateGateway failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateGateway failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error9 error
    error9, err = error8.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error9
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateGateway failed: invalid message type")
    return
  }
  result := AiravataUpdateGatewayResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Get Gateway details by providing gatewayId
// 
// @param gatewayId
//    The gateway Id of the Gateway.
// 
// @return gateway
//    Gateway obejct.
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - GatewayId
func (p *AiravataClient) GetGateway(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string) (r *workspace_model.Gateway, err error) {
  if err = p.sendGetGateway(authzToken, gatewayId); err != nil { return }
  return p.recvGetGateway()
}

func (p *AiravataClient) sendGetGateway(authzToken *security_model.AuthzToken, gatewayId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getGateway", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetGatewayArgs{
  AuthzToken : authzToken,
  GatewayId : gatewayId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetGateway() (value *workspace_model.Gateway, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getGateway" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getGateway failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getGateway failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error11 error
    error11, err = error10.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error11
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getGateway failed: invalid message type")
    return
  }
  result := AiravataGetGatewayResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Delete a Gateway
// 
// @param gatewayId
//    The gateway Id of the Gateway to be deleted.
// 
// @return boolean
//    Boolean identifier for the success or failure of the deletion operation.
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - GatewayId
func (p *AiravataClient) DeleteGateway(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string) (r bool, err error) {
  if err = p.sendDeleteGateway(authzToken, gatewayId); err != nil { return }
  return p.recvDeleteGateway()
}

func (p *AiravataClient) sendDeleteGateway(authzToken *security_model.AuthzToken, gatewayId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteGateway", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataDeleteGatewayArgs{
  AuthzToken : authzToken,
  GatewayId : gatewayId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvDeleteGateway() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteGateway" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteGateway failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteGateway failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error12 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error13 error
    error13, err = error12.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error13
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteGateway failed: invalid message type")
    return
  }
  result := AiravataDeleteGatewayResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Get All the Gateways Connected to Airavata.
// 
// 
// Parameters:
//  - AuthzToken
func (p *AiravataClient) GetAllGateways(ctx context.Context, authzToken *security_model.AuthzToken) (r []*workspace_model.Gateway, err error) {
  if err = p.sendGetAllGateways(authzToken); err != nil { return }
  return p.recvGetAllGateways()
}

func (p *AiravataClient) sendGetAllGateways(authzToken *security_model.AuthzToken)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getAllGateways", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetAllGatewaysArgs{
  AuthzToken : authzToken,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetAllGateways() (value []*workspace_model.Gateway, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getAllGateways" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getAllGateways failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getAllGateways failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error14 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error15 error
    error15, err = error14.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error15
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getAllGateways failed: invalid message type")
    return
  }
  result := AiravataGetAllGatewaysResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Check for the Existance of a Gateway within Airavata
// 
// @param gatewayId
//   Provide the gatewayId of the gateway you want to check the existancy
// 
// @return boolean
//   Boolean idetifier for the existance or non-existane of the gatewayId
// 
// @return gatewayId
//   return the gatewayId of the existing gateway.
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - GatewayId
func (p *AiravataClient) IsGatewayExist(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string) (r bool, err error) {
  if err = p.sendIsGatewayExist(authzToken, gatewayId); err != nil { return }
  return p.recvIsGatewayExist()
}

func (p *AiravataClient) sendIsGatewayExist(authzToken *security_model.AuthzToken, gatewayId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("isGatewayExist", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataIsGatewayExistArgs{
  AuthzToken : authzToken,
  GatewayId : gatewayId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvIsGatewayExist() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "isGatewayExist" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "isGatewayExist failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "isGatewayExist failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error16 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error17 error
    error17, err = error16.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error17
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "isGatewayExist failed: invalid message type")
    return
  }
  result := AiravataIsGatewayExistResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

//   * API methods to retrieve notifications
// *
// 
// Parameters:
//  - AuthzToken
//  - Notification
func (p *AiravataClient) CreateNotification(ctx context.Context, authzToken *security_model.AuthzToken, notification *workspace_model.Notification) (r string, err error) {
  if err = p.sendCreateNotification(authzToken, notification); err != nil { return }
  return p.recvCreateNotification()
}

func (p *AiravataClient) sendCreateNotification(authzToken *security_model.AuthzToken, notification *workspace_model.Notification)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createNotification", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataCreateNotificationArgs{
  AuthzToken : authzToken,
  Notification : notification,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvCreateNotification() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createNotification" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createNotification failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createNotification failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error18 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error19 error
    error19, err = error18.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error19
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createNotification failed: invalid message type")
    return
  }
  result := AiravataCreateNotificationResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - AuthzToken
//  - Notification
func (p *AiravataClient) UpdateNotification(ctx context.Context, authzToken *security_model.AuthzToken, notification *workspace_model.Notification) (r bool, err error) {
  if err = p.sendUpdateNotification(authzToken, notification); err != nil { return }
  return p.recvUpdateNotification()
}

func (p *AiravataClient) sendUpdateNotification(authzToken *security_model.AuthzToken, notification *workspace_model.Notification)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateNotification", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataUpdateNotificationArgs{
  AuthzToken : authzToken,
  Notification : notification,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvUpdateNotification() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateNotification" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateNotification failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateNotification failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error20 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error21 error
    error21, err = error20.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error21
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateNotification failed: invalid message type")
    return
  }
  result := AiravataUpdateNotificationResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - AuthzToken
//  - GatewayId
//  - NotificationId
func (p *AiravataClient) DeleteNotification(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string, notificationId string) (r bool, err error) {
  if err = p.sendDeleteNotification(authzToken, gatewayId, notificationId); err != nil { return }
  return p.recvDeleteNotification()
}

func (p *AiravataClient) sendDeleteNotification(authzToken *security_model.AuthzToken, gatewayId string, notificationId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteNotification", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataDeleteNotificationArgs{
  AuthzToken : authzToken,
  GatewayId : gatewayId,
  NotificationId : notificationId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvDeleteNotification() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteNotification" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteNotification failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteNotification failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error22 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error23 error
    error23, err = error22.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error23
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteNotification failed: invalid message type")
    return
  }
  result := AiravataDeleteNotificationResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - AuthzToken
//  - GatewayId
//  - NotificationId
func (p *AiravataClient) GetNotification(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string, notificationId string) (r *workspace_model.Notification, err error) {
  if err = p.sendGetNotification(authzToken, gatewayId, notificationId); err != nil { return }
  return p.recvGetNotification()
}

func (p *AiravataClient) sendGetNotification(authzToken *security_model.AuthzToken, gatewayId string, notificationId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getNotification", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetNotificationArgs{
  AuthzToken : authzToken,
  GatewayId : gatewayId,
  NotificationId : notificationId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetNotification() (value *workspace_model.Notification, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getNotification" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getNotification failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getNotification failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error24 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error25 error
    error25, err = error24.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error25
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getNotification failed: invalid message type")
    return
  }
  result := AiravataGetNotificationResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - AuthzToken
//  - GatewayId
func (p *AiravataClient) GetAllNotifications(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string) (r []*workspace_model.Notification, err error) {
  if err = p.sendGetAllNotifications(authzToken, gatewayId); err != nil { return }
  return p.recvGetAllNotifications()
}

func (p *AiravataClient) sendGetAllNotifications(authzToken *security_model.AuthzToken, gatewayId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getAllNotifications", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetAllNotificationsArgs{
  AuthzToken : authzToken,
  GatewayId : gatewayId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetAllNotifications() (value []*workspace_model.Notification, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getAllNotifications" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getAllNotifications failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getAllNotifications failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error26 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error27 error
    error27, err = error26.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error27
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getAllNotifications failed: invalid message type")
    return
  }
  result := AiravataGetAllNotificationsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Generate and Register SSH Key Pair with Airavata Credential Store.
// 
// @param gatewayId
//    The identifier for the requested Gateway.
// 
// @param userName
//    The User for which the credential should be registered. For community accounts, this user is the name of the
//    community user name. For computational resources, this user name need not be the same user name on resoruces.
// 
// @param description
//    The description field for a credential type, all type of credential can have a description.
// 
// @param credentialOwnerType
//    The type of owner of this credential. Two possible values: GATEWAY (default) and USER
// 
// @return airavataCredStoreToken
//   An SSH Key pair is generated and stored in the credential store and associated with users or community account
//   belonging to a Gateway.
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - GatewayId
//  - UserName
//  - Description
//  - CredentialOwnerType
func (p *AiravataClient) GenerateAndRegisterSSHKeys(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string, userName string, description string, credentialOwnerType credential_store_data_models.CredentialOwnerType) (r string, err error) {
  if err = p.sendGenerateAndRegisterSSHKeys(authzToken, gatewayId, userName, description, credentialOwnerType); err != nil { return }
  return p.recvGenerateAndRegisterSSHKeys()
}

func (p *AiravataClient) sendGenerateAndRegisterSSHKeys(authzToken *security_model.AuthzToken, gatewayId string, userName string, description string, credentialOwnerType credential_store_data_models.CredentialOwnerType)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("generateAndRegisterSSHKeys", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGenerateAndRegisterSSHKeysArgs{
  AuthzToken : authzToken,
  GatewayId : gatewayId,
  UserName : userName,
  Description : description,
  CredentialOwnerType : credentialOwnerType,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGenerateAndRegisterSSHKeys() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "generateAndRegisterSSHKeys" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "generateAndRegisterSSHKeys failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "generateAndRegisterSSHKeys failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error28 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error29 error
    error29, err = error28.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error29
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "generateAndRegisterSSHKeys failed: invalid message type")
    return
  }
  result := AiravataGenerateAndRegisterSSHKeysResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  }
  value = result.GetSuccess()
  return
}

// Generate and Register Username PWD Pair with Airavata Credential Store.
// 
// @param gatewayId
//    The identifier for the requested Gateway.
// 
// @param portalUserName
//    The User for which the credential should be registered. For community accounts, this user is the name of the
//    community user name. For computational resources, this user name need not be the same user name on resoruces.
// 
// @param loginUserName
// 
// @param password
// 
// @return airavataCredStoreToken
//   An SSH Key pair is generated and stored in the credential store and associated with users or community account
//   belonging to a Gateway.
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - GatewayId
//  - PortalUserName
//  - LoginUserName
//  - Password
//  - Description
func (p *AiravataClient) RegisterPwdCredential(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string, portalUserName string, loginUserName string, password string, description string) (r string, err error) {
  if err = p.sendRegisterPwdCredential(authzToken, gatewayId, portalUserName, loginUserName, password, description); err != nil { return }
  return p.recvRegisterPwdCredential()
}

func (p *AiravataClient) sendRegisterPwdCredential(authzToken *security_model.AuthzToken, gatewayId string, portalUserName string, loginUserName string, password string, description string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("registerPwdCredential", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataRegisterPwdCredentialArgs{
  AuthzToken : authzToken,
  GatewayId : gatewayId,
  PortalUserName : portalUserName,
  LoginUserName : loginUserName,
  Password : password,
  Description : description,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvRegisterPwdCredential() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "registerPwdCredential" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "registerPwdCredential failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "registerPwdCredential failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error30 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error31 error
    error31, err = error30.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error31
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "registerPwdCredential failed: invalid message type")
    return
  }
  result := AiravataRegisterPwdCredentialResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  }
  value = result.GetSuccess()
  return
}

// Get a Public Key by Providing the Token
// 
// @param CredStoreToken
//    Credential Store Token which you want to find the Public Key for.
// 
// @param gatewayId
//    This is the unique identifier of your gateway where the token and public key was generated from.
// 
// @return publicKey
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - AiravataCredStoreToken
//  - GatewayId
func (p *AiravataClient) GetSSHPubKey(ctx context.Context, authzToken *security_model.AuthzToken, airavataCredStoreToken string, gatewayId string) (r string, err error) {
  if err = p.sendGetSSHPubKey(authzToken, airavataCredStoreToken, gatewayId); err != nil { return }
  return p.recvGetSSHPubKey()
}

func (p *AiravataClient) sendGetSSHPubKey(authzToken *security_model.AuthzToken, airavataCredStoreToken string, gatewayId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getSSHPubKey", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetSSHPubKeyArgs{
  AuthzToken : authzToken,
  AiravataCredStoreToken : airavataCredStoreToken,
  GatewayId : gatewayId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetSSHPubKey() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getSSHPubKey" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getSSHPubKey failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getSSHPubKey failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error32 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error33 error
    error33, err = error32.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error33
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getSSHPubKey failed: invalid message type")
    return
  }
  result := AiravataGetSSHPubKeyResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Get all Public Keys of the Gateway
// 
// @param CredStoreToken
//    Credential Store Token which you want to find the Public Key for.
// 
// @param gatewayId
//    This is the unique identifier of your gateway where the token and public key was generated from.
// 
// @return publicKey
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - GatewayId
func (p *AiravataClient) GetAllGatewaySSHPubKeys(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string) (r map[string]string, err error) {
  if err = p.sendGetAllGatewaySSHPubKeys(authzToken, gatewayId); err != nil { return }
  return p.recvGetAllGatewaySSHPubKeys()
}

func (p *AiravataClient) sendGetAllGatewaySSHPubKeys(authzToken *security_model.AuthzToken, gatewayId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getAllGatewaySSHPubKeys", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetAllGatewaySSHPubKeysArgs{
  AuthzToken : authzToken,
  GatewayId : gatewayId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetAllGatewaySSHPubKeys() (value map[string]string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getAllGatewaySSHPubKeys" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getAllGatewaySSHPubKeys failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getAllGatewaySSHPubKeys failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error34 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error35 error
    error35, err = error34.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error35
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getAllGatewaySSHPubKeys failed: invalid message type")
    return
  }
  result := AiravataGetAllGatewaySSHPubKeysResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Get all Credential summaries for the Gateway
// 
// @param CredStoreToken
//    Credential Store Token which you want to find the Public Key for.
// 
// @param credential_store_data_models.SummaryType
//    Summary type : SSH,PASSWD or CERT
// 
// @param gatewayId
//    This is the unique identifier of your gateway where the token and public key was generated from.
// 
// @return List of Credential Summary Objects
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - Type
//  - GatewayId
func (p *AiravataClient) GetAllCredentialSummaryForGateway(ctx context.Context, authzToken *security_model.AuthzToken, type_a1 credential_store_data_models.SummaryType, gatewayId string) (r []*credential_store_data_models.CredentialSummary, err error) {
  if err = p.sendGetAllCredentialSummaryForGateway(authzToken, type_a1, gatewayId); err != nil { return }
  return p.recvGetAllCredentialSummaryForGateway()
}

func (p *AiravataClient) sendGetAllCredentialSummaryForGateway(authzToken *security_model.AuthzToken, type_a1 credential_store_data_models.SummaryType, gatewayId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getAllCredentialSummaryForGateway", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetAllCredentialSummaryForGatewayArgs{
  AuthzToken : authzToken,
  Type : type_a1,
  GatewayId : gatewayId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetAllCredentialSummaryForGateway() (value []*credential_store_data_models.CredentialSummary, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getAllCredentialSummaryForGateway" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getAllCredentialSummaryForGateway failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getAllCredentialSummaryForGateway failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error36 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error37 error
    error37, err = error36.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error37
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getAllCredentialSummaryForGateway failed: invalid message type")
    return
  }
  result := AiravataGetAllCredentialSummaryForGatewayResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Get all Credential summaries for user in a Gateway
// 
// @param CredStoreToken
//    Credential Store Token which you want to find the Public Key for.
// 
// @param credential_store_data_models.SummaryType
//    Summary type : SSH,PASSWD or CERT
// 
// @param gatewayId
//    This is the unique identifier of your gateway where the token and public key was generated from.
// 
// @param userId
//    This is the unique identifier of user whose public keys are to be fetched.
// 
// @return CredentialSummary
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - Type
//  - GatewayId
//  - UserId
func (p *AiravataClient) GetAllCredentialSummaryForUsersInGateway(ctx context.Context, authzToken *security_model.AuthzToken, type_a1 credential_store_data_models.SummaryType, gatewayId string, userId string) (r []*credential_store_data_models.CredentialSummary, err error) {
  if err = p.sendGetAllCredentialSummaryForUsersInGateway(authzToken, type_a1, gatewayId, userId); err != nil { return }
  return p.recvGetAllCredentialSummaryForUsersInGateway()
}

func (p *AiravataClient) sendGetAllCredentialSummaryForUsersInGateway(authzToken *security_model.AuthzToken, type_a1 credential_store_data_models.SummaryType, gatewayId string, userId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getAllCredentialSummaryForUsersInGateway", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetAllCredentialSummaryForUsersInGatewayArgs{
  AuthzToken : authzToken,
  Type : type_a1,
  GatewayId : gatewayId,
  UserId : userId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetAllCredentialSummaryForUsersInGateway() (value []*credential_store_data_models.CredentialSummary, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getAllCredentialSummaryForUsersInGateway" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getAllCredentialSummaryForUsersInGateway failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getAllCredentialSummaryForUsersInGateway failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error38 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error39 error
    error39, err = error38.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error39
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getAllCredentialSummaryForUsersInGateway failed: invalid message type")
    return
  }
  result := AiravataGetAllCredentialSummaryForUsersInGatewayResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - AuthzToken
//  - GatewayId
func (p *AiravataClient) GetAllGatewayPWDCredentials(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string) (r map[string]string, err error) {
  if err = p.sendGetAllGatewayPWDCredentials(authzToken, gatewayId); err != nil { return }
  return p.recvGetAllGatewayPWDCredentials()
}

func (p *AiravataClient) sendGetAllGatewayPWDCredentials(authzToken *security_model.AuthzToken, gatewayId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getAllGatewayPWDCredentials", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetAllGatewayPWDCredentialsArgs{
  AuthzToken : authzToken,
  GatewayId : gatewayId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetAllGatewayPWDCredentials() (value map[string]string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getAllGatewayPWDCredentials" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getAllGatewayPWDCredentials failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getAllGatewayPWDCredentials failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error40 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error41 error
    error41, err = error40.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error41
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getAllGatewayPWDCredentials failed: invalid message type")
    return
  }
  result := AiravataGetAllGatewayPWDCredentialsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Delete a Gateway
// 
// @param gatewayId
//    The gateway Id of the Gateway to be deleted.
// 
// @return boolean
//    Boolean identifier for the success or failure of the deletion operation.
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - AiravataCredStoreToken
//  - GatewayId
func (p *AiravataClient) DeleteSSHPubKey(ctx context.Context, authzToken *security_model.AuthzToken, airavataCredStoreToken string, gatewayId string) (r bool, err error) {
  if err = p.sendDeleteSSHPubKey(authzToken, airavataCredStoreToken, gatewayId); err != nil { return }
  return p.recvDeleteSSHPubKey()
}

func (p *AiravataClient) sendDeleteSSHPubKey(authzToken *security_model.AuthzToken, airavataCredStoreToken string, gatewayId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteSSHPubKey", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataDeleteSSHPubKeyArgs{
  AuthzToken : authzToken,
  AiravataCredStoreToken : airavataCredStoreToken,
  GatewayId : gatewayId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvDeleteSSHPubKey() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteSSHPubKey" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteSSHPubKey failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteSSHPubKey failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error42 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error43 error
    error43, err = error42.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error43
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteSSHPubKey failed: invalid message type")
    return
  }
  result := AiravataDeleteSSHPubKeyResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - AuthzToken
//  - AiravataCredStoreToken
//  - GatewayId
func (p *AiravataClient) DeletePWDCredential(ctx context.Context, authzToken *security_model.AuthzToken, airavataCredStoreToken string, gatewayId string) (r bool, err error) {
  if err = p.sendDeletePWDCredential(authzToken, airavataCredStoreToken, gatewayId); err != nil { return }
  return p.recvDeletePWDCredential()
}

func (p *AiravataClient) sendDeletePWDCredential(authzToken *security_model.AuthzToken, airavataCredStoreToken string, gatewayId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deletePWDCredential", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataDeletePWDCredentialArgs{
  AuthzToken : authzToken,
  AiravataCredStoreToken : airavataCredStoreToken,
  GatewayId : gatewayId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvDeletePWDCredential() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deletePWDCredential" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deletePWDCredential failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deletePWDCredential failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error44 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error45 error
    error45, err = error44.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error45
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deletePWDCredential failed: invalid message type")
    return
  }
  result := AiravataDeletePWDCredentialResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Creates a Project with basic metadata.
//    A Project is a container of experiments.
// 
// @param gatewayId
//    The identifier for the requested gateway.
// 
// @param Project
//    The Project Object described in the workspace_model.
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - GatewayId
//  - Project
func (p *AiravataClient) CreateProject(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string, project *workspace_model.Project) (r string, err error) {
  if err = p.sendCreateProject(authzToken, gatewayId, project); err != nil { return }
  return p.recvCreateProject()
}

func (p *AiravataClient) sendCreateProject(authzToken *security_model.AuthzToken, gatewayId string, project *workspace_model.Project)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createProject", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataCreateProjectArgs{
  AuthzToken : authzToken,
  GatewayId : gatewayId,
  Project : project,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvCreateProject() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createProject" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createProject failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createProject failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error46 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error47 error
    error47, err = error46.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error47
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createProject failed: invalid message type")
    return
  }
  result := AiravataCreateProjectResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Update an Existing Project
// 
// @param projectId
//    The projectId of the project needed an update.
// 
// @return void
//    Currently this does not return any value.
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - ProjectId
//  - UpdatedProject
func (p *AiravataClient) UpdateProject(ctx context.Context, authzToken *security_model.AuthzToken, projectId string, updatedProject *workspace_model.Project) (err error) {
  if err = p.sendUpdateProject(authzToken, projectId, updatedProject); err != nil { return }
  return p.recvUpdateProject()
}

func (p *AiravataClient) sendUpdateProject(authzToken *security_model.AuthzToken, projectId string, updatedProject *workspace_model.Project)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateProject", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataUpdateProjectArgs{
  AuthzToken : authzToken,
  ProjectId : projectId,
  UpdatedProject : updatedProject,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvUpdateProject() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateProject" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateProject failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateProject failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error48 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error49 error
    error49, err = error48.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error49
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateProject failed: invalid message type")
    return
  }
  result := AiravataUpdateProjectResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Pnfe != nil {
    err = result.Pnfe
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  return
}

// 
// Get a Project by ID
//    This method is to obtain a project by providing a projectId.
// 
// @param projectId
//    projectId of the project you require.
// 
// @return project
//    project data model will be returned.
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - ProjectId
func (p *AiravataClient) GetProject(ctx context.Context, authzToken *security_model.AuthzToken, projectId string) (r *workspace_model.Project, err error) {
  if err = p.sendGetProject(authzToken, projectId); err != nil { return }
  return p.recvGetProject()
}

func (p *AiravataClient) sendGetProject(authzToken *security_model.AuthzToken, projectId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getProject", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetProjectArgs{
  AuthzToken : authzToken,
  ProjectId : projectId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetProject() (value *workspace_model.Project, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getProject" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getProject failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getProject failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error50 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error51 error
    error51, err = error50.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error51
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getProject failed: invalid message type")
    return
  }
  result := AiravataGetProjectResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Pnfe != nil {
    err = result.Pnfe
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Delete a Project
//    This method is used to delete an existing Project.
// 
// @param projectId
//    projectId of the project you want to delete.
// 
// @return boolean
//    Boolean identifier for the success or failure of the deletion operation.
// 
//    NOTE: This method is not used within gateways connected with Airavata.
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - ProjectId
func (p *AiravataClient) DeleteProject(ctx context.Context, authzToken *security_model.AuthzToken, projectId string) (r bool, err error) {
  if err = p.sendDeleteProject(authzToken, projectId); err != nil { return }
  return p.recvDeleteProject()
}

func (p *AiravataClient) sendDeleteProject(authzToken *security_model.AuthzToken, projectId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteProject", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataDeleteProjectArgs{
  AuthzToken : authzToken,
  ProjectId : projectId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvDeleteProject() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteProject" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteProject failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteProject failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error52 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error53 error
    error53, err = error52.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error53
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteProject failed: invalid message type")
    return
  }
  result := AiravataDeleteProjectResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Pnfe != nil {
    err = result.Pnfe
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Get All User Projects
// Get all Project for the user with pagination. Results will be ordered based on creation time DESC.
// 
// @param gatewayId
//    The identifier for the requested gateway.
// 
// @param userName
//    The identifier of the user.
// 
// @param limit
//    The amount results to be fetched.
// 
// @param offset
//    The starting point of the results to be fetched.
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - GatewayId
//  - UserName
//  - Limit
//  - Offset
func (p *AiravataClient) GetUserProjects(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string, userName string, limit int32, offset int32) (r []*workspace_model.Project, err error) {
  if err = p.sendGetUserProjects(authzToken, gatewayId, userName, limit, offset); err != nil { return }
  return p.recvGetUserProjects()
}

func (p *AiravataClient) sendGetUserProjects(authzToken *security_model.AuthzToken, gatewayId string, userName string, limit int32, offset int32)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getUserProjects", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetUserProjectsArgs{
  AuthzToken : authzToken,
  GatewayId : gatewayId,
  UserName : userName,
  Limit : limit,
  Offset : offset,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetUserProjects() (value []*workspace_model.Project, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getUserProjects" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getUserProjects failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUserProjects failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error54 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error55 error
    error55, err = error54.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error55
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUserProjects failed: invalid message type")
    return
  }
  result := AiravataGetUserProjectsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Search User Projects
// Search and get all Projects for user by project description or/and project name  with pagination.
// Results will be ordered based on creation time DESC.
// 
// @param gatewayId
//    The unique identifier of the gateway making the request.
// 
// @param userName
//    The identifier of the user.
// 
// @param filters
//    Map of multiple filter criteria. Currenlt search filters includes Project Name and Project Description
// 
// @param limit
//    The amount results to be fetched.
// 
// @param offset
//    The starting point of the results to be fetched.
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - GatewayId
//  - UserName
//  - Filters
//  - Limit
//  - Offset
func (p *AiravataClient) SearchProjects(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string, userName string, filters map[experiment_model.ProjectSearchFields]string, limit int32, offset int32) (r []*workspace_model.Project, err error) {
  if err = p.sendSearchProjects(authzToken, gatewayId, userName, filters, limit, offset); err != nil { return }
  return p.recvSearchProjects()
}

func (p *AiravataClient) sendSearchProjects(authzToken *security_model.AuthzToken, gatewayId string, userName string, filters map[experiment_model.ProjectSearchFields]string, limit int32, offset int32)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("searchProjects", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataSearchProjectsArgs{
  AuthzToken : authzToken,
  GatewayId : gatewayId,
  UserName : userName,
  Filters : filters,
  Limit : limit,
  Offset : offset,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvSearchProjects() (value []*workspace_model.Project, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "searchProjects" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "searchProjects failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "searchProjects failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error56 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error57 error
    error57, err = error56.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error57
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "searchProjects failed: invalid message type")
    return
  }
  result := AiravataSearchProjectsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Search Experiments.
// Search Experiments by using multiple filter criteria with pagination. Results will be sorted based on creation time DESC.
// 
// @param gatewayId
//       Identifier of the requested gateway.
// 
// @param userName
//       Username of the user requesting the search function.
// 
// @param filters
//       Map of multiple filter criteria. Currenlt search filters includes Experiment Name, Description, Application, etc....
// 
// @param limit
//       Amount of results to be fetched.
// 
// @param offset
//       The starting point of the results to be fetched.
// 
// @return ExperimentSummaryModel
//    List of experiments for the given search filter. Here only the Experiment summary will be returned.
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - GatewayId
//  - UserName
//  - Filters
//  - Limit
//  - Offset
func (p *AiravataClient) SearchExperiments(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string, userName string, filters map[experiment_model.ExperimentSearchFields]string, limit int32, offset int32) (r []*experiment_model.ExperimentSummaryModel, err error) {
  if err = p.sendSearchExperiments(authzToken, gatewayId, userName, filters, limit, offset); err != nil { return }
  return p.recvSearchExperiments()
}

func (p *AiravataClient) sendSearchExperiments(authzToken *security_model.AuthzToken, gatewayId string, userName string, filters map[experiment_model.ExperimentSearchFields]string, limit int32, offset int32)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("searchExperiments", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataSearchExperimentsArgs{
  AuthzToken : authzToken,
  GatewayId : gatewayId,
  UserName : userName,
  Filters : filters,
  Limit : limit,
  Offset : offset,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvSearchExperiments() (value []*experiment_model.ExperimentSummaryModel, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "searchExperiments" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "searchExperiments failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "searchExperiments failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error58 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error59 error
    error59, err = error58.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error59
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "searchExperiments failed: invalid message type")
    return
  }
  result := AiravataSearchExperimentsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Get Experiment Statistics
// Get Experiment Statisitics for a given gateway for a specific time period. This feature is available only for admins of a particular gateway. Gateway admin access is managed by the user roles.
// 
// @param gatewayId
//       Unique identifier of the gateway making the request to fetch statistics.
// 
// @param fromTime
//       Starting date time.
// 
// @param toTime
//       Ending data time.
// 
// @param userName
//       Gateway username substring with which to further filter statistics.
// 
// @param applicationName
//       Application id substring with which to further filter statistics.
// 
// @param resourceHostName
//       Hostname id substring with which to further filter statistics.
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - GatewayId
//  - FromTime
//  - ToTime
//  - UserName
//  - ApplicationName
//  - ResourceHostName
func (p *AiravataClient) GetExperimentStatistics(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string, fromTime int64, toTime int64, userName string, applicationName string, resourceHostName string) (r *experiment_model.ExperimentStatistics, err error) {
  if err = p.sendGetExperimentStatistics(authzToken, gatewayId, fromTime, toTime, userName, applicationName, resourceHostName); err != nil { return }
  return p.recvGetExperimentStatistics()
}

func (p *AiravataClient) sendGetExperimentStatistics(authzToken *security_model.AuthzToken, gatewayId string, fromTime int64, toTime int64, userName string, applicationName string, resourceHostName string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getExperimentStatistics", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetExperimentStatisticsArgs{
  AuthzToken : authzToken,
  GatewayId : gatewayId,
  FromTime : fromTime,
  ToTime : toTime,
  UserName : userName,
  ApplicationName : applicationName,
  ResourceHostName : resourceHostName,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetExperimentStatistics() (value *experiment_model.ExperimentStatistics, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getExperimentStatistics" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getExperimentStatistics failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getExperimentStatistics failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error60 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error61 error
    error61, err = error60.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error61
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getExperimentStatistics failed: invalid message type")
    return
  }
  result := AiravataGetExperimentStatisticsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Get All Experiments of the Project
// Get Experiments within project with pagination. Results will be sorted based on creation time DESC.
// 
// @param projectId
//       Uniqie identifier of the project.
// 
// @param limit
//       Amount of results to be fetched.
// 
// @param offset
//       The starting point of the results to be fetched.
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - ProjectId
//  - Limit
//  - Offset
func (p *AiravataClient) GetExperimentsInProject(ctx context.Context, authzToken *security_model.AuthzToken, projectId string, limit int32, offset int32) (r []*experiment_model.ExperimentModel, err error) {
  if err = p.sendGetExperimentsInProject(authzToken, projectId, limit, offset); err != nil { return }
  return p.recvGetExperimentsInProject()
}

func (p *AiravataClient) sendGetExperimentsInProject(authzToken *security_model.AuthzToken, projectId string, limit int32, offset int32)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getExperimentsInProject", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetExperimentsInProjectArgs{
  AuthzToken : authzToken,
  ProjectId : projectId,
  Limit : limit,
  Offset : offset,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetExperimentsInProject() (value []*experiment_model.ExperimentModel, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getExperimentsInProject" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getExperimentsInProject failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getExperimentsInProject failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error62 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error63 error
    error63, err = error62.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error63
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getExperimentsInProject failed: invalid message type")
    return
  }
  result := AiravataGetExperimentsInProjectResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Pnfe != nil {
    err = result.Pnfe
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Get All Experiments of the User
// Get experiments by user with pagination. Results will be sorted based on creation time DESC.
// 
// @param gatewayId
//       Identifier of the requesting gateway.
// 
// @param userName
//       Username of the requested end user.
// 
// @param limit
//       Amount of results to be fetched.
// 
// @param offset
//       The starting point of the results to be fetched.
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - GatewayId
//  - UserName
//  - Limit
//  - Offset
func (p *AiravataClient) GetUserExperiments(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string, userName string, limit int32, offset int32) (r []*experiment_model.ExperimentModel, err error) {
  if err = p.sendGetUserExperiments(authzToken, gatewayId, userName, limit, offset); err != nil { return }
  return p.recvGetUserExperiments()
}

func (p *AiravataClient) sendGetUserExperiments(authzToken *security_model.AuthzToken, gatewayId string, userName string, limit int32, offset int32)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getUserExperiments", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetUserExperimentsArgs{
  AuthzToken : authzToken,
  GatewayId : gatewayId,
  UserName : userName,
  Limit : limit,
  Offset : offset,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetUserExperiments() (value []*experiment_model.ExperimentModel, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getUserExperiments" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getUserExperiments failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUserExperiments failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error64 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error65 error
    error65, err = error64.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error65
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUserExperiments failed: invalid message type")
    return
  }
  result := AiravataGetUserExperimentsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

//   *
//   * Create New Experiment
//   * Create an experiment for the specified user belonging to the gateway. The gateway identity is not explicitly passed
//   *   but inferred from the sshKeyAuthentication header. This experiment is just a persistent place holder. The client
//   *   has to subsequently configure and launch the created experiment. No action is taken on Airavata Server except
//   *   registering the experiment in a persistent store.
//   *
//   * @param gatewayId
//   *    The unique ID of the gateway where the experiment is been created.
//   *
//   * @param ExperimentModel
//   *    The create experiment will require the basic experiment metadata like the name and description, intended user,
//   *      the gateway identifer and if the experiment should be shared public by defualt. During the creation of an experiment
//   *      the ExperimentMetadata is a required field.
//   *
//   * @return
//   *   The server-side generated.airavata.registry.core.experiment.globally unique identifier.
//   *
//   * @throws org.apache.airavata.model.error.InvalidRequestException
//   *    For any incorrect forming of the request itself.
//   *
//   * @throws org.apache.airavata.model.error.AiravataClientException
//   *    The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
//   *
//   *      UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
//   *         step, then Airavata Registry will not have a provenance area setup. The client has to follow
//   *         gateway registration steps and retry this request.
//   *
//   *      AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
//   *         For now this is a place holder.
//   *
//   *      INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
//   *         is implemented, the authorization will be more substantial.
//   *
//   * @throws org.apache.airavata.model.error.AiravataSystemException
//   *    This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
//   *       rather an Airavata Administrator will be notified to take corrective action.
//   *
// *
// 
// Parameters:
//  - AuthzToken
//  - GatewayId
//  - Experiment
func (p *AiravataClient) CreateExperiment(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string, experiment *experiment_model.ExperimentModel) (r string, err error) {
  if err = p.sendCreateExperiment(authzToken, gatewayId, experiment); err != nil { return }
  return p.recvCreateExperiment()
}

func (p *AiravataClient) sendCreateExperiment(authzToken *security_model.AuthzToken, gatewayId string, experiment *experiment_model.ExperimentModel)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createExperiment", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataCreateExperimentArgs{
  AuthzToken : authzToken,
  GatewayId : gatewayId,
  Experiment : experiment,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvCreateExperiment() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createExperiment" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createExperiment failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createExperiment failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error66 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error67 error
    error67, err = error66.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error67
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createExperiment failed: invalid message type")
    return
  }
  result := AiravataCreateExperimentResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Delete an Experiment
// If the experiment is not already launched experiment can be deleted.
// 
// @param authzToken
// 
// @param experiementId
//     Experiment ID of the experimnet you want to delete.
// 
// @return boolean
//     Identifier for the success or failure of the deletion operation.
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - ExperimentId
func (p *AiravataClient) DeleteExperiment(ctx context.Context, authzToken *security_model.AuthzToken, experimentId string) (r bool, err error) {
  if err = p.sendDeleteExperiment(authzToken, experimentId); err != nil { return }
  return p.recvDeleteExperiment()
}

func (p *AiravataClient) sendDeleteExperiment(authzToken *security_model.AuthzToken, experimentId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteExperiment", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataDeleteExperimentArgs{
  AuthzToken : authzToken,
  ExperimentId : experimentId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvDeleteExperiment() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteExperiment" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteExperiment failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteExperiment failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error68 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error69 error
    error69, err = error68.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error69
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteExperiment failed: invalid message type")
    return
  }
  result := AiravataDeleteExperimentResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

//   *
//   * Get Experiment
//   * Fetch previously created experiment metadata.
//   *
//   * @param airavataExperimentId
//   *    The unique identifier of the requested experiment. This ID is returned during the create experiment step.
//   *
//   * @return ExperimentModel
//   *   This method will return the previously stored experiment metadata.
//   *
//   * @throws org.apache.airavata.model.error.InvalidRequestException
//   *    For any incorrect forming of the request itself.
//   *
//   * @throws org.apache.airavata.model.error.ExperimentNotFoundException
//   *    If the specified experiment is not previously created, then an Experiment Not Found Exception is thrown.
//   *
//   * @throws org.apache.airavata.model.error.AiravataClientException
//   *    The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
//   *
//   *      UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
//   *         step, then Airavata Registry will not have a provenance area setup. The client has to follow
//   *         gateway registration steps and retry this request.
//   *
//   *      AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
//   *         For now this is a place holder.
//   *
//   *      INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
//   *         is implemented, the authorization will be more substantial.
//   *
//   * @throws org.apache.airavata.model.error.AiravataSystemException
//   *    This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
//   *       rather an Airavata Administrator will be notified to take corrective action.
//   *
// *
// 
// Parameters:
//  - AuthzToken
//  - AiravataExperimentId
func (p *AiravataClient) GetExperiment(ctx context.Context, authzToken *security_model.AuthzToken, airavataExperimentId string) (r *experiment_model.ExperimentModel, err error) {
  if err = p.sendGetExperiment(authzToken, airavataExperimentId); err != nil { return }
  return p.recvGetExperiment()
}

func (p *AiravataClient) sendGetExperiment(authzToken *security_model.AuthzToken, airavataExperimentId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getExperiment", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetExperimentArgs{
  AuthzToken : authzToken,
  AiravataExperimentId : airavataExperimentId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetExperiment() (value *experiment_model.ExperimentModel, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getExperiment" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getExperiment failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getExperiment failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error70 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error71 error
    error71, err = error70.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error71
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getExperiment failed: invalid message type")
    return
  }
  result := AiravataGetExperimentResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Enf != nil {
    err = result.Enf
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

//   *
//   * Get Experiment by an admin user
//   *
//   * Used by an admin user to fetch previously created experiment metadata.
//   *
//   * @param airavataExperimentId
//   *    The unique identifier of the requested experiment. This ID is returned during the create experiment step.
//   *
//   * @return ExperimentModel
//   *   This method will return the previously stored experiment metadata.
//   *
//   * @throws org.apache.airavata.model.error.InvalidRequestException
//   *    For any incorrect forming of the request itself.
//   *
//   * @throws org.apache.airavata.model.error.ExperimentNotFoundException
//   *    If the specified experiment is not previously created, then an Experiment Not Found Exception is thrown.
//   *
//   * @throws org.apache.airavata.model.error.AiravataClientException
//   *    The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
//   *
//   *      UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
//   *         step, then Airavata Registry will not have a provenance area setup. The client has to follow
//   *         gateway registration steps and retry this request.
//   *
//   *      AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
//   *         For now this is a place holder.
//   *
//   *      INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
//   *         is implemented, the authorization will be more substantial.
//   *
//   * @throws org.apache.airavata.model.error.AiravataSystemException
//   *    This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
//   *       rather an Airavata Administrator will be notified to take corrective action.
//   *
// *
// 
// Parameters:
//  - AuthzToken
//  - AiravataExperimentId
func (p *AiravataClient) GetExperimentByAdmin(ctx context.Context, authzToken *security_model.AuthzToken, airavataExperimentId string) (r *experiment_model.ExperimentModel, err error) {
  if err = p.sendGetExperimentByAdmin(authzToken, airavataExperimentId); err != nil { return }
  return p.recvGetExperimentByAdmin()
}

func (p *AiravataClient) sendGetExperimentByAdmin(authzToken *security_model.AuthzToken, airavataExperimentId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getExperimentByAdmin", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetExperimentByAdminArgs{
  AuthzToken : authzToken,
  AiravataExperimentId : airavataExperimentId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetExperimentByAdmin() (value *experiment_model.ExperimentModel, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getExperimentByAdmin" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getExperimentByAdmin failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getExperimentByAdmin failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error72 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error73 error
    error73, err = error72.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error73
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getExperimentByAdmin failed: invalid message type")
    return
  }
  result := AiravataGetExperimentByAdminResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Enf != nil {
    err = result.Enf
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Get Complete Experiment Details
// Fetch the completed nested tree structue of previously created experiment metadata which includes processes ->
// tasks -> jobs information.
// 
// @param airavataExperimentId
//    The identifier for the requested experiment. This is returned during the create experiment step.
// 
// @return ExperimentModel
//   This method will return the previously stored experiment metadata including application input parameters, computational resource scheduling
//   information, special input output handling and additional quality of service parameters.
// 
// @throws org.apache.airavata.model.error.InvalidRequestException
//    For any incorrect forming of the request itself.
// 
// @throws org.apache.airavata.model.error.ExperimentNotFoundException
//    If the specified experiment is not previously created, then an Experiment Not Found Exception is thrown.
// 
// @throws org.apache.airavata.model.error.AiravataClientException
//    The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
// 
//      UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
//         step, then Airavata Registry will not have a provenance area setup. The client has to follow
//         gateway registration steps and retry this request.
// 
//      AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
//         For now this is a place holder.
// 
//      INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
//         is implemented, the authorization will be more substantial.
// 
// @throws org.apache.airavata.model.error.AiravataSystemException
//    This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
//       rather an Airavata Administrator will be notified to take corrective action.
// 
// 
// Parameters:
//  - AuthzToken
//  - AiravataExperimentId
func (p *AiravataClient) GetDetailedExperimentTree(ctx context.Context, authzToken *security_model.AuthzToken, airavataExperimentId string) (r *experiment_model.ExperimentModel, err error) {
  if err = p.sendGetDetailedExperimentTree(authzToken, airavataExperimentId); err != nil { return }
  return p.recvGetDetailedExperimentTree()
}

func (p *AiravataClient) sendGetDetailedExperimentTree(authzToken *security_model.AuthzToken, airavataExperimentId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getDetailedExperimentTree", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetDetailedExperimentTreeArgs{
  AuthzToken : authzToken,
  AiravataExperimentId : airavataExperimentId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetDetailedExperimentTree() (value *experiment_model.ExperimentModel, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getDetailedExperimentTree" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getDetailedExperimentTree failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getDetailedExperimentTree failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error74 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error75 error
    error75, err = error74.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error75
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getDetailedExperimentTree failed: invalid message type")
    return
  }
  result := AiravataGetDetailedExperimentTreeResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Enf != nil {
    err = result.Enf
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Update a Previously Created Experiment
// Configure the CREATED experiment with required inputs, scheduling and other quality of service parameters. This method only updates the experiment object within the registry.
// The experiment has to be launched to make it actionable by the server.
// 
// @param airavataExperimentId
//    The identifier for the requested experiment. This is returned during the create experiment step.
// 
// @param ExperimentModel
//    The configuration information of the experiment with application input parameters, computational resource scheduling
//      information, special input output handling and additional quality of service parameters.
// 
// @return
//   This method call does not have a return value.
// 
// @throws org.apache.airavata.model.error.InvalidRequestException
//    For any incorrect forming of the request itself.
// 
// @throws org.apache.airavata.model.error.ExperimentNotFoundException
//    If the specified experiment is not previously created, then an Experiment Not Found Exception is thrown.
// 
// @throws org.apache.airavata.model.error.AiravataClientException
//    The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
//      
//      UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
//         step, then Airavata Registry will not have a provenance area setup. The client has to follow
//         gateway registration steps and retry this request.
// 
//      AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
//         For now this is a place holder.
// 
//      INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
//         is implemented, the authorization will be more substantial.
// 
// @throws org.apache.airavata.model.error.AiravataSystemException
//    This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
//       rather an Airavata Administrator will be notified to take corrective action.
// 
// 
// Parameters:
//  - AuthzToken
//  - AiravataExperimentId
//  - Experiment
func (p *AiravataClient) UpdateExperiment(ctx context.Context, authzToken *security_model.AuthzToken, airavataExperimentId string, experiment *experiment_model.ExperimentModel) (err error) {
  if err = p.sendUpdateExperiment(authzToken, airavataExperimentId, experiment); err != nil { return }
  return p.recvUpdateExperiment()
}

func (p *AiravataClient) sendUpdateExperiment(authzToken *security_model.AuthzToken, airavataExperimentId string, experiment *experiment_model.ExperimentModel)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateExperiment", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataUpdateExperimentArgs{
  AuthzToken : authzToken,
  AiravataExperimentId : airavataExperimentId,
  Experiment : experiment,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvUpdateExperiment() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateExperiment" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateExperiment failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateExperiment failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error76 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error77 error
    error77, err = error76.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error77
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateExperiment failed: invalid message type")
    return
  }
  result := AiravataUpdateExperimentResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Enf != nil {
    err = result.Enf
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  return
}

// Parameters:
//  - AuthzToken
//  - AiravataExperimentId
//  - UserConfiguration
func (p *AiravataClient) UpdateExperimentConfiguration(ctx context.Context, authzToken *security_model.AuthzToken, airavataExperimentId string, userConfiguration *experiment_model.UserConfigurationDataModel) (err error) {
  if err = p.sendUpdateExperimentConfiguration(authzToken, airavataExperimentId, userConfiguration); err != nil { return }
  return p.recvUpdateExperimentConfiguration()
}

func (p *AiravataClient) sendUpdateExperimentConfiguration(authzToken *security_model.AuthzToken, airavataExperimentId string, userConfiguration *experiment_model.UserConfigurationDataModel)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateExperimentConfiguration", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataUpdateExperimentConfigurationArgs{
  AuthzToken : authzToken,
  AiravataExperimentId : airavataExperimentId,
  UserConfiguration : userConfiguration,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvUpdateExperimentConfiguration() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateExperimentConfiguration" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateExperimentConfiguration failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateExperimentConfiguration failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error78 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error79 error
    error79, err = error78.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error79
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateExperimentConfiguration failed: invalid message type")
    return
  }
  result := AiravataUpdateExperimentConfigurationResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ae != nil {
    err = result.Ae
    return 
  }
  return
}

// Parameters:
//  - AuthzToken
//  - AiravataExperimentId
//  - ResourceScheduling
func (p *AiravataClient) UpdateResourceScheduleing(ctx context.Context, authzToken *security_model.AuthzToken, airavataExperimentId string, resourceScheduling *scheduling_model.ComputationalResourceSchedulingModel) (err error) {
  if err = p.sendUpdateResourceScheduleing(authzToken, airavataExperimentId, resourceScheduling); err != nil { return }
  return p.recvUpdateResourceScheduleing()
}

func (p *AiravataClient) sendUpdateResourceScheduleing(authzToken *security_model.AuthzToken, airavataExperimentId string, resourceScheduling *scheduling_model.ComputationalResourceSchedulingModel)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateResourceScheduleing", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataUpdateResourceScheduleingArgs{
  AuthzToken : authzToken,
  AiravataExperimentId : airavataExperimentId,
  ResourceScheduling : resourceScheduling,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvUpdateResourceScheduleing() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateResourceScheduleing" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateResourceScheduleing failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateResourceScheduleing failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error80 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error81 error
    error81, err = error80.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error81
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateResourceScheduleing failed: invalid message type")
    return
  }
  result := AiravataUpdateResourceScheduleingResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ae != nil {
    err = result.Ae
    return 
  }
  return
}

//  *
//  * Validate experiment configuration.
//  * A true in general indicates, the experiment is ready to be launched.
//  *
//  * @param airavataExperimentId
//  *    Unique identifier of the experiment (Experimnent ID) of the experiment which need to be validated.
//  *
//  * @return boolean
//  *      Identifier for the success or failure of the validation operation.
//  *
// *
// 
// Parameters:
//  - AuthzToken
//  - AiravataExperimentId
func (p *AiravataClient) ValidateExperiment(ctx context.Context, authzToken *security_model.AuthzToken, airavataExperimentId string) (r bool, err error) {
  if err = p.sendValidateExperiment(authzToken, airavataExperimentId); err != nil { return }
  return p.recvValidateExperiment()
}

func (p *AiravataClient) sendValidateExperiment(authzToken *security_model.AuthzToken, airavataExperimentId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("validateExperiment", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataValidateExperimentArgs{
  AuthzToken : authzToken,
  AiravataExperimentId : airavataExperimentId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvValidateExperiment() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "validateExperiment" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "validateExperiment failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "validateExperiment failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error82 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error83 error
    error83, err = error82.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error83
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "validateExperiment failed: invalid message type")
    return
  }
  result := AiravataValidateExperimentResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Enf != nil {
    err = result.Enf
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Launch a Previously Created & Configured Experiment.
// Airavata Server will then start processing the request and appropriate notifications and intermediate and output data will be subsequently available for this experiment.
// 
// @gatewayId
//    ID of the gateway which will launch the experiment.
// 
// @param airavataExperimentId
//    The identifier for the requested experiment. This is returned during the create experiment step.
// 
// @return
//   This method call does not have a return value.
// 
// @throws org.apache.airavata.model.error.InvalidRequestException
//    For any incorrect forming of the request itself.
// 
// @throws org.apache.airavata.model.error.ExperimentNotFoundException
//    If the specified experiment is not previously created, then an Experiment Not Found Exception is thrown.
// 
// @throws org.apache.airavata.model.error.AiravataClientException
//    The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
//      
//      UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
//         step, then Airavata Registry will not have a provenance area setup. The client has to follow
//         gateway registration steps and retry this request.
// 
//      AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
//         For now this is a place holder.
// 
//      INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
//         is implemented, the authorization will be more substantial.
// 
// @throws org.apache.airavata.model.error.AiravataSystemException
//    This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
//       rather an Airavata Administrator will be notified to take corrective action.
// 
// 
// Parameters:
//  - AuthzToken
//  - AiravataExperimentId
//  - GatewayId
func (p *AiravataClient) LaunchExperiment(ctx context.Context, authzToken *security_model.AuthzToken, airavataExperimentId string, gatewayId string) (err error) {
  if err = p.sendLaunchExperiment(authzToken, airavataExperimentId, gatewayId); err != nil { return }
  return p.recvLaunchExperiment()
}

func (p *AiravataClient) sendLaunchExperiment(authzToken *security_model.AuthzToken, airavataExperimentId string, gatewayId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("launchExperiment", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataLaunchExperimentArgs{
  AuthzToken : authzToken,
  AiravataExperimentId : airavataExperimentId,
  GatewayId : gatewayId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvLaunchExperiment() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "launchExperiment" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "launchExperiment failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "launchExperiment failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error84 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error85 error
    error85, err = error84.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error85
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "launchExperiment failed: invalid message type")
    return
  }
  result := AiravataLaunchExperimentResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Enf != nil {
    err = result.Enf
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  return
}

// 
// Get Experiment Status
// 
// Obtain the status of an experiment by providing the Experiment Id
// 
// @param authzToken
// 
// @param airavataExperimentId
//     Experiment ID of the experimnet you require the status.
// 
// @return ExperimentStatus
//     ExperimentStatus model with the current status will be returned.
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - AiravataExperimentId
func (p *AiravataClient) GetExperimentStatus(ctx context.Context, authzToken *security_model.AuthzToken, airavataExperimentId string) (r *status_models.ExperimentStatus, err error) {
  if err = p.sendGetExperimentStatus(authzToken, airavataExperimentId); err != nil { return }
  return p.recvGetExperimentStatus()
}

func (p *AiravataClient) sendGetExperimentStatus(authzToken *security_model.AuthzToken, airavataExperimentId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getExperimentStatus", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetExperimentStatusArgs{
  AuthzToken : authzToken,
  AiravataExperimentId : airavataExperimentId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetExperimentStatus() (value *status_models.ExperimentStatus, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getExperimentStatus" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getExperimentStatus failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getExperimentStatus failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error86 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error87 error
    error87, err = error86.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error87
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getExperimentStatus failed: invalid message type")
    return
  }
  result := AiravataGetExperimentStatusResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Enf != nil {
    err = result.Enf
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Get Experiment Outputs
// This method to be used when need to obtain final outputs of a certain Experiment
// 
// @param authzToken
// 
// @param airavataExperimentId
//     Experiment ID of the experimnet you need the outputs.
// 
// @return list
//     List of experiment outputs will be returned. They will be returned as a list of OutputDataObjectType for the experiment.
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - AiravataExperimentId
func (p *AiravataClient) GetExperimentOutputs(ctx context.Context, authzToken *security_model.AuthzToken, airavataExperimentId string) (r []*application_io_models.OutputDataObjectType, err error) {
  if err = p.sendGetExperimentOutputs(authzToken, airavataExperimentId); err != nil { return }
  return p.recvGetExperimentOutputs()
}

func (p *AiravataClient) sendGetExperimentOutputs(authzToken *security_model.AuthzToken, airavataExperimentId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getExperimentOutputs", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetExperimentOutputsArgs{
  AuthzToken : authzToken,
  AiravataExperimentId : airavataExperimentId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetExperimentOutputs() (value []*application_io_models.OutputDataObjectType, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getExperimentOutputs" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getExperimentOutputs failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getExperimentOutputs failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error88 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error89 error
    error89, err = error88.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error89
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getExperimentOutputs failed: invalid message type")
    return
  }
  result := AiravataGetExperimentOutputsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Enf != nil {
    err = result.Enf
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Get Intermediate Experiment Outputs
// This method to be used when need to obtain intermediate outputs of a certain Experiment
// 
// @param authzToken
// 
// @param airavataExperimentId
//     Experiment ID of the experimnet you need intermediate outputs.
// 
// @return list
//     List of intermediate experiment outputs will be returned. They will be returned as a list of OutputDataObjectType for the experiment.
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - AiravataExperimentId
func (p *AiravataClient) GetIntermediateOutputs(ctx context.Context, authzToken *security_model.AuthzToken, airavataExperimentId string) (r []*application_io_models.OutputDataObjectType, err error) {
  if err = p.sendGetIntermediateOutputs(authzToken, airavataExperimentId); err != nil { return }
  return p.recvGetIntermediateOutputs()
}

func (p *AiravataClient) sendGetIntermediateOutputs(authzToken *security_model.AuthzToken, airavataExperimentId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getIntermediateOutputs", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetIntermediateOutputsArgs{
  AuthzToken : authzToken,
  AiravataExperimentId : airavataExperimentId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetIntermediateOutputs() (value []*application_io_models.OutputDataObjectType, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getIntermediateOutputs" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getIntermediateOutputs failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getIntermediateOutputs failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error90 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error91 error
    error91, err = error90.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error91
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getIntermediateOutputs failed: invalid message type")
    return
  }
  result := AiravataGetIntermediateOutputsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Enf != nil {
    err = result.Enf
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Get Job Statuses for an Experiment
// This method to be used when need to get the job status of an Experiment. An experiment may have one or many jobs; there for one or many job statuses may turnup
// 
// @param authzToken
// 
// @param experiementId
//     Experiment ID of the experimnet you need the job statuses.
// 
// @return JobStatus
//     Job status (string) for all all the existing jobs for the experiment will be returned in the form of a map
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - AiravataExperimentId
func (p *AiravataClient) GetJobStatuses(ctx context.Context, authzToken *security_model.AuthzToken, airavataExperimentId string) (r map[string]*status_models.JobStatus, err error) {
  if err = p.sendGetJobStatuses(authzToken, airavataExperimentId); err != nil { return }
  return p.recvGetJobStatuses()
}

func (p *AiravataClient) sendGetJobStatuses(authzToken *security_model.AuthzToken, airavataExperimentId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getJobStatuses", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetJobStatusesArgs{
  AuthzToken : authzToken,
  AiravataExperimentId : airavataExperimentId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetJobStatuses() (value map[string]*status_models.JobStatus, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getJobStatuses" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getJobStatuses failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getJobStatuses failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error92 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error93 error
    error93, err = error92.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error93
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getJobStatuses failed: invalid message type")
    return
  }
  result := AiravataGetJobStatusesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Enf != nil {
    err = result.Enf
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Get Job Details for all the jobs within an Experiment.
// This method to be used when need to get the job details for one or many jobs of an Experiment.
// 
// @param authzToken
// 
// @param experiementId
//     Experiment ID of the experimnet you need job details.
// 
// @return list of JobDetails
//     Job details.
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - AiravataExperimentId
func (p *AiravataClient) GetJobDetails(ctx context.Context, authzToken *security_model.AuthzToken, airavataExperimentId string) (r []*job_model.JobModel, err error) {
  if err = p.sendGetJobDetails(authzToken, airavataExperimentId); err != nil { return }
  return p.recvGetJobDetails()
}

func (p *AiravataClient) sendGetJobDetails(authzToken *security_model.AuthzToken, airavataExperimentId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getJobDetails", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetJobDetailsArgs{
  AuthzToken : authzToken,
  AiravataExperimentId : airavataExperimentId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetJobDetails() (value []*job_model.JobModel, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getJobDetails" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getJobDetails failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getJobDetails failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error94 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error95 error
    error95, err = error94.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error95
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getJobDetails failed: invalid message type")
    return
  }
  result := AiravataGetJobDetailsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Enf != nil {
    err = result.Enf
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Clone an Existing Experiment
// Existing specified experiment is cloned and a new name is provided. A copy of the experiment configuration is made and is persisted with new metadata.
//   The client has to subsequently update this configuration if needed and launch the cloned experiment.
// 
// @param newExperimentName
//    experiment name that should be used in the cloned experiment
// 
// @param updatedExperiment
//    Once an experiment is cloned, to disambiguate, the users are suggested to provide new metadata. This will again require
//      the basic experiment metadata like the name and description, intended user, the gateway identifier and if the experiment
//      should be shared public by default.
// @param newExperimentProjectId
//    The project in which to create the cloned experiment. This is optional and if null the experiment will be created
//      in the same project as the existing experiment.
// 
// @return
//   The server-side generated.airavata.registry.core.experiment.globally unique identifier (Experiment ID) for the newly cloned experiment.
// 
// @throws org.apache.airavata.model.error.InvalidRequestException
//    For any incorrect forming of the request itself.
// 
// @throws org.apache.airavata.model.error.ExperimentNotFoundException
//    If the specified experiment is not previously created, then an Experiment Not Found Exception is thrown.
// 
// @throws org.apache.airavata.model.error.AiravataClientException
//    The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
//      
//      UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
//         step, then Airavata Registry will not have a provenance area setup. The client has to follow
//         gateway registration steps and retry this request.
// 
//      AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
//         For now this is a place holder.
// 
//      INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
//         is implemented, the authorization will be more substantial.
// 
// @throws org.apache.airavata.model.error.AiravataSystemException
//    This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
//       rather an Airavata Administrator will be notified to take corrective action.
// 
// 
// Parameters:
//  - AuthzToken
//  - ExistingExperimentID
//  - NewExperimentName_
//  - NewExperimentProjectId_
func (p *AiravataClient) CloneExperiment(ctx context.Context, authzToken *security_model.AuthzToken, existingExperimentID string, newExperimentName string, newExperimentProjectId string) (r string, err error) {
  if err = p.sendCloneExperiment(authzToken, existingExperimentID, newExperimentName, newExperimentProjectId); err != nil { return }
  return p.recvCloneExperiment()
}

func (p *AiravataClient) sendCloneExperiment(authzToken *security_model.AuthzToken, existingExperimentID string, newExperimentName string, newExperimentProjectId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("cloneExperiment", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataCloneExperimentArgs{
  AuthzToken : authzToken,
  ExistingExperimentID : existingExperimentID,
  NewExperimentName_ : newExperimentName,
  NewExperimentProjectId_ : newExperimentProjectId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvCloneExperiment() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "cloneExperiment" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "cloneExperiment failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "cloneExperiment failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error96 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error97 error
    error97, err = error96.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error97
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "cloneExperiment failed: invalid message type")
    return
  }
  result := AiravataCloneExperimentResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Enf != nil {
    err = result.Enf
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  } else   if result.Pnfe != nil {
    err = result.Pnfe
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Clone an Existing Experiment by an admin user
// Existing specified experiment is cloned and a new name is provided. A copy of the experiment configuration is made and is persisted with new metadata.
//   The client has to subsequently update this configuration if needed and launch the cloned experiment.
// 
// @param newExperimentName
//    experiment name that should be used in the cloned experiment
// 
// @param updatedExperiment
//    Once an experiment is cloned, to disambiguate, the users are suggested to provide new metadata. This will again require
//      the basic experiment metadata like the name and description, intended user, the gateway identifier and if the experiment
//      should be shared public by default.
// @param newExperimentProjectId
//    The project in which to create the cloned experiment. This is optional and if null the experiment will be created
//      in the same project as the existing experiment.
// 
// @return
//   The server-side generated.airavata.registry.core.experiment.globally unique identifier (Experiment ID) for the newly cloned experiment.
// 
// @throws org.apache.airavata.model.error.InvalidRequestException
//    For any incorrect forming of the request itself.
// 
// @throws org.apache.airavata.model.error.ExperimentNotFoundException
//    If the specified experiment is not previously created, then an Experiment Not Found Exception is thrown.
// 
// @throws org.apache.airavata.model.error.AiravataClientException
//    The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
// 
//      UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
//         step, then Airavata Registry will not have a provenance area setup. The client has to follow
//         gateway registration steps and retry this request.
// 
//      AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
//         For now this is a place holder.
// 
//      INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
//         is implemented, the authorization will be more substantial.
// 
// @throws org.apache.airavata.model.error.AiravataSystemException
//    This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
//       rather an Airavata Administrator will be notified to take corrective action.
// 
// 
// Parameters:
//  - AuthzToken
//  - ExistingExperimentID
//  - NewExperimentName_
//  - NewExperimentProjectId_
func (p *AiravataClient) CloneExperimentByAdmin(ctx context.Context, authzToken *security_model.AuthzToken, existingExperimentID string, newExperimentName string, newExperimentProjectId string) (r string, err error) {
  if err = p.sendCloneExperimentByAdmin(authzToken, existingExperimentID, newExperimentName, newExperimentProjectId); err != nil { return }
  return p.recvCloneExperimentByAdmin()
}

func (p *AiravataClient) sendCloneExperimentByAdmin(authzToken *security_model.AuthzToken, existingExperimentID string, newExperimentName string, newExperimentProjectId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("cloneExperimentByAdmin", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataCloneExperimentByAdminArgs{
  AuthzToken : authzToken,
  ExistingExperimentID : existingExperimentID,
  NewExperimentName_ : newExperimentName,
  NewExperimentProjectId_ : newExperimentProjectId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvCloneExperimentByAdmin() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "cloneExperimentByAdmin" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "cloneExperimentByAdmin failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "cloneExperimentByAdmin failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error98 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error99 error
    error99, err = error98.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error99
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "cloneExperimentByAdmin failed: invalid message type")
    return
  }
  result := AiravataCloneExperimentByAdminResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Enf != nil {
    err = result.Enf
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  } else   if result.Pnfe != nil {
    err = result.Pnfe
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Terminate a running Experiment.
// 
// @gatewayId
//    ID of the gateway which will terminate the running Experiment.
// 
// @param airavataExperimentId
//    The identifier of the experiment required termination. This ID is returned during the create experiment step.
// 
// @return status
//   This method call does not have a return value.
// 
// @throws org.apache.airavata.model.error.InvalidRequestException
//    For any incorrect forming of the request itself.
// 
// @throws org.apache.airavata.model.error.ExperimentNotFoundException
//    If the specified experiment is not previously created, then an Experiment Not Found Exception is thrown.
// 
// @throws org.apache.airavata.model.error.AiravataClientException
//    The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
//      
//      UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
//         step, then Airavata Registry will not have a provenance area setup. The client has to follow
//         gateway registration steps and retry this request.
// 
//      AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
//         For now this is a place holder.
// 
//      INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
//         is implemented, the authorization will be more substantial.
// 
// @throws org.apache.airavata.model.error.AiravataSystemException
//    This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
//       rather an Airavata Administrator will be notified to take corrective action.
// 
// 
// Parameters:
//  - AuthzToken
//  - AiravataExperimentId
//  - GatewayId
func (p *AiravataClient) TerminateExperiment(ctx context.Context, authzToken *security_model.AuthzToken, airavataExperimentId string, gatewayId string) (err error) {
  if err = p.sendTerminateExperiment(authzToken, airavataExperimentId, gatewayId); err != nil { return }
  return p.recvTerminateExperiment()
}

func (p *AiravataClient) sendTerminateExperiment(authzToken *security_model.AuthzToken, airavataExperimentId string, gatewayId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("terminateExperiment", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataTerminateExperimentArgs{
  AuthzToken : authzToken,
  AiravataExperimentId : airavataExperimentId,
  GatewayId : gatewayId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvTerminateExperiment() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "terminateExperiment" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "terminateExperiment failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "terminateExperiment failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error100 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error101 error
    error101, err = error100.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error101
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "terminateExperiment failed: invalid message type")
    return
  }
  result := AiravataTerminateExperimentResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Enf != nil {
    err = result.Enf
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  return
}

// 
// Register a Application Module.
// 
// @gatewayId
//    ID of the gateway which is registering the new Application Module.
// 
// @param applicationModule
//    Application Module Object created from the datamodel.
// 
// @return appModuleId
//   Returns the server-side generated airavata appModule globally unique identifier.
// 
// 
// Parameters:
//  - AuthzToken
//  - GatewayId
//  - ApplicationModule
func (p *AiravataClient) RegisterApplicationModule(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string, applicationModule *application_deployment_model.ApplicationModule) (r string, err error) {
  if err = p.sendRegisterApplicationModule(authzToken, gatewayId, applicationModule); err != nil { return }
  return p.recvRegisterApplicationModule()
}

func (p *AiravataClient) sendRegisterApplicationModule(authzToken *security_model.AuthzToken, gatewayId string, applicationModule *application_deployment_model.ApplicationModule)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("registerApplicationModule", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataRegisterApplicationModuleArgs{
  AuthzToken : authzToken,
  GatewayId : gatewayId,
  ApplicationModule : applicationModule,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvRegisterApplicationModule() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "registerApplicationModule" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "registerApplicationModule failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "registerApplicationModule failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error102 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error103 error
    error103, err = error102.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error103
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "registerApplicationModule failed: invalid message type")
    return
  }
  result := AiravataRegisterApplicationModuleResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Fetch a Application Module.
// 
// @param appModuleId
//   The unique identifier of the application module required
// 
// @return applicationModule
//   Returns an Application Module Object.
// 
// 
// Parameters:
//  - AuthzToken
//  - AppModuleId
func (p *AiravataClient) GetApplicationModule(ctx context.Context, authzToken *security_model.AuthzToken, appModuleId string) (r *application_deployment_model.ApplicationModule, err error) {
  if err = p.sendGetApplicationModule(authzToken, appModuleId); err != nil { return }
  return p.recvGetApplicationModule()
}

func (p *AiravataClient) sendGetApplicationModule(authzToken *security_model.AuthzToken, appModuleId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getApplicationModule", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetApplicationModuleArgs{
  AuthzToken : authzToken,
  AppModuleId : appModuleId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetApplicationModule() (value *application_deployment_model.ApplicationModule, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getApplicationModule" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getApplicationModule failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getApplicationModule failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error104 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error105 error
    error105, err = error104.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error105
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getApplicationModule failed: invalid message type")
    return
  }
  result := AiravataGetApplicationModuleResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Update a Application Module.
// 
// @param appModuleId
//   The identifier for the requested application module to be updated.
// 
// @param applicationModule
//    Application Module Object created from the datamodel.
// 
// @return status
//   Returns a success/failure of the update.
// 
// 
// Parameters:
//  - AuthzToken
//  - AppModuleId
//  - ApplicationModule
func (p *AiravataClient) UpdateApplicationModule(ctx context.Context, authzToken *security_model.AuthzToken, appModuleId string, applicationModule *application_deployment_model.ApplicationModule) (r bool, err error) {
  if err = p.sendUpdateApplicationModule(authzToken, appModuleId, applicationModule); err != nil { return }
  return p.recvUpdateApplicationModule()
}

func (p *AiravataClient) sendUpdateApplicationModule(authzToken *security_model.AuthzToken, appModuleId string, applicationModule *application_deployment_model.ApplicationModule)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateApplicationModule", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataUpdateApplicationModuleArgs{
  AuthzToken : authzToken,
  AppModuleId : appModuleId,
  ApplicationModule : applicationModule,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvUpdateApplicationModule() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateApplicationModule" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateApplicationModule failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateApplicationModule failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error106 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error107 error
    error107, err = error106.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error107
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateApplicationModule failed: invalid message type")
    return
  }
  result := AiravataUpdateApplicationModuleResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Fetch all Application Module Descriptions.
// 
// @param gatewayId
//    ID of the gateway which need to list all available application deployment documentation.
// 
// @return list
//    Returns the list of all Application Module Objects.
// 
// 
// Parameters:
//  - AuthzToken
//  - GatewayId
func (p *AiravataClient) GetAllAppModules(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string) (r []*application_deployment_model.ApplicationModule, err error) {
  if err = p.sendGetAllAppModules(authzToken, gatewayId); err != nil { return }
  return p.recvGetAllAppModules()
}

func (p *AiravataClient) sendGetAllAppModules(authzToken *security_model.AuthzToken, gatewayId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getAllAppModules", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetAllAppModulesArgs{
  AuthzToken : authzToken,
  GatewayId : gatewayId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetAllAppModules() (value []*application_deployment_model.ApplicationModule, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getAllAppModules" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getAllAppModules failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getAllAppModules failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error108 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error109 error
    error109, err = error108.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error109
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getAllAppModules failed: invalid message type")
    return
  }
  result := AiravataGetAllAppModulesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Delete an Application Module.
// 
// @param appModuleId
//   The identifier of the Application Module to be deleted.
// 
// @return status
//   Returns a success/failure of the deletion.
// 
// 
// Parameters:
//  - AuthzToken
//  - AppModuleId
func (p *AiravataClient) DeleteApplicationModule(ctx context.Context, authzToken *security_model.AuthzToken, appModuleId string) (r bool, err error) {
  if err = p.sendDeleteApplicationModule(authzToken, appModuleId); err != nil { return }
  return p.recvDeleteApplicationModule()
}

func (p *AiravataClient) sendDeleteApplicationModule(authzToken *security_model.AuthzToken, appModuleId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteApplicationModule", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataDeleteApplicationModuleArgs{
  AuthzToken : authzToken,
  AppModuleId : appModuleId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvDeleteApplicationModule() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteApplicationModule" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteApplicationModule failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteApplicationModule failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error110 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error111 error
    error111, err = error110.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error111
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteApplicationModule failed: invalid message type")
    return
  }
  result := AiravataDeleteApplicationModuleResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Register an Application Deployment.
// 
// @param gatewayId
//    ID of the gateway which is registering the new Application Deployment.
// 
// @param applicationDeployment
//    Application Module Object created from the datamodel.
// 
// @return appDeploymentId
//   Returns a server-side generated airavata appDeployment globally unique identifier.
// 
// 
// Parameters:
//  - AuthzToken
//  - GatewayId
//  - ApplicationDeployment
func (p *AiravataClient) RegisterApplicationDeployment(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string, applicationDeployment *application_deployment_model.ApplicationDeploymentDescription) (r string, err error) {
  if err = p.sendRegisterApplicationDeployment(authzToken, gatewayId, applicationDeployment); err != nil { return }
  return p.recvRegisterApplicationDeployment()
}

func (p *AiravataClient) sendRegisterApplicationDeployment(authzToken *security_model.AuthzToken, gatewayId string, applicationDeployment *application_deployment_model.ApplicationDeploymentDescription)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("registerApplicationDeployment", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataRegisterApplicationDeploymentArgs{
  AuthzToken : authzToken,
  GatewayId : gatewayId,
  ApplicationDeployment : applicationDeployment,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvRegisterApplicationDeployment() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "registerApplicationDeployment" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "registerApplicationDeployment failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "registerApplicationDeployment failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error112 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error113 error
    error113, err = error112.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error113
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "registerApplicationDeployment failed: invalid message type")
    return
  }
  result := AiravataRegisterApplicationDeploymentResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Fetch a Application Deployment.
// 
// @param appDeploymentId
//   The identifier for the requested application module
// 
// @return applicationDeployment
//   Returns a application Deployment Object.
// 
// 
// Parameters:
//  - AuthzToken
//  - AppDeploymentId
func (p *AiravataClient) GetApplicationDeployment(ctx context.Context, authzToken *security_model.AuthzToken, appDeploymentId string) (r *application_deployment_model.ApplicationDeploymentDescription, err error) {
  if err = p.sendGetApplicationDeployment(authzToken, appDeploymentId); err != nil { return }
  return p.recvGetApplicationDeployment()
}

func (p *AiravataClient) sendGetApplicationDeployment(authzToken *security_model.AuthzToken, appDeploymentId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getApplicationDeployment", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetApplicationDeploymentArgs{
  AuthzToken : authzToken,
  AppDeploymentId : appDeploymentId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetApplicationDeployment() (value *application_deployment_model.ApplicationDeploymentDescription, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getApplicationDeployment" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getApplicationDeployment failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getApplicationDeployment failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error114 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error115 error
    error115, err = error114.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error115
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getApplicationDeployment failed: invalid message type")
    return
  }
  result := AiravataGetApplicationDeploymentResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Update an Application Deployment.
// 
// @param appDeploymentId
//   The identifier of the requested application deployment to be updated.
// 
// @param appDeployment
//    Application Deployment Object created from the datamodel.
// 
// @return status
//   Returns a success/failure of the update.
// 
// 
// Parameters:
//  - AuthzToken
//  - AppDeploymentId
//  - ApplicationDeployment
func (p *AiravataClient) UpdateApplicationDeployment(ctx context.Context, authzToken *security_model.AuthzToken, appDeploymentId string, applicationDeployment *application_deployment_model.ApplicationDeploymentDescription) (r bool, err error) {
  if err = p.sendUpdateApplicationDeployment(authzToken, appDeploymentId, applicationDeployment); err != nil { return }
  return p.recvUpdateApplicationDeployment()
}

func (p *AiravataClient) sendUpdateApplicationDeployment(authzToken *security_model.AuthzToken, appDeploymentId string, applicationDeployment *application_deployment_model.ApplicationDeploymentDescription)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateApplicationDeployment", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataUpdateApplicationDeploymentArgs{
  AuthzToken : authzToken,
  AppDeploymentId : appDeploymentId,
  ApplicationDeployment : applicationDeployment,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvUpdateApplicationDeployment() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateApplicationDeployment" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateApplicationDeployment failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateApplicationDeployment failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error116 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error117 error
    error117, err = error116.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error117
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateApplicationDeployment failed: invalid message type")
    return
  }
  result := AiravataUpdateApplicationDeploymentResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Delete an Application Deployment.
// 
// @param appDeploymentId
//   The unique identifier of application deployment to be deleted.
// 
// @return status
//   Returns a success/failure of the deletion.
// 
// 
// Parameters:
//  - AuthzToken
//  - AppDeploymentId
func (p *AiravataClient) DeleteApplicationDeployment(ctx context.Context, authzToken *security_model.AuthzToken, appDeploymentId string) (r bool, err error) {
  if err = p.sendDeleteApplicationDeployment(authzToken, appDeploymentId); err != nil { return }
  return p.recvDeleteApplicationDeployment()
}

func (p *AiravataClient) sendDeleteApplicationDeployment(authzToken *security_model.AuthzToken, appDeploymentId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteApplicationDeployment", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataDeleteApplicationDeploymentArgs{
  AuthzToken : authzToken,
  AppDeploymentId : appDeploymentId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvDeleteApplicationDeployment() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteApplicationDeployment" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteApplicationDeployment failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteApplicationDeployment failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error118 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error119 error
    error119, err = error118.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error119
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteApplicationDeployment failed: invalid message type")
    return
  }
  result := AiravataDeleteApplicationDeploymentResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Fetch all Application Deployment Descriptions.
// 
// @param gatewayId
//    ID of the gateway which need to list all available application deployment documentation.
// 
// @return list<applicationDeployment.
//    Returns the list of all application Deployment Objects.
// 
// 
// Parameters:
//  - AuthzToken
//  - GatewayId
func (p *AiravataClient) GetAllApplicationDeployments(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string) (r []*application_deployment_model.ApplicationDeploymentDescription, err error) {
  if err = p.sendGetAllApplicationDeployments(authzToken, gatewayId); err != nil { return }
  return p.recvGetAllApplicationDeployments()
}

func (p *AiravataClient) sendGetAllApplicationDeployments(authzToken *security_model.AuthzToken, gatewayId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getAllApplicationDeployments", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetAllApplicationDeploymentsArgs{
  AuthzToken : authzToken,
  GatewayId : gatewayId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetAllApplicationDeployments() (value []*application_deployment_model.ApplicationDeploymentDescription, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getAllApplicationDeployments" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getAllApplicationDeployments failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getAllApplicationDeployments failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error120 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error121 error
    error121, err = error120.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error121
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getAllApplicationDeployments failed: invalid message type")
    return
  }
  result := AiravataGetAllApplicationDeploymentsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Fetch a list of Deployed Compute Hosts.
// 
// @param appModuleId
//   The identifier for the requested application module
// 
// @return list<string>
//   Returns a list of Deployed Resources.
// 
// 
// Parameters:
//  - AuthzToken
//  - AppModuleId
func (p *AiravataClient) GetAppModuleDeployedResources(ctx context.Context, authzToken *security_model.AuthzToken, appModuleId string) (r []string, err error) {
  if err = p.sendGetAppModuleDeployedResources(authzToken, appModuleId); err != nil { return }
  return p.recvGetAppModuleDeployedResources()
}

func (p *AiravataClient) sendGetAppModuleDeployedResources(authzToken *security_model.AuthzToken, appModuleId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getAppModuleDeployedResources", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetAppModuleDeployedResourcesArgs{
  AuthzToken : authzToken,
  AppModuleId : appModuleId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetAppModuleDeployedResources() (value []string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getAppModuleDeployedResources" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getAppModuleDeployedResources failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getAppModuleDeployedResources failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error122 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error123 error
    error123, err = error122.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error123
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getAppModuleDeployedResources failed: invalid message type")
    return
  }
  result := AiravataGetAppModuleDeployedResourcesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Register a Application Interface.
// 
// @param applicationInterface
//    Application Module Object created from the datamodel.
// 
// @return appInterfaceId
//   Returns a server-side generated airavata application interface globally unique identifier.
// 
// 
// Parameters:
//  - AuthzToken
//  - GatewayId
//  - ApplicationInterface
func (p *AiravataClient) RegisterApplicationInterface(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string, applicationInterface *application_interface_model.ApplicationInterfaceDescription) (r string, err error) {
  if err = p.sendRegisterApplicationInterface(authzToken, gatewayId, applicationInterface); err != nil { return }
  return p.recvRegisterApplicationInterface()
}

func (p *AiravataClient) sendRegisterApplicationInterface(authzToken *security_model.AuthzToken, gatewayId string, applicationInterface *application_interface_model.ApplicationInterfaceDescription)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("registerApplicationInterface", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataRegisterApplicationInterfaceArgs{
  AuthzToken : authzToken,
  GatewayId : gatewayId,
  ApplicationInterface : applicationInterface,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvRegisterApplicationInterface() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "registerApplicationInterface" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "registerApplicationInterface failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "registerApplicationInterface failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error124 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error125 error
    error125, err = error124.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error125
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "registerApplicationInterface failed: invalid message type")
    return
  }
  result := AiravataRegisterApplicationInterfaceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Clone an Application Interface.
// 
// @gatewayId
//    The identifier for the gateway profile to be requested
// 
// @param existingAppInterfaceID
//    Identifier of the existing Application interface you wich to clone.
// 
// @param newApplicationName
//    Name for the new application interface.
// 
// @return appInterfaceId
//    Returns a server-side generated globally unique identifier for the newly cloned application interface.
// 
// 
// Parameters:
//  - AuthzToken
//  - ExistingAppInterfaceID
//  - NewApplicationName_
//  - GatewayId
func (p *AiravataClient) CloneApplicationInterface(ctx context.Context, authzToken *security_model.AuthzToken, existingAppInterfaceID string, newApplicationName string, gatewayId string) (r string, err error) {
  if err = p.sendCloneApplicationInterface(authzToken, existingAppInterfaceID, newApplicationName, gatewayId); err != nil { return }
  return p.recvCloneApplicationInterface()
}

func (p *AiravataClient) sendCloneApplicationInterface(authzToken *security_model.AuthzToken, existingAppInterfaceID string, newApplicationName string, gatewayId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("cloneApplicationInterface", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataCloneApplicationInterfaceArgs{
  AuthzToken : authzToken,
  ExistingAppInterfaceID : existingAppInterfaceID,
  NewApplicationName_ : newApplicationName,
  GatewayId : gatewayId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvCloneApplicationInterface() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "cloneApplicationInterface" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "cloneApplicationInterface failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "cloneApplicationInterface failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error126 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error127 error
    error127, err = error126.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error127
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "cloneApplicationInterface failed: invalid message type")
    return
  }
  result := AiravataCloneApplicationInterfaceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Fetch an Application Interface.
// 
// @param appInterfaceId
//   The identifier for the requested application interface.
// 
// @return applicationInterface
//   Returns an application Interface Object.
// 
// 
// Parameters:
//  - AuthzToken
//  - AppInterfaceId
func (p *AiravataClient) GetApplicationInterface(ctx context.Context, authzToken *security_model.AuthzToken, appInterfaceId string) (r *application_interface_model.ApplicationInterfaceDescription, err error) {
  if err = p.sendGetApplicationInterface(authzToken, appInterfaceId); err != nil { return }
  return p.recvGetApplicationInterface()
}

func (p *AiravataClient) sendGetApplicationInterface(authzToken *security_model.AuthzToken, appInterfaceId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getApplicationInterface", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetApplicationInterfaceArgs{
  AuthzToken : authzToken,
  AppInterfaceId : appInterfaceId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetApplicationInterface() (value *application_interface_model.ApplicationInterfaceDescription, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getApplicationInterface" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getApplicationInterface failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getApplicationInterface failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error128 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error129 error
    error129, err = error128.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error129
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getApplicationInterface failed: invalid message type")
    return
  }
  result := AiravataGetApplicationInterfaceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Update a Application Interface.
// 
// @param appInterfaceId
//   The identifier of the requested application deployment to be updated.
// 
// @param appInterface
//    Application Interface Object created from the datamodel.
// 
// @return status
//   Returns a success/failure of the update.
// 
// 
// Parameters:
//  - AuthzToken
//  - AppInterfaceId
//  - ApplicationInterface
func (p *AiravataClient) UpdateApplicationInterface(ctx context.Context, authzToken *security_model.AuthzToken, appInterfaceId string, applicationInterface *application_interface_model.ApplicationInterfaceDescription) (r bool, err error) {
  if err = p.sendUpdateApplicationInterface(authzToken, appInterfaceId, applicationInterface); err != nil { return }
  return p.recvUpdateApplicationInterface()
}

func (p *AiravataClient) sendUpdateApplicationInterface(authzToken *security_model.AuthzToken, appInterfaceId string, applicationInterface *application_interface_model.ApplicationInterfaceDescription)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateApplicationInterface", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataUpdateApplicationInterfaceArgs{
  AuthzToken : authzToken,
  AppInterfaceId : appInterfaceId,
  ApplicationInterface : applicationInterface,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvUpdateApplicationInterface() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateApplicationInterface" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateApplicationInterface failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateApplicationInterface failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error130 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error131 error
    error131, err = error130.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error131
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateApplicationInterface failed: invalid message type")
    return
  }
  result := AiravataUpdateApplicationInterfaceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Delete an Application Interface.
// 
// @param appInterfaceId
//   The identifier for the requested application interface to be deleted.
// 
// @return status
//   Returns a success/failure of the deletion.
// 
// 
// Parameters:
//  - AuthzToken
//  - AppInterfaceId
func (p *AiravataClient) DeleteApplicationInterface(ctx context.Context, authzToken *security_model.AuthzToken, appInterfaceId string) (r bool, err error) {
  if err = p.sendDeleteApplicationInterface(authzToken, appInterfaceId); err != nil { return }
  return p.recvDeleteApplicationInterface()
}

func (p *AiravataClient) sendDeleteApplicationInterface(authzToken *security_model.AuthzToken, appInterfaceId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteApplicationInterface", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataDeleteApplicationInterfaceArgs{
  AuthzToken : authzToken,
  AppInterfaceId : appInterfaceId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvDeleteApplicationInterface() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteApplicationInterface" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteApplicationInterface failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteApplicationInterface failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error132 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error133 error
    error133, err = error132.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error133
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteApplicationInterface failed: invalid message type")
    return
  }
  result := AiravataDeleteApplicationInterfaceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Fetch name and ID of  Application Interface documents.
// 
// 
// @return map<applicationId, applicationInterfaceNames>
//   Returns a list of application interfaces with corresponsing ID's
// 
// 
// Parameters:
//  - AuthzToken
//  - GatewayId
func (p *AiravataClient) GetAllApplicationInterfaceNames(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string) (r map[string]string, err error) {
  if err = p.sendGetAllApplicationInterfaceNames(authzToken, gatewayId); err != nil { return }
  return p.recvGetAllApplicationInterfaceNames()
}

func (p *AiravataClient) sendGetAllApplicationInterfaceNames(authzToken *security_model.AuthzToken, gatewayId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getAllApplicationInterfaceNames", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetAllApplicationInterfaceNamesArgs{
  AuthzToken : authzToken,
  GatewayId : gatewayId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetAllApplicationInterfaceNames() (value map[string]string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getAllApplicationInterfaceNames" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getAllApplicationInterfaceNames failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getAllApplicationInterfaceNames failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error134 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error135 error
    error135, err = error134.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error135
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getAllApplicationInterfaceNames failed: invalid message type")
    return
  }
  result := AiravataGetAllApplicationInterfaceNamesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Fetch all Application Interface documents.
// 
// 
// @return map<applicationId, applicationInterfaceNames>
//   Returns a list of application interfaces documents (Application Interface ID, name, description, Inputs and Outputs objects).
// 
// 
// Parameters:
//  - AuthzToken
//  - GatewayId
func (p *AiravataClient) GetAllApplicationInterfaces(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string) (r []*application_interface_model.ApplicationInterfaceDescription, err error) {
  if err = p.sendGetAllApplicationInterfaces(authzToken, gatewayId); err != nil { return }
  return p.recvGetAllApplicationInterfaces()
}

func (p *AiravataClient) sendGetAllApplicationInterfaces(authzToken *security_model.AuthzToken, gatewayId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getAllApplicationInterfaces", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetAllApplicationInterfacesArgs{
  AuthzToken : authzToken,
  GatewayId : gatewayId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetAllApplicationInterfaces() (value []*application_interface_model.ApplicationInterfaceDescription, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getAllApplicationInterfaces" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getAllApplicationInterfaces failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getAllApplicationInterfaces failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error136 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error137 error
    error137, err = error136.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error137
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getAllApplicationInterfaces failed: invalid message type")
    return
  }
  result := AiravataGetAllApplicationInterfacesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Fetch the list of Application Inputs.
// 
// @param appInterfaceId
//   The identifier of the application interface which need inputs to be fetched.
// 
// @return list<application_interface_model.InputDataObjectType>
//   Returns a list of application inputs.
// 
// 
// Parameters:
//  - AuthzToken
//  - AppInterfaceId
func (p *AiravataClient) GetApplicationInputs(ctx context.Context, authzToken *security_model.AuthzToken, appInterfaceId string) (r []*application_io_models.InputDataObjectType, err error) {
  if err = p.sendGetApplicationInputs(authzToken, appInterfaceId); err != nil { return }
  return p.recvGetApplicationInputs()
}

func (p *AiravataClient) sendGetApplicationInputs(authzToken *security_model.AuthzToken, appInterfaceId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getApplicationInputs", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetApplicationInputsArgs{
  AuthzToken : authzToken,
  AppInterfaceId : appInterfaceId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetApplicationInputs() (value []*application_io_models.InputDataObjectType, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getApplicationInputs" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getApplicationInputs failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getApplicationInputs failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error138 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error139 error
    error139, err = error138.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error139
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getApplicationInputs failed: invalid message type")
    return
  }
  result := AiravataGetApplicationInputsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Fetch list of Application Outputs.
// 
// @param appInterfaceId
//   The identifier of the application interface which need outputs to be fetched.
// 
// @return list<application_interface_model.OutputDataObjectType>
//   Returns a list of application outputs.
// 
// 
// Parameters:
//  - AuthzToken
//  - AppInterfaceId
func (p *AiravataClient) GetApplicationOutputs(ctx context.Context, authzToken *security_model.AuthzToken, appInterfaceId string) (r []*application_io_models.OutputDataObjectType, err error) {
  if err = p.sendGetApplicationOutputs(authzToken, appInterfaceId); err != nil { return }
  return p.recvGetApplicationOutputs()
}

func (p *AiravataClient) sendGetApplicationOutputs(authzToken *security_model.AuthzToken, appInterfaceId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getApplicationOutputs", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetApplicationOutputsArgs{
  AuthzToken : authzToken,
  AppInterfaceId : appInterfaceId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetApplicationOutputs() (value []*application_io_models.OutputDataObjectType, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getApplicationOutputs" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getApplicationOutputs failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getApplicationOutputs failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error140 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error141 error
    error141, err = error140.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error141
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getApplicationOutputs failed: invalid message type")
    return
  }
  result := AiravataGetApplicationOutputsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Fetch a list of all deployed Compute Hosts for a given application interfaces.
// 
// @param appInterfaceId
//   The identifier for the requested application interface.
// 
// @return map<computeResourceId, computeResourceName>
//   A map of registered compute resource id's and their corresponding hostnames.
//   Deployments of each modules listed within the interfaces will be listed.
// 
// 
// Parameters:
//  - AuthzToken
//  - AppInterfaceId
func (p *AiravataClient) GetAvailableAppInterfaceComputeResources(ctx context.Context, authzToken *security_model.AuthzToken, appInterfaceId string) (r map[string]string, err error) {
  if err = p.sendGetAvailableAppInterfaceComputeResources(authzToken, appInterfaceId); err != nil { return }
  return p.recvGetAvailableAppInterfaceComputeResources()
}

func (p *AiravataClient) sendGetAvailableAppInterfaceComputeResources(authzToken *security_model.AuthzToken, appInterfaceId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getAvailableAppInterfaceComputeResources", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetAvailableAppInterfaceComputeResourcesArgs{
  AuthzToken : authzToken,
  AppInterfaceId : appInterfaceId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetAvailableAppInterfaceComputeResources() (value map[string]string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getAvailableAppInterfaceComputeResources" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getAvailableAppInterfaceComputeResources failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getAvailableAppInterfaceComputeResources failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error142 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error143 error
    error143, err = error142.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error143
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getAvailableAppInterfaceComputeResources failed: invalid message type")
    return
  }
  result := AiravataGetAvailableAppInterfaceComputeResourcesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Register a Compute Resource.
// 
// @param computeResourceDescription
//    Compute Resource Object created from the datamodel.
// 
// @return computeResourceId
//   Returns a server-side generated airavata compute resource globally unique identifier.
// 
// 
// Parameters:
//  - AuthzToken
//  - ComputeResourceDescription
func (p *AiravataClient) RegisterComputeResource(ctx context.Context, authzToken *security_model.AuthzToken, computeResourceDescription *compute_resource_model.ComputeResourceDescription) (r string, err error) {
  if err = p.sendRegisterComputeResource(authzToken, computeResourceDescription); err != nil { return }
  return p.recvRegisterComputeResource()
}

func (p *AiravataClient) sendRegisterComputeResource(authzToken *security_model.AuthzToken, computeResourceDescription *compute_resource_model.ComputeResourceDescription)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("registerComputeResource", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataRegisterComputeResourceArgs{
  AuthzToken : authzToken,
  ComputeResourceDescription : computeResourceDescription,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvRegisterComputeResource() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "registerComputeResource" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "registerComputeResource failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "registerComputeResource failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error144 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error145 error
    error145, err = error144.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error145
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "registerComputeResource failed: invalid message type")
    return
  }
  result := AiravataRegisterComputeResourceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Fetch the given Compute Resource.
// 
// @param computeResourceId
//   The identifier for the requested compute resource
// 
// @return computeResourceDescription
//    Compute Resource Object created from the datamodel..
// 
// 
// Parameters:
//  - AuthzToken
//  - ComputeResourceId
func (p *AiravataClient) GetComputeResource(ctx context.Context, authzToken *security_model.AuthzToken, computeResourceId string) (r *compute_resource_model.ComputeResourceDescription, err error) {
  if err = p.sendGetComputeResource(authzToken, computeResourceId); err != nil { return }
  return p.recvGetComputeResource()
}

func (p *AiravataClient) sendGetComputeResource(authzToken *security_model.AuthzToken, computeResourceId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getComputeResource", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetComputeResourceArgs{
  AuthzToken : authzToken,
  ComputeResourceId : computeResourceId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetComputeResource() (value *compute_resource_model.ComputeResourceDescription, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getComputeResource" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getComputeResource failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getComputeResource failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error146 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error147 error
    error147, err = error146.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error147
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getComputeResource failed: invalid message type")
    return
  }
  result := AiravataGetComputeResourceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Fetch all registered Compute Resources.
// 
// @return A map of registered compute resource id's and thier corresponding hostnames.
//    Compute Resource Object created from the datamodel..
// 
// 
// Parameters:
//  - AuthzToken
func (p *AiravataClient) GetAllComputeResourceNames(ctx context.Context, authzToken *security_model.AuthzToken) (r map[string]string, err error) {
  if err = p.sendGetAllComputeResourceNames(authzToken); err != nil { return }
  return p.recvGetAllComputeResourceNames()
}

func (p *AiravataClient) sendGetAllComputeResourceNames(authzToken *security_model.AuthzToken)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getAllComputeResourceNames", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetAllComputeResourceNamesArgs{
  AuthzToken : authzToken,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetAllComputeResourceNames() (value map[string]string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getAllComputeResourceNames" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getAllComputeResourceNames failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getAllComputeResourceNames failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error148 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error149 error
    error149, err = error148.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error149
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getAllComputeResourceNames failed: invalid message type")
    return
  }
  result := AiravataGetAllComputeResourceNamesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Update a Compute Resource.
// 
// @param computeResourceId
//   The identifier for the requested compute resource to be updated.
// 
// @param computeResourceDescription
//    Compute Resource Object created from the datamodel.
// 
// @return status
//   Returns a success/failure of the update.
// 
// 
// Parameters:
//  - AuthzToken
//  - ComputeResourceId
//  - ComputeResourceDescription
func (p *AiravataClient) UpdateComputeResource(ctx context.Context, authzToken *security_model.AuthzToken, computeResourceId string, computeResourceDescription *compute_resource_model.ComputeResourceDescription) (r bool, err error) {
  if err = p.sendUpdateComputeResource(authzToken, computeResourceId, computeResourceDescription); err != nil { return }
  return p.recvUpdateComputeResource()
}

func (p *AiravataClient) sendUpdateComputeResource(authzToken *security_model.AuthzToken, computeResourceId string, computeResourceDescription *compute_resource_model.ComputeResourceDescription)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateComputeResource", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataUpdateComputeResourceArgs{
  AuthzToken : authzToken,
  ComputeResourceId : computeResourceId,
  ComputeResourceDescription : computeResourceDescription,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvUpdateComputeResource() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateComputeResource" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateComputeResource failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateComputeResource failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error150 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error151 error
    error151, err = error150.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error151
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateComputeResource failed: invalid message type")
    return
  }
  result := AiravataUpdateComputeResourceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Delete a Compute Resource.
// 
// @param computeResourceId
//   The identifier for the requested compute resource to be deleted.
// 
// @return status
//   Returns a success/failure of the deletion.
// 
// 
// Parameters:
//  - AuthzToken
//  - ComputeResourceId
func (p *AiravataClient) DeleteComputeResource(ctx context.Context, authzToken *security_model.AuthzToken, computeResourceId string) (r bool, err error) {
  if err = p.sendDeleteComputeResource(authzToken, computeResourceId); err != nil { return }
  return p.recvDeleteComputeResource()
}

func (p *AiravataClient) sendDeleteComputeResource(authzToken *security_model.AuthzToken, computeResourceId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteComputeResource", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataDeleteComputeResourceArgs{
  AuthzToken : authzToken,
  ComputeResourceId : computeResourceId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvDeleteComputeResource() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteComputeResource" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteComputeResource failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteComputeResource failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error152 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error153 error
    error153, err = error152.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error153
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteComputeResource failed: invalid message type")
    return
  }
  result := AiravataDeleteComputeResourceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Register a Storage Resource.
// 
// @param storageResourceDescription
//    Storge Resource Object created from the datamodel.
// 
// @return storageResourceId
//   Returns a server-side generated airavata storage resource globally unique identifier.
// 
// 
// Parameters:
//  - AuthzToken
//  - StorageResourceDescription
func (p *AiravataClient) RegisterStorageResource(ctx context.Context, authzToken *security_model.AuthzToken, storageResourceDescription *storage_resource_model.StorageResourceDescription) (r string, err error) {
  if err = p.sendRegisterStorageResource(authzToken, storageResourceDescription); err != nil { return }
  return p.recvRegisterStorageResource()
}

func (p *AiravataClient) sendRegisterStorageResource(authzToken *security_model.AuthzToken, storageResourceDescription *storage_resource_model.StorageResourceDescription)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("registerStorageResource", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataRegisterStorageResourceArgs{
  AuthzToken : authzToken,
  StorageResourceDescription : storageResourceDescription,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvRegisterStorageResource() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "registerStorageResource" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "registerStorageResource failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "registerStorageResource failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error154 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error155 error
    error155, err = error154.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error155
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "registerStorageResource failed: invalid message type")
    return
  }
  result := AiravataRegisterStorageResourceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Fetch the given Storage Resource.
// 
// @param storageResourceId
//   The identifier for the requested storage resource
// 
// @return storageResourceDescription
//    Storage Resource Object created from the datamodel..
// 
// 
// Parameters:
//  - AuthzToken
//  - StorageResourceId
func (p *AiravataClient) GetStorageResource(ctx context.Context, authzToken *security_model.AuthzToken, storageResourceId string) (r *storage_resource_model.StorageResourceDescription, err error) {
  if err = p.sendGetStorageResource(authzToken, storageResourceId); err != nil { return }
  return p.recvGetStorageResource()
}

func (p *AiravataClient) sendGetStorageResource(authzToken *security_model.AuthzToken, storageResourceId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getStorageResource", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetStorageResourceArgs{
  AuthzToken : authzToken,
  StorageResourceId : storageResourceId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetStorageResource() (value *storage_resource_model.StorageResourceDescription, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getStorageResource" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getStorageResource failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getStorageResource failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error156 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error157 error
    error157, err = error156.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error157
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getStorageResource failed: invalid message type")
    return
  }
  result := AiravataGetStorageResourceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Fetch all registered Storage Resources.
// 
// @return A map of registered compute resource id's and thier corresponding hostnames.
//    Compute Resource Object created from the datamodel..
// 
// 
// Parameters:
//  - AuthzToken
func (p *AiravataClient) GetAllStorageResourceNames(ctx context.Context, authzToken *security_model.AuthzToken) (r map[string]string, err error) {
  if err = p.sendGetAllStorageResourceNames(authzToken); err != nil { return }
  return p.recvGetAllStorageResourceNames()
}

func (p *AiravataClient) sendGetAllStorageResourceNames(authzToken *security_model.AuthzToken)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getAllStorageResourceNames", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetAllStorageResourceNamesArgs{
  AuthzToken : authzToken,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetAllStorageResourceNames() (value map[string]string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getAllStorageResourceNames" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getAllStorageResourceNames failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getAllStorageResourceNames failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error158 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error159 error
    error159, err = error158.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error159
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getAllStorageResourceNames failed: invalid message type")
    return
  }
  result := AiravataGetAllStorageResourceNamesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Update a Storage Resource.
// 
// @param storageResourceId
//   The identifier for the requested compute resource to be updated.
// 
// @param storageResourceDescription
//    Storage Resource Object created from the datamodel.
// 
// @return status
//   Returns a success/failure of the update.
// 
// 
// Parameters:
//  - AuthzToken
//  - StorageResourceId
//  - StorageResourceDescription
func (p *AiravataClient) UpdateStorageResource(ctx context.Context, authzToken *security_model.AuthzToken, storageResourceId string, storageResourceDescription *storage_resource_model.StorageResourceDescription) (r bool, err error) {
  if err = p.sendUpdateStorageResource(authzToken, storageResourceId, storageResourceDescription); err != nil { return }
  return p.recvUpdateStorageResource()
}

func (p *AiravataClient) sendUpdateStorageResource(authzToken *security_model.AuthzToken, storageResourceId string, storageResourceDescription *storage_resource_model.StorageResourceDescription)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateStorageResource", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataUpdateStorageResourceArgs{
  AuthzToken : authzToken,
  StorageResourceId : storageResourceId,
  StorageResourceDescription : storageResourceDescription,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvUpdateStorageResource() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateStorageResource" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateStorageResource failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateStorageResource failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error160 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error161 error
    error161, err = error160.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error161
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateStorageResource failed: invalid message type")
    return
  }
  result := AiravataUpdateStorageResourceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Delete a Storage Resource.
// 
// @param storageResourceId
//   The identifier of the requested compute resource to be deleted.
// 
// @return status
//   Returns a success/failure of the deletion.
// 
// 
// Parameters:
//  - AuthzToken
//  - StorageResourceId
func (p *AiravataClient) DeleteStorageResource(ctx context.Context, authzToken *security_model.AuthzToken, storageResourceId string) (r bool, err error) {
  if err = p.sendDeleteStorageResource(authzToken, storageResourceId); err != nil { return }
  return p.recvDeleteStorageResource()
}

func (p *AiravataClient) sendDeleteStorageResource(authzToken *security_model.AuthzToken, storageResourceId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteStorageResource", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataDeleteStorageResourceArgs{
  AuthzToken : authzToken,
  StorageResourceId : storageResourceId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvDeleteStorageResource() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteStorageResource" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteStorageResource failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteStorageResource failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error162 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error163 error
    error163, err = error162.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error163
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteStorageResource failed: invalid message type")
    return
  }
  result := AiravataDeleteStorageResourceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Add a Local Job Submission details to a compute resource
//  App catalog will return a jobSubmissionInterfaceId which will be added to the jobSubmissionInterfaces.
// 
// @param computeResourceId
//   The identifier of the compute resource to which JobSubmission protocol to be added
// 
// @param priorityOrder
//   Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.
// 
// @param localSubmission
//   The LOCALSubmission object to be added to the resource.
// 
// @return status
//   Returns the unique job submission id.
// 
// 
// Parameters:
//  - AuthzToken
//  - ComputeResourceId
//  - PriorityOrder
//  - LocalSubmission
func (p *AiravataClient) AddLocalSubmissionDetails(ctx context.Context, authzToken *security_model.AuthzToken, computeResourceId string, priorityOrder int32, localSubmission *compute_resource_model.LOCALSubmission) (r string, err error) {
  if err = p.sendAddLocalSubmissionDetails(authzToken, computeResourceId, priorityOrder, localSubmission); err != nil { return }
  return p.recvAddLocalSubmissionDetails()
}

func (p *AiravataClient) sendAddLocalSubmissionDetails(authzToken *security_model.AuthzToken, computeResourceId string, priorityOrder int32, localSubmission *compute_resource_model.LOCALSubmission)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("addLocalSubmissionDetails", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataAddLocalSubmissionDetailsArgs{
  AuthzToken : authzToken,
  ComputeResourceId : computeResourceId,
  PriorityOrder : priorityOrder,
  LocalSubmission : localSubmission,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvAddLocalSubmissionDetails() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "addLocalSubmissionDetails" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "addLocalSubmissionDetails failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "addLocalSubmissionDetails failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error164 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error165 error
    error165, err = error164.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error165
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addLocalSubmissionDetails failed: invalid message type")
    return
  }
  result := AiravataAddLocalSubmissionDetailsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Update the given Local Job Submission details
// 
// @param jobSubmissionInterfaceId
//   The identifier of the JobSubmission Interface to be updated.
// 
// @param localSubmission
//   The LOCALSubmission object to be updated.
// 
// @return status
//   Returns a success/failure of the deletion.
// 
// 
// Parameters:
//  - AuthzToken
//  - JobSubmissionInterfaceId
//  - LocalSubmission
func (p *AiravataClient) UpdateLocalSubmissionDetails(ctx context.Context, authzToken *security_model.AuthzToken, jobSubmissionInterfaceId string, localSubmission *compute_resource_model.LOCALSubmission) (r bool, err error) {
  if err = p.sendUpdateLocalSubmissionDetails(authzToken, jobSubmissionInterfaceId, localSubmission); err != nil { return }
  return p.recvUpdateLocalSubmissionDetails()
}

func (p *AiravataClient) sendUpdateLocalSubmissionDetails(authzToken *security_model.AuthzToken, jobSubmissionInterfaceId string, localSubmission *compute_resource_model.LOCALSubmission)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateLocalSubmissionDetails", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataUpdateLocalSubmissionDetailsArgs{
  AuthzToken : authzToken,
  JobSubmissionInterfaceId : jobSubmissionInterfaceId,
  LocalSubmission : localSubmission,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvUpdateLocalSubmissionDetails() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateLocalSubmissionDetails" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateLocalSubmissionDetails failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateLocalSubmissionDetails failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error166 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error167 error
    error167, err = error166.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error167
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateLocalSubmissionDetails failed: invalid message type")
    return
  }
  result := AiravataUpdateLocalSubmissionDetailsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// This method returns localJobSubmission object
// @param jobSubmissionInterfaceId
//   The identifier of the JobSubmission Interface to be retrieved.
//  @return LOCALSubmission instance
// 
// 
// Parameters:
//  - AuthzToken
//  - JobSubmissionId
func (p *AiravataClient) GetLocalJobSubmission(ctx context.Context, authzToken *security_model.AuthzToken, jobSubmissionId string) (r *compute_resource_model.LOCALSubmission, err error) {
  if err = p.sendGetLocalJobSubmission(authzToken, jobSubmissionId); err != nil { return }
  return p.recvGetLocalJobSubmission()
}

func (p *AiravataClient) sendGetLocalJobSubmission(authzToken *security_model.AuthzToken, jobSubmissionId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getLocalJobSubmission", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetLocalJobSubmissionArgs{
  AuthzToken : authzToken,
  JobSubmissionId : jobSubmissionId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetLocalJobSubmission() (value *compute_resource_model.LOCALSubmission, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getLocalJobSubmission" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getLocalJobSubmission failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getLocalJobSubmission failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error168 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error169 error
    error169, err = error168.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error169
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getLocalJobSubmission failed: invalid message type")
    return
  }
  result := AiravataGetLocalJobSubmissionResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Add a SSH Job Submission details to a compute resource
//  App catalog will return a jobSubmissionInterfaceId which will be added to the jobSubmissionInterfaces.
// 
// @param computeResourceId
//   The identifier of the compute resource to which JobSubmission protocol to be added
// 
// @param priorityOrder
//   Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.
// 
// @param sshJobSubmission
//   The SSHJobSubmission object to be added to the resource.
// 
// @return status
//   Returns the unique job submission id.
// 
// 
// Parameters:
//  - AuthzToken
//  - ComputeResourceId
//  - PriorityOrder
//  - SshJobSubmission
func (p *AiravataClient) AddSSHJobSubmissionDetails(ctx context.Context, authzToken *security_model.AuthzToken, computeResourceId string, priorityOrder int32, sshJobSubmission *compute_resource_model.SSHJobSubmission) (r string, err error) {
  if err = p.sendAddSSHJobSubmissionDetails(authzToken, computeResourceId, priorityOrder, sshJobSubmission); err != nil { return }
  return p.recvAddSSHJobSubmissionDetails()
}

func (p *AiravataClient) sendAddSSHJobSubmissionDetails(authzToken *security_model.AuthzToken, computeResourceId string, priorityOrder int32, sshJobSubmission *compute_resource_model.SSHJobSubmission)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("addSSHJobSubmissionDetails", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataAddSSHJobSubmissionDetailsArgs{
  AuthzToken : authzToken,
  ComputeResourceId : computeResourceId,
  PriorityOrder : priorityOrder,
  SshJobSubmission : sshJobSubmission,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvAddSSHJobSubmissionDetails() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "addSSHJobSubmissionDetails" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "addSSHJobSubmissionDetails failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "addSSHJobSubmissionDetails failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error170 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error171 error
    error171, err = error170.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error171
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addSSHJobSubmissionDetails failed: invalid message type")
    return
  }
  result := AiravataAddSSHJobSubmissionDetailsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Add a SSH_FORK Job Submission details to a compute resource
//  App catalog will return a jobSubmissionInterfaceId which will be added to the jobSubmissionInterfaces.
// 
// @param computeResourceId
//   The identifier of the compute resource to which JobSubmission protocol to be added
// 
// @param priorityOrder
//   Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.
// 
// @param sshJobSubmission
//   The SSHJobSubmission object to be added to the resource.
// 
// @return status
//   Returns the unique job submission id.
// 
// 
// Parameters:
//  - AuthzToken
//  - ComputeResourceId
//  - PriorityOrder
//  - SshJobSubmission
func (p *AiravataClient) AddSSHForkJobSubmissionDetails(ctx context.Context, authzToken *security_model.AuthzToken, computeResourceId string, priorityOrder int32, sshJobSubmission *compute_resource_model.SSHJobSubmission) (r string, err error) {
  if err = p.sendAddSSHForkJobSubmissionDetails(authzToken, computeResourceId, priorityOrder, sshJobSubmission); err != nil { return }
  return p.recvAddSSHForkJobSubmissionDetails()
}

func (p *AiravataClient) sendAddSSHForkJobSubmissionDetails(authzToken *security_model.AuthzToken, computeResourceId string, priorityOrder int32, sshJobSubmission *compute_resource_model.SSHJobSubmission)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("addSSHForkJobSubmissionDetails", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataAddSSHForkJobSubmissionDetailsArgs{
  AuthzToken : authzToken,
  ComputeResourceId : computeResourceId,
  PriorityOrder : priorityOrder,
  SshJobSubmission : sshJobSubmission,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvAddSSHForkJobSubmissionDetails() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "addSSHForkJobSubmissionDetails" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "addSSHForkJobSubmissionDetails failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "addSSHForkJobSubmissionDetails failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error172 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error173 error
    error173, err = error172.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error173
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addSSHForkJobSubmissionDetails failed: invalid message type")
    return
  }
  result := AiravataAddSSHForkJobSubmissionDetailsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// This method returns SSHJobSubmission object
// @param jobSubmissionInterfaceId
//   The identifier of the JobSubmission Interface to be retrieved.
//  @return SSHJobSubmission instance
// 
// 
// Parameters:
//  - AuthzToken
//  - JobSubmissionId
func (p *AiravataClient) GetSSHJobSubmission(ctx context.Context, authzToken *security_model.AuthzToken, jobSubmissionId string) (r *compute_resource_model.SSHJobSubmission, err error) {
  if err = p.sendGetSSHJobSubmission(authzToken, jobSubmissionId); err != nil { return }
  return p.recvGetSSHJobSubmission()
}

func (p *AiravataClient) sendGetSSHJobSubmission(authzToken *security_model.AuthzToken, jobSubmissionId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getSSHJobSubmission", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetSSHJobSubmissionArgs{
  AuthzToken : authzToken,
  JobSubmissionId : jobSubmissionId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetSSHJobSubmission() (value *compute_resource_model.SSHJobSubmission, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getSSHJobSubmission" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getSSHJobSubmission failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getSSHJobSubmission failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error174 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error175 error
    error175, err = error174.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error175
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getSSHJobSubmission failed: invalid message type")
    return
  }
  result := AiravataGetSSHJobSubmissionResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Add a UNICORE Job Submission details to a compute resource
//  App catalog will return a jobSubmissionInterfaceId which will be added to the jobSubmissionInterfaces.
// 
// @param computeResourceId
//   The identifier of the compute resource to which JobSubmission protocol to be added
// 
// @param priorityOrder
//   Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.
// 
// @param unicoreJobSubmission
//   The UnicoreJobSubmission object to be added to the resource.
// 
// @return status
//  Returns the unique job submission id.
// 
// 
// Parameters:
//  - AuthzToken
//  - ComputeResourceId
//  - PriorityOrder
//  - UnicoreJobSubmission
func (p *AiravataClient) AddUNICOREJobSubmissionDetails(ctx context.Context, authzToken *security_model.AuthzToken, computeResourceId string, priorityOrder int32, unicoreJobSubmission *compute_resource_model.UnicoreJobSubmission) (r string, err error) {
  if err = p.sendAddUNICOREJobSubmissionDetails(authzToken, computeResourceId, priorityOrder, unicoreJobSubmission); err != nil { return }
  return p.recvAddUNICOREJobSubmissionDetails()
}

func (p *AiravataClient) sendAddUNICOREJobSubmissionDetails(authzToken *security_model.AuthzToken, computeResourceId string, priorityOrder int32, unicoreJobSubmission *compute_resource_model.UnicoreJobSubmission)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("addUNICOREJobSubmissionDetails", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataAddUNICOREJobSubmissionDetailsArgs{
  AuthzToken : authzToken,
  ComputeResourceId : computeResourceId,
  PriorityOrder : priorityOrder,
  UnicoreJobSubmission : unicoreJobSubmission,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvAddUNICOREJobSubmissionDetails() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "addUNICOREJobSubmissionDetails" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "addUNICOREJobSubmissionDetails failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "addUNICOREJobSubmissionDetails failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error176 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error177 error
    error177, err = error176.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error177
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addUNICOREJobSubmissionDetails failed: invalid message type")
    return
  }
  result := AiravataAddUNICOREJobSubmissionDetailsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

//   *
//   * This method returns UnicoreJobSubmission object
//   *
//   * @param jobSubmissionInterfaceId
//   *   The identifier of the JobSubmission Interface to be retrieved.
//   *  @return UnicoreJobSubmission instance
//   *
// *
// 
// Parameters:
//  - AuthzToken
//  - JobSubmissionId
func (p *AiravataClient) GetUnicoreJobSubmission(ctx context.Context, authzToken *security_model.AuthzToken, jobSubmissionId string) (r *compute_resource_model.UnicoreJobSubmission, err error) {
  if err = p.sendGetUnicoreJobSubmission(authzToken, jobSubmissionId); err != nil { return }
  return p.recvGetUnicoreJobSubmission()
}

func (p *AiravataClient) sendGetUnicoreJobSubmission(authzToken *security_model.AuthzToken, jobSubmissionId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getUnicoreJobSubmission", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetUnicoreJobSubmissionArgs{
  AuthzToken : authzToken,
  JobSubmissionId : jobSubmissionId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetUnicoreJobSubmission() (value *compute_resource_model.UnicoreJobSubmission, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getUnicoreJobSubmission" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getUnicoreJobSubmission failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUnicoreJobSubmission failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error178 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error179 error
    error179, err = error178.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error179
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUnicoreJobSubmission failed: invalid message type")
    return
  }
  result := AiravataGetUnicoreJobSubmissionResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

//    *
//    * Add a Cloud Job Submission details to a compute resource
//    *  App catalog will return a jobSubmissionInterfaceId which will be added to the jobSubmissionInterfaces.
//    *
//    * @param computeResourceId
//    *   The identifier of the compute resource to which JobSubmission protocol to be added
//    *
//    * @param priorityOrder
//    *   Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.
//    *
//    * @param sshJobSubmission
//    *   The SSHJobSubmission object to be added to the resource.
//    *
//    * @return status
//    *   Returns the unique job submission id.
//    *
// *
// 
// Parameters:
//  - AuthzToken
//  - ComputeResourceId
//  - PriorityOrder
//  - CloudSubmission
func (p *AiravataClient) AddCloudJobSubmissionDetails(ctx context.Context, authzToken *security_model.AuthzToken, computeResourceId string, priorityOrder int32, cloudSubmission *compute_resource_model.CloudJobSubmission) (r string, err error) {
  if err = p.sendAddCloudJobSubmissionDetails(authzToken, computeResourceId, priorityOrder, cloudSubmission); err != nil { return }
  return p.recvAddCloudJobSubmissionDetails()
}

func (p *AiravataClient) sendAddCloudJobSubmissionDetails(authzToken *security_model.AuthzToken, computeResourceId string, priorityOrder int32, cloudSubmission *compute_resource_model.CloudJobSubmission)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("addCloudJobSubmissionDetails", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataAddCloudJobSubmissionDetailsArgs{
  AuthzToken : authzToken,
  ComputeResourceId : computeResourceId,
  PriorityOrder : priorityOrder,
  CloudSubmission : cloudSubmission,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvAddCloudJobSubmissionDetails() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "addCloudJobSubmissionDetails" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "addCloudJobSubmissionDetails failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "addCloudJobSubmissionDetails failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error180 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error181 error
    error181, err = error180.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error181
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addCloudJobSubmissionDetails failed: invalid message type")
    return
  }
  result := AiravataAddCloudJobSubmissionDetailsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

//    *
//    * This method returns cloudJobSubmission object
//    * @param jobSubmissionInterfaceI
//        *   The identifier of the JobSubmission Interface to be retrieved.
//    *  @return CloudJobSubmission instance
// *
// 
// Parameters:
//  - AuthzToken
//  - JobSubmissionId
func (p *AiravataClient) GetCloudJobSubmission(ctx context.Context, authzToken *security_model.AuthzToken, jobSubmissionId string) (r *compute_resource_model.CloudJobSubmission, err error) {
  if err = p.sendGetCloudJobSubmission(authzToken, jobSubmissionId); err != nil { return }
  return p.recvGetCloudJobSubmission()
}

func (p *AiravataClient) sendGetCloudJobSubmission(authzToken *security_model.AuthzToken, jobSubmissionId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getCloudJobSubmission", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetCloudJobSubmissionArgs{
  AuthzToken : authzToken,
  JobSubmissionId : jobSubmissionId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetCloudJobSubmission() (value *compute_resource_model.CloudJobSubmission, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getCloudJobSubmission" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getCloudJobSubmission failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getCloudJobSubmission failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error182 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error183 error
    error183, err = error182.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error183
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getCloudJobSubmission failed: invalid message type")
    return
  }
  result := AiravataGetCloudJobSubmissionResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Update the given SSH Job Submission details
// 
// @param jobSubmissionInterfaceId
//   The identifier of the JobSubmission Interface to be updated.
// 
// @param sshJobSubmission
//   The SSHJobSubmission object to be updated.
// 
// @return status
//   Returns a success/failure of the update.
// 
// 
// Parameters:
//  - AuthzToken
//  - JobSubmissionInterfaceId
//  - SshJobSubmission
func (p *AiravataClient) UpdateSSHJobSubmissionDetails(ctx context.Context, authzToken *security_model.AuthzToken, jobSubmissionInterfaceId string, sshJobSubmission *compute_resource_model.SSHJobSubmission) (r bool, err error) {
  if err = p.sendUpdateSSHJobSubmissionDetails(authzToken, jobSubmissionInterfaceId, sshJobSubmission); err != nil { return }
  return p.recvUpdateSSHJobSubmissionDetails()
}

func (p *AiravataClient) sendUpdateSSHJobSubmissionDetails(authzToken *security_model.AuthzToken, jobSubmissionInterfaceId string, sshJobSubmission *compute_resource_model.SSHJobSubmission)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateSSHJobSubmissionDetails", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataUpdateSSHJobSubmissionDetailsArgs{
  AuthzToken : authzToken,
  JobSubmissionInterfaceId : jobSubmissionInterfaceId,
  SshJobSubmission : sshJobSubmission,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvUpdateSSHJobSubmissionDetails() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateSSHJobSubmissionDetails" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateSSHJobSubmissionDetails failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateSSHJobSubmissionDetails failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error184 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error185 error
    error185, err = error184.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error185
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateSSHJobSubmissionDetails failed: invalid message type")
    return
  }
  result := AiravataUpdateSSHJobSubmissionDetailsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Update the cloud Job Submission details
// 
// @param jobSubmissionInterfaceId
//   The identifier of the JobSubmission Interface to be updated.
// 
// @param cloudJobSubmission
//   The CloudJobSubmission object to be updated.
// 
// @return status
//   Returns a success/failure of the update.
// 
// 
// Parameters:
//  - AuthzToken
//  - JobSubmissionInterfaceId
//  - SshJobSubmission
func (p *AiravataClient) UpdateCloudJobSubmissionDetails(ctx context.Context, authzToken *security_model.AuthzToken, jobSubmissionInterfaceId string, sshJobSubmission *compute_resource_model.CloudJobSubmission) (r bool, err error) {
  if err = p.sendUpdateCloudJobSubmissionDetails(authzToken, jobSubmissionInterfaceId, sshJobSubmission); err != nil { return }
  return p.recvUpdateCloudJobSubmissionDetails()
}

func (p *AiravataClient) sendUpdateCloudJobSubmissionDetails(authzToken *security_model.AuthzToken, jobSubmissionInterfaceId string, sshJobSubmission *compute_resource_model.CloudJobSubmission)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateCloudJobSubmissionDetails", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataUpdateCloudJobSubmissionDetailsArgs{
  AuthzToken : authzToken,
  JobSubmissionInterfaceId : jobSubmissionInterfaceId,
  SshJobSubmission : sshJobSubmission,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvUpdateCloudJobSubmissionDetails() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateCloudJobSubmissionDetails" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateCloudJobSubmissionDetails failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateCloudJobSubmissionDetails failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error186 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error187 error
    error187, err = error186.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error187
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateCloudJobSubmissionDetails failed: invalid message type")
    return
  }
  result := AiravataUpdateCloudJobSubmissionDetailsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Update the UNIOCRE Job Submission details
// 
// @param jobSubmissionInterfaceId
//   The identifier of the JobSubmission Interface to be updated.
// 
// @param UnicoreJobSubmission
//   The UnicoreJobSubmission object to be updated.
// 
// @return status
//   Returns a success/failure of the update.
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - JobSubmissionInterfaceId
//  - UnicoreJobSubmission
func (p *AiravataClient) UpdateUnicoreJobSubmissionDetails(ctx context.Context, authzToken *security_model.AuthzToken, jobSubmissionInterfaceId string, unicoreJobSubmission *compute_resource_model.UnicoreJobSubmission) (r bool, err error) {
  if err = p.sendUpdateUnicoreJobSubmissionDetails(authzToken, jobSubmissionInterfaceId, unicoreJobSubmission); err != nil { return }
  return p.recvUpdateUnicoreJobSubmissionDetails()
}

func (p *AiravataClient) sendUpdateUnicoreJobSubmissionDetails(authzToken *security_model.AuthzToken, jobSubmissionInterfaceId string, unicoreJobSubmission *compute_resource_model.UnicoreJobSubmission)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateUnicoreJobSubmissionDetails", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataUpdateUnicoreJobSubmissionDetailsArgs{
  AuthzToken : authzToken,
  JobSubmissionInterfaceId : jobSubmissionInterfaceId,
  UnicoreJobSubmission : unicoreJobSubmission,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvUpdateUnicoreJobSubmissionDetails() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateUnicoreJobSubmissionDetails" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateUnicoreJobSubmissionDetails failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateUnicoreJobSubmissionDetails failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error188 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error189 error
    error189, err = error188.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error189
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateUnicoreJobSubmissionDetails failed: invalid message type")
    return
  }
  result := AiravataUpdateUnicoreJobSubmissionDetailsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Add a Local data movement details to a compute resource
//  App catalog will return a dataMovementInterfaceId which will be added to the dataMovementInterfaces.
// 
// @param productUri
//   The identifier of the compute resource to which JobSubmission protocol to be added
// 
// @param DMType
//   DMType object to be added to the resource.
// 
// @param priorityOrder
//   Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.
// 
// @param localDataMovement
//   The LOCALDataMovement object to be added to the resource.
// 
// @return status
//   Returns the unique job submission id.
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - ProductUri
//  - DataMoveType
//  - PriorityOrder
//  - LocalDataMovement
func (p *AiravataClient) AddLocalDataMovementDetails(ctx context.Context, authzToken *security_model.AuthzToken, productUri string, dataMoveType data_movement_models.DMType, priorityOrder int32, localDataMovement *data_movement_models.LOCALDataMovement) (r string, err error) {
  if err = p.sendAddLocalDataMovementDetails(authzToken, productUri, dataMoveType, priorityOrder, localDataMovement); err != nil { return }
  return p.recvAddLocalDataMovementDetails()
}

func (p *AiravataClient) sendAddLocalDataMovementDetails(authzToken *security_model.AuthzToken, productUri string, dataMoveType data_movement_models.DMType, priorityOrder int32, localDataMovement *data_movement_models.LOCALDataMovement)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("addLocalDataMovementDetails", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataAddLocalDataMovementDetailsArgs{
  AuthzToken : authzToken,
  ProductUri : productUri,
  DataMoveType : dataMoveType,
  PriorityOrder : priorityOrder,
  LocalDataMovement : localDataMovement,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvAddLocalDataMovementDetails() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "addLocalDataMovementDetails" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "addLocalDataMovementDetails failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "addLocalDataMovementDetails failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error190 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error191 error
    error191, err = error190.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error191
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addLocalDataMovementDetails failed: invalid message type")
    return
  }
  result := AiravataAddLocalDataMovementDetailsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Update the given Local data movement details
// 
// @param dataMovementInterfaceId
//   The identifier of the data movement Interface to be updated.
// 
// @param localDataMovement
//   The LOCALDataMovement object to be updated.
// 
// @return status
//   Returns a success/failure of the update.
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - DataMovementInterfaceId
//  - LocalDataMovement
func (p *AiravataClient) UpdateLocalDataMovementDetails(ctx context.Context, authzToken *security_model.AuthzToken, dataMovementInterfaceId string, localDataMovement *data_movement_models.LOCALDataMovement) (r bool, err error) {
  if err = p.sendUpdateLocalDataMovementDetails(authzToken, dataMovementInterfaceId, localDataMovement); err != nil { return }
  return p.recvUpdateLocalDataMovementDetails()
}

func (p *AiravataClient) sendUpdateLocalDataMovementDetails(authzToken *security_model.AuthzToken, dataMovementInterfaceId string, localDataMovement *data_movement_models.LOCALDataMovement)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateLocalDataMovementDetails", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataUpdateLocalDataMovementDetailsArgs{
  AuthzToken : authzToken,
  DataMovementInterfaceId : dataMovementInterfaceId,
  LocalDataMovement : localDataMovement,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvUpdateLocalDataMovementDetails() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateLocalDataMovementDetails" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateLocalDataMovementDetails failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateLocalDataMovementDetails failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error192 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error193 error
    error193, err = error192.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error193
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateLocalDataMovementDetails failed: invalid message type")
    return
  }
  result := AiravataUpdateLocalDataMovementDetailsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// This method returns local datamovement object.
// 
// @param dataMovementId
//   The identifier of the datamovement Interface to be retrieved.
// 
//  @return LOCALDataMovement instance
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - DataMovementId
func (p *AiravataClient) GetLocalDataMovement(ctx context.Context, authzToken *security_model.AuthzToken, dataMovementId string) (r *data_movement_models.LOCALDataMovement, err error) {
  if err = p.sendGetLocalDataMovement(authzToken, dataMovementId); err != nil { return }
  return p.recvGetLocalDataMovement()
}

func (p *AiravataClient) sendGetLocalDataMovement(authzToken *security_model.AuthzToken, dataMovementId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getLocalDataMovement", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetLocalDataMovementArgs{
  AuthzToken : authzToken,
  DataMovementId : dataMovementId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetLocalDataMovement() (value *data_movement_models.LOCALDataMovement, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getLocalDataMovement" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getLocalDataMovement failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getLocalDataMovement failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error194 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error195 error
    error195, err = error194.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error195
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getLocalDataMovement failed: invalid message type")
    return
  }
  result := AiravataGetLocalDataMovementResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Add a SCP data movement details to a compute resource
//  App catalog will return a dataMovementInterfaceId which will be added to the dataMovementInterfaces.
// 
// @param productUri
//   The identifier of the compute resource to which JobSubmission protocol to be added
// 
// @param priorityOrder
//   Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.
// 
// @param scpDataMovement
//   The SCPDataMovement object to be added to the resource.
// 
// @return status
//   Returns the unique job submission id.
// 
// 
// Parameters:
//  - AuthzToken
//  - ProductUri
//  - DataMoveType
//  - PriorityOrder
//  - ScpDataMovement
func (p *AiravataClient) AddSCPDataMovementDetails(ctx context.Context, authzToken *security_model.AuthzToken, productUri string, dataMoveType data_movement_models.DMType, priorityOrder int32, scpDataMovement *data_movement_models.SCPDataMovement) (r string, err error) {
  if err = p.sendAddSCPDataMovementDetails(authzToken, productUri, dataMoveType, priorityOrder, scpDataMovement); err != nil { return }
  return p.recvAddSCPDataMovementDetails()
}

func (p *AiravataClient) sendAddSCPDataMovementDetails(authzToken *security_model.AuthzToken, productUri string, dataMoveType data_movement_models.DMType, priorityOrder int32, scpDataMovement *data_movement_models.SCPDataMovement)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("addSCPDataMovementDetails", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataAddSCPDataMovementDetailsArgs{
  AuthzToken : authzToken,
  ProductUri : productUri,
  DataMoveType : dataMoveType,
  PriorityOrder : priorityOrder,
  ScpDataMovement : scpDataMovement,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvAddSCPDataMovementDetails() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "addSCPDataMovementDetails" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "addSCPDataMovementDetails failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "addSCPDataMovementDetails failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error196 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error197 error
    error197, err = error196.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error197
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addSCPDataMovementDetails failed: invalid message type")
    return
  }
  result := AiravataAddSCPDataMovementDetailsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Update the given scp data movement details
//  App catalog will return a dataMovementInterfaceId which will be added to the dataMovementInterfaces.
// 
// @param dataMovementInterfaceId
//   The identifier of the data movement Interface to be updated.
// 
// @param scpDataMovement
//   The SCPDataMovement object to be updated.
// 
// @return status
//   Returns a success/failure of the update.
// 
// 
// Parameters:
//  - AuthzToken
//  - DataMovementInterfaceId
//  - ScpDataMovement
func (p *AiravataClient) UpdateSCPDataMovementDetails(ctx context.Context, authzToken *security_model.AuthzToken, dataMovementInterfaceId string, scpDataMovement *data_movement_models.SCPDataMovement) (r bool, err error) {
  if err = p.sendUpdateSCPDataMovementDetails(authzToken, dataMovementInterfaceId, scpDataMovement); err != nil { return }
  return p.recvUpdateSCPDataMovementDetails()
}

func (p *AiravataClient) sendUpdateSCPDataMovementDetails(authzToken *security_model.AuthzToken, dataMovementInterfaceId string, scpDataMovement *data_movement_models.SCPDataMovement)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateSCPDataMovementDetails", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataUpdateSCPDataMovementDetailsArgs{
  AuthzToken : authzToken,
  DataMovementInterfaceId : dataMovementInterfaceId,
  ScpDataMovement : scpDataMovement,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvUpdateSCPDataMovementDetails() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateSCPDataMovementDetails" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateSCPDataMovementDetails failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateSCPDataMovementDetails failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error198 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error199 error
    error199, err = error198.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error199
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateSCPDataMovementDetails failed: invalid message type")
    return
  }
  result := AiravataUpdateSCPDataMovementDetailsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// This method returns SCP datamovement object
// 
// @param dataMovementId
//   The identifier of the datamovement Interface to be retrieved.
// 
// @return SCPDataMovement instance
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - DataMovementId
func (p *AiravataClient) GetSCPDataMovement(ctx context.Context, authzToken *security_model.AuthzToken, dataMovementId string) (r *data_movement_models.SCPDataMovement, err error) {
  if err = p.sendGetSCPDataMovement(authzToken, dataMovementId); err != nil { return }
  return p.recvGetSCPDataMovement()
}

func (p *AiravataClient) sendGetSCPDataMovement(authzToken *security_model.AuthzToken, dataMovementId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getSCPDataMovement", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetSCPDataMovementArgs{
  AuthzToken : authzToken,
  DataMovementId : dataMovementId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetSCPDataMovement() (value *data_movement_models.SCPDataMovement, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getSCPDataMovement" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getSCPDataMovement failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getSCPDataMovement failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error200 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error201 error
    error201, err = error200.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error201
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getSCPDataMovement failed: invalid message type")
    return
  }
  result := AiravataGetSCPDataMovementResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Add a UNICORE data movement details to a compute resource
//  App catalog will return a dataMovementInterfaceId which will be added to the dataMovementInterfaces.
// 
// @param productUri
//   The identifier of the compute resource to which data movement protocol to be added
// 
// @param priorityOrder
//   Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.
// 
// @param UnicoreDataMovement
//   The UnicoreDataMovement object to be added to the resource.
// 
// @return status
//   Returns the unique data movement id.
// 
// 
// Parameters:
//  - AuthzToken
//  - ProductUri
//  - DataMoveType
//  - PriorityOrder
//  - UnicoreDataMovement
func (p *AiravataClient) AddUnicoreDataMovementDetails(ctx context.Context, authzToken *security_model.AuthzToken, productUri string, dataMoveType data_movement_models.DMType, priorityOrder int32, unicoreDataMovement *data_movement_models.UnicoreDataMovement) (r string, err error) {
  if err = p.sendAddUnicoreDataMovementDetails(authzToken, productUri, dataMoveType, priorityOrder, unicoreDataMovement); err != nil { return }
  return p.recvAddUnicoreDataMovementDetails()
}

func (p *AiravataClient) sendAddUnicoreDataMovementDetails(authzToken *security_model.AuthzToken, productUri string, dataMoveType data_movement_models.DMType, priorityOrder int32, unicoreDataMovement *data_movement_models.UnicoreDataMovement)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("addUnicoreDataMovementDetails", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataAddUnicoreDataMovementDetailsArgs{
  AuthzToken : authzToken,
  ProductUri : productUri,
  DataMoveType : dataMoveType,
  PriorityOrder : priorityOrder,
  UnicoreDataMovement : unicoreDataMovement,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvAddUnicoreDataMovementDetails() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "addUnicoreDataMovementDetails" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "addUnicoreDataMovementDetails failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "addUnicoreDataMovementDetails failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error202 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error203 error
    error203, err = error202.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error203
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addUnicoreDataMovementDetails failed: invalid message type")
    return
  }
  result := AiravataAddUnicoreDataMovementDetailsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Update a selected UNICORE data movement details
//  App catalog will return a dataMovementInterfaceId which will be added to the dataMovementInterfaces.
// 
// @param dataMovementInterfaceId
//   The identifier of the data movement Interface to be updated.
// 
// @param UnicoreDataMovement
//   The UnicoreDataMovement object to be updated.
// 
// @return status
//   Returns a success/failure of the update.
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - DataMovementInterfaceId
//  - UnicoreDataMovement
func (p *AiravataClient) UpdateUnicoreDataMovementDetails(ctx context.Context, authzToken *security_model.AuthzToken, dataMovementInterfaceId string, unicoreDataMovement *data_movement_models.UnicoreDataMovement) (r bool, err error) {
  if err = p.sendUpdateUnicoreDataMovementDetails(authzToken, dataMovementInterfaceId, unicoreDataMovement); err != nil { return }
  return p.recvUpdateUnicoreDataMovementDetails()
}

func (p *AiravataClient) sendUpdateUnicoreDataMovementDetails(authzToken *security_model.AuthzToken, dataMovementInterfaceId string, unicoreDataMovement *data_movement_models.UnicoreDataMovement)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateUnicoreDataMovementDetails", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataUpdateUnicoreDataMovementDetailsArgs{
  AuthzToken : authzToken,
  DataMovementInterfaceId : dataMovementInterfaceId,
  UnicoreDataMovement : unicoreDataMovement,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvUpdateUnicoreDataMovementDetails() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateUnicoreDataMovementDetails" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateUnicoreDataMovementDetails failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateUnicoreDataMovementDetails failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error204 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error205 error
    error205, err = error204.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error205
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateUnicoreDataMovementDetails failed: invalid message type")
    return
  }
  result := AiravataUpdateUnicoreDataMovementDetailsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// This method returns UNICORE datamovement object
// 
// @param dataMovementId
//   The identifier of the datamovement Interface to be retrieved.
// 
// @return UnicoreDataMovement instance
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - DataMovementId
func (p *AiravataClient) GetUnicoreDataMovement(ctx context.Context, authzToken *security_model.AuthzToken, dataMovementId string) (r *data_movement_models.UnicoreDataMovement, err error) {
  if err = p.sendGetUnicoreDataMovement(authzToken, dataMovementId); err != nil { return }
  return p.recvGetUnicoreDataMovement()
}

func (p *AiravataClient) sendGetUnicoreDataMovement(authzToken *security_model.AuthzToken, dataMovementId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getUnicoreDataMovement", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetUnicoreDataMovementArgs{
  AuthzToken : authzToken,
  DataMovementId : dataMovementId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetUnicoreDataMovement() (value *data_movement_models.UnicoreDataMovement, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getUnicoreDataMovement" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getUnicoreDataMovement failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUnicoreDataMovement failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error206 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error207 error
    error207, err = error206.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error207
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUnicoreDataMovement failed: invalid message type")
    return
  }
  result := AiravataGetUnicoreDataMovementResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Add a GridFTP data movement details to a compute resource
//  App catalog will return a dataMovementInterfaceId which will be added to the dataMovementInterfaces.
// 
// @param productUri
//   The identifier of the compute resource to which dataMovement protocol to be added
// 
// @param DMType
//    The DMType object to be added to the resource.
// 
// @param priorityOrder
//   Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.
// 
// @param gridFTPDataMovement
//   The GridFTPDataMovement object to be added to the resource.
// 
// @return status
//   Returns the unique data movement id.
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - ProductUri
//  - DataMoveType
//  - PriorityOrder
//  - GridFTPDataMovement
func (p *AiravataClient) AddGridFTPDataMovementDetails(ctx context.Context, authzToken *security_model.AuthzToken, productUri string, dataMoveType data_movement_models.DMType, priorityOrder int32, gridFTPDataMovement *data_movement_models.GridFTPDataMovement) (r string, err error) {
  if err = p.sendAddGridFTPDataMovementDetails(authzToken, productUri, dataMoveType, priorityOrder, gridFTPDataMovement); err != nil { return }
  return p.recvAddGridFTPDataMovementDetails()
}

func (p *AiravataClient) sendAddGridFTPDataMovementDetails(authzToken *security_model.AuthzToken, productUri string, dataMoveType data_movement_models.DMType, priorityOrder int32, gridFTPDataMovement *data_movement_models.GridFTPDataMovement)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("addGridFTPDataMovementDetails", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataAddGridFTPDataMovementDetailsArgs{
  AuthzToken : authzToken,
  ProductUri : productUri,
  DataMoveType : dataMoveType,
  PriorityOrder : priorityOrder,
  GridFTPDataMovement : gridFTPDataMovement,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvAddGridFTPDataMovementDetails() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "addGridFTPDataMovementDetails" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "addGridFTPDataMovementDetails failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "addGridFTPDataMovementDetails failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error208 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error209 error
    error209, err = error208.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error209
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addGridFTPDataMovementDetails failed: invalid message type")
    return
  }
  result := AiravataAddGridFTPDataMovementDetailsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Update the given GridFTP data movement details to a compute resource
//  App catalog will return a dataMovementInterfaceId which will be added to the dataMovementInterfaces.
// 
// @param dataMovementInterfaceId
//   The identifier of the data movement Interface to be updated.
// 
// @param gridFTPDataMovement
//   The GridFTPDataMovement object to be updated.
// 
// @return boolean
//   Returns a success/failure of the update.
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - DataMovementInterfaceId
//  - GridFTPDataMovement
func (p *AiravataClient) UpdateGridFTPDataMovementDetails(ctx context.Context, authzToken *security_model.AuthzToken, dataMovementInterfaceId string, gridFTPDataMovement *data_movement_models.GridFTPDataMovement) (r bool, err error) {
  if err = p.sendUpdateGridFTPDataMovementDetails(authzToken, dataMovementInterfaceId, gridFTPDataMovement); err != nil { return }
  return p.recvUpdateGridFTPDataMovementDetails()
}

func (p *AiravataClient) sendUpdateGridFTPDataMovementDetails(authzToken *security_model.AuthzToken, dataMovementInterfaceId string, gridFTPDataMovement *data_movement_models.GridFTPDataMovement)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateGridFTPDataMovementDetails", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataUpdateGridFTPDataMovementDetailsArgs{
  AuthzToken : authzToken,
  DataMovementInterfaceId : dataMovementInterfaceId,
  GridFTPDataMovement : gridFTPDataMovement,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvUpdateGridFTPDataMovementDetails() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateGridFTPDataMovementDetails" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateGridFTPDataMovementDetails failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateGridFTPDataMovementDetails failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error210 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error211 error
    error211, err = error210.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error211
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateGridFTPDataMovementDetails failed: invalid message type")
    return
  }
  result := AiravataUpdateGridFTPDataMovementDetailsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// This method returns GridFTP datamovement object
// 
// @param dataMovementId
//   The identifier of the datamovement Interface to be retrieved.
// 
//  @return GridFTPDataMovement instance
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - DataMovementId
func (p *AiravataClient) GetGridFTPDataMovement(ctx context.Context, authzToken *security_model.AuthzToken, dataMovementId string) (r *data_movement_models.GridFTPDataMovement, err error) {
  if err = p.sendGetGridFTPDataMovement(authzToken, dataMovementId); err != nil { return }
  return p.recvGetGridFTPDataMovement()
}

func (p *AiravataClient) sendGetGridFTPDataMovement(authzToken *security_model.AuthzToken, dataMovementId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getGridFTPDataMovement", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetGridFTPDataMovementArgs{
  AuthzToken : authzToken,
  DataMovementId : dataMovementId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetGridFTPDataMovement() (value *data_movement_models.GridFTPDataMovement, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getGridFTPDataMovement" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getGridFTPDataMovement failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getGridFTPDataMovement failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error212 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error213 error
    error213, err = error212.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error213
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getGridFTPDataMovement failed: invalid message type")
    return
  }
  result := AiravataGetGridFTPDataMovementResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Change the priority of a given job submisison interface
// 
// @param jobSubmissionInterfaceId
//   The identifier of the JobSubmission Interface to be changed
// 
// @param priorityOrder
//   The new priority of the job manager interface.
// 
// @return status
//   Returns a success/failure of the change.
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - JobSubmissionInterfaceId
//  - NewPriorityOrder_
func (p *AiravataClient) ChangeJobSubmissionPriority(ctx context.Context, authzToken *security_model.AuthzToken, jobSubmissionInterfaceId string, newPriorityOrder int32) (r bool, err error) {
  if err = p.sendChangeJobSubmissionPriority(authzToken, jobSubmissionInterfaceId, newPriorityOrder); err != nil { return }
  return p.recvChangeJobSubmissionPriority()
}

func (p *AiravataClient) sendChangeJobSubmissionPriority(authzToken *security_model.AuthzToken, jobSubmissionInterfaceId string, newPriorityOrder int32)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("changeJobSubmissionPriority", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataChangeJobSubmissionPriorityArgs{
  AuthzToken : authzToken,
  JobSubmissionInterfaceId : jobSubmissionInterfaceId,
  NewPriorityOrder_ : newPriorityOrder,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvChangeJobSubmissionPriority() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "changeJobSubmissionPriority" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "changeJobSubmissionPriority failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "changeJobSubmissionPriority failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error214 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error215 error
    error215, err = error214.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error215
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "changeJobSubmissionPriority failed: invalid message type")
    return
  }
  result := AiravataChangeJobSubmissionPriorityResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Change the priority of a given data movement interface
// 
// @param dataMovementInterfaceId
//   The identifier of the DataMovement Interface to be changed
// 
// @param priorityOrder
//   The new priority of the data movement interface.
// 
// @return status
//   Returns a success/failure of the change.
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - DataMovementInterfaceId
//  - NewPriorityOrder_
func (p *AiravataClient) ChangeDataMovementPriority(ctx context.Context, authzToken *security_model.AuthzToken, dataMovementInterfaceId string, newPriorityOrder int32) (r bool, err error) {
  if err = p.sendChangeDataMovementPriority(authzToken, dataMovementInterfaceId, newPriorityOrder); err != nil { return }
  return p.recvChangeDataMovementPriority()
}

func (p *AiravataClient) sendChangeDataMovementPriority(authzToken *security_model.AuthzToken, dataMovementInterfaceId string, newPriorityOrder int32)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("changeDataMovementPriority", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataChangeDataMovementPriorityArgs{
  AuthzToken : authzToken,
  DataMovementInterfaceId : dataMovementInterfaceId,
  NewPriorityOrder_ : newPriorityOrder,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvChangeDataMovementPriority() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "changeDataMovementPriority" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "changeDataMovementPriority failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "changeDataMovementPriority failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error216 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error217 error
    error217, err = error216.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error217
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "changeDataMovementPriority failed: invalid message type")
    return
  }
  result := AiravataChangeDataMovementPriorityResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Change the priorities of a given set of job submission interfaces
// 
// @param jobSubmissionPriorityMap
//   A Map of identifiers of the JobSubmission Interfaces and thier associated priorities to be set.
// 
// @return status
//   Returns a success/failure of the changes.
// 
// 
// Parameters:
//  - AuthzToken
//  - JobSubmissionPriorityMap
func (p *AiravataClient) ChangeJobSubmissionPriorities(ctx context.Context, authzToken *security_model.AuthzToken, jobSubmissionPriorityMap map[string]int32) (r bool, err error) {
  if err = p.sendChangeJobSubmissionPriorities(authzToken, jobSubmissionPriorityMap); err != nil { return }
  return p.recvChangeJobSubmissionPriorities()
}

func (p *AiravataClient) sendChangeJobSubmissionPriorities(authzToken *security_model.AuthzToken, jobSubmissionPriorityMap map[string]int32)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("changeJobSubmissionPriorities", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataChangeJobSubmissionPrioritiesArgs{
  AuthzToken : authzToken,
  JobSubmissionPriorityMap : jobSubmissionPriorityMap,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvChangeJobSubmissionPriorities() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "changeJobSubmissionPriorities" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "changeJobSubmissionPriorities failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "changeJobSubmissionPriorities failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error218 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error219 error
    error219, err = error218.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error219
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "changeJobSubmissionPriorities failed: invalid message type")
    return
  }
  result := AiravataChangeJobSubmissionPrioritiesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Change the priorities of a given set of data movement interfaces
// 
// @param dataMovementPriorityMap
//   A Map of identifiers of the DataMovement Interfaces and thier associated priorities to be set.
// 
// @return status
//   Returns a success/failure of the changes.
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - DataMovementPriorityMap
func (p *AiravataClient) ChangeDataMovementPriorities(ctx context.Context, authzToken *security_model.AuthzToken, dataMovementPriorityMap map[string]int32) (r bool, err error) {
  if err = p.sendChangeDataMovementPriorities(authzToken, dataMovementPriorityMap); err != nil { return }
  return p.recvChangeDataMovementPriorities()
}

func (p *AiravataClient) sendChangeDataMovementPriorities(authzToken *security_model.AuthzToken, dataMovementPriorityMap map[string]int32)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("changeDataMovementPriorities", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataChangeDataMovementPrioritiesArgs{
  AuthzToken : authzToken,
  DataMovementPriorityMap : dataMovementPriorityMap,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvChangeDataMovementPriorities() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "changeDataMovementPriorities" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "changeDataMovementPriorities failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "changeDataMovementPriorities failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error220 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error221 error
    error221, err = error220.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error221
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "changeDataMovementPriorities failed: invalid message type")
    return
  }
  result := AiravataChangeDataMovementPrioritiesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Delete a given job submisison interface
// 
// @param jobSubmissionInterfaceId
//   The identifier of the JobSubmission Interface to be changed
// 
// @return status
//   Returns a success/failure of the deletion.
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - ComputeResourceId
//  - JobSubmissionInterfaceId
func (p *AiravataClient) DeleteJobSubmissionInterface(ctx context.Context, authzToken *security_model.AuthzToken, computeResourceId string, jobSubmissionInterfaceId string) (r bool, err error) {
  if err = p.sendDeleteJobSubmissionInterface(authzToken, computeResourceId, jobSubmissionInterfaceId); err != nil { return }
  return p.recvDeleteJobSubmissionInterface()
}

func (p *AiravataClient) sendDeleteJobSubmissionInterface(authzToken *security_model.AuthzToken, computeResourceId string, jobSubmissionInterfaceId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteJobSubmissionInterface", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataDeleteJobSubmissionInterfaceArgs{
  AuthzToken : authzToken,
  ComputeResourceId : computeResourceId,
  JobSubmissionInterfaceId : jobSubmissionInterfaceId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvDeleteJobSubmissionInterface() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteJobSubmissionInterface" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteJobSubmissionInterface failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteJobSubmissionInterface failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error222 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error223 error
    error223, err = error222.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error223
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteJobSubmissionInterface failed: invalid message type")
    return
  }
  result := AiravataDeleteJobSubmissionInterfaceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Delete a given data movement interface
// 
// @param dataMovementInterfaceId
//   The identifier of the DataMovement Interface to be changed
// 
// @return status
//   Returns a success/failure of the deletion.
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - ProductUri
//  - DataMovementInterfaceId
//  - DataMoveType
func (p *AiravataClient) DeleteDataMovementInterface(ctx context.Context, authzToken *security_model.AuthzToken, productUri string, dataMovementInterfaceId string, dataMoveType data_movement_models.DMType) (r bool, err error) {
  if err = p.sendDeleteDataMovementInterface(authzToken, productUri, dataMovementInterfaceId, dataMoveType); err != nil { return }
  return p.recvDeleteDataMovementInterface()
}

func (p *AiravataClient) sendDeleteDataMovementInterface(authzToken *security_model.AuthzToken, productUri string, dataMovementInterfaceId string, dataMoveType data_movement_models.DMType)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteDataMovementInterface", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataDeleteDataMovementInterfaceArgs{
  AuthzToken : authzToken,
  ProductUri : productUri,
  DataMovementInterfaceId : dataMovementInterfaceId,
  DataMoveType : dataMoveType,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvDeleteDataMovementInterface() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteDataMovementInterface" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteDataMovementInterface failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteDataMovementInterface failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error224 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error225 error
    error225, err = error224.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error225
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteDataMovementInterface failed: invalid message type")
    return
  }
  result := AiravataDeleteDataMovementInterfaceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - AuthzToken
//  - ResourceJobManager
func (p *AiravataClient) RegisterResourceJobManager(ctx context.Context, authzToken *security_model.AuthzToken, resourceJobManager *compute_resource_model.ResourceJobManager) (r string, err error) {
  if err = p.sendRegisterResourceJobManager(authzToken, resourceJobManager); err != nil { return }
  return p.recvRegisterResourceJobManager()
}

func (p *AiravataClient) sendRegisterResourceJobManager(authzToken *security_model.AuthzToken, resourceJobManager *compute_resource_model.ResourceJobManager)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("registerResourceJobManager", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataRegisterResourceJobManagerArgs{
  AuthzToken : authzToken,
  ResourceJobManager : resourceJobManager,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvRegisterResourceJobManager() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "registerResourceJobManager" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "registerResourceJobManager failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "registerResourceJobManager failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error226 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error227 error
    error227, err = error226.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error227
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "registerResourceJobManager failed: invalid message type")
    return
  }
  result := AiravataRegisterResourceJobManagerResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - AuthzToken
//  - ResourceJobManagerId
//  - UpdatedResourceJobManager
func (p *AiravataClient) UpdateResourceJobManager(ctx context.Context, authzToken *security_model.AuthzToken, resourceJobManagerId string, updatedResourceJobManager *compute_resource_model.ResourceJobManager) (r bool, err error) {
  if err = p.sendUpdateResourceJobManager(authzToken, resourceJobManagerId, updatedResourceJobManager); err != nil { return }
  return p.recvUpdateResourceJobManager()
}

func (p *AiravataClient) sendUpdateResourceJobManager(authzToken *security_model.AuthzToken, resourceJobManagerId string, updatedResourceJobManager *compute_resource_model.ResourceJobManager)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateResourceJobManager", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataUpdateResourceJobManagerArgs{
  AuthzToken : authzToken,
  ResourceJobManagerId : resourceJobManagerId,
  UpdatedResourceJobManager : updatedResourceJobManager,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvUpdateResourceJobManager() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateResourceJobManager" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateResourceJobManager failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateResourceJobManager failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error228 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error229 error
    error229, err = error228.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error229
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateResourceJobManager failed: invalid message type")
    return
  }
  result := AiravataUpdateResourceJobManagerResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - AuthzToken
//  - ResourceJobManagerId
func (p *AiravataClient) GetResourceJobManager(ctx context.Context, authzToken *security_model.AuthzToken, resourceJobManagerId string) (r *compute_resource_model.ResourceJobManager, err error) {
  if err = p.sendGetResourceJobManager(authzToken, resourceJobManagerId); err != nil { return }
  return p.recvGetResourceJobManager()
}

func (p *AiravataClient) sendGetResourceJobManager(authzToken *security_model.AuthzToken, resourceJobManagerId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getResourceJobManager", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetResourceJobManagerArgs{
  AuthzToken : authzToken,
  ResourceJobManagerId : resourceJobManagerId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetResourceJobManager() (value *compute_resource_model.ResourceJobManager, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getResourceJobManager" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getResourceJobManager failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getResourceJobManager failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error230 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error231 error
    error231, err = error230.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error231
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getResourceJobManager failed: invalid message type")
    return
  }
  result := AiravataGetResourceJobManagerResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - AuthzToken
//  - ResourceJobManagerId
func (p *AiravataClient) DeleteResourceJobManager(ctx context.Context, authzToken *security_model.AuthzToken, resourceJobManagerId string) (r bool, err error) {
  if err = p.sendDeleteResourceJobManager(authzToken, resourceJobManagerId); err != nil { return }
  return p.recvDeleteResourceJobManager()
}

func (p *AiravataClient) sendDeleteResourceJobManager(authzToken *security_model.AuthzToken, resourceJobManagerId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteResourceJobManager", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataDeleteResourceJobManagerArgs{
  AuthzToken : authzToken,
  ResourceJobManagerId : resourceJobManagerId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvDeleteResourceJobManager() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteResourceJobManager" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteResourceJobManager failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteResourceJobManager failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error232 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error233 error
    error233, err = error232.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error233
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteResourceJobManager failed: invalid message type")
    return
  }
  result := AiravataDeleteResourceJobManagerResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Delete a Compute Resource Queue
// 
// @param computeResourceId
//   The identifier of the compute resource which has the queue to be deleted
// 
// @param queueName
//   Name of the queue need to be deleted. Name is the uniqueue identifier for the queue within a compute resource
// 
// @return status
//   Returns a success/failure of the deletion.
// 
// 
// 
// Parameters:
//  - AuthzToken
//  - ComputeResourceId
//  - QueueName
func (p *AiravataClient) DeleteBatchQueue(ctx context.Context, authzToken *security_model.AuthzToken, computeResourceId string, queueName string) (r bool, err error) {
  if err = p.sendDeleteBatchQueue(authzToken, computeResourceId, queueName); err != nil { return }
  return p.recvDeleteBatchQueue()
}

func (p *AiravataClient) sendDeleteBatchQueue(authzToken *security_model.AuthzToken, computeResourceId string, queueName string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteBatchQueue", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataDeleteBatchQueueArgs{
  AuthzToken : authzToken,
  ComputeResourceId : computeResourceId,
  QueueName : queueName,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvDeleteBatchQueue() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteBatchQueue" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteBatchQueue failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteBatchQueue failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error234 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error235 error
    error235, err = error234.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error235
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteBatchQueue failed: invalid message type")
    return
  }
  result := AiravataDeleteBatchQueueResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Register a Gateway Resource Profile.
// 
// @param gatewayResourceProfile
//    Gateway Resource Profile Object.
//    The GatewayID should be obtained from Airavata gateway registration and passed to register a corresponding
//      resource profile.
// 
// @return status
//   Returns a success/failure of the update.
// 
// 
// Parameters:
//  - AuthzToken
//  - GatewayResourceProfile
func (p *AiravataClient) RegisterGatewayResourceProfile(ctx context.Context, authzToken *security_model.AuthzToken, gatewayResourceProfile *gateway_resource_profile_model.GatewayResourceProfile) (r string, err error) {
  if err = p.sendRegisterGatewayResourceProfile(authzToken, gatewayResourceProfile); err != nil { return }
  return p.recvRegisterGatewayResourceProfile()
}

func (p *AiravataClient) sendRegisterGatewayResourceProfile(authzToken *security_model.AuthzToken, gatewayResourceProfile *gateway_resource_profile_model.GatewayResourceProfile)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("registerGatewayResourceProfile", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataRegisterGatewayResourceProfileArgs{
  AuthzToken : authzToken,
  GatewayResourceProfile : gatewayResourceProfile,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvRegisterGatewayResourceProfile() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "registerGatewayResourceProfile" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "registerGatewayResourceProfile failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "registerGatewayResourceProfile failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error236 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error237 error
    error237, err = error236.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error237
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "registerGatewayResourceProfile failed: invalid message type")
    return
  }
  result := AiravataRegisterGatewayResourceProfileResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Fetch the given Gateway Resource Profile.
// 
// @param gatewayID
//   The identifier for the requested gateway resource.
// 
// @return gatewayResourceProfile
//    Gateway Resource Profile Object.
// 
// 
// Parameters:
//  - AuthzToken
//  - GatewayID
func (p *AiravataClient) GetGatewayResourceProfile(ctx context.Context, authzToken *security_model.AuthzToken, gatewayID string) (r *gateway_resource_profile_model.GatewayResourceProfile, err error) {
  if err = p.sendGetGatewayResourceProfile(authzToken, gatewayID); err != nil { return }
  return p.recvGetGatewayResourceProfile()
}

func (p *AiravataClient) sendGetGatewayResourceProfile(authzToken *security_model.AuthzToken, gatewayID string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getGatewayResourceProfile", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetGatewayResourceProfileArgs{
  AuthzToken : authzToken,
  GatewayID : gatewayID,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetGatewayResourceProfile() (value *gateway_resource_profile_model.GatewayResourceProfile, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getGatewayResourceProfile" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getGatewayResourceProfile failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getGatewayResourceProfile failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error238 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error239 error
    error239, err = error238.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error239
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getGatewayResourceProfile failed: invalid message type")
    return
  }
  result := AiravataGetGatewayResourceProfileResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Update a Gateway Resource Profile.
// 
// @param gatewayID
//   The identifier for the requested gateway resource to be updated.
// 
// @param gatewayResourceProfile
//    Gateway Resource Profile Object.
// 
// @return status
//   Returns a success/failure of the update.
// 
// 
// Parameters:
//  - AuthzToken
//  - GatewayID
//  - GatewayResourceProfile
func (p *AiravataClient) UpdateGatewayResourceProfile(ctx context.Context, authzToken *security_model.AuthzToken, gatewayID string, gatewayResourceProfile *gateway_resource_profile_model.GatewayResourceProfile) (r bool, err error) {
  if err = p.sendUpdateGatewayResourceProfile(authzToken, gatewayID, gatewayResourceProfile); err != nil { return }
  return p.recvUpdateGatewayResourceProfile()
}

func (p *AiravataClient) sendUpdateGatewayResourceProfile(authzToken *security_model.AuthzToken, gatewayID string, gatewayResourceProfile *gateway_resource_profile_model.GatewayResourceProfile)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateGatewayResourceProfile", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataUpdateGatewayResourceProfileArgs{
  AuthzToken : authzToken,
  GatewayID : gatewayID,
  GatewayResourceProfile : gatewayResourceProfile,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvUpdateGatewayResourceProfile() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateGatewayResourceProfile" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateGatewayResourceProfile failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateGatewayResourceProfile failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error240 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error241 error
    error241, err = error240.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error241
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateGatewayResourceProfile failed: invalid message type")
    return
  }
  result := AiravataUpdateGatewayResourceProfileResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Delete the given Gateway Resource Profile.
// 
// @param gatewayID
//   The identifier for the requested gateway resource to be deleted.
// 
// @return status
//   Returns a success/failure of the deletion.
// 
// 
// Parameters:
//  - AuthzToken
//  - GatewayID
func (p *AiravataClient) DeleteGatewayResourceProfile(ctx context.Context, authzToken *security_model.AuthzToken, gatewayID string) (r bool, err error) {
  if err = p.sendDeleteGatewayResourceProfile(authzToken, gatewayID); err != nil { return }
  return p.recvDeleteGatewayResourceProfile()
}

func (p *AiravataClient) sendDeleteGatewayResourceProfile(authzToken *security_model.AuthzToken, gatewayID string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteGatewayResourceProfile", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataDeleteGatewayResourceProfileArgs{
  AuthzToken : authzToken,
  GatewayID : gatewayID,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvDeleteGatewayResourceProfile() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteGatewayResourceProfile" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteGatewayResourceProfile failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteGatewayResourceProfile failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error242 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error243 error
    error243, err = error242.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error243
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteGatewayResourceProfile failed: invalid message type")
    return
  }
  result := AiravataDeleteGatewayResourceProfileResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Add a Compute Resource Preference to a registered gateway profile.
// 
// @param gatewayID
//   The identifier for the gateway profile to be added.
// 
// @param computeResourceId
//   Preferences related to a particular compute resource
// 
// @param computeResourcePreference
//   The ComputeResourcePreference object to be added to the resource profile.
// 
// @return status
//   Returns a success/failure of the addition. If a profile already exists, this operation will fail.
//    Instead an update should be used.
// 
// 
// Parameters:
//  - AuthzToken
//  - GatewayID
//  - ComputeResourceId
//  - ComputeResourcePreference
func (p *AiravataClient) AddGatewayComputeResourcePreference(ctx context.Context, authzToken *security_model.AuthzToken, gatewayID string, computeResourceId string, computeResourcePreference *gateway_resource_profile_model.ComputeResourcePreference) (r bool, err error) {
  if err = p.sendAddGatewayComputeResourcePreference(authzToken, gatewayID, computeResourceId, computeResourcePreference); err != nil { return }
  return p.recvAddGatewayComputeResourcePreference()
}

func (p *AiravataClient) sendAddGatewayComputeResourcePreference(authzToken *security_model.AuthzToken, gatewayID string, computeResourceId string, computeResourcePreference *gateway_resource_profile_model.ComputeResourcePreference)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("addGatewayComputeResourcePreference", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataAddGatewayComputeResourcePreferenceArgs{
  AuthzToken : authzToken,
  GatewayID : gatewayID,
  ComputeResourceId : computeResourceId,
  ComputeResourcePreference : computeResourcePreference,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvAddGatewayComputeResourcePreference() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "addGatewayComputeResourcePreference" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "addGatewayComputeResourcePreference failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "addGatewayComputeResourcePreference failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error244 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error245 error
    error245, err = error244.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error245
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addGatewayComputeResourcePreference failed: invalid message type")
    return
  }
  result := AiravataAddGatewayComputeResourcePreferenceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Add a Storage Resource Preference to a registered gateway profile.
// 
// @param gatewayID
//   The identifier of the gateway profile to be added.
// 
// @param storageResourceId
//   Preferences related to a particular compute resource
// 
// @param computeResourcePreference
//   The ComputeResourcePreference object to be added to the resource profile.
// 
// @return status
//   Returns a success/failure of the addition. If a profile already exists, this operation will fail.
//    Instead an update should be used.
// 
// 
// Parameters:
//  - AuthzToken
//  - GatewayID
//  - StorageResourceId
//  - StoragePreference
func (p *AiravataClient) AddGatewayStoragePreference(ctx context.Context, authzToken *security_model.AuthzToken, gatewayID string, storageResourceId string, storagePreference *gateway_resource_profile_model.StoragePreference) (r bool, err error) {
  if err = p.sendAddGatewayStoragePreference(authzToken, gatewayID, storageResourceId, storagePreference); err != nil { return }
  return p.recvAddGatewayStoragePreference()
}

func (p *AiravataClient) sendAddGatewayStoragePreference(authzToken *security_model.AuthzToken, gatewayID string, storageResourceId string, storagePreference *gateway_resource_profile_model.StoragePreference)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("addGatewayStoragePreference", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataAddGatewayStoragePreferenceArgs{
  AuthzToken : authzToken,
  GatewayID : gatewayID,
  StorageResourceId : storageResourceId,
  StoragePreference : storagePreference,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvAddGatewayStoragePreference() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "addGatewayStoragePreference" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "addGatewayStoragePreference failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "addGatewayStoragePreference failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error246 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error247 error
    error247, err = error246.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error247
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addGatewayStoragePreference failed: invalid message type")
    return
  }
  result := AiravataAddGatewayStoragePreferenceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Fetch a Compute Resource Preference of a registered gateway profile.
// 
// @param gatewayID
//   The identifier for the gateway profile to be requested
// 
// @param computeResourceId
//   Preferences related to a particular compute resource
// 
// @return computeResourcePreference
//   Returns the ComputeResourcePreference object.
// 
// 
// Parameters:
//  - AuthzToken
//  - GatewayID
//  - ComputeResourceId
func (p *AiravataClient) GetGatewayComputeResourcePreference(ctx context.Context, authzToken *security_model.AuthzToken, gatewayID string, computeResourceId string) (r *gateway_resource_profile_model.ComputeResourcePreference, err error) {
  if err = p.sendGetGatewayComputeResourcePreference(authzToken, gatewayID, computeResourceId); err != nil { return }
  return p.recvGetGatewayComputeResourcePreference()
}

func (p *AiravataClient) sendGetGatewayComputeResourcePreference(authzToken *security_model.AuthzToken, gatewayID string, computeResourceId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getGatewayComputeResourcePreference", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetGatewayComputeResourcePreferenceArgs{
  AuthzToken : authzToken,
  GatewayID : gatewayID,
  ComputeResourceId : computeResourceId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetGatewayComputeResourcePreference() (value *gateway_resource_profile_model.ComputeResourcePreference, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getGatewayComputeResourcePreference" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getGatewayComputeResourcePreference failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getGatewayComputeResourcePreference failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error248 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error249 error
    error249, err = error248.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error249
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getGatewayComputeResourcePreference failed: invalid message type")
    return
  }
  result := AiravataGetGatewayComputeResourcePreferenceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Fetch a Storage Resource Preference of a registered gateway profile.
// 
// @param gatewayID
//   The identifier of the gateway profile to request to fetch the particular storage resource preference.
// 
// @param storageResourceId
//   Identifier of the Stprage Preference required to be fetched.
// 
// @return StoragePreference
//   Returns the StoragePreference object.
// 
// 
// Parameters:
//  - AuthzToken
//  - GatewayID
//  - StorageResourceId
func (p *AiravataClient) GetGatewayStoragePreference(ctx context.Context, authzToken *security_model.AuthzToken, gatewayID string, storageResourceId string) (r *gateway_resource_profile_model.StoragePreference, err error) {
  if err = p.sendGetGatewayStoragePreference(authzToken, gatewayID, storageResourceId); err != nil { return }
  return p.recvGetGatewayStoragePreference()
}

func (p *AiravataClient) sendGetGatewayStoragePreference(authzToken *security_model.AuthzToken, gatewayID string, storageResourceId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getGatewayStoragePreference", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetGatewayStoragePreferenceArgs{
  AuthzToken : authzToken,
  GatewayID : gatewayID,
  StorageResourceId : storageResourceId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetGatewayStoragePreference() (value *gateway_resource_profile_model.StoragePreference, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getGatewayStoragePreference" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getGatewayStoragePreference failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getGatewayStoragePreference failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error250 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error251 error
    error251, err = error250.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error251
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getGatewayStoragePreference failed: invalid message type")
    return
  }
  result := AiravataGetGatewayStoragePreferenceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Fetch all Compute Resource Preferences of a registered gateway profile.
// 
// @param gatewayID
//   The identifier for the gateway profile to be requested
// 
// @return computeResourcePreference
//   Returns the ComputeResourcePreference object.
// 
// 
// Parameters:
//  - AuthzToken
//  - GatewayID
func (p *AiravataClient) GetAllGatewayComputeResourcePreferences(ctx context.Context, authzToken *security_model.AuthzToken, gatewayID string) (r []*gateway_resource_profile_model.ComputeResourcePreference, err error) {
  if err = p.sendGetAllGatewayComputeResourcePreferences(authzToken, gatewayID); err != nil { return }
  return p.recvGetAllGatewayComputeResourcePreferences()
}

func (p *AiravataClient) sendGetAllGatewayComputeResourcePreferences(authzToken *security_model.AuthzToken, gatewayID string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getAllGatewayComputeResourcePreferences", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetAllGatewayComputeResourcePreferencesArgs{
  AuthzToken : authzToken,
  GatewayID : gatewayID,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetAllGatewayComputeResourcePreferences() (value []*gateway_resource_profile_model.ComputeResourcePreference, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getAllGatewayComputeResourcePreferences" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getAllGatewayComputeResourcePreferences failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getAllGatewayComputeResourcePreferences failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error252 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error253 error
    error253, err = error252.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error253
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getAllGatewayComputeResourcePreferences failed: invalid message type")
    return
  }
  result := AiravataGetAllGatewayComputeResourcePreferencesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Fetch all Storage Resource Preferences of a registered gateway profile.
// 
// @param gatewayID
//   The identifier for the gateway profile to be requested
// 
// @return StoragePreference
//   Returns the StoragePreference object.
// 
// 
// Parameters:
//  - AuthzToken
//  - GatewayID
func (p *AiravataClient) GetAllGatewayStoragePreferences(ctx context.Context, authzToken *security_model.AuthzToken, gatewayID string) (r []*gateway_resource_profile_model.StoragePreference, err error) {
  if err = p.sendGetAllGatewayStoragePreferences(authzToken, gatewayID); err != nil { return }
  return p.recvGetAllGatewayStoragePreferences()
}

func (p *AiravataClient) sendGetAllGatewayStoragePreferences(authzToken *security_model.AuthzToken, gatewayID string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getAllGatewayStoragePreferences", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetAllGatewayStoragePreferencesArgs{
  AuthzToken : authzToken,
  GatewayID : gatewayID,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetAllGatewayStoragePreferences() (value []*gateway_resource_profile_model.StoragePreference, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getAllGatewayStoragePreferences" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getAllGatewayStoragePreferences failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getAllGatewayStoragePreferences failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error254 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error255 error
    error255, err = error254.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error255
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getAllGatewayStoragePreferences failed: invalid message type")
    return
  }
  result := AiravataGetAllGatewayStoragePreferencesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Fetch all Gateway Profiles registered
// 
// @return GatewayResourceProfile
//   Returns all the GatewayResourcePrifle list object.
// 
// 
// 
// Parameters:
//  - AuthzToken
func (p *AiravataClient) GetAllGatewayResourceProfiles(ctx context.Context, authzToken *security_model.AuthzToken) (r []*gateway_resource_profile_model.GatewayResourceProfile, err error) {
  if err = p.sendGetAllGatewayResourceProfiles(authzToken); err != nil { return }
  return p.recvGetAllGatewayResourceProfiles()
}

func (p *AiravataClient) sendGetAllGatewayResourceProfiles(authzToken *security_model.AuthzToken)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getAllGatewayResourceProfiles", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetAllGatewayResourceProfilesArgs{
  AuthzToken : authzToken,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetAllGatewayResourceProfiles() (value []*gateway_resource_profile_model.GatewayResourceProfile, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getAllGatewayResourceProfiles" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getAllGatewayResourceProfiles failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getAllGatewayResourceProfiles failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error256 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error257 error
    error257, err = error256.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error257
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getAllGatewayResourceProfiles failed: invalid message type")
    return
  }
  result := AiravataGetAllGatewayResourceProfilesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Update a Compute Resource Preference to a registered gateway profile.
// 
// @param gatewayID
//   The identifier for the gateway profile to be updated.
// 
// @param computeResourceId
//   Preferences related to a particular compute resource
// 
// @param computeResourcePreference
//   The ComputeResourcePreference object to be updated to the resource profile.
// 
// @return status
//   Returns a success/failure of the updation.
// 
// 
// Parameters:
//  - AuthzToken
//  - GatewayID
//  - ComputeResourceId
//  - ComputeResourcePreference
func (p *AiravataClient) UpdateGatewayComputeResourcePreference(ctx context.Context, authzToken *security_model.AuthzToken, gatewayID string, computeResourceId string, computeResourcePreference *gateway_resource_profile_model.ComputeResourcePreference) (r bool, err error) {
  if err = p.sendUpdateGatewayComputeResourcePreference(authzToken, gatewayID, computeResourceId, computeResourcePreference); err != nil { return }
  return p.recvUpdateGatewayComputeResourcePreference()
}

func (p *AiravataClient) sendUpdateGatewayComputeResourcePreference(authzToken *security_model.AuthzToken, gatewayID string, computeResourceId string, computeResourcePreference *gateway_resource_profile_model.ComputeResourcePreference)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateGatewayComputeResourcePreference", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataUpdateGatewayComputeResourcePreferenceArgs{
  AuthzToken : authzToken,
  GatewayID : gatewayID,
  ComputeResourceId : computeResourceId,
  ComputeResourcePreference : computeResourcePreference,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvUpdateGatewayComputeResourcePreference() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateGatewayComputeResourcePreference" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateGatewayComputeResourcePreference failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateGatewayComputeResourcePreference failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error258 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error259 error
    error259, err = error258.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error259
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateGatewayComputeResourcePreference failed: invalid message type")
    return
  }
  result := AiravataUpdateGatewayComputeResourcePreferenceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Update a Storage Resource Preference of a registered gateway profile.
// 
// @param gatewayID
//   The identifier of the gateway profile to be updated.
// 
// @param storageId
//   The Storage resource identifier of the one that you want to update
// 
// @param storagePreference
//   The storagePreference object to be updated to the resource profile.
// 
// @return status
//   Returns a success/failure of the updation.
// 
// 
// Parameters:
//  - AuthzToken
//  - GatewayID
//  - StorageId
//  - StoragePreference
func (p *AiravataClient) UpdateGatewayStoragePreference(ctx context.Context, authzToken *security_model.AuthzToken, gatewayID string, storageId string, storagePreference *gateway_resource_profile_model.StoragePreference) (r bool, err error) {
  if err = p.sendUpdateGatewayStoragePreference(authzToken, gatewayID, storageId, storagePreference); err != nil { return }
  return p.recvUpdateGatewayStoragePreference()
}

func (p *AiravataClient) sendUpdateGatewayStoragePreference(authzToken *security_model.AuthzToken, gatewayID string, storageId string, storagePreference *gateway_resource_profile_model.StoragePreference)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateGatewayStoragePreference", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataUpdateGatewayStoragePreferenceArgs{
  AuthzToken : authzToken,
  GatewayID : gatewayID,
  StorageId : storageId,
  StoragePreference : storagePreference,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvUpdateGatewayStoragePreference() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateGatewayStoragePreference" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateGatewayStoragePreference failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateGatewayStoragePreference failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error260 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error261 error
    error261, err = error260.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error261
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateGatewayStoragePreference failed: invalid message type")
    return
  }
  result := AiravataUpdateGatewayStoragePreferenceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Delete the Compute Resource Preference of a registered gateway profile.
// 
// @param gatewayID
//   The identifier for the gateway profile to be deleted.
// 
// @param computeResourceId
//   Preferences related to a particular compute resource
// 
// @return status
//   Returns a success/failure of the deletion.
// 
// 
// Parameters:
//  - AuthzToken
//  - GatewayID
//  - ComputeResourceId
func (p *AiravataClient) DeleteGatewayComputeResourcePreference(ctx context.Context, authzToken *security_model.AuthzToken, gatewayID string, computeResourceId string) (r bool, err error) {
  if err = p.sendDeleteGatewayComputeResourcePreference(authzToken, gatewayID, computeResourceId); err != nil { return }
  return p.recvDeleteGatewayComputeResourcePreference()
}

func (p *AiravataClient) sendDeleteGatewayComputeResourcePreference(authzToken *security_model.AuthzToken, gatewayID string, computeResourceId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteGatewayComputeResourcePreference", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataDeleteGatewayComputeResourcePreferenceArgs{
  AuthzToken : authzToken,
  GatewayID : gatewayID,
  ComputeResourceId : computeResourceId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvDeleteGatewayComputeResourcePreference() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteGatewayComputeResourcePreference" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteGatewayComputeResourcePreference failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteGatewayComputeResourcePreference failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error262 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error263 error
    error263, err = error262.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error263
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteGatewayComputeResourcePreference failed: invalid message type")
    return
  }
  result := AiravataDeleteGatewayComputeResourcePreferenceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Delete the Storage Resource Preference of a registered gateway profile.
// 
// @param gatewayID
//   The identifier of the gateway profile to be deleted.
// 
// @param storageId
//   ID of the storage preference you want to delete.
// 
// @return status
//   Returns a success/failure of the deletion.
// 
// 
// Parameters:
//  - AuthzToken
//  - GatewayID
//  - StorageId
func (p *AiravataClient) DeleteGatewayStoragePreference(ctx context.Context, authzToken *security_model.AuthzToken, gatewayID string, storageId string) (r bool, err error) {
  if err = p.sendDeleteGatewayStoragePreference(authzToken, gatewayID, storageId); err != nil { return }
  return p.recvDeleteGatewayStoragePreference()
}

func (p *AiravataClient) sendDeleteGatewayStoragePreference(authzToken *security_model.AuthzToken, gatewayID string, storageId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteGatewayStoragePreference", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataDeleteGatewayStoragePreferenceArgs{
  AuthzToken : authzToken,
  GatewayID : gatewayID,
  StorageId : storageId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvDeleteGatewayStoragePreference() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteGatewayStoragePreference" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteGatewayStoragePreference failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteGatewayStoragePreference failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error264 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error265 error
    error265, err = error264.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error265
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteGatewayStoragePreference failed: invalid message type")
    return
  }
  result := AiravataDeleteGatewayStoragePreferenceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Register User Resource Profile.
// 
// @param UserResourceProfile
//    User Resource Profile Object.
//    The userId should be obtained from Airavata user profile data model and passed to register a corresponding
//      resource profile.
// 
// @return status
//   Returns a success/failure of the update.
// 
// 
// Parameters:
//  - AuthzToken
//  - UserResourceProfile
func (p *AiravataClient) RegisterUserResourceProfile(ctx context.Context, authzToken *security_model.AuthzToken, userResourceProfile *user_resource_profile_model.UserResourceProfile) (r string, err error) {
  if err = p.sendRegisterUserResourceProfile(authzToken, userResourceProfile); err != nil { return }
  return p.recvRegisterUserResourceProfile()
}

func (p *AiravataClient) sendRegisterUserResourceProfile(authzToken *security_model.AuthzToken, userResourceProfile *user_resource_profile_model.UserResourceProfile)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("registerUserResourceProfile", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataRegisterUserResourceProfileArgs{
  AuthzToken : authzToken,
  UserResourceProfile : userResourceProfile,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvRegisterUserResourceProfile() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "registerUserResourceProfile" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "registerUserResourceProfile failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "registerUserResourceProfile failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error266 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error267 error
    error267, err = error266.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error267
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "registerUserResourceProfile failed: invalid message type")
    return
  }
  result := AiravataRegisterUserResourceProfileResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Fetch the given User Resource Profile.
// 
// @param userId
//   The identifier for the requested user resource profile.
// 
// @param gatewayID
//   The identifier to link a gateway for the requested user resource profile.
// 
// @return UserResourceProfile
//    User Resource Profile Object.
// 
// 
// Parameters:
//  - AuthzToken
//  - UserId
//  - GatewayID
func (p *AiravataClient) GetUserResourceProfile(ctx context.Context, authzToken *security_model.AuthzToken, userId string, gatewayID string) (r *user_resource_profile_model.UserResourceProfile, err error) {
  if err = p.sendGetUserResourceProfile(authzToken, userId, gatewayID); err != nil { return }
  return p.recvGetUserResourceProfile()
}

func (p *AiravataClient) sendGetUserResourceProfile(authzToken *security_model.AuthzToken, userId string, gatewayID string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getUserResourceProfile", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetUserResourceProfileArgs{
  AuthzToken : authzToken,
  UserId : userId,
  GatewayID : gatewayID,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetUserResourceProfile() (value *user_resource_profile_model.UserResourceProfile, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getUserResourceProfile" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getUserResourceProfile failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUserResourceProfile failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error268 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error269 error
    error269, err = error268.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error269
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUserResourceProfile failed: invalid message type")
    return
  }
  result := AiravataGetUserResourceProfileResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Update a User Resource Profile.
// 
// @param userId
//   The identifier for the requested user resource to be updated.
// 
// @param gatewayID
//   The identifier to link a gateway for the requested user resource profile.
// 
// @param UserResourceProfile
//    User Resource Profile Object.
// 
// @return status
//   Returns a success/failure of the update.
// 
// 
// Parameters:
//  - AuthzToken
//  - UserId
//  - GatewayID
//  - UserResourceProfile
func (p *AiravataClient) UpdateUserResourceProfile(ctx context.Context, authzToken *security_model.AuthzToken, userId string, gatewayID string, userResourceProfile *user_resource_profile_model.UserResourceProfile) (r bool, err error) {
  if err = p.sendUpdateUserResourceProfile(authzToken, userId, gatewayID, userResourceProfile); err != nil { return }
  return p.recvUpdateUserResourceProfile()
}

func (p *AiravataClient) sendUpdateUserResourceProfile(authzToken *security_model.AuthzToken, userId string, gatewayID string, userResourceProfile *user_resource_profile_model.UserResourceProfile)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateUserResourceProfile", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataUpdateUserResourceProfileArgs{
  AuthzToken : authzToken,
  UserId : userId,
  GatewayID : gatewayID,
  UserResourceProfile : userResourceProfile,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvUpdateUserResourceProfile() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateUserResourceProfile" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateUserResourceProfile failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateUserResourceProfile failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error270 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error271 error
    error271, err = error270.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error271
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateUserResourceProfile failed: invalid message type")
    return
  }
  result := AiravataUpdateUserResourceProfileResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Delete the given User Resource Profile.
// 
// @param userId
//   The identifier for the requested user resource to be deleted.
// 
// @param gatewayID
//   The identifier to link a gateway for the requested user resource profile.
// 
// @return status
//   Returns a success/failure of the deletion.
// 
// 
// Parameters:
//  - AuthzToken
//  - UserId
//  - GatewayID
func (p *AiravataClient) DeleteUserResourceProfile(ctx context.Context, authzToken *security_model.AuthzToken, userId string, gatewayID string) (r bool, err error) {
  if err = p.sendDeleteUserResourceProfile(authzToken, userId, gatewayID); err != nil { return }
  return p.recvDeleteUserResourceProfile()
}

func (p *AiravataClient) sendDeleteUserResourceProfile(authzToken *security_model.AuthzToken, userId string, gatewayID string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteUserResourceProfile", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataDeleteUserResourceProfileArgs{
  AuthzToken : authzToken,
  UserId : userId,
  GatewayID : gatewayID,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvDeleteUserResourceProfile() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteUserResourceProfile" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteUserResourceProfile failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteUserResourceProfile failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error272 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error273 error
    error273, err = error272.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error273
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteUserResourceProfile failed: invalid message type")
    return
  }
  result := AiravataDeleteUserResourceProfileResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Add a Compute Resource Preference to a registered User profile.
// 
// @param userId
//   The identifier for the User resource profile to be added.
// 
// @param gatewayID
//   The identifier to link a gateway for the requested user resource profile.
// 
// @param computeResourceId
//   Preferences related to a particular compute resource
// 
// @param computeResourcePreference
//   The ComputeResourcePreference object to be added to the resource profile.
// 
// @return status
//   Returns a success/failure of the addition. If a profile already exists, this operation will fail.
//    Instead an update should be used.
// 
// 
// Parameters:
//  - AuthzToken
//  - UserId
//  - GatewayID
//  - UserComputeResourceId
//  - UserComputeResourcePreference
func (p *AiravataClient) AddUserComputeResourcePreference(ctx context.Context, authzToken *security_model.AuthzToken, userId string, gatewayID string, userComputeResourceId string, userComputeResourcePreference *user_resource_profile_model.UserComputeResourcePreference) (r bool, err error) {
  if err = p.sendAddUserComputeResourcePreference(authzToken, userId, gatewayID, userComputeResourceId, userComputeResourcePreference); err != nil { return }
  return p.recvAddUserComputeResourcePreference()
}

func (p *AiravataClient) sendAddUserComputeResourcePreference(authzToken *security_model.AuthzToken, userId string, gatewayID string, userComputeResourceId string, userComputeResourcePreference *user_resource_profile_model.UserComputeResourcePreference)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("addUserComputeResourcePreference", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataAddUserComputeResourcePreferenceArgs{
  AuthzToken : authzToken,
  UserId : userId,
  GatewayID : gatewayID,
  UserComputeResourceId : userComputeResourceId,
  UserComputeResourcePreference : userComputeResourcePreference,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvAddUserComputeResourcePreference() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "addUserComputeResourcePreference" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "addUserComputeResourcePreference failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "addUserComputeResourcePreference failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error274 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error275 error
    error275, err = error274.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error275
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addUserComputeResourcePreference failed: invalid message type")
    return
  }
  result := AiravataAddUserComputeResourcePreferenceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Add a Storage Resource Preference to a registered user resource profile.
// 
// @param userId
//   The identifier of the user resource profile to be added.
// 
// @param gatewayID
//   The identifier to link a gateway for the requested user resource profile.
// 
// @param storageResourceId
//   Preferences related to a particular compute resource
// 
// @param computeResourcePreference
//   The ComputeResourcePreference object to be added to the resource profile.
// 
// @return status
//   Returns a success/failure of the addition. If a profile already exists, this operation will fail.
//    Instead an update should be used.
// 
// 
// Parameters:
//  - AuthzToken
//  - UserId
//  - GatewayID
//  - UserStorageResourceId
//  - UserStoragePreference
func (p *AiravataClient) AddUserStoragePreference(ctx context.Context, authzToken *security_model.AuthzToken, userId string, gatewayID string, userStorageResourceId string, userStoragePreference *user_resource_profile_model.UserStoragePreference) (r bool, err error) {
  if err = p.sendAddUserStoragePreference(authzToken, userId, gatewayID, userStorageResourceId, userStoragePreference); err != nil { return }
  return p.recvAddUserStoragePreference()
}

func (p *AiravataClient) sendAddUserStoragePreference(authzToken *security_model.AuthzToken, userId string, gatewayID string, userStorageResourceId string, userStoragePreference *user_resource_profile_model.UserStoragePreference)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("addUserStoragePreference", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataAddUserStoragePreferenceArgs{
  AuthzToken : authzToken,
  UserId : userId,
  GatewayID : gatewayID,
  UserStorageResourceId : userStorageResourceId,
  UserStoragePreference : userStoragePreference,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvAddUserStoragePreference() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "addUserStoragePreference" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "addUserStoragePreference failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "addUserStoragePreference failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error276 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error277 error
    error277, err = error276.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error277
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addUserStoragePreference failed: invalid message type")
    return
  }
  result := AiravataAddUserStoragePreferenceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Fetch a Compute Resource Preference of a registered user resource profile.
// 
// @param userId
//   The identifier for the user profile to be requested
// 
// @param gatewayID
//   The identifier to link a gateway for the requested user resource profile.
// 
// @param userComputeResourceId
//   Preferences related to a particular compute resource
// 
// @return computeResourcePreference
//   Returns the ComputeResourcePreference object.
// 
// 
// Parameters:
//  - AuthzToken
//  - UserId
//  - GatewayID
//  - UserComputeResourceId
func (p *AiravataClient) GetUserComputeResourcePreference(ctx context.Context, authzToken *security_model.AuthzToken, userId string, gatewayID string, userComputeResourceId string) (r *user_resource_profile_model.UserComputeResourcePreference, err error) {
  if err = p.sendGetUserComputeResourcePreference(authzToken, userId, gatewayID, userComputeResourceId); err != nil { return }
  return p.recvGetUserComputeResourcePreference()
}

func (p *AiravataClient) sendGetUserComputeResourcePreference(authzToken *security_model.AuthzToken, userId string, gatewayID string, userComputeResourceId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getUserComputeResourcePreference", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetUserComputeResourcePreferenceArgs{
  AuthzToken : authzToken,
  UserId : userId,
  GatewayID : gatewayID,
  UserComputeResourceId : userComputeResourceId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetUserComputeResourcePreference() (value *user_resource_profile_model.UserComputeResourcePreference, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getUserComputeResourcePreference" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getUserComputeResourcePreference failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUserComputeResourcePreference failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error278 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error279 error
    error279, err = error278.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error279
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUserComputeResourcePreference failed: invalid message type")
    return
  }
  result := AiravataGetUserComputeResourcePreferenceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Fetch a Storage Resource Preference of a registered user resource profile.
// 
// @param userId
//   The identifier of the user resource profile to request to fetch the particular storage resource preference.
// 
// @param gatewayID
//   The identifier to link a gateway for the requested user resource profile.
// 
// @param userStorageResourceId
//   Identifier of the Stprage Preference required to be fetched.
// 
// @return UserStoragePreference
//   Returns the StoragePreference object.
// 
// 
// Parameters:
//  - AuthzToken
//  - UserId
//  - GatewayID
//  - UserStorageResourceId
func (p *AiravataClient) GetUserStoragePreference(ctx context.Context, authzToken *security_model.AuthzToken, userId string, gatewayID string, userStorageResourceId string) (r *user_resource_profile_model.UserStoragePreference, err error) {
  if err = p.sendGetUserStoragePreference(authzToken, userId, gatewayID, userStorageResourceId); err != nil { return }
  return p.recvGetUserStoragePreference()
}

func (p *AiravataClient) sendGetUserStoragePreference(authzToken *security_model.AuthzToken, userId string, gatewayID string, userStorageResourceId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getUserStoragePreference", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetUserStoragePreferenceArgs{
  AuthzToken : authzToken,
  UserId : userId,
  GatewayID : gatewayID,
  UserStorageResourceId : userStorageResourceId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetUserStoragePreference() (value *user_resource_profile_model.UserStoragePreference, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getUserStoragePreference" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getUserStoragePreference failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUserStoragePreference failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error280 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error281 error
    error281, err = error280.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error281
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUserStoragePreference failed: invalid message type")
    return
  }
  result := AiravataGetUserStoragePreferenceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Fetch all Compute Resource Preferences of a registered gateway profile.
// 
// @param userId
//   The identifier of the user resource profile to request to fetch the particular storage resource preference.
// 
// @param gatewayID
//   The identifier for the gateway profile to be requested
// 
// @return computeResourcePreference
//   Returns the ComputeResourcePreference object.
// 
// 
// Parameters:
//  - AuthzToken
//  - UserId
//  - GatewayID
func (p *AiravataClient) GetAllUserComputeResourcePreferences(ctx context.Context, authzToken *security_model.AuthzToken, userId string, gatewayID string) (r []*user_resource_profile_model.UserComputeResourcePreference, err error) {
  if err = p.sendGetAllUserComputeResourcePreferences(authzToken, userId, gatewayID); err != nil { return }
  return p.recvGetAllUserComputeResourcePreferences()
}

func (p *AiravataClient) sendGetAllUserComputeResourcePreferences(authzToken *security_model.AuthzToken, userId string, gatewayID string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getAllUserComputeResourcePreferences", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetAllUserComputeResourcePreferencesArgs{
  AuthzToken : authzToken,
  UserId : userId,
  GatewayID : gatewayID,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetAllUserComputeResourcePreferences() (value []*user_resource_profile_model.UserComputeResourcePreference, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getAllUserComputeResourcePreferences" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getAllUserComputeResourcePreferences failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getAllUserComputeResourcePreferences failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error282 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error283 error
    error283, err = error282.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error283
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getAllUserComputeResourcePreferences failed: invalid message type")
    return
  }
  result := AiravataGetAllUserComputeResourcePreferencesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Fetch all User Storage Resource Preferences of a registered user profile.
// 
// @param userId
//   The identifier of the user resource profile to request to fetch the particular storage resource preference.
// 
// @param gatewayID
//   The identifier for the gateway profile to be requested
// 
// @return StoragePreference
//   Returns the StoragePreference object.
// 
// 
// Parameters:
//  - AuthzToken
//  - UserId
//  - GatewayID
func (p *AiravataClient) GetAllUserStoragePreferences(ctx context.Context, authzToken *security_model.AuthzToken, userId string, gatewayID string) (r []*user_resource_profile_model.UserStoragePreference, err error) {
  if err = p.sendGetAllUserStoragePreferences(authzToken, userId, gatewayID); err != nil { return }
  return p.recvGetAllUserStoragePreferences()
}

func (p *AiravataClient) sendGetAllUserStoragePreferences(authzToken *security_model.AuthzToken, userId string, gatewayID string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getAllUserStoragePreferences", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetAllUserStoragePreferencesArgs{
  AuthzToken : authzToken,
  UserId : userId,
  GatewayID : gatewayID,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetAllUserStoragePreferences() (value []*user_resource_profile_model.UserStoragePreference, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getAllUserStoragePreferences" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getAllUserStoragePreferences failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getAllUserStoragePreferences failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error284 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error285 error
    error285, err = error284.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error285
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getAllUserStoragePreferences failed: invalid message type")
    return
  }
  result := AiravataGetAllUserStoragePreferencesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// Fetch all user resources Profiles registered
// 
// @return UserResourceProfile
//   Returns all the UserResourcePrifle list object.
// 
// 
// 
// Parameters:
//  - AuthzToken
func (p *AiravataClient) GetAllUserResourceProfiles(ctx context.Context, authzToken *security_model.AuthzToken) (r []*user_resource_profile_model.UserResourceProfile, err error) {
  if err = p.sendGetAllUserResourceProfiles(authzToken); err != nil { return }
  return p.recvGetAllUserResourceProfiles()
}

func (p *AiravataClient) sendGetAllUserResourceProfiles(authzToken *security_model.AuthzToken)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getAllUserResourceProfiles", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetAllUserResourceProfilesArgs{
  AuthzToken : authzToken,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetAllUserResourceProfiles() (value []*user_resource_profile_model.UserResourceProfile, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getAllUserResourceProfiles" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getAllUserResourceProfiles failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getAllUserResourceProfiles failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error286 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error287 error
    error287, err = error286.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error287
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getAllUserResourceProfiles failed: invalid message type")
    return
  }
  result := AiravataGetAllUserResourceProfilesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Update a Compute Resource Preference to a registered user resource profile.
// 
// @param userId
//   The identifier for the user profile to be updated.
// 
// @param gatewayID
//   The identifier to link a gateway for the requested user resource profile.
// 
// @param userComputeResourceId
//   Preferences related to a particular compute resource
// 
// @param userComputeResourcePreference
//   The ComputeResourcePreference object to be updated to the resource profile.
// 
// @return status
//   Returns a success/failure of the updation.
// 
// 
// Parameters:
//  - AuthzToken
//  - UserId
//  - GatewayID
//  - UserComputeResourceId
//  - UserComputeResourcePreference
func (p *AiravataClient) UpdateUserComputeResourcePreference(ctx context.Context, authzToken *security_model.AuthzToken, userId string, gatewayID string, userComputeResourceId string, userComputeResourcePreference *user_resource_profile_model.UserComputeResourcePreference) (r bool, err error) {
  if err = p.sendUpdateUserComputeResourcePreference(authzToken, userId, gatewayID, userComputeResourceId, userComputeResourcePreference); err != nil { return }
  return p.recvUpdateUserComputeResourcePreference()
}

func (p *AiravataClient) sendUpdateUserComputeResourcePreference(authzToken *security_model.AuthzToken, userId string, gatewayID string, userComputeResourceId string, userComputeResourcePreference *user_resource_profile_model.UserComputeResourcePreference)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateUserComputeResourcePreference", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataUpdateUserComputeResourcePreferenceArgs{
  AuthzToken : authzToken,
  UserId : userId,
  GatewayID : gatewayID,
  UserComputeResourceId : userComputeResourceId,
  UserComputeResourcePreference : userComputeResourcePreference,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvUpdateUserComputeResourcePreference() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateUserComputeResourcePreference" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateUserComputeResourcePreference failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateUserComputeResourcePreference failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error288 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error289 error
    error289, err = error288.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error289
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateUserComputeResourcePreference failed: invalid message type")
    return
  }
  result := AiravataUpdateUserComputeResourcePreferenceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Update a Storage Resource Preference of a registered user resource profile.
// 
// @param userId
//   The identifier of the user resource profile to be updated.
// 
// @param gatewayID
//   The identifier to link a gateway for the requested user resource profile.
// 
// @param userStorageId
//   The Storage resource identifier of the one that you want to update
// 
// @param userStoragePreference
//   The storagePreference object to be updated to the resource profile.
// 
// @return status
//   Returns a success/failure of the updation.
// 
// 
// Parameters:
//  - AuthzToken
//  - UserId
//  - GatewayID
//  - UserStorageId
//  - UserStoragePreference
func (p *AiravataClient) UpdateUserStoragePreference(ctx context.Context, authzToken *security_model.AuthzToken, userId string, gatewayID string, userStorageId string, userStoragePreference *user_resource_profile_model.UserStoragePreference) (r bool, err error) {
  if err = p.sendUpdateUserStoragePreference(authzToken, userId, gatewayID, userStorageId, userStoragePreference); err != nil { return }
  return p.recvUpdateUserStoragePreference()
}

func (p *AiravataClient) sendUpdateUserStoragePreference(authzToken *security_model.AuthzToken, userId string, gatewayID string, userStorageId string, userStoragePreference *user_resource_profile_model.UserStoragePreference)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateUserStoragePreference", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataUpdateUserStoragePreferenceArgs{
  AuthzToken : authzToken,
  UserId : userId,
  GatewayID : gatewayID,
  UserStorageId : userStorageId,
  UserStoragePreference : userStoragePreference,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvUpdateUserStoragePreference() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateUserStoragePreference" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateUserStoragePreference failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateUserStoragePreference failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error290 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error291 error
    error291, err = error290.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error291
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateUserStoragePreference failed: invalid message type")
    return
  }
  result := AiravataUpdateUserStoragePreferenceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Delete the Compute Resource Preference of a registered user resource profile.
// 
// @param userId
//   The identifier for the user resource profile to be deleted.
// 
// @param gatewayID
//   The identifier to link a gateway for the requested user resource profile.
// 
// @param userComputeResourceId
//   Preferences related to a particular compute resource
// 
// @return status
//   Returns a success/failure of the deletion.
// 
// 
// Parameters:
//  - AuthzToken
//  - UserId
//  - GatewayID
//  - UserComputeResourceId
func (p *AiravataClient) DeleteUserComputeResourcePreference(ctx context.Context, authzToken *security_model.AuthzToken, userId string, gatewayID string, userComputeResourceId string) (r bool, err error) {
  if err = p.sendDeleteUserComputeResourcePreference(authzToken, userId, gatewayID, userComputeResourceId); err != nil { return }
  return p.recvDeleteUserComputeResourcePreference()
}

func (p *AiravataClient) sendDeleteUserComputeResourcePreference(authzToken *security_model.AuthzToken, userId string, gatewayID string, userComputeResourceId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteUserComputeResourcePreference", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataDeleteUserComputeResourcePreferenceArgs{
  AuthzToken : authzToken,
  UserId : userId,
  GatewayID : gatewayID,
  UserComputeResourceId : userComputeResourceId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvDeleteUserComputeResourcePreference() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteUserComputeResourcePreference" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteUserComputeResourcePreference failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteUserComputeResourcePreference failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error292 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error293 error
    error293, err = error292.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error293
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteUserComputeResourcePreference failed: invalid message type")
    return
  }
  result := AiravataDeleteUserComputeResourcePreferenceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Delete the Storage Resource Preference of a registered user resource profile.
// 
// @param userId
//   The identifier of the user profile to be deleted.
// 
// @param gatewayID
//   The identifier to link a gateway for the requested user resource profile.
// 
// @param userStorageId
//   ID of the storage preference you want to delete.
// 
// @return status
//   Returns a success/failure of the deletion.
// 
// 
// Parameters:
//  - AuthzToken
//  - UserId
//  - GatewayID
//  - UserStorageId
func (p *AiravataClient) DeleteUserStoragePreference(ctx context.Context, authzToken *security_model.AuthzToken, userId string, gatewayID string, userStorageId string) (r bool, err error) {
  if err = p.sendDeleteUserStoragePreference(authzToken, userId, gatewayID, userStorageId); err != nil { return }
  return p.recvDeleteUserStoragePreference()
}

func (p *AiravataClient) sendDeleteUserStoragePreference(authzToken *security_model.AuthzToken, userId string, gatewayID string, userStorageId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteUserStoragePreference", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataDeleteUserStoragePreferenceArgs{
  AuthzToken : authzToken,
  UserId : userId,
  GatewayID : gatewayID,
  UserStorageId : userStorageId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvDeleteUserStoragePreference() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteUserStoragePreference" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteUserStoragePreference failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteUserStoragePreference failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error294 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error295 error
    error295, err = error294.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error295
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteUserStoragePreference failed: invalid message type")
    return
  }
  result := AiravataDeleteUserStoragePreferenceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - AuthzToken
//  - GatewayId
func (p *AiravataClient) GetAllWorkflows(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string) (r []string, err error) {
  if err = p.sendGetAllWorkflows(authzToken, gatewayId); err != nil { return }
  return p.recvGetAllWorkflows()
}

func (p *AiravataClient) sendGetAllWorkflows(authzToken *security_model.AuthzToken, gatewayId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getAllWorkflows", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetAllWorkflowsArgs{
  AuthzToken : authzToken,
  GatewayId : gatewayId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetAllWorkflows() (value []string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getAllWorkflows" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getAllWorkflows failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getAllWorkflows failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error296 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error297 error
    error297, err = error296.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error297
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getAllWorkflows failed: invalid message type")
    return
  }
  result := AiravataGetAllWorkflowsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - AuthzToken
func (p *AiravataClient) GetLatestQueueStatuses(ctx context.Context, authzToken *security_model.AuthzToken) (r []*status_models.QueueStatusModel, err error) {
  if err = p.sendGetLatestQueueStatuses(authzToken); err != nil { return }
  return p.recvGetLatestQueueStatuses()
}

func (p *AiravataClient) sendGetLatestQueueStatuses(authzToken *security_model.AuthzToken)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getLatestQueueStatuses", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetLatestQueueStatusesArgs{
  AuthzToken : authzToken,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetLatestQueueStatuses() (value []*status_models.QueueStatusModel, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getLatestQueueStatuses" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getLatestQueueStatuses failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getLatestQueueStatuses failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error298 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error299 error
    error299, err = error298.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error299
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getLatestQueueStatuses failed: invalid message type")
    return
  }
  result := AiravataGetLatestQueueStatusesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// 
// API Methods Related for Work-Flow Submission Features.
// 
// 
// Parameters:
//  - AuthzToken
//  - WorkflowTemplateId
func (p *AiravataClient) GetWorkflow(ctx context.Context, authzToken *security_model.AuthzToken, workflowTemplateId string) (r *workflow_data_model.WorkflowModel, err error) {
  if err = p.sendGetWorkflow(authzToken, workflowTemplateId); err != nil { return }
  return p.recvGetWorkflow()
}

func (p *AiravataClient) sendGetWorkflow(authzToken *security_model.AuthzToken, workflowTemplateId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getWorkflow", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetWorkflowArgs{
  AuthzToken : authzToken,
  WorkflowTemplateId : workflowTemplateId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetWorkflow() (value *workflow_data_model.WorkflowModel, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getWorkflow" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getWorkflow failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getWorkflow failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error300 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error301 error
    error301, err = error300.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error301
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getWorkflow failed: invalid message type")
    return
  }
  result := AiravataGetWorkflowResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - AuthzToken
//  - WorkflowTemplateId
func (p *AiravataClient) DeleteWorkflow(ctx context.Context, authzToken *security_model.AuthzToken, workflowTemplateId string) (err error) {
  if err = p.sendDeleteWorkflow(authzToken, workflowTemplateId); err != nil { return }
  return p.recvDeleteWorkflow()
}

func (p *AiravataClient) sendDeleteWorkflow(authzToken *security_model.AuthzToken, workflowTemplateId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteWorkflow", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataDeleteWorkflowArgs{
  AuthzToken : authzToken,
  WorkflowTemplateId : workflowTemplateId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvDeleteWorkflow() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteWorkflow" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteWorkflow failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteWorkflow failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error302 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error303 error
    error303, err = error302.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error303
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteWorkflow failed: invalid message type")
    return
  }
  result := AiravataDeleteWorkflowResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  return
}

// Parameters:
//  - AuthzToken
//  - GatewayId
//  - Workflow
func (p *AiravataClient) RegisterWorkflow(ctx context.Context, authzToken *security_model.AuthzToken, gatewayId string, workflow *workflow_data_model.WorkflowModel) (r string, err error) {
  if err = p.sendRegisterWorkflow(authzToken, gatewayId, workflow); err != nil { return }
  return p.recvRegisterWorkflow()
}

func (p *AiravataClient) sendRegisterWorkflow(authzToken *security_model.AuthzToken, gatewayId string, workflow *workflow_data_model.WorkflowModel)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("registerWorkflow", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataRegisterWorkflowArgs{
  AuthzToken : authzToken,
  GatewayId : gatewayId,
  Workflow : workflow,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvRegisterWorkflow() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "registerWorkflow" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "registerWorkflow failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "registerWorkflow failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error304 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error305 error
    error305, err = error304.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error305
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "registerWorkflow failed: invalid message type")
    return
  }
  result := AiravataRegisterWorkflowResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - AuthzToken
//  - WorkflowTemplateId
//  - Workflow
func (p *AiravataClient) UpdateWorkflow(ctx context.Context, authzToken *security_model.AuthzToken, workflowTemplateId string, workflow *workflow_data_model.WorkflowModel) (err error) {
  if err = p.sendUpdateWorkflow(authzToken, workflowTemplateId, workflow); err != nil { return }
  return p.recvUpdateWorkflow()
}

func (p *AiravataClient) sendUpdateWorkflow(authzToken *security_model.AuthzToken, workflowTemplateId string, workflow *workflow_data_model.WorkflowModel)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateWorkflow", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataUpdateWorkflowArgs{
  AuthzToken : authzToken,
  WorkflowTemplateId : workflowTemplateId,
  Workflow : workflow,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvUpdateWorkflow() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateWorkflow" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateWorkflow failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateWorkflow failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error306 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error307 error
    error307, err = error306.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error307
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateWorkflow failed: invalid message type")
    return
  }
  result := AiravataUpdateWorkflowResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  return
}

// Parameters:
//  - AuthzToken
//  - WorkflowName
func (p *AiravataClient) GetWorkflowTemplateId(ctx context.Context, authzToken *security_model.AuthzToken, workflowName string) (r string, err error) {
  if err = p.sendGetWorkflowTemplateId(authzToken, workflowName); err != nil { return }
  return p.recvGetWorkflowTemplateId()
}

func (p *AiravataClient) sendGetWorkflowTemplateId(authzToken *security_model.AuthzToken, workflowName string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getWorkflowTemplateId", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetWorkflowTemplateIdArgs{
  AuthzToken : authzToken,
  WorkflowName : workflowName,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetWorkflowTemplateId() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getWorkflowTemplateId" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getWorkflowTemplateId failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getWorkflowTemplateId failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error308 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error309 error
    error309, err = error308.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error309
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getWorkflowTemplateId failed: invalid message type")
    return
  }
  result := AiravataGetWorkflowTemplateIdResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - AuthzToken
//  - WorkflowName
func (p *AiravataClient) IsWorkflowExistWithName(ctx context.Context, authzToken *security_model.AuthzToken, workflowName string) (r bool, err error) {
  if err = p.sendIsWorkflowExistWithName(authzToken, workflowName); err != nil { return }
  return p.recvIsWorkflowExistWithName()
}

func (p *AiravataClient) sendIsWorkflowExistWithName(authzToken *security_model.AuthzToken, workflowName string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("isWorkflowExistWithName", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataIsWorkflowExistWithNameArgs{
  AuthzToken : authzToken,
  WorkflowName : workflowName,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvIsWorkflowExistWithName() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "isWorkflowExistWithName" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "isWorkflowExistWithName failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "isWorkflowExistWithName failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error310 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error311 error
    error311, err = error310.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error311
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "isWorkflowExistWithName failed: invalid message type")
    return
  }
  result := AiravataIsWorkflowExistWithNameResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// API Methods related to replica catalog
// 
// 
// Parameters:
//  - AuthzToken
//  - DataProductModel
func (p *AiravataClient) RegisterDataProduct(ctx context.Context, authzToken *security_model.AuthzToken, dataProductModel *replica_catalog_models.DataProductModel) (r string, err error) {
  if err = p.sendRegisterDataProduct(authzToken, dataProductModel); err != nil { return }
  return p.recvRegisterDataProduct()
}

func (p *AiravataClient) sendRegisterDataProduct(authzToken *security_model.AuthzToken, dataProductModel *replica_catalog_models.DataProductModel)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("registerDataProduct", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataRegisterDataProductArgs{
  AuthzToken : authzToken,
  DataProductModel : dataProductModel,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvRegisterDataProduct() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "registerDataProduct" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "registerDataProduct failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "registerDataProduct failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error312 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error313 error
    error313, err = error312.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error313
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "registerDataProduct failed: invalid message type")
    return
  }
  result := AiravataRegisterDataProductResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - AuthzToken
//  - DataProductUri
func (p *AiravataClient) GetDataProduct(ctx context.Context, authzToken *security_model.AuthzToken, dataProductUri string) (r *replica_catalog_models.DataProductModel, err error) {
  if err = p.sendGetDataProduct(authzToken, dataProductUri); err != nil { return }
  return p.recvGetDataProduct()
}

func (p *AiravataClient) sendGetDataProduct(authzToken *security_model.AuthzToken, dataProductUri string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getDataProduct", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetDataProductArgs{
  AuthzToken : authzToken,
  DataProductUri : dataProductUri,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetDataProduct() (value *replica_catalog_models.DataProductModel, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getDataProduct" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getDataProduct failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getDataProduct failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error314 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error315 error
    error315, err = error314.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error315
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getDataProduct failed: invalid message type")
    return
  }
  result := AiravataGetDataProductResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - AuthzToken
//  - ReplicaLocationModel
func (p *AiravataClient) RegisterReplicaLocation(ctx context.Context, authzToken *security_model.AuthzToken, replicaLocationModel *replica_catalog_models.DataReplicaLocationModel) (r string, err error) {
  if err = p.sendRegisterReplicaLocation(authzToken, replicaLocationModel); err != nil { return }
  return p.recvRegisterReplicaLocation()
}

func (p *AiravataClient) sendRegisterReplicaLocation(authzToken *security_model.AuthzToken, replicaLocationModel *replica_catalog_models.DataReplicaLocationModel)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("registerReplicaLocation", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataRegisterReplicaLocationArgs{
  AuthzToken : authzToken,
  ReplicaLocationModel : replicaLocationModel,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvRegisterReplicaLocation() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "registerReplicaLocation" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "registerReplicaLocation failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "registerReplicaLocation failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error316 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error317 error
    error317, err = error316.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error317
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "registerReplicaLocation failed: invalid message type")
    return
  }
  result := AiravataRegisterReplicaLocationResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - AuthzToken
//  - ProductUri
func (p *AiravataClient) GetParentDataProduct(ctx context.Context, authzToken *security_model.AuthzToken, productUri string) (r *replica_catalog_models.DataProductModel, err error) {
  if err = p.sendGetParentDataProduct(authzToken, productUri); err != nil { return }
  return p.recvGetParentDataProduct()
}

func (p *AiravataClient) sendGetParentDataProduct(authzToken *security_model.AuthzToken, productUri string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getParentDataProduct", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetParentDataProductArgs{
  AuthzToken : authzToken,
  ProductUri : productUri,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetParentDataProduct() (value *replica_catalog_models.DataProductModel, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getParentDataProduct" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getParentDataProduct failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getParentDataProduct failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error318 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error319 error
    error319, err = error318.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error319
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getParentDataProduct failed: invalid message type")
    return
  }
  result := AiravataGetParentDataProductResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - AuthzToken
//  - ProductUri
func (p *AiravataClient) GetChildDataProducts(ctx context.Context, authzToken *security_model.AuthzToken, productUri string) (r []*replica_catalog_models.DataProductModel, err error) {
  if err = p.sendGetChildDataProducts(authzToken, productUri); err != nil { return }
  return p.recvGetChildDataProducts()
}

func (p *AiravataClient) sendGetChildDataProducts(authzToken *security_model.AuthzToken, productUri string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getChildDataProducts", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetChildDataProductsArgs{
  AuthzToken : authzToken,
  ProductUri : productUri,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetChildDataProducts() (value []*replica_catalog_models.DataProductModel, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getChildDataProducts" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getChildDataProducts failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getChildDataProducts failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error320 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error321 error
    error321, err = error320.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error321
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getChildDataProducts failed: invalid message type")
    return
  }
  result := AiravataGetChildDataProductsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Group Manager and Data Sharing Related API methods
// 
// 
// Parameters:
//  - AuthzToken
//  - ResourceId
//  - ResourceType
//  - UserPermissionList
func (p *AiravataClient) ShareResourceWithUsers(ctx context.Context, authzToken *security_model.AuthzToken, resourceId string, resourceType group_manager_model.ResourceType, userPermissionList map[string]group_manager_model.ResourcePermissionType) (r bool, err error) {
  if err = p.sendShareResourceWithUsers(authzToken, resourceId, resourceType, userPermissionList); err != nil { return }
  return p.recvShareResourceWithUsers()
}

func (p *AiravataClient) sendShareResourceWithUsers(authzToken *security_model.AuthzToken, resourceId string, resourceType group_manager_model.ResourceType, userPermissionList map[string]group_manager_model.ResourcePermissionType)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("shareResourceWithUsers", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataShareResourceWithUsersArgs{
  AuthzToken : authzToken,
  ResourceId : resourceId,
  ResourceType : resourceType,
  UserPermissionList : userPermissionList,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvShareResourceWithUsers() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "shareResourceWithUsers" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "shareResourceWithUsers failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "shareResourceWithUsers failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error322 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error323 error
    error323, err = error322.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error323
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "shareResourceWithUsers failed: invalid message type")
    return
  }
  result := AiravataShareResourceWithUsersResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - AuthzToken
//  - ResourceId
//  - ResourceType
//  - UserPermissionList
func (p *AiravataClient) RevokeSharingOfResourceFromUsers(ctx context.Context, authzToken *security_model.AuthzToken, resourceId string, resourceType group_manager_model.ResourceType, userPermissionList map[string]group_manager_model.ResourcePermissionType) (r bool, err error) {
  if err = p.sendRevokeSharingOfResourceFromUsers(authzToken, resourceId, resourceType, userPermissionList); err != nil { return }
  return p.recvRevokeSharingOfResourceFromUsers()
}

func (p *AiravataClient) sendRevokeSharingOfResourceFromUsers(authzToken *security_model.AuthzToken, resourceId string, resourceType group_manager_model.ResourceType, userPermissionList map[string]group_manager_model.ResourcePermissionType)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("revokeSharingOfResourceFromUsers", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataRevokeSharingOfResourceFromUsersArgs{
  AuthzToken : authzToken,
  ResourceId : resourceId,
  ResourceType : resourceType,
  UserPermissionList : userPermissionList,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvRevokeSharingOfResourceFromUsers() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "revokeSharingOfResourceFromUsers" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "revokeSharingOfResourceFromUsers failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "revokeSharingOfResourceFromUsers failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error324 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error325 error
    error325, err = error324.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error325
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "revokeSharingOfResourceFromUsers failed: invalid message type")
    return
  }
  result := AiravataRevokeSharingOfResourceFromUsersResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - AuthzToken
//  - ResourceId
//  - ResourceType
//  - PermissionType
func (p *AiravataClient) GetAllAccessibleUsers(ctx context.Context, authzToken *security_model.AuthzToken, resourceId string, resourceType group_manager_model.ResourceType, permissionType group_manager_model.ResourcePermissionType) (r []string, err error) {
  if err = p.sendGetAllAccessibleUsers(authzToken, resourceId, resourceType, permissionType); err != nil { return }
  return p.recvGetAllAccessibleUsers()
}

func (p *AiravataClient) sendGetAllAccessibleUsers(authzToken *security_model.AuthzToken, resourceId string, resourceType group_manager_model.ResourceType, permissionType group_manager_model.ResourcePermissionType)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getAllAccessibleUsers", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetAllAccessibleUsersArgs{
  AuthzToken : authzToken,
  ResourceId : resourceId,
  ResourceType : resourceType,
  PermissionType : permissionType,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetAllAccessibleUsers() (value []string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getAllAccessibleUsers" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getAllAccessibleUsers failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getAllAccessibleUsers failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error326 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error327 error
    error327, err = error326.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error327
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getAllAccessibleUsers failed: invalid message type")
    return
  }
  result := AiravataGetAllAccessibleUsersResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - AuthzToken
//  - GroupModel
func (p *AiravataClient) CreateGroup(ctx context.Context, authzToken *security_model.AuthzToken, groupModel *group_manager_model.GroupModel) (r string, err error) {
  if err = p.sendCreateGroup(authzToken, groupModel); err != nil { return }
  return p.recvCreateGroup()
}

func (p *AiravataClient) sendCreateGroup(authzToken *security_model.AuthzToken, groupModel *group_manager_model.GroupModel)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createGroup", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataCreateGroupArgs{
  AuthzToken : authzToken,
  GroupModel : groupModel,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvCreateGroup() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createGroup" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createGroup failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createGroup failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error328 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error329 error
    error329, err = error328.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error329
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createGroup failed: invalid message type")
    return
  }
  result := AiravataCreateGroupResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - AuthzToken
//  - GroupModel
func (p *AiravataClient) UpdateGroup(ctx context.Context, authzToken *security_model.AuthzToken, groupModel *group_manager_model.GroupModel) (r bool, err error) {
  if err = p.sendUpdateGroup(authzToken, groupModel); err != nil { return }
  return p.recvUpdateGroup()
}

func (p *AiravataClient) sendUpdateGroup(authzToken *security_model.AuthzToken, groupModel *group_manager_model.GroupModel)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateGroup", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataUpdateGroupArgs{
  AuthzToken : authzToken,
  GroupModel : groupModel,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvUpdateGroup() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateGroup" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateGroup failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateGroup failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error330 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error331 error
    error331, err = error330.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error331
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateGroup failed: invalid message type")
    return
  }
  result := AiravataUpdateGroupResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - AuthzToken
//  - GroupId
//  - OwnerId
func (p *AiravataClient) DeleteGroup(ctx context.Context, authzToken *security_model.AuthzToken, groupId string, ownerId string) (r bool, err error) {
  if err = p.sendDeleteGroup(authzToken, groupId, ownerId); err != nil { return }
  return p.recvDeleteGroup()
}

func (p *AiravataClient) sendDeleteGroup(authzToken *security_model.AuthzToken, groupId string, ownerId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteGroup", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataDeleteGroupArgs{
  AuthzToken : authzToken,
  GroupId : groupId,
  OwnerId : ownerId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvDeleteGroup() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteGroup" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteGroup failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteGroup failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error332 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error333 error
    error333, err = error332.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error333
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteGroup failed: invalid message type")
    return
  }
  result := AiravataDeleteGroupResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - AuthzToken
//  - GroupId
func (p *AiravataClient) GetGroup(ctx context.Context, authzToken *security_model.AuthzToken, groupId string) (r *group_manager_model.GroupModel, err error) {
  if err = p.sendGetGroup(authzToken, groupId); err != nil { return }
  return p.recvGetGroup()
}

func (p *AiravataClient) sendGetGroup(authzToken *security_model.AuthzToken, groupId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getGroup", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetGroupArgs{
  AuthzToken : authzToken,
  GroupId : groupId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetGroup() (value *group_manager_model.GroupModel, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getGroup" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getGroup failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getGroup failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error334 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error335 error
    error335, err = error334.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error335
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getGroup failed: invalid message type")
    return
  }
  result := AiravataGetGroupResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - AuthzToken
//  - UserName
func (p *AiravataClient) GetAllGroupsUserBelongs(ctx context.Context, authzToken *security_model.AuthzToken, userName string) (r []*group_manager_model.GroupModel, err error) {
  if err = p.sendGetAllGroupsUserBelongs(authzToken, userName); err != nil { return }
  return p.recvGetAllGroupsUserBelongs()
}

func (p *AiravataClient) sendGetAllGroupsUserBelongs(authzToken *security_model.AuthzToken, userName string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getAllGroupsUserBelongs", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AiravataGetAllGroupsUserBelongsArgs{
  AuthzToken : authzToken,
  UserName : userName,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AiravataClient) recvGetAllGroupsUserBelongs() (value []*group_manager_model.GroupModel, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getAllGroupsUserBelongs" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getAllGroupsUserBelongs failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getAllGroupsUserBelongs failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error336 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error337 error
    error337, err = error336.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error337
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getAllGroupsUserBelongs failed: invalid message type")
    return
  }
  result := AiravataGetAllGroupsUserBelongsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ire != nil {
    err = result.Ire
    return 
  } else   if result.Ace != nil {
    err = result.Ace
    return 
  } else   if result.Ase != nil {
    err = result.Ase
    return 
  } else   if result.Ae != nil {
    err = result.Ae
    return 
  }
  value = result.GetSuccess()
  return
}


type AiravataProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler Airavata
}

func (p *AiravataProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *AiravataProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *AiravataProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewAiravataProcessor(handler Airavata) *AiravataProcessor {

  self338 := &AiravataProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self338.processorMap["getAPIVersion"] = &airavataProcessorGetAPIVersion{handler:handler}
  self338.processorMap["isUserExists"] = &airavataProcessorIsUserExists{handler:handler}
  self338.processorMap["addGateway"] = &airavataProcessorAddGateway{handler:handler}
  self338.processorMap["getAllUsersInGateway"] = &airavataProcessorGetAllUsersInGateway{handler:handler}
  self338.processorMap["updateGateway"] = &airavataProcessorUpdateGateway{handler:handler}
  self338.processorMap["getGateway"] = &airavataProcessorGetGateway{handler:handler}
  self338.processorMap["deleteGateway"] = &airavataProcessorDeleteGateway{handler:handler}
  self338.processorMap["getAllGateways"] = &airavataProcessorGetAllGateways{handler:handler}
  self338.processorMap["isGatewayExist"] = &airavataProcessorIsGatewayExist{handler:handler}
  self338.processorMap["createNotification"] = &airavataProcessorCreateNotification{handler:handler}
  self338.processorMap["updateNotification"] = &airavataProcessorUpdateNotification{handler:handler}
  self338.processorMap["deleteNotification"] = &airavataProcessorDeleteNotification{handler:handler}
  self338.processorMap["getNotification"] = &airavataProcessorGetNotification{handler:handler}
  self338.processorMap["getAllNotifications"] = &airavataProcessorGetAllNotifications{handler:handler}
  self338.processorMap["generateAndRegisterSSHKeys"] = &airavataProcessorGenerateAndRegisterSSHKeys{handler:handler}
  self338.processorMap["registerPwdCredential"] = &airavataProcessorRegisterPwdCredential{handler:handler}
  self338.processorMap["getSSHPubKey"] = &airavataProcessorGetSSHPubKey{handler:handler}
  self338.processorMap["getAllGatewaySSHPubKeys"] = &airavataProcessorGetAllGatewaySSHPubKeys{handler:handler}
  self338.processorMap["getAllCredentialSummaryForGateway"] = &airavataProcessorGetAllCredentialSummaryForGateway{handler:handler}
  self338.processorMap["getAllCredentialSummaryForUsersInGateway"] = &airavataProcessorGetAllCredentialSummaryForUsersInGateway{handler:handler}
  self338.processorMap["getAllGatewayPWDCredentials"] = &airavataProcessorGetAllGatewayPWDCredentials{handler:handler}
  self338.processorMap["deleteSSHPubKey"] = &airavataProcessorDeleteSSHPubKey{handler:handler}
  self338.processorMap["deletePWDCredential"] = &airavataProcessorDeletePWDCredential{handler:handler}
  self338.processorMap["createProject"] = &airavataProcessorCreateProject{handler:handler}
  self338.processorMap["updateProject"] = &airavataProcessorUpdateProject{handler:handler}
  self338.processorMap["getProject"] = &airavataProcessorGetProject{handler:handler}
  self338.processorMap["deleteProject"] = &airavataProcessorDeleteProject{handler:handler}
  self338.processorMap["getUserProjects"] = &airavataProcessorGetUserProjects{handler:handler}
  self338.processorMap["searchProjects"] = &airavataProcessorSearchProjects{handler:handler}
  self338.processorMap["searchExperiments"] = &airavataProcessorSearchExperiments{handler:handler}
  self338.processorMap["getExperimentStatistics"] = &airavataProcessorGetExperimentStatistics{handler:handler}
  self338.processorMap["getExperimentsInProject"] = &airavataProcessorGetExperimentsInProject{handler:handler}
  self338.processorMap["getUserExperiments"] = &airavataProcessorGetUserExperiments{handler:handler}
  self338.processorMap["createExperiment"] = &airavataProcessorCreateExperiment{handler:handler}
  self338.processorMap["deleteExperiment"] = &airavataProcessorDeleteExperiment{handler:handler}
  self338.processorMap["getExperiment"] = &airavataProcessorGetExperiment{handler:handler}
  self338.processorMap["getExperimentByAdmin"] = &airavataProcessorGetExperimentByAdmin{handler:handler}
  self338.processorMap["getDetailedExperimentTree"] = &airavataProcessorGetDetailedExperimentTree{handler:handler}
  self338.processorMap["updateExperiment"] = &airavataProcessorUpdateExperiment{handler:handler}
  self338.processorMap["updateExperimentConfiguration"] = &airavataProcessorUpdateExperimentConfiguration{handler:handler}
  self338.processorMap["updateResourceScheduleing"] = &airavataProcessorUpdateResourceScheduleing{handler:handler}
  self338.processorMap["validateExperiment"] = &airavataProcessorValidateExperiment{handler:handler}
  self338.processorMap["launchExperiment"] = &airavataProcessorLaunchExperiment{handler:handler}
  self338.processorMap["getExperimentStatus"] = &airavataProcessorGetExperimentStatus{handler:handler}
  self338.processorMap["getExperimentOutputs"] = &airavataProcessorGetExperimentOutputs{handler:handler}
  self338.processorMap["getIntermediateOutputs"] = &airavataProcessorGetIntermediateOutputs{handler:handler}
  self338.processorMap["getJobStatuses"] = &airavataProcessorGetJobStatuses{handler:handler}
  self338.processorMap["getJobDetails"] = &airavataProcessorGetJobDetails{handler:handler}
  self338.processorMap["cloneExperiment"] = &airavataProcessorCloneExperiment{handler:handler}
  self338.processorMap["cloneExperimentByAdmin"] = &airavataProcessorCloneExperimentByAdmin{handler:handler}
  self338.processorMap["terminateExperiment"] = &airavataProcessorTerminateExperiment{handler:handler}
  self338.processorMap["registerApplicationModule"] = &airavataProcessorRegisterApplicationModule{handler:handler}
  self338.processorMap["getApplicationModule"] = &airavataProcessorGetApplicationModule{handler:handler}
  self338.processorMap["updateApplicationModule"] = &airavataProcessorUpdateApplicationModule{handler:handler}
  self338.processorMap["getAllAppModules"] = &airavataProcessorGetAllAppModules{handler:handler}
  self338.processorMap["deleteApplicationModule"] = &airavataProcessorDeleteApplicationModule{handler:handler}
  self338.processorMap["registerApplicationDeployment"] = &airavataProcessorRegisterApplicationDeployment{handler:handler}
  self338.processorMap["getApplicationDeployment"] = &airavataProcessorGetApplicationDeployment{handler:handler}
  self338.processorMap["updateApplicationDeployment"] = &airavataProcessorUpdateApplicationDeployment{handler:handler}
  self338.processorMap["deleteApplicationDeployment"] = &airavataProcessorDeleteApplicationDeployment{handler:handler}
  self338.processorMap["getAllApplicationDeployments"] = &airavataProcessorGetAllApplicationDeployments{handler:handler}
  self338.processorMap["getAppModuleDeployedResources"] = &airavataProcessorGetAppModuleDeployedResources{handler:handler}
  self338.processorMap["registerApplicationInterface"] = &airavataProcessorRegisterApplicationInterface{handler:handler}
  self338.processorMap["cloneApplicationInterface"] = &airavataProcessorCloneApplicationInterface{handler:handler}
  self338.processorMap["getApplicationInterface"] = &airavataProcessorGetApplicationInterface{handler:handler}
  self338.processorMap["updateApplicationInterface"] = &airavataProcessorUpdateApplicationInterface{handler:handler}
  self338.processorMap["deleteApplicationInterface"] = &airavataProcessorDeleteApplicationInterface{handler:handler}
  self338.processorMap["getAllApplicationInterfaceNames"] = &airavataProcessorGetAllApplicationInterfaceNames{handler:handler}
  self338.processorMap["getAllApplicationInterfaces"] = &airavataProcessorGetAllApplicationInterfaces{handler:handler}
  self338.processorMap["getApplicationInputs"] = &airavataProcessorGetApplicationInputs{handler:handler}
  self338.processorMap["getApplicationOutputs"] = &airavataProcessorGetApplicationOutputs{handler:handler}
  self338.processorMap["getAvailableAppInterfaceComputeResources"] = &airavataProcessorGetAvailableAppInterfaceComputeResources{handler:handler}
  self338.processorMap["registerComputeResource"] = &airavataProcessorRegisterComputeResource{handler:handler}
  self338.processorMap["getComputeResource"] = &airavataProcessorGetComputeResource{handler:handler}
  self338.processorMap["getAllComputeResourceNames"] = &airavataProcessorGetAllComputeResourceNames{handler:handler}
  self338.processorMap["updateComputeResource"] = &airavataProcessorUpdateComputeResource{handler:handler}
  self338.processorMap["deleteComputeResource"] = &airavataProcessorDeleteComputeResource{handler:handler}
  self338.processorMap["registerStorageResource"] = &airavataProcessorRegisterStorageResource{handler:handler}
  self338.processorMap["getStorageResource"] = &airavataProcessorGetStorageResource{handler:handler}
  self338.processorMap["getAllStorageResourceNames"] = &airavataProcessorGetAllStorageResourceNames{handler:handler}
  self338.processorMap["updateStorageResource"] = &airavataProcessorUpdateStorageResource{handler:handler}
  self338.processorMap["deleteStorageResource"] = &airavataProcessorDeleteStorageResource{handler:handler}
  self338.processorMap["addLocalSubmissionDetails"] = &airavataProcessorAddLocalSubmissionDetails{handler:handler}
  self338.processorMap["updateLocalSubmissionDetails"] = &airavataProcessorUpdateLocalSubmissionDetails{handler:handler}
  self338.processorMap["getLocalJobSubmission"] = &airavataProcessorGetLocalJobSubmission{handler:handler}
  self338.processorMap["addSSHJobSubmissionDetails"] = &airavataProcessorAddSSHJobSubmissionDetails{handler:handler}
  self338.processorMap["addSSHForkJobSubmissionDetails"] = &airavataProcessorAddSSHForkJobSubmissionDetails{handler:handler}
  self338.processorMap["getSSHJobSubmission"] = &airavataProcessorGetSSHJobSubmission{handler:handler}
  self338.processorMap["addUNICOREJobSubmissionDetails"] = &airavataProcessorAddUNICOREJobSubmissionDetails{handler:handler}
  self338.processorMap["getUnicoreJobSubmission"] = &airavataProcessorGetUnicoreJobSubmission{handler:handler}
  self338.processorMap["addCloudJobSubmissionDetails"] = &airavataProcessorAddCloudJobSubmissionDetails{handler:handler}
  self338.processorMap["getCloudJobSubmission"] = &airavataProcessorGetCloudJobSubmission{handler:handler}
  self338.processorMap["updateSSHJobSubmissionDetails"] = &airavataProcessorUpdateSSHJobSubmissionDetails{handler:handler}
  self338.processorMap["updateCloudJobSubmissionDetails"] = &airavataProcessorUpdateCloudJobSubmissionDetails{handler:handler}
  self338.processorMap["updateUnicoreJobSubmissionDetails"] = &airavataProcessorUpdateUnicoreJobSubmissionDetails{handler:handler}
  self338.processorMap["addLocalDataMovementDetails"] = &airavataProcessorAddLocalDataMovementDetails{handler:handler}
  self338.processorMap["updateLocalDataMovementDetails"] = &airavataProcessorUpdateLocalDataMovementDetails{handler:handler}
  self338.processorMap["getLocalDataMovement"] = &airavataProcessorGetLocalDataMovement{handler:handler}
  self338.processorMap["addSCPDataMovementDetails"] = &airavataProcessorAddSCPDataMovementDetails{handler:handler}
  self338.processorMap["updateSCPDataMovementDetails"] = &airavataProcessorUpdateSCPDataMovementDetails{handler:handler}
  self338.processorMap["getSCPDataMovement"] = &airavataProcessorGetSCPDataMovement{handler:handler}
  self338.processorMap["addUnicoreDataMovementDetails"] = &airavataProcessorAddUnicoreDataMovementDetails{handler:handler}
  self338.processorMap["updateUnicoreDataMovementDetails"] = &airavataProcessorUpdateUnicoreDataMovementDetails{handler:handler}
  self338.processorMap["getUnicoreDataMovement"] = &airavataProcessorGetUnicoreDataMovement{handler:handler}
  self338.processorMap["addGridFTPDataMovementDetails"] = &airavataProcessorAddGridFTPDataMovementDetails{handler:handler}
  self338.processorMap["updateGridFTPDataMovementDetails"] = &airavataProcessorUpdateGridFTPDataMovementDetails{handler:handler}
  self338.processorMap["getGridFTPDataMovement"] = &airavataProcessorGetGridFTPDataMovement{handler:handler}
  self338.processorMap["changeJobSubmissionPriority"] = &airavataProcessorChangeJobSubmissionPriority{handler:handler}
  self338.processorMap["changeDataMovementPriority"] = &airavataProcessorChangeDataMovementPriority{handler:handler}
  self338.processorMap["changeJobSubmissionPriorities"] = &airavataProcessorChangeJobSubmissionPriorities{handler:handler}
  self338.processorMap["changeDataMovementPriorities"] = &airavataProcessorChangeDataMovementPriorities{handler:handler}
  self338.processorMap["deleteJobSubmissionInterface"] = &airavataProcessorDeleteJobSubmissionInterface{handler:handler}
  self338.processorMap["deleteDataMovementInterface"] = &airavataProcessorDeleteDataMovementInterface{handler:handler}
  self338.processorMap["registerResourceJobManager"] = &airavataProcessorRegisterResourceJobManager{handler:handler}
  self338.processorMap["updateResourceJobManager"] = &airavataProcessorUpdateResourceJobManager{handler:handler}
  self338.processorMap["getResourceJobManager"] = &airavataProcessorGetResourceJobManager{handler:handler}
  self338.processorMap["deleteResourceJobManager"] = &airavataProcessorDeleteResourceJobManager{handler:handler}
  self338.processorMap["deleteBatchQueue"] = &airavataProcessorDeleteBatchQueue{handler:handler}
  self338.processorMap["registerGatewayResourceProfile"] = &airavataProcessorRegisterGatewayResourceProfile{handler:handler}
  self338.processorMap["getGatewayResourceProfile"] = &airavataProcessorGetGatewayResourceProfile{handler:handler}
  self338.processorMap["updateGatewayResourceProfile"] = &airavataProcessorUpdateGatewayResourceProfile{handler:handler}
  self338.processorMap["deleteGatewayResourceProfile"] = &airavataProcessorDeleteGatewayResourceProfile{handler:handler}
  self338.processorMap["addGatewayComputeResourcePreference"] = &airavataProcessorAddGatewayComputeResourcePreference{handler:handler}
  self338.processorMap["addGatewayStoragePreference"] = &airavataProcessorAddGatewayStoragePreference{handler:handler}
  self338.processorMap["getGatewayComputeResourcePreference"] = &airavataProcessorGetGatewayComputeResourcePreference{handler:handler}
  self338.processorMap["getGatewayStoragePreference"] = &airavataProcessorGetGatewayStoragePreference{handler:handler}
  self338.processorMap["getAllGatewayComputeResourcePreferences"] = &airavataProcessorGetAllGatewayComputeResourcePreferences{handler:handler}
  self338.processorMap["getAllGatewayStoragePreferences"] = &airavataProcessorGetAllGatewayStoragePreferences{handler:handler}
  self338.processorMap["getAllGatewayResourceProfiles"] = &airavataProcessorGetAllGatewayResourceProfiles{handler:handler}
  self338.processorMap["updateGatewayComputeResourcePreference"] = &airavataProcessorUpdateGatewayComputeResourcePreference{handler:handler}
  self338.processorMap["updateGatewayStoragePreference"] = &airavataProcessorUpdateGatewayStoragePreference{handler:handler}
  self338.processorMap["deleteGatewayComputeResourcePreference"] = &airavataProcessorDeleteGatewayComputeResourcePreference{handler:handler}
  self338.processorMap["deleteGatewayStoragePreference"] = &airavataProcessorDeleteGatewayStoragePreference{handler:handler}
  self338.processorMap["registerUserResourceProfile"] = &airavataProcessorRegisterUserResourceProfile{handler:handler}
  self338.processorMap["getUserResourceProfile"] = &airavataProcessorGetUserResourceProfile{handler:handler}
  self338.processorMap["updateUserResourceProfile"] = &airavataProcessorUpdateUserResourceProfile{handler:handler}
  self338.processorMap["deleteUserResourceProfile"] = &airavataProcessorDeleteUserResourceProfile{handler:handler}
  self338.processorMap["addUserComputeResourcePreference"] = &airavataProcessorAddUserComputeResourcePreference{handler:handler}
  self338.processorMap["addUserStoragePreference"] = &airavataProcessorAddUserStoragePreference{handler:handler}
  self338.processorMap["getUserComputeResourcePreference"] = &airavataProcessorGetUserComputeResourcePreference{handler:handler}
  self338.processorMap["getUserStoragePreference"] = &airavataProcessorGetUserStoragePreference{handler:handler}
  self338.processorMap["getAllUserComputeResourcePreferences"] = &airavataProcessorGetAllUserComputeResourcePreferences{handler:handler}
  self338.processorMap["getAllUserStoragePreferences"] = &airavataProcessorGetAllUserStoragePreferences{handler:handler}
  self338.processorMap["getAllUserResourceProfiles"] = &airavataProcessorGetAllUserResourceProfiles{handler:handler}
  self338.processorMap["updateUserComputeResourcePreference"] = &airavataProcessorUpdateUserComputeResourcePreference{handler:handler}
  self338.processorMap["updateUserStoragePreference"] = &airavataProcessorUpdateUserStoragePreference{handler:handler}
  self338.processorMap["deleteUserComputeResourcePreference"] = &airavataProcessorDeleteUserComputeResourcePreference{handler:handler}
  self338.processorMap["deleteUserStoragePreference"] = &airavataProcessorDeleteUserStoragePreference{handler:handler}
  self338.processorMap["getAllWorkflows"] = &airavataProcessorGetAllWorkflows{handler:handler}
  self338.processorMap["getLatestQueueStatuses"] = &airavataProcessorGetLatestQueueStatuses{handler:handler}
  self338.processorMap["getWorkflow"] = &airavataProcessorGetWorkflow{handler:handler}
  self338.processorMap["deleteWorkflow"] = &airavataProcessorDeleteWorkflow{handler:handler}
  self338.processorMap["registerWorkflow"] = &airavataProcessorRegisterWorkflow{handler:handler}
  self338.processorMap["updateWorkflow"] = &airavataProcessorUpdateWorkflow{handler:handler}
  self338.processorMap["getWorkflowTemplateId"] = &airavataProcessorGetWorkflowTemplateId{handler:handler}
  self338.processorMap["isWorkflowExistWithName"] = &airavataProcessorIsWorkflowExistWithName{handler:handler}
  self338.processorMap["registerDataProduct"] = &airavataProcessorRegisterDataProduct{handler:handler}
  self338.processorMap["getDataProduct"] = &airavataProcessorGetDataProduct{handler:handler}
  self338.processorMap["registerReplicaLocation"] = &airavataProcessorRegisterReplicaLocation{handler:handler}
  self338.processorMap["getParentDataProduct"] = &airavataProcessorGetParentDataProduct{handler:handler}
  self338.processorMap["getChildDataProducts"] = &airavataProcessorGetChildDataProducts{handler:handler}
  self338.processorMap["shareResourceWithUsers"] = &airavataProcessorShareResourceWithUsers{handler:handler}
  self338.processorMap["revokeSharingOfResourceFromUsers"] = &airavataProcessorRevokeSharingOfResourceFromUsers{handler:handler}
  self338.processorMap["getAllAccessibleUsers"] = &airavataProcessorGetAllAccessibleUsers{handler:handler}
  self338.processorMap["createGroup"] = &airavataProcessorCreateGroup{handler:handler}
  self338.processorMap["updateGroup"] = &airavataProcessorUpdateGroup{handler:handler}
  self338.processorMap["deleteGroup"] = &airavataProcessorDeleteGroup{handler:handler}
  self338.processorMap["getGroup"] = &airavataProcessorGetGroup{handler:handler}
  self338.processorMap["getAllGroupsUserBelongs"] = &airavataProcessorGetAllGroupsUserBelongs{handler:handler}
return self338
}

func (p *AiravataProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x339 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x339.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x339

}

type airavataProcessorGetAPIVersion struct {
  handler Airavata
}

func (p *airavataProcessorGetAPIVersion) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetAPIVersionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getAPIVersion", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetAPIVersionResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetAPIVersion(ctx, args.AuthzToken); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAPIVersion: " + err2.Error())
    oprot.WriteMessageBegin("getAPIVersion", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("getAPIVersion", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorIsUserExists struct {
  handler Airavata
}

func (p *airavataProcessorIsUserExists) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataIsUserExistsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("isUserExists", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataIsUserExistsResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.IsUserExists(ctx, args.AuthzToken, args.GatewayId, args.UserName); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing isUserExists: " + err2.Error())
    oprot.WriteMessageBegin("isUserExists", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("isUserExists", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorAddGateway struct {
  handler Airavata
}

func (p *airavataProcessorAddGateway) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataAddGatewayArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("addGateway", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataAddGatewayResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.AddGateway(ctx, args.AuthzToken, args.Gateway); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addGateway: " + err2.Error())
    oprot.WriteMessageBegin("addGateway", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("addGateway", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetAllUsersInGateway struct {
  handler Airavata
}

func (p *airavataProcessorGetAllUsersInGateway) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetAllUsersInGatewayArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getAllUsersInGateway", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetAllUsersInGatewayResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetAllUsersInGateway(ctx, args.AuthzToken, args.GatewayId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllUsersInGateway: " + err2.Error())
    oprot.WriteMessageBegin("getAllUsersInGateway", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getAllUsersInGateway", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorUpdateGateway struct {
  handler Airavata
}

func (p *airavataProcessorUpdateGateway) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataUpdateGatewayArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateGateway", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataUpdateGatewayResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UpdateGateway(ctx, args.AuthzToken, args.GatewayId, args.UpdatedGateway); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateGateway: " + err2.Error())
    oprot.WriteMessageBegin("updateGateway", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("updateGateway", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetGateway struct {
  handler Airavata
}

func (p *airavataProcessorGetGateway) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetGatewayArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getGateway", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetGatewayResult{}
var retval *workspace_model.Gateway
  var err2 error
  if retval, err2 = p.handler.GetGateway(ctx, args.AuthzToken, args.GatewayId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGateway: " + err2.Error())
    oprot.WriteMessageBegin("getGateway", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getGateway", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorDeleteGateway struct {
  handler Airavata
}

func (p *airavataProcessorDeleteGateway) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataDeleteGatewayArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteGateway", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataDeleteGatewayResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.DeleteGateway(ctx, args.AuthzToken, args.GatewayId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteGateway: " + err2.Error())
    oprot.WriteMessageBegin("deleteGateway", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("deleteGateway", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetAllGateways struct {
  handler Airavata
}

func (p *airavataProcessorGetAllGateways) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetAllGatewaysArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getAllGateways", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetAllGatewaysResult{}
var retval []*workspace_model.Gateway
  var err2 error
  if retval, err2 = p.handler.GetAllGateways(ctx, args.AuthzToken); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllGateways: " + err2.Error())
    oprot.WriteMessageBegin("getAllGateways", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getAllGateways", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorIsGatewayExist struct {
  handler Airavata
}

func (p *airavataProcessorIsGatewayExist) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataIsGatewayExistArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("isGatewayExist", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataIsGatewayExistResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.IsGatewayExist(ctx, args.AuthzToken, args.GatewayId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing isGatewayExist: " + err2.Error())
    oprot.WriteMessageBegin("isGatewayExist", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("isGatewayExist", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorCreateNotification struct {
  handler Airavata
}

func (p *airavataProcessorCreateNotification) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataCreateNotificationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createNotification", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataCreateNotificationResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.CreateNotification(ctx, args.AuthzToken, args.Notification); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createNotification: " + err2.Error())
    oprot.WriteMessageBegin("createNotification", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("createNotification", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorUpdateNotification struct {
  handler Airavata
}

func (p *airavataProcessorUpdateNotification) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataUpdateNotificationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateNotification", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataUpdateNotificationResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UpdateNotification(ctx, args.AuthzToken, args.Notification); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateNotification: " + err2.Error())
    oprot.WriteMessageBegin("updateNotification", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("updateNotification", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorDeleteNotification struct {
  handler Airavata
}

func (p *airavataProcessorDeleteNotification) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataDeleteNotificationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteNotification", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataDeleteNotificationResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.DeleteNotification(ctx, args.AuthzToken, args.GatewayId, args.NotificationId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteNotification: " + err2.Error())
    oprot.WriteMessageBegin("deleteNotification", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("deleteNotification", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetNotification struct {
  handler Airavata
}

func (p *airavataProcessorGetNotification) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetNotificationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getNotification", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetNotificationResult{}
var retval *workspace_model.Notification
  var err2 error
  if retval, err2 = p.handler.GetNotification(ctx, args.AuthzToken, args.GatewayId, args.NotificationId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getNotification: " + err2.Error())
    oprot.WriteMessageBegin("getNotification", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getNotification", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetAllNotifications struct {
  handler Airavata
}

func (p *airavataProcessorGetAllNotifications) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetAllNotificationsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getAllNotifications", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetAllNotificationsResult{}
var retval []*workspace_model.Notification
  var err2 error
  if retval, err2 = p.handler.GetAllNotifications(ctx, args.AuthzToken, args.GatewayId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllNotifications: " + err2.Error())
    oprot.WriteMessageBegin("getAllNotifications", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getAllNotifications", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGenerateAndRegisterSSHKeys struct {
  handler Airavata
}

func (p *airavataProcessorGenerateAndRegisterSSHKeys) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGenerateAndRegisterSSHKeysArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("generateAndRegisterSSHKeys", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGenerateAndRegisterSSHKeysResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GenerateAndRegisterSSHKeys(ctx, args.AuthzToken, args.GatewayId, args.UserName, args.Description, args.CredentialOwnerType); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing generateAndRegisterSSHKeys: " + err2.Error())
    oprot.WriteMessageBegin("generateAndRegisterSSHKeys", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("generateAndRegisterSSHKeys", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorRegisterPwdCredential struct {
  handler Airavata
}

func (p *airavataProcessorRegisterPwdCredential) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataRegisterPwdCredentialArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("registerPwdCredential", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataRegisterPwdCredentialResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.RegisterPwdCredential(ctx, args.AuthzToken, args.GatewayId, args.PortalUserName, args.LoginUserName, args.Password, args.Description); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerPwdCredential: " + err2.Error())
    oprot.WriteMessageBegin("registerPwdCredential", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("registerPwdCredential", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetSSHPubKey struct {
  handler Airavata
}

func (p *airavataProcessorGetSSHPubKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetSSHPubKeyArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getSSHPubKey", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetSSHPubKeyResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetSSHPubKey(ctx, args.AuthzToken, args.AiravataCredStoreToken, args.GatewayId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSSHPubKey: " + err2.Error())
    oprot.WriteMessageBegin("getSSHPubKey", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("getSSHPubKey", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetAllGatewaySSHPubKeys struct {
  handler Airavata
}

func (p *airavataProcessorGetAllGatewaySSHPubKeys) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetAllGatewaySSHPubKeysArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getAllGatewaySSHPubKeys", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetAllGatewaySSHPubKeysResult{}
var retval map[string]string
  var err2 error
  if retval, err2 = p.handler.GetAllGatewaySSHPubKeys(ctx, args.AuthzToken, args.GatewayId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllGatewaySSHPubKeys: " + err2.Error())
    oprot.WriteMessageBegin("getAllGatewaySSHPubKeys", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getAllGatewaySSHPubKeys", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetAllCredentialSummaryForGateway struct {
  handler Airavata
}

func (p *airavataProcessorGetAllCredentialSummaryForGateway) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetAllCredentialSummaryForGatewayArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getAllCredentialSummaryForGateway", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetAllCredentialSummaryForGatewayResult{}
var retval []*credential_store_data_models.CredentialSummary
  var err2 error
  if retval, err2 = p.handler.GetAllCredentialSummaryForGateway(ctx, args.AuthzToken, args.Type, args.GatewayId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllCredentialSummaryForGateway: " + err2.Error())
    oprot.WriteMessageBegin("getAllCredentialSummaryForGateway", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getAllCredentialSummaryForGateway", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetAllCredentialSummaryForUsersInGateway struct {
  handler Airavata
}

func (p *airavataProcessorGetAllCredentialSummaryForUsersInGateway) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetAllCredentialSummaryForUsersInGatewayArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getAllCredentialSummaryForUsersInGateway", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetAllCredentialSummaryForUsersInGatewayResult{}
var retval []*credential_store_data_models.CredentialSummary
  var err2 error
  if retval, err2 = p.handler.GetAllCredentialSummaryForUsersInGateway(ctx, args.AuthzToken, args.Type, args.GatewayId, args.UserId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllCredentialSummaryForUsersInGateway: " + err2.Error())
    oprot.WriteMessageBegin("getAllCredentialSummaryForUsersInGateway", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getAllCredentialSummaryForUsersInGateway", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetAllGatewayPWDCredentials struct {
  handler Airavata
}

func (p *airavataProcessorGetAllGatewayPWDCredentials) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetAllGatewayPWDCredentialsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getAllGatewayPWDCredentials", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetAllGatewayPWDCredentialsResult{}
var retval map[string]string
  var err2 error
  if retval, err2 = p.handler.GetAllGatewayPWDCredentials(ctx, args.AuthzToken, args.GatewayId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllGatewayPWDCredentials: " + err2.Error())
    oprot.WriteMessageBegin("getAllGatewayPWDCredentials", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getAllGatewayPWDCredentials", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorDeleteSSHPubKey struct {
  handler Airavata
}

func (p *airavataProcessorDeleteSSHPubKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataDeleteSSHPubKeyArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteSSHPubKey", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataDeleteSSHPubKeyResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.DeleteSSHPubKey(ctx, args.AuthzToken, args.AiravataCredStoreToken, args.GatewayId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteSSHPubKey: " + err2.Error())
    oprot.WriteMessageBegin("deleteSSHPubKey", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("deleteSSHPubKey", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorDeletePWDCredential struct {
  handler Airavata
}

func (p *airavataProcessorDeletePWDCredential) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataDeletePWDCredentialArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deletePWDCredential", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataDeletePWDCredentialResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.DeletePWDCredential(ctx, args.AuthzToken, args.AiravataCredStoreToken, args.GatewayId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deletePWDCredential: " + err2.Error())
    oprot.WriteMessageBegin("deletePWDCredential", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("deletePWDCredential", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorCreateProject struct {
  handler Airavata
}

func (p *airavataProcessorCreateProject) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataCreateProjectArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createProject", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataCreateProjectResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.CreateProject(ctx, args.AuthzToken, args.GatewayId, args.Project); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createProject: " + err2.Error())
    oprot.WriteMessageBegin("createProject", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("createProject", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorUpdateProject struct {
  handler Airavata
}

func (p *airavataProcessorUpdateProject) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataUpdateProjectArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateProject", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataUpdateProjectResult{}
  var err2 error
  if err2 = p.handler.UpdateProject(ctx, args.AuthzToken, args.ProjectId, args.UpdatedProject); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.ProjectNotFoundException:
  result.Pnfe = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateProject: " + err2.Error())
    oprot.WriteMessageBegin("updateProject", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("updateProject", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetProject struct {
  handler Airavata
}

func (p *airavataProcessorGetProject) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetProjectArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getProject", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetProjectResult{}
var retval *workspace_model.Project
  var err2 error
  if retval, err2 = p.handler.GetProject(ctx, args.AuthzToken, args.ProjectId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.ProjectNotFoundException:
  result.Pnfe = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getProject: " + err2.Error())
    oprot.WriteMessageBegin("getProject", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getProject", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorDeleteProject struct {
  handler Airavata
}

func (p *airavataProcessorDeleteProject) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataDeleteProjectArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteProject", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataDeleteProjectResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.DeleteProject(ctx, args.AuthzToken, args.ProjectId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.ProjectNotFoundException:
  result.Pnfe = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteProject: " + err2.Error())
    oprot.WriteMessageBegin("deleteProject", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("deleteProject", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetUserProjects struct {
  handler Airavata
}

func (p *airavataProcessorGetUserProjects) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetUserProjectsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getUserProjects", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetUserProjectsResult{}
var retval []*workspace_model.Project
  var err2 error
  if retval, err2 = p.handler.GetUserProjects(ctx, args.AuthzToken, args.GatewayId, args.UserName, args.Limit, args.Offset); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserProjects: " + err2.Error())
    oprot.WriteMessageBegin("getUserProjects", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getUserProjects", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorSearchProjects struct {
  handler Airavata
}

func (p *airavataProcessorSearchProjects) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataSearchProjectsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("searchProjects", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataSearchProjectsResult{}
var retval []*workspace_model.Project
  var err2 error
  if retval, err2 = p.handler.SearchProjects(ctx, args.AuthzToken, args.GatewayId, args.UserName, args.Filters, args.Limit, args.Offset); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing searchProjects: " + err2.Error())
    oprot.WriteMessageBegin("searchProjects", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("searchProjects", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorSearchExperiments struct {
  handler Airavata
}

func (p *airavataProcessorSearchExperiments) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataSearchExperimentsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("searchExperiments", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataSearchExperimentsResult{}
var retval []*experiment_model.ExperimentSummaryModel
  var err2 error
  if retval, err2 = p.handler.SearchExperiments(ctx, args.AuthzToken, args.GatewayId, args.UserName, args.Filters, args.Limit, args.Offset); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing searchExperiments: " + err2.Error())
    oprot.WriteMessageBegin("searchExperiments", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("searchExperiments", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetExperimentStatistics struct {
  handler Airavata
}

func (p *airavataProcessorGetExperimentStatistics) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetExperimentStatisticsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getExperimentStatistics", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetExperimentStatisticsResult{}
var retval *experiment_model.ExperimentStatistics
  var err2 error
  if retval, err2 = p.handler.GetExperimentStatistics(ctx, args.AuthzToken, args.GatewayId, args.FromTime, args.ToTime, args.UserName, args.ApplicationName, args.ResourceHostName); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getExperimentStatistics: " + err2.Error())
    oprot.WriteMessageBegin("getExperimentStatistics", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getExperimentStatistics", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetExperimentsInProject struct {
  handler Airavata
}

func (p *airavataProcessorGetExperimentsInProject) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetExperimentsInProjectArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getExperimentsInProject", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetExperimentsInProjectResult{}
var retval []*experiment_model.ExperimentModel
  var err2 error
  if retval, err2 = p.handler.GetExperimentsInProject(ctx, args.AuthzToken, args.ProjectId, args.Limit, args.Offset); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.ProjectNotFoundException:
  result.Pnfe = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getExperimentsInProject: " + err2.Error())
    oprot.WriteMessageBegin("getExperimentsInProject", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getExperimentsInProject", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetUserExperiments struct {
  handler Airavata
}

func (p *airavataProcessorGetUserExperiments) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetUserExperimentsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getUserExperiments", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetUserExperimentsResult{}
var retval []*experiment_model.ExperimentModel
  var err2 error
  if retval, err2 = p.handler.GetUserExperiments(ctx, args.AuthzToken, args.GatewayId, args.UserName, args.Limit, args.Offset); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserExperiments: " + err2.Error())
    oprot.WriteMessageBegin("getUserExperiments", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getUserExperiments", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorCreateExperiment struct {
  handler Airavata
}

func (p *airavataProcessorCreateExperiment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataCreateExperimentArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createExperiment", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataCreateExperimentResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.CreateExperiment(ctx, args.AuthzToken, args.GatewayId, args.Experiment); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createExperiment: " + err2.Error())
    oprot.WriteMessageBegin("createExperiment", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("createExperiment", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorDeleteExperiment struct {
  handler Airavata
}

func (p *airavataProcessorDeleteExperiment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataDeleteExperimentArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteExperiment", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataDeleteExperimentResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.DeleteExperiment(ctx, args.AuthzToken, args.ExperimentId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteExperiment: " + err2.Error())
    oprot.WriteMessageBegin("deleteExperiment", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("deleteExperiment", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetExperiment struct {
  handler Airavata
}

func (p *airavataProcessorGetExperiment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetExperimentArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getExperiment", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetExperimentResult{}
var retval *experiment_model.ExperimentModel
  var err2 error
  if retval, err2 = p.handler.GetExperiment(ctx, args.AuthzToken, args.AiravataExperimentId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.ExperimentNotFoundException:
  result.Enf = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getExperiment: " + err2.Error())
    oprot.WriteMessageBegin("getExperiment", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getExperiment", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetExperimentByAdmin struct {
  handler Airavata
}

func (p *airavataProcessorGetExperimentByAdmin) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetExperimentByAdminArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getExperimentByAdmin", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetExperimentByAdminResult{}
var retval *experiment_model.ExperimentModel
  var err2 error
  if retval, err2 = p.handler.GetExperimentByAdmin(ctx, args.AuthzToken, args.AiravataExperimentId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.ExperimentNotFoundException:
  result.Enf = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getExperimentByAdmin: " + err2.Error())
    oprot.WriteMessageBegin("getExperimentByAdmin", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getExperimentByAdmin", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetDetailedExperimentTree struct {
  handler Airavata
}

func (p *airavataProcessorGetDetailedExperimentTree) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetDetailedExperimentTreeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getDetailedExperimentTree", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetDetailedExperimentTreeResult{}
var retval *experiment_model.ExperimentModel
  var err2 error
  if retval, err2 = p.handler.GetDetailedExperimentTree(ctx, args.AuthzToken, args.AiravataExperimentId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.ExperimentNotFoundException:
  result.Enf = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getDetailedExperimentTree: " + err2.Error())
    oprot.WriteMessageBegin("getDetailedExperimentTree", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getDetailedExperimentTree", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorUpdateExperiment struct {
  handler Airavata
}

func (p *airavataProcessorUpdateExperiment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataUpdateExperimentArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateExperiment", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataUpdateExperimentResult{}
  var err2 error
  if err2 = p.handler.UpdateExperiment(ctx, args.AuthzToken, args.AiravataExperimentId, args.Experiment); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.ExperimentNotFoundException:
  result.Enf = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateExperiment: " + err2.Error())
    oprot.WriteMessageBegin("updateExperiment", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("updateExperiment", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorUpdateExperimentConfiguration struct {
  handler Airavata
}

func (p *airavataProcessorUpdateExperimentConfiguration) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataUpdateExperimentConfigurationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateExperimentConfiguration", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataUpdateExperimentConfigurationResult{}
  var err2 error
  if err2 = p.handler.UpdateExperimentConfiguration(ctx, args.AuthzToken, args.AiravataExperimentId, args.UserConfiguration); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateExperimentConfiguration: " + err2.Error())
    oprot.WriteMessageBegin("updateExperimentConfiguration", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("updateExperimentConfiguration", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorUpdateResourceScheduleing struct {
  handler Airavata
}

func (p *airavataProcessorUpdateResourceScheduleing) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataUpdateResourceScheduleingArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateResourceScheduleing", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataUpdateResourceScheduleingResult{}
  var err2 error
  if err2 = p.handler.UpdateResourceScheduleing(ctx, args.AuthzToken, args.AiravataExperimentId, args.ResourceScheduling); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateResourceScheduleing: " + err2.Error())
    oprot.WriteMessageBegin("updateResourceScheduleing", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("updateResourceScheduleing", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorValidateExperiment struct {
  handler Airavata
}

func (p *airavataProcessorValidateExperiment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataValidateExperimentArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("validateExperiment", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataValidateExperimentResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.ValidateExperiment(ctx, args.AuthzToken, args.AiravataExperimentId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.ExperimentNotFoundException:
  result.Enf = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing validateExperiment: " + err2.Error())
    oprot.WriteMessageBegin("validateExperiment", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("validateExperiment", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorLaunchExperiment struct {
  handler Airavata
}

func (p *airavataProcessorLaunchExperiment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataLaunchExperimentArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("launchExperiment", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataLaunchExperimentResult{}
  var err2 error
  if err2 = p.handler.LaunchExperiment(ctx, args.AuthzToken, args.AiravataExperimentId, args.GatewayId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.ExperimentNotFoundException:
  result.Enf = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing launchExperiment: " + err2.Error())
    oprot.WriteMessageBegin("launchExperiment", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("launchExperiment", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetExperimentStatus struct {
  handler Airavata
}

func (p *airavataProcessorGetExperimentStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetExperimentStatusArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getExperimentStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetExperimentStatusResult{}
var retval *status_models.ExperimentStatus
  var err2 error
  if retval, err2 = p.handler.GetExperimentStatus(ctx, args.AuthzToken, args.AiravataExperimentId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.ExperimentNotFoundException:
  result.Enf = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getExperimentStatus: " + err2.Error())
    oprot.WriteMessageBegin("getExperimentStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getExperimentStatus", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetExperimentOutputs struct {
  handler Airavata
}

func (p *airavataProcessorGetExperimentOutputs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetExperimentOutputsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getExperimentOutputs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetExperimentOutputsResult{}
var retval []*application_io_models.OutputDataObjectType
  var err2 error
  if retval, err2 = p.handler.GetExperimentOutputs(ctx, args.AuthzToken, args.AiravataExperimentId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.ExperimentNotFoundException:
  result.Enf = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getExperimentOutputs: " + err2.Error())
    oprot.WriteMessageBegin("getExperimentOutputs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getExperimentOutputs", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetIntermediateOutputs struct {
  handler Airavata
}

func (p *airavataProcessorGetIntermediateOutputs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetIntermediateOutputsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getIntermediateOutputs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetIntermediateOutputsResult{}
var retval []*application_io_models.OutputDataObjectType
  var err2 error
  if retval, err2 = p.handler.GetIntermediateOutputs(ctx, args.AuthzToken, args.AiravataExperimentId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.ExperimentNotFoundException:
  result.Enf = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getIntermediateOutputs: " + err2.Error())
    oprot.WriteMessageBegin("getIntermediateOutputs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getIntermediateOutputs", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetJobStatuses struct {
  handler Airavata
}

func (p *airavataProcessorGetJobStatuses) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetJobStatusesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getJobStatuses", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetJobStatusesResult{}
var retval map[string]*status_models.JobStatus
  var err2 error
  if retval, err2 = p.handler.GetJobStatuses(ctx, args.AuthzToken, args.AiravataExperimentId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.ExperimentNotFoundException:
  result.Enf = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getJobStatuses: " + err2.Error())
    oprot.WriteMessageBegin("getJobStatuses", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getJobStatuses", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetJobDetails struct {
  handler Airavata
}

func (p *airavataProcessorGetJobDetails) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetJobDetailsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getJobDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetJobDetailsResult{}
var retval []*job_model.JobModel
  var err2 error
  if retval, err2 = p.handler.GetJobDetails(ctx, args.AuthzToken, args.AiravataExperimentId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.ExperimentNotFoundException:
  result.Enf = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getJobDetails: " + err2.Error())
    oprot.WriteMessageBegin("getJobDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getJobDetails", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorCloneExperiment struct {
  handler Airavata
}

func (p *airavataProcessorCloneExperiment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataCloneExperimentArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("cloneExperiment", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataCloneExperimentResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.CloneExperiment(ctx, args.AuthzToken, args.ExistingExperimentID, args.NewExperimentName_, args.NewExperimentProjectId_); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.ExperimentNotFoundException:
  result.Enf = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    case *airavata_errors.ProjectNotFoundException:
  result.Pnfe = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing cloneExperiment: " + err2.Error())
    oprot.WriteMessageBegin("cloneExperiment", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("cloneExperiment", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorCloneExperimentByAdmin struct {
  handler Airavata
}

func (p *airavataProcessorCloneExperimentByAdmin) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataCloneExperimentByAdminArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("cloneExperimentByAdmin", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataCloneExperimentByAdminResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.CloneExperimentByAdmin(ctx, args.AuthzToken, args.ExistingExperimentID, args.NewExperimentName_, args.NewExperimentProjectId_); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.ExperimentNotFoundException:
  result.Enf = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    case *airavata_errors.ProjectNotFoundException:
  result.Pnfe = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing cloneExperimentByAdmin: " + err2.Error())
    oprot.WriteMessageBegin("cloneExperimentByAdmin", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("cloneExperimentByAdmin", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorTerminateExperiment struct {
  handler Airavata
}

func (p *airavataProcessorTerminateExperiment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataTerminateExperimentArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("terminateExperiment", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataTerminateExperimentResult{}
  var err2 error
  if err2 = p.handler.TerminateExperiment(ctx, args.AuthzToken, args.AiravataExperimentId, args.GatewayId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.ExperimentNotFoundException:
  result.Enf = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing terminateExperiment: " + err2.Error())
    oprot.WriteMessageBegin("terminateExperiment", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("terminateExperiment", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorRegisterApplicationModule struct {
  handler Airavata
}

func (p *airavataProcessorRegisterApplicationModule) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataRegisterApplicationModuleArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("registerApplicationModule", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataRegisterApplicationModuleResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.RegisterApplicationModule(ctx, args.AuthzToken, args.GatewayId, args.ApplicationModule); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerApplicationModule: " + err2.Error())
    oprot.WriteMessageBegin("registerApplicationModule", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("registerApplicationModule", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetApplicationModule struct {
  handler Airavata
}

func (p *airavataProcessorGetApplicationModule) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetApplicationModuleArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getApplicationModule", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetApplicationModuleResult{}
var retval *application_deployment_model.ApplicationModule
  var err2 error
  if retval, err2 = p.handler.GetApplicationModule(ctx, args.AuthzToken, args.AppModuleId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getApplicationModule: " + err2.Error())
    oprot.WriteMessageBegin("getApplicationModule", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getApplicationModule", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorUpdateApplicationModule struct {
  handler Airavata
}

func (p *airavataProcessorUpdateApplicationModule) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataUpdateApplicationModuleArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateApplicationModule", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataUpdateApplicationModuleResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UpdateApplicationModule(ctx, args.AuthzToken, args.AppModuleId, args.ApplicationModule); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateApplicationModule: " + err2.Error())
    oprot.WriteMessageBegin("updateApplicationModule", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("updateApplicationModule", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetAllAppModules struct {
  handler Airavata
}

func (p *airavataProcessorGetAllAppModules) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetAllAppModulesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getAllAppModules", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetAllAppModulesResult{}
var retval []*application_deployment_model.ApplicationModule
  var err2 error
  if retval, err2 = p.handler.GetAllAppModules(ctx, args.AuthzToken, args.GatewayId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllAppModules: " + err2.Error())
    oprot.WriteMessageBegin("getAllAppModules", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getAllAppModules", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorDeleteApplicationModule struct {
  handler Airavata
}

func (p *airavataProcessorDeleteApplicationModule) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataDeleteApplicationModuleArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteApplicationModule", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataDeleteApplicationModuleResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.DeleteApplicationModule(ctx, args.AuthzToken, args.AppModuleId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteApplicationModule: " + err2.Error())
    oprot.WriteMessageBegin("deleteApplicationModule", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("deleteApplicationModule", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorRegisterApplicationDeployment struct {
  handler Airavata
}

func (p *airavataProcessorRegisterApplicationDeployment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataRegisterApplicationDeploymentArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("registerApplicationDeployment", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataRegisterApplicationDeploymentResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.RegisterApplicationDeployment(ctx, args.AuthzToken, args.GatewayId, args.ApplicationDeployment); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerApplicationDeployment: " + err2.Error())
    oprot.WriteMessageBegin("registerApplicationDeployment", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("registerApplicationDeployment", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetApplicationDeployment struct {
  handler Airavata
}

func (p *airavataProcessorGetApplicationDeployment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetApplicationDeploymentArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getApplicationDeployment", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetApplicationDeploymentResult{}
var retval *application_deployment_model.ApplicationDeploymentDescription
  var err2 error
  if retval, err2 = p.handler.GetApplicationDeployment(ctx, args.AuthzToken, args.AppDeploymentId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getApplicationDeployment: " + err2.Error())
    oprot.WriteMessageBegin("getApplicationDeployment", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getApplicationDeployment", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorUpdateApplicationDeployment struct {
  handler Airavata
}

func (p *airavataProcessorUpdateApplicationDeployment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataUpdateApplicationDeploymentArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateApplicationDeployment", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataUpdateApplicationDeploymentResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UpdateApplicationDeployment(ctx, args.AuthzToken, args.AppDeploymentId, args.ApplicationDeployment); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateApplicationDeployment: " + err2.Error())
    oprot.WriteMessageBegin("updateApplicationDeployment", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("updateApplicationDeployment", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorDeleteApplicationDeployment struct {
  handler Airavata
}

func (p *airavataProcessorDeleteApplicationDeployment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataDeleteApplicationDeploymentArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteApplicationDeployment", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataDeleteApplicationDeploymentResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.DeleteApplicationDeployment(ctx, args.AuthzToken, args.AppDeploymentId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteApplicationDeployment: " + err2.Error())
    oprot.WriteMessageBegin("deleteApplicationDeployment", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("deleteApplicationDeployment", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetAllApplicationDeployments struct {
  handler Airavata
}

func (p *airavataProcessorGetAllApplicationDeployments) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetAllApplicationDeploymentsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getAllApplicationDeployments", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetAllApplicationDeploymentsResult{}
var retval []*application_deployment_model.ApplicationDeploymentDescription
  var err2 error
  if retval, err2 = p.handler.GetAllApplicationDeployments(ctx, args.AuthzToken, args.GatewayId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllApplicationDeployments: " + err2.Error())
    oprot.WriteMessageBegin("getAllApplicationDeployments", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getAllApplicationDeployments", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetAppModuleDeployedResources struct {
  handler Airavata
}

func (p *airavataProcessorGetAppModuleDeployedResources) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetAppModuleDeployedResourcesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getAppModuleDeployedResources", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetAppModuleDeployedResourcesResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetAppModuleDeployedResources(ctx, args.AuthzToken, args.AppModuleId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAppModuleDeployedResources: " + err2.Error())
    oprot.WriteMessageBegin("getAppModuleDeployedResources", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getAppModuleDeployedResources", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorRegisterApplicationInterface struct {
  handler Airavata
}

func (p *airavataProcessorRegisterApplicationInterface) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataRegisterApplicationInterfaceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("registerApplicationInterface", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataRegisterApplicationInterfaceResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.RegisterApplicationInterface(ctx, args.AuthzToken, args.GatewayId, args.ApplicationInterface); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerApplicationInterface: " + err2.Error())
    oprot.WriteMessageBegin("registerApplicationInterface", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("registerApplicationInterface", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorCloneApplicationInterface struct {
  handler Airavata
}

func (p *airavataProcessorCloneApplicationInterface) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataCloneApplicationInterfaceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("cloneApplicationInterface", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataCloneApplicationInterfaceResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.CloneApplicationInterface(ctx, args.AuthzToken, args.ExistingAppInterfaceID, args.NewApplicationName_, args.GatewayId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing cloneApplicationInterface: " + err2.Error())
    oprot.WriteMessageBegin("cloneApplicationInterface", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("cloneApplicationInterface", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetApplicationInterface struct {
  handler Airavata
}

func (p *airavataProcessorGetApplicationInterface) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetApplicationInterfaceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getApplicationInterface", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetApplicationInterfaceResult{}
var retval *application_interface_model.ApplicationInterfaceDescription
  var err2 error
  if retval, err2 = p.handler.GetApplicationInterface(ctx, args.AuthzToken, args.AppInterfaceId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getApplicationInterface: " + err2.Error())
    oprot.WriteMessageBegin("getApplicationInterface", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getApplicationInterface", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorUpdateApplicationInterface struct {
  handler Airavata
}

func (p *airavataProcessorUpdateApplicationInterface) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataUpdateApplicationInterfaceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateApplicationInterface", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataUpdateApplicationInterfaceResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UpdateApplicationInterface(ctx, args.AuthzToken, args.AppInterfaceId, args.ApplicationInterface); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateApplicationInterface: " + err2.Error())
    oprot.WriteMessageBegin("updateApplicationInterface", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("updateApplicationInterface", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorDeleteApplicationInterface struct {
  handler Airavata
}

func (p *airavataProcessorDeleteApplicationInterface) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataDeleteApplicationInterfaceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteApplicationInterface", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataDeleteApplicationInterfaceResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.DeleteApplicationInterface(ctx, args.AuthzToken, args.AppInterfaceId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteApplicationInterface: " + err2.Error())
    oprot.WriteMessageBegin("deleteApplicationInterface", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("deleteApplicationInterface", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetAllApplicationInterfaceNames struct {
  handler Airavata
}

func (p *airavataProcessorGetAllApplicationInterfaceNames) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetAllApplicationInterfaceNamesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getAllApplicationInterfaceNames", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetAllApplicationInterfaceNamesResult{}
var retval map[string]string
  var err2 error
  if retval, err2 = p.handler.GetAllApplicationInterfaceNames(ctx, args.AuthzToken, args.GatewayId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllApplicationInterfaceNames: " + err2.Error())
    oprot.WriteMessageBegin("getAllApplicationInterfaceNames", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getAllApplicationInterfaceNames", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetAllApplicationInterfaces struct {
  handler Airavata
}

func (p *airavataProcessorGetAllApplicationInterfaces) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetAllApplicationInterfacesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getAllApplicationInterfaces", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetAllApplicationInterfacesResult{}
var retval []*application_interface_model.ApplicationInterfaceDescription
  var err2 error
  if retval, err2 = p.handler.GetAllApplicationInterfaces(ctx, args.AuthzToken, args.GatewayId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllApplicationInterfaces: " + err2.Error())
    oprot.WriteMessageBegin("getAllApplicationInterfaces", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getAllApplicationInterfaces", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetApplicationInputs struct {
  handler Airavata
}

func (p *airavataProcessorGetApplicationInputs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetApplicationInputsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getApplicationInputs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetApplicationInputsResult{}
var retval []*application_io_models.InputDataObjectType
  var err2 error
  if retval, err2 = p.handler.GetApplicationInputs(ctx, args.AuthzToken, args.AppInterfaceId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getApplicationInputs: " + err2.Error())
    oprot.WriteMessageBegin("getApplicationInputs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getApplicationInputs", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetApplicationOutputs struct {
  handler Airavata
}

func (p *airavataProcessorGetApplicationOutputs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetApplicationOutputsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getApplicationOutputs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetApplicationOutputsResult{}
var retval []*application_io_models.OutputDataObjectType
  var err2 error
  if retval, err2 = p.handler.GetApplicationOutputs(ctx, args.AuthzToken, args.AppInterfaceId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getApplicationOutputs: " + err2.Error())
    oprot.WriteMessageBegin("getApplicationOutputs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getApplicationOutputs", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetAvailableAppInterfaceComputeResources struct {
  handler Airavata
}

func (p *airavataProcessorGetAvailableAppInterfaceComputeResources) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetAvailableAppInterfaceComputeResourcesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getAvailableAppInterfaceComputeResources", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetAvailableAppInterfaceComputeResourcesResult{}
var retval map[string]string
  var err2 error
  if retval, err2 = p.handler.GetAvailableAppInterfaceComputeResources(ctx, args.AuthzToken, args.AppInterfaceId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAvailableAppInterfaceComputeResources: " + err2.Error())
    oprot.WriteMessageBegin("getAvailableAppInterfaceComputeResources", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getAvailableAppInterfaceComputeResources", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorRegisterComputeResource struct {
  handler Airavata
}

func (p *airavataProcessorRegisterComputeResource) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataRegisterComputeResourceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("registerComputeResource", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataRegisterComputeResourceResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.RegisterComputeResource(ctx, args.AuthzToken, args.ComputeResourceDescription); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerComputeResource: " + err2.Error())
    oprot.WriteMessageBegin("registerComputeResource", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("registerComputeResource", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetComputeResource struct {
  handler Airavata
}

func (p *airavataProcessorGetComputeResource) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetComputeResourceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getComputeResource", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetComputeResourceResult{}
var retval *compute_resource_model.ComputeResourceDescription
  var err2 error
  if retval, err2 = p.handler.GetComputeResource(ctx, args.AuthzToken, args.ComputeResourceId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getComputeResource: " + err2.Error())
    oprot.WriteMessageBegin("getComputeResource", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getComputeResource", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetAllComputeResourceNames struct {
  handler Airavata
}

func (p *airavataProcessorGetAllComputeResourceNames) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetAllComputeResourceNamesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getAllComputeResourceNames", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetAllComputeResourceNamesResult{}
var retval map[string]string
  var err2 error
  if retval, err2 = p.handler.GetAllComputeResourceNames(ctx, args.AuthzToken); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllComputeResourceNames: " + err2.Error())
    oprot.WriteMessageBegin("getAllComputeResourceNames", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getAllComputeResourceNames", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorUpdateComputeResource struct {
  handler Airavata
}

func (p *airavataProcessorUpdateComputeResource) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataUpdateComputeResourceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateComputeResource", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataUpdateComputeResourceResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UpdateComputeResource(ctx, args.AuthzToken, args.ComputeResourceId, args.ComputeResourceDescription); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateComputeResource: " + err2.Error())
    oprot.WriteMessageBegin("updateComputeResource", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("updateComputeResource", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorDeleteComputeResource struct {
  handler Airavata
}

func (p *airavataProcessorDeleteComputeResource) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataDeleteComputeResourceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteComputeResource", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataDeleteComputeResourceResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.DeleteComputeResource(ctx, args.AuthzToken, args.ComputeResourceId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteComputeResource: " + err2.Error())
    oprot.WriteMessageBegin("deleteComputeResource", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("deleteComputeResource", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorRegisterStorageResource struct {
  handler Airavata
}

func (p *airavataProcessorRegisterStorageResource) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataRegisterStorageResourceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("registerStorageResource", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataRegisterStorageResourceResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.RegisterStorageResource(ctx, args.AuthzToken, args.StorageResourceDescription); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerStorageResource: " + err2.Error())
    oprot.WriteMessageBegin("registerStorageResource", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("registerStorageResource", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetStorageResource struct {
  handler Airavata
}

func (p *airavataProcessorGetStorageResource) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetStorageResourceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getStorageResource", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetStorageResourceResult{}
var retval *storage_resource_model.StorageResourceDescription
  var err2 error
  if retval, err2 = p.handler.GetStorageResource(ctx, args.AuthzToken, args.StorageResourceId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getStorageResource: " + err2.Error())
    oprot.WriteMessageBegin("getStorageResource", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getStorageResource", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetAllStorageResourceNames struct {
  handler Airavata
}

func (p *airavataProcessorGetAllStorageResourceNames) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetAllStorageResourceNamesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getAllStorageResourceNames", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetAllStorageResourceNamesResult{}
var retval map[string]string
  var err2 error
  if retval, err2 = p.handler.GetAllStorageResourceNames(ctx, args.AuthzToken); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllStorageResourceNames: " + err2.Error())
    oprot.WriteMessageBegin("getAllStorageResourceNames", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getAllStorageResourceNames", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorUpdateStorageResource struct {
  handler Airavata
}

func (p *airavataProcessorUpdateStorageResource) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataUpdateStorageResourceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateStorageResource", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataUpdateStorageResourceResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UpdateStorageResource(ctx, args.AuthzToken, args.StorageResourceId, args.StorageResourceDescription); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateStorageResource: " + err2.Error())
    oprot.WriteMessageBegin("updateStorageResource", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("updateStorageResource", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorDeleteStorageResource struct {
  handler Airavata
}

func (p *airavataProcessorDeleteStorageResource) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataDeleteStorageResourceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteStorageResource", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataDeleteStorageResourceResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.DeleteStorageResource(ctx, args.AuthzToken, args.StorageResourceId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteStorageResource: " + err2.Error())
    oprot.WriteMessageBegin("deleteStorageResource", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("deleteStorageResource", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorAddLocalSubmissionDetails struct {
  handler Airavata
}

func (p *airavataProcessorAddLocalSubmissionDetails) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataAddLocalSubmissionDetailsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("addLocalSubmissionDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataAddLocalSubmissionDetailsResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.AddLocalSubmissionDetails(ctx, args.AuthzToken, args.ComputeResourceId, args.PriorityOrder, args.LocalSubmission); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addLocalSubmissionDetails: " + err2.Error())
    oprot.WriteMessageBegin("addLocalSubmissionDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("addLocalSubmissionDetails", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorUpdateLocalSubmissionDetails struct {
  handler Airavata
}

func (p *airavataProcessorUpdateLocalSubmissionDetails) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataUpdateLocalSubmissionDetailsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateLocalSubmissionDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataUpdateLocalSubmissionDetailsResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UpdateLocalSubmissionDetails(ctx, args.AuthzToken, args.JobSubmissionInterfaceId, args.LocalSubmission); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateLocalSubmissionDetails: " + err2.Error())
    oprot.WriteMessageBegin("updateLocalSubmissionDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("updateLocalSubmissionDetails", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetLocalJobSubmission struct {
  handler Airavata
}

func (p *airavataProcessorGetLocalJobSubmission) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetLocalJobSubmissionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getLocalJobSubmission", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetLocalJobSubmissionResult{}
var retval *compute_resource_model.LOCALSubmission
  var err2 error
  if retval, err2 = p.handler.GetLocalJobSubmission(ctx, args.AuthzToken, args.JobSubmissionId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLocalJobSubmission: " + err2.Error())
    oprot.WriteMessageBegin("getLocalJobSubmission", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getLocalJobSubmission", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorAddSSHJobSubmissionDetails struct {
  handler Airavata
}

func (p *airavataProcessorAddSSHJobSubmissionDetails) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataAddSSHJobSubmissionDetailsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("addSSHJobSubmissionDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataAddSSHJobSubmissionDetailsResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.AddSSHJobSubmissionDetails(ctx, args.AuthzToken, args.ComputeResourceId, args.PriorityOrder, args.SshJobSubmission); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addSSHJobSubmissionDetails: " + err2.Error())
    oprot.WriteMessageBegin("addSSHJobSubmissionDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("addSSHJobSubmissionDetails", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorAddSSHForkJobSubmissionDetails struct {
  handler Airavata
}

func (p *airavataProcessorAddSSHForkJobSubmissionDetails) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataAddSSHForkJobSubmissionDetailsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("addSSHForkJobSubmissionDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataAddSSHForkJobSubmissionDetailsResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.AddSSHForkJobSubmissionDetails(ctx, args.AuthzToken, args.ComputeResourceId, args.PriorityOrder, args.SshJobSubmission); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addSSHForkJobSubmissionDetails: " + err2.Error())
    oprot.WriteMessageBegin("addSSHForkJobSubmissionDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("addSSHForkJobSubmissionDetails", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetSSHJobSubmission struct {
  handler Airavata
}

func (p *airavataProcessorGetSSHJobSubmission) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetSSHJobSubmissionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getSSHJobSubmission", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetSSHJobSubmissionResult{}
var retval *compute_resource_model.SSHJobSubmission
  var err2 error
  if retval, err2 = p.handler.GetSSHJobSubmission(ctx, args.AuthzToken, args.JobSubmissionId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSSHJobSubmission: " + err2.Error())
    oprot.WriteMessageBegin("getSSHJobSubmission", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getSSHJobSubmission", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorAddUNICOREJobSubmissionDetails struct {
  handler Airavata
}

func (p *airavataProcessorAddUNICOREJobSubmissionDetails) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataAddUNICOREJobSubmissionDetailsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("addUNICOREJobSubmissionDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataAddUNICOREJobSubmissionDetailsResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.AddUNICOREJobSubmissionDetails(ctx, args.AuthzToken, args.ComputeResourceId, args.PriorityOrder, args.UnicoreJobSubmission); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addUNICOREJobSubmissionDetails: " + err2.Error())
    oprot.WriteMessageBegin("addUNICOREJobSubmissionDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("addUNICOREJobSubmissionDetails", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetUnicoreJobSubmission struct {
  handler Airavata
}

func (p *airavataProcessorGetUnicoreJobSubmission) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetUnicoreJobSubmissionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getUnicoreJobSubmission", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetUnicoreJobSubmissionResult{}
var retval *compute_resource_model.UnicoreJobSubmission
  var err2 error
  if retval, err2 = p.handler.GetUnicoreJobSubmission(ctx, args.AuthzToken, args.JobSubmissionId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUnicoreJobSubmission: " + err2.Error())
    oprot.WriteMessageBegin("getUnicoreJobSubmission", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getUnicoreJobSubmission", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorAddCloudJobSubmissionDetails struct {
  handler Airavata
}

func (p *airavataProcessorAddCloudJobSubmissionDetails) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataAddCloudJobSubmissionDetailsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("addCloudJobSubmissionDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataAddCloudJobSubmissionDetailsResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.AddCloudJobSubmissionDetails(ctx, args.AuthzToken, args.ComputeResourceId, args.PriorityOrder, args.CloudSubmission); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addCloudJobSubmissionDetails: " + err2.Error())
    oprot.WriteMessageBegin("addCloudJobSubmissionDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("addCloudJobSubmissionDetails", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetCloudJobSubmission struct {
  handler Airavata
}

func (p *airavataProcessorGetCloudJobSubmission) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetCloudJobSubmissionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getCloudJobSubmission", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetCloudJobSubmissionResult{}
var retval *compute_resource_model.CloudJobSubmission
  var err2 error
  if retval, err2 = p.handler.GetCloudJobSubmission(ctx, args.AuthzToken, args.JobSubmissionId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCloudJobSubmission: " + err2.Error())
    oprot.WriteMessageBegin("getCloudJobSubmission", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getCloudJobSubmission", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorUpdateSSHJobSubmissionDetails struct {
  handler Airavata
}

func (p *airavataProcessorUpdateSSHJobSubmissionDetails) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataUpdateSSHJobSubmissionDetailsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateSSHJobSubmissionDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataUpdateSSHJobSubmissionDetailsResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UpdateSSHJobSubmissionDetails(ctx, args.AuthzToken, args.JobSubmissionInterfaceId, args.SshJobSubmission); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateSSHJobSubmissionDetails: " + err2.Error())
    oprot.WriteMessageBegin("updateSSHJobSubmissionDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("updateSSHJobSubmissionDetails", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorUpdateCloudJobSubmissionDetails struct {
  handler Airavata
}

func (p *airavataProcessorUpdateCloudJobSubmissionDetails) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataUpdateCloudJobSubmissionDetailsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateCloudJobSubmissionDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataUpdateCloudJobSubmissionDetailsResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UpdateCloudJobSubmissionDetails(ctx, args.AuthzToken, args.JobSubmissionInterfaceId, args.SshJobSubmission); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateCloudJobSubmissionDetails: " + err2.Error())
    oprot.WriteMessageBegin("updateCloudJobSubmissionDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("updateCloudJobSubmissionDetails", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorUpdateUnicoreJobSubmissionDetails struct {
  handler Airavata
}

func (p *airavataProcessorUpdateUnicoreJobSubmissionDetails) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataUpdateUnicoreJobSubmissionDetailsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateUnicoreJobSubmissionDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataUpdateUnicoreJobSubmissionDetailsResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UpdateUnicoreJobSubmissionDetails(ctx, args.AuthzToken, args.JobSubmissionInterfaceId, args.UnicoreJobSubmission); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateUnicoreJobSubmissionDetails: " + err2.Error())
    oprot.WriteMessageBegin("updateUnicoreJobSubmissionDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("updateUnicoreJobSubmissionDetails", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorAddLocalDataMovementDetails struct {
  handler Airavata
}

func (p *airavataProcessorAddLocalDataMovementDetails) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataAddLocalDataMovementDetailsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("addLocalDataMovementDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataAddLocalDataMovementDetailsResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.AddLocalDataMovementDetails(ctx, args.AuthzToken, args.ProductUri, args.DataMoveType, args.PriorityOrder, args.LocalDataMovement); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addLocalDataMovementDetails: " + err2.Error())
    oprot.WriteMessageBegin("addLocalDataMovementDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("addLocalDataMovementDetails", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorUpdateLocalDataMovementDetails struct {
  handler Airavata
}

func (p *airavataProcessorUpdateLocalDataMovementDetails) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataUpdateLocalDataMovementDetailsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateLocalDataMovementDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataUpdateLocalDataMovementDetailsResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UpdateLocalDataMovementDetails(ctx, args.AuthzToken, args.DataMovementInterfaceId, args.LocalDataMovement); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateLocalDataMovementDetails: " + err2.Error())
    oprot.WriteMessageBegin("updateLocalDataMovementDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("updateLocalDataMovementDetails", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetLocalDataMovement struct {
  handler Airavata
}

func (p *airavataProcessorGetLocalDataMovement) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetLocalDataMovementArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getLocalDataMovement", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetLocalDataMovementResult{}
var retval *data_movement_models.LOCALDataMovement
  var err2 error
  if retval, err2 = p.handler.GetLocalDataMovement(ctx, args.AuthzToken, args.DataMovementId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLocalDataMovement: " + err2.Error())
    oprot.WriteMessageBegin("getLocalDataMovement", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getLocalDataMovement", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorAddSCPDataMovementDetails struct {
  handler Airavata
}

func (p *airavataProcessorAddSCPDataMovementDetails) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataAddSCPDataMovementDetailsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("addSCPDataMovementDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataAddSCPDataMovementDetailsResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.AddSCPDataMovementDetails(ctx, args.AuthzToken, args.ProductUri, args.DataMoveType, args.PriorityOrder, args.ScpDataMovement); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addSCPDataMovementDetails: " + err2.Error())
    oprot.WriteMessageBegin("addSCPDataMovementDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("addSCPDataMovementDetails", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorUpdateSCPDataMovementDetails struct {
  handler Airavata
}

func (p *airavataProcessorUpdateSCPDataMovementDetails) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataUpdateSCPDataMovementDetailsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateSCPDataMovementDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataUpdateSCPDataMovementDetailsResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UpdateSCPDataMovementDetails(ctx, args.AuthzToken, args.DataMovementInterfaceId, args.ScpDataMovement); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateSCPDataMovementDetails: " + err2.Error())
    oprot.WriteMessageBegin("updateSCPDataMovementDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("updateSCPDataMovementDetails", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetSCPDataMovement struct {
  handler Airavata
}

func (p *airavataProcessorGetSCPDataMovement) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetSCPDataMovementArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getSCPDataMovement", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetSCPDataMovementResult{}
var retval *data_movement_models.SCPDataMovement
  var err2 error
  if retval, err2 = p.handler.GetSCPDataMovement(ctx, args.AuthzToken, args.DataMovementId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSCPDataMovement: " + err2.Error())
    oprot.WriteMessageBegin("getSCPDataMovement", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getSCPDataMovement", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorAddUnicoreDataMovementDetails struct {
  handler Airavata
}

func (p *airavataProcessorAddUnicoreDataMovementDetails) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataAddUnicoreDataMovementDetailsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("addUnicoreDataMovementDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataAddUnicoreDataMovementDetailsResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.AddUnicoreDataMovementDetails(ctx, args.AuthzToken, args.ProductUri, args.DataMoveType, args.PriorityOrder, args.UnicoreDataMovement); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addUnicoreDataMovementDetails: " + err2.Error())
    oprot.WriteMessageBegin("addUnicoreDataMovementDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("addUnicoreDataMovementDetails", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorUpdateUnicoreDataMovementDetails struct {
  handler Airavata
}

func (p *airavataProcessorUpdateUnicoreDataMovementDetails) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataUpdateUnicoreDataMovementDetailsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateUnicoreDataMovementDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataUpdateUnicoreDataMovementDetailsResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UpdateUnicoreDataMovementDetails(ctx, args.AuthzToken, args.DataMovementInterfaceId, args.UnicoreDataMovement); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateUnicoreDataMovementDetails: " + err2.Error())
    oprot.WriteMessageBegin("updateUnicoreDataMovementDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("updateUnicoreDataMovementDetails", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetUnicoreDataMovement struct {
  handler Airavata
}

func (p *airavataProcessorGetUnicoreDataMovement) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetUnicoreDataMovementArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getUnicoreDataMovement", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetUnicoreDataMovementResult{}
var retval *data_movement_models.UnicoreDataMovement
  var err2 error
  if retval, err2 = p.handler.GetUnicoreDataMovement(ctx, args.AuthzToken, args.DataMovementId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUnicoreDataMovement: " + err2.Error())
    oprot.WriteMessageBegin("getUnicoreDataMovement", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getUnicoreDataMovement", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorAddGridFTPDataMovementDetails struct {
  handler Airavata
}

func (p *airavataProcessorAddGridFTPDataMovementDetails) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataAddGridFTPDataMovementDetailsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("addGridFTPDataMovementDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataAddGridFTPDataMovementDetailsResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.AddGridFTPDataMovementDetails(ctx, args.AuthzToken, args.ProductUri, args.DataMoveType, args.PriorityOrder, args.GridFTPDataMovement); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addGridFTPDataMovementDetails: " + err2.Error())
    oprot.WriteMessageBegin("addGridFTPDataMovementDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("addGridFTPDataMovementDetails", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorUpdateGridFTPDataMovementDetails struct {
  handler Airavata
}

func (p *airavataProcessorUpdateGridFTPDataMovementDetails) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataUpdateGridFTPDataMovementDetailsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateGridFTPDataMovementDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataUpdateGridFTPDataMovementDetailsResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UpdateGridFTPDataMovementDetails(ctx, args.AuthzToken, args.DataMovementInterfaceId, args.GridFTPDataMovement); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateGridFTPDataMovementDetails: " + err2.Error())
    oprot.WriteMessageBegin("updateGridFTPDataMovementDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("updateGridFTPDataMovementDetails", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetGridFTPDataMovement struct {
  handler Airavata
}

func (p *airavataProcessorGetGridFTPDataMovement) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetGridFTPDataMovementArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getGridFTPDataMovement", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetGridFTPDataMovementResult{}
var retval *data_movement_models.GridFTPDataMovement
  var err2 error
  if retval, err2 = p.handler.GetGridFTPDataMovement(ctx, args.AuthzToken, args.DataMovementId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGridFTPDataMovement: " + err2.Error())
    oprot.WriteMessageBegin("getGridFTPDataMovement", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getGridFTPDataMovement", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorChangeJobSubmissionPriority struct {
  handler Airavata
}

func (p *airavataProcessorChangeJobSubmissionPriority) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataChangeJobSubmissionPriorityArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("changeJobSubmissionPriority", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataChangeJobSubmissionPriorityResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.ChangeJobSubmissionPriority(ctx, args.AuthzToken, args.JobSubmissionInterfaceId, args.NewPriorityOrder_); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing changeJobSubmissionPriority: " + err2.Error())
    oprot.WriteMessageBegin("changeJobSubmissionPriority", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("changeJobSubmissionPriority", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorChangeDataMovementPriority struct {
  handler Airavata
}

func (p *airavataProcessorChangeDataMovementPriority) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataChangeDataMovementPriorityArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("changeDataMovementPriority", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataChangeDataMovementPriorityResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.ChangeDataMovementPriority(ctx, args.AuthzToken, args.DataMovementInterfaceId, args.NewPriorityOrder_); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing changeDataMovementPriority: " + err2.Error())
    oprot.WriteMessageBegin("changeDataMovementPriority", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("changeDataMovementPriority", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorChangeJobSubmissionPriorities struct {
  handler Airavata
}

func (p *airavataProcessorChangeJobSubmissionPriorities) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataChangeJobSubmissionPrioritiesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("changeJobSubmissionPriorities", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataChangeJobSubmissionPrioritiesResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.ChangeJobSubmissionPriorities(ctx, args.AuthzToken, args.JobSubmissionPriorityMap); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing changeJobSubmissionPriorities: " + err2.Error())
    oprot.WriteMessageBegin("changeJobSubmissionPriorities", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("changeJobSubmissionPriorities", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorChangeDataMovementPriorities struct {
  handler Airavata
}

func (p *airavataProcessorChangeDataMovementPriorities) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataChangeDataMovementPrioritiesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("changeDataMovementPriorities", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataChangeDataMovementPrioritiesResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.ChangeDataMovementPriorities(ctx, args.AuthzToken, args.DataMovementPriorityMap); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing changeDataMovementPriorities: " + err2.Error())
    oprot.WriteMessageBegin("changeDataMovementPriorities", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("changeDataMovementPriorities", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorDeleteJobSubmissionInterface struct {
  handler Airavata
}

func (p *airavataProcessorDeleteJobSubmissionInterface) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataDeleteJobSubmissionInterfaceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteJobSubmissionInterface", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataDeleteJobSubmissionInterfaceResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.DeleteJobSubmissionInterface(ctx, args.AuthzToken, args.ComputeResourceId, args.JobSubmissionInterfaceId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteJobSubmissionInterface: " + err2.Error())
    oprot.WriteMessageBegin("deleteJobSubmissionInterface", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("deleteJobSubmissionInterface", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorDeleteDataMovementInterface struct {
  handler Airavata
}

func (p *airavataProcessorDeleteDataMovementInterface) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataDeleteDataMovementInterfaceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteDataMovementInterface", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataDeleteDataMovementInterfaceResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.DeleteDataMovementInterface(ctx, args.AuthzToken, args.ProductUri, args.DataMovementInterfaceId, args.DataMoveType); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteDataMovementInterface: " + err2.Error())
    oprot.WriteMessageBegin("deleteDataMovementInterface", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("deleteDataMovementInterface", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorRegisterResourceJobManager struct {
  handler Airavata
}

func (p *airavataProcessorRegisterResourceJobManager) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataRegisterResourceJobManagerArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("registerResourceJobManager", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataRegisterResourceJobManagerResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.RegisterResourceJobManager(ctx, args.AuthzToken, args.ResourceJobManager); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerResourceJobManager: " + err2.Error())
    oprot.WriteMessageBegin("registerResourceJobManager", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("registerResourceJobManager", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorUpdateResourceJobManager struct {
  handler Airavata
}

func (p *airavataProcessorUpdateResourceJobManager) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataUpdateResourceJobManagerArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateResourceJobManager", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataUpdateResourceJobManagerResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UpdateResourceJobManager(ctx, args.AuthzToken, args.ResourceJobManagerId, args.UpdatedResourceJobManager); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateResourceJobManager: " + err2.Error())
    oprot.WriteMessageBegin("updateResourceJobManager", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("updateResourceJobManager", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetResourceJobManager struct {
  handler Airavata
}

func (p *airavataProcessorGetResourceJobManager) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetResourceJobManagerArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getResourceJobManager", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetResourceJobManagerResult{}
var retval *compute_resource_model.ResourceJobManager
  var err2 error
  if retval, err2 = p.handler.GetResourceJobManager(ctx, args.AuthzToken, args.ResourceJobManagerId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getResourceJobManager: " + err2.Error())
    oprot.WriteMessageBegin("getResourceJobManager", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getResourceJobManager", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorDeleteResourceJobManager struct {
  handler Airavata
}

func (p *airavataProcessorDeleteResourceJobManager) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataDeleteResourceJobManagerArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteResourceJobManager", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataDeleteResourceJobManagerResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.DeleteResourceJobManager(ctx, args.AuthzToken, args.ResourceJobManagerId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteResourceJobManager: " + err2.Error())
    oprot.WriteMessageBegin("deleteResourceJobManager", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("deleteResourceJobManager", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorDeleteBatchQueue struct {
  handler Airavata
}

func (p *airavataProcessorDeleteBatchQueue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataDeleteBatchQueueArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteBatchQueue", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataDeleteBatchQueueResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.DeleteBatchQueue(ctx, args.AuthzToken, args.ComputeResourceId, args.QueueName); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteBatchQueue: " + err2.Error())
    oprot.WriteMessageBegin("deleteBatchQueue", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("deleteBatchQueue", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorRegisterGatewayResourceProfile struct {
  handler Airavata
}

func (p *airavataProcessorRegisterGatewayResourceProfile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataRegisterGatewayResourceProfileArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("registerGatewayResourceProfile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataRegisterGatewayResourceProfileResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.RegisterGatewayResourceProfile(ctx, args.AuthzToken, args.GatewayResourceProfile); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerGatewayResourceProfile: " + err2.Error())
    oprot.WriteMessageBegin("registerGatewayResourceProfile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("registerGatewayResourceProfile", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetGatewayResourceProfile struct {
  handler Airavata
}

func (p *airavataProcessorGetGatewayResourceProfile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetGatewayResourceProfileArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getGatewayResourceProfile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetGatewayResourceProfileResult{}
var retval *gateway_resource_profile_model.GatewayResourceProfile
  var err2 error
  if retval, err2 = p.handler.GetGatewayResourceProfile(ctx, args.AuthzToken, args.GatewayID); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGatewayResourceProfile: " + err2.Error())
    oprot.WriteMessageBegin("getGatewayResourceProfile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getGatewayResourceProfile", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorUpdateGatewayResourceProfile struct {
  handler Airavata
}

func (p *airavataProcessorUpdateGatewayResourceProfile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataUpdateGatewayResourceProfileArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateGatewayResourceProfile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataUpdateGatewayResourceProfileResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UpdateGatewayResourceProfile(ctx, args.AuthzToken, args.GatewayID, args.GatewayResourceProfile); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateGatewayResourceProfile: " + err2.Error())
    oprot.WriteMessageBegin("updateGatewayResourceProfile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("updateGatewayResourceProfile", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorDeleteGatewayResourceProfile struct {
  handler Airavata
}

func (p *airavataProcessorDeleteGatewayResourceProfile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataDeleteGatewayResourceProfileArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteGatewayResourceProfile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataDeleteGatewayResourceProfileResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.DeleteGatewayResourceProfile(ctx, args.AuthzToken, args.GatewayID); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteGatewayResourceProfile: " + err2.Error())
    oprot.WriteMessageBegin("deleteGatewayResourceProfile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("deleteGatewayResourceProfile", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorAddGatewayComputeResourcePreference struct {
  handler Airavata
}

func (p *airavataProcessorAddGatewayComputeResourcePreference) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataAddGatewayComputeResourcePreferenceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("addGatewayComputeResourcePreference", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataAddGatewayComputeResourcePreferenceResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.AddGatewayComputeResourcePreference(ctx, args.AuthzToken, args.GatewayID, args.ComputeResourceId, args.ComputeResourcePreference); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addGatewayComputeResourcePreference: " + err2.Error())
    oprot.WriteMessageBegin("addGatewayComputeResourcePreference", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("addGatewayComputeResourcePreference", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorAddGatewayStoragePreference struct {
  handler Airavata
}

func (p *airavataProcessorAddGatewayStoragePreference) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataAddGatewayStoragePreferenceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("addGatewayStoragePreference", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataAddGatewayStoragePreferenceResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.AddGatewayStoragePreference(ctx, args.AuthzToken, args.GatewayID, args.StorageResourceId, args.StoragePreference); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addGatewayStoragePreference: " + err2.Error())
    oprot.WriteMessageBegin("addGatewayStoragePreference", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("addGatewayStoragePreference", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetGatewayComputeResourcePreference struct {
  handler Airavata
}

func (p *airavataProcessorGetGatewayComputeResourcePreference) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetGatewayComputeResourcePreferenceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getGatewayComputeResourcePreference", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetGatewayComputeResourcePreferenceResult{}
var retval *gateway_resource_profile_model.ComputeResourcePreference
  var err2 error
  if retval, err2 = p.handler.GetGatewayComputeResourcePreference(ctx, args.AuthzToken, args.GatewayID, args.ComputeResourceId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGatewayComputeResourcePreference: " + err2.Error())
    oprot.WriteMessageBegin("getGatewayComputeResourcePreference", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getGatewayComputeResourcePreference", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetGatewayStoragePreference struct {
  handler Airavata
}

func (p *airavataProcessorGetGatewayStoragePreference) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetGatewayStoragePreferenceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getGatewayStoragePreference", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetGatewayStoragePreferenceResult{}
var retval *gateway_resource_profile_model.StoragePreference
  var err2 error
  if retval, err2 = p.handler.GetGatewayStoragePreference(ctx, args.AuthzToken, args.GatewayID, args.StorageResourceId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGatewayStoragePreference: " + err2.Error())
    oprot.WriteMessageBegin("getGatewayStoragePreference", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getGatewayStoragePreference", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetAllGatewayComputeResourcePreferences struct {
  handler Airavata
}

func (p *airavataProcessorGetAllGatewayComputeResourcePreferences) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetAllGatewayComputeResourcePreferencesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getAllGatewayComputeResourcePreferences", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetAllGatewayComputeResourcePreferencesResult{}
var retval []*gateway_resource_profile_model.ComputeResourcePreference
  var err2 error
  if retval, err2 = p.handler.GetAllGatewayComputeResourcePreferences(ctx, args.AuthzToken, args.GatewayID); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllGatewayComputeResourcePreferences: " + err2.Error())
    oprot.WriteMessageBegin("getAllGatewayComputeResourcePreferences", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getAllGatewayComputeResourcePreferences", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetAllGatewayStoragePreferences struct {
  handler Airavata
}

func (p *airavataProcessorGetAllGatewayStoragePreferences) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetAllGatewayStoragePreferencesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getAllGatewayStoragePreferences", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetAllGatewayStoragePreferencesResult{}
var retval []*gateway_resource_profile_model.StoragePreference
  var err2 error
  if retval, err2 = p.handler.GetAllGatewayStoragePreferences(ctx, args.AuthzToken, args.GatewayID); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllGatewayStoragePreferences: " + err2.Error())
    oprot.WriteMessageBegin("getAllGatewayStoragePreferences", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getAllGatewayStoragePreferences", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetAllGatewayResourceProfiles struct {
  handler Airavata
}

func (p *airavataProcessorGetAllGatewayResourceProfiles) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetAllGatewayResourceProfilesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getAllGatewayResourceProfiles", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetAllGatewayResourceProfilesResult{}
var retval []*gateway_resource_profile_model.GatewayResourceProfile
  var err2 error
  if retval, err2 = p.handler.GetAllGatewayResourceProfiles(ctx, args.AuthzToken); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllGatewayResourceProfiles: " + err2.Error())
    oprot.WriteMessageBegin("getAllGatewayResourceProfiles", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getAllGatewayResourceProfiles", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorUpdateGatewayComputeResourcePreference struct {
  handler Airavata
}

func (p *airavataProcessorUpdateGatewayComputeResourcePreference) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataUpdateGatewayComputeResourcePreferenceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateGatewayComputeResourcePreference", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataUpdateGatewayComputeResourcePreferenceResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UpdateGatewayComputeResourcePreference(ctx, args.AuthzToken, args.GatewayID, args.ComputeResourceId, args.ComputeResourcePreference); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateGatewayComputeResourcePreference: " + err2.Error())
    oprot.WriteMessageBegin("updateGatewayComputeResourcePreference", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("updateGatewayComputeResourcePreference", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorUpdateGatewayStoragePreference struct {
  handler Airavata
}

func (p *airavataProcessorUpdateGatewayStoragePreference) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataUpdateGatewayStoragePreferenceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateGatewayStoragePreference", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataUpdateGatewayStoragePreferenceResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UpdateGatewayStoragePreference(ctx, args.AuthzToken, args.GatewayID, args.StorageId, args.StoragePreference); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateGatewayStoragePreference: " + err2.Error())
    oprot.WriteMessageBegin("updateGatewayStoragePreference", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("updateGatewayStoragePreference", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorDeleteGatewayComputeResourcePreference struct {
  handler Airavata
}

func (p *airavataProcessorDeleteGatewayComputeResourcePreference) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataDeleteGatewayComputeResourcePreferenceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteGatewayComputeResourcePreference", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataDeleteGatewayComputeResourcePreferenceResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.DeleteGatewayComputeResourcePreference(ctx, args.AuthzToken, args.GatewayID, args.ComputeResourceId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteGatewayComputeResourcePreference: " + err2.Error())
    oprot.WriteMessageBegin("deleteGatewayComputeResourcePreference", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("deleteGatewayComputeResourcePreference", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorDeleteGatewayStoragePreference struct {
  handler Airavata
}

func (p *airavataProcessorDeleteGatewayStoragePreference) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataDeleteGatewayStoragePreferenceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteGatewayStoragePreference", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataDeleteGatewayStoragePreferenceResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.DeleteGatewayStoragePreference(ctx, args.AuthzToken, args.GatewayID, args.StorageId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteGatewayStoragePreference: " + err2.Error())
    oprot.WriteMessageBegin("deleteGatewayStoragePreference", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("deleteGatewayStoragePreference", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorRegisterUserResourceProfile struct {
  handler Airavata
}

func (p *airavataProcessorRegisterUserResourceProfile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataRegisterUserResourceProfileArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("registerUserResourceProfile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataRegisterUserResourceProfileResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.RegisterUserResourceProfile(ctx, args.AuthzToken, args.UserResourceProfile); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerUserResourceProfile: " + err2.Error())
    oprot.WriteMessageBegin("registerUserResourceProfile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("registerUserResourceProfile", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetUserResourceProfile struct {
  handler Airavata
}

func (p *airavataProcessorGetUserResourceProfile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetUserResourceProfileArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getUserResourceProfile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetUserResourceProfileResult{}
var retval *user_resource_profile_model.UserResourceProfile
  var err2 error
  if retval, err2 = p.handler.GetUserResourceProfile(ctx, args.AuthzToken, args.UserId, args.GatewayID); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserResourceProfile: " + err2.Error())
    oprot.WriteMessageBegin("getUserResourceProfile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getUserResourceProfile", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorUpdateUserResourceProfile struct {
  handler Airavata
}

func (p *airavataProcessorUpdateUserResourceProfile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataUpdateUserResourceProfileArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateUserResourceProfile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataUpdateUserResourceProfileResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UpdateUserResourceProfile(ctx, args.AuthzToken, args.UserId, args.GatewayID, args.UserResourceProfile); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateUserResourceProfile: " + err2.Error())
    oprot.WriteMessageBegin("updateUserResourceProfile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("updateUserResourceProfile", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorDeleteUserResourceProfile struct {
  handler Airavata
}

func (p *airavataProcessorDeleteUserResourceProfile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataDeleteUserResourceProfileArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteUserResourceProfile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataDeleteUserResourceProfileResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.DeleteUserResourceProfile(ctx, args.AuthzToken, args.UserId, args.GatewayID); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteUserResourceProfile: " + err2.Error())
    oprot.WriteMessageBegin("deleteUserResourceProfile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("deleteUserResourceProfile", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorAddUserComputeResourcePreference struct {
  handler Airavata
}

func (p *airavataProcessorAddUserComputeResourcePreference) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataAddUserComputeResourcePreferenceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("addUserComputeResourcePreference", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataAddUserComputeResourcePreferenceResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.AddUserComputeResourcePreference(ctx, args.AuthzToken, args.UserId, args.GatewayID, args.UserComputeResourceId, args.UserComputeResourcePreference); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addUserComputeResourcePreference: " + err2.Error())
    oprot.WriteMessageBegin("addUserComputeResourcePreference", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("addUserComputeResourcePreference", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorAddUserStoragePreference struct {
  handler Airavata
}

func (p *airavataProcessorAddUserStoragePreference) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataAddUserStoragePreferenceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("addUserStoragePreference", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataAddUserStoragePreferenceResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.AddUserStoragePreference(ctx, args.AuthzToken, args.UserId, args.GatewayID, args.UserStorageResourceId, args.UserStoragePreference); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addUserStoragePreference: " + err2.Error())
    oprot.WriteMessageBegin("addUserStoragePreference", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("addUserStoragePreference", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetUserComputeResourcePreference struct {
  handler Airavata
}

func (p *airavataProcessorGetUserComputeResourcePreference) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetUserComputeResourcePreferenceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getUserComputeResourcePreference", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetUserComputeResourcePreferenceResult{}
var retval *user_resource_profile_model.UserComputeResourcePreference
  var err2 error
  if retval, err2 = p.handler.GetUserComputeResourcePreference(ctx, args.AuthzToken, args.UserId, args.GatewayID, args.UserComputeResourceId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserComputeResourcePreference: " + err2.Error())
    oprot.WriteMessageBegin("getUserComputeResourcePreference", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getUserComputeResourcePreference", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetUserStoragePreference struct {
  handler Airavata
}

func (p *airavataProcessorGetUserStoragePreference) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetUserStoragePreferenceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getUserStoragePreference", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetUserStoragePreferenceResult{}
var retval *user_resource_profile_model.UserStoragePreference
  var err2 error
  if retval, err2 = p.handler.GetUserStoragePreference(ctx, args.AuthzToken, args.UserId, args.GatewayID, args.UserStorageResourceId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserStoragePreference: " + err2.Error())
    oprot.WriteMessageBegin("getUserStoragePreference", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getUserStoragePreference", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetAllUserComputeResourcePreferences struct {
  handler Airavata
}

func (p *airavataProcessorGetAllUserComputeResourcePreferences) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetAllUserComputeResourcePreferencesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getAllUserComputeResourcePreferences", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetAllUserComputeResourcePreferencesResult{}
var retval []*user_resource_profile_model.UserComputeResourcePreference
  var err2 error
  if retval, err2 = p.handler.GetAllUserComputeResourcePreferences(ctx, args.AuthzToken, args.UserId, args.GatewayID); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllUserComputeResourcePreferences: " + err2.Error())
    oprot.WriteMessageBegin("getAllUserComputeResourcePreferences", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getAllUserComputeResourcePreferences", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetAllUserStoragePreferences struct {
  handler Airavata
}

func (p *airavataProcessorGetAllUserStoragePreferences) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetAllUserStoragePreferencesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getAllUserStoragePreferences", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetAllUserStoragePreferencesResult{}
var retval []*user_resource_profile_model.UserStoragePreference
  var err2 error
  if retval, err2 = p.handler.GetAllUserStoragePreferences(ctx, args.AuthzToken, args.UserId, args.GatewayID); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllUserStoragePreferences: " + err2.Error())
    oprot.WriteMessageBegin("getAllUserStoragePreferences", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getAllUserStoragePreferences", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetAllUserResourceProfiles struct {
  handler Airavata
}

func (p *airavataProcessorGetAllUserResourceProfiles) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetAllUserResourceProfilesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getAllUserResourceProfiles", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetAllUserResourceProfilesResult{}
var retval []*user_resource_profile_model.UserResourceProfile
  var err2 error
  if retval, err2 = p.handler.GetAllUserResourceProfiles(ctx, args.AuthzToken); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllUserResourceProfiles: " + err2.Error())
    oprot.WriteMessageBegin("getAllUserResourceProfiles", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getAllUserResourceProfiles", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorUpdateUserComputeResourcePreference struct {
  handler Airavata
}

func (p *airavataProcessorUpdateUserComputeResourcePreference) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataUpdateUserComputeResourcePreferenceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateUserComputeResourcePreference", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataUpdateUserComputeResourcePreferenceResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UpdateUserComputeResourcePreference(ctx, args.AuthzToken, args.UserId, args.GatewayID, args.UserComputeResourceId, args.UserComputeResourcePreference); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateUserComputeResourcePreference: " + err2.Error())
    oprot.WriteMessageBegin("updateUserComputeResourcePreference", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("updateUserComputeResourcePreference", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorUpdateUserStoragePreference struct {
  handler Airavata
}

func (p *airavataProcessorUpdateUserStoragePreference) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataUpdateUserStoragePreferenceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateUserStoragePreference", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataUpdateUserStoragePreferenceResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UpdateUserStoragePreference(ctx, args.AuthzToken, args.UserId, args.GatewayID, args.UserStorageId, args.UserStoragePreference); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateUserStoragePreference: " + err2.Error())
    oprot.WriteMessageBegin("updateUserStoragePreference", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("updateUserStoragePreference", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorDeleteUserComputeResourcePreference struct {
  handler Airavata
}

func (p *airavataProcessorDeleteUserComputeResourcePreference) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataDeleteUserComputeResourcePreferenceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteUserComputeResourcePreference", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataDeleteUserComputeResourcePreferenceResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.DeleteUserComputeResourcePreference(ctx, args.AuthzToken, args.UserId, args.GatewayID, args.UserComputeResourceId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteUserComputeResourcePreference: " + err2.Error())
    oprot.WriteMessageBegin("deleteUserComputeResourcePreference", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("deleteUserComputeResourcePreference", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorDeleteUserStoragePreference struct {
  handler Airavata
}

func (p *airavataProcessorDeleteUserStoragePreference) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataDeleteUserStoragePreferenceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteUserStoragePreference", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataDeleteUserStoragePreferenceResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.DeleteUserStoragePreference(ctx, args.AuthzToken, args.UserId, args.GatewayID, args.UserStorageId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteUserStoragePreference: " + err2.Error())
    oprot.WriteMessageBegin("deleteUserStoragePreference", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("deleteUserStoragePreference", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetAllWorkflows struct {
  handler Airavata
}

func (p *airavataProcessorGetAllWorkflows) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetAllWorkflowsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getAllWorkflows", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetAllWorkflowsResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetAllWorkflows(ctx, args.AuthzToken, args.GatewayId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllWorkflows: " + err2.Error())
    oprot.WriteMessageBegin("getAllWorkflows", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getAllWorkflows", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetLatestQueueStatuses struct {
  handler Airavata
}

func (p *airavataProcessorGetLatestQueueStatuses) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetLatestQueueStatusesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getLatestQueueStatuses", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetLatestQueueStatusesResult{}
var retval []*status_models.QueueStatusModel
  var err2 error
  if retval, err2 = p.handler.GetLatestQueueStatuses(ctx, args.AuthzToken); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLatestQueueStatuses: " + err2.Error())
    oprot.WriteMessageBegin("getLatestQueueStatuses", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getLatestQueueStatuses", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetWorkflow struct {
  handler Airavata
}

func (p *airavataProcessorGetWorkflow) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetWorkflowArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getWorkflow", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetWorkflowResult{}
var retval *workflow_data_model.WorkflowModel
  var err2 error
  if retval, err2 = p.handler.GetWorkflow(ctx, args.AuthzToken, args.WorkflowTemplateId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getWorkflow: " + err2.Error())
    oprot.WriteMessageBegin("getWorkflow", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getWorkflow", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorDeleteWorkflow struct {
  handler Airavata
}

func (p *airavataProcessorDeleteWorkflow) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataDeleteWorkflowArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteWorkflow", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataDeleteWorkflowResult{}
  var err2 error
  if err2 = p.handler.DeleteWorkflow(ctx, args.AuthzToken, args.WorkflowTemplateId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteWorkflow: " + err2.Error())
    oprot.WriteMessageBegin("deleteWorkflow", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("deleteWorkflow", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorRegisterWorkflow struct {
  handler Airavata
}

func (p *airavataProcessorRegisterWorkflow) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataRegisterWorkflowArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("registerWorkflow", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataRegisterWorkflowResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.RegisterWorkflow(ctx, args.AuthzToken, args.GatewayId, args.Workflow); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerWorkflow: " + err2.Error())
    oprot.WriteMessageBegin("registerWorkflow", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("registerWorkflow", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorUpdateWorkflow struct {
  handler Airavata
}

func (p *airavataProcessorUpdateWorkflow) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataUpdateWorkflowArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateWorkflow", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataUpdateWorkflowResult{}
  var err2 error
  if err2 = p.handler.UpdateWorkflow(ctx, args.AuthzToken, args.WorkflowTemplateId, args.Workflow); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateWorkflow: " + err2.Error())
    oprot.WriteMessageBegin("updateWorkflow", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("updateWorkflow", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetWorkflowTemplateId struct {
  handler Airavata
}

func (p *airavataProcessorGetWorkflowTemplateId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetWorkflowTemplateIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getWorkflowTemplateId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetWorkflowTemplateIdResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetWorkflowTemplateId(ctx, args.AuthzToken, args.WorkflowName); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getWorkflowTemplateId: " + err2.Error())
    oprot.WriteMessageBegin("getWorkflowTemplateId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("getWorkflowTemplateId", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorIsWorkflowExistWithName struct {
  handler Airavata
}

func (p *airavataProcessorIsWorkflowExistWithName) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataIsWorkflowExistWithNameArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("isWorkflowExistWithName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataIsWorkflowExistWithNameResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.IsWorkflowExistWithName(ctx, args.AuthzToken, args.WorkflowName); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing isWorkflowExistWithName: " + err2.Error())
    oprot.WriteMessageBegin("isWorkflowExistWithName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("isWorkflowExistWithName", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorRegisterDataProduct struct {
  handler Airavata
}

func (p *airavataProcessorRegisterDataProduct) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataRegisterDataProductArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("registerDataProduct", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataRegisterDataProductResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.RegisterDataProduct(ctx, args.AuthzToken, args.DataProductModel); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerDataProduct: " + err2.Error())
    oprot.WriteMessageBegin("registerDataProduct", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("registerDataProduct", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetDataProduct struct {
  handler Airavata
}

func (p *airavataProcessorGetDataProduct) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetDataProductArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getDataProduct", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetDataProductResult{}
var retval *replica_catalog_models.DataProductModel
  var err2 error
  if retval, err2 = p.handler.GetDataProduct(ctx, args.AuthzToken, args.DataProductUri); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getDataProduct: " + err2.Error())
    oprot.WriteMessageBegin("getDataProduct", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getDataProduct", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorRegisterReplicaLocation struct {
  handler Airavata
}

func (p *airavataProcessorRegisterReplicaLocation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataRegisterReplicaLocationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("registerReplicaLocation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataRegisterReplicaLocationResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.RegisterReplicaLocation(ctx, args.AuthzToken, args.ReplicaLocationModel); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerReplicaLocation: " + err2.Error())
    oprot.WriteMessageBegin("registerReplicaLocation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("registerReplicaLocation", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetParentDataProduct struct {
  handler Airavata
}

func (p *airavataProcessorGetParentDataProduct) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetParentDataProductArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getParentDataProduct", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetParentDataProductResult{}
var retval *replica_catalog_models.DataProductModel
  var err2 error
  if retval, err2 = p.handler.GetParentDataProduct(ctx, args.AuthzToken, args.ProductUri); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getParentDataProduct: " + err2.Error())
    oprot.WriteMessageBegin("getParentDataProduct", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getParentDataProduct", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetChildDataProducts struct {
  handler Airavata
}

func (p *airavataProcessorGetChildDataProducts) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetChildDataProductsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getChildDataProducts", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetChildDataProductsResult{}
var retval []*replica_catalog_models.DataProductModel
  var err2 error
  if retval, err2 = p.handler.GetChildDataProducts(ctx, args.AuthzToken, args.ProductUri); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getChildDataProducts: " + err2.Error())
    oprot.WriteMessageBegin("getChildDataProducts", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getChildDataProducts", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorShareResourceWithUsers struct {
  handler Airavata
}

func (p *airavataProcessorShareResourceWithUsers) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataShareResourceWithUsersArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("shareResourceWithUsers", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataShareResourceWithUsersResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.ShareResourceWithUsers(ctx, args.AuthzToken, args.ResourceId, args.ResourceType, args.UserPermissionList); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing shareResourceWithUsers: " + err2.Error())
    oprot.WriteMessageBegin("shareResourceWithUsers", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("shareResourceWithUsers", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorRevokeSharingOfResourceFromUsers struct {
  handler Airavata
}

func (p *airavataProcessorRevokeSharingOfResourceFromUsers) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataRevokeSharingOfResourceFromUsersArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("revokeSharingOfResourceFromUsers", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataRevokeSharingOfResourceFromUsersResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.RevokeSharingOfResourceFromUsers(ctx, args.AuthzToken, args.ResourceId, args.ResourceType, args.UserPermissionList); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing revokeSharingOfResourceFromUsers: " + err2.Error())
    oprot.WriteMessageBegin("revokeSharingOfResourceFromUsers", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("revokeSharingOfResourceFromUsers", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetAllAccessibleUsers struct {
  handler Airavata
}

func (p *airavataProcessorGetAllAccessibleUsers) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetAllAccessibleUsersArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getAllAccessibleUsers", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetAllAccessibleUsersResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetAllAccessibleUsers(ctx, args.AuthzToken, args.ResourceId, args.ResourceType, args.PermissionType); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllAccessibleUsers: " + err2.Error())
    oprot.WriteMessageBegin("getAllAccessibleUsers", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getAllAccessibleUsers", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorCreateGroup struct {
  handler Airavata
}

func (p *airavataProcessorCreateGroup) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataCreateGroupArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataCreateGroupResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.CreateGroup(ctx, args.AuthzToken, args.GroupModel); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createGroup: " + err2.Error())
    oprot.WriteMessageBegin("createGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("createGroup", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorUpdateGroup struct {
  handler Airavata
}

func (p *airavataProcessorUpdateGroup) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataUpdateGroupArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataUpdateGroupResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UpdateGroup(ctx, args.AuthzToken, args.GroupModel); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateGroup: " + err2.Error())
    oprot.WriteMessageBegin("updateGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("updateGroup", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorDeleteGroup struct {
  handler Airavata
}

func (p *airavataProcessorDeleteGroup) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataDeleteGroupArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataDeleteGroupResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.DeleteGroup(ctx, args.AuthzToken, args.GroupId, args.OwnerId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteGroup: " + err2.Error())
    oprot.WriteMessageBegin("deleteGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("deleteGroup", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetGroup struct {
  handler Airavata
}

func (p *airavataProcessorGetGroup) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetGroupArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetGroupResult{}
var retval *group_manager_model.GroupModel
  var err2 error
  if retval, err2 = p.handler.GetGroup(ctx, args.AuthzToken, args.GroupId); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGroup: " + err2.Error())
    oprot.WriteMessageBegin("getGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getGroup", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type airavataProcessorGetAllGroupsUserBelongs struct {
  handler Airavata
}

func (p *airavataProcessorGetAllGroupsUserBelongs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AiravataGetAllGroupsUserBelongsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getAllGroupsUserBelongs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AiravataGetAllGroupsUserBelongsResult{}
var retval []*group_manager_model.GroupModel
  var err2 error
  if retval, err2 = p.handler.GetAllGroupsUserBelongs(ctx, args.AuthzToken, args.UserName); err2 != nil {
  switch v := err2.(type) {
    case *airavata_errors.InvalidRequestException:
  result.Ire = v
    case *airavata_errors.AiravataClientException:
  result.Ace = v
    case *airavata_errors.AiravataSystemException:
  result.Ase = v
    case *airavata_errors.AuthorizationException:
  result.Ae = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllGroupsUserBelongs: " + err2.Error())
    oprot.WriteMessageBegin("getAllGroupsUserBelongs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getAllGroupsUserBelongs", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - AuthzToken
type AiravataGetAPIVersionArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
}

func NewAiravataGetAPIVersionArgs() *AiravataGetAPIVersionArgs {
  return &AiravataGetAPIVersionArgs{}
}

var AiravataGetAPIVersionArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetAPIVersionArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetAPIVersionArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}
func (p *AiravataGetAPIVersionArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetAPIVersionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  return nil
}

func (p *AiravataGetAPIVersionArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetAPIVersionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAPIVersion_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAPIVersionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetAPIVersionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAPIVersionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetAPIVersionResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetAPIVersionResult() *AiravataGetAPIVersionResult {
  return &AiravataGetAPIVersionResult{}
}

var AiravataGetAPIVersionResult_Success_DEFAULT string
func (p *AiravataGetAPIVersionResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return AiravataGetAPIVersionResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataGetAPIVersionResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetAPIVersionResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetAPIVersionResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetAPIVersionResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetAPIVersionResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetAPIVersionResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetAPIVersionResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetAPIVersionResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetAPIVersionResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetAPIVersionResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetAPIVersionResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetAPIVersionResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetAPIVersionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetAPIVersionResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetAPIVersionResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetAPIVersionResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetAPIVersionResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetAPIVersionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetAPIVersionResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataGetAPIVersionResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetAPIVersionResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetAPIVersionResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetAPIVersionResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetAPIVersionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAPIVersion_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAPIVersionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetAPIVersionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetAPIVersionResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetAPIVersionResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetAPIVersionResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetAPIVersionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAPIVersionResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GatewayId
//  - UserName
type AiravataIsUserExistsArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GatewayId string `thrift:"gatewayId,2,required" db:"gatewayId" json:"gatewayId"`
  UserName string `thrift:"userName,3,required" db:"userName" json:"userName"`
}

func NewAiravataIsUserExistsArgs() *AiravataIsUserExistsArgs {
  return &AiravataIsUserExistsArgs{}
}

var AiravataIsUserExistsArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataIsUserExistsArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataIsUserExistsArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataIsUserExistsArgs) GetGatewayId() string {
  return p.GatewayId
}

func (p *AiravataIsUserExistsArgs) GetUserName() string {
  return p.UserName
}
func (p *AiravataIsUserExistsArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataIsUserExistsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGatewayId bool = false;
  var issetUserName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserName = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  if !issetUserName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserName is not set"));
  }
  return nil
}

func (p *AiravataIsUserExistsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataIsUserExistsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *AiravataIsUserExistsArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.UserName = v
}
  return nil
}

func (p *AiravataIsUserExistsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("isUserExists_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataIsUserExistsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataIsUserExistsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayId: ", p), err) }
  return err
}

func (p *AiravataIsUserExistsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userName: ", p), err) }
  if err := oprot.WriteString(string(p.UserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userName: ", p), err) }
  return err
}

func (p *AiravataIsUserExistsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataIsUserExistsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataIsUserExistsResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataIsUserExistsResult() *AiravataIsUserExistsResult {
  return &AiravataIsUserExistsResult{}
}

var AiravataIsUserExistsResult_Success_DEFAULT bool
func (p *AiravataIsUserExistsResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataIsUserExistsResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataIsUserExistsResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataIsUserExistsResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataIsUserExistsResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataIsUserExistsResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataIsUserExistsResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataIsUserExistsResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataIsUserExistsResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataIsUserExistsResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataIsUserExistsResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataIsUserExistsResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataIsUserExistsResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataIsUserExistsResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataIsUserExistsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataIsUserExistsResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataIsUserExistsResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataIsUserExistsResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataIsUserExistsResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataIsUserExistsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataIsUserExistsResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataIsUserExistsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataIsUserExistsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataIsUserExistsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataIsUserExistsResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataIsUserExistsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("isUserExists_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataIsUserExistsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataIsUserExistsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataIsUserExistsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataIsUserExistsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataIsUserExistsResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataIsUserExistsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataIsUserExistsResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - Gateway
type AiravataAddGatewayArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  Gateway *workspace_model.Gateway `thrift:"gateway,2,required" db:"gateway" json:"gateway"`
}

func NewAiravataAddGatewayArgs() *AiravataAddGatewayArgs {
  return &AiravataAddGatewayArgs{}
}

var AiravataAddGatewayArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataAddGatewayArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataAddGatewayArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}
var AiravataAddGatewayArgs_Gateway_DEFAULT *workspace_model.Gateway
func (p *AiravataAddGatewayArgs) GetGateway() *workspace_model.Gateway {
  if !p.IsSetGateway() {
    return AiravataAddGatewayArgs_Gateway_DEFAULT
  }
return p.Gateway
}
func (p *AiravataAddGatewayArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataAddGatewayArgs) IsSetGateway() bool {
  return p.Gateway != nil
}

func (p *AiravataAddGatewayArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGateway bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGateway = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGateway{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Gateway is not set"));
  }
  return nil
}

func (p *AiravataAddGatewayArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataAddGatewayArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Gateway = &workspace_model.Gateway{}
  if err := p.Gateway.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Gateway), err)
  }
  return nil
}

func (p *AiravataAddGatewayArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addGateway_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataAddGatewayArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataAddGatewayArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gateway", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gateway: ", p), err) }
  if err := p.Gateway.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Gateway), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gateway: ", p), err) }
  return err
}

func (p *AiravataAddGatewayArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataAddGatewayArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataAddGatewayResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataAddGatewayResult() *AiravataAddGatewayResult {
  return &AiravataAddGatewayResult{}
}

var AiravataAddGatewayResult_Success_DEFAULT string
func (p *AiravataAddGatewayResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return AiravataAddGatewayResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataAddGatewayResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataAddGatewayResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataAddGatewayResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataAddGatewayResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataAddGatewayResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataAddGatewayResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataAddGatewayResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataAddGatewayResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataAddGatewayResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataAddGatewayResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataAddGatewayResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataAddGatewayResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataAddGatewayResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataAddGatewayResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataAddGatewayResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataAddGatewayResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataAddGatewayResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataAddGatewayResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataAddGatewayResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataAddGatewayResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataAddGatewayResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataAddGatewayResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataAddGatewayResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataAddGatewayResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addGateway_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataAddGatewayResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataAddGatewayResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataAddGatewayResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataAddGatewayResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataAddGatewayResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataAddGatewayResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataAddGatewayResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GatewayId
type AiravataGetAllUsersInGatewayArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GatewayId string `thrift:"gatewayId,2,required" db:"gatewayId" json:"gatewayId"`
}

func NewAiravataGetAllUsersInGatewayArgs() *AiravataGetAllUsersInGatewayArgs {
  return &AiravataGetAllUsersInGatewayArgs{}
}

var AiravataGetAllUsersInGatewayArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetAllUsersInGatewayArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetAllUsersInGatewayArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetAllUsersInGatewayArgs) GetGatewayId() string {
  return p.GatewayId
}
func (p *AiravataGetAllUsersInGatewayArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetAllUsersInGatewayArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGatewayId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  return nil
}

func (p *AiravataGetAllUsersInGatewayArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetAllUsersInGatewayArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *AiravataGetAllUsersInGatewayArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllUsersInGateway_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAllUsersInGatewayArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetAllUsersInGatewayArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayId: ", p), err) }
  return err
}

func (p *AiravataGetAllUsersInGatewayArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAllUsersInGatewayArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetAllUsersInGatewayResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetAllUsersInGatewayResult() *AiravataGetAllUsersInGatewayResult {
  return &AiravataGetAllUsersInGatewayResult{}
}

var AiravataGetAllUsersInGatewayResult_Success_DEFAULT []string

func (p *AiravataGetAllUsersInGatewayResult) GetSuccess() []string {
  return p.Success
}
var AiravataGetAllUsersInGatewayResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetAllUsersInGatewayResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetAllUsersInGatewayResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetAllUsersInGatewayResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetAllUsersInGatewayResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetAllUsersInGatewayResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetAllUsersInGatewayResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetAllUsersInGatewayResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetAllUsersInGatewayResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetAllUsersInGatewayResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetAllUsersInGatewayResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetAllUsersInGatewayResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetAllUsersInGatewayResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetAllUsersInGatewayResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetAllUsersInGatewayResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetAllUsersInGatewayResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetAllUsersInGatewayResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetAllUsersInGatewayResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetAllUsersInGatewayResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem340 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem340 = v
}
    p.Success = append(p.Success, _elem340)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AiravataGetAllUsersInGatewayResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetAllUsersInGatewayResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetAllUsersInGatewayResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetAllUsersInGatewayResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetAllUsersInGatewayResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllUsersInGateway_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAllUsersInGatewayResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllUsersInGatewayResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllUsersInGatewayResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllUsersInGatewayResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllUsersInGatewayResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllUsersInGatewayResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAllUsersInGatewayResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GatewayId
//  - UpdatedGateway
type AiravataUpdateGatewayArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GatewayId string `thrift:"gatewayId,2,required" db:"gatewayId" json:"gatewayId"`
  UpdatedGateway *workspace_model.Gateway `thrift:"updatedGateway,3,required" db:"updatedGateway" json:"updatedGateway"`
}

func NewAiravataUpdateGatewayArgs() *AiravataUpdateGatewayArgs {
  return &AiravataUpdateGatewayArgs{}
}

var AiravataUpdateGatewayArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataUpdateGatewayArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataUpdateGatewayArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataUpdateGatewayArgs) GetGatewayId() string {
  return p.GatewayId
}
var AiravataUpdateGatewayArgs_UpdatedGateway_DEFAULT *workspace_model.Gateway
func (p *AiravataUpdateGatewayArgs) GetUpdatedGateway() *workspace_model.Gateway {
  if !p.IsSetUpdatedGateway() {
    return AiravataUpdateGatewayArgs_UpdatedGateway_DEFAULT
  }
return p.UpdatedGateway
}
func (p *AiravataUpdateGatewayArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataUpdateGatewayArgs) IsSetUpdatedGateway() bool {
  return p.UpdatedGateway != nil
}

func (p *AiravataUpdateGatewayArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGatewayId bool = false;
  var issetUpdatedGateway bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUpdatedGateway = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  if !issetUpdatedGateway{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UpdatedGateway is not set"));
  }
  return nil
}

func (p *AiravataUpdateGatewayArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataUpdateGatewayArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *AiravataUpdateGatewayArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.UpdatedGateway = &workspace_model.Gateway{}
  if err := p.UpdatedGateway.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UpdatedGateway), err)
  }
  return nil
}

func (p *AiravataUpdateGatewayArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateGateway_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateGatewayArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataUpdateGatewayArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayId: ", p), err) }
  return err
}

func (p *AiravataUpdateGatewayArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updatedGateway", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:updatedGateway: ", p), err) }
  if err := p.UpdatedGateway.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UpdatedGateway), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:updatedGateway: ", p), err) }
  return err
}

func (p *AiravataUpdateGatewayArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateGatewayArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataUpdateGatewayResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataUpdateGatewayResult() *AiravataUpdateGatewayResult {
  return &AiravataUpdateGatewayResult{}
}

var AiravataUpdateGatewayResult_Success_DEFAULT bool
func (p *AiravataUpdateGatewayResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataUpdateGatewayResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataUpdateGatewayResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataUpdateGatewayResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataUpdateGatewayResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataUpdateGatewayResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataUpdateGatewayResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataUpdateGatewayResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataUpdateGatewayResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataUpdateGatewayResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataUpdateGatewayResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataUpdateGatewayResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataUpdateGatewayResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataUpdateGatewayResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataUpdateGatewayResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataUpdateGatewayResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataUpdateGatewayResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataUpdateGatewayResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataUpdateGatewayResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataUpdateGatewayResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataUpdateGatewayResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataUpdateGatewayResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataUpdateGatewayResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataUpdateGatewayResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataUpdateGatewayResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataUpdateGatewayResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateGateway_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateGatewayResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateGatewayResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateGatewayResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateGatewayResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateGatewayResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateGatewayResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateGatewayResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GatewayId
type AiravataGetGatewayArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GatewayId string `thrift:"gatewayId,2,required" db:"gatewayId" json:"gatewayId"`
}

func NewAiravataGetGatewayArgs() *AiravataGetGatewayArgs {
  return &AiravataGetGatewayArgs{}
}

var AiravataGetGatewayArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetGatewayArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetGatewayArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetGatewayArgs) GetGatewayId() string {
  return p.GatewayId
}
func (p *AiravataGetGatewayArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetGatewayArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGatewayId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  return nil
}

func (p *AiravataGetGatewayArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetGatewayArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *AiravataGetGatewayArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getGateway_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetGatewayArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetGatewayArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayId: ", p), err) }
  return err
}

func (p *AiravataGetGatewayArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetGatewayArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetGatewayResult struct {
  Success *workspace_model.Gateway `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetGatewayResult() *AiravataGetGatewayResult {
  return &AiravataGetGatewayResult{}
}

var AiravataGetGatewayResult_Success_DEFAULT *workspace_model.Gateway
func (p *AiravataGetGatewayResult) GetSuccess() *workspace_model.Gateway {
  if !p.IsSetSuccess() {
    return AiravataGetGatewayResult_Success_DEFAULT
  }
return p.Success
}
var AiravataGetGatewayResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetGatewayResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetGatewayResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetGatewayResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetGatewayResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetGatewayResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetGatewayResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetGatewayResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetGatewayResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetGatewayResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetGatewayResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetGatewayResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetGatewayResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetGatewayResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetGatewayResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetGatewayResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetGatewayResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetGatewayResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetGatewayResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &workspace_model.Gateway{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AiravataGetGatewayResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetGatewayResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetGatewayResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetGatewayResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetGatewayResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getGateway_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetGatewayResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetGatewayResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetGatewayResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetGatewayResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetGatewayResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetGatewayResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetGatewayResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GatewayId
type AiravataDeleteGatewayArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GatewayId string `thrift:"gatewayId,2,required" db:"gatewayId" json:"gatewayId"`
}

func NewAiravataDeleteGatewayArgs() *AiravataDeleteGatewayArgs {
  return &AiravataDeleteGatewayArgs{}
}

var AiravataDeleteGatewayArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataDeleteGatewayArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataDeleteGatewayArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataDeleteGatewayArgs) GetGatewayId() string {
  return p.GatewayId
}
func (p *AiravataDeleteGatewayArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataDeleteGatewayArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGatewayId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  return nil
}

func (p *AiravataDeleteGatewayArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataDeleteGatewayArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *AiravataDeleteGatewayArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteGateway_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeleteGatewayArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataDeleteGatewayArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayId: ", p), err) }
  return err
}

func (p *AiravataDeleteGatewayArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeleteGatewayArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataDeleteGatewayResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataDeleteGatewayResult() *AiravataDeleteGatewayResult {
  return &AiravataDeleteGatewayResult{}
}

var AiravataDeleteGatewayResult_Success_DEFAULT bool
func (p *AiravataDeleteGatewayResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataDeleteGatewayResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataDeleteGatewayResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataDeleteGatewayResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataDeleteGatewayResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataDeleteGatewayResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataDeleteGatewayResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataDeleteGatewayResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataDeleteGatewayResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataDeleteGatewayResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataDeleteGatewayResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataDeleteGatewayResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataDeleteGatewayResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataDeleteGatewayResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataDeleteGatewayResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataDeleteGatewayResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataDeleteGatewayResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataDeleteGatewayResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataDeleteGatewayResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataDeleteGatewayResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataDeleteGatewayResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataDeleteGatewayResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataDeleteGatewayResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataDeleteGatewayResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataDeleteGatewayResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataDeleteGatewayResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteGateway_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeleteGatewayResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteGatewayResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteGatewayResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteGatewayResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteGatewayResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteGatewayResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeleteGatewayResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
type AiravataGetAllGatewaysArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
}

func NewAiravataGetAllGatewaysArgs() *AiravataGetAllGatewaysArgs {
  return &AiravataGetAllGatewaysArgs{}
}

var AiravataGetAllGatewaysArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetAllGatewaysArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetAllGatewaysArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}
func (p *AiravataGetAllGatewaysArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetAllGatewaysArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  return nil
}

func (p *AiravataGetAllGatewaysArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetAllGatewaysArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllGateways_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAllGatewaysArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetAllGatewaysArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAllGatewaysArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetAllGatewaysResult struct {
  Success []*workspace_model.Gateway `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetAllGatewaysResult() *AiravataGetAllGatewaysResult {
  return &AiravataGetAllGatewaysResult{}
}

var AiravataGetAllGatewaysResult_Success_DEFAULT []*workspace_model.Gateway

func (p *AiravataGetAllGatewaysResult) GetSuccess() []*workspace_model.Gateway {
  return p.Success
}
var AiravataGetAllGatewaysResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetAllGatewaysResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetAllGatewaysResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetAllGatewaysResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetAllGatewaysResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetAllGatewaysResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetAllGatewaysResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetAllGatewaysResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetAllGatewaysResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetAllGatewaysResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetAllGatewaysResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetAllGatewaysResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetAllGatewaysResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetAllGatewaysResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetAllGatewaysResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetAllGatewaysResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetAllGatewaysResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetAllGatewaysResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetAllGatewaysResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*workspace_model.Gateway, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem341 := &workspace_model.Gateway{}
    if err := _elem341.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem341), err)
    }
    p.Success = append(p.Success, _elem341)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AiravataGetAllGatewaysResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetAllGatewaysResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetAllGatewaysResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetAllGatewaysResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetAllGatewaysResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllGateways_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAllGatewaysResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllGatewaysResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllGatewaysResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllGatewaysResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllGatewaysResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllGatewaysResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAllGatewaysResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GatewayId
type AiravataIsGatewayExistArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GatewayId string `thrift:"gatewayId,2,required" db:"gatewayId" json:"gatewayId"`
}

func NewAiravataIsGatewayExistArgs() *AiravataIsGatewayExistArgs {
  return &AiravataIsGatewayExistArgs{}
}

var AiravataIsGatewayExistArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataIsGatewayExistArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataIsGatewayExistArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataIsGatewayExistArgs) GetGatewayId() string {
  return p.GatewayId
}
func (p *AiravataIsGatewayExistArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataIsGatewayExistArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGatewayId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  return nil
}

func (p *AiravataIsGatewayExistArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataIsGatewayExistArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *AiravataIsGatewayExistArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("isGatewayExist_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataIsGatewayExistArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataIsGatewayExistArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayId: ", p), err) }
  return err
}

func (p *AiravataIsGatewayExistArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataIsGatewayExistArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataIsGatewayExistResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataIsGatewayExistResult() *AiravataIsGatewayExistResult {
  return &AiravataIsGatewayExistResult{}
}

var AiravataIsGatewayExistResult_Success_DEFAULT bool
func (p *AiravataIsGatewayExistResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataIsGatewayExistResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataIsGatewayExistResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataIsGatewayExistResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataIsGatewayExistResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataIsGatewayExistResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataIsGatewayExistResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataIsGatewayExistResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataIsGatewayExistResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataIsGatewayExistResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataIsGatewayExistResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataIsGatewayExistResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataIsGatewayExistResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataIsGatewayExistResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataIsGatewayExistResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataIsGatewayExistResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataIsGatewayExistResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataIsGatewayExistResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataIsGatewayExistResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataIsGatewayExistResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataIsGatewayExistResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataIsGatewayExistResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataIsGatewayExistResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataIsGatewayExistResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataIsGatewayExistResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataIsGatewayExistResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("isGatewayExist_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataIsGatewayExistResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataIsGatewayExistResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataIsGatewayExistResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataIsGatewayExistResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataIsGatewayExistResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataIsGatewayExistResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataIsGatewayExistResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - Notification
type AiravataCreateNotificationArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  Notification *workspace_model.Notification `thrift:"notification,2,required" db:"notification" json:"notification"`
}

func NewAiravataCreateNotificationArgs() *AiravataCreateNotificationArgs {
  return &AiravataCreateNotificationArgs{}
}

var AiravataCreateNotificationArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataCreateNotificationArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataCreateNotificationArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}
var AiravataCreateNotificationArgs_Notification_DEFAULT *workspace_model.Notification
func (p *AiravataCreateNotificationArgs) GetNotification() *workspace_model.Notification {
  if !p.IsSetNotification() {
    return AiravataCreateNotificationArgs_Notification_DEFAULT
  }
return p.Notification
}
func (p *AiravataCreateNotificationArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataCreateNotificationArgs) IsSetNotification() bool {
  return p.Notification != nil
}

func (p *AiravataCreateNotificationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetNotification bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetNotification = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetNotification{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Notification is not set"));
  }
  return nil
}

func (p *AiravataCreateNotificationArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataCreateNotificationArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Notification = &workspace_model.Notification{}
  if err := p.Notification.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Notification), err)
  }
  return nil
}

func (p *AiravataCreateNotificationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createNotification_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataCreateNotificationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataCreateNotificationArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("notification", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notification: ", p), err) }
  if err := p.Notification.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Notification), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notification: ", p), err) }
  return err
}

func (p *AiravataCreateNotificationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataCreateNotificationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataCreateNotificationResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataCreateNotificationResult() *AiravataCreateNotificationResult {
  return &AiravataCreateNotificationResult{}
}

var AiravataCreateNotificationResult_Success_DEFAULT string
func (p *AiravataCreateNotificationResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return AiravataCreateNotificationResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataCreateNotificationResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataCreateNotificationResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataCreateNotificationResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataCreateNotificationResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataCreateNotificationResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataCreateNotificationResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataCreateNotificationResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataCreateNotificationResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataCreateNotificationResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataCreateNotificationResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataCreateNotificationResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataCreateNotificationResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataCreateNotificationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataCreateNotificationResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataCreateNotificationResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataCreateNotificationResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataCreateNotificationResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataCreateNotificationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataCreateNotificationResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataCreateNotificationResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataCreateNotificationResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataCreateNotificationResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataCreateNotificationResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataCreateNotificationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createNotification_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataCreateNotificationResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataCreateNotificationResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataCreateNotificationResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataCreateNotificationResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataCreateNotificationResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataCreateNotificationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataCreateNotificationResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - Notification
type AiravataUpdateNotificationArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  Notification *workspace_model.Notification `thrift:"notification,2,required" db:"notification" json:"notification"`
}

func NewAiravataUpdateNotificationArgs() *AiravataUpdateNotificationArgs {
  return &AiravataUpdateNotificationArgs{}
}

var AiravataUpdateNotificationArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataUpdateNotificationArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataUpdateNotificationArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}
var AiravataUpdateNotificationArgs_Notification_DEFAULT *workspace_model.Notification
func (p *AiravataUpdateNotificationArgs) GetNotification() *workspace_model.Notification {
  if !p.IsSetNotification() {
    return AiravataUpdateNotificationArgs_Notification_DEFAULT
  }
return p.Notification
}
func (p *AiravataUpdateNotificationArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataUpdateNotificationArgs) IsSetNotification() bool {
  return p.Notification != nil
}

func (p *AiravataUpdateNotificationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetNotification bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetNotification = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetNotification{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Notification is not set"));
  }
  return nil
}

func (p *AiravataUpdateNotificationArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataUpdateNotificationArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Notification = &workspace_model.Notification{}
  if err := p.Notification.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Notification), err)
  }
  return nil
}

func (p *AiravataUpdateNotificationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateNotification_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateNotificationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataUpdateNotificationArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("notification", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notification: ", p), err) }
  if err := p.Notification.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Notification), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notification: ", p), err) }
  return err
}

func (p *AiravataUpdateNotificationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateNotificationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataUpdateNotificationResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataUpdateNotificationResult() *AiravataUpdateNotificationResult {
  return &AiravataUpdateNotificationResult{}
}

var AiravataUpdateNotificationResult_Success_DEFAULT bool
func (p *AiravataUpdateNotificationResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataUpdateNotificationResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataUpdateNotificationResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataUpdateNotificationResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataUpdateNotificationResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataUpdateNotificationResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataUpdateNotificationResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataUpdateNotificationResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataUpdateNotificationResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataUpdateNotificationResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataUpdateNotificationResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataUpdateNotificationResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataUpdateNotificationResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataUpdateNotificationResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataUpdateNotificationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataUpdateNotificationResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataUpdateNotificationResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataUpdateNotificationResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataUpdateNotificationResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataUpdateNotificationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataUpdateNotificationResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataUpdateNotificationResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataUpdateNotificationResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataUpdateNotificationResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataUpdateNotificationResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataUpdateNotificationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateNotification_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateNotificationResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateNotificationResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateNotificationResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateNotificationResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateNotificationResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateNotificationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateNotificationResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GatewayId
//  - NotificationId
type AiravataDeleteNotificationArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GatewayId string `thrift:"gatewayId,2,required" db:"gatewayId" json:"gatewayId"`
  NotificationId string `thrift:"notificationId,3,required" db:"notificationId" json:"notificationId"`
}

func NewAiravataDeleteNotificationArgs() *AiravataDeleteNotificationArgs {
  return &AiravataDeleteNotificationArgs{}
}

var AiravataDeleteNotificationArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataDeleteNotificationArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataDeleteNotificationArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataDeleteNotificationArgs) GetGatewayId() string {
  return p.GatewayId
}

func (p *AiravataDeleteNotificationArgs) GetNotificationId() string {
  return p.NotificationId
}
func (p *AiravataDeleteNotificationArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataDeleteNotificationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGatewayId bool = false;
  var issetNotificationId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetNotificationId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  if !issetNotificationId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NotificationId is not set"));
  }
  return nil
}

func (p *AiravataDeleteNotificationArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataDeleteNotificationArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *AiravataDeleteNotificationArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NotificationId = v
}
  return nil
}

func (p *AiravataDeleteNotificationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteNotification_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeleteNotificationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataDeleteNotificationArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayId: ", p), err) }
  return err
}

func (p *AiravataDeleteNotificationArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("notificationId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notificationId: ", p), err) }
  if err := oprot.WriteString(string(p.NotificationId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notificationId: ", p), err) }
  return err
}

func (p *AiravataDeleteNotificationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeleteNotificationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataDeleteNotificationResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataDeleteNotificationResult() *AiravataDeleteNotificationResult {
  return &AiravataDeleteNotificationResult{}
}

var AiravataDeleteNotificationResult_Success_DEFAULT bool
func (p *AiravataDeleteNotificationResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataDeleteNotificationResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataDeleteNotificationResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataDeleteNotificationResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataDeleteNotificationResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataDeleteNotificationResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataDeleteNotificationResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataDeleteNotificationResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataDeleteNotificationResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataDeleteNotificationResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataDeleteNotificationResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataDeleteNotificationResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataDeleteNotificationResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataDeleteNotificationResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataDeleteNotificationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataDeleteNotificationResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataDeleteNotificationResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataDeleteNotificationResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataDeleteNotificationResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataDeleteNotificationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataDeleteNotificationResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataDeleteNotificationResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataDeleteNotificationResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataDeleteNotificationResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataDeleteNotificationResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataDeleteNotificationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteNotification_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeleteNotificationResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteNotificationResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteNotificationResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteNotificationResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteNotificationResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteNotificationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeleteNotificationResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GatewayId
//  - NotificationId
type AiravataGetNotificationArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GatewayId string `thrift:"gatewayId,2,required" db:"gatewayId" json:"gatewayId"`
  NotificationId string `thrift:"notificationId,3,required" db:"notificationId" json:"notificationId"`
}

func NewAiravataGetNotificationArgs() *AiravataGetNotificationArgs {
  return &AiravataGetNotificationArgs{}
}

var AiravataGetNotificationArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetNotificationArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetNotificationArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetNotificationArgs) GetGatewayId() string {
  return p.GatewayId
}

func (p *AiravataGetNotificationArgs) GetNotificationId() string {
  return p.NotificationId
}
func (p *AiravataGetNotificationArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetNotificationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGatewayId bool = false;
  var issetNotificationId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetNotificationId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  if !issetNotificationId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NotificationId is not set"));
  }
  return nil
}

func (p *AiravataGetNotificationArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetNotificationArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *AiravataGetNotificationArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NotificationId = v
}
  return nil
}

func (p *AiravataGetNotificationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getNotification_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetNotificationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetNotificationArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayId: ", p), err) }
  return err
}

func (p *AiravataGetNotificationArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("notificationId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notificationId: ", p), err) }
  if err := oprot.WriteString(string(p.NotificationId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notificationId: ", p), err) }
  return err
}

func (p *AiravataGetNotificationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetNotificationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetNotificationResult struct {
  Success *workspace_model.Notification `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetNotificationResult() *AiravataGetNotificationResult {
  return &AiravataGetNotificationResult{}
}

var AiravataGetNotificationResult_Success_DEFAULT *workspace_model.Notification
func (p *AiravataGetNotificationResult) GetSuccess() *workspace_model.Notification {
  if !p.IsSetSuccess() {
    return AiravataGetNotificationResult_Success_DEFAULT
  }
return p.Success
}
var AiravataGetNotificationResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetNotificationResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetNotificationResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetNotificationResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetNotificationResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetNotificationResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetNotificationResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetNotificationResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetNotificationResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetNotificationResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetNotificationResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetNotificationResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetNotificationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetNotificationResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetNotificationResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetNotificationResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetNotificationResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetNotificationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetNotificationResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &workspace_model.Notification{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AiravataGetNotificationResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetNotificationResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetNotificationResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetNotificationResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetNotificationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getNotification_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetNotificationResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetNotificationResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetNotificationResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetNotificationResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetNotificationResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetNotificationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetNotificationResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GatewayId
type AiravataGetAllNotificationsArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GatewayId string `thrift:"gatewayId,2,required" db:"gatewayId" json:"gatewayId"`
}

func NewAiravataGetAllNotificationsArgs() *AiravataGetAllNotificationsArgs {
  return &AiravataGetAllNotificationsArgs{}
}

var AiravataGetAllNotificationsArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetAllNotificationsArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetAllNotificationsArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetAllNotificationsArgs) GetGatewayId() string {
  return p.GatewayId
}
func (p *AiravataGetAllNotificationsArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetAllNotificationsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGatewayId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  return nil
}

func (p *AiravataGetAllNotificationsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetAllNotificationsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *AiravataGetAllNotificationsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllNotifications_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAllNotificationsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetAllNotificationsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayId: ", p), err) }
  return err
}

func (p *AiravataGetAllNotificationsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAllNotificationsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetAllNotificationsResult struct {
  Success []*workspace_model.Notification `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetAllNotificationsResult() *AiravataGetAllNotificationsResult {
  return &AiravataGetAllNotificationsResult{}
}

var AiravataGetAllNotificationsResult_Success_DEFAULT []*workspace_model.Notification

func (p *AiravataGetAllNotificationsResult) GetSuccess() []*workspace_model.Notification {
  return p.Success
}
var AiravataGetAllNotificationsResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetAllNotificationsResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetAllNotificationsResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetAllNotificationsResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetAllNotificationsResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetAllNotificationsResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetAllNotificationsResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetAllNotificationsResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetAllNotificationsResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetAllNotificationsResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetAllNotificationsResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetAllNotificationsResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetAllNotificationsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetAllNotificationsResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetAllNotificationsResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetAllNotificationsResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetAllNotificationsResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetAllNotificationsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetAllNotificationsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*workspace_model.Notification, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem342 := &workspace_model.Notification{}
    if err := _elem342.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem342), err)
    }
    p.Success = append(p.Success, _elem342)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AiravataGetAllNotificationsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetAllNotificationsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetAllNotificationsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetAllNotificationsResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetAllNotificationsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllNotifications_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAllNotificationsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllNotificationsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllNotificationsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllNotificationsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllNotificationsResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllNotificationsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAllNotificationsResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GatewayId
//  - UserName
//  - Description
//  - CredentialOwnerType
type AiravataGenerateAndRegisterSSHKeysArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GatewayId string `thrift:"gatewayId,2,required" db:"gatewayId" json:"gatewayId"`
  UserName string `thrift:"userName,3,required" db:"userName" json:"userName"`
  Description string `thrift:"description,4" db:"description" json:"description"`
  CredentialOwnerType credential_store_data_models.CredentialOwnerType `thrift:"credentialOwnerType,5" db:"credentialOwnerType" json:"credentialOwnerType"`
}

func NewAiravataGenerateAndRegisterSSHKeysArgs() *AiravataGenerateAndRegisterSSHKeysArgs {
  return &AiravataGenerateAndRegisterSSHKeysArgs{}
}

var AiravataGenerateAndRegisterSSHKeysArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGenerateAndRegisterSSHKeysArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGenerateAndRegisterSSHKeysArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGenerateAndRegisterSSHKeysArgs) GetGatewayId() string {
  return p.GatewayId
}

func (p *AiravataGenerateAndRegisterSSHKeysArgs) GetUserName() string {
  return p.UserName
}

func (p *AiravataGenerateAndRegisterSSHKeysArgs) GetDescription() string {
  return p.Description
}

func (p *AiravataGenerateAndRegisterSSHKeysArgs) GetCredentialOwnerType() credential_store_data_models.CredentialOwnerType {
  return p.CredentialOwnerType
}
func (p *AiravataGenerateAndRegisterSSHKeysArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGenerateAndRegisterSSHKeysArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGatewayId bool = false;
  var issetUserName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserName = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  if !issetUserName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserName is not set"));
  }
  return nil
}

func (p *AiravataGenerateAndRegisterSSHKeysArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGenerateAndRegisterSSHKeysArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *AiravataGenerateAndRegisterSSHKeysArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.UserName = v
}
  return nil
}

func (p *AiravataGenerateAndRegisterSSHKeysArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Description = v
}
  return nil
}

func (p *AiravataGenerateAndRegisterSSHKeysArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := credential_store_data_models.CredentialOwnerType(v)
  p.CredentialOwnerType = temp
}
  return nil
}

func (p *AiravataGenerateAndRegisterSSHKeysArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("generateAndRegisterSSHKeys_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGenerateAndRegisterSSHKeysArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGenerateAndRegisterSSHKeysArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayId: ", p), err) }
  return err
}

func (p *AiravataGenerateAndRegisterSSHKeysArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userName: ", p), err) }
  if err := oprot.WriteString(string(p.UserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userName: ", p), err) }
  return err
}

func (p *AiravataGenerateAndRegisterSSHKeysArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("description", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:description: ", p), err) }
  if err := oprot.WriteString(string(p.Description)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.description (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:description: ", p), err) }
  return err
}

func (p *AiravataGenerateAndRegisterSSHKeysArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("credentialOwnerType", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:credentialOwnerType: ", p), err) }
  if err := oprot.WriteI32(int32(p.CredentialOwnerType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.credentialOwnerType (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:credentialOwnerType: ", p), err) }
  return err
}

func (p *AiravataGenerateAndRegisterSSHKeysArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGenerateAndRegisterSSHKeysArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
type AiravataGenerateAndRegisterSSHKeysResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
}

func NewAiravataGenerateAndRegisterSSHKeysResult() *AiravataGenerateAndRegisterSSHKeysResult {
  return &AiravataGenerateAndRegisterSSHKeysResult{}
}

var AiravataGenerateAndRegisterSSHKeysResult_Success_DEFAULT string
func (p *AiravataGenerateAndRegisterSSHKeysResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return AiravataGenerateAndRegisterSSHKeysResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataGenerateAndRegisterSSHKeysResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGenerateAndRegisterSSHKeysResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGenerateAndRegisterSSHKeysResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGenerateAndRegisterSSHKeysResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGenerateAndRegisterSSHKeysResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGenerateAndRegisterSSHKeysResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGenerateAndRegisterSSHKeysResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGenerateAndRegisterSSHKeysResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGenerateAndRegisterSSHKeysResult_Ase_DEFAULT
  }
return p.Ase
}
func (p *AiravataGenerateAndRegisterSSHKeysResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGenerateAndRegisterSSHKeysResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGenerateAndRegisterSSHKeysResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGenerateAndRegisterSSHKeysResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGenerateAndRegisterSSHKeysResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGenerateAndRegisterSSHKeysResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataGenerateAndRegisterSSHKeysResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGenerateAndRegisterSSHKeysResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGenerateAndRegisterSSHKeysResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGenerateAndRegisterSSHKeysResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("generateAndRegisterSSHKeys_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGenerateAndRegisterSSHKeysResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGenerateAndRegisterSSHKeysResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGenerateAndRegisterSSHKeysResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGenerateAndRegisterSSHKeysResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGenerateAndRegisterSSHKeysResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGenerateAndRegisterSSHKeysResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GatewayId
//  - PortalUserName
//  - LoginUserName
//  - Password
//  - Description
type AiravataRegisterPwdCredentialArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GatewayId string `thrift:"gatewayId,2,required" db:"gatewayId" json:"gatewayId"`
  PortalUserName string `thrift:"portalUserName,3,required" db:"portalUserName" json:"portalUserName"`
  LoginUserName string `thrift:"loginUserName,4,required" db:"loginUserName" json:"loginUserName"`
  Password string `thrift:"password,5,required" db:"password" json:"password"`
  Description string `thrift:"description,6,required" db:"description" json:"description"`
}

func NewAiravataRegisterPwdCredentialArgs() *AiravataRegisterPwdCredentialArgs {
  return &AiravataRegisterPwdCredentialArgs{}
}

var AiravataRegisterPwdCredentialArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataRegisterPwdCredentialArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataRegisterPwdCredentialArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataRegisterPwdCredentialArgs) GetGatewayId() string {
  return p.GatewayId
}

func (p *AiravataRegisterPwdCredentialArgs) GetPortalUserName() string {
  return p.PortalUserName
}

func (p *AiravataRegisterPwdCredentialArgs) GetLoginUserName() string {
  return p.LoginUserName
}

func (p *AiravataRegisterPwdCredentialArgs) GetPassword() string {
  return p.Password
}

func (p *AiravataRegisterPwdCredentialArgs) GetDescription() string {
  return p.Description
}
func (p *AiravataRegisterPwdCredentialArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataRegisterPwdCredentialArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGatewayId bool = false;
  var issetPortalUserName bool = false;
  var issetLoginUserName bool = false;
  var issetPassword bool = false;
  var issetDescription bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetPortalUserName = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetLoginUserName = true
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetPassword = true
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetDescription = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  if !issetPortalUserName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PortalUserName is not set"));
  }
  if !issetLoginUserName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LoginUserName is not set"));
  }
  if !issetPassword{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Password is not set"));
  }
  if !issetDescription{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Description is not set"));
  }
  return nil
}

func (p *AiravataRegisterPwdCredentialArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataRegisterPwdCredentialArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *AiravataRegisterPwdCredentialArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PortalUserName = v
}
  return nil
}

func (p *AiravataRegisterPwdCredentialArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.LoginUserName = v
}
  return nil
}

func (p *AiravataRegisterPwdCredentialArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *AiravataRegisterPwdCredentialArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Description = v
}
  return nil
}

func (p *AiravataRegisterPwdCredentialArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerPwdCredential_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataRegisterPwdCredentialArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataRegisterPwdCredentialArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayId: ", p), err) }
  return err
}

func (p *AiravataRegisterPwdCredentialArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("portalUserName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:portalUserName: ", p), err) }
  if err := oprot.WriteString(string(p.PortalUserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.portalUserName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:portalUserName: ", p), err) }
  return err
}

func (p *AiravataRegisterPwdCredentialArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("loginUserName", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:loginUserName: ", p), err) }
  if err := oprot.WriteString(string(p.LoginUserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.loginUserName (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:loginUserName: ", p), err) }
  return err
}

func (p *AiravataRegisterPwdCredentialArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("password", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:password: ", p), err) }
  if err := oprot.WriteString(string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:password: ", p), err) }
  return err
}

func (p *AiravataRegisterPwdCredentialArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("description", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:description: ", p), err) }
  if err := oprot.WriteString(string(p.Description)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.description (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:description: ", p), err) }
  return err
}

func (p *AiravataRegisterPwdCredentialArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataRegisterPwdCredentialArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
type AiravataRegisterPwdCredentialResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
}

func NewAiravataRegisterPwdCredentialResult() *AiravataRegisterPwdCredentialResult {
  return &AiravataRegisterPwdCredentialResult{}
}

var AiravataRegisterPwdCredentialResult_Success_DEFAULT string
func (p *AiravataRegisterPwdCredentialResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return AiravataRegisterPwdCredentialResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataRegisterPwdCredentialResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataRegisterPwdCredentialResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataRegisterPwdCredentialResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataRegisterPwdCredentialResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataRegisterPwdCredentialResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataRegisterPwdCredentialResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataRegisterPwdCredentialResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataRegisterPwdCredentialResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataRegisterPwdCredentialResult_Ase_DEFAULT
  }
return p.Ase
}
func (p *AiravataRegisterPwdCredentialResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataRegisterPwdCredentialResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataRegisterPwdCredentialResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataRegisterPwdCredentialResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataRegisterPwdCredentialResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataRegisterPwdCredentialResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataRegisterPwdCredentialResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataRegisterPwdCredentialResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataRegisterPwdCredentialResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataRegisterPwdCredentialResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerPwdCredential_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataRegisterPwdCredentialResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterPwdCredentialResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterPwdCredentialResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterPwdCredentialResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterPwdCredentialResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataRegisterPwdCredentialResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - AiravataCredStoreToken
//  - GatewayId
type AiravataGetSSHPubKeyArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  AiravataCredStoreToken string `thrift:"airavataCredStoreToken,2,required" db:"airavataCredStoreToken" json:"airavataCredStoreToken"`
  GatewayId string `thrift:"gatewayId,3,required" db:"gatewayId" json:"gatewayId"`
}

func NewAiravataGetSSHPubKeyArgs() *AiravataGetSSHPubKeyArgs {
  return &AiravataGetSSHPubKeyArgs{}
}

var AiravataGetSSHPubKeyArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetSSHPubKeyArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetSSHPubKeyArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetSSHPubKeyArgs) GetAiravataCredStoreToken() string {
  return p.AiravataCredStoreToken
}

func (p *AiravataGetSSHPubKeyArgs) GetGatewayId() string {
  return p.GatewayId
}
func (p *AiravataGetSSHPubKeyArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetSSHPubKeyArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetAiravataCredStoreToken bool = false;
  var issetGatewayId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAiravataCredStoreToken = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetAiravataCredStoreToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AiravataCredStoreToken is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  return nil
}

func (p *AiravataGetSSHPubKeyArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetSSHPubKeyArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AiravataCredStoreToken = v
}
  return nil
}

func (p *AiravataGetSSHPubKeyArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *AiravataGetSSHPubKeyArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSSHPubKey_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetSSHPubKeyArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetSSHPubKeyArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("airavataCredStoreToken", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:airavataCredStoreToken: ", p), err) }
  if err := oprot.WriteString(string(p.AiravataCredStoreToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.airavataCredStoreToken (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:airavataCredStoreToken: ", p), err) }
  return err
}

func (p *AiravataGetSSHPubKeyArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gatewayId: ", p), err) }
  return err
}

func (p *AiravataGetSSHPubKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetSSHPubKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
type AiravataGetSSHPubKeyResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
}

func NewAiravataGetSSHPubKeyResult() *AiravataGetSSHPubKeyResult {
  return &AiravataGetSSHPubKeyResult{}
}

var AiravataGetSSHPubKeyResult_Success_DEFAULT string
func (p *AiravataGetSSHPubKeyResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return AiravataGetSSHPubKeyResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataGetSSHPubKeyResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetSSHPubKeyResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetSSHPubKeyResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetSSHPubKeyResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetSSHPubKeyResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetSSHPubKeyResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetSSHPubKeyResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetSSHPubKeyResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetSSHPubKeyResult_Ase_DEFAULT
  }
return p.Ase
}
func (p *AiravataGetSSHPubKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetSSHPubKeyResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetSSHPubKeyResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetSSHPubKeyResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetSSHPubKeyResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetSSHPubKeyResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataGetSSHPubKeyResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetSSHPubKeyResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetSSHPubKeyResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetSSHPubKeyResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSSHPubKey_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetSSHPubKeyResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetSSHPubKeyResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetSSHPubKeyResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetSSHPubKeyResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetSSHPubKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetSSHPubKeyResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GatewayId
type AiravataGetAllGatewaySSHPubKeysArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GatewayId string `thrift:"gatewayId,2,required" db:"gatewayId" json:"gatewayId"`
}

func NewAiravataGetAllGatewaySSHPubKeysArgs() *AiravataGetAllGatewaySSHPubKeysArgs {
  return &AiravataGetAllGatewaySSHPubKeysArgs{}
}

var AiravataGetAllGatewaySSHPubKeysArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetAllGatewaySSHPubKeysArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetAllGatewaySSHPubKeysArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetAllGatewaySSHPubKeysArgs) GetGatewayId() string {
  return p.GatewayId
}
func (p *AiravataGetAllGatewaySSHPubKeysArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetAllGatewaySSHPubKeysArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGatewayId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  return nil
}

func (p *AiravataGetAllGatewaySSHPubKeysArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetAllGatewaySSHPubKeysArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *AiravataGetAllGatewaySSHPubKeysArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllGatewaySSHPubKeys_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAllGatewaySSHPubKeysArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetAllGatewaySSHPubKeysArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayId: ", p), err) }
  return err
}

func (p *AiravataGetAllGatewaySSHPubKeysArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAllGatewaySSHPubKeysArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
type AiravataGetAllGatewaySSHPubKeysResult struct {
  Success map[string]string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
}

func NewAiravataGetAllGatewaySSHPubKeysResult() *AiravataGetAllGatewaySSHPubKeysResult {
  return &AiravataGetAllGatewaySSHPubKeysResult{}
}

var AiravataGetAllGatewaySSHPubKeysResult_Success_DEFAULT map[string]string

func (p *AiravataGetAllGatewaySSHPubKeysResult) GetSuccess() map[string]string {
  return p.Success
}
var AiravataGetAllGatewaySSHPubKeysResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetAllGatewaySSHPubKeysResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetAllGatewaySSHPubKeysResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetAllGatewaySSHPubKeysResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetAllGatewaySSHPubKeysResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetAllGatewaySSHPubKeysResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetAllGatewaySSHPubKeysResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetAllGatewaySSHPubKeysResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetAllGatewaySSHPubKeysResult_Ase_DEFAULT
  }
return p.Ase
}
func (p *AiravataGetAllGatewaySSHPubKeysResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetAllGatewaySSHPubKeysResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetAllGatewaySSHPubKeysResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetAllGatewaySSHPubKeysResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetAllGatewaySSHPubKeysResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetAllGatewaySSHPubKeysResult)  ReadField0(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key343 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key343 = v
}
var _val344 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val344 = v
}
    p.Success[_key343] = _val344
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AiravataGetAllGatewaySSHPubKeysResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetAllGatewaySSHPubKeysResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetAllGatewaySSHPubKeysResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetAllGatewaySSHPubKeysResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllGatewaySSHPubKeys_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAllGatewaySSHPubKeysResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllGatewaySSHPubKeysResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllGatewaySSHPubKeysResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllGatewaySSHPubKeysResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllGatewaySSHPubKeysResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAllGatewaySSHPubKeysResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - Type
//  - GatewayId
type AiravataGetAllCredentialSummaryForGatewayArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  Type credential_store_data_models.SummaryType `thrift:"type,2,required" db:"type" json:"type"`
  GatewayId string `thrift:"gatewayId,3,required" db:"gatewayId" json:"gatewayId"`
}

func NewAiravataGetAllCredentialSummaryForGatewayArgs() *AiravataGetAllCredentialSummaryForGatewayArgs {
  return &AiravataGetAllCredentialSummaryForGatewayArgs{}
}

var AiravataGetAllCredentialSummaryForGatewayArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetAllCredentialSummaryForGatewayArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetAllCredentialSummaryForGatewayArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetAllCredentialSummaryForGatewayArgs) GetType() credential_store_data_models.SummaryType {
  return p.Type
}

func (p *AiravataGetAllCredentialSummaryForGatewayArgs) GetGatewayId() string {
  return p.GatewayId
}
func (p *AiravataGetAllCredentialSummaryForGatewayArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetAllCredentialSummaryForGatewayArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetType bool = false;
  var issetGatewayId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetType = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  return nil
}

func (p *AiravataGetAllCredentialSummaryForGatewayArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetAllCredentialSummaryForGatewayArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := credential_store_data_models.SummaryType(v)
  p.Type = temp
}
  return nil
}

func (p *AiravataGetAllCredentialSummaryForGatewayArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *AiravataGetAllCredentialSummaryForGatewayArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllCredentialSummaryForGateway_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAllCredentialSummaryForGatewayArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetAllCredentialSummaryForGatewayArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *AiravataGetAllCredentialSummaryForGatewayArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gatewayId: ", p), err) }
  return err
}

func (p *AiravataGetAllCredentialSummaryForGatewayArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAllCredentialSummaryForGatewayArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
type AiravataGetAllCredentialSummaryForGatewayResult struct {
  Success []*credential_store_data_models.CredentialSummary `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
}

func NewAiravataGetAllCredentialSummaryForGatewayResult() *AiravataGetAllCredentialSummaryForGatewayResult {
  return &AiravataGetAllCredentialSummaryForGatewayResult{}
}

var AiravataGetAllCredentialSummaryForGatewayResult_Success_DEFAULT []*credential_store_data_models.CredentialSummary

func (p *AiravataGetAllCredentialSummaryForGatewayResult) GetSuccess() []*credential_store_data_models.CredentialSummary {
  return p.Success
}
var AiravataGetAllCredentialSummaryForGatewayResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetAllCredentialSummaryForGatewayResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetAllCredentialSummaryForGatewayResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetAllCredentialSummaryForGatewayResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetAllCredentialSummaryForGatewayResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetAllCredentialSummaryForGatewayResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetAllCredentialSummaryForGatewayResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetAllCredentialSummaryForGatewayResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetAllCredentialSummaryForGatewayResult_Ase_DEFAULT
  }
return p.Ase
}
func (p *AiravataGetAllCredentialSummaryForGatewayResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetAllCredentialSummaryForGatewayResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetAllCredentialSummaryForGatewayResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetAllCredentialSummaryForGatewayResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetAllCredentialSummaryForGatewayResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetAllCredentialSummaryForGatewayResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*credential_store_data_models.CredentialSummary, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem345 := &credential_store_data_models.CredentialSummary{}
    if err := _elem345.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem345), err)
    }
    p.Success = append(p.Success, _elem345)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AiravataGetAllCredentialSummaryForGatewayResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetAllCredentialSummaryForGatewayResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetAllCredentialSummaryForGatewayResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetAllCredentialSummaryForGatewayResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllCredentialSummaryForGateway_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAllCredentialSummaryForGatewayResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllCredentialSummaryForGatewayResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllCredentialSummaryForGatewayResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllCredentialSummaryForGatewayResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllCredentialSummaryForGatewayResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAllCredentialSummaryForGatewayResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - Type
//  - GatewayId
//  - UserId
type AiravataGetAllCredentialSummaryForUsersInGatewayArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  Type credential_store_data_models.SummaryType `thrift:"type,2,required" db:"type" json:"type"`
  GatewayId string `thrift:"gatewayId,3,required" db:"gatewayId" json:"gatewayId"`
  UserId string `thrift:"userId,4,required" db:"userId" json:"userId"`
}

func NewAiravataGetAllCredentialSummaryForUsersInGatewayArgs() *AiravataGetAllCredentialSummaryForUsersInGatewayArgs {
  return &AiravataGetAllCredentialSummaryForUsersInGatewayArgs{}
}

var AiravataGetAllCredentialSummaryForUsersInGatewayArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetAllCredentialSummaryForUsersInGatewayArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetAllCredentialSummaryForUsersInGatewayArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetAllCredentialSummaryForUsersInGatewayArgs) GetType() credential_store_data_models.SummaryType {
  return p.Type
}

func (p *AiravataGetAllCredentialSummaryForUsersInGatewayArgs) GetGatewayId() string {
  return p.GatewayId
}

func (p *AiravataGetAllCredentialSummaryForUsersInGatewayArgs) GetUserId() string {
  return p.UserId
}
func (p *AiravataGetAllCredentialSummaryForUsersInGatewayArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetAllCredentialSummaryForUsersInGatewayArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetType bool = false;
  var issetGatewayId bool = false;
  var issetUserId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetType = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  if !issetUserId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserId is not set"));
  }
  return nil
}

func (p *AiravataGetAllCredentialSummaryForUsersInGatewayArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetAllCredentialSummaryForUsersInGatewayArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := credential_store_data_models.SummaryType(v)
  p.Type = temp
}
  return nil
}

func (p *AiravataGetAllCredentialSummaryForUsersInGatewayArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *AiravataGetAllCredentialSummaryForUsersInGatewayArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *AiravataGetAllCredentialSummaryForUsersInGatewayArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllCredentialSummaryForUsersInGateway_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAllCredentialSummaryForUsersInGatewayArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetAllCredentialSummaryForUsersInGatewayArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *AiravataGetAllCredentialSummaryForUsersInGatewayArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gatewayId: ", p), err) }
  return err
}

func (p *AiravataGetAllCredentialSummaryForUsersInGatewayArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:userId: ", p), err) }
  if err := oprot.WriteString(string(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:userId: ", p), err) }
  return err
}

func (p *AiravataGetAllCredentialSummaryForUsersInGatewayArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAllCredentialSummaryForUsersInGatewayArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
type AiravataGetAllCredentialSummaryForUsersInGatewayResult struct {
  Success []*credential_store_data_models.CredentialSummary `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
}

func NewAiravataGetAllCredentialSummaryForUsersInGatewayResult() *AiravataGetAllCredentialSummaryForUsersInGatewayResult {
  return &AiravataGetAllCredentialSummaryForUsersInGatewayResult{}
}

var AiravataGetAllCredentialSummaryForUsersInGatewayResult_Success_DEFAULT []*credential_store_data_models.CredentialSummary

func (p *AiravataGetAllCredentialSummaryForUsersInGatewayResult) GetSuccess() []*credential_store_data_models.CredentialSummary {
  return p.Success
}
var AiravataGetAllCredentialSummaryForUsersInGatewayResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetAllCredentialSummaryForUsersInGatewayResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetAllCredentialSummaryForUsersInGatewayResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetAllCredentialSummaryForUsersInGatewayResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetAllCredentialSummaryForUsersInGatewayResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetAllCredentialSummaryForUsersInGatewayResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetAllCredentialSummaryForUsersInGatewayResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetAllCredentialSummaryForUsersInGatewayResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetAllCredentialSummaryForUsersInGatewayResult_Ase_DEFAULT
  }
return p.Ase
}
func (p *AiravataGetAllCredentialSummaryForUsersInGatewayResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetAllCredentialSummaryForUsersInGatewayResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetAllCredentialSummaryForUsersInGatewayResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetAllCredentialSummaryForUsersInGatewayResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetAllCredentialSummaryForUsersInGatewayResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetAllCredentialSummaryForUsersInGatewayResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*credential_store_data_models.CredentialSummary, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem346 := &credential_store_data_models.CredentialSummary{}
    if err := _elem346.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem346), err)
    }
    p.Success = append(p.Success, _elem346)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AiravataGetAllCredentialSummaryForUsersInGatewayResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetAllCredentialSummaryForUsersInGatewayResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetAllCredentialSummaryForUsersInGatewayResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetAllCredentialSummaryForUsersInGatewayResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllCredentialSummaryForUsersInGateway_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAllCredentialSummaryForUsersInGatewayResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllCredentialSummaryForUsersInGatewayResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllCredentialSummaryForUsersInGatewayResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllCredentialSummaryForUsersInGatewayResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllCredentialSummaryForUsersInGatewayResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAllCredentialSummaryForUsersInGatewayResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GatewayId
type AiravataGetAllGatewayPWDCredentialsArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GatewayId string `thrift:"gatewayId,2,required" db:"gatewayId" json:"gatewayId"`
}

func NewAiravataGetAllGatewayPWDCredentialsArgs() *AiravataGetAllGatewayPWDCredentialsArgs {
  return &AiravataGetAllGatewayPWDCredentialsArgs{}
}

var AiravataGetAllGatewayPWDCredentialsArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetAllGatewayPWDCredentialsArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetAllGatewayPWDCredentialsArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetAllGatewayPWDCredentialsArgs) GetGatewayId() string {
  return p.GatewayId
}
func (p *AiravataGetAllGatewayPWDCredentialsArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetAllGatewayPWDCredentialsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGatewayId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  return nil
}

func (p *AiravataGetAllGatewayPWDCredentialsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetAllGatewayPWDCredentialsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *AiravataGetAllGatewayPWDCredentialsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllGatewayPWDCredentials_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAllGatewayPWDCredentialsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetAllGatewayPWDCredentialsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayId: ", p), err) }
  return err
}

func (p *AiravataGetAllGatewayPWDCredentialsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAllGatewayPWDCredentialsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
type AiravataGetAllGatewayPWDCredentialsResult struct {
  Success map[string]string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
}

func NewAiravataGetAllGatewayPWDCredentialsResult() *AiravataGetAllGatewayPWDCredentialsResult {
  return &AiravataGetAllGatewayPWDCredentialsResult{}
}

var AiravataGetAllGatewayPWDCredentialsResult_Success_DEFAULT map[string]string

func (p *AiravataGetAllGatewayPWDCredentialsResult) GetSuccess() map[string]string {
  return p.Success
}
var AiravataGetAllGatewayPWDCredentialsResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetAllGatewayPWDCredentialsResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetAllGatewayPWDCredentialsResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetAllGatewayPWDCredentialsResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetAllGatewayPWDCredentialsResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetAllGatewayPWDCredentialsResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetAllGatewayPWDCredentialsResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetAllGatewayPWDCredentialsResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetAllGatewayPWDCredentialsResult_Ase_DEFAULT
  }
return p.Ase
}
func (p *AiravataGetAllGatewayPWDCredentialsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetAllGatewayPWDCredentialsResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetAllGatewayPWDCredentialsResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetAllGatewayPWDCredentialsResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetAllGatewayPWDCredentialsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetAllGatewayPWDCredentialsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key347 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key347 = v
}
var _val348 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val348 = v
}
    p.Success[_key347] = _val348
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AiravataGetAllGatewayPWDCredentialsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetAllGatewayPWDCredentialsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetAllGatewayPWDCredentialsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetAllGatewayPWDCredentialsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllGatewayPWDCredentials_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAllGatewayPWDCredentialsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllGatewayPWDCredentialsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllGatewayPWDCredentialsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllGatewayPWDCredentialsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllGatewayPWDCredentialsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAllGatewayPWDCredentialsResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - AiravataCredStoreToken
//  - GatewayId
type AiravataDeleteSSHPubKeyArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  AiravataCredStoreToken string `thrift:"airavataCredStoreToken,2,required" db:"airavataCredStoreToken" json:"airavataCredStoreToken"`
  GatewayId string `thrift:"gatewayId,3,required" db:"gatewayId" json:"gatewayId"`
}

func NewAiravataDeleteSSHPubKeyArgs() *AiravataDeleteSSHPubKeyArgs {
  return &AiravataDeleteSSHPubKeyArgs{}
}

var AiravataDeleteSSHPubKeyArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataDeleteSSHPubKeyArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataDeleteSSHPubKeyArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataDeleteSSHPubKeyArgs) GetAiravataCredStoreToken() string {
  return p.AiravataCredStoreToken
}

func (p *AiravataDeleteSSHPubKeyArgs) GetGatewayId() string {
  return p.GatewayId
}
func (p *AiravataDeleteSSHPubKeyArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataDeleteSSHPubKeyArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetAiravataCredStoreToken bool = false;
  var issetGatewayId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAiravataCredStoreToken = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetAiravataCredStoreToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AiravataCredStoreToken is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  return nil
}

func (p *AiravataDeleteSSHPubKeyArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataDeleteSSHPubKeyArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AiravataCredStoreToken = v
}
  return nil
}

func (p *AiravataDeleteSSHPubKeyArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *AiravataDeleteSSHPubKeyArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteSSHPubKey_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeleteSSHPubKeyArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataDeleteSSHPubKeyArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("airavataCredStoreToken", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:airavataCredStoreToken: ", p), err) }
  if err := oprot.WriteString(string(p.AiravataCredStoreToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.airavataCredStoreToken (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:airavataCredStoreToken: ", p), err) }
  return err
}

func (p *AiravataDeleteSSHPubKeyArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gatewayId: ", p), err) }
  return err
}

func (p *AiravataDeleteSSHPubKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeleteSSHPubKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
type AiravataDeleteSSHPubKeyResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
}

func NewAiravataDeleteSSHPubKeyResult() *AiravataDeleteSSHPubKeyResult {
  return &AiravataDeleteSSHPubKeyResult{}
}

var AiravataDeleteSSHPubKeyResult_Success_DEFAULT bool
func (p *AiravataDeleteSSHPubKeyResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataDeleteSSHPubKeyResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataDeleteSSHPubKeyResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataDeleteSSHPubKeyResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataDeleteSSHPubKeyResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataDeleteSSHPubKeyResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataDeleteSSHPubKeyResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataDeleteSSHPubKeyResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataDeleteSSHPubKeyResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataDeleteSSHPubKeyResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataDeleteSSHPubKeyResult_Ase_DEFAULT
  }
return p.Ase
}
func (p *AiravataDeleteSSHPubKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataDeleteSSHPubKeyResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataDeleteSSHPubKeyResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataDeleteSSHPubKeyResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataDeleteSSHPubKeyResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataDeleteSSHPubKeyResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataDeleteSSHPubKeyResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataDeleteSSHPubKeyResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataDeleteSSHPubKeyResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataDeleteSSHPubKeyResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteSSHPubKey_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeleteSSHPubKeyResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteSSHPubKeyResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteSSHPubKeyResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteSSHPubKeyResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteSSHPubKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeleteSSHPubKeyResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - AiravataCredStoreToken
//  - GatewayId
type AiravataDeletePWDCredentialArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  AiravataCredStoreToken string `thrift:"airavataCredStoreToken,2,required" db:"airavataCredStoreToken" json:"airavataCredStoreToken"`
  GatewayId string `thrift:"gatewayId,3,required" db:"gatewayId" json:"gatewayId"`
}

func NewAiravataDeletePWDCredentialArgs() *AiravataDeletePWDCredentialArgs {
  return &AiravataDeletePWDCredentialArgs{}
}

var AiravataDeletePWDCredentialArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataDeletePWDCredentialArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataDeletePWDCredentialArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataDeletePWDCredentialArgs) GetAiravataCredStoreToken() string {
  return p.AiravataCredStoreToken
}

func (p *AiravataDeletePWDCredentialArgs) GetGatewayId() string {
  return p.GatewayId
}
func (p *AiravataDeletePWDCredentialArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataDeletePWDCredentialArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetAiravataCredStoreToken bool = false;
  var issetGatewayId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAiravataCredStoreToken = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetAiravataCredStoreToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AiravataCredStoreToken is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  return nil
}

func (p *AiravataDeletePWDCredentialArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataDeletePWDCredentialArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AiravataCredStoreToken = v
}
  return nil
}

func (p *AiravataDeletePWDCredentialArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *AiravataDeletePWDCredentialArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deletePWDCredential_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeletePWDCredentialArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataDeletePWDCredentialArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("airavataCredStoreToken", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:airavataCredStoreToken: ", p), err) }
  if err := oprot.WriteString(string(p.AiravataCredStoreToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.airavataCredStoreToken (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:airavataCredStoreToken: ", p), err) }
  return err
}

func (p *AiravataDeletePWDCredentialArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gatewayId: ", p), err) }
  return err
}

func (p *AiravataDeletePWDCredentialArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeletePWDCredentialArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
type AiravataDeletePWDCredentialResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
}

func NewAiravataDeletePWDCredentialResult() *AiravataDeletePWDCredentialResult {
  return &AiravataDeletePWDCredentialResult{}
}

var AiravataDeletePWDCredentialResult_Success_DEFAULT bool
func (p *AiravataDeletePWDCredentialResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataDeletePWDCredentialResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataDeletePWDCredentialResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataDeletePWDCredentialResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataDeletePWDCredentialResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataDeletePWDCredentialResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataDeletePWDCredentialResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataDeletePWDCredentialResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataDeletePWDCredentialResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataDeletePWDCredentialResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataDeletePWDCredentialResult_Ase_DEFAULT
  }
return p.Ase
}
func (p *AiravataDeletePWDCredentialResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataDeletePWDCredentialResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataDeletePWDCredentialResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataDeletePWDCredentialResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataDeletePWDCredentialResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataDeletePWDCredentialResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataDeletePWDCredentialResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataDeletePWDCredentialResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataDeletePWDCredentialResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataDeletePWDCredentialResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deletePWDCredential_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeletePWDCredentialResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataDeletePWDCredentialResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataDeletePWDCredentialResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataDeletePWDCredentialResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataDeletePWDCredentialResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeletePWDCredentialResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GatewayId
//  - Project
type AiravataCreateProjectArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GatewayId string `thrift:"gatewayId,2,required" db:"gatewayId" json:"gatewayId"`
  Project *workspace_model.Project `thrift:"project,3,required" db:"project" json:"project"`
}

func NewAiravataCreateProjectArgs() *AiravataCreateProjectArgs {
  return &AiravataCreateProjectArgs{}
}

var AiravataCreateProjectArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataCreateProjectArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataCreateProjectArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataCreateProjectArgs) GetGatewayId() string {
  return p.GatewayId
}
var AiravataCreateProjectArgs_Project_DEFAULT *workspace_model.Project
func (p *AiravataCreateProjectArgs) GetProject() *workspace_model.Project {
  if !p.IsSetProject() {
    return AiravataCreateProjectArgs_Project_DEFAULT
  }
return p.Project
}
func (p *AiravataCreateProjectArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataCreateProjectArgs) IsSetProject() bool {
  return p.Project != nil
}

func (p *AiravataCreateProjectArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGatewayId bool = false;
  var issetProject bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProject = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  if !issetProject{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Project is not set"));
  }
  return nil
}

func (p *AiravataCreateProjectArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataCreateProjectArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *AiravataCreateProjectArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.Project = &workspace_model.Project{
  ProjectID: "DO_NOT_SET_AT_CLIENTS",
}
  if err := p.Project.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Project), err)
  }
  return nil
}

func (p *AiravataCreateProjectArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createProject_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataCreateProjectArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataCreateProjectArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayId: ", p), err) }
  return err
}

func (p *AiravataCreateProjectArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("project", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:project: ", p), err) }
  if err := p.Project.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Project), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:project: ", p), err) }
  return err
}

func (p *AiravataCreateProjectArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataCreateProjectArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataCreateProjectResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataCreateProjectResult() *AiravataCreateProjectResult {
  return &AiravataCreateProjectResult{}
}

var AiravataCreateProjectResult_Success_DEFAULT string
func (p *AiravataCreateProjectResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return AiravataCreateProjectResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataCreateProjectResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataCreateProjectResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataCreateProjectResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataCreateProjectResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataCreateProjectResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataCreateProjectResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataCreateProjectResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataCreateProjectResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataCreateProjectResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataCreateProjectResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataCreateProjectResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataCreateProjectResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataCreateProjectResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataCreateProjectResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataCreateProjectResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataCreateProjectResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataCreateProjectResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataCreateProjectResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataCreateProjectResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataCreateProjectResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataCreateProjectResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataCreateProjectResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataCreateProjectResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataCreateProjectResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createProject_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataCreateProjectResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataCreateProjectResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataCreateProjectResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataCreateProjectResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataCreateProjectResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataCreateProjectResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataCreateProjectResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - ProjectId
//  - UpdatedProject
type AiravataUpdateProjectArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  ProjectId string `thrift:"projectId,2,required" db:"projectId" json:"projectId"`
  UpdatedProject *workspace_model.Project `thrift:"updatedProject,3,required" db:"updatedProject" json:"updatedProject"`
}

func NewAiravataUpdateProjectArgs() *AiravataUpdateProjectArgs {
  return &AiravataUpdateProjectArgs{}
}

var AiravataUpdateProjectArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataUpdateProjectArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataUpdateProjectArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataUpdateProjectArgs) GetProjectId() string {
  return p.ProjectId
}
var AiravataUpdateProjectArgs_UpdatedProject_DEFAULT *workspace_model.Project
func (p *AiravataUpdateProjectArgs) GetUpdatedProject() *workspace_model.Project {
  if !p.IsSetUpdatedProject() {
    return AiravataUpdateProjectArgs_UpdatedProject_DEFAULT
  }
return p.UpdatedProject
}
func (p *AiravataUpdateProjectArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataUpdateProjectArgs) IsSetUpdatedProject() bool {
  return p.UpdatedProject != nil
}

func (p *AiravataUpdateProjectArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetProjectId bool = false;
  var issetUpdatedProject bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProjectId = true
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUpdatedProject = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetProjectId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProjectId is not set"));
  }
  if !issetUpdatedProject{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UpdatedProject is not set"));
  }
  return nil
}

func (p *AiravataUpdateProjectArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataUpdateProjectArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ProjectId = v
}
  return nil
}

func (p *AiravataUpdateProjectArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.UpdatedProject = &workspace_model.Project{
  ProjectID: "DO_NOT_SET_AT_CLIENTS",
}
  if err := p.UpdatedProject.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UpdatedProject), err)
  }
  return nil
}

func (p *AiravataUpdateProjectArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateProject_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateProjectArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataUpdateProjectArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("projectId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:projectId: ", p), err) }
  if err := oprot.WriteString(string(p.ProjectId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.projectId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:projectId: ", p), err) }
  return err
}

func (p *AiravataUpdateProjectArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updatedProject", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:updatedProject: ", p), err) }
  if err := p.UpdatedProject.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UpdatedProject), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:updatedProject: ", p), err) }
  return err
}

func (p *AiravataUpdateProjectArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateProjectArgs(%+v)", *p)
}

// Attributes:
//  - Ire
//  - Ace
//  - Ase
//  - Pnfe
//  - Ae
type AiravataUpdateProjectResult struct {
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Pnfe *airavata_errors.ProjectNotFoundException `thrift:"pnfe,4" db:"pnfe" json:"pnfe,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,5" db:"ae" json:"ae,omitempty"`
}

func NewAiravataUpdateProjectResult() *AiravataUpdateProjectResult {
  return &AiravataUpdateProjectResult{}
}

var AiravataUpdateProjectResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataUpdateProjectResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataUpdateProjectResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataUpdateProjectResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataUpdateProjectResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataUpdateProjectResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataUpdateProjectResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataUpdateProjectResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataUpdateProjectResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataUpdateProjectResult_Pnfe_DEFAULT *airavata_errors.ProjectNotFoundException
func (p *AiravataUpdateProjectResult) GetPnfe() *airavata_errors.ProjectNotFoundException {
  if !p.IsSetPnfe() {
    return AiravataUpdateProjectResult_Pnfe_DEFAULT
  }
return p.Pnfe
}
var AiravataUpdateProjectResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataUpdateProjectResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataUpdateProjectResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataUpdateProjectResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataUpdateProjectResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataUpdateProjectResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataUpdateProjectResult) IsSetPnfe() bool {
  return p.Pnfe != nil
}

func (p *AiravataUpdateProjectResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataUpdateProjectResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataUpdateProjectResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataUpdateProjectResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataUpdateProjectResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataUpdateProjectResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Pnfe = &airavata_errors.ProjectNotFoundException{}
  if err := p.Pnfe.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Pnfe), err)
  }
  return nil
}

func (p *AiravataUpdateProjectResult)  ReadField5(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataUpdateProjectResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateProject_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateProjectResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateProjectResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateProjectResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateProjectResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetPnfe() {
    if err := oprot.WriteFieldBegin("pnfe", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:pnfe: ", p), err) }
    if err := p.Pnfe.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Pnfe), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:pnfe: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateProjectResult) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ae: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateProjectResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateProjectResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - ProjectId
type AiravataGetProjectArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  ProjectId string `thrift:"projectId,2,required" db:"projectId" json:"projectId"`
}

func NewAiravataGetProjectArgs() *AiravataGetProjectArgs {
  return &AiravataGetProjectArgs{}
}

var AiravataGetProjectArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetProjectArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetProjectArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetProjectArgs) GetProjectId() string {
  return p.ProjectId
}
func (p *AiravataGetProjectArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetProjectArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetProjectId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProjectId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetProjectId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProjectId is not set"));
  }
  return nil
}

func (p *AiravataGetProjectArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetProjectArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ProjectId = v
}
  return nil
}

func (p *AiravataGetProjectArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getProject_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetProjectArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetProjectArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("projectId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:projectId: ", p), err) }
  if err := oprot.WriteString(string(p.ProjectId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.projectId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:projectId: ", p), err) }
  return err
}

func (p *AiravataGetProjectArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetProjectArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Pnfe
//  - Ae
type AiravataGetProjectResult struct {
  Success *workspace_model.Project `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Pnfe *airavata_errors.ProjectNotFoundException `thrift:"pnfe,4" db:"pnfe" json:"pnfe,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,5" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetProjectResult() *AiravataGetProjectResult {
  return &AiravataGetProjectResult{}
}

var AiravataGetProjectResult_Success_DEFAULT *workspace_model.Project
func (p *AiravataGetProjectResult) GetSuccess() *workspace_model.Project {
  if !p.IsSetSuccess() {
    return AiravataGetProjectResult_Success_DEFAULT
  }
return p.Success
}
var AiravataGetProjectResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetProjectResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetProjectResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetProjectResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetProjectResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetProjectResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetProjectResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetProjectResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetProjectResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetProjectResult_Pnfe_DEFAULT *airavata_errors.ProjectNotFoundException
func (p *AiravataGetProjectResult) GetPnfe() *airavata_errors.ProjectNotFoundException {
  if !p.IsSetPnfe() {
    return AiravataGetProjectResult_Pnfe_DEFAULT
  }
return p.Pnfe
}
var AiravataGetProjectResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetProjectResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetProjectResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetProjectResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetProjectResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetProjectResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetProjectResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetProjectResult) IsSetPnfe() bool {
  return p.Pnfe != nil
}

func (p *AiravataGetProjectResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetProjectResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetProjectResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &workspace_model.Project{
  ProjectID: "DO_NOT_SET_AT_CLIENTS",
}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AiravataGetProjectResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetProjectResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetProjectResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetProjectResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Pnfe = &airavata_errors.ProjectNotFoundException{}
  if err := p.Pnfe.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Pnfe), err)
  }
  return nil
}

func (p *AiravataGetProjectResult)  ReadField5(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetProjectResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getProject_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetProjectResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetProjectResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetProjectResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetProjectResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetProjectResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetPnfe() {
    if err := oprot.WriteFieldBegin("pnfe", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:pnfe: ", p), err) }
    if err := p.Pnfe.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Pnfe), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:pnfe: ", p), err) }
  }
  return err
}

func (p *AiravataGetProjectResult) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetProjectResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetProjectResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - ProjectId
type AiravataDeleteProjectArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  ProjectId string `thrift:"projectId,2,required" db:"projectId" json:"projectId"`
}

func NewAiravataDeleteProjectArgs() *AiravataDeleteProjectArgs {
  return &AiravataDeleteProjectArgs{}
}

var AiravataDeleteProjectArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataDeleteProjectArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataDeleteProjectArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataDeleteProjectArgs) GetProjectId() string {
  return p.ProjectId
}
func (p *AiravataDeleteProjectArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataDeleteProjectArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetProjectId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProjectId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetProjectId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProjectId is not set"));
  }
  return nil
}

func (p *AiravataDeleteProjectArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataDeleteProjectArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ProjectId = v
}
  return nil
}

func (p *AiravataDeleteProjectArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteProject_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeleteProjectArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataDeleteProjectArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("projectId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:projectId: ", p), err) }
  if err := oprot.WriteString(string(p.ProjectId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.projectId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:projectId: ", p), err) }
  return err
}

func (p *AiravataDeleteProjectArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeleteProjectArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Pnfe
//  - Ae
type AiravataDeleteProjectResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Pnfe *airavata_errors.ProjectNotFoundException `thrift:"pnfe,4" db:"pnfe" json:"pnfe,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,5" db:"ae" json:"ae,omitempty"`
}

func NewAiravataDeleteProjectResult() *AiravataDeleteProjectResult {
  return &AiravataDeleteProjectResult{}
}

var AiravataDeleteProjectResult_Success_DEFAULT bool
func (p *AiravataDeleteProjectResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataDeleteProjectResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataDeleteProjectResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataDeleteProjectResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataDeleteProjectResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataDeleteProjectResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataDeleteProjectResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataDeleteProjectResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataDeleteProjectResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataDeleteProjectResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataDeleteProjectResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataDeleteProjectResult_Pnfe_DEFAULT *airavata_errors.ProjectNotFoundException
func (p *AiravataDeleteProjectResult) GetPnfe() *airavata_errors.ProjectNotFoundException {
  if !p.IsSetPnfe() {
    return AiravataDeleteProjectResult_Pnfe_DEFAULT
  }
return p.Pnfe
}
var AiravataDeleteProjectResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataDeleteProjectResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataDeleteProjectResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataDeleteProjectResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataDeleteProjectResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataDeleteProjectResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataDeleteProjectResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataDeleteProjectResult) IsSetPnfe() bool {
  return p.Pnfe != nil
}

func (p *AiravataDeleteProjectResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataDeleteProjectResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataDeleteProjectResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataDeleteProjectResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataDeleteProjectResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataDeleteProjectResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataDeleteProjectResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Pnfe = &airavata_errors.ProjectNotFoundException{}
  if err := p.Pnfe.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Pnfe), err)
  }
  return nil
}

func (p *AiravataDeleteProjectResult)  ReadField5(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataDeleteProjectResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteProject_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeleteProjectResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteProjectResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteProjectResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteProjectResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteProjectResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetPnfe() {
    if err := oprot.WriteFieldBegin("pnfe", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:pnfe: ", p), err) }
    if err := p.Pnfe.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Pnfe), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:pnfe: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteProjectResult) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ae: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteProjectResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeleteProjectResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GatewayId
//  - UserName
//  - Limit
//  - Offset
type AiravataGetUserProjectsArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GatewayId string `thrift:"gatewayId,2,required" db:"gatewayId" json:"gatewayId"`
  UserName string `thrift:"userName,3,required" db:"userName" json:"userName"`
  Limit int32 `thrift:"limit,4,required" db:"limit" json:"limit"`
  Offset int32 `thrift:"offset,5,required" db:"offset" json:"offset"`
}

func NewAiravataGetUserProjectsArgs() *AiravataGetUserProjectsArgs {
  return &AiravataGetUserProjectsArgs{}
}

var AiravataGetUserProjectsArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetUserProjectsArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetUserProjectsArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetUserProjectsArgs) GetGatewayId() string {
  return p.GatewayId
}

func (p *AiravataGetUserProjectsArgs) GetUserName() string {
  return p.UserName
}

func (p *AiravataGetUserProjectsArgs) GetLimit() int32 {
  return p.Limit
}

func (p *AiravataGetUserProjectsArgs) GetOffset() int32 {
  return p.Offset
}
func (p *AiravataGetUserProjectsArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetUserProjectsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGatewayId bool = false;
  var issetUserName bool = false;
  var issetLimit bool = false;
  var issetOffset bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserName = true
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetLimit = true
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetOffset = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  if !issetUserName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserName is not set"));
  }
  if !issetLimit{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Limit is not set"));
  }
  if !issetOffset{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Offset is not set"));
  }
  return nil
}

func (p *AiravataGetUserProjectsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetUserProjectsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *AiravataGetUserProjectsArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.UserName = v
}
  return nil
}

func (p *AiravataGetUserProjectsArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Limit = v
}
  return nil
}

func (p *AiravataGetUserProjectsArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Offset = v
}
  return nil
}

func (p *AiravataGetUserProjectsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUserProjects_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetUserProjectsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetUserProjectsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayId: ", p), err) }
  return err
}

func (p *AiravataGetUserProjectsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userName: ", p), err) }
  if err := oprot.WriteString(string(p.UserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userName: ", p), err) }
  return err
}

func (p *AiravataGetUserProjectsArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("limit", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:limit: ", p), err) }
  if err := oprot.WriteI32(int32(p.Limit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limit (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:limit: ", p), err) }
  return err
}

func (p *AiravataGetUserProjectsArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("offset", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:offset: ", p), err) }
  if err := oprot.WriteI32(int32(p.Offset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offset (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:offset: ", p), err) }
  return err
}

func (p *AiravataGetUserProjectsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetUserProjectsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetUserProjectsResult struct {
  Success []*workspace_model.Project `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetUserProjectsResult() *AiravataGetUserProjectsResult {
  return &AiravataGetUserProjectsResult{}
}

var AiravataGetUserProjectsResult_Success_DEFAULT []*workspace_model.Project

func (p *AiravataGetUserProjectsResult) GetSuccess() []*workspace_model.Project {
  return p.Success
}
var AiravataGetUserProjectsResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetUserProjectsResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetUserProjectsResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetUserProjectsResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetUserProjectsResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetUserProjectsResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetUserProjectsResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetUserProjectsResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetUserProjectsResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetUserProjectsResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetUserProjectsResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetUserProjectsResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetUserProjectsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetUserProjectsResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetUserProjectsResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetUserProjectsResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetUserProjectsResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetUserProjectsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetUserProjectsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*workspace_model.Project, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem349 := &workspace_model.Project{
    ProjectID: "DO_NOT_SET_AT_CLIENTS",
}
    if err := _elem349.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem349), err)
    }
    p.Success = append(p.Success, _elem349)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AiravataGetUserProjectsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetUserProjectsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetUserProjectsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetUserProjectsResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetUserProjectsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUserProjects_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetUserProjectsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetUserProjectsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetUserProjectsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetUserProjectsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetUserProjectsResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetUserProjectsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetUserProjectsResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GatewayId
//  - UserName
//  - Filters
//  - Limit
//  - Offset
type AiravataSearchProjectsArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GatewayId string `thrift:"gatewayId,2,required" db:"gatewayId" json:"gatewayId"`
  UserName string `thrift:"userName,3,required" db:"userName" json:"userName"`
  Filters map[experiment_model.ProjectSearchFields]string `thrift:"filters,4" db:"filters" json:"filters"`
  Limit int32 `thrift:"limit,5,required" db:"limit" json:"limit"`
  Offset int32 `thrift:"offset,6,required" db:"offset" json:"offset"`
}

func NewAiravataSearchProjectsArgs() *AiravataSearchProjectsArgs {
  return &AiravataSearchProjectsArgs{}
}

var AiravataSearchProjectsArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataSearchProjectsArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataSearchProjectsArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataSearchProjectsArgs) GetGatewayId() string {
  return p.GatewayId
}

func (p *AiravataSearchProjectsArgs) GetUserName() string {
  return p.UserName
}

func (p *AiravataSearchProjectsArgs) GetFilters() map[experiment_model.ProjectSearchFields]string {
  return p.Filters
}

func (p *AiravataSearchProjectsArgs) GetLimit() int32 {
  return p.Limit
}

func (p *AiravataSearchProjectsArgs) GetOffset() int32 {
  return p.Offset
}
func (p *AiravataSearchProjectsArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataSearchProjectsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGatewayId bool = false;
  var issetUserName bool = false;
  var issetLimit bool = false;
  var issetOffset bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserName = true
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetLimit = true
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetOffset = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  if !issetUserName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserName is not set"));
  }
  if !issetLimit{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Limit is not set"));
  }
  if !issetOffset{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Offset is not set"));
  }
  return nil
}

func (p *AiravataSearchProjectsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataSearchProjectsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *AiravataSearchProjectsArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.UserName = v
}
  return nil
}

func (p *AiravataSearchProjectsArgs)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[experiment_model.ProjectSearchFields]string, size)
  p.Filters =  tMap
  for i := 0; i < size; i ++ {
var _key350 experiment_model.ProjectSearchFields
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := experiment_model.ProjectSearchFields(v)
    _key350 = temp
}
var _val351 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val351 = v
}
    p.Filters[_key350] = _val351
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AiravataSearchProjectsArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Limit = v
}
  return nil
}

func (p *AiravataSearchProjectsArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Offset = v
}
  return nil
}

func (p *AiravataSearchProjectsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("searchProjects_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataSearchProjectsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataSearchProjectsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayId: ", p), err) }
  return err
}

func (p *AiravataSearchProjectsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userName: ", p), err) }
  if err := oprot.WriteString(string(p.UserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userName: ", p), err) }
  return err
}

func (p *AiravataSearchProjectsArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("filters", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:filters: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.STRING, len(p.Filters)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Filters {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:filters: ", p), err) }
  return err
}

func (p *AiravataSearchProjectsArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("limit", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:limit: ", p), err) }
  if err := oprot.WriteI32(int32(p.Limit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limit (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:limit: ", p), err) }
  return err
}

func (p *AiravataSearchProjectsArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("offset", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:offset: ", p), err) }
  if err := oprot.WriteI32(int32(p.Offset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offset (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:offset: ", p), err) }
  return err
}

func (p *AiravataSearchProjectsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataSearchProjectsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataSearchProjectsResult struct {
  Success []*workspace_model.Project `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataSearchProjectsResult() *AiravataSearchProjectsResult {
  return &AiravataSearchProjectsResult{}
}

var AiravataSearchProjectsResult_Success_DEFAULT []*workspace_model.Project

func (p *AiravataSearchProjectsResult) GetSuccess() []*workspace_model.Project {
  return p.Success
}
var AiravataSearchProjectsResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataSearchProjectsResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataSearchProjectsResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataSearchProjectsResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataSearchProjectsResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataSearchProjectsResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataSearchProjectsResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataSearchProjectsResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataSearchProjectsResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataSearchProjectsResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataSearchProjectsResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataSearchProjectsResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataSearchProjectsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataSearchProjectsResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataSearchProjectsResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataSearchProjectsResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataSearchProjectsResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataSearchProjectsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataSearchProjectsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*workspace_model.Project, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem352 := &workspace_model.Project{
    ProjectID: "DO_NOT_SET_AT_CLIENTS",
}
    if err := _elem352.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem352), err)
    }
    p.Success = append(p.Success, _elem352)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AiravataSearchProjectsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataSearchProjectsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataSearchProjectsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataSearchProjectsResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataSearchProjectsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("searchProjects_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataSearchProjectsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataSearchProjectsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataSearchProjectsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataSearchProjectsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataSearchProjectsResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataSearchProjectsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataSearchProjectsResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GatewayId
//  - UserName
//  - Filters
//  - Limit
//  - Offset
type AiravataSearchExperimentsArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GatewayId string `thrift:"gatewayId,2,required" db:"gatewayId" json:"gatewayId"`
  UserName string `thrift:"userName,3,required" db:"userName" json:"userName"`
  Filters map[experiment_model.ExperimentSearchFields]string `thrift:"filters,4" db:"filters" json:"filters"`
  Limit int32 `thrift:"limit,5,required" db:"limit" json:"limit"`
  Offset int32 `thrift:"offset,6,required" db:"offset" json:"offset"`
}

func NewAiravataSearchExperimentsArgs() *AiravataSearchExperimentsArgs {
  return &AiravataSearchExperimentsArgs{}
}

var AiravataSearchExperimentsArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataSearchExperimentsArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataSearchExperimentsArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataSearchExperimentsArgs) GetGatewayId() string {
  return p.GatewayId
}

func (p *AiravataSearchExperimentsArgs) GetUserName() string {
  return p.UserName
}

func (p *AiravataSearchExperimentsArgs) GetFilters() map[experiment_model.ExperimentSearchFields]string {
  return p.Filters
}

func (p *AiravataSearchExperimentsArgs) GetLimit() int32 {
  return p.Limit
}

func (p *AiravataSearchExperimentsArgs) GetOffset() int32 {
  return p.Offset
}
func (p *AiravataSearchExperimentsArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataSearchExperimentsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGatewayId bool = false;
  var issetUserName bool = false;
  var issetLimit bool = false;
  var issetOffset bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserName = true
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetLimit = true
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetOffset = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  if !issetUserName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserName is not set"));
  }
  if !issetLimit{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Limit is not set"));
  }
  if !issetOffset{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Offset is not set"));
  }
  return nil
}

func (p *AiravataSearchExperimentsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataSearchExperimentsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *AiravataSearchExperimentsArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.UserName = v
}
  return nil
}

func (p *AiravataSearchExperimentsArgs)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[experiment_model.ExperimentSearchFields]string, size)
  p.Filters =  tMap
  for i := 0; i < size; i ++ {
var _key353 experiment_model.ExperimentSearchFields
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := experiment_model.ExperimentSearchFields(v)
    _key353 = temp
}
var _val354 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val354 = v
}
    p.Filters[_key353] = _val354
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AiravataSearchExperimentsArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Limit = v
}
  return nil
}

func (p *AiravataSearchExperimentsArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Offset = v
}
  return nil
}

func (p *AiravataSearchExperimentsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("searchExperiments_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataSearchExperimentsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataSearchExperimentsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayId: ", p), err) }
  return err
}

func (p *AiravataSearchExperimentsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userName: ", p), err) }
  if err := oprot.WriteString(string(p.UserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userName: ", p), err) }
  return err
}

func (p *AiravataSearchExperimentsArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("filters", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:filters: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.STRING, len(p.Filters)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Filters {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:filters: ", p), err) }
  return err
}

func (p *AiravataSearchExperimentsArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("limit", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:limit: ", p), err) }
  if err := oprot.WriteI32(int32(p.Limit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limit (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:limit: ", p), err) }
  return err
}

func (p *AiravataSearchExperimentsArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("offset", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:offset: ", p), err) }
  if err := oprot.WriteI32(int32(p.Offset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offset (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:offset: ", p), err) }
  return err
}

func (p *AiravataSearchExperimentsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataSearchExperimentsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataSearchExperimentsResult struct {
  Success []*experiment_model.ExperimentSummaryModel `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataSearchExperimentsResult() *AiravataSearchExperimentsResult {
  return &AiravataSearchExperimentsResult{}
}

var AiravataSearchExperimentsResult_Success_DEFAULT []*experiment_model.ExperimentSummaryModel

func (p *AiravataSearchExperimentsResult) GetSuccess() []*experiment_model.ExperimentSummaryModel {
  return p.Success
}
var AiravataSearchExperimentsResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataSearchExperimentsResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataSearchExperimentsResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataSearchExperimentsResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataSearchExperimentsResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataSearchExperimentsResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataSearchExperimentsResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataSearchExperimentsResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataSearchExperimentsResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataSearchExperimentsResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataSearchExperimentsResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataSearchExperimentsResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataSearchExperimentsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataSearchExperimentsResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataSearchExperimentsResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataSearchExperimentsResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataSearchExperimentsResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataSearchExperimentsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataSearchExperimentsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*experiment_model.ExperimentSummaryModel, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem355 := &experiment_model.ExperimentSummaryModel{}
    if err := _elem355.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem355), err)
    }
    p.Success = append(p.Success, _elem355)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AiravataSearchExperimentsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataSearchExperimentsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataSearchExperimentsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataSearchExperimentsResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataSearchExperimentsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("searchExperiments_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataSearchExperimentsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataSearchExperimentsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataSearchExperimentsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataSearchExperimentsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataSearchExperimentsResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataSearchExperimentsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataSearchExperimentsResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GatewayId
//  - FromTime
//  - ToTime
//  - UserName
//  - ApplicationName
//  - ResourceHostName
type AiravataGetExperimentStatisticsArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GatewayId string `thrift:"gatewayId,2,required" db:"gatewayId" json:"gatewayId"`
  FromTime int64 `thrift:"fromTime,3,required" db:"fromTime" json:"fromTime"`
  ToTime int64 `thrift:"toTime,4,required" db:"toTime" json:"toTime"`
  UserName string `thrift:"userName,5" db:"userName" json:"userName"`
  ApplicationName string `thrift:"applicationName,6" db:"applicationName" json:"applicationName"`
  ResourceHostName string `thrift:"resourceHostName,7" db:"resourceHostName" json:"resourceHostName"`
}

func NewAiravataGetExperimentStatisticsArgs() *AiravataGetExperimentStatisticsArgs {
  return &AiravataGetExperimentStatisticsArgs{}
}

var AiravataGetExperimentStatisticsArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetExperimentStatisticsArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetExperimentStatisticsArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetExperimentStatisticsArgs) GetGatewayId() string {
  return p.GatewayId
}

func (p *AiravataGetExperimentStatisticsArgs) GetFromTime() int64 {
  return p.FromTime
}

func (p *AiravataGetExperimentStatisticsArgs) GetToTime() int64 {
  return p.ToTime
}

func (p *AiravataGetExperimentStatisticsArgs) GetUserName() string {
  return p.UserName
}

func (p *AiravataGetExperimentStatisticsArgs) GetApplicationName() string {
  return p.ApplicationName
}

func (p *AiravataGetExperimentStatisticsArgs) GetResourceHostName() string {
  return p.ResourceHostName
}
func (p *AiravataGetExperimentStatisticsArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetExperimentStatisticsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGatewayId bool = false;
  var issetFromTime bool = false;
  var issetToTime bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetFromTime = true
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetToTime = true
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  if !issetFromTime{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field FromTime is not set"));
  }
  if !issetToTime{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ToTime is not set"));
  }
  return nil
}

func (p *AiravataGetExperimentStatisticsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetExperimentStatisticsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *AiravataGetExperimentStatisticsArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.FromTime = v
}
  return nil
}

func (p *AiravataGetExperimentStatisticsArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ToTime = v
}
  return nil
}

func (p *AiravataGetExperimentStatisticsArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.UserName = v
}
  return nil
}

func (p *AiravataGetExperimentStatisticsArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ApplicationName = v
}
  return nil
}

func (p *AiravataGetExperimentStatisticsArgs)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.ResourceHostName = v
}
  return nil
}

func (p *AiravataGetExperimentStatisticsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getExperimentStatistics_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetExperimentStatisticsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetExperimentStatisticsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayId: ", p), err) }
  return err
}

func (p *AiravataGetExperimentStatisticsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fromTime", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:fromTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.FromTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromTime (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:fromTime: ", p), err) }
  return err
}

func (p *AiravataGetExperimentStatisticsArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("toTime", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:toTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.ToTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.toTime (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:toTime: ", p), err) }
  return err
}

func (p *AiravataGetExperimentStatisticsArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userName", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:userName: ", p), err) }
  if err := oprot.WriteString(string(p.UserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userName (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:userName: ", p), err) }
  return err
}

func (p *AiravataGetExperimentStatisticsArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("applicationName", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:applicationName: ", p), err) }
  if err := oprot.WriteString(string(p.ApplicationName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.applicationName (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:applicationName: ", p), err) }
  return err
}

func (p *AiravataGetExperimentStatisticsArgs) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resourceHostName", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:resourceHostName: ", p), err) }
  if err := oprot.WriteString(string(p.ResourceHostName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resourceHostName (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:resourceHostName: ", p), err) }
  return err
}

func (p *AiravataGetExperimentStatisticsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetExperimentStatisticsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetExperimentStatisticsResult struct {
  Success *experiment_model.ExperimentStatistics `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetExperimentStatisticsResult() *AiravataGetExperimentStatisticsResult {
  return &AiravataGetExperimentStatisticsResult{}
}

var AiravataGetExperimentStatisticsResult_Success_DEFAULT *experiment_model.ExperimentStatistics
func (p *AiravataGetExperimentStatisticsResult) GetSuccess() *experiment_model.ExperimentStatistics {
  if !p.IsSetSuccess() {
    return AiravataGetExperimentStatisticsResult_Success_DEFAULT
  }
return p.Success
}
var AiravataGetExperimentStatisticsResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetExperimentStatisticsResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetExperimentStatisticsResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetExperimentStatisticsResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetExperimentStatisticsResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetExperimentStatisticsResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetExperimentStatisticsResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetExperimentStatisticsResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetExperimentStatisticsResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetExperimentStatisticsResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetExperimentStatisticsResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetExperimentStatisticsResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetExperimentStatisticsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetExperimentStatisticsResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetExperimentStatisticsResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetExperimentStatisticsResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetExperimentStatisticsResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetExperimentStatisticsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetExperimentStatisticsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &experiment_model.ExperimentStatistics{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AiravataGetExperimentStatisticsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetExperimentStatisticsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetExperimentStatisticsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetExperimentStatisticsResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetExperimentStatisticsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getExperimentStatistics_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetExperimentStatisticsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetExperimentStatisticsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetExperimentStatisticsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetExperimentStatisticsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetExperimentStatisticsResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetExperimentStatisticsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetExperimentStatisticsResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - ProjectId
//  - Limit
//  - Offset
type AiravataGetExperimentsInProjectArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  ProjectId string `thrift:"projectId,2,required" db:"projectId" json:"projectId"`
  Limit int32 `thrift:"limit,3,required" db:"limit" json:"limit"`
  Offset int32 `thrift:"offset,4,required" db:"offset" json:"offset"`
}

func NewAiravataGetExperimentsInProjectArgs() *AiravataGetExperimentsInProjectArgs {
  return &AiravataGetExperimentsInProjectArgs{}
}

var AiravataGetExperimentsInProjectArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetExperimentsInProjectArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetExperimentsInProjectArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetExperimentsInProjectArgs) GetProjectId() string {
  return p.ProjectId
}

func (p *AiravataGetExperimentsInProjectArgs) GetLimit() int32 {
  return p.Limit
}

func (p *AiravataGetExperimentsInProjectArgs) GetOffset() int32 {
  return p.Offset
}
func (p *AiravataGetExperimentsInProjectArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetExperimentsInProjectArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetProjectId bool = false;
  var issetLimit bool = false;
  var issetOffset bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProjectId = true
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetLimit = true
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetOffset = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetProjectId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProjectId is not set"));
  }
  if !issetLimit{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Limit is not set"));
  }
  if !issetOffset{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Offset is not set"));
  }
  return nil
}

func (p *AiravataGetExperimentsInProjectArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetExperimentsInProjectArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ProjectId = v
}
  return nil
}

func (p *AiravataGetExperimentsInProjectArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Limit = v
}
  return nil
}

func (p *AiravataGetExperimentsInProjectArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Offset = v
}
  return nil
}

func (p *AiravataGetExperimentsInProjectArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getExperimentsInProject_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetExperimentsInProjectArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetExperimentsInProjectArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("projectId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:projectId: ", p), err) }
  if err := oprot.WriteString(string(p.ProjectId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.projectId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:projectId: ", p), err) }
  return err
}

func (p *AiravataGetExperimentsInProjectArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("limit", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:limit: ", p), err) }
  if err := oprot.WriteI32(int32(p.Limit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limit (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:limit: ", p), err) }
  return err
}

func (p *AiravataGetExperimentsInProjectArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("offset", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:offset: ", p), err) }
  if err := oprot.WriteI32(int32(p.Offset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offset (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:offset: ", p), err) }
  return err
}

func (p *AiravataGetExperimentsInProjectArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetExperimentsInProjectArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Pnfe
//  - Ae
type AiravataGetExperimentsInProjectResult struct {
  Success []*experiment_model.ExperimentModel `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Pnfe *airavata_errors.ProjectNotFoundException `thrift:"pnfe,4" db:"pnfe" json:"pnfe,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,5" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetExperimentsInProjectResult() *AiravataGetExperimentsInProjectResult {
  return &AiravataGetExperimentsInProjectResult{}
}

var AiravataGetExperimentsInProjectResult_Success_DEFAULT []*experiment_model.ExperimentModel

func (p *AiravataGetExperimentsInProjectResult) GetSuccess() []*experiment_model.ExperimentModel {
  return p.Success
}
var AiravataGetExperimentsInProjectResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetExperimentsInProjectResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetExperimentsInProjectResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetExperimentsInProjectResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetExperimentsInProjectResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetExperimentsInProjectResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetExperimentsInProjectResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetExperimentsInProjectResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetExperimentsInProjectResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetExperimentsInProjectResult_Pnfe_DEFAULT *airavata_errors.ProjectNotFoundException
func (p *AiravataGetExperimentsInProjectResult) GetPnfe() *airavata_errors.ProjectNotFoundException {
  if !p.IsSetPnfe() {
    return AiravataGetExperimentsInProjectResult_Pnfe_DEFAULT
  }
return p.Pnfe
}
var AiravataGetExperimentsInProjectResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetExperimentsInProjectResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetExperimentsInProjectResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetExperimentsInProjectResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetExperimentsInProjectResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetExperimentsInProjectResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetExperimentsInProjectResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetExperimentsInProjectResult) IsSetPnfe() bool {
  return p.Pnfe != nil
}

func (p *AiravataGetExperimentsInProjectResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetExperimentsInProjectResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetExperimentsInProjectResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*experiment_model.ExperimentModel, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem356 := &experiment_model.ExperimentModel{
    ExperimentId: "DO_NOT_SET_AT_CLIENTS",

    ExperimentType:     0,
}
    if err := _elem356.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem356), err)
    }
    p.Success = append(p.Success, _elem356)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AiravataGetExperimentsInProjectResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetExperimentsInProjectResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetExperimentsInProjectResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetExperimentsInProjectResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Pnfe = &airavata_errors.ProjectNotFoundException{}
  if err := p.Pnfe.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Pnfe), err)
  }
  return nil
}

func (p *AiravataGetExperimentsInProjectResult)  ReadField5(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetExperimentsInProjectResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getExperimentsInProject_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetExperimentsInProjectResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetExperimentsInProjectResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetExperimentsInProjectResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetExperimentsInProjectResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetExperimentsInProjectResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetPnfe() {
    if err := oprot.WriteFieldBegin("pnfe", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:pnfe: ", p), err) }
    if err := p.Pnfe.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Pnfe), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:pnfe: ", p), err) }
  }
  return err
}

func (p *AiravataGetExperimentsInProjectResult) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetExperimentsInProjectResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetExperimentsInProjectResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GatewayId
//  - UserName
//  - Limit
//  - Offset
type AiravataGetUserExperimentsArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GatewayId string `thrift:"gatewayId,2,required" db:"gatewayId" json:"gatewayId"`
  UserName string `thrift:"userName,3,required" db:"userName" json:"userName"`
  Limit int32 `thrift:"limit,4,required" db:"limit" json:"limit"`
  Offset int32 `thrift:"offset,5,required" db:"offset" json:"offset"`
}

func NewAiravataGetUserExperimentsArgs() *AiravataGetUserExperimentsArgs {
  return &AiravataGetUserExperimentsArgs{}
}

var AiravataGetUserExperimentsArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetUserExperimentsArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetUserExperimentsArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetUserExperimentsArgs) GetGatewayId() string {
  return p.GatewayId
}

func (p *AiravataGetUserExperimentsArgs) GetUserName() string {
  return p.UserName
}

func (p *AiravataGetUserExperimentsArgs) GetLimit() int32 {
  return p.Limit
}

func (p *AiravataGetUserExperimentsArgs) GetOffset() int32 {
  return p.Offset
}
func (p *AiravataGetUserExperimentsArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetUserExperimentsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGatewayId bool = false;
  var issetUserName bool = false;
  var issetLimit bool = false;
  var issetOffset bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserName = true
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetLimit = true
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetOffset = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  if !issetUserName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserName is not set"));
  }
  if !issetLimit{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Limit is not set"));
  }
  if !issetOffset{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Offset is not set"));
  }
  return nil
}

func (p *AiravataGetUserExperimentsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetUserExperimentsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *AiravataGetUserExperimentsArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.UserName = v
}
  return nil
}

func (p *AiravataGetUserExperimentsArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Limit = v
}
  return nil
}

func (p *AiravataGetUserExperimentsArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Offset = v
}
  return nil
}

func (p *AiravataGetUserExperimentsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUserExperiments_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetUserExperimentsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetUserExperimentsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayId: ", p), err) }
  return err
}

func (p *AiravataGetUserExperimentsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userName: ", p), err) }
  if err := oprot.WriteString(string(p.UserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userName: ", p), err) }
  return err
}

func (p *AiravataGetUserExperimentsArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("limit", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:limit: ", p), err) }
  if err := oprot.WriteI32(int32(p.Limit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limit (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:limit: ", p), err) }
  return err
}

func (p *AiravataGetUserExperimentsArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("offset", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:offset: ", p), err) }
  if err := oprot.WriteI32(int32(p.Offset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offset (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:offset: ", p), err) }
  return err
}

func (p *AiravataGetUserExperimentsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetUserExperimentsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetUserExperimentsResult struct {
  Success []*experiment_model.ExperimentModel `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetUserExperimentsResult() *AiravataGetUserExperimentsResult {
  return &AiravataGetUserExperimentsResult{}
}

var AiravataGetUserExperimentsResult_Success_DEFAULT []*experiment_model.ExperimentModel

func (p *AiravataGetUserExperimentsResult) GetSuccess() []*experiment_model.ExperimentModel {
  return p.Success
}
var AiravataGetUserExperimentsResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetUserExperimentsResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetUserExperimentsResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetUserExperimentsResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetUserExperimentsResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetUserExperimentsResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetUserExperimentsResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetUserExperimentsResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetUserExperimentsResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetUserExperimentsResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetUserExperimentsResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetUserExperimentsResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetUserExperimentsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetUserExperimentsResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetUserExperimentsResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetUserExperimentsResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetUserExperimentsResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetUserExperimentsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetUserExperimentsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*experiment_model.ExperimentModel, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem357 := &experiment_model.ExperimentModel{
    ExperimentId: "DO_NOT_SET_AT_CLIENTS",

    ExperimentType:     0,
}
    if err := _elem357.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem357), err)
    }
    p.Success = append(p.Success, _elem357)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AiravataGetUserExperimentsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetUserExperimentsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetUserExperimentsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetUserExperimentsResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetUserExperimentsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUserExperiments_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetUserExperimentsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetUserExperimentsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetUserExperimentsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetUserExperimentsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetUserExperimentsResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetUserExperimentsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetUserExperimentsResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GatewayId
//  - Experiment
type AiravataCreateExperimentArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GatewayId string `thrift:"gatewayId,2,required" db:"gatewayId" json:"gatewayId"`
  Experiment *experiment_model.ExperimentModel `thrift:"experiment,3,required" db:"experiment" json:"experiment"`
}

func NewAiravataCreateExperimentArgs() *AiravataCreateExperimentArgs {
  return &AiravataCreateExperimentArgs{}
}

var AiravataCreateExperimentArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataCreateExperimentArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataCreateExperimentArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataCreateExperimentArgs) GetGatewayId() string {
  return p.GatewayId
}
var AiravataCreateExperimentArgs_Experiment_DEFAULT *experiment_model.ExperimentModel
func (p *AiravataCreateExperimentArgs) GetExperiment() *experiment_model.ExperimentModel {
  if !p.IsSetExperiment() {
    return AiravataCreateExperimentArgs_Experiment_DEFAULT
  }
return p.Experiment
}
func (p *AiravataCreateExperimentArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataCreateExperimentArgs) IsSetExperiment() bool {
  return p.Experiment != nil
}

func (p *AiravataCreateExperimentArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGatewayId bool = false;
  var issetExperiment bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetExperiment = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  if !issetExperiment{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Experiment is not set"));
  }
  return nil
}

func (p *AiravataCreateExperimentArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataCreateExperimentArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *AiravataCreateExperimentArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.Experiment = &experiment_model.ExperimentModel{
  ExperimentId: "DO_NOT_SET_AT_CLIENTS",

  ExperimentType:   0,
}
  if err := p.Experiment.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Experiment), err)
  }
  return nil
}

func (p *AiravataCreateExperimentArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createExperiment_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataCreateExperimentArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataCreateExperimentArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayId: ", p), err) }
  return err
}

func (p *AiravataCreateExperimentArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("experiment", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:experiment: ", p), err) }
  if err := p.Experiment.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Experiment), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:experiment: ", p), err) }
  return err
}

func (p *AiravataCreateExperimentArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataCreateExperimentArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataCreateExperimentResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataCreateExperimentResult() *AiravataCreateExperimentResult {
  return &AiravataCreateExperimentResult{}
}

var AiravataCreateExperimentResult_Success_DEFAULT string
func (p *AiravataCreateExperimentResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return AiravataCreateExperimentResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataCreateExperimentResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataCreateExperimentResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataCreateExperimentResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataCreateExperimentResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataCreateExperimentResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataCreateExperimentResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataCreateExperimentResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataCreateExperimentResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataCreateExperimentResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataCreateExperimentResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataCreateExperimentResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataCreateExperimentResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataCreateExperimentResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataCreateExperimentResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataCreateExperimentResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataCreateExperimentResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataCreateExperimentResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataCreateExperimentResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataCreateExperimentResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataCreateExperimentResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataCreateExperimentResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataCreateExperimentResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataCreateExperimentResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataCreateExperimentResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createExperiment_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataCreateExperimentResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataCreateExperimentResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataCreateExperimentResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataCreateExperimentResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataCreateExperimentResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataCreateExperimentResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataCreateExperimentResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - ExperimentId
type AiravataDeleteExperimentArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  ExperimentId string `thrift:"experimentId,2,required" db:"experimentId" json:"experimentId"`
}

func NewAiravataDeleteExperimentArgs() *AiravataDeleteExperimentArgs {
  return &AiravataDeleteExperimentArgs{}
}

var AiravataDeleteExperimentArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataDeleteExperimentArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataDeleteExperimentArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataDeleteExperimentArgs) GetExperimentId() string {
  return p.ExperimentId
}
func (p *AiravataDeleteExperimentArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataDeleteExperimentArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetExperimentId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetExperimentId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetExperimentId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ExperimentId is not set"));
  }
  return nil
}

func (p *AiravataDeleteExperimentArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataDeleteExperimentArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ExperimentId = v
}
  return nil
}

func (p *AiravataDeleteExperimentArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteExperiment_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeleteExperimentArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataDeleteExperimentArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("experimentId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:experimentId: ", p), err) }
  if err := oprot.WriteString(string(p.ExperimentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.experimentId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:experimentId: ", p), err) }
  return err
}

func (p *AiravataDeleteExperimentArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeleteExperimentArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataDeleteExperimentResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataDeleteExperimentResult() *AiravataDeleteExperimentResult {
  return &AiravataDeleteExperimentResult{}
}

var AiravataDeleteExperimentResult_Success_DEFAULT bool
func (p *AiravataDeleteExperimentResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataDeleteExperimentResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataDeleteExperimentResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataDeleteExperimentResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataDeleteExperimentResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataDeleteExperimentResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataDeleteExperimentResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataDeleteExperimentResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataDeleteExperimentResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataDeleteExperimentResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataDeleteExperimentResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataDeleteExperimentResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataDeleteExperimentResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataDeleteExperimentResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataDeleteExperimentResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataDeleteExperimentResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataDeleteExperimentResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataDeleteExperimentResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataDeleteExperimentResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataDeleteExperimentResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataDeleteExperimentResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataDeleteExperimentResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataDeleteExperimentResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataDeleteExperimentResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataDeleteExperimentResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataDeleteExperimentResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteExperiment_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeleteExperimentResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteExperimentResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteExperimentResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteExperimentResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteExperimentResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteExperimentResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeleteExperimentResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - AiravataExperimentId
type AiravataGetExperimentArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  AiravataExperimentId string `thrift:"airavataExperimentId,2,required" db:"airavataExperimentId" json:"airavataExperimentId"`
}

func NewAiravataGetExperimentArgs() *AiravataGetExperimentArgs {
  return &AiravataGetExperimentArgs{}
}

var AiravataGetExperimentArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetExperimentArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetExperimentArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetExperimentArgs) GetAiravataExperimentId() string {
  return p.AiravataExperimentId
}
func (p *AiravataGetExperimentArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetExperimentArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetAiravataExperimentId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAiravataExperimentId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetAiravataExperimentId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AiravataExperimentId is not set"));
  }
  return nil
}

func (p *AiravataGetExperimentArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetExperimentArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AiravataExperimentId = v
}
  return nil
}

func (p *AiravataGetExperimentArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getExperiment_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetExperimentArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetExperimentArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("airavataExperimentId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:airavataExperimentId: ", p), err) }
  if err := oprot.WriteString(string(p.AiravataExperimentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.airavataExperimentId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:airavataExperimentId: ", p), err) }
  return err
}

func (p *AiravataGetExperimentArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetExperimentArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Enf
//  - Ace
//  - Ase
//  - Ae
type AiravataGetExperimentResult struct {
  Success *experiment_model.ExperimentModel `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Enf *airavata_errors.ExperimentNotFoundException `thrift:"enf,2" db:"enf" json:"enf,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,3" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,4" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,5" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetExperimentResult() *AiravataGetExperimentResult {
  return &AiravataGetExperimentResult{}
}

var AiravataGetExperimentResult_Success_DEFAULT *experiment_model.ExperimentModel
func (p *AiravataGetExperimentResult) GetSuccess() *experiment_model.ExperimentModel {
  if !p.IsSetSuccess() {
    return AiravataGetExperimentResult_Success_DEFAULT
  }
return p.Success
}
var AiravataGetExperimentResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetExperimentResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetExperimentResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetExperimentResult_Enf_DEFAULT *airavata_errors.ExperimentNotFoundException
func (p *AiravataGetExperimentResult) GetEnf() *airavata_errors.ExperimentNotFoundException {
  if !p.IsSetEnf() {
    return AiravataGetExperimentResult_Enf_DEFAULT
  }
return p.Enf
}
var AiravataGetExperimentResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetExperimentResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetExperimentResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetExperimentResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetExperimentResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetExperimentResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetExperimentResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetExperimentResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetExperimentResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetExperimentResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetExperimentResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetExperimentResult) IsSetEnf() bool {
  return p.Enf != nil
}

func (p *AiravataGetExperimentResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetExperimentResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetExperimentResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetExperimentResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetExperimentResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &experiment_model.ExperimentModel{
  ExperimentId: "DO_NOT_SET_AT_CLIENTS",

  ExperimentType:   0,
}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AiravataGetExperimentResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetExperimentResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Enf = &airavata_errors.ExperimentNotFoundException{}
  if err := p.Enf.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Enf), err)
  }
  return nil
}

func (p *AiravataGetExperimentResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetExperimentResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetExperimentResult)  ReadField5(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetExperimentResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getExperiment_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetExperimentResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetExperimentResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetExperimentResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetEnf() {
    if err := oprot.WriteFieldBegin("enf", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:enf: ", p), err) }
    if err := p.Enf.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Enf), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:enf: ", p), err) }
  }
  return err
}

func (p *AiravataGetExperimentResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetExperimentResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetExperimentResult) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetExperimentResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetExperimentResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - AiravataExperimentId
type AiravataGetExperimentByAdminArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  AiravataExperimentId string `thrift:"airavataExperimentId,2,required" db:"airavataExperimentId" json:"airavataExperimentId"`
}

func NewAiravataGetExperimentByAdminArgs() *AiravataGetExperimentByAdminArgs {
  return &AiravataGetExperimentByAdminArgs{}
}

var AiravataGetExperimentByAdminArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetExperimentByAdminArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetExperimentByAdminArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetExperimentByAdminArgs) GetAiravataExperimentId() string {
  return p.AiravataExperimentId
}
func (p *AiravataGetExperimentByAdminArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetExperimentByAdminArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetAiravataExperimentId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAiravataExperimentId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetAiravataExperimentId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AiravataExperimentId is not set"));
  }
  return nil
}

func (p *AiravataGetExperimentByAdminArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetExperimentByAdminArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AiravataExperimentId = v
}
  return nil
}

func (p *AiravataGetExperimentByAdminArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getExperimentByAdmin_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetExperimentByAdminArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetExperimentByAdminArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("airavataExperimentId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:airavataExperimentId: ", p), err) }
  if err := oprot.WriteString(string(p.AiravataExperimentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.airavataExperimentId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:airavataExperimentId: ", p), err) }
  return err
}

func (p *AiravataGetExperimentByAdminArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetExperimentByAdminArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Enf
//  - Ace
//  - Ase
//  - Ae
type AiravataGetExperimentByAdminResult struct {
  Success *experiment_model.ExperimentModel `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Enf *airavata_errors.ExperimentNotFoundException `thrift:"enf,2" db:"enf" json:"enf,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,3" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,4" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,5" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetExperimentByAdminResult() *AiravataGetExperimentByAdminResult {
  return &AiravataGetExperimentByAdminResult{}
}

var AiravataGetExperimentByAdminResult_Success_DEFAULT *experiment_model.ExperimentModel
func (p *AiravataGetExperimentByAdminResult) GetSuccess() *experiment_model.ExperimentModel {
  if !p.IsSetSuccess() {
    return AiravataGetExperimentByAdminResult_Success_DEFAULT
  }
return p.Success
}
var AiravataGetExperimentByAdminResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetExperimentByAdminResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetExperimentByAdminResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetExperimentByAdminResult_Enf_DEFAULT *airavata_errors.ExperimentNotFoundException
func (p *AiravataGetExperimentByAdminResult) GetEnf() *airavata_errors.ExperimentNotFoundException {
  if !p.IsSetEnf() {
    return AiravataGetExperimentByAdminResult_Enf_DEFAULT
  }
return p.Enf
}
var AiravataGetExperimentByAdminResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetExperimentByAdminResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetExperimentByAdminResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetExperimentByAdminResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetExperimentByAdminResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetExperimentByAdminResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetExperimentByAdminResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetExperimentByAdminResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetExperimentByAdminResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetExperimentByAdminResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetExperimentByAdminResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetExperimentByAdminResult) IsSetEnf() bool {
  return p.Enf != nil
}

func (p *AiravataGetExperimentByAdminResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetExperimentByAdminResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetExperimentByAdminResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetExperimentByAdminResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetExperimentByAdminResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &experiment_model.ExperimentModel{
  ExperimentId: "DO_NOT_SET_AT_CLIENTS",

  ExperimentType:   0,
}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AiravataGetExperimentByAdminResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetExperimentByAdminResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Enf = &airavata_errors.ExperimentNotFoundException{}
  if err := p.Enf.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Enf), err)
  }
  return nil
}

func (p *AiravataGetExperimentByAdminResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetExperimentByAdminResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetExperimentByAdminResult)  ReadField5(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetExperimentByAdminResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getExperimentByAdmin_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetExperimentByAdminResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetExperimentByAdminResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetExperimentByAdminResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetEnf() {
    if err := oprot.WriteFieldBegin("enf", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:enf: ", p), err) }
    if err := p.Enf.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Enf), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:enf: ", p), err) }
  }
  return err
}

func (p *AiravataGetExperimentByAdminResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetExperimentByAdminResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetExperimentByAdminResult) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetExperimentByAdminResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetExperimentByAdminResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - AiravataExperimentId
type AiravataGetDetailedExperimentTreeArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  AiravataExperimentId string `thrift:"airavataExperimentId,2,required" db:"airavataExperimentId" json:"airavataExperimentId"`
}

func NewAiravataGetDetailedExperimentTreeArgs() *AiravataGetDetailedExperimentTreeArgs {
  return &AiravataGetDetailedExperimentTreeArgs{}
}

var AiravataGetDetailedExperimentTreeArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetDetailedExperimentTreeArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetDetailedExperimentTreeArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetDetailedExperimentTreeArgs) GetAiravataExperimentId() string {
  return p.AiravataExperimentId
}
func (p *AiravataGetDetailedExperimentTreeArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetDetailedExperimentTreeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetAiravataExperimentId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAiravataExperimentId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetAiravataExperimentId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AiravataExperimentId is not set"));
  }
  return nil
}

func (p *AiravataGetDetailedExperimentTreeArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetDetailedExperimentTreeArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AiravataExperimentId = v
}
  return nil
}

func (p *AiravataGetDetailedExperimentTreeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getDetailedExperimentTree_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetDetailedExperimentTreeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetDetailedExperimentTreeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("airavataExperimentId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:airavataExperimentId: ", p), err) }
  if err := oprot.WriteString(string(p.AiravataExperimentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.airavataExperimentId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:airavataExperimentId: ", p), err) }
  return err
}

func (p *AiravataGetDetailedExperimentTreeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetDetailedExperimentTreeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Enf
//  - Ace
//  - Ase
//  - Ae
type AiravataGetDetailedExperimentTreeResult struct {
  Success *experiment_model.ExperimentModel `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Enf *airavata_errors.ExperimentNotFoundException `thrift:"enf,2" db:"enf" json:"enf,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,3" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,4" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,5" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetDetailedExperimentTreeResult() *AiravataGetDetailedExperimentTreeResult {
  return &AiravataGetDetailedExperimentTreeResult{}
}

var AiravataGetDetailedExperimentTreeResult_Success_DEFAULT *experiment_model.ExperimentModel
func (p *AiravataGetDetailedExperimentTreeResult) GetSuccess() *experiment_model.ExperimentModel {
  if !p.IsSetSuccess() {
    return AiravataGetDetailedExperimentTreeResult_Success_DEFAULT
  }
return p.Success
}
var AiravataGetDetailedExperimentTreeResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetDetailedExperimentTreeResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetDetailedExperimentTreeResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetDetailedExperimentTreeResult_Enf_DEFAULT *airavata_errors.ExperimentNotFoundException
func (p *AiravataGetDetailedExperimentTreeResult) GetEnf() *airavata_errors.ExperimentNotFoundException {
  if !p.IsSetEnf() {
    return AiravataGetDetailedExperimentTreeResult_Enf_DEFAULT
  }
return p.Enf
}
var AiravataGetDetailedExperimentTreeResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetDetailedExperimentTreeResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetDetailedExperimentTreeResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetDetailedExperimentTreeResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetDetailedExperimentTreeResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetDetailedExperimentTreeResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetDetailedExperimentTreeResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetDetailedExperimentTreeResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetDetailedExperimentTreeResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetDetailedExperimentTreeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetDetailedExperimentTreeResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetDetailedExperimentTreeResult) IsSetEnf() bool {
  return p.Enf != nil
}

func (p *AiravataGetDetailedExperimentTreeResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetDetailedExperimentTreeResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetDetailedExperimentTreeResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetDetailedExperimentTreeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetDetailedExperimentTreeResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &experiment_model.ExperimentModel{
  ExperimentId: "DO_NOT_SET_AT_CLIENTS",

  ExperimentType:   0,
}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AiravataGetDetailedExperimentTreeResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetDetailedExperimentTreeResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Enf = &airavata_errors.ExperimentNotFoundException{}
  if err := p.Enf.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Enf), err)
  }
  return nil
}

func (p *AiravataGetDetailedExperimentTreeResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetDetailedExperimentTreeResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetDetailedExperimentTreeResult)  ReadField5(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetDetailedExperimentTreeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getDetailedExperimentTree_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetDetailedExperimentTreeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetDetailedExperimentTreeResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetDetailedExperimentTreeResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetEnf() {
    if err := oprot.WriteFieldBegin("enf", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:enf: ", p), err) }
    if err := p.Enf.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Enf), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:enf: ", p), err) }
  }
  return err
}

func (p *AiravataGetDetailedExperimentTreeResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetDetailedExperimentTreeResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetDetailedExperimentTreeResult) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetDetailedExperimentTreeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetDetailedExperimentTreeResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - AiravataExperimentId
//  - Experiment
type AiravataUpdateExperimentArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  AiravataExperimentId string `thrift:"airavataExperimentId,2,required" db:"airavataExperimentId" json:"airavataExperimentId"`
  Experiment *experiment_model.ExperimentModel `thrift:"experiment,3,required" db:"experiment" json:"experiment"`
}

func NewAiravataUpdateExperimentArgs() *AiravataUpdateExperimentArgs {
  return &AiravataUpdateExperimentArgs{}
}

var AiravataUpdateExperimentArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataUpdateExperimentArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataUpdateExperimentArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataUpdateExperimentArgs) GetAiravataExperimentId() string {
  return p.AiravataExperimentId
}
var AiravataUpdateExperimentArgs_Experiment_DEFAULT *experiment_model.ExperimentModel
func (p *AiravataUpdateExperimentArgs) GetExperiment() *experiment_model.ExperimentModel {
  if !p.IsSetExperiment() {
    return AiravataUpdateExperimentArgs_Experiment_DEFAULT
  }
return p.Experiment
}
func (p *AiravataUpdateExperimentArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataUpdateExperimentArgs) IsSetExperiment() bool {
  return p.Experiment != nil
}

func (p *AiravataUpdateExperimentArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetAiravataExperimentId bool = false;
  var issetExperiment bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAiravataExperimentId = true
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetExperiment = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetAiravataExperimentId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AiravataExperimentId is not set"));
  }
  if !issetExperiment{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Experiment is not set"));
  }
  return nil
}

func (p *AiravataUpdateExperimentArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataUpdateExperimentArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AiravataExperimentId = v
}
  return nil
}

func (p *AiravataUpdateExperimentArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.Experiment = &experiment_model.ExperimentModel{
  ExperimentId: "DO_NOT_SET_AT_CLIENTS",

  ExperimentType:   0,
}
  if err := p.Experiment.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Experiment), err)
  }
  return nil
}

func (p *AiravataUpdateExperimentArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateExperiment_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateExperimentArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataUpdateExperimentArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("airavataExperimentId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:airavataExperimentId: ", p), err) }
  if err := oprot.WriteString(string(p.AiravataExperimentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.airavataExperimentId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:airavataExperimentId: ", p), err) }
  return err
}

func (p *AiravataUpdateExperimentArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("experiment", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:experiment: ", p), err) }
  if err := p.Experiment.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Experiment), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:experiment: ", p), err) }
  return err
}

func (p *AiravataUpdateExperimentArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateExperimentArgs(%+v)", *p)
}

// Attributes:
//  - Ire
//  - Enf
//  - Ace
//  - Ase
//  - Ae
type AiravataUpdateExperimentResult struct {
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Enf *airavata_errors.ExperimentNotFoundException `thrift:"enf,2" db:"enf" json:"enf,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,3" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,4" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,5" db:"ae" json:"ae,omitempty"`
}

func NewAiravataUpdateExperimentResult() *AiravataUpdateExperimentResult {
  return &AiravataUpdateExperimentResult{}
}

var AiravataUpdateExperimentResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataUpdateExperimentResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataUpdateExperimentResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataUpdateExperimentResult_Enf_DEFAULT *airavata_errors.ExperimentNotFoundException
func (p *AiravataUpdateExperimentResult) GetEnf() *airavata_errors.ExperimentNotFoundException {
  if !p.IsSetEnf() {
    return AiravataUpdateExperimentResult_Enf_DEFAULT
  }
return p.Enf
}
var AiravataUpdateExperimentResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataUpdateExperimentResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataUpdateExperimentResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataUpdateExperimentResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataUpdateExperimentResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataUpdateExperimentResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataUpdateExperimentResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataUpdateExperimentResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataUpdateExperimentResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataUpdateExperimentResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataUpdateExperimentResult) IsSetEnf() bool {
  return p.Enf != nil
}

func (p *AiravataUpdateExperimentResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataUpdateExperimentResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataUpdateExperimentResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataUpdateExperimentResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataUpdateExperimentResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataUpdateExperimentResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Enf = &airavata_errors.ExperimentNotFoundException{}
  if err := p.Enf.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Enf), err)
  }
  return nil
}

func (p *AiravataUpdateExperimentResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataUpdateExperimentResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataUpdateExperimentResult)  ReadField5(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataUpdateExperimentResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateExperiment_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateExperimentResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateExperimentResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetEnf() {
    if err := oprot.WriteFieldBegin("enf", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:enf: ", p), err) }
    if err := p.Enf.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Enf), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:enf: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateExperimentResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ace: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateExperimentResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ase: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateExperimentResult) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ae: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateExperimentResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateExperimentResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - AiravataExperimentId
//  - UserConfiguration
type AiravataUpdateExperimentConfigurationArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  AiravataExperimentId string `thrift:"airavataExperimentId,2,required" db:"airavataExperimentId" json:"airavataExperimentId"`
  UserConfiguration *experiment_model.UserConfigurationDataModel `thrift:"userConfiguration,3,required" db:"userConfiguration" json:"userConfiguration"`
}

func NewAiravataUpdateExperimentConfigurationArgs() *AiravataUpdateExperimentConfigurationArgs {
  return &AiravataUpdateExperimentConfigurationArgs{}
}

var AiravataUpdateExperimentConfigurationArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataUpdateExperimentConfigurationArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataUpdateExperimentConfigurationArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataUpdateExperimentConfigurationArgs) GetAiravataExperimentId() string {
  return p.AiravataExperimentId
}
var AiravataUpdateExperimentConfigurationArgs_UserConfiguration_DEFAULT *experiment_model.UserConfigurationDataModel
func (p *AiravataUpdateExperimentConfigurationArgs) GetUserConfiguration() *experiment_model.UserConfigurationDataModel {
  if !p.IsSetUserConfiguration() {
    return AiravataUpdateExperimentConfigurationArgs_UserConfiguration_DEFAULT
  }
return p.UserConfiguration
}
func (p *AiravataUpdateExperimentConfigurationArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataUpdateExperimentConfigurationArgs) IsSetUserConfiguration() bool {
  return p.UserConfiguration != nil
}

func (p *AiravataUpdateExperimentConfigurationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetAiravataExperimentId bool = false;
  var issetUserConfiguration bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAiravataExperimentId = true
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserConfiguration = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetAiravataExperimentId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AiravataExperimentId is not set"));
  }
  if !issetUserConfiguration{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserConfiguration is not set"));
  }
  return nil
}

func (p *AiravataUpdateExperimentConfigurationArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataUpdateExperimentConfigurationArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AiravataExperimentId = v
}
  return nil
}

func (p *AiravataUpdateExperimentConfigurationArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.UserConfiguration = &experiment_model.UserConfigurationDataModel{}
  if err := p.UserConfiguration.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserConfiguration), err)
  }
  return nil
}

func (p *AiravataUpdateExperimentConfigurationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateExperimentConfiguration_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateExperimentConfigurationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataUpdateExperimentConfigurationArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("airavataExperimentId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:airavataExperimentId: ", p), err) }
  if err := oprot.WriteString(string(p.AiravataExperimentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.airavataExperimentId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:airavataExperimentId: ", p), err) }
  return err
}

func (p *AiravataUpdateExperimentConfigurationArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userConfiguration", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userConfiguration: ", p), err) }
  if err := p.UserConfiguration.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserConfiguration), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userConfiguration: ", p), err) }
  return err
}

func (p *AiravataUpdateExperimentConfigurationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateExperimentConfigurationArgs(%+v)", *p)
}

// Attributes:
//  - Ae
type AiravataUpdateExperimentConfigurationResult struct {
  Ae *airavata_errors.AuthorizationException `thrift:"ae,1" db:"ae" json:"ae,omitempty"`
}

func NewAiravataUpdateExperimentConfigurationResult() *AiravataUpdateExperimentConfigurationResult {
  return &AiravataUpdateExperimentConfigurationResult{}
}

var AiravataUpdateExperimentConfigurationResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataUpdateExperimentConfigurationResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataUpdateExperimentConfigurationResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataUpdateExperimentConfigurationResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataUpdateExperimentConfigurationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataUpdateExperimentConfigurationResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataUpdateExperimentConfigurationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateExperimentConfiguration_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateExperimentConfigurationResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ae: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateExperimentConfigurationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateExperimentConfigurationResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - AiravataExperimentId
//  - ResourceScheduling
type AiravataUpdateResourceScheduleingArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  AiravataExperimentId string `thrift:"airavataExperimentId,2,required" db:"airavataExperimentId" json:"airavataExperimentId"`
  ResourceScheduling *scheduling_model.ComputationalResourceSchedulingModel `thrift:"resourceScheduling,3,required" db:"resourceScheduling" json:"resourceScheduling"`
}

func NewAiravataUpdateResourceScheduleingArgs() *AiravataUpdateResourceScheduleingArgs {
  return &AiravataUpdateResourceScheduleingArgs{}
}

var AiravataUpdateResourceScheduleingArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataUpdateResourceScheduleingArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataUpdateResourceScheduleingArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataUpdateResourceScheduleingArgs) GetAiravataExperimentId() string {
  return p.AiravataExperimentId
}
var AiravataUpdateResourceScheduleingArgs_ResourceScheduling_DEFAULT *scheduling_model.ComputationalResourceSchedulingModel
func (p *AiravataUpdateResourceScheduleingArgs) GetResourceScheduling() *scheduling_model.ComputationalResourceSchedulingModel {
  if !p.IsSetResourceScheduling() {
    return AiravataUpdateResourceScheduleingArgs_ResourceScheduling_DEFAULT
  }
return p.ResourceScheduling
}
func (p *AiravataUpdateResourceScheduleingArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataUpdateResourceScheduleingArgs) IsSetResourceScheduling() bool {
  return p.ResourceScheduling != nil
}

func (p *AiravataUpdateResourceScheduleingArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetAiravataExperimentId bool = false;
  var issetResourceScheduling bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAiravataExperimentId = true
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetResourceScheduling = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetAiravataExperimentId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AiravataExperimentId is not set"));
  }
  if !issetResourceScheduling{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ResourceScheduling is not set"));
  }
  return nil
}

func (p *AiravataUpdateResourceScheduleingArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataUpdateResourceScheduleingArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AiravataExperimentId = v
}
  return nil
}

func (p *AiravataUpdateResourceScheduleingArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.ResourceScheduling = &scheduling_model.ComputationalResourceSchedulingModel{}
  if err := p.ResourceScheduling.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ResourceScheduling), err)
  }
  return nil
}

func (p *AiravataUpdateResourceScheduleingArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateResourceScheduleing_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateResourceScheduleingArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataUpdateResourceScheduleingArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("airavataExperimentId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:airavataExperimentId: ", p), err) }
  if err := oprot.WriteString(string(p.AiravataExperimentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.airavataExperimentId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:airavataExperimentId: ", p), err) }
  return err
}

func (p *AiravataUpdateResourceScheduleingArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resourceScheduling", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:resourceScheduling: ", p), err) }
  if err := p.ResourceScheduling.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ResourceScheduling), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:resourceScheduling: ", p), err) }
  return err
}

func (p *AiravataUpdateResourceScheduleingArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateResourceScheduleingArgs(%+v)", *p)
}

// Attributes:
//  - Ae
type AiravataUpdateResourceScheduleingResult struct {
  Ae *airavata_errors.AuthorizationException `thrift:"ae,1" db:"ae" json:"ae,omitempty"`
}

func NewAiravataUpdateResourceScheduleingResult() *AiravataUpdateResourceScheduleingResult {
  return &AiravataUpdateResourceScheduleingResult{}
}

var AiravataUpdateResourceScheduleingResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataUpdateResourceScheduleingResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataUpdateResourceScheduleingResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataUpdateResourceScheduleingResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataUpdateResourceScheduleingResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataUpdateResourceScheduleingResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataUpdateResourceScheduleingResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateResourceScheduleing_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateResourceScheduleingResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ae: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateResourceScheduleingResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateResourceScheduleingResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - AiravataExperimentId
type AiravataValidateExperimentArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  AiravataExperimentId string `thrift:"airavataExperimentId,2,required" db:"airavataExperimentId" json:"airavataExperimentId"`
}

func NewAiravataValidateExperimentArgs() *AiravataValidateExperimentArgs {
  return &AiravataValidateExperimentArgs{}
}

var AiravataValidateExperimentArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataValidateExperimentArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataValidateExperimentArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataValidateExperimentArgs) GetAiravataExperimentId() string {
  return p.AiravataExperimentId
}
func (p *AiravataValidateExperimentArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataValidateExperimentArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetAiravataExperimentId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAiravataExperimentId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetAiravataExperimentId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AiravataExperimentId is not set"));
  }
  return nil
}

func (p *AiravataValidateExperimentArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataValidateExperimentArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AiravataExperimentId = v
}
  return nil
}

func (p *AiravataValidateExperimentArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("validateExperiment_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataValidateExperimentArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataValidateExperimentArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("airavataExperimentId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:airavataExperimentId: ", p), err) }
  if err := oprot.WriteString(string(p.AiravataExperimentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.airavataExperimentId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:airavataExperimentId: ", p), err) }
  return err
}

func (p *AiravataValidateExperimentArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataValidateExperimentArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Enf
//  - Ace
//  - Ase
//  - Ae
type AiravataValidateExperimentResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Enf *airavata_errors.ExperimentNotFoundException `thrift:"enf,2" db:"enf" json:"enf,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,3" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,4" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,5" db:"ae" json:"ae,omitempty"`
}

func NewAiravataValidateExperimentResult() *AiravataValidateExperimentResult {
  return &AiravataValidateExperimentResult{}
}

var AiravataValidateExperimentResult_Success_DEFAULT bool
func (p *AiravataValidateExperimentResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataValidateExperimentResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataValidateExperimentResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataValidateExperimentResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataValidateExperimentResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataValidateExperimentResult_Enf_DEFAULT *airavata_errors.ExperimentNotFoundException
func (p *AiravataValidateExperimentResult) GetEnf() *airavata_errors.ExperimentNotFoundException {
  if !p.IsSetEnf() {
    return AiravataValidateExperimentResult_Enf_DEFAULT
  }
return p.Enf
}
var AiravataValidateExperimentResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataValidateExperimentResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataValidateExperimentResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataValidateExperimentResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataValidateExperimentResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataValidateExperimentResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataValidateExperimentResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataValidateExperimentResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataValidateExperimentResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataValidateExperimentResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataValidateExperimentResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataValidateExperimentResult) IsSetEnf() bool {
  return p.Enf != nil
}

func (p *AiravataValidateExperimentResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataValidateExperimentResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataValidateExperimentResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataValidateExperimentResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataValidateExperimentResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataValidateExperimentResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataValidateExperimentResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Enf = &airavata_errors.ExperimentNotFoundException{}
  if err := p.Enf.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Enf), err)
  }
  return nil
}

func (p *AiravataValidateExperimentResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataValidateExperimentResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataValidateExperimentResult)  ReadField5(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataValidateExperimentResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("validateExperiment_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataValidateExperimentResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataValidateExperimentResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataValidateExperimentResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetEnf() {
    if err := oprot.WriteFieldBegin("enf", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:enf: ", p), err) }
    if err := p.Enf.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Enf), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:enf: ", p), err) }
  }
  return err
}

func (p *AiravataValidateExperimentResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ace: ", p), err) }
  }
  return err
}

func (p *AiravataValidateExperimentResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ase: ", p), err) }
  }
  return err
}

func (p *AiravataValidateExperimentResult) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ae: ", p), err) }
  }
  return err
}

func (p *AiravataValidateExperimentResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataValidateExperimentResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - AiravataExperimentId
//  - GatewayId
type AiravataLaunchExperimentArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  AiravataExperimentId string `thrift:"airavataExperimentId,2,required" db:"airavataExperimentId" json:"airavataExperimentId"`
  GatewayId string `thrift:"gatewayId,3,required" db:"gatewayId" json:"gatewayId"`
}

func NewAiravataLaunchExperimentArgs() *AiravataLaunchExperimentArgs {
  return &AiravataLaunchExperimentArgs{}
}

var AiravataLaunchExperimentArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataLaunchExperimentArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataLaunchExperimentArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataLaunchExperimentArgs) GetAiravataExperimentId() string {
  return p.AiravataExperimentId
}

func (p *AiravataLaunchExperimentArgs) GetGatewayId() string {
  return p.GatewayId
}
func (p *AiravataLaunchExperimentArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataLaunchExperimentArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetAiravataExperimentId bool = false;
  var issetGatewayId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAiravataExperimentId = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetAiravataExperimentId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AiravataExperimentId is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  return nil
}

func (p *AiravataLaunchExperimentArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataLaunchExperimentArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AiravataExperimentId = v
}
  return nil
}

func (p *AiravataLaunchExperimentArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *AiravataLaunchExperimentArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("launchExperiment_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataLaunchExperimentArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataLaunchExperimentArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("airavataExperimentId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:airavataExperimentId: ", p), err) }
  if err := oprot.WriteString(string(p.AiravataExperimentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.airavataExperimentId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:airavataExperimentId: ", p), err) }
  return err
}

func (p *AiravataLaunchExperimentArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gatewayId: ", p), err) }
  return err
}

func (p *AiravataLaunchExperimentArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataLaunchExperimentArgs(%+v)", *p)
}

// Attributes:
//  - Ire
//  - Enf
//  - Ace
//  - Ase
//  - Ae
type AiravataLaunchExperimentResult struct {
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Enf *airavata_errors.ExperimentNotFoundException `thrift:"enf,2" db:"enf" json:"enf,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,3" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,4" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,5" db:"ae" json:"ae,omitempty"`
}

func NewAiravataLaunchExperimentResult() *AiravataLaunchExperimentResult {
  return &AiravataLaunchExperimentResult{}
}

var AiravataLaunchExperimentResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataLaunchExperimentResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataLaunchExperimentResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataLaunchExperimentResult_Enf_DEFAULT *airavata_errors.ExperimentNotFoundException
func (p *AiravataLaunchExperimentResult) GetEnf() *airavata_errors.ExperimentNotFoundException {
  if !p.IsSetEnf() {
    return AiravataLaunchExperimentResult_Enf_DEFAULT
  }
return p.Enf
}
var AiravataLaunchExperimentResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataLaunchExperimentResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataLaunchExperimentResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataLaunchExperimentResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataLaunchExperimentResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataLaunchExperimentResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataLaunchExperimentResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataLaunchExperimentResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataLaunchExperimentResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataLaunchExperimentResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataLaunchExperimentResult) IsSetEnf() bool {
  return p.Enf != nil
}

func (p *AiravataLaunchExperimentResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataLaunchExperimentResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataLaunchExperimentResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataLaunchExperimentResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataLaunchExperimentResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataLaunchExperimentResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Enf = &airavata_errors.ExperimentNotFoundException{}
  if err := p.Enf.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Enf), err)
  }
  return nil
}

func (p *AiravataLaunchExperimentResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataLaunchExperimentResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataLaunchExperimentResult)  ReadField5(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataLaunchExperimentResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("launchExperiment_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataLaunchExperimentResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataLaunchExperimentResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetEnf() {
    if err := oprot.WriteFieldBegin("enf", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:enf: ", p), err) }
    if err := p.Enf.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Enf), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:enf: ", p), err) }
  }
  return err
}

func (p *AiravataLaunchExperimentResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ace: ", p), err) }
  }
  return err
}

func (p *AiravataLaunchExperimentResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ase: ", p), err) }
  }
  return err
}

func (p *AiravataLaunchExperimentResult) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ae: ", p), err) }
  }
  return err
}

func (p *AiravataLaunchExperimentResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataLaunchExperimentResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - AiravataExperimentId
type AiravataGetExperimentStatusArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  AiravataExperimentId string `thrift:"airavataExperimentId,2,required" db:"airavataExperimentId" json:"airavataExperimentId"`
}

func NewAiravataGetExperimentStatusArgs() *AiravataGetExperimentStatusArgs {
  return &AiravataGetExperimentStatusArgs{}
}

var AiravataGetExperimentStatusArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetExperimentStatusArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetExperimentStatusArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetExperimentStatusArgs) GetAiravataExperimentId() string {
  return p.AiravataExperimentId
}
func (p *AiravataGetExperimentStatusArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetExperimentStatusArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetAiravataExperimentId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAiravataExperimentId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetAiravataExperimentId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AiravataExperimentId is not set"));
  }
  return nil
}

func (p *AiravataGetExperimentStatusArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetExperimentStatusArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AiravataExperimentId = v
}
  return nil
}

func (p *AiravataGetExperimentStatusArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getExperimentStatus_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetExperimentStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetExperimentStatusArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("airavataExperimentId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:airavataExperimentId: ", p), err) }
  if err := oprot.WriteString(string(p.AiravataExperimentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.airavataExperimentId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:airavataExperimentId: ", p), err) }
  return err
}

func (p *AiravataGetExperimentStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetExperimentStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Enf
//  - Ace
//  - Ase
//  - Ae
type AiravataGetExperimentStatusResult struct {
  Success *status_models.ExperimentStatus `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Enf *airavata_errors.ExperimentNotFoundException `thrift:"enf,2" db:"enf" json:"enf,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,3" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,4" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,5" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetExperimentStatusResult() *AiravataGetExperimentStatusResult {
  return &AiravataGetExperimentStatusResult{}
}

var AiravataGetExperimentStatusResult_Success_DEFAULT *status_models.ExperimentStatus
func (p *AiravataGetExperimentStatusResult) GetSuccess() *status_models.ExperimentStatus {
  if !p.IsSetSuccess() {
    return AiravataGetExperimentStatusResult_Success_DEFAULT
  }
return p.Success
}
var AiravataGetExperimentStatusResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetExperimentStatusResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetExperimentStatusResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetExperimentStatusResult_Enf_DEFAULT *airavata_errors.ExperimentNotFoundException
func (p *AiravataGetExperimentStatusResult) GetEnf() *airavata_errors.ExperimentNotFoundException {
  if !p.IsSetEnf() {
    return AiravataGetExperimentStatusResult_Enf_DEFAULT
  }
return p.Enf
}
var AiravataGetExperimentStatusResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetExperimentStatusResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetExperimentStatusResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetExperimentStatusResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetExperimentStatusResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetExperimentStatusResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetExperimentStatusResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetExperimentStatusResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetExperimentStatusResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetExperimentStatusResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetExperimentStatusResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetExperimentStatusResult) IsSetEnf() bool {
  return p.Enf != nil
}

func (p *AiravataGetExperimentStatusResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetExperimentStatusResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetExperimentStatusResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetExperimentStatusResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetExperimentStatusResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &status_models.ExperimentStatus{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AiravataGetExperimentStatusResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetExperimentStatusResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Enf = &airavata_errors.ExperimentNotFoundException{}
  if err := p.Enf.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Enf), err)
  }
  return nil
}

func (p *AiravataGetExperimentStatusResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetExperimentStatusResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetExperimentStatusResult)  ReadField5(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetExperimentStatusResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getExperimentStatus_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetExperimentStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetExperimentStatusResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetExperimentStatusResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetEnf() {
    if err := oprot.WriteFieldBegin("enf", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:enf: ", p), err) }
    if err := p.Enf.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Enf), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:enf: ", p), err) }
  }
  return err
}

func (p *AiravataGetExperimentStatusResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetExperimentStatusResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetExperimentStatusResult) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetExperimentStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetExperimentStatusResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - AiravataExperimentId
type AiravataGetExperimentOutputsArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  AiravataExperimentId string `thrift:"airavataExperimentId,2,required" db:"airavataExperimentId" json:"airavataExperimentId"`
}

func NewAiravataGetExperimentOutputsArgs() *AiravataGetExperimentOutputsArgs {
  return &AiravataGetExperimentOutputsArgs{}
}

var AiravataGetExperimentOutputsArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetExperimentOutputsArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetExperimentOutputsArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetExperimentOutputsArgs) GetAiravataExperimentId() string {
  return p.AiravataExperimentId
}
func (p *AiravataGetExperimentOutputsArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetExperimentOutputsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetAiravataExperimentId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAiravataExperimentId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetAiravataExperimentId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AiravataExperimentId is not set"));
  }
  return nil
}

func (p *AiravataGetExperimentOutputsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetExperimentOutputsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AiravataExperimentId = v
}
  return nil
}

func (p *AiravataGetExperimentOutputsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getExperimentOutputs_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetExperimentOutputsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetExperimentOutputsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("airavataExperimentId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:airavataExperimentId: ", p), err) }
  if err := oprot.WriteString(string(p.AiravataExperimentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.airavataExperimentId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:airavataExperimentId: ", p), err) }
  return err
}

func (p *AiravataGetExperimentOutputsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetExperimentOutputsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Enf
//  - Ace
//  - Ase
//  - Ae
type AiravataGetExperimentOutputsResult struct {
  Success []*application_io_models.OutputDataObjectType `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Enf *airavata_errors.ExperimentNotFoundException `thrift:"enf,2" db:"enf" json:"enf,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,3" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,4" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,5" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetExperimentOutputsResult() *AiravataGetExperimentOutputsResult {
  return &AiravataGetExperimentOutputsResult{}
}

var AiravataGetExperimentOutputsResult_Success_DEFAULT []*application_io_models.OutputDataObjectType

func (p *AiravataGetExperimentOutputsResult) GetSuccess() []*application_io_models.OutputDataObjectType {
  return p.Success
}
var AiravataGetExperimentOutputsResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetExperimentOutputsResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetExperimentOutputsResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetExperimentOutputsResult_Enf_DEFAULT *airavata_errors.ExperimentNotFoundException
func (p *AiravataGetExperimentOutputsResult) GetEnf() *airavata_errors.ExperimentNotFoundException {
  if !p.IsSetEnf() {
    return AiravataGetExperimentOutputsResult_Enf_DEFAULT
  }
return p.Enf
}
var AiravataGetExperimentOutputsResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetExperimentOutputsResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetExperimentOutputsResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetExperimentOutputsResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetExperimentOutputsResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetExperimentOutputsResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetExperimentOutputsResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetExperimentOutputsResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetExperimentOutputsResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetExperimentOutputsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetExperimentOutputsResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetExperimentOutputsResult) IsSetEnf() bool {
  return p.Enf != nil
}

func (p *AiravataGetExperimentOutputsResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetExperimentOutputsResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetExperimentOutputsResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetExperimentOutputsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetExperimentOutputsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*application_io_models.OutputDataObjectType, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem358 := &application_io_models.OutputDataObjectType{}
    if err := _elem358.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem358), err)
    }
    p.Success = append(p.Success, _elem358)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AiravataGetExperimentOutputsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetExperimentOutputsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Enf = &airavata_errors.ExperimentNotFoundException{}
  if err := p.Enf.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Enf), err)
  }
  return nil
}

func (p *AiravataGetExperimentOutputsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetExperimentOutputsResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetExperimentOutputsResult)  ReadField5(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetExperimentOutputsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getExperimentOutputs_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetExperimentOutputsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetExperimentOutputsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetExperimentOutputsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetEnf() {
    if err := oprot.WriteFieldBegin("enf", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:enf: ", p), err) }
    if err := p.Enf.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Enf), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:enf: ", p), err) }
  }
  return err
}

func (p *AiravataGetExperimentOutputsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetExperimentOutputsResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetExperimentOutputsResult) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetExperimentOutputsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetExperimentOutputsResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - AiravataExperimentId
type AiravataGetIntermediateOutputsArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  AiravataExperimentId string `thrift:"airavataExperimentId,2,required" db:"airavataExperimentId" json:"airavataExperimentId"`
}

func NewAiravataGetIntermediateOutputsArgs() *AiravataGetIntermediateOutputsArgs {
  return &AiravataGetIntermediateOutputsArgs{}
}

var AiravataGetIntermediateOutputsArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetIntermediateOutputsArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetIntermediateOutputsArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetIntermediateOutputsArgs) GetAiravataExperimentId() string {
  return p.AiravataExperimentId
}
func (p *AiravataGetIntermediateOutputsArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetIntermediateOutputsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetAiravataExperimentId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAiravataExperimentId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetAiravataExperimentId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AiravataExperimentId is not set"));
  }
  return nil
}

func (p *AiravataGetIntermediateOutputsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetIntermediateOutputsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AiravataExperimentId = v
}
  return nil
}

func (p *AiravataGetIntermediateOutputsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getIntermediateOutputs_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetIntermediateOutputsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetIntermediateOutputsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("airavataExperimentId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:airavataExperimentId: ", p), err) }
  if err := oprot.WriteString(string(p.AiravataExperimentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.airavataExperimentId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:airavataExperimentId: ", p), err) }
  return err
}

func (p *AiravataGetIntermediateOutputsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetIntermediateOutputsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Enf
//  - Ace
//  - Ase
//  - Ae
type AiravataGetIntermediateOutputsResult struct {
  Success []*application_io_models.OutputDataObjectType `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Enf *airavata_errors.ExperimentNotFoundException `thrift:"enf,2" db:"enf" json:"enf,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,3" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,4" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,5" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetIntermediateOutputsResult() *AiravataGetIntermediateOutputsResult {
  return &AiravataGetIntermediateOutputsResult{}
}

var AiravataGetIntermediateOutputsResult_Success_DEFAULT []*application_io_models.OutputDataObjectType

func (p *AiravataGetIntermediateOutputsResult) GetSuccess() []*application_io_models.OutputDataObjectType {
  return p.Success
}
var AiravataGetIntermediateOutputsResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetIntermediateOutputsResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetIntermediateOutputsResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetIntermediateOutputsResult_Enf_DEFAULT *airavata_errors.ExperimentNotFoundException
func (p *AiravataGetIntermediateOutputsResult) GetEnf() *airavata_errors.ExperimentNotFoundException {
  if !p.IsSetEnf() {
    return AiravataGetIntermediateOutputsResult_Enf_DEFAULT
  }
return p.Enf
}
var AiravataGetIntermediateOutputsResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetIntermediateOutputsResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetIntermediateOutputsResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetIntermediateOutputsResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetIntermediateOutputsResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetIntermediateOutputsResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetIntermediateOutputsResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetIntermediateOutputsResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetIntermediateOutputsResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetIntermediateOutputsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetIntermediateOutputsResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetIntermediateOutputsResult) IsSetEnf() bool {
  return p.Enf != nil
}

func (p *AiravataGetIntermediateOutputsResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetIntermediateOutputsResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetIntermediateOutputsResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetIntermediateOutputsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetIntermediateOutputsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*application_io_models.OutputDataObjectType, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem359 := &application_io_models.OutputDataObjectType{}
    if err := _elem359.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem359), err)
    }
    p.Success = append(p.Success, _elem359)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AiravataGetIntermediateOutputsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetIntermediateOutputsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Enf = &airavata_errors.ExperimentNotFoundException{}
  if err := p.Enf.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Enf), err)
  }
  return nil
}

func (p *AiravataGetIntermediateOutputsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetIntermediateOutputsResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetIntermediateOutputsResult)  ReadField5(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetIntermediateOutputsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getIntermediateOutputs_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetIntermediateOutputsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetIntermediateOutputsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetIntermediateOutputsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetEnf() {
    if err := oprot.WriteFieldBegin("enf", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:enf: ", p), err) }
    if err := p.Enf.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Enf), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:enf: ", p), err) }
  }
  return err
}

func (p *AiravataGetIntermediateOutputsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetIntermediateOutputsResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetIntermediateOutputsResult) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetIntermediateOutputsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetIntermediateOutputsResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - AiravataExperimentId
type AiravataGetJobStatusesArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  AiravataExperimentId string `thrift:"airavataExperimentId,2,required" db:"airavataExperimentId" json:"airavataExperimentId"`
}

func NewAiravataGetJobStatusesArgs() *AiravataGetJobStatusesArgs {
  return &AiravataGetJobStatusesArgs{}
}

var AiravataGetJobStatusesArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetJobStatusesArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetJobStatusesArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetJobStatusesArgs) GetAiravataExperimentId() string {
  return p.AiravataExperimentId
}
func (p *AiravataGetJobStatusesArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetJobStatusesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetAiravataExperimentId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAiravataExperimentId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetAiravataExperimentId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AiravataExperimentId is not set"));
  }
  return nil
}

func (p *AiravataGetJobStatusesArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetJobStatusesArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AiravataExperimentId = v
}
  return nil
}

func (p *AiravataGetJobStatusesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getJobStatuses_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetJobStatusesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetJobStatusesArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("airavataExperimentId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:airavataExperimentId: ", p), err) }
  if err := oprot.WriteString(string(p.AiravataExperimentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.airavataExperimentId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:airavataExperimentId: ", p), err) }
  return err
}

func (p *AiravataGetJobStatusesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetJobStatusesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Enf
//  - Ace
//  - Ase
//  - Ae
type AiravataGetJobStatusesResult struct {
  Success map[string]*status_models.JobStatus `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Enf *airavata_errors.ExperimentNotFoundException `thrift:"enf,2" db:"enf" json:"enf,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,3" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,4" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,5" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetJobStatusesResult() *AiravataGetJobStatusesResult {
  return &AiravataGetJobStatusesResult{}
}

var AiravataGetJobStatusesResult_Success_DEFAULT map[string]*status_models.JobStatus

func (p *AiravataGetJobStatusesResult) GetSuccess() map[string]*status_models.JobStatus {
  return p.Success
}
var AiravataGetJobStatusesResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetJobStatusesResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetJobStatusesResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetJobStatusesResult_Enf_DEFAULT *airavata_errors.ExperimentNotFoundException
func (p *AiravataGetJobStatusesResult) GetEnf() *airavata_errors.ExperimentNotFoundException {
  if !p.IsSetEnf() {
    return AiravataGetJobStatusesResult_Enf_DEFAULT
  }
return p.Enf
}
var AiravataGetJobStatusesResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetJobStatusesResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetJobStatusesResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetJobStatusesResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetJobStatusesResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetJobStatusesResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetJobStatusesResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetJobStatusesResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetJobStatusesResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetJobStatusesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetJobStatusesResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetJobStatusesResult) IsSetEnf() bool {
  return p.Enf != nil
}

func (p *AiravataGetJobStatusesResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetJobStatusesResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetJobStatusesResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetJobStatusesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetJobStatusesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*status_models.JobStatus, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key360 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key360 = v
}
    _val361 := &status_models.JobStatus{}
    if err := _val361.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val361), err)
    }
    p.Success[_key360] = _val361
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AiravataGetJobStatusesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetJobStatusesResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Enf = &airavata_errors.ExperimentNotFoundException{}
  if err := p.Enf.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Enf), err)
  }
  return nil
}

func (p *AiravataGetJobStatusesResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetJobStatusesResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetJobStatusesResult)  ReadField5(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetJobStatusesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getJobStatuses_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetJobStatusesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetJobStatusesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetJobStatusesResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetEnf() {
    if err := oprot.WriteFieldBegin("enf", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:enf: ", p), err) }
    if err := p.Enf.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Enf), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:enf: ", p), err) }
  }
  return err
}

func (p *AiravataGetJobStatusesResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetJobStatusesResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetJobStatusesResult) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetJobStatusesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetJobStatusesResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - AiravataExperimentId
type AiravataGetJobDetailsArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  AiravataExperimentId string `thrift:"airavataExperimentId,2,required" db:"airavataExperimentId" json:"airavataExperimentId"`
}

func NewAiravataGetJobDetailsArgs() *AiravataGetJobDetailsArgs {
  return &AiravataGetJobDetailsArgs{}
}

var AiravataGetJobDetailsArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetJobDetailsArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetJobDetailsArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetJobDetailsArgs) GetAiravataExperimentId() string {
  return p.AiravataExperimentId
}
func (p *AiravataGetJobDetailsArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetJobDetailsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetAiravataExperimentId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAiravataExperimentId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetAiravataExperimentId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AiravataExperimentId is not set"));
  }
  return nil
}

func (p *AiravataGetJobDetailsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetJobDetailsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AiravataExperimentId = v
}
  return nil
}

func (p *AiravataGetJobDetailsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getJobDetails_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetJobDetailsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetJobDetailsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("airavataExperimentId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:airavataExperimentId: ", p), err) }
  if err := oprot.WriteString(string(p.AiravataExperimentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.airavataExperimentId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:airavataExperimentId: ", p), err) }
  return err
}

func (p *AiravataGetJobDetailsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetJobDetailsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Enf
//  - Ace
//  - Ase
//  - Ae
type AiravataGetJobDetailsResult struct {
  Success []*job_model.JobModel `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Enf *airavata_errors.ExperimentNotFoundException `thrift:"enf,2" db:"enf" json:"enf,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,3" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,4" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,5" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetJobDetailsResult() *AiravataGetJobDetailsResult {
  return &AiravataGetJobDetailsResult{}
}

var AiravataGetJobDetailsResult_Success_DEFAULT []*job_model.JobModel

func (p *AiravataGetJobDetailsResult) GetSuccess() []*job_model.JobModel {
  return p.Success
}
var AiravataGetJobDetailsResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetJobDetailsResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetJobDetailsResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetJobDetailsResult_Enf_DEFAULT *airavata_errors.ExperimentNotFoundException
func (p *AiravataGetJobDetailsResult) GetEnf() *airavata_errors.ExperimentNotFoundException {
  if !p.IsSetEnf() {
    return AiravataGetJobDetailsResult_Enf_DEFAULT
  }
return p.Enf
}
var AiravataGetJobDetailsResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetJobDetailsResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetJobDetailsResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetJobDetailsResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetJobDetailsResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetJobDetailsResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetJobDetailsResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetJobDetailsResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetJobDetailsResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetJobDetailsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetJobDetailsResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetJobDetailsResult) IsSetEnf() bool {
  return p.Enf != nil
}

func (p *AiravataGetJobDetailsResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetJobDetailsResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetJobDetailsResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetJobDetailsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetJobDetailsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*job_model.JobModel, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem362 := &job_model.JobModel{}
    if err := _elem362.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem362), err)
    }
    p.Success = append(p.Success, _elem362)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AiravataGetJobDetailsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetJobDetailsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Enf = &airavata_errors.ExperimentNotFoundException{}
  if err := p.Enf.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Enf), err)
  }
  return nil
}

func (p *AiravataGetJobDetailsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetJobDetailsResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetJobDetailsResult)  ReadField5(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetJobDetailsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getJobDetails_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetJobDetailsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetJobDetailsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetJobDetailsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetEnf() {
    if err := oprot.WriteFieldBegin("enf", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:enf: ", p), err) }
    if err := p.Enf.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Enf), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:enf: ", p), err) }
  }
  return err
}

func (p *AiravataGetJobDetailsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetJobDetailsResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetJobDetailsResult) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetJobDetailsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetJobDetailsResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - ExistingExperimentID
//  - NewExperimentName_
//  - NewExperimentProjectId_
type AiravataCloneExperimentArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  ExistingExperimentID string `thrift:"existingExperimentID,2" db:"existingExperimentID" json:"existingExperimentID"`
  NewExperimentName_ string `thrift:"newExperimentName,3" db:"newExperimentName" json:"newExperimentName"`
  NewExperimentProjectId_ string `thrift:"newExperimentProjectId,4" db:"newExperimentProjectId" json:"newExperimentProjectId"`
}

func NewAiravataCloneExperimentArgs() *AiravataCloneExperimentArgs {
  return &AiravataCloneExperimentArgs{}
}

var AiravataCloneExperimentArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataCloneExperimentArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataCloneExperimentArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataCloneExperimentArgs) GetExistingExperimentID() string {
  return p.ExistingExperimentID
}

func (p *AiravataCloneExperimentArgs) GetNewExperimentName_() string {
  return p.NewExperimentName_
}

func (p *AiravataCloneExperimentArgs) GetNewExperimentProjectId_() string {
  return p.NewExperimentProjectId_
}
func (p *AiravataCloneExperimentArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataCloneExperimentArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  return nil
}

func (p *AiravataCloneExperimentArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataCloneExperimentArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ExistingExperimentID = v
}
  return nil
}

func (p *AiravataCloneExperimentArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NewExperimentName_ = v
}
  return nil
}

func (p *AiravataCloneExperimentArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NewExperimentProjectId_ = v
}
  return nil
}

func (p *AiravataCloneExperimentArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("cloneExperiment_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataCloneExperimentArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataCloneExperimentArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("existingExperimentID", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:existingExperimentID: ", p), err) }
  if err := oprot.WriteString(string(p.ExistingExperimentID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.existingExperimentID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:existingExperimentID: ", p), err) }
  return err
}

func (p *AiravataCloneExperimentArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("newExperimentName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:newExperimentName: ", p), err) }
  if err := oprot.WriteString(string(p.NewExperimentName_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.newExperimentName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:newExperimentName: ", p), err) }
  return err
}

func (p *AiravataCloneExperimentArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("newExperimentProjectId", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:newExperimentProjectId: ", p), err) }
  if err := oprot.WriteString(string(p.NewExperimentProjectId_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.newExperimentProjectId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:newExperimentProjectId: ", p), err) }
  return err
}

func (p *AiravataCloneExperimentArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataCloneExperimentArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Enf
//  - Ace
//  - Ase
//  - Ae
//  - Pnfe
type AiravataCloneExperimentResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Enf *airavata_errors.ExperimentNotFoundException `thrift:"enf,2" db:"enf" json:"enf,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,3" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,4" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,5" db:"ae" json:"ae,omitempty"`
  Pnfe *airavata_errors.ProjectNotFoundException `thrift:"pnfe,6" db:"pnfe" json:"pnfe,omitempty"`
}

func NewAiravataCloneExperimentResult() *AiravataCloneExperimentResult {
  return &AiravataCloneExperimentResult{}
}

var AiravataCloneExperimentResult_Success_DEFAULT string
func (p *AiravataCloneExperimentResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return AiravataCloneExperimentResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataCloneExperimentResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataCloneExperimentResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataCloneExperimentResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataCloneExperimentResult_Enf_DEFAULT *airavata_errors.ExperimentNotFoundException
func (p *AiravataCloneExperimentResult) GetEnf() *airavata_errors.ExperimentNotFoundException {
  if !p.IsSetEnf() {
    return AiravataCloneExperimentResult_Enf_DEFAULT
  }
return p.Enf
}
var AiravataCloneExperimentResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataCloneExperimentResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataCloneExperimentResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataCloneExperimentResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataCloneExperimentResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataCloneExperimentResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataCloneExperimentResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataCloneExperimentResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataCloneExperimentResult_Ae_DEFAULT
  }
return p.Ae
}
var AiravataCloneExperimentResult_Pnfe_DEFAULT *airavata_errors.ProjectNotFoundException
func (p *AiravataCloneExperimentResult) GetPnfe() *airavata_errors.ProjectNotFoundException {
  if !p.IsSetPnfe() {
    return AiravataCloneExperimentResult_Pnfe_DEFAULT
  }
return p.Pnfe
}
func (p *AiravataCloneExperimentResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataCloneExperimentResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataCloneExperimentResult) IsSetEnf() bool {
  return p.Enf != nil
}

func (p *AiravataCloneExperimentResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataCloneExperimentResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataCloneExperimentResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataCloneExperimentResult) IsSetPnfe() bool {
  return p.Pnfe != nil
}

func (p *AiravataCloneExperimentResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataCloneExperimentResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataCloneExperimentResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataCloneExperimentResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Enf = &airavata_errors.ExperimentNotFoundException{}
  if err := p.Enf.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Enf), err)
  }
  return nil
}

func (p *AiravataCloneExperimentResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataCloneExperimentResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataCloneExperimentResult)  ReadField5(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataCloneExperimentResult)  ReadField6(iprot thrift.TProtocol) error {
  p.Pnfe = &airavata_errors.ProjectNotFoundException{}
  if err := p.Pnfe.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Pnfe), err)
  }
  return nil
}

func (p *AiravataCloneExperimentResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("cloneExperiment_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataCloneExperimentResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataCloneExperimentResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataCloneExperimentResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetEnf() {
    if err := oprot.WriteFieldBegin("enf", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:enf: ", p), err) }
    if err := p.Enf.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Enf), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:enf: ", p), err) }
  }
  return err
}

func (p *AiravataCloneExperimentResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ace: ", p), err) }
  }
  return err
}

func (p *AiravataCloneExperimentResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ase: ", p), err) }
  }
  return err
}

func (p *AiravataCloneExperimentResult) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ae: ", p), err) }
  }
  return err
}

func (p *AiravataCloneExperimentResult) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetPnfe() {
    if err := oprot.WriteFieldBegin("pnfe", thrift.STRUCT, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:pnfe: ", p), err) }
    if err := p.Pnfe.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Pnfe), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:pnfe: ", p), err) }
  }
  return err
}

func (p *AiravataCloneExperimentResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataCloneExperimentResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - ExistingExperimentID
//  - NewExperimentName_
//  - NewExperimentProjectId_
type AiravataCloneExperimentByAdminArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  ExistingExperimentID string `thrift:"existingExperimentID,2" db:"existingExperimentID" json:"existingExperimentID"`
  NewExperimentName_ string `thrift:"newExperimentName,3" db:"newExperimentName" json:"newExperimentName"`
  NewExperimentProjectId_ string `thrift:"newExperimentProjectId,4" db:"newExperimentProjectId" json:"newExperimentProjectId"`
}

func NewAiravataCloneExperimentByAdminArgs() *AiravataCloneExperimentByAdminArgs {
  return &AiravataCloneExperimentByAdminArgs{}
}

var AiravataCloneExperimentByAdminArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataCloneExperimentByAdminArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataCloneExperimentByAdminArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataCloneExperimentByAdminArgs) GetExistingExperimentID() string {
  return p.ExistingExperimentID
}

func (p *AiravataCloneExperimentByAdminArgs) GetNewExperimentName_() string {
  return p.NewExperimentName_
}

func (p *AiravataCloneExperimentByAdminArgs) GetNewExperimentProjectId_() string {
  return p.NewExperimentProjectId_
}
func (p *AiravataCloneExperimentByAdminArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataCloneExperimentByAdminArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  return nil
}

func (p *AiravataCloneExperimentByAdminArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataCloneExperimentByAdminArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ExistingExperimentID = v
}
  return nil
}

func (p *AiravataCloneExperimentByAdminArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NewExperimentName_ = v
}
  return nil
}

func (p *AiravataCloneExperimentByAdminArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NewExperimentProjectId_ = v
}
  return nil
}

func (p *AiravataCloneExperimentByAdminArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("cloneExperimentByAdmin_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataCloneExperimentByAdminArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataCloneExperimentByAdminArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("existingExperimentID", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:existingExperimentID: ", p), err) }
  if err := oprot.WriteString(string(p.ExistingExperimentID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.existingExperimentID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:existingExperimentID: ", p), err) }
  return err
}

func (p *AiravataCloneExperimentByAdminArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("newExperimentName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:newExperimentName: ", p), err) }
  if err := oprot.WriteString(string(p.NewExperimentName_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.newExperimentName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:newExperimentName: ", p), err) }
  return err
}

func (p *AiravataCloneExperimentByAdminArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("newExperimentProjectId", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:newExperimentProjectId: ", p), err) }
  if err := oprot.WriteString(string(p.NewExperimentProjectId_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.newExperimentProjectId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:newExperimentProjectId: ", p), err) }
  return err
}

func (p *AiravataCloneExperimentByAdminArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataCloneExperimentByAdminArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Enf
//  - Ace
//  - Ase
//  - Ae
//  - Pnfe
type AiravataCloneExperimentByAdminResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Enf *airavata_errors.ExperimentNotFoundException `thrift:"enf,2" db:"enf" json:"enf,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,3" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,4" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,5" db:"ae" json:"ae,omitempty"`
  Pnfe *airavata_errors.ProjectNotFoundException `thrift:"pnfe,6" db:"pnfe" json:"pnfe,omitempty"`
}

func NewAiravataCloneExperimentByAdminResult() *AiravataCloneExperimentByAdminResult {
  return &AiravataCloneExperimentByAdminResult{}
}

var AiravataCloneExperimentByAdminResult_Success_DEFAULT string
func (p *AiravataCloneExperimentByAdminResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return AiravataCloneExperimentByAdminResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataCloneExperimentByAdminResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataCloneExperimentByAdminResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataCloneExperimentByAdminResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataCloneExperimentByAdminResult_Enf_DEFAULT *airavata_errors.ExperimentNotFoundException
func (p *AiravataCloneExperimentByAdminResult) GetEnf() *airavata_errors.ExperimentNotFoundException {
  if !p.IsSetEnf() {
    return AiravataCloneExperimentByAdminResult_Enf_DEFAULT
  }
return p.Enf
}
var AiravataCloneExperimentByAdminResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataCloneExperimentByAdminResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataCloneExperimentByAdminResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataCloneExperimentByAdminResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataCloneExperimentByAdminResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataCloneExperimentByAdminResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataCloneExperimentByAdminResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataCloneExperimentByAdminResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataCloneExperimentByAdminResult_Ae_DEFAULT
  }
return p.Ae
}
var AiravataCloneExperimentByAdminResult_Pnfe_DEFAULT *airavata_errors.ProjectNotFoundException
func (p *AiravataCloneExperimentByAdminResult) GetPnfe() *airavata_errors.ProjectNotFoundException {
  if !p.IsSetPnfe() {
    return AiravataCloneExperimentByAdminResult_Pnfe_DEFAULT
  }
return p.Pnfe
}
func (p *AiravataCloneExperimentByAdminResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataCloneExperimentByAdminResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataCloneExperimentByAdminResult) IsSetEnf() bool {
  return p.Enf != nil
}

func (p *AiravataCloneExperimentByAdminResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataCloneExperimentByAdminResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataCloneExperimentByAdminResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataCloneExperimentByAdminResult) IsSetPnfe() bool {
  return p.Pnfe != nil
}

func (p *AiravataCloneExperimentByAdminResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataCloneExperimentByAdminResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataCloneExperimentByAdminResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataCloneExperimentByAdminResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Enf = &airavata_errors.ExperimentNotFoundException{}
  if err := p.Enf.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Enf), err)
  }
  return nil
}

func (p *AiravataCloneExperimentByAdminResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataCloneExperimentByAdminResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataCloneExperimentByAdminResult)  ReadField5(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataCloneExperimentByAdminResult)  ReadField6(iprot thrift.TProtocol) error {
  p.Pnfe = &airavata_errors.ProjectNotFoundException{}
  if err := p.Pnfe.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Pnfe), err)
  }
  return nil
}

func (p *AiravataCloneExperimentByAdminResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("cloneExperimentByAdmin_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataCloneExperimentByAdminResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataCloneExperimentByAdminResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataCloneExperimentByAdminResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetEnf() {
    if err := oprot.WriteFieldBegin("enf", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:enf: ", p), err) }
    if err := p.Enf.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Enf), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:enf: ", p), err) }
  }
  return err
}

func (p *AiravataCloneExperimentByAdminResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ace: ", p), err) }
  }
  return err
}

func (p *AiravataCloneExperimentByAdminResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ase: ", p), err) }
  }
  return err
}

func (p *AiravataCloneExperimentByAdminResult) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ae: ", p), err) }
  }
  return err
}

func (p *AiravataCloneExperimentByAdminResult) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetPnfe() {
    if err := oprot.WriteFieldBegin("pnfe", thrift.STRUCT, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:pnfe: ", p), err) }
    if err := p.Pnfe.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Pnfe), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:pnfe: ", p), err) }
  }
  return err
}

func (p *AiravataCloneExperimentByAdminResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataCloneExperimentByAdminResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - AiravataExperimentId
//  - GatewayId
type AiravataTerminateExperimentArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  AiravataExperimentId string `thrift:"airavataExperimentId,2" db:"airavataExperimentId" json:"airavataExperimentId"`
  GatewayId string `thrift:"gatewayId,3" db:"gatewayId" json:"gatewayId"`
}

func NewAiravataTerminateExperimentArgs() *AiravataTerminateExperimentArgs {
  return &AiravataTerminateExperimentArgs{}
}

var AiravataTerminateExperimentArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataTerminateExperimentArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataTerminateExperimentArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataTerminateExperimentArgs) GetAiravataExperimentId() string {
  return p.AiravataExperimentId
}

func (p *AiravataTerminateExperimentArgs) GetGatewayId() string {
  return p.GatewayId
}
func (p *AiravataTerminateExperimentArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataTerminateExperimentArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  return nil
}

func (p *AiravataTerminateExperimentArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataTerminateExperimentArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AiravataExperimentId = v
}
  return nil
}

func (p *AiravataTerminateExperimentArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *AiravataTerminateExperimentArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("terminateExperiment_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataTerminateExperimentArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataTerminateExperimentArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("airavataExperimentId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:airavataExperimentId: ", p), err) }
  if err := oprot.WriteString(string(p.AiravataExperimentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.airavataExperimentId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:airavataExperimentId: ", p), err) }
  return err
}

func (p *AiravataTerminateExperimentArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gatewayId: ", p), err) }
  return err
}

func (p *AiravataTerminateExperimentArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataTerminateExperimentArgs(%+v)", *p)
}

// Attributes:
//  - Ire
//  - Enf
//  - Ace
//  - Ase
//  - Ae
type AiravataTerminateExperimentResult struct {
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Enf *airavata_errors.ExperimentNotFoundException `thrift:"enf,2" db:"enf" json:"enf,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,3" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,4" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,5" db:"ae" json:"ae,omitempty"`
}

func NewAiravataTerminateExperimentResult() *AiravataTerminateExperimentResult {
  return &AiravataTerminateExperimentResult{}
}

var AiravataTerminateExperimentResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataTerminateExperimentResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataTerminateExperimentResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataTerminateExperimentResult_Enf_DEFAULT *airavata_errors.ExperimentNotFoundException
func (p *AiravataTerminateExperimentResult) GetEnf() *airavata_errors.ExperimentNotFoundException {
  if !p.IsSetEnf() {
    return AiravataTerminateExperimentResult_Enf_DEFAULT
  }
return p.Enf
}
var AiravataTerminateExperimentResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataTerminateExperimentResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataTerminateExperimentResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataTerminateExperimentResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataTerminateExperimentResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataTerminateExperimentResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataTerminateExperimentResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataTerminateExperimentResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataTerminateExperimentResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataTerminateExperimentResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataTerminateExperimentResult) IsSetEnf() bool {
  return p.Enf != nil
}

func (p *AiravataTerminateExperimentResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataTerminateExperimentResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataTerminateExperimentResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataTerminateExperimentResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataTerminateExperimentResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataTerminateExperimentResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Enf = &airavata_errors.ExperimentNotFoundException{}
  if err := p.Enf.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Enf), err)
  }
  return nil
}

func (p *AiravataTerminateExperimentResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataTerminateExperimentResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataTerminateExperimentResult)  ReadField5(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataTerminateExperimentResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("terminateExperiment_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataTerminateExperimentResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataTerminateExperimentResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetEnf() {
    if err := oprot.WriteFieldBegin("enf", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:enf: ", p), err) }
    if err := p.Enf.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Enf), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:enf: ", p), err) }
  }
  return err
}

func (p *AiravataTerminateExperimentResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ace: ", p), err) }
  }
  return err
}

func (p *AiravataTerminateExperimentResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ase: ", p), err) }
  }
  return err
}

func (p *AiravataTerminateExperimentResult) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ae: ", p), err) }
  }
  return err
}

func (p *AiravataTerminateExperimentResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataTerminateExperimentResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GatewayId
//  - ApplicationModule
type AiravataRegisterApplicationModuleArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GatewayId string `thrift:"gatewayId,2,required" db:"gatewayId" json:"gatewayId"`
  ApplicationModule *application_deployment_model.ApplicationModule `thrift:"applicationModule,3,required" db:"applicationModule" json:"applicationModule"`
}

func NewAiravataRegisterApplicationModuleArgs() *AiravataRegisterApplicationModuleArgs {
  return &AiravataRegisterApplicationModuleArgs{}
}

var AiravataRegisterApplicationModuleArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataRegisterApplicationModuleArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataRegisterApplicationModuleArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataRegisterApplicationModuleArgs) GetGatewayId() string {
  return p.GatewayId
}
var AiravataRegisterApplicationModuleArgs_ApplicationModule_DEFAULT *application_deployment_model.ApplicationModule
func (p *AiravataRegisterApplicationModuleArgs) GetApplicationModule() *application_deployment_model.ApplicationModule {
  if !p.IsSetApplicationModule() {
    return AiravataRegisterApplicationModuleArgs_ApplicationModule_DEFAULT
  }
return p.ApplicationModule
}
func (p *AiravataRegisterApplicationModuleArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataRegisterApplicationModuleArgs) IsSetApplicationModule() bool {
  return p.ApplicationModule != nil
}

func (p *AiravataRegisterApplicationModuleArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGatewayId bool = false;
  var issetApplicationModule bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetApplicationModule = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  if !issetApplicationModule{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ApplicationModule is not set"));
  }
  return nil
}

func (p *AiravataRegisterApplicationModuleArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataRegisterApplicationModuleArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *AiravataRegisterApplicationModuleArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.ApplicationModule = &application_deployment_model.ApplicationModule{
  AppModuleId: "DO_NOT_SET_AT_CLIENTS",
}
  if err := p.ApplicationModule.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ApplicationModule), err)
  }
  return nil
}

func (p *AiravataRegisterApplicationModuleArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerApplicationModule_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataRegisterApplicationModuleArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataRegisterApplicationModuleArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayId: ", p), err) }
  return err
}

func (p *AiravataRegisterApplicationModuleArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("applicationModule", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:applicationModule: ", p), err) }
  if err := p.ApplicationModule.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ApplicationModule), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:applicationModule: ", p), err) }
  return err
}

func (p *AiravataRegisterApplicationModuleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataRegisterApplicationModuleArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataRegisterApplicationModuleResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataRegisterApplicationModuleResult() *AiravataRegisterApplicationModuleResult {
  return &AiravataRegisterApplicationModuleResult{}
}

var AiravataRegisterApplicationModuleResult_Success_DEFAULT string
func (p *AiravataRegisterApplicationModuleResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return AiravataRegisterApplicationModuleResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataRegisterApplicationModuleResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataRegisterApplicationModuleResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataRegisterApplicationModuleResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataRegisterApplicationModuleResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataRegisterApplicationModuleResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataRegisterApplicationModuleResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataRegisterApplicationModuleResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataRegisterApplicationModuleResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataRegisterApplicationModuleResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataRegisterApplicationModuleResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataRegisterApplicationModuleResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataRegisterApplicationModuleResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataRegisterApplicationModuleResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataRegisterApplicationModuleResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataRegisterApplicationModuleResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataRegisterApplicationModuleResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataRegisterApplicationModuleResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataRegisterApplicationModuleResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataRegisterApplicationModuleResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataRegisterApplicationModuleResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataRegisterApplicationModuleResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataRegisterApplicationModuleResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataRegisterApplicationModuleResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataRegisterApplicationModuleResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerApplicationModule_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataRegisterApplicationModuleResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterApplicationModuleResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterApplicationModuleResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterApplicationModuleResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterApplicationModuleResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterApplicationModuleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataRegisterApplicationModuleResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - AppModuleId
type AiravataGetApplicationModuleArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  AppModuleId string `thrift:"appModuleId,2,required" db:"appModuleId" json:"appModuleId"`
}

func NewAiravataGetApplicationModuleArgs() *AiravataGetApplicationModuleArgs {
  return &AiravataGetApplicationModuleArgs{}
}

var AiravataGetApplicationModuleArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetApplicationModuleArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetApplicationModuleArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetApplicationModuleArgs) GetAppModuleId() string {
  return p.AppModuleId
}
func (p *AiravataGetApplicationModuleArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetApplicationModuleArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetAppModuleId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAppModuleId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetAppModuleId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AppModuleId is not set"));
  }
  return nil
}

func (p *AiravataGetApplicationModuleArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetApplicationModuleArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AppModuleId = v
}
  return nil
}

func (p *AiravataGetApplicationModuleArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getApplicationModule_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetApplicationModuleArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetApplicationModuleArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appModuleId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appModuleId: ", p), err) }
  if err := oprot.WriteString(string(p.AppModuleId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appModuleId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appModuleId: ", p), err) }
  return err
}

func (p *AiravataGetApplicationModuleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetApplicationModuleArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetApplicationModuleResult struct {
  Success *application_deployment_model.ApplicationModule `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetApplicationModuleResult() *AiravataGetApplicationModuleResult {
  return &AiravataGetApplicationModuleResult{}
}

var AiravataGetApplicationModuleResult_Success_DEFAULT *application_deployment_model.ApplicationModule
func (p *AiravataGetApplicationModuleResult) GetSuccess() *application_deployment_model.ApplicationModule {
  if !p.IsSetSuccess() {
    return AiravataGetApplicationModuleResult_Success_DEFAULT
  }
return p.Success
}
var AiravataGetApplicationModuleResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetApplicationModuleResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetApplicationModuleResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetApplicationModuleResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetApplicationModuleResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetApplicationModuleResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetApplicationModuleResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetApplicationModuleResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetApplicationModuleResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetApplicationModuleResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetApplicationModuleResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetApplicationModuleResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetApplicationModuleResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetApplicationModuleResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetApplicationModuleResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetApplicationModuleResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetApplicationModuleResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetApplicationModuleResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetApplicationModuleResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &application_deployment_model.ApplicationModule{
  AppModuleId: "DO_NOT_SET_AT_CLIENTS",
}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AiravataGetApplicationModuleResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetApplicationModuleResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetApplicationModuleResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetApplicationModuleResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetApplicationModuleResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getApplicationModule_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetApplicationModuleResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetApplicationModuleResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetApplicationModuleResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetApplicationModuleResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetApplicationModuleResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetApplicationModuleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetApplicationModuleResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - AppModuleId
//  - ApplicationModule
type AiravataUpdateApplicationModuleArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  AppModuleId string `thrift:"appModuleId,2,required" db:"appModuleId" json:"appModuleId"`
  ApplicationModule *application_deployment_model.ApplicationModule `thrift:"applicationModule,3,required" db:"applicationModule" json:"applicationModule"`
}

func NewAiravataUpdateApplicationModuleArgs() *AiravataUpdateApplicationModuleArgs {
  return &AiravataUpdateApplicationModuleArgs{}
}

var AiravataUpdateApplicationModuleArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataUpdateApplicationModuleArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataUpdateApplicationModuleArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataUpdateApplicationModuleArgs) GetAppModuleId() string {
  return p.AppModuleId
}
var AiravataUpdateApplicationModuleArgs_ApplicationModule_DEFAULT *application_deployment_model.ApplicationModule
func (p *AiravataUpdateApplicationModuleArgs) GetApplicationModule() *application_deployment_model.ApplicationModule {
  if !p.IsSetApplicationModule() {
    return AiravataUpdateApplicationModuleArgs_ApplicationModule_DEFAULT
  }
return p.ApplicationModule
}
func (p *AiravataUpdateApplicationModuleArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataUpdateApplicationModuleArgs) IsSetApplicationModule() bool {
  return p.ApplicationModule != nil
}

func (p *AiravataUpdateApplicationModuleArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetAppModuleId bool = false;
  var issetApplicationModule bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAppModuleId = true
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetApplicationModule = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetAppModuleId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AppModuleId is not set"));
  }
  if !issetApplicationModule{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ApplicationModule is not set"));
  }
  return nil
}

func (p *AiravataUpdateApplicationModuleArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataUpdateApplicationModuleArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AppModuleId = v
}
  return nil
}

func (p *AiravataUpdateApplicationModuleArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.ApplicationModule = &application_deployment_model.ApplicationModule{
  AppModuleId: "DO_NOT_SET_AT_CLIENTS",
}
  if err := p.ApplicationModule.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ApplicationModule), err)
  }
  return nil
}

func (p *AiravataUpdateApplicationModuleArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateApplicationModule_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateApplicationModuleArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataUpdateApplicationModuleArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appModuleId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appModuleId: ", p), err) }
  if err := oprot.WriteString(string(p.AppModuleId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appModuleId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appModuleId: ", p), err) }
  return err
}

func (p *AiravataUpdateApplicationModuleArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("applicationModule", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:applicationModule: ", p), err) }
  if err := p.ApplicationModule.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ApplicationModule), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:applicationModule: ", p), err) }
  return err
}

func (p *AiravataUpdateApplicationModuleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateApplicationModuleArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataUpdateApplicationModuleResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataUpdateApplicationModuleResult() *AiravataUpdateApplicationModuleResult {
  return &AiravataUpdateApplicationModuleResult{}
}

var AiravataUpdateApplicationModuleResult_Success_DEFAULT bool
func (p *AiravataUpdateApplicationModuleResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataUpdateApplicationModuleResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataUpdateApplicationModuleResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataUpdateApplicationModuleResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataUpdateApplicationModuleResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataUpdateApplicationModuleResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataUpdateApplicationModuleResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataUpdateApplicationModuleResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataUpdateApplicationModuleResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataUpdateApplicationModuleResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataUpdateApplicationModuleResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataUpdateApplicationModuleResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataUpdateApplicationModuleResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataUpdateApplicationModuleResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataUpdateApplicationModuleResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataUpdateApplicationModuleResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataUpdateApplicationModuleResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataUpdateApplicationModuleResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataUpdateApplicationModuleResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataUpdateApplicationModuleResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataUpdateApplicationModuleResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataUpdateApplicationModuleResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataUpdateApplicationModuleResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataUpdateApplicationModuleResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataUpdateApplicationModuleResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataUpdateApplicationModuleResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateApplicationModule_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateApplicationModuleResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateApplicationModuleResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateApplicationModuleResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateApplicationModuleResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateApplicationModuleResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateApplicationModuleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateApplicationModuleResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GatewayId
type AiravataGetAllAppModulesArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GatewayId string `thrift:"gatewayId,2,required" db:"gatewayId" json:"gatewayId"`
}

func NewAiravataGetAllAppModulesArgs() *AiravataGetAllAppModulesArgs {
  return &AiravataGetAllAppModulesArgs{}
}

var AiravataGetAllAppModulesArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetAllAppModulesArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetAllAppModulesArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetAllAppModulesArgs) GetGatewayId() string {
  return p.GatewayId
}
func (p *AiravataGetAllAppModulesArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetAllAppModulesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGatewayId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  return nil
}

func (p *AiravataGetAllAppModulesArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetAllAppModulesArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *AiravataGetAllAppModulesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllAppModules_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAllAppModulesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetAllAppModulesArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayId: ", p), err) }
  return err
}

func (p *AiravataGetAllAppModulesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAllAppModulesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetAllAppModulesResult struct {
  Success []*application_deployment_model.ApplicationModule `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetAllAppModulesResult() *AiravataGetAllAppModulesResult {
  return &AiravataGetAllAppModulesResult{}
}

var AiravataGetAllAppModulesResult_Success_DEFAULT []*application_deployment_model.ApplicationModule

func (p *AiravataGetAllAppModulesResult) GetSuccess() []*application_deployment_model.ApplicationModule {
  return p.Success
}
var AiravataGetAllAppModulesResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetAllAppModulesResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetAllAppModulesResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetAllAppModulesResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetAllAppModulesResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetAllAppModulesResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetAllAppModulesResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetAllAppModulesResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetAllAppModulesResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetAllAppModulesResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetAllAppModulesResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetAllAppModulesResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetAllAppModulesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetAllAppModulesResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetAllAppModulesResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetAllAppModulesResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetAllAppModulesResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetAllAppModulesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetAllAppModulesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*application_deployment_model.ApplicationModule, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem363 := &application_deployment_model.ApplicationModule{
    AppModuleId: "DO_NOT_SET_AT_CLIENTS",
}
    if err := _elem363.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem363), err)
    }
    p.Success = append(p.Success, _elem363)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AiravataGetAllAppModulesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetAllAppModulesResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetAllAppModulesResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetAllAppModulesResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetAllAppModulesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllAppModules_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAllAppModulesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllAppModulesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllAppModulesResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllAppModulesResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllAppModulesResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllAppModulesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAllAppModulesResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - AppModuleId
type AiravataDeleteApplicationModuleArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  AppModuleId string `thrift:"appModuleId,2,required" db:"appModuleId" json:"appModuleId"`
}

func NewAiravataDeleteApplicationModuleArgs() *AiravataDeleteApplicationModuleArgs {
  return &AiravataDeleteApplicationModuleArgs{}
}

var AiravataDeleteApplicationModuleArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataDeleteApplicationModuleArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataDeleteApplicationModuleArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataDeleteApplicationModuleArgs) GetAppModuleId() string {
  return p.AppModuleId
}
func (p *AiravataDeleteApplicationModuleArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataDeleteApplicationModuleArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetAppModuleId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAppModuleId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetAppModuleId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AppModuleId is not set"));
  }
  return nil
}

func (p *AiravataDeleteApplicationModuleArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataDeleteApplicationModuleArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AppModuleId = v
}
  return nil
}

func (p *AiravataDeleteApplicationModuleArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteApplicationModule_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeleteApplicationModuleArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataDeleteApplicationModuleArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appModuleId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appModuleId: ", p), err) }
  if err := oprot.WriteString(string(p.AppModuleId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appModuleId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appModuleId: ", p), err) }
  return err
}

func (p *AiravataDeleteApplicationModuleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeleteApplicationModuleArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataDeleteApplicationModuleResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataDeleteApplicationModuleResult() *AiravataDeleteApplicationModuleResult {
  return &AiravataDeleteApplicationModuleResult{}
}

var AiravataDeleteApplicationModuleResult_Success_DEFAULT bool
func (p *AiravataDeleteApplicationModuleResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataDeleteApplicationModuleResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataDeleteApplicationModuleResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataDeleteApplicationModuleResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataDeleteApplicationModuleResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataDeleteApplicationModuleResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataDeleteApplicationModuleResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataDeleteApplicationModuleResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataDeleteApplicationModuleResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataDeleteApplicationModuleResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataDeleteApplicationModuleResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataDeleteApplicationModuleResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataDeleteApplicationModuleResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataDeleteApplicationModuleResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataDeleteApplicationModuleResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataDeleteApplicationModuleResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataDeleteApplicationModuleResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataDeleteApplicationModuleResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataDeleteApplicationModuleResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataDeleteApplicationModuleResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataDeleteApplicationModuleResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataDeleteApplicationModuleResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataDeleteApplicationModuleResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataDeleteApplicationModuleResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataDeleteApplicationModuleResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataDeleteApplicationModuleResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteApplicationModule_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeleteApplicationModuleResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteApplicationModuleResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteApplicationModuleResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteApplicationModuleResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteApplicationModuleResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteApplicationModuleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeleteApplicationModuleResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GatewayId
//  - ApplicationDeployment
type AiravataRegisterApplicationDeploymentArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GatewayId string `thrift:"gatewayId,2,required" db:"gatewayId" json:"gatewayId"`
  ApplicationDeployment *application_deployment_model.ApplicationDeploymentDescription `thrift:"applicationDeployment,3,required" db:"applicationDeployment" json:"applicationDeployment"`
}

func NewAiravataRegisterApplicationDeploymentArgs() *AiravataRegisterApplicationDeploymentArgs {
  return &AiravataRegisterApplicationDeploymentArgs{}
}

var AiravataRegisterApplicationDeploymentArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataRegisterApplicationDeploymentArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataRegisterApplicationDeploymentArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataRegisterApplicationDeploymentArgs) GetGatewayId() string {
  return p.GatewayId
}
var AiravataRegisterApplicationDeploymentArgs_ApplicationDeployment_DEFAULT *application_deployment_model.ApplicationDeploymentDescription
func (p *AiravataRegisterApplicationDeploymentArgs) GetApplicationDeployment() *application_deployment_model.ApplicationDeploymentDescription {
  if !p.IsSetApplicationDeployment() {
    return AiravataRegisterApplicationDeploymentArgs_ApplicationDeployment_DEFAULT
  }
return p.ApplicationDeployment
}
func (p *AiravataRegisterApplicationDeploymentArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataRegisterApplicationDeploymentArgs) IsSetApplicationDeployment() bool {
  return p.ApplicationDeployment != nil
}

func (p *AiravataRegisterApplicationDeploymentArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGatewayId bool = false;
  var issetApplicationDeployment bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetApplicationDeployment = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  if !issetApplicationDeployment{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ApplicationDeployment is not set"));
  }
  return nil
}

func (p *AiravataRegisterApplicationDeploymentArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataRegisterApplicationDeploymentArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *AiravataRegisterApplicationDeploymentArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.ApplicationDeployment = &application_deployment_model.ApplicationDeploymentDescription{
  AppDeploymentId: "DO_NOT_SET_AT_CLIENTS",

  Parallelism:   0,
}
  if err := p.ApplicationDeployment.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ApplicationDeployment), err)
  }
  return nil
}

func (p *AiravataRegisterApplicationDeploymentArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerApplicationDeployment_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataRegisterApplicationDeploymentArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataRegisterApplicationDeploymentArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayId: ", p), err) }
  return err
}

func (p *AiravataRegisterApplicationDeploymentArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("applicationDeployment", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:applicationDeployment: ", p), err) }
  if err := p.ApplicationDeployment.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ApplicationDeployment), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:applicationDeployment: ", p), err) }
  return err
}

func (p *AiravataRegisterApplicationDeploymentArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataRegisterApplicationDeploymentArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataRegisterApplicationDeploymentResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataRegisterApplicationDeploymentResult() *AiravataRegisterApplicationDeploymentResult {
  return &AiravataRegisterApplicationDeploymentResult{}
}

var AiravataRegisterApplicationDeploymentResult_Success_DEFAULT string
func (p *AiravataRegisterApplicationDeploymentResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return AiravataRegisterApplicationDeploymentResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataRegisterApplicationDeploymentResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataRegisterApplicationDeploymentResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataRegisterApplicationDeploymentResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataRegisterApplicationDeploymentResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataRegisterApplicationDeploymentResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataRegisterApplicationDeploymentResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataRegisterApplicationDeploymentResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataRegisterApplicationDeploymentResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataRegisterApplicationDeploymentResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataRegisterApplicationDeploymentResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataRegisterApplicationDeploymentResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataRegisterApplicationDeploymentResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataRegisterApplicationDeploymentResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataRegisterApplicationDeploymentResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataRegisterApplicationDeploymentResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataRegisterApplicationDeploymentResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataRegisterApplicationDeploymentResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataRegisterApplicationDeploymentResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataRegisterApplicationDeploymentResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataRegisterApplicationDeploymentResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataRegisterApplicationDeploymentResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataRegisterApplicationDeploymentResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataRegisterApplicationDeploymentResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataRegisterApplicationDeploymentResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerApplicationDeployment_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataRegisterApplicationDeploymentResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterApplicationDeploymentResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterApplicationDeploymentResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterApplicationDeploymentResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterApplicationDeploymentResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterApplicationDeploymentResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataRegisterApplicationDeploymentResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - AppDeploymentId
type AiravataGetApplicationDeploymentArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  AppDeploymentId string `thrift:"appDeploymentId,2,required" db:"appDeploymentId" json:"appDeploymentId"`
}

func NewAiravataGetApplicationDeploymentArgs() *AiravataGetApplicationDeploymentArgs {
  return &AiravataGetApplicationDeploymentArgs{}
}

var AiravataGetApplicationDeploymentArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetApplicationDeploymentArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetApplicationDeploymentArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetApplicationDeploymentArgs) GetAppDeploymentId() string {
  return p.AppDeploymentId
}
func (p *AiravataGetApplicationDeploymentArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetApplicationDeploymentArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetAppDeploymentId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAppDeploymentId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetAppDeploymentId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AppDeploymentId is not set"));
  }
  return nil
}

func (p *AiravataGetApplicationDeploymentArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetApplicationDeploymentArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AppDeploymentId = v
}
  return nil
}

func (p *AiravataGetApplicationDeploymentArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getApplicationDeployment_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetApplicationDeploymentArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetApplicationDeploymentArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appDeploymentId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appDeploymentId: ", p), err) }
  if err := oprot.WriteString(string(p.AppDeploymentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appDeploymentId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appDeploymentId: ", p), err) }
  return err
}

func (p *AiravataGetApplicationDeploymentArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetApplicationDeploymentArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetApplicationDeploymentResult struct {
  Success *application_deployment_model.ApplicationDeploymentDescription `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetApplicationDeploymentResult() *AiravataGetApplicationDeploymentResult {
  return &AiravataGetApplicationDeploymentResult{}
}

var AiravataGetApplicationDeploymentResult_Success_DEFAULT *application_deployment_model.ApplicationDeploymentDescription
func (p *AiravataGetApplicationDeploymentResult) GetSuccess() *application_deployment_model.ApplicationDeploymentDescription {
  if !p.IsSetSuccess() {
    return AiravataGetApplicationDeploymentResult_Success_DEFAULT
  }
return p.Success
}
var AiravataGetApplicationDeploymentResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetApplicationDeploymentResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetApplicationDeploymentResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetApplicationDeploymentResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetApplicationDeploymentResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetApplicationDeploymentResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetApplicationDeploymentResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetApplicationDeploymentResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetApplicationDeploymentResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetApplicationDeploymentResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetApplicationDeploymentResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetApplicationDeploymentResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetApplicationDeploymentResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetApplicationDeploymentResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetApplicationDeploymentResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetApplicationDeploymentResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetApplicationDeploymentResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetApplicationDeploymentResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetApplicationDeploymentResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &application_deployment_model.ApplicationDeploymentDescription{
  AppDeploymentId: "DO_NOT_SET_AT_CLIENTS",

  Parallelism:   0,
}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AiravataGetApplicationDeploymentResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetApplicationDeploymentResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetApplicationDeploymentResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetApplicationDeploymentResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetApplicationDeploymentResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getApplicationDeployment_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetApplicationDeploymentResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetApplicationDeploymentResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetApplicationDeploymentResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetApplicationDeploymentResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetApplicationDeploymentResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetApplicationDeploymentResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetApplicationDeploymentResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - AppDeploymentId
//  - ApplicationDeployment
type AiravataUpdateApplicationDeploymentArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  AppDeploymentId string `thrift:"appDeploymentId,2,required" db:"appDeploymentId" json:"appDeploymentId"`
  ApplicationDeployment *application_deployment_model.ApplicationDeploymentDescription `thrift:"applicationDeployment,3,required" db:"applicationDeployment" json:"applicationDeployment"`
}

func NewAiravataUpdateApplicationDeploymentArgs() *AiravataUpdateApplicationDeploymentArgs {
  return &AiravataUpdateApplicationDeploymentArgs{}
}

var AiravataUpdateApplicationDeploymentArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataUpdateApplicationDeploymentArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataUpdateApplicationDeploymentArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataUpdateApplicationDeploymentArgs) GetAppDeploymentId() string {
  return p.AppDeploymentId
}
var AiravataUpdateApplicationDeploymentArgs_ApplicationDeployment_DEFAULT *application_deployment_model.ApplicationDeploymentDescription
func (p *AiravataUpdateApplicationDeploymentArgs) GetApplicationDeployment() *application_deployment_model.ApplicationDeploymentDescription {
  if !p.IsSetApplicationDeployment() {
    return AiravataUpdateApplicationDeploymentArgs_ApplicationDeployment_DEFAULT
  }
return p.ApplicationDeployment
}
func (p *AiravataUpdateApplicationDeploymentArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataUpdateApplicationDeploymentArgs) IsSetApplicationDeployment() bool {
  return p.ApplicationDeployment != nil
}

func (p *AiravataUpdateApplicationDeploymentArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetAppDeploymentId bool = false;
  var issetApplicationDeployment bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAppDeploymentId = true
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetApplicationDeployment = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetAppDeploymentId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AppDeploymentId is not set"));
  }
  if !issetApplicationDeployment{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ApplicationDeployment is not set"));
  }
  return nil
}

func (p *AiravataUpdateApplicationDeploymentArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataUpdateApplicationDeploymentArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AppDeploymentId = v
}
  return nil
}

func (p *AiravataUpdateApplicationDeploymentArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.ApplicationDeployment = &application_deployment_model.ApplicationDeploymentDescription{
  AppDeploymentId: "DO_NOT_SET_AT_CLIENTS",

  Parallelism:   0,
}
  if err := p.ApplicationDeployment.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ApplicationDeployment), err)
  }
  return nil
}

func (p *AiravataUpdateApplicationDeploymentArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateApplicationDeployment_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateApplicationDeploymentArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataUpdateApplicationDeploymentArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appDeploymentId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appDeploymentId: ", p), err) }
  if err := oprot.WriteString(string(p.AppDeploymentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appDeploymentId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appDeploymentId: ", p), err) }
  return err
}

func (p *AiravataUpdateApplicationDeploymentArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("applicationDeployment", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:applicationDeployment: ", p), err) }
  if err := p.ApplicationDeployment.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ApplicationDeployment), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:applicationDeployment: ", p), err) }
  return err
}

func (p *AiravataUpdateApplicationDeploymentArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateApplicationDeploymentArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataUpdateApplicationDeploymentResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataUpdateApplicationDeploymentResult() *AiravataUpdateApplicationDeploymentResult {
  return &AiravataUpdateApplicationDeploymentResult{}
}

var AiravataUpdateApplicationDeploymentResult_Success_DEFAULT bool
func (p *AiravataUpdateApplicationDeploymentResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataUpdateApplicationDeploymentResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataUpdateApplicationDeploymentResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataUpdateApplicationDeploymentResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataUpdateApplicationDeploymentResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataUpdateApplicationDeploymentResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataUpdateApplicationDeploymentResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataUpdateApplicationDeploymentResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataUpdateApplicationDeploymentResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataUpdateApplicationDeploymentResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataUpdateApplicationDeploymentResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataUpdateApplicationDeploymentResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataUpdateApplicationDeploymentResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataUpdateApplicationDeploymentResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataUpdateApplicationDeploymentResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataUpdateApplicationDeploymentResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataUpdateApplicationDeploymentResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataUpdateApplicationDeploymentResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataUpdateApplicationDeploymentResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataUpdateApplicationDeploymentResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataUpdateApplicationDeploymentResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataUpdateApplicationDeploymentResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataUpdateApplicationDeploymentResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataUpdateApplicationDeploymentResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataUpdateApplicationDeploymentResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataUpdateApplicationDeploymentResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateApplicationDeployment_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateApplicationDeploymentResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateApplicationDeploymentResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateApplicationDeploymentResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateApplicationDeploymentResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateApplicationDeploymentResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateApplicationDeploymentResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateApplicationDeploymentResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - AppDeploymentId
type AiravataDeleteApplicationDeploymentArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  AppDeploymentId string `thrift:"appDeploymentId,2,required" db:"appDeploymentId" json:"appDeploymentId"`
}

func NewAiravataDeleteApplicationDeploymentArgs() *AiravataDeleteApplicationDeploymentArgs {
  return &AiravataDeleteApplicationDeploymentArgs{}
}

var AiravataDeleteApplicationDeploymentArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataDeleteApplicationDeploymentArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataDeleteApplicationDeploymentArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataDeleteApplicationDeploymentArgs) GetAppDeploymentId() string {
  return p.AppDeploymentId
}
func (p *AiravataDeleteApplicationDeploymentArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataDeleteApplicationDeploymentArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetAppDeploymentId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAppDeploymentId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetAppDeploymentId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AppDeploymentId is not set"));
  }
  return nil
}

func (p *AiravataDeleteApplicationDeploymentArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataDeleteApplicationDeploymentArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AppDeploymentId = v
}
  return nil
}

func (p *AiravataDeleteApplicationDeploymentArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteApplicationDeployment_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeleteApplicationDeploymentArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataDeleteApplicationDeploymentArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appDeploymentId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appDeploymentId: ", p), err) }
  if err := oprot.WriteString(string(p.AppDeploymentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appDeploymentId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appDeploymentId: ", p), err) }
  return err
}

func (p *AiravataDeleteApplicationDeploymentArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeleteApplicationDeploymentArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataDeleteApplicationDeploymentResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataDeleteApplicationDeploymentResult() *AiravataDeleteApplicationDeploymentResult {
  return &AiravataDeleteApplicationDeploymentResult{}
}

var AiravataDeleteApplicationDeploymentResult_Success_DEFAULT bool
func (p *AiravataDeleteApplicationDeploymentResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataDeleteApplicationDeploymentResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataDeleteApplicationDeploymentResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataDeleteApplicationDeploymentResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataDeleteApplicationDeploymentResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataDeleteApplicationDeploymentResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataDeleteApplicationDeploymentResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataDeleteApplicationDeploymentResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataDeleteApplicationDeploymentResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataDeleteApplicationDeploymentResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataDeleteApplicationDeploymentResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataDeleteApplicationDeploymentResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataDeleteApplicationDeploymentResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataDeleteApplicationDeploymentResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataDeleteApplicationDeploymentResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataDeleteApplicationDeploymentResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataDeleteApplicationDeploymentResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataDeleteApplicationDeploymentResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataDeleteApplicationDeploymentResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataDeleteApplicationDeploymentResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataDeleteApplicationDeploymentResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataDeleteApplicationDeploymentResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataDeleteApplicationDeploymentResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataDeleteApplicationDeploymentResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataDeleteApplicationDeploymentResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataDeleteApplicationDeploymentResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteApplicationDeployment_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeleteApplicationDeploymentResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteApplicationDeploymentResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteApplicationDeploymentResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteApplicationDeploymentResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteApplicationDeploymentResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteApplicationDeploymentResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeleteApplicationDeploymentResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GatewayId
type AiravataGetAllApplicationDeploymentsArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GatewayId string `thrift:"gatewayId,2,required" db:"gatewayId" json:"gatewayId"`
}

func NewAiravataGetAllApplicationDeploymentsArgs() *AiravataGetAllApplicationDeploymentsArgs {
  return &AiravataGetAllApplicationDeploymentsArgs{}
}

var AiravataGetAllApplicationDeploymentsArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetAllApplicationDeploymentsArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetAllApplicationDeploymentsArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetAllApplicationDeploymentsArgs) GetGatewayId() string {
  return p.GatewayId
}
func (p *AiravataGetAllApplicationDeploymentsArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetAllApplicationDeploymentsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGatewayId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  return nil
}

func (p *AiravataGetAllApplicationDeploymentsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetAllApplicationDeploymentsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *AiravataGetAllApplicationDeploymentsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllApplicationDeployments_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAllApplicationDeploymentsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetAllApplicationDeploymentsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayId: ", p), err) }
  return err
}

func (p *AiravataGetAllApplicationDeploymentsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAllApplicationDeploymentsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetAllApplicationDeploymentsResult struct {
  Success []*application_deployment_model.ApplicationDeploymentDescription `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetAllApplicationDeploymentsResult() *AiravataGetAllApplicationDeploymentsResult {
  return &AiravataGetAllApplicationDeploymentsResult{}
}

var AiravataGetAllApplicationDeploymentsResult_Success_DEFAULT []*application_deployment_model.ApplicationDeploymentDescription

func (p *AiravataGetAllApplicationDeploymentsResult) GetSuccess() []*application_deployment_model.ApplicationDeploymentDescription {
  return p.Success
}
var AiravataGetAllApplicationDeploymentsResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetAllApplicationDeploymentsResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetAllApplicationDeploymentsResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetAllApplicationDeploymentsResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetAllApplicationDeploymentsResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetAllApplicationDeploymentsResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetAllApplicationDeploymentsResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetAllApplicationDeploymentsResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetAllApplicationDeploymentsResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetAllApplicationDeploymentsResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetAllApplicationDeploymentsResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetAllApplicationDeploymentsResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetAllApplicationDeploymentsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetAllApplicationDeploymentsResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetAllApplicationDeploymentsResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetAllApplicationDeploymentsResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetAllApplicationDeploymentsResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetAllApplicationDeploymentsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetAllApplicationDeploymentsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*application_deployment_model.ApplicationDeploymentDescription, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem364 := &application_deployment_model.ApplicationDeploymentDescription{
    AppDeploymentId: "DO_NOT_SET_AT_CLIENTS",

    Parallelism:     0,
}
    if err := _elem364.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem364), err)
    }
    p.Success = append(p.Success, _elem364)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AiravataGetAllApplicationDeploymentsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetAllApplicationDeploymentsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetAllApplicationDeploymentsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetAllApplicationDeploymentsResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetAllApplicationDeploymentsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllApplicationDeployments_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAllApplicationDeploymentsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllApplicationDeploymentsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllApplicationDeploymentsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllApplicationDeploymentsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllApplicationDeploymentsResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllApplicationDeploymentsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAllApplicationDeploymentsResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - AppModuleId
type AiravataGetAppModuleDeployedResourcesArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  AppModuleId string `thrift:"appModuleId,2,required" db:"appModuleId" json:"appModuleId"`
}

func NewAiravataGetAppModuleDeployedResourcesArgs() *AiravataGetAppModuleDeployedResourcesArgs {
  return &AiravataGetAppModuleDeployedResourcesArgs{}
}

var AiravataGetAppModuleDeployedResourcesArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetAppModuleDeployedResourcesArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetAppModuleDeployedResourcesArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetAppModuleDeployedResourcesArgs) GetAppModuleId() string {
  return p.AppModuleId
}
func (p *AiravataGetAppModuleDeployedResourcesArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetAppModuleDeployedResourcesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetAppModuleId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAppModuleId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetAppModuleId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AppModuleId is not set"));
  }
  return nil
}

func (p *AiravataGetAppModuleDeployedResourcesArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetAppModuleDeployedResourcesArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AppModuleId = v
}
  return nil
}

func (p *AiravataGetAppModuleDeployedResourcesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAppModuleDeployedResources_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAppModuleDeployedResourcesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetAppModuleDeployedResourcesArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appModuleId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appModuleId: ", p), err) }
  if err := oprot.WriteString(string(p.AppModuleId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appModuleId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appModuleId: ", p), err) }
  return err
}

func (p *AiravataGetAppModuleDeployedResourcesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAppModuleDeployedResourcesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetAppModuleDeployedResourcesResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetAppModuleDeployedResourcesResult() *AiravataGetAppModuleDeployedResourcesResult {
  return &AiravataGetAppModuleDeployedResourcesResult{}
}

var AiravataGetAppModuleDeployedResourcesResult_Success_DEFAULT []string

func (p *AiravataGetAppModuleDeployedResourcesResult) GetSuccess() []string {
  return p.Success
}
var AiravataGetAppModuleDeployedResourcesResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetAppModuleDeployedResourcesResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetAppModuleDeployedResourcesResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetAppModuleDeployedResourcesResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetAppModuleDeployedResourcesResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetAppModuleDeployedResourcesResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetAppModuleDeployedResourcesResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetAppModuleDeployedResourcesResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetAppModuleDeployedResourcesResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetAppModuleDeployedResourcesResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetAppModuleDeployedResourcesResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetAppModuleDeployedResourcesResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetAppModuleDeployedResourcesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetAppModuleDeployedResourcesResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetAppModuleDeployedResourcesResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetAppModuleDeployedResourcesResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetAppModuleDeployedResourcesResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetAppModuleDeployedResourcesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetAppModuleDeployedResourcesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem365 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem365 = v
}
    p.Success = append(p.Success, _elem365)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AiravataGetAppModuleDeployedResourcesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetAppModuleDeployedResourcesResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetAppModuleDeployedResourcesResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetAppModuleDeployedResourcesResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetAppModuleDeployedResourcesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAppModuleDeployedResources_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAppModuleDeployedResourcesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetAppModuleDeployedResourcesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetAppModuleDeployedResourcesResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetAppModuleDeployedResourcesResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetAppModuleDeployedResourcesResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetAppModuleDeployedResourcesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAppModuleDeployedResourcesResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GatewayId
//  - ApplicationInterface
type AiravataRegisterApplicationInterfaceArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GatewayId string `thrift:"gatewayId,2,required" db:"gatewayId" json:"gatewayId"`
  ApplicationInterface *application_interface_model.ApplicationInterfaceDescription `thrift:"applicationInterface,3,required" db:"applicationInterface" json:"applicationInterface"`
}

func NewAiravataRegisterApplicationInterfaceArgs() *AiravataRegisterApplicationInterfaceArgs {
  return &AiravataRegisterApplicationInterfaceArgs{}
}

var AiravataRegisterApplicationInterfaceArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataRegisterApplicationInterfaceArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataRegisterApplicationInterfaceArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataRegisterApplicationInterfaceArgs) GetGatewayId() string {
  return p.GatewayId
}
var AiravataRegisterApplicationInterfaceArgs_ApplicationInterface_DEFAULT *application_interface_model.ApplicationInterfaceDescription
func (p *AiravataRegisterApplicationInterfaceArgs) GetApplicationInterface() *application_interface_model.ApplicationInterfaceDescription {
  if !p.IsSetApplicationInterface() {
    return AiravataRegisterApplicationInterfaceArgs_ApplicationInterface_DEFAULT
  }
return p.ApplicationInterface
}
func (p *AiravataRegisterApplicationInterfaceArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataRegisterApplicationInterfaceArgs) IsSetApplicationInterface() bool {
  return p.ApplicationInterface != nil
}

func (p *AiravataRegisterApplicationInterfaceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGatewayId bool = false;
  var issetApplicationInterface bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetApplicationInterface = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  if !issetApplicationInterface{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ApplicationInterface is not set"));
  }
  return nil
}

func (p *AiravataRegisterApplicationInterfaceArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataRegisterApplicationInterfaceArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *AiravataRegisterApplicationInterfaceArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.ApplicationInterface = &application_interface_model.ApplicationInterfaceDescription{
  ApplicationInterfaceId: "DO_NOT_SET_AT_CLIENTS",
}
  if err := p.ApplicationInterface.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ApplicationInterface), err)
  }
  return nil
}

func (p *AiravataRegisterApplicationInterfaceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerApplicationInterface_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataRegisterApplicationInterfaceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataRegisterApplicationInterfaceArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayId: ", p), err) }
  return err
}

func (p *AiravataRegisterApplicationInterfaceArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("applicationInterface", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:applicationInterface: ", p), err) }
  if err := p.ApplicationInterface.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ApplicationInterface), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:applicationInterface: ", p), err) }
  return err
}

func (p *AiravataRegisterApplicationInterfaceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataRegisterApplicationInterfaceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataRegisterApplicationInterfaceResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataRegisterApplicationInterfaceResult() *AiravataRegisterApplicationInterfaceResult {
  return &AiravataRegisterApplicationInterfaceResult{}
}

var AiravataRegisterApplicationInterfaceResult_Success_DEFAULT string
func (p *AiravataRegisterApplicationInterfaceResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return AiravataRegisterApplicationInterfaceResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataRegisterApplicationInterfaceResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataRegisterApplicationInterfaceResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataRegisterApplicationInterfaceResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataRegisterApplicationInterfaceResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataRegisterApplicationInterfaceResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataRegisterApplicationInterfaceResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataRegisterApplicationInterfaceResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataRegisterApplicationInterfaceResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataRegisterApplicationInterfaceResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataRegisterApplicationInterfaceResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataRegisterApplicationInterfaceResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataRegisterApplicationInterfaceResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataRegisterApplicationInterfaceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataRegisterApplicationInterfaceResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataRegisterApplicationInterfaceResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataRegisterApplicationInterfaceResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataRegisterApplicationInterfaceResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataRegisterApplicationInterfaceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataRegisterApplicationInterfaceResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataRegisterApplicationInterfaceResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataRegisterApplicationInterfaceResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataRegisterApplicationInterfaceResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataRegisterApplicationInterfaceResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataRegisterApplicationInterfaceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerApplicationInterface_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataRegisterApplicationInterfaceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterApplicationInterfaceResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterApplicationInterfaceResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterApplicationInterfaceResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterApplicationInterfaceResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterApplicationInterfaceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataRegisterApplicationInterfaceResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - ExistingAppInterfaceID
//  - NewApplicationName_
//  - GatewayId
type AiravataCloneApplicationInterfaceArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  ExistingAppInterfaceID string `thrift:"existingAppInterfaceID,2" db:"existingAppInterfaceID" json:"existingAppInterfaceID"`
  NewApplicationName_ string `thrift:"newApplicationName,3" db:"newApplicationName" json:"newApplicationName"`
  GatewayId string `thrift:"gatewayId,4" db:"gatewayId" json:"gatewayId"`
}

func NewAiravataCloneApplicationInterfaceArgs() *AiravataCloneApplicationInterfaceArgs {
  return &AiravataCloneApplicationInterfaceArgs{}
}

var AiravataCloneApplicationInterfaceArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataCloneApplicationInterfaceArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataCloneApplicationInterfaceArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataCloneApplicationInterfaceArgs) GetExistingAppInterfaceID() string {
  return p.ExistingAppInterfaceID
}

func (p *AiravataCloneApplicationInterfaceArgs) GetNewApplicationName_() string {
  return p.NewApplicationName_
}

func (p *AiravataCloneApplicationInterfaceArgs) GetGatewayId() string {
  return p.GatewayId
}
func (p *AiravataCloneApplicationInterfaceArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataCloneApplicationInterfaceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  return nil
}

func (p *AiravataCloneApplicationInterfaceArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataCloneApplicationInterfaceArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ExistingAppInterfaceID = v
}
  return nil
}

func (p *AiravataCloneApplicationInterfaceArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NewApplicationName_ = v
}
  return nil
}

func (p *AiravataCloneApplicationInterfaceArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *AiravataCloneApplicationInterfaceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("cloneApplicationInterface_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataCloneApplicationInterfaceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataCloneApplicationInterfaceArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("existingAppInterfaceID", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:existingAppInterfaceID: ", p), err) }
  if err := oprot.WriteString(string(p.ExistingAppInterfaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.existingAppInterfaceID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:existingAppInterfaceID: ", p), err) }
  return err
}

func (p *AiravataCloneApplicationInterfaceArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("newApplicationName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:newApplicationName: ", p), err) }
  if err := oprot.WriteString(string(p.NewApplicationName_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.newApplicationName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:newApplicationName: ", p), err) }
  return err
}

func (p *AiravataCloneApplicationInterfaceArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:gatewayId: ", p), err) }
  return err
}

func (p *AiravataCloneApplicationInterfaceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataCloneApplicationInterfaceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataCloneApplicationInterfaceResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataCloneApplicationInterfaceResult() *AiravataCloneApplicationInterfaceResult {
  return &AiravataCloneApplicationInterfaceResult{}
}

var AiravataCloneApplicationInterfaceResult_Success_DEFAULT string
func (p *AiravataCloneApplicationInterfaceResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return AiravataCloneApplicationInterfaceResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataCloneApplicationInterfaceResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataCloneApplicationInterfaceResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataCloneApplicationInterfaceResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataCloneApplicationInterfaceResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataCloneApplicationInterfaceResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataCloneApplicationInterfaceResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataCloneApplicationInterfaceResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataCloneApplicationInterfaceResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataCloneApplicationInterfaceResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataCloneApplicationInterfaceResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataCloneApplicationInterfaceResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataCloneApplicationInterfaceResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataCloneApplicationInterfaceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataCloneApplicationInterfaceResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataCloneApplicationInterfaceResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataCloneApplicationInterfaceResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataCloneApplicationInterfaceResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataCloneApplicationInterfaceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataCloneApplicationInterfaceResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataCloneApplicationInterfaceResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataCloneApplicationInterfaceResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataCloneApplicationInterfaceResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataCloneApplicationInterfaceResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataCloneApplicationInterfaceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("cloneApplicationInterface_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataCloneApplicationInterfaceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataCloneApplicationInterfaceResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataCloneApplicationInterfaceResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataCloneApplicationInterfaceResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataCloneApplicationInterfaceResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataCloneApplicationInterfaceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataCloneApplicationInterfaceResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - AppInterfaceId
type AiravataGetApplicationInterfaceArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  AppInterfaceId string `thrift:"appInterfaceId,2,required" db:"appInterfaceId" json:"appInterfaceId"`
}

func NewAiravataGetApplicationInterfaceArgs() *AiravataGetApplicationInterfaceArgs {
  return &AiravataGetApplicationInterfaceArgs{}
}

var AiravataGetApplicationInterfaceArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetApplicationInterfaceArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetApplicationInterfaceArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetApplicationInterfaceArgs) GetAppInterfaceId() string {
  return p.AppInterfaceId
}
func (p *AiravataGetApplicationInterfaceArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetApplicationInterfaceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetAppInterfaceId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAppInterfaceId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetAppInterfaceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AppInterfaceId is not set"));
  }
  return nil
}

func (p *AiravataGetApplicationInterfaceArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetApplicationInterfaceArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AppInterfaceId = v
}
  return nil
}

func (p *AiravataGetApplicationInterfaceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getApplicationInterface_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetApplicationInterfaceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetApplicationInterfaceArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appInterfaceId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appInterfaceId: ", p), err) }
  if err := oprot.WriteString(string(p.AppInterfaceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appInterfaceId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appInterfaceId: ", p), err) }
  return err
}

func (p *AiravataGetApplicationInterfaceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetApplicationInterfaceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetApplicationInterfaceResult struct {
  Success *application_interface_model.ApplicationInterfaceDescription `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetApplicationInterfaceResult() *AiravataGetApplicationInterfaceResult {
  return &AiravataGetApplicationInterfaceResult{}
}

var AiravataGetApplicationInterfaceResult_Success_DEFAULT *application_interface_model.ApplicationInterfaceDescription
func (p *AiravataGetApplicationInterfaceResult) GetSuccess() *application_interface_model.ApplicationInterfaceDescription {
  if !p.IsSetSuccess() {
    return AiravataGetApplicationInterfaceResult_Success_DEFAULT
  }
return p.Success
}
var AiravataGetApplicationInterfaceResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetApplicationInterfaceResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetApplicationInterfaceResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetApplicationInterfaceResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetApplicationInterfaceResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetApplicationInterfaceResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetApplicationInterfaceResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetApplicationInterfaceResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetApplicationInterfaceResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetApplicationInterfaceResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetApplicationInterfaceResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetApplicationInterfaceResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetApplicationInterfaceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetApplicationInterfaceResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetApplicationInterfaceResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetApplicationInterfaceResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetApplicationInterfaceResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetApplicationInterfaceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetApplicationInterfaceResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &application_interface_model.ApplicationInterfaceDescription{
  ApplicationInterfaceId: "DO_NOT_SET_AT_CLIENTS",
}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AiravataGetApplicationInterfaceResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetApplicationInterfaceResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetApplicationInterfaceResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetApplicationInterfaceResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetApplicationInterfaceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getApplicationInterface_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetApplicationInterfaceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetApplicationInterfaceResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetApplicationInterfaceResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetApplicationInterfaceResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetApplicationInterfaceResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetApplicationInterfaceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetApplicationInterfaceResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - AppInterfaceId
//  - ApplicationInterface
type AiravataUpdateApplicationInterfaceArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  AppInterfaceId string `thrift:"appInterfaceId,2,required" db:"appInterfaceId" json:"appInterfaceId"`
  ApplicationInterface *application_interface_model.ApplicationInterfaceDescription `thrift:"applicationInterface,3,required" db:"applicationInterface" json:"applicationInterface"`
}

func NewAiravataUpdateApplicationInterfaceArgs() *AiravataUpdateApplicationInterfaceArgs {
  return &AiravataUpdateApplicationInterfaceArgs{}
}

var AiravataUpdateApplicationInterfaceArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataUpdateApplicationInterfaceArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataUpdateApplicationInterfaceArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataUpdateApplicationInterfaceArgs) GetAppInterfaceId() string {
  return p.AppInterfaceId
}
var AiravataUpdateApplicationInterfaceArgs_ApplicationInterface_DEFAULT *application_interface_model.ApplicationInterfaceDescription
func (p *AiravataUpdateApplicationInterfaceArgs) GetApplicationInterface() *application_interface_model.ApplicationInterfaceDescription {
  if !p.IsSetApplicationInterface() {
    return AiravataUpdateApplicationInterfaceArgs_ApplicationInterface_DEFAULT
  }
return p.ApplicationInterface
}
func (p *AiravataUpdateApplicationInterfaceArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataUpdateApplicationInterfaceArgs) IsSetApplicationInterface() bool {
  return p.ApplicationInterface != nil
}

func (p *AiravataUpdateApplicationInterfaceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetAppInterfaceId bool = false;
  var issetApplicationInterface bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAppInterfaceId = true
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetApplicationInterface = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetAppInterfaceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AppInterfaceId is not set"));
  }
  if !issetApplicationInterface{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ApplicationInterface is not set"));
  }
  return nil
}

func (p *AiravataUpdateApplicationInterfaceArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataUpdateApplicationInterfaceArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AppInterfaceId = v
}
  return nil
}

func (p *AiravataUpdateApplicationInterfaceArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.ApplicationInterface = &application_interface_model.ApplicationInterfaceDescription{
  ApplicationInterfaceId: "DO_NOT_SET_AT_CLIENTS",
}
  if err := p.ApplicationInterface.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ApplicationInterface), err)
  }
  return nil
}

func (p *AiravataUpdateApplicationInterfaceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateApplicationInterface_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateApplicationInterfaceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataUpdateApplicationInterfaceArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appInterfaceId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appInterfaceId: ", p), err) }
  if err := oprot.WriteString(string(p.AppInterfaceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appInterfaceId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appInterfaceId: ", p), err) }
  return err
}

func (p *AiravataUpdateApplicationInterfaceArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("applicationInterface", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:applicationInterface: ", p), err) }
  if err := p.ApplicationInterface.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ApplicationInterface), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:applicationInterface: ", p), err) }
  return err
}

func (p *AiravataUpdateApplicationInterfaceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateApplicationInterfaceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataUpdateApplicationInterfaceResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataUpdateApplicationInterfaceResult() *AiravataUpdateApplicationInterfaceResult {
  return &AiravataUpdateApplicationInterfaceResult{}
}

var AiravataUpdateApplicationInterfaceResult_Success_DEFAULT bool
func (p *AiravataUpdateApplicationInterfaceResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataUpdateApplicationInterfaceResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataUpdateApplicationInterfaceResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataUpdateApplicationInterfaceResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataUpdateApplicationInterfaceResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataUpdateApplicationInterfaceResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataUpdateApplicationInterfaceResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataUpdateApplicationInterfaceResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataUpdateApplicationInterfaceResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataUpdateApplicationInterfaceResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataUpdateApplicationInterfaceResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataUpdateApplicationInterfaceResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataUpdateApplicationInterfaceResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataUpdateApplicationInterfaceResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataUpdateApplicationInterfaceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataUpdateApplicationInterfaceResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataUpdateApplicationInterfaceResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataUpdateApplicationInterfaceResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataUpdateApplicationInterfaceResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataUpdateApplicationInterfaceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataUpdateApplicationInterfaceResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataUpdateApplicationInterfaceResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataUpdateApplicationInterfaceResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataUpdateApplicationInterfaceResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataUpdateApplicationInterfaceResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataUpdateApplicationInterfaceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateApplicationInterface_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateApplicationInterfaceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateApplicationInterfaceResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateApplicationInterfaceResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateApplicationInterfaceResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateApplicationInterfaceResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateApplicationInterfaceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateApplicationInterfaceResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - AppInterfaceId
type AiravataDeleteApplicationInterfaceArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  AppInterfaceId string `thrift:"appInterfaceId,2,required" db:"appInterfaceId" json:"appInterfaceId"`
}

func NewAiravataDeleteApplicationInterfaceArgs() *AiravataDeleteApplicationInterfaceArgs {
  return &AiravataDeleteApplicationInterfaceArgs{}
}

var AiravataDeleteApplicationInterfaceArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataDeleteApplicationInterfaceArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataDeleteApplicationInterfaceArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataDeleteApplicationInterfaceArgs) GetAppInterfaceId() string {
  return p.AppInterfaceId
}
func (p *AiravataDeleteApplicationInterfaceArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataDeleteApplicationInterfaceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetAppInterfaceId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAppInterfaceId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetAppInterfaceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AppInterfaceId is not set"));
  }
  return nil
}

func (p *AiravataDeleteApplicationInterfaceArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataDeleteApplicationInterfaceArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AppInterfaceId = v
}
  return nil
}

func (p *AiravataDeleteApplicationInterfaceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteApplicationInterface_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeleteApplicationInterfaceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataDeleteApplicationInterfaceArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appInterfaceId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appInterfaceId: ", p), err) }
  if err := oprot.WriteString(string(p.AppInterfaceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appInterfaceId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appInterfaceId: ", p), err) }
  return err
}

func (p *AiravataDeleteApplicationInterfaceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeleteApplicationInterfaceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataDeleteApplicationInterfaceResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataDeleteApplicationInterfaceResult() *AiravataDeleteApplicationInterfaceResult {
  return &AiravataDeleteApplicationInterfaceResult{}
}

var AiravataDeleteApplicationInterfaceResult_Success_DEFAULT bool
func (p *AiravataDeleteApplicationInterfaceResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataDeleteApplicationInterfaceResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataDeleteApplicationInterfaceResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataDeleteApplicationInterfaceResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataDeleteApplicationInterfaceResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataDeleteApplicationInterfaceResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataDeleteApplicationInterfaceResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataDeleteApplicationInterfaceResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataDeleteApplicationInterfaceResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataDeleteApplicationInterfaceResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataDeleteApplicationInterfaceResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataDeleteApplicationInterfaceResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataDeleteApplicationInterfaceResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataDeleteApplicationInterfaceResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataDeleteApplicationInterfaceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataDeleteApplicationInterfaceResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataDeleteApplicationInterfaceResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataDeleteApplicationInterfaceResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataDeleteApplicationInterfaceResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataDeleteApplicationInterfaceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataDeleteApplicationInterfaceResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataDeleteApplicationInterfaceResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataDeleteApplicationInterfaceResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataDeleteApplicationInterfaceResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataDeleteApplicationInterfaceResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataDeleteApplicationInterfaceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteApplicationInterface_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeleteApplicationInterfaceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteApplicationInterfaceResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteApplicationInterfaceResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteApplicationInterfaceResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteApplicationInterfaceResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteApplicationInterfaceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeleteApplicationInterfaceResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GatewayId
type AiravataGetAllApplicationInterfaceNamesArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GatewayId string `thrift:"gatewayId,2,required" db:"gatewayId" json:"gatewayId"`
}

func NewAiravataGetAllApplicationInterfaceNamesArgs() *AiravataGetAllApplicationInterfaceNamesArgs {
  return &AiravataGetAllApplicationInterfaceNamesArgs{}
}

var AiravataGetAllApplicationInterfaceNamesArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetAllApplicationInterfaceNamesArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetAllApplicationInterfaceNamesArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetAllApplicationInterfaceNamesArgs) GetGatewayId() string {
  return p.GatewayId
}
func (p *AiravataGetAllApplicationInterfaceNamesArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetAllApplicationInterfaceNamesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGatewayId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  return nil
}

func (p *AiravataGetAllApplicationInterfaceNamesArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetAllApplicationInterfaceNamesArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *AiravataGetAllApplicationInterfaceNamesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllApplicationInterfaceNames_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAllApplicationInterfaceNamesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetAllApplicationInterfaceNamesArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayId: ", p), err) }
  return err
}

func (p *AiravataGetAllApplicationInterfaceNamesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAllApplicationInterfaceNamesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetAllApplicationInterfaceNamesResult struct {
  Success map[string]string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetAllApplicationInterfaceNamesResult() *AiravataGetAllApplicationInterfaceNamesResult {
  return &AiravataGetAllApplicationInterfaceNamesResult{}
}

var AiravataGetAllApplicationInterfaceNamesResult_Success_DEFAULT map[string]string

func (p *AiravataGetAllApplicationInterfaceNamesResult) GetSuccess() map[string]string {
  return p.Success
}
var AiravataGetAllApplicationInterfaceNamesResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetAllApplicationInterfaceNamesResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetAllApplicationInterfaceNamesResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetAllApplicationInterfaceNamesResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetAllApplicationInterfaceNamesResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetAllApplicationInterfaceNamesResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetAllApplicationInterfaceNamesResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetAllApplicationInterfaceNamesResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetAllApplicationInterfaceNamesResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetAllApplicationInterfaceNamesResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetAllApplicationInterfaceNamesResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetAllApplicationInterfaceNamesResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetAllApplicationInterfaceNamesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetAllApplicationInterfaceNamesResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetAllApplicationInterfaceNamesResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetAllApplicationInterfaceNamesResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetAllApplicationInterfaceNamesResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetAllApplicationInterfaceNamesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetAllApplicationInterfaceNamesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key366 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key366 = v
}
var _val367 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val367 = v
}
    p.Success[_key366] = _val367
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AiravataGetAllApplicationInterfaceNamesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetAllApplicationInterfaceNamesResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetAllApplicationInterfaceNamesResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetAllApplicationInterfaceNamesResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetAllApplicationInterfaceNamesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllApplicationInterfaceNames_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAllApplicationInterfaceNamesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllApplicationInterfaceNamesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllApplicationInterfaceNamesResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllApplicationInterfaceNamesResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllApplicationInterfaceNamesResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllApplicationInterfaceNamesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAllApplicationInterfaceNamesResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GatewayId
type AiravataGetAllApplicationInterfacesArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GatewayId string `thrift:"gatewayId,2,required" db:"gatewayId" json:"gatewayId"`
}

func NewAiravataGetAllApplicationInterfacesArgs() *AiravataGetAllApplicationInterfacesArgs {
  return &AiravataGetAllApplicationInterfacesArgs{}
}

var AiravataGetAllApplicationInterfacesArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetAllApplicationInterfacesArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetAllApplicationInterfacesArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetAllApplicationInterfacesArgs) GetGatewayId() string {
  return p.GatewayId
}
func (p *AiravataGetAllApplicationInterfacesArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetAllApplicationInterfacesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGatewayId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  return nil
}

func (p *AiravataGetAllApplicationInterfacesArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetAllApplicationInterfacesArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *AiravataGetAllApplicationInterfacesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllApplicationInterfaces_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAllApplicationInterfacesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetAllApplicationInterfacesArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayId: ", p), err) }
  return err
}

func (p *AiravataGetAllApplicationInterfacesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAllApplicationInterfacesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetAllApplicationInterfacesResult struct {
  Success []*application_interface_model.ApplicationInterfaceDescription `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetAllApplicationInterfacesResult() *AiravataGetAllApplicationInterfacesResult {
  return &AiravataGetAllApplicationInterfacesResult{}
}

var AiravataGetAllApplicationInterfacesResult_Success_DEFAULT []*application_interface_model.ApplicationInterfaceDescription

func (p *AiravataGetAllApplicationInterfacesResult) GetSuccess() []*application_interface_model.ApplicationInterfaceDescription {
  return p.Success
}
var AiravataGetAllApplicationInterfacesResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetAllApplicationInterfacesResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetAllApplicationInterfacesResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetAllApplicationInterfacesResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetAllApplicationInterfacesResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetAllApplicationInterfacesResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetAllApplicationInterfacesResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetAllApplicationInterfacesResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetAllApplicationInterfacesResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetAllApplicationInterfacesResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetAllApplicationInterfacesResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetAllApplicationInterfacesResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetAllApplicationInterfacesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetAllApplicationInterfacesResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetAllApplicationInterfacesResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetAllApplicationInterfacesResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetAllApplicationInterfacesResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetAllApplicationInterfacesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetAllApplicationInterfacesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*application_interface_model.ApplicationInterfaceDescription, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem368 := &application_interface_model.ApplicationInterfaceDescription{
    ApplicationInterfaceId: "DO_NOT_SET_AT_CLIENTS",
}
    if err := _elem368.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem368), err)
    }
    p.Success = append(p.Success, _elem368)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AiravataGetAllApplicationInterfacesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetAllApplicationInterfacesResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetAllApplicationInterfacesResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetAllApplicationInterfacesResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetAllApplicationInterfacesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllApplicationInterfaces_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAllApplicationInterfacesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllApplicationInterfacesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllApplicationInterfacesResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllApplicationInterfacesResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllApplicationInterfacesResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllApplicationInterfacesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAllApplicationInterfacesResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - AppInterfaceId
type AiravataGetApplicationInputsArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  AppInterfaceId string `thrift:"appInterfaceId,2,required" db:"appInterfaceId" json:"appInterfaceId"`
}

func NewAiravataGetApplicationInputsArgs() *AiravataGetApplicationInputsArgs {
  return &AiravataGetApplicationInputsArgs{}
}

var AiravataGetApplicationInputsArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetApplicationInputsArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetApplicationInputsArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetApplicationInputsArgs) GetAppInterfaceId() string {
  return p.AppInterfaceId
}
func (p *AiravataGetApplicationInputsArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetApplicationInputsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetAppInterfaceId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAppInterfaceId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetAppInterfaceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AppInterfaceId is not set"));
  }
  return nil
}

func (p *AiravataGetApplicationInputsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetApplicationInputsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AppInterfaceId = v
}
  return nil
}

func (p *AiravataGetApplicationInputsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getApplicationInputs_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetApplicationInputsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetApplicationInputsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appInterfaceId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appInterfaceId: ", p), err) }
  if err := oprot.WriteString(string(p.AppInterfaceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appInterfaceId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appInterfaceId: ", p), err) }
  return err
}

func (p *AiravataGetApplicationInputsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetApplicationInputsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetApplicationInputsResult struct {
  Success []*application_io_models.InputDataObjectType `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetApplicationInputsResult() *AiravataGetApplicationInputsResult {
  return &AiravataGetApplicationInputsResult{}
}

var AiravataGetApplicationInputsResult_Success_DEFAULT []*application_io_models.InputDataObjectType

func (p *AiravataGetApplicationInputsResult) GetSuccess() []*application_io_models.InputDataObjectType {
  return p.Success
}
var AiravataGetApplicationInputsResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetApplicationInputsResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetApplicationInputsResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetApplicationInputsResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetApplicationInputsResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetApplicationInputsResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetApplicationInputsResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetApplicationInputsResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetApplicationInputsResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetApplicationInputsResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetApplicationInputsResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetApplicationInputsResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetApplicationInputsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetApplicationInputsResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetApplicationInputsResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetApplicationInputsResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetApplicationInputsResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetApplicationInputsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetApplicationInputsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*application_io_models.InputDataObjectType, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem369 := &application_io_models.InputDataObjectType{}
    if err := _elem369.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem369), err)
    }
    p.Success = append(p.Success, _elem369)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AiravataGetApplicationInputsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetApplicationInputsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetApplicationInputsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetApplicationInputsResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetApplicationInputsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getApplicationInputs_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetApplicationInputsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetApplicationInputsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetApplicationInputsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetApplicationInputsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetApplicationInputsResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetApplicationInputsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetApplicationInputsResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - AppInterfaceId
type AiravataGetApplicationOutputsArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  AppInterfaceId string `thrift:"appInterfaceId,2,required" db:"appInterfaceId" json:"appInterfaceId"`
}

func NewAiravataGetApplicationOutputsArgs() *AiravataGetApplicationOutputsArgs {
  return &AiravataGetApplicationOutputsArgs{}
}

var AiravataGetApplicationOutputsArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetApplicationOutputsArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetApplicationOutputsArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetApplicationOutputsArgs) GetAppInterfaceId() string {
  return p.AppInterfaceId
}
func (p *AiravataGetApplicationOutputsArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetApplicationOutputsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetAppInterfaceId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAppInterfaceId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetAppInterfaceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AppInterfaceId is not set"));
  }
  return nil
}

func (p *AiravataGetApplicationOutputsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetApplicationOutputsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AppInterfaceId = v
}
  return nil
}

func (p *AiravataGetApplicationOutputsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getApplicationOutputs_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetApplicationOutputsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetApplicationOutputsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appInterfaceId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appInterfaceId: ", p), err) }
  if err := oprot.WriteString(string(p.AppInterfaceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appInterfaceId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appInterfaceId: ", p), err) }
  return err
}

func (p *AiravataGetApplicationOutputsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetApplicationOutputsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetApplicationOutputsResult struct {
  Success []*application_io_models.OutputDataObjectType `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetApplicationOutputsResult() *AiravataGetApplicationOutputsResult {
  return &AiravataGetApplicationOutputsResult{}
}

var AiravataGetApplicationOutputsResult_Success_DEFAULT []*application_io_models.OutputDataObjectType

func (p *AiravataGetApplicationOutputsResult) GetSuccess() []*application_io_models.OutputDataObjectType {
  return p.Success
}
var AiravataGetApplicationOutputsResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetApplicationOutputsResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetApplicationOutputsResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetApplicationOutputsResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetApplicationOutputsResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetApplicationOutputsResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetApplicationOutputsResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetApplicationOutputsResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetApplicationOutputsResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetApplicationOutputsResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetApplicationOutputsResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetApplicationOutputsResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetApplicationOutputsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetApplicationOutputsResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetApplicationOutputsResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetApplicationOutputsResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetApplicationOutputsResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetApplicationOutputsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetApplicationOutputsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*application_io_models.OutputDataObjectType, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem370 := &application_io_models.OutputDataObjectType{}
    if err := _elem370.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem370), err)
    }
    p.Success = append(p.Success, _elem370)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AiravataGetApplicationOutputsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetApplicationOutputsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetApplicationOutputsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetApplicationOutputsResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetApplicationOutputsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getApplicationOutputs_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetApplicationOutputsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetApplicationOutputsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetApplicationOutputsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetApplicationOutputsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetApplicationOutputsResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetApplicationOutputsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetApplicationOutputsResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - AppInterfaceId
type AiravataGetAvailableAppInterfaceComputeResourcesArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  AppInterfaceId string `thrift:"appInterfaceId,2,required" db:"appInterfaceId" json:"appInterfaceId"`
}

func NewAiravataGetAvailableAppInterfaceComputeResourcesArgs() *AiravataGetAvailableAppInterfaceComputeResourcesArgs {
  return &AiravataGetAvailableAppInterfaceComputeResourcesArgs{}
}

var AiravataGetAvailableAppInterfaceComputeResourcesArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetAvailableAppInterfaceComputeResourcesArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetAvailableAppInterfaceComputeResourcesArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetAvailableAppInterfaceComputeResourcesArgs) GetAppInterfaceId() string {
  return p.AppInterfaceId
}
func (p *AiravataGetAvailableAppInterfaceComputeResourcesArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetAvailableAppInterfaceComputeResourcesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetAppInterfaceId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAppInterfaceId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetAppInterfaceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AppInterfaceId is not set"));
  }
  return nil
}

func (p *AiravataGetAvailableAppInterfaceComputeResourcesArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetAvailableAppInterfaceComputeResourcesArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AppInterfaceId = v
}
  return nil
}

func (p *AiravataGetAvailableAppInterfaceComputeResourcesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAvailableAppInterfaceComputeResources_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAvailableAppInterfaceComputeResourcesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetAvailableAppInterfaceComputeResourcesArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appInterfaceId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appInterfaceId: ", p), err) }
  if err := oprot.WriteString(string(p.AppInterfaceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appInterfaceId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appInterfaceId: ", p), err) }
  return err
}

func (p *AiravataGetAvailableAppInterfaceComputeResourcesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAvailableAppInterfaceComputeResourcesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetAvailableAppInterfaceComputeResourcesResult struct {
  Success map[string]string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetAvailableAppInterfaceComputeResourcesResult() *AiravataGetAvailableAppInterfaceComputeResourcesResult {
  return &AiravataGetAvailableAppInterfaceComputeResourcesResult{}
}

var AiravataGetAvailableAppInterfaceComputeResourcesResult_Success_DEFAULT map[string]string

func (p *AiravataGetAvailableAppInterfaceComputeResourcesResult) GetSuccess() map[string]string {
  return p.Success
}
var AiravataGetAvailableAppInterfaceComputeResourcesResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetAvailableAppInterfaceComputeResourcesResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetAvailableAppInterfaceComputeResourcesResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetAvailableAppInterfaceComputeResourcesResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetAvailableAppInterfaceComputeResourcesResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetAvailableAppInterfaceComputeResourcesResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetAvailableAppInterfaceComputeResourcesResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetAvailableAppInterfaceComputeResourcesResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetAvailableAppInterfaceComputeResourcesResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetAvailableAppInterfaceComputeResourcesResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetAvailableAppInterfaceComputeResourcesResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetAvailableAppInterfaceComputeResourcesResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetAvailableAppInterfaceComputeResourcesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetAvailableAppInterfaceComputeResourcesResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetAvailableAppInterfaceComputeResourcesResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetAvailableAppInterfaceComputeResourcesResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetAvailableAppInterfaceComputeResourcesResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetAvailableAppInterfaceComputeResourcesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetAvailableAppInterfaceComputeResourcesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key371 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key371 = v
}
var _val372 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val372 = v
}
    p.Success[_key371] = _val372
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AiravataGetAvailableAppInterfaceComputeResourcesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetAvailableAppInterfaceComputeResourcesResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetAvailableAppInterfaceComputeResourcesResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetAvailableAppInterfaceComputeResourcesResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetAvailableAppInterfaceComputeResourcesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAvailableAppInterfaceComputeResources_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAvailableAppInterfaceComputeResourcesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetAvailableAppInterfaceComputeResourcesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetAvailableAppInterfaceComputeResourcesResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetAvailableAppInterfaceComputeResourcesResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetAvailableAppInterfaceComputeResourcesResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetAvailableAppInterfaceComputeResourcesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAvailableAppInterfaceComputeResourcesResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - ComputeResourceDescription
type AiravataRegisterComputeResourceArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  ComputeResourceDescription *compute_resource_model.ComputeResourceDescription `thrift:"computeResourceDescription,2,required" db:"computeResourceDescription" json:"computeResourceDescription"`
}

func NewAiravataRegisterComputeResourceArgs() *AiravataRegisterComputeResourceArgs {
  return &AiravataRegisterComputeResourceArgs{}
}

var AiravataRegisterComputeResourceArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataRegisterComputeResourceArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataRegisterComputeResourceArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}
var AiravataRegisterComputeResourceArgs_ComputeResourceDescription_DEFAULT *compute_resource_model.ComputeResourceDescription
func (p *AiravataRegisterComputeResourceArgs) GetComputeResourceDescription() *compute_resource_model.ComputeResourceDescription {
  if !p.IsSetComputeResourceDescription() {
    return AiravataRegisterComputeResourceArgs_ComputeResourceDescription_DEFAULT
  }
return p.ComputeResourceDescription
}
func (p *AiravataRegisterComputeResourceArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataRegisterComputeResourceArgs) IsSetComputeResourceDescription() bool {
  return p.ComputeResourceDescription != nil
}

func (p *AiravataRegisterComputeResourceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetComputeResourceDescription bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetComputeResourceDescription = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetComputeResourceDescription{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ComputeResourceDescription is not set"));
  }
  return nil
}

func (p *AiravataRegisterComputeResourceArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataRegisterComputeResourceArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.ComputeResourceDescription = &compute_resource_model.ComputeResourceDescription{
  ComputeResourceId: "DO_NOT_SET_AT_CLIENTS",
}
  if err := p.ComputeResourceDescription.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ComputeResourceDescription), err)
  }
  return nil
}

func (p *AiravataRegisterComputeResourceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerComputeResource_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataRegisterComputeResourceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataRegisterComputeResourceArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("computeResourceDescription", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:computeResourceDescription: ", p), err) }
  if err := p.ComputeResourceDescription.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ComputeResourceDescription), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:computeResourceDescription: ", p), err) }
  return err
}

func (p *AiravataRegisterComputeResourceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataRegisterComputeResourceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataRegisterComputeResourceResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataRegisterComputeResourceResult() *AiravataRegisterComputeResourceResult {
  return &AiravataRegisterComputeResourceResult{}
}

var AiravataRegisterComputeResourceResult_Success_DEFAULT string
func (p *AiravataRegisterComputeResourceResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return AiravataRegisterComputeResourceResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataRegisterComputeResourceResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataRegisterComputeResourceResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataRegisterComputeResourceResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataRegisterComputeResourceResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataRegisterComputeResourceResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataRegisterComputeResourceResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataRegisterComputeResourceResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataRegisterComputeResourceResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataRegisterComputeResourceResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataRegisterComputeResourceResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataRegisterComputeResourceResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataRegisterComputeResourceResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataRegisterComputeResourceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataRegisterComputeResourceResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataRegisterComputeResourceResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataRegisterComputeResourceResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataRegisterComputeResourceResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataRegisterComputeResourceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataRegisterComputeResourceResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataRegisterComputeResourceResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataRegisterComputeResourceResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataRegisterComputeResourceResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataRegisterComputeResourceResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataRegisterComputeResourceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerComputeResource_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataRegisterComputeResourceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterComputeResourceResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterComputeResourceResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterComputeResourceResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterComputeResourceResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterComputeResourceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataRegisterComputeResourceResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - ComputeResourceId
type AiravataGetComputeResourceArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  ComputeResourceId string `thrift:"computeResourceId,2,required" db:"computeResourceId" json:"computeResourceId"`
}

func NewAiravataGetComputeResourceArgs() *AiravataGetComputeResourceArgs {
  return &AiravataGetComputeResourceArgs{}
}

var AiravataGetComputeResourceArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetComputeResourceArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetComputeResourceArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetComputeResourceArgs) GetComputeResourceId() string {
  return p.ComputeResourceId
}
func (p *AiravataGetComputeResourceArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetComputeResourceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetComputeResourceId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetComputeResourceId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetComputeResourceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ComputeResourceId is not set"));
  }
  return nil
}

func (p *AiravataGetComputeResourceArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetComputeResourceArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ComputeResourceId = v
}
  return nil
}

func (p *AiravataGetComputeResourceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getComputeResource_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetComputeResourceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetComputeResourceArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("computeResourceId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:computeResourceId: ", p), err) }
  if err := oprot.WriteString(string(p.ComputeResourceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.computeResourceId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:computeResourceId: ", p), err) }
  return err
}

func (p *AiravataGetComputeResourceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetComputeResourceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetComputeResourceResult struct {
  Success *compute_resource_model.ComputeResourceDescription `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetComputeResourceResult() *AiravataGetComputeResourceResult {
  return &AiravataGetComputeResourceResult{}
}

var AiravataGetComputeResourceResult_Success_DEFAULT *compute_resource_model.ComputeResourceDescription
func (p *AiravataGetComputeResourceResult) GetSuccess() *compute_resource_model.ComputeResourceDescription {
  if !p.IsSetSuccess() {
    return AiravataGetComputeResourceResult_Success_DEFAULT
  }
return p.Success
}
var AiravataGetComputeResourceResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetComputeResourceResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetComputeResourceResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetComputeResourceResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetComputeResourceResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetComputeResourceResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetComputeResourceResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetComputeResourceResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetComputeResourceResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetComputeResourceResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetComputeResourceResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetComputeResourceResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetComputeResourceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetComputeResourceResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetComputeResourceResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetComputeResourceResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetComputeResourceResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetComputeResourceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetComputeResourceResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &compute_resource_model.ComputeResourceDescription{
  ComputeResourceId: "DO_NOT_SET_AT_CLIENTS",
}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AiravataGetComputeResourceResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetComputeResourceResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetComputeResourceResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetComputeResourceResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetComputeResourceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getComputeResource_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetComputeResourceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetComputeResourceResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetComputeResourceResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetComputeResourceResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetComputeResourceResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetComputeResourceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetComputeResourceResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
type AiravataGetAllComputeResourceNamesArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
}

func NewAiravataGetAllComputeResourceNamesArgs() *AiravataGetAllComputeResourceNamesArgs {
  return &AiravataGetAllComputeResourceNamesArgs{}
}

var AiravataGetAllComputeResourceNamesArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetAllComputeResourceNamesArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetAllComputeResourceNamesArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}
func (p *AiravataGetAllComputeResourceNamesArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetAllComputeResourceNamesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  return nil
}

func (p *AiravataGetAllComputeResourceNamesArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetAllComputeResourceNamesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllComputeResourceNames_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAllComputeResourceNamesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetAllComputeResourceNamesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAllComputeResourceNamesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetAllComputeResourceNamesResult struct {
  Success map[string]string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetAllComputeResourceNamesResult() *AiravataGetAllComputeResourceNamesResult {
  return &AiravataGetAllComputeResourceNamesResult{}
}

var AiravataGetAllComputeResourceNamesResult_Success_DEFAULT map[string]string

func (p *AiravataGetAllComputeResourceNamesResult) GetSuccess() map[string]string {
  return p.Success
}
var AiravataGetAllComputeResourceNamesResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetAllComputeResourceNamesResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetAllComputeResourceNamesResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetAllComputeResourceNamesResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetAllComputeResourceNamesResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetAllComputeResourceNamesResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetAllComputeResourceNamesResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetAllComputeResourceNamesResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetAllComputeResourceNamesResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetAllComputeResourceNamesResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetAllComputeResourceNamesResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetAllComputeResourceNamesResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetAllComputeResourceNamesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetAllComputeResourceNamesResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetAllComputeResourceNamesResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetAllComputeResourceNamesResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetAllComputeResourceNamesResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetAllComputeResourceNamesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetAllComputeResourceNamesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key373 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key373 = v
}
var _val374 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val374 = v
}
    p.Success[_key373] = _val374
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AiravataGetAllComputeResourceNamesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetAllComputeResourceNamesResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetAllComputeResourceNamesResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetAllComputeResourceNamesResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetAllComputeResourceNamesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllComputeResourceNames_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAllComputeResourceNamesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllComputeResourceNamesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllComputeResourceNamesResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllComputeResourceNamesResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllComputeResourceNamesResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllComputeResourceNamesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAllComputeResourceNamesResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - ComputeResourceId
//  - ComputeResourceDescription
type AiravataUpdateComputeResourceArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  ComputeResourceId string `thrift:"computeResourceId,2,required" db:"computeResourceId" json:"computeResourceId"`
  ComputeResourceDescription *compute_resource_model.ComputeResourceDescription `thrift:"computeResourceDescription,3,required" db:"computeResourceDescription" json:"computeResourceDescription"`
}

func NewAiravataUpdateComputeResourceArgs() *AiravataUpdateComputeResourceArgs {
  return &AiravataUpdateComputeResourceArgs{}
}

var AiravataUpdateComputeResourceArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataUpdateComputeResourceArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataUpdateComputeResourceArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataUpdateComputeResourceArgs) GetComputeResourceId() string {
  return p.ComputeResourceId
}
var AiravataUpdateComputeResourceArgs_ComputeResourceDescription_DEFAULT *compute_resource_model.ComputeResourceDescription
func (p *AiravataUpdateComputeResourceArgs) GetComputeResourceDescription() *compute_resource_model.ComputeResourceDescription {
  if !p.IsSetComputeResourceDescription() {
    return AiravataUpdateComputeResourceArgs_ComputeResourceDescription_DEFAULT
  }
return p.ComputeResourceDescription
}
func (p *AiravataUpdateComputeResourceArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataUpdateComputeResourceArgs) IsSetComputeResourceDescription() bool {
  return p.ComputeResourceDescription != nil
}

func (p *AiravataUpdateComputeResourceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetComputeResourceId bool = false;
  var issetComputeResourceDescription bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetComputeResourceId = true
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetComputeResourceDescription = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetComputeResourceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ComputeResourceId is not set"));
  }
  if !issetComputeResourceDescription{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ComputeResourceDescription is not set"));
  }
  return nil
}

func (p *AiravataUpdateComputeResourceArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataUpdateComputeResourceArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ComputeResourceId = v
}
  return nil
}

func (p *AiravataUpdateComputeResourceArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.ComputeResourceDescription = &compute_resource_model.ComputeResourceDescription{
  ComputeResourceId: "DO_NOT_SET_AT_CLIENTS",
}
  if err := p.ComputeResourceDescription.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ComputeResourceDescription), err)
  }
  return nil
}

func (p *AiravataUpdateComputeResourceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateComputeResource_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateComputeResourceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataUpdateComputeResourceArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("computeResourceId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:computeResourceId: ", p), err) }
  if err := oprot.WriteString(string(p.ComputeResourceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.computeResourceId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:computeResourceId: ", p), err) }
  return err
}

func (p *AiravataUpdateComputeResourceArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("computeResourceDescription", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:computeResourceDescription: ", p), err) }
  if err := p.ComputeResourceDescription.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ComputeResourceDescription), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:computeResourceDescription: ", p), err) }
  return err
}

func (p *AiravataUpdateComputeResourceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateComputeResourceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataUpdateComputeResourceResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataUpdateComputeResourceResult() *AiravataUpdateComputeResourceResult {
  return &AiravataUpdateComputeResourceResult{}
}

var AiravataUpdateComputeResourceResult_Success_DEFAULT bool
func (p *AiravataUpdateComputeResourceResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataUpdateComputeResourceResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataUpdateComputeResourceResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataUpdateComputeResourceResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataUpdateComputeResourceResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataUpdateComputeResourceResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataUpdateComputeResourceResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataUpdateComputeResourceResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataUpdateComputeResourceResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataUpdateComputeResourceResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataUpdateComputeResourceResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataUpdateComputeResourceResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataUpdateComputeResourceResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataUpdateComputeResourceResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataUpdateComputeResourceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataUpdateComputeResourceResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataUpdateComputeResourceResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataUpdateComputeResourceResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataUpdateComputeResourceResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataUpdateComputeResourceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataUpdateComputeResourceResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataUpdateComputeResourceResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataUpdateComputeResourceResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataUpdateComputeResourceResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataUpdateComputeResourceResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataUpdateComputeResourceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateComputeResource_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateComputeResourceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateComputeResourceResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateComputeResourceResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateComputeResourceResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateComputeResourceResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateComputeResourceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateComputeResourceResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - ComputeResourceId
type AiravataDeleteComputeResourceArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  ComputeResourceId string `thrift:"computeResourceId,2,required" db:"computeResourceId" json:"computeResourceId"`
}

func NewAiravataDeleteComputeResourceArgs() *AiravataDeleteComputeResourceArgs {
  return &AiravataDeleteComputeResourceArgs{}
}

var AiravataDeleteComputeResourceArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataDeleteComputeResourceArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataDeleteComputeResourceArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataDeleteComputeResourceArgs) GetComputeResourceId() string {
  return p.ComputeResourceId
}
func (p *AiravataDeleteComputeResourceArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataDeleteComputeResourceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetComputeResourceId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetComputeResourceId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetComputeResourceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ComputeResourceId is not set"));
  }
  return nil
}

func (p *AiravataDeleteComputeResourceArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataDeleteComputeResourceArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ComputeResourceId = v
}
  return nil
}

func (p *AiravataDeleteComputeResourceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteComputeResource_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeleteComputeResourceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataDeleteComputeResourceArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("computeResourceId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:computeResourceId: ", p), err) }
  if err := oprot.WriteString(string(p.ComputeResourceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.computeResourceId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:computeResourceId: ", p), err) }
  return err
}

func (p *AiravataDeleteComputeResourceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeleteComputeResourceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataDeleteComputeResourceResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataDeleteComputeResourceResult() *AiravataDeleteComputeResourceResult {
  return &AiravataDeleteComputeResourceResult{}
}

var AiravataDeleteComputeResourceResult_Success_DEFAULT bool
func (p *AiravataDeleteComputeResourceResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataDeleteComputeResourceResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataDeleteComputeResourceResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataDeleteComputeResourceResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataDeleteComputeResourceResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataDeleteComputeResourceResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataDeleteComputeResourceResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataDeleteComputeResourceResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataDeleteComputeResourceResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataDeleteComputeResourceResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataDeleteComputeResourceResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataDeleteComputeResourceResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataDeleteComputeResourceResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataDeleteComputeResourceResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataDeleteComputeResourceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataDeleteComputeResourceResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataDeleteComputeResourceResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataDeleteComputeResourceResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataDeleteComputeResourceResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataDeleteComputeResourceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataDeleteComputeResourceResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataDeleteComputeResourceResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataDeleteComputeResourceResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataDeleteComputeResourceResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataDeleteComputeResourceResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataDeleteComputeResourceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteComputeResource_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeleteComputeResourceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteComputeResourceResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteComputeResourceResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteComputeResourceResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteComputeResourceResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteComputeResourceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeleteComputeResourceResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - StorageResourceDescription
type AiravataRegisterStorageResourceArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  StorageResourceDescription *storage_resource_model.StorageResourceDescription `thrift:"storageResourceDescription,2,required" db:"storageResourceDescription" json:"storageResourceDescription"`
}

func NewAiravataRegisterStorageResourceArgs() *AiravataRegisterStorageResourceArgs {
  return &AiravataRegisterStorageResourceArgs{}
}

var AiravataRegisterStorageResourceArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataRegisterStorageResourceArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataRegisterStorageResourceArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}
var AiravataRegisterStorageResourceArgs_StorageResourceDescription_DEFAULT *storage_resource_model.StorageResourceDescription
func (p *AiravataRegisterStorageResourceArgs) GetStorageResourceDescription() *storage_resource_model.StorageResourceDescription {
  if !p.IsSetStorageResourceDescription() {
    return AiravataRegisterStorageResourceArgs_StorageResourceDescription_DEFAULT
  }
return p.StorageResourceDescription
}
func (p *AiravataRegisterStorageResourceArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataRegisterStorageResourceArgs) IsSetStorageResourceDescription() bool {
  return p.StorageResourceDescription != nil
}

func (p *AiravataRegisterStorageResourceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetStorageResourceDescription bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStorageResourceDescription = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetStorageResourceDescription{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StorageResourceDescription is not set"));
  }
  return nil
}

func (p *AiravataRegisterStorageResourceArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataRegisterStorageResourceArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.StorageResourceDescription = &storage_resource_model.StorageResourceDescription{
  StorageResourceId: "DO_NOT_SET_AT_CLIENTS",
}
  if err := p.StorageResourceDescription.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StorageResourceDescription), err)
  }
  return nil
}

func (p *AiravataRegisterStorageResourceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerStorageResource_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataRegisterStorageResourceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataRegisterStorageResourceArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("storageResourceDescription", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:storageResourceDescription: ", p), err) }
  if err := p.StorageResourceDescription.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StorageResourceDescription), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:storageResourceDescription: ", p), err) }
  return err
}

func (p *AiravataRegisterStorageResourceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataRegisterStorageResourceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataRegisterStorageResourceResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataRegisterStorageResourceResult() *AiravataRegisterStorageResourceResult {
  return &AiravataRegisterStorageResourceResult{}
}

var AiravataRegisterStorageResourceResult_Success_DEFAULT string
func (p *AiravataRegisterStorageResourceResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return AiravataRegisterStorageResourceResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataRegisterStorageResourceResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataRegisterStorageResourceResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataRegisterStorageResourceResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataRegisterStorageResourceResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataRegisterStorageResourceResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataRegisterStorageResourceResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataRegisterStorageResourceResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataRegisterStorageResourceResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataRegisterStorageResourceResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataRegisterStorageResourceResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataRegisterStorageResourceResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataRegisterStorageResourceResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataRegisterStorageResourceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataRegisterStorageResourceResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataRegisterStorageResourceResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataRegisterStorageResourceResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataRegisterStorageResourceResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataRegisterStorageResourceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataRegisterStorageResourceResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataRegisterStorageResourceResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataRegisterStorageResourceResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataRegisterStorageResourceResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataRegisterStorageResourceResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataRegisterStorageResourceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerStorageResource_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataRegisterStorageResourceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterStorageResourceResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterStorageResourceResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterStorageResourceResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterStorageResourceResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterStorageResourceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataRegisterStorageResourceResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - StorageResourceId
type AiravataGetStorageResourceArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  StorageResourceId string `thrift:"storageResourceId,2,required" db:"storageResourceId" json:"storageResourceId"`
}

func NewAiravataGetStorageResourceArgs() *AiravataGetStorageResourceArgs {
  return &AiravataGetStorageResourceArgs{}
}

var AiravataGetStorageResourceArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetStorageResourceArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetStorageResourceArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetStorageResourceArgs) GetStorageResourceId() string {
  return p.StorageResourceId
}
func (p *AiravataGetStorageResourceArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetStorageResourceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetStorageResourceId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStorageResourceId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetStorageResourceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StorageResourceId is not set"));
  }
  return nil
}

func (p *AiravataGetStorageResourceArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetStorageResourceArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.StorageResourceId = v
}
  return nil
}

func (p *AiravataGetStorageResourceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getStorageResource_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetStorageResourceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetStorageResourceArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("storageResourceId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:storageResourceId: ", p), err) }
  if err := oprot.WriteString(string(p.StorageResourceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.storageResourceId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:storageResourceId: ", p), err) }
  return err
}

func (p *AiravataGetStorageResourceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetStorageResourceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetStorageResourceResult struct {
  Success *storage_resource_model.StorageResourceDescription `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetStorageResourceResult() *AiravataGetStorageResourceResult {
  return &AiravataGetStorageResourceResult{}
}

var AiravataGetStorageResourceResult_Success_DEFAULT *storage_resource_model.StorageResourceDescription
func (p *AiravataGetStorageResourceResult) GetSuccess() *storage_resource_model.StorageResourceDescription {
  if !p.IsSetSuccess() {
    return AiravataGetStorageResourceResult_Success_DEFAULT
  }
return p.Success
}
var AiravataGetStorageResourceResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetStorageResourceResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetStorageResourceResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetStorageResourceResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetStorageResourceResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetStorageResourceResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetStorageResourceResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetStorageResourceResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetStorageResourceResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetStorageResourceResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetStorageResourceResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetStorageResourceResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetStorageResourceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetStorageResourceResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetStorageResourceResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetStorageResourceResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetStorageResourceResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetStorageResourceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetStorageResourceResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &storage_resource_model.StorageResourceDescription{
  StorageResourceId: "DO_NOT_SET_AT_CLIENTS",
}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AiravataGetStorageResourceResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetStorageResourceResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetStorageResourceResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetStorageResourceResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetStorageResourceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getStorageResource_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetStorageResourceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetStorageResourceResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetStorageResourceResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetStorageResourceResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetStorageResourceResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetStorageResourceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetStorageResourceResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
type AiravataGetAllStorageResourceNamesArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
}

func NewAiravataGetAllStorageResourceNamesArgs() *AiravataGetAllStorageResourceNamesArgs {
  return &AiravataGetAllStorageResourceNamesArgs{}
}

var AiravataGetAllStorageResourceNamesArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetAllStorageResourceNamesArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetAllStorageResourceNamesArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}
func (p *AiravataGetAllStorageResourceNamesArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetAllStorageResourceNamesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  return nil
}

func (p *AiravataGetAllStorageResourceNamesArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetAllStorageResourceNamesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllStorageResourceNames_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAllStorageResourceNamesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetAllStorageResourceNamesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAllStorageResourceNamesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetAllStorageResourceNamesResult struct {
  Success map[string]string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetAllStorageResourceNamesResult() *AiravataGetAllStorageResourceNamesResult {
  return &AiravataGetAllStorageResourceNamesResult{}
}

var AiravataGetAllStorageResourceNamesResult_Success_DEFAULT map[string]string

func (p *AiravataGetAllStorageResourceNamesResult) GetSuccess() map[string]string {
  return p.Success
}
var AiravataGetAllStorageResourceNamesResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetAllStorageResourceNamesResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetAllStorageResourceNamesResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetAllStorageResourceNamesResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetAllStorageResourceNamesResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetAllStorageResourceNamesResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetAllStorageResourceNamesResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetAllStorageResourceNamesResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetAllStorageResourceNamesResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetAllStorageResourceNamesResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetAllStorageResourceNamesResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetAllStorageResourceNamesResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetAllStorageResourceNamesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetAllStorageResourceNamesResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetAllStorageResourceNamesResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetAllStorageResourceNamesResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetAllStorageResourceNamesResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetAllStorageResourceNamesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetAllStorageResourceNamesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key375 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key375 = v
}
var _val376 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val376 = v
}
    p.Success[_key375] = _val376
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AiravataGetAllStorageResourceNamesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetAllStorageResourceNamesResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetAllStorageResourceNamesResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetAllStorageResourceNamesResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetAllStorageResourceNamesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllStorageResourceNames_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAllStorageResourceNamesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllStorageResourceNamesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllStorageResourceNamesResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllStorageResourceNamesResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllStorageResourceNamesResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllStorageResourceNamesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAllStorageResourceNamesResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - StorageResourceId
//  - StorageResourceDescription
type AiravataUpdateStorageResourceArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  StorageResourceId string `thrift:"storageResourceId,2,required" db:"storageResourceId" json:"storageResourceId"`
  StorageResourceDescription *storage_resource_model.StorageResourceDescription `thrift:"storageResourceDescription,3,required" db:"storageResourceDescription" json:"storageResourceDescription"`
}

func NewAiravataUpdateStorageResourceArgs() *AiravataUpdateStorageResourceArgs {
  return &AiravataUpdateStorageResourceArgs{}
}

var AiravataUpdateStorageResourceArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataUpdateStorageResourceArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataUpdateStorageResourceArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataUpdateStorageResourceArgs) GetStorageResourceId() string {
  return p.StorageResourceId
}
var AiravataUpdateStorageResourceArgs_StorageResourceDescription_DEFAULT *storage_resource_model.StorageResourceDescription
func (p *AiravataUpdateStorageResourceArgs) GetStorageResourceDescription() *storage_resource_model.StorageResourceDescription {
  if !p.IsSetStorageResourceDescription() {
    return AiravataUpdateStorageResourceArgs_StorageResourceDescription_DEFAULT
  }
return p.StorageResourceDescription
}
func (p *AiravataUpdateStorageResourceArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataUpdateStorageResourceArgs) IsSetStorageResourceDescription() bool {
  return p.StorageResourceDescription != nil
}

func (p *AiravataUpdateStorageResourceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetStorageResourceId bool = false;
  var issetStorageResourceDescription bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStorageResourceId = true
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStorageResourceDescription = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetStorageResourceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StorageResourceId is not set"));
  }
  if !issetStorageResourceDescription{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StorageResourceDescription is not set"));
  }
  return nil
}

func (p *AiravataUpdateStorageResourceArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataUpdateStorageResourceArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.StorageResourceId = v
}
  return nil
}

func (p *AiravataUpdateStorageResourceArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.StorageResourceDescription = &storage_resource_model.StorageResourceDescription{
  StorageResourceId: "DO_NOT_SET_AT_CLIENTS",
}
  if err := p.StorageResourceDescription.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StorageResourceDescription), err)
  }
  return nil
}

func (p *AiravataUpdateStorageResourceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateStorageResource_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateStorageResourceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataUpdateStorageResourceArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("storageResourceId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:storageResourceId: ", p), err) }
  if err := oprot.WriteString(string(p.StorageResourceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.storageResourceId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:storageResourceId: ", p), err) }
  return err
}

func (p *AiravataUpdateStorageResourceArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("storageResourceDescription", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:storageResourceDescription: ", p), err) }
  if err := p.StorageResourceDescription.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StorageResourceDescription), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:storageResourceDescription: ", p), err) }
  return err
}

func (p *AiravataUpdateStorageResourceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateStorageResourceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataUpdateStorageResourceResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataUpdateStorageResourceResult() *AiravataUpdateStorageResourceResult {
  return &AiravataUpdateStorageResourceResult{}
}

var AiravataUpdateStorageResourceResult_Success_DEFAULT bool
func (p *AiravataUpdateStorageResourceResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataUpdateStorageResourceResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataUpdateStorageResourceResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataUpdateStorageResourceResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataUpdateStorageResourceResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataUpdateStorageResourceResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataUpdateStorageResourceResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataUpdateStorageResourceResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataUpdateStorageResourceResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataUpdateStorageResourceResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataUpdateStorageResourceResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataUpdateStorageResourceResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataUpdateStorageResourceResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataUpdateStorageResourceResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataUpdateStorageResourceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataUpdateStorageResourceResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataUpdateStorageResourceResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataUpdateStorageResourceResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataUpdateStorageResourceResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataUpdateStorageResourceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataUpdateStorageResourceResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataUpdateStorageResourceResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataUpdateStorageResourceResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataUpdateStorageResourceResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataUpdateStorageResourceResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataUpdateStorageResourceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateStorageResource_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateStorageResourceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateStorageResourceResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateStorageResourceResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateStorageResourceResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateStorageResourceResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateStorageResourceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateStorageResourceResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - StorageResourceId
type AiravataDeleteStorageResourceArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  StorageResourceId string `thrift:"storageResourceId,2,required" db:"storageResourceId" json:"storageResourceId"`
}

func NewAiravataDeleteStorageResourceArgs() *AiravataDeleteStorageResourceArgs {
  return &AiravataDeleteStorageResourceArgs{}
}

var AiravataDeleteStorageResourceArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataDeleteStorageResourceArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataDeleteStorageResourceArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataDeleteStorageResourceArgs) GetStorageResourceId() string {
  return p.StorageResourceId
}
func (p *AiravataDeleteStorageResourceArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataDeleteStorageResourceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetStorageResourceId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStorageResourceId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetStorageResourceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StorageResourceId is not set"));
  }
  return nil
}

func (p *AiravataDeleteStorageResourceArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataDeleteStorageResourceArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.StorageResourceId = v
}
  return nil
}

func (p *AiravataDeleteStorageResourceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteStorageResource_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeleteStorageResourceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataDeleteStorageResourceArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("storageResourceId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:storageResourceId: ", p), err) }
  if err := oprot.WriteString(string(p.StorageResourceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.storageResourceId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:storageResourceId: ", p), err) }
  return err
}

func (p *AiravataDeleteStorageResourceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeleteStorageResourceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataDeleteStorageResourceResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataDeleteStorageResourceResult() *AiravataDeleteStorageResourceResult {
  return &AiravataDeleteStorageResourceResult{}
}

var AiravataDeleteStorageResourceResult_Success_DEFAULT bool
func (p *AiravataDeleteStorageResourceResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataDeleteStorageResourceResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataDeleteStorageResourceResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataDeleteStorageResourceResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataDeleteStorageResourceResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataDeleteStorageResourceResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataDeleteStorageResourceResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataDeleteStorageResourceResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataDeleteStorageResourceResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataDeleteStorageResourceResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataDeleteStorageResourceResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataDeleteStorageResourceResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataDeleteStorageResourceResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataDeleteStorageResourceResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataDeleteStorageResourceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataDeleteStorageResourceResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataDeleteStorageResourceResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataDeleteStorageResourceResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataDeleteStorageResourceResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataDeleteStorageResourceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataDeleteStorageResourceResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataDeleteStorageResourceResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataDeleteStorageResourceResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataDeleteStorageResourceResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataDeleteStorageResourceResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataDeleteStorageResourceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteStorageResource_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeleteStorageResourceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteStorageResourceResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteStorageResourceResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteStorageResourceResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteStorageResourceResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteStorageResourceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeleteStorageResourceResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - ComputeResourceId
//  - PriorityOrder
//  - LocalSubmission
type AiravataAddLocalSubmissionDetailsArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  ComputeResourceId string `thrift:"computeResourceId,2,required" db:"computeResourceId" json:"computeResourceId"`
  PriorityOrder int32 `thrift:"priorityOrder,3,required" db:"priorityOrder" json:"priorityOrder"`
  LocalSubmission *compute_resource_model.LOCALSubmission `thrift:"localSubmission,4,required" db:"localSubmission" json:"localSubmission"`
}

func NewAiravataAddLocalSubmissionDetailsArgs() *AiravataAddLocalSubmissionDetailsArgs {
  return &AiravataAddLocalSubmissionDetailsArgs{}
}

var AiravataAddLocalSubmissionDetailsArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataAddLocalSubmissionDetailsArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataAddLocalSubmissionDetailsArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataAddLocalSubmissionDetailsArgs) GetComputeResourceId() string {
  return p.ComputeResourceId
}

func (p *AiravataAddLocalSubmissionDetailsArgs) GetPriorityOrder() int32 {
  return p.PriorityOrder
}
var AiravataAddLocalSubmissionDetailsArgs_LocalSubmission_DEFAULT *compute_resource_model.LOCALSubmission
func (p *AiravataAddLocalSubmissionDetailsArgs) GetLocalSubmission() *compute_resource_model.LOCALSubmission {
  if !p.IsSetLocalSubmission() {
    return AiravataAddLocalSubmissionDetailsArgs_LocalSubmission_DEFAULT
  }
return p.LocalSubmission
}
func (p *AiravataAddLocalSubmissionDetailsArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataAddLocalSubmissionDetailsArgs) IsSetLocalSubmission() bool {
  return p.LocalSubmission != nil
}

func (p *AiravataAddLocalSubmissionDetailsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetComputeResourceId bool = false;
  var issetPriorityOrder bool = false;
  var issetLocalSubmission bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetComputeResourceId = true
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetPriorityOrder = true
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetLocalSubmission = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetComputeResourceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ComputeResourceId is not set"));
  }
  if !issetPriorityOrder{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PriorityOrder is not set"));
  }
  if !issetLocalSubmission{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LocalSubmission is not set"));
  }
  return nil
}

func (p *AiravataAddLocalSubmissionDetailsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataAddLocalSubmissionDetailsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ComputeResourceId = v
}
  return nil
}

func (p *AiravataAddLocalSubmissionDetailsArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PriorityOrder = v
}
  return nil
}

func (p *AiravataAddLocalSubmissionDetailsArgs)  ReadField4(iprot thrift.TProtocol) error {
  p.LocalSubmission = &compute_resource_model.LOCALSubmission{
  JobSubmissionInterfaceId: "DO_NOT_SET_AT_CLIENTS",
}
  if err := p.LocalSubmission.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LocalSubmission), err)
  }
  return nil
}

func (p *AiravataAddLocalSubmissionDetailsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addLocalSubmissionDetails_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataAddLocalSubmissionDetailsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataAddLocalSubmissionDetailsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("computeResourceId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:computeResourceId: ", p), err) }
  if err := oprot.WriteString(string(p.ComputeResourceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.computeResourceId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:computeResourceId: ", p), err) }
  return err
}

func (p *AiravataAddLocalSubmissionDetailsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("priorityOrder", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:priorityOrder: ", p), err) }
  if err := oprot.WriteI32(int32(p.PriorityOrder)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.priorityOrder (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:priorityOrder: ", p), err) }
  return err
}

func (p *AiravataAddLocalSubmissionDetailsArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("localSubmission", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:localSubmission: ", p), err) }
  if err := p.LocalSubmission.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LocalSubmission), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:localSubmission: ", p), err) }
  return err
}

func (p *AiravataAddLocalSubmissionDetailsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataAddLocalSubmissionDetailsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataAddLocalSubmissionDetailsResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataAddLocalSubmissionDetailsResult() *AiravataAddLocalSubmissionDetailsResult {
  return &AiravataAddLocalSubmissionDetailsResult{}
}

var AiravataAddLocalSubmissionDetailsResult_Success_DEFAULT string
func (p *AiravataAddLocalSubmissionDetailsResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return AiravataAddLocalSubmissionDetailsResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataAddLocalSubmissionDetailsResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataAddLocalSubmissionDetailsResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataAddLocalSubmissionDetailsResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataAddLocalSubmissionDetailsResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataAddLocalSubmissionDetailsResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataAddLocalSubmissionDetailsResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataAddLocalSubmissionDetailsResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataAddLocalSubmissionDetailsResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataAddLocalSubmissionDetailsResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataAddLocalSubmissionDetailsResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataAddLocalSubmissionDetailsResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataAddLocalSubmissionDetailsResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataAddLocalSubmissionDetailsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataAddLocalSubmissionDetailsResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataAddLocalSubmissionDetailsResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataAddLocalSubmissionDetailsResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataAddLocalSubmissionDetailsResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataAddLocalSubmissionDetailsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataAddLocalSubmissionDetailsResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataAddLocalSubmissionDetailsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataAddLocalSubmissionDetailsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataAddLocalSubmissionDetailsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataAddLocalSubmissionDetailsResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataAddLocalSubmissionDetailsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addLocalSubmissionDetails_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataAddLocalSubmissionDetailsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataAddLocalSubmissionDetailsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataAddLocalSubmissionDetailsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataAddLocalSubmissionDetailsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataAddLocalSubmissionDetailsResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataAddLocalSubmissionDetailsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataAddLocalSubmissionDetailsResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - JobSubmissionInterfaceId
//  - LocalSubmission
type AiravataUpdateLocalSubmissionDetailsArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  JobSubmissionInterfaceId string `thrift:"jobSubmissionInterfaceId,2,required" db:"jobSubmissionInterfaceId" json:"jobSubmissionInterfaceId"`
  LocalSubmission *compute_resource_model.LOCALSubmission `thrift:"localSubmission,3,required" db:"localSubmission" json:"localSubmission"`
}

func NewAiravataUpdateLocalSubmissionDetailsArgs() *AiravataUpdateLocalSubmissionDetailsArgs {
  return &AiravataUpdateLocalSubmissionDetailsArgs{}
}

var AiravataUpdateLocalSubmissionDetailsArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataUpdateLocalSubmissionDetailsArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataUpdateLocalSubmissionDetailsArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataUpdateLocalSubmissionDetailsArgs) GetJobSubmissionInterfaceId() string {
  return p.JobSubmissionInterfaceId
}
var AiravataUpdateLocalSubmissionDetailsArgs_LocalSubmission_DEFAULT *compute_resource_model.LOCALSubmission
func (p *AiravataUpdateLocalSubmissionDetailsArgs) GetLocalSubmission() *compute_resource_model.LOCALSubmission {
  if !p.IsSetLocalSubmission() {
    return AiravataUpdateLocalSubmissionDetailsArgs_LocalSubmission_DEFAULT
  }
return p.LocalSubmission
}
func (p *AiravataUpdateLocalSubmissionDetailsArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataUpdateLocalSubmissionDetailsArgs) IsSetLocalSubmission() bool {
  return p.LocalSubmission != nil
}

func (p *AiravataUpdateLocalSubmissionDetailsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetJobSubmissionInterfaceId bool = false;
  var issetLocalSubmission bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetJobSubmissionInterfaceId = true
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetLocalSubmission = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetJobSubmissionInterfaceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field JobSubmissionInterfaceId is not set"));
  }
  if !issetLocalSubmission{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LocalSubmission is not set"));
  }
  return nil
}

func (p *AiravataUpdateLocalSubmissionDetailsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataUpdateLocalSubmissionDetailsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.JobSubmissionInterfaceId = v
}
  return nil
}

func (p *AiravataUpdateLocalSubmissionDetailsArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.LocalSubmission = &compute_resource_model.LOCALSubmission{
  JobSubmissionInterfaceId: "DO_NOT_SET_AT_CLIENTS",
}
  if err := p.LocalSubmission.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LocalSubmission), err)
  }
  return nil
}

func (p *AiravataUpdateLocalSubmissionDetailsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateLocalSubmissionDetails_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateLocalSubmissionDetailsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataUpdateLocalSubmissionDetailsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("jobSubmissionInterfaceId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:jobSubmissionInterfaceId: ", p), err) }
  if err := oprot.WriteString(string(p.JobSubmissionInterfaceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.jobSubmissionInterfaceId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:jobSubmissionInterfaceId: ", p), err) }
  return err
}

func (p *AiravataUpdateLocalSubmissionDetailsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("localSubmission", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:localSubmission: ", p), err) }
  if err := p.LocalSubmission.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LocalSubmission), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:localSubmission: ", p), err) }
  return err
}

func (p *AiravataUpdateLocalSubmissionDetailsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateLocalSubmissionDetailsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataUpdateLocalSubmissionDetailsResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataUpdateLocalSubmissionDetailsResult() *AiravataUpdateLocalSubmissionDetailsResult {
  return &AiravataUpdateLocalSubmissionDetailsResult{}
}

var AiravataUpdateLocalSubmissionDetailsResult_Success_DEFAULT bool
func (p *AiravataUpdateLocalSubmissionDetailsResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataUpdateLocalSubmissionDetailsResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataUpdateLocalSubmissionDetailsResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataUpdateLocalSubmissionDetailsResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataUpdateLocalSubmissionDetailsResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataUpdateLocalSubmissionDetailsResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataUpdateLocalSubmissionDetailsResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataUpdateLocalSubmissionDetailsResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataUpdateLocalSubmissionDetailsResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataUpdateLocalSubmissionDetailsResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataUpdateLocalSubmissionDetailsResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataUpdateLocalSubmissionDetailsResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataUpdateLocalSubmissionDetailsResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataUpdateLocalSubmissionDetailsResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataUpdateLocalSubmissionDetailsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataUpdateLocalSubmissionDetailsResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataUpdateLocalSubmissionDetailsResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataUpdateLocalSubmissionDetailsResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataUpdateLocalSubmissionDetailsResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataUpdateLocalSubmissionDetailsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataUpdateLocalSubmissionDetailsResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataUpdateLocalSubmissionDetailsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataUpdateLocalSubmissionDetailsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataUpdateLocalSubmissionDetailsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataUpdateLocalSubmissionDetailsResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataUpdateLocalSubmissionDetailsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateLocalSubmissionDetails_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateLocalSubmissionDetailsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateLocalSubmissionDetailsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateLocalSubmissionDetailsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateLocalSubmissionDetailsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateLocalSubmissionDetailsResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateLocalSubmissionDetailsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateLocalSubmissionDetailsResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - JobSubmissionId
type AiravataGetLocalJobSubmissionArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  JobSubmissionId string `thrift:"jobSubmissionId,2,required" db:"jobSubmissionId" json:"jobSubmissionId"`
}

func NewAiravataGetLocalJobSubmissionArgs() *AiravataGetLocalJobSubmissionArgs {
  return &AiravataGetLocalJobSubmissionArgs{}
}

var AiravataGetLocalJobSubmissionArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetLocalJobSubmissionArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetLocalJobSubmissionArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetLocalJobSubmissionArgs) GetJobSubmissionId() string {
  return p.JobSubmissionId
}
func (p *AiravataGetLocalJobSubmissionArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetLocalJobSubmissionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetJobSubmissionId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetJobSubmissionId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetJobSubmissionId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field JobSubmissionId is not set"));
  }
  return nil
}

func (p *AiravataGetLocalJobSubmissionArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetLocalJobSubmissionArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.JobSubmissionId = v
}
  return nil
}

func (p *AiravataGetLocalJobSubmissionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getLocalJobSubmission_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetLocalJobSubmissionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetLocalJobSubmissionArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("jobSubmissionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:jobSubmissionId: ", p), err) }
  if err := oprot.WriteString(string(p.JobSubmissionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.jobSubmissionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:jobSubmissionId: ", p), err) }
  return err
}

func (p *AiravataGetLocalJobSubmissionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetLocalJobSubmissionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetLocalJobSubmissionResult struct {
  Success *compute_resource_model.LOCALSubmission `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetLocalJobSubmissionResult() *AiravataGetLocalJobSubmissionResult {
  return &AiravataGetLocalJobSubmissionResult{}
}

var AiravataGetLocalJobSubmissionResult_Success_DEFAULT *compute_resource_model.LOCALSubmission
func (p *AiravataGetLocalJobSubmissionResult) GetSuccess() *compute_resource_model.LOCALSubmission {
  if !p.IsSetSuccess() {
    return AiravataGetLocalJobSubmissionResult_Success_DEFAULT
  }
return p.Success
}
var AiravataGetLocalJobSubmissionResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetLocalJobSubmissionResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetLocalJobSubmissionResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetLocalJobSubmissionResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetLocalJobSubmissionResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetLocalJobSubmissionResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetLocalJobSubmissionResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetLocalJobSubmissionResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetLocalJobSubmissionResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetLocalJobSubmissionResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetLocalJobSubmissionResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetLocalJobSubmissionResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetLocalJobSubmissionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetLocalJobSubmissionResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetLocalJobSubmissionResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetLocalJobSubmissionResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetLocalJobSubmissionResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetLocalJobSubmissionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetLocalJobSubmissionResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &compute_resource_model.LOCALSubmission{
  JobSubmissionInterfaceId: "DO_NOT_SET_AT_CLIENTS",
}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AiravataGetLocalJobSubmissionResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetLocalJobSubmissionResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetLocalJobSubmissionResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetLocalJobSubmissionResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetLocalJobSubmissionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getLocalJobSubmission_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetLocalJobSubmissionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetLocalJobSubmissionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetLocalJobSubmissionResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetLocalJobSubmissionResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetLocalJobSubmissionResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetLocalJobSubmissionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetLocalJobSubmissionResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - ComputeResourceId
//  - PriorityOrder
//  - SshJobSubmission
type AiravataAddSSHJobSubmissionDetailsArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  ComputeResourceId string `thrift:"computeResourceId,2,required" db:"computeResourceId" json:"computeResourceId"`
  PriorityOrder int32 `thrift:"priorityOrder,3,required" db:"priorityOrder" json:"priorityOrder"`
  SshJobSubmission *compute_resource_model.SSHJobSubmission `thrift:"sshJobSubmission,4,required" db:"sshJobSubmission" json:"sshJobSubmission"`
}

func NewAiravataAddSSHJobSubmissionDetailsArgs() *AiravataAddSSHJobSubmissionDetailsArgs {
  return &AiravataAddSSHJobSubmissionDetailsArgs{}
}

var AiravataAddSSHJobSubmissionDetailsArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataAddSSHJobSubmissionDetailsArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataAddSSHJobSubmissionDetailsArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataAddSSHJobSubmissionDetailsArgs) GetComputeResourceId() string {
  return p.ComputeResourceId
}

func (p *AiravataAddSSHJobSubmissionDetailsArgs) GetPriorityOrder() int32 {
  return p.PriorityOrder
}
var AiravataAddSSHJobSubmissionDetailsArgs_SshJobSubmission_DEFAULT *compute_resource_model.SSHJobSubmission
func (p *AiravataAddSSHJobSubmissionDetailsArgs) GetSshJobSubmission() *compute_resource_model.SSHJobSubmission {
  if !p.IsSetSshJobSubmission() {
    return AiravataAddSSHJobSubmissionDetailsArgs_SshJobSubmission_DEFAULT
  }
return p.SshJobSubmission
}
func (p *AiravataAddSSHJobSubmissionDetailsArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataAddSSHJobSubmissionDetailsArgs) IsSetSshJobSubmission() bool {
  return p.SshJobSubmission != nil
}

func (p *AiravataAddSSHJobSubmissionDetailsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetComputeResourceId bool = false;
  var issetPriorityOrder bool = false;
  var issetSshJobSubmission bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetComputeResourceId = true
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetPriorityOrder = true
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetSshJobSubmission = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetComputeResourceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ComputeResourceId is not set"));
  }
  if !issetPriorityOrder{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PriorityOrder is not set"));
  }
  if !issetSshJobSubmission{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SshJobSubmission is not set"));
  }
  return nil
}

func (p *AiravataAddSSHJobSubmissionDetailsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataAddSSHJobSubmissionDetailsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ComputeResourceId = v
}
  return nil
}

func (p *AiravataAddSSHJobSubmissionDetailsArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PriorityOrder = v
}
  return nil
}

func (p *AiravataAddSSHJobSubmissionDetailsArgs)  ReadField4(iprot thrift.TProtocol) error {
  p.SshJobSubmission = &compute_resource_model.SSHJobSubmission{
  JobSubmissionInterfaceId: "DO_NOT_SET_AT_CLIENTS",

  SshPort: 22,
}
  if err := p.SshJobSubmission.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SshJobSubmission), err)
  }
  return nil
}

func (p *AiravataAddSSHJobSubmissionDetailsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addSSHJobSubmissionDetails_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataAddSSHJobSubmissionDetailsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataAddSSHJobSubmissionDetailsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("computeResourceId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:computeResourceId: ", p), err) }
  if err := oprot.WriteString(string(p.ComputeResourceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.computeResourceId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:computeResourceId: ", p), err) }
  return err
}

func (p *AiravataAddSSHJobSubmissionDetailsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("priorityOrder", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:priorityOrder: ", p), err) }
  if err := oprot.WriteI32(int32(p.PriorityOrder)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.priorityOrder (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:priorityOrder: ", p), err) }
  return err
}

func (p *AiravataAddSSHJobSubmissionDetailsArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sshJobSubmission", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sshJobSubmission: ", p), err) }
  if err := p.SshJobSubmission.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SshJobSubmission), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sshJobSubmission: ", p), err) }
  return err
}

func (p *AiravataAddSSHJobSubmissionDetailsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataAddSSHJobSubmissionDetailsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataAddSSHJobSubmissionDetailsResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataAddSSHJobSubmissionDetailsResult() *AiravataAddSSHJobSubmissionDetailsResult {
  return &AiravataAddSSHJobSubmissionDetailsResult{}
}

var AiravataAddSSHJobSubmissionDetailsResult_Success_DEFAULT string
func (p *AiravataAddSSHJobSubmissionDetailsResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return AiravataAddSSHJobSubmissionDetailsResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataAddSSHJobSubmissionDetailsResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataAddSSHJobSubmissionDetailsResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataAddSSHJobSubmissionDetailsResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataAddSSHJobSubmissionDetailsResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataAddSSHJobSubmissionDetailsResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataAddSSHJobSubmissionDetailsResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataAddSSHJobSubmissionDetailsResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataAddSSHJobSubmissionDetailsResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataAddSSHJobSubmissionDetailsResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataAddSSHJobSubmissionDetailsResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataAddSSHJobSubmissionDetailsResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataAddSSHJobSubmissionDetailsResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataAddSSHJobSubmissionDetailsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataAddSSHJobSubmissionDetailsResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataAddSSHJobSubmissionDetailsResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataAddSSHJobSubmissionDetailsResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataAddSSHJobSubmissionDetailsResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataAddSSHJobSubmissionDetailsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataAddSSHJobSubmissionDetailsResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataAddSSHJobSubmissionDetailsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataAddSSHJobSubmissionDetailsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataAddSSHJobSubmissionDetailsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataAddSSHJobSubmissionDetailsResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataAddSSHJobSubmissionDetailsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addSSHJobSubmissionDetails_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataAddSSHJobSubmissionDetailsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataAddSSHJobSubmissionDetailsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataAddSSHJobSubmissionDetailsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataAddSSHJobSubmissionDetailsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataAddSSHJobSubmissionDetailsResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataAddSSHJobSubmissionDetailsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataAddSSHJobSubmissionDetailsResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - ComputeResourceId
//  - PriorityOrder
//  - SshJobSubmission
type AiravataAddSSHForkJobSubmissionDetailsArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  ComputeResourceId string `thrift:"computeResourceId,2,required" db:"computeResourceId" json:"computeResourceId"`
  PriorityOrder int32 `thrift:"priorityOrder,3,required" db:"priorityOrder" json:"priorityOrder"`
  SshJobSubmission *compute_resource_model.SSHJobSubmission `thrift:"sshJobSubmission,4,required" db:"sshJobSubmission" json:"sshJobSubmission"`
}

func NewAiravataAddSSHForkJobSubmissionDetailsArgs() *AiravataAddSSHForkJobSubmissionDetailsArgs {
  return &AiravataAddSSHForkJobSubmissionDetailsArgs{}
}

var AiravataAddSSHForkJobSubmissionDetailsArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataAddSSHForkJobSubmissionDetailsArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataAddSSHForkJobSubmissionDetailsArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataAddSSHForkJobSubmissionDetailsArgs) GetComputeResourceId() string {
  return p.ComputeResourceId
}

func (p *AiravataAddSSHForkJobSubmissionDetailsArgs) GetPriorityOrder() int32 {
  return p.PriorityOrder
}
var AiravataAddSSHForkJobSubmissionDetailsArgs_SshJobSubmission_DEFAULT *compute_resource_model.SSHJobSubmission
func (p *AiravataAddSSHForkJobSubmissionDetailsArgs) GetSshJobSubmission() *compute_resource_model.SSHJobSubmission {
  if !p.IsSetSshJobSubmission() {
    return AiravataAddSSHForkJobSubmissionDetailsArgs_SshJobSubmission_DEFAULT
  }
return p.SshJobSubmission
}
func (p *AiravataAddSSHForkJobSubmissionDetailsArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataAddSSHForkJobSubmissionDetailsArgs) IsSetSshJobSubmission() bool {
  return p.SshJobSubmission != nil
}

func (p *AiravataAddSSHForkJobSubmissionDetailsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetComputeResourceId bool = false;
  var issetPriorityOrder bool = false;
  var issetSshJobSubmission bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetComputeResourceId = true
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetPriorityOrder = true
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetSshJobSubmission = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetComputeResourceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ComputeResourceId is not set"));
  }
  if !issetPriorityOrder{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PriorityOrder is not set"));
  }
  if !issetSshJobSubmission{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SshJobSubmission is not set"));
  }
  return nil
}

func (p *AiravataAddSSHForkJobSubmissionDetailsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataAddSSHForkJobSubmissionDetailsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ComputeResourceId = v
}
  return nil
}

func (p *AiravataAddSSHForkJobSubmissionDetailsArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PriorityOrder = v
}
  return nil
}

func (p *AiravataAddSSHForkJobSubmissionDetailsArgs)  ReadField4(iprot thrift.TProtocol) error {
  p.SshJobSubmission = &compute_resource_model.SSHJobSubmission{
  JobSubmissionInterfaceId: "DO_NOT_SET_AT_CLIENTS",

  SshPort: 22,
}
  if err := p.SshJobSubmission.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SshJobSubmission), err)
  }
  return nil
}

func (p *AiravataAddSSHForkJobSubmissionDetailsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addSSHForkJobSubmissionDetails_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataAddSSHForkJobSubmissionDetailsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataAddSSHForkJobSubmissionDetailsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("computeResourceId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:computeResourceId: ", p), err) }
  if err := oprot.WriteString(string(p.ComputeResourceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.computeResourceId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:computeResourceId: ", p), err) }
  return err
}

func (p *AiravataAddSSHForkJobSubmissionDetailsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("priorityOrder", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:priorityOrder: ", p), err) }
  if err := oprot.WriteI32(int32(p.PriorityOrder)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.priorityOrder (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:priorityOrder: ", p), err) }
  return err
}

func (p *AiravataAddSSHForkJobSubmissionDetailsArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sshJobSubmission", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sshJobSubmission: ", p), err) }
  if err := p.SshJobSubmission.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SshJobSubmission), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sshJobSubmission: ", p), err) }
  return err
}

func (p *AiravataAddSSHForkJobSubmissionDetailsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataAddSSHForkJobSubmissionDetailsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataAddSSHForkJobSubmissionDetailsResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataAddSSHForkJobSubmissionDetailsResult() *AiravataAddSSHForkJobSubmissionDetailsResult {
  return &AiravataAddSSHForkJobSubmissionDetailsResult{}
}

var AiravataAddSSHForkJobSubmissionDetailsResult_Success_DEFAULT string
func (p *AiravataAddSSHForkJobSubmissionDetailsResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return AiravataAddSSHForkJobSubmissionDetailsResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataAddSSHForkJobSubmissionDetailsResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataAddSSHForkJobSubmissionDetailsResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataAddSSHForkJobSubmissionDetailsResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataAddSSHForkJobSubmissionDetailsResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataAddSSHForkJobSubmissionDetailsResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataAddSSHForkJobSubmissionDetailsResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataAddSSHForkJobSubmissionDetailsResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataAddSSHForkJobSubmissionDetailsResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataAddSSHForkJobSubmissionDetailsResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataAddSSHForkJobSubmissionDetailsResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataAddSSHForkJobSubmissionDetailsResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataAddSSHForkJobSubmissionDetailsResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataAddSSHForkJobSubmissionDetailsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataAddSSHForkJobSubmissionDetailsResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataAddSSHForkJobSubmissionDetailsResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataAddSSHForkJobSubmissionDetailsResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataAddSSHForkJobSubmissionDetailsResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataAddSSHForkJobSubmissionDetailsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataAddSSHForkJobSubmissionDetailsResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataAddSSHForkJobSubmissionDetailsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataAddSSHForkJobSubmissionDetailsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataAddSSHForkJobSubmissionDetailsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataAddSSHForkJobSubmissionDetailsResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataAddSSHForkJobSubmissionDetailsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addSSHForkJobSubmissionDetails_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataAddSSHForkJobSubmissionDetailsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataAddSSHForkJobSubmissionDetailsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataAddSSHForkJobSubmissionDetailsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataAddSSHForkJobSubmissionDetailsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataAddSSHForkJobSubmissionDetailsResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataAddSSHForkJobSubmissionDetailsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataAddSSHForkJobSubmissionDetailsResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - JobSubmissionId
type AiravataGetSSHJobSubmissionArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  JobSubmissionId string `thrift:"jobSubmissionId,2,required" db:"jobSubmissionId" json:"jobSubmissionId"`
}

func NewAiravataGetSSHJobSubmissionArgs() *AiravataGetSSHJobSubmissionArgs {
  return &AiravataGetSSHJobSubmissionArgs{}
}

var AiravataGetSSHJobSubmissionArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetSSHJobSubmissionArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetSSHJobSubmissionArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetSSHJobSubmissionArgs) GetJobSubmissionId() string {
  return p.JobSubmissionId
}
func (p *AiravataGetSSHJobSubmissionArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetSSHJobSubmissionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetJobSubmissionId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetJobSubmissionId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetJobSubmissionId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field JobSubmissionId is not set"));
  }
  return nil
}

func (p *AiravataGetSSHJobSubmissionArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetSSHJobSubmissionArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.JobSubmissionId = v
}
  return nil
}

func (p *AiravataGetSSHJobSubmissionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSSHJobSubmission_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetSSHJobSubmissionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetSSHJobSubmissionArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("jobSubmissionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:jobSubmissionId: ", p), err) }
  if err := oprot.WriteString(string(p.JobSubmissionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.jobSubmissionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:jobSubmissionId: ", p), err) }
  return err
}

func (p *AiravataGetSSHJobSubmissionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetSSHJobSubmissionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetSSHJobSubmissionResult struct {
  Success *compute_resource_model.SSHJobSubmission `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetSSHJobSubmissionResult() *AiravataGetSSHJobSubmissionResult {
  return &AiravataGetSSHJobSubmissionResult{}
}

var AiravataGetSSHJobSubmissionResult_Success_DEFAULT *compute_resource_model.SSHJobSubmission
func (p *AiravataGetSSHJobSubmissionResult) GetSuccess() *compute_resource_model.SSHJobSubmission {
  if !p.IsSetSuccess() {
    return AiravataGetSSHJobSubmissionResult_Success_DEFAULT
  }
return p.Success
}
var AiravataGetSSHJobSubmissionResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetSSHJobSubmissionResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetSSHJobSubmissionResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetSSHJobSubmissionResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetSSHJobSubmissionResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetSSHJobSubmissionResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetSSHJobSubmissionResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetSSHJobSubmissionResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetSSHJobSubmissionResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetSSHJobSubmissionResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetSSHJobSubmissionResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetSSHJobSubmissionResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetSSHJobSubmissionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetSSHJobSubmissionResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetSSHJobSubmissionResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetSSHJobSubmissionResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetSSHJobSubmissionResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetSSHJobSubmissionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetSSHJobSubmissionResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &compute_resource_model.SSHJobSubmission{
  JobSubmissionInterfaceId: "DO_NOT_SET_AT_CLIENTS",

  SshPort: 22,
}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AiravataGetSSHJobSubmissionResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetSSHJobSubmissionResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetSSHJobSubmissionResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetSSHJobSubmissionResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetSSHJobSubmissionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSSHJobSubmission_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetSSHJobSubmissionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetSSHJobSubmissionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetSSHJobSubmissionResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetSSHJobSubmissionResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetSSHJobSubmissionResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetSSHJobSubmissionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetSSHJobSubmissionResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - ComputeResourceId
//  - PriorityOrder
//  - UnicoreJobSubmission
type AiravataAddUNICOREJobSubmissionDetailsArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  ComputeResourceId string `thrift:"computeResourceId,2,required" db:"computeResourceId" json:"computeResourceId"`
  PriorityOrder int32 `thrift:"priorityOrder,3,required" db:"priorityOrder" json:"priorityOrder"`
  UnicoreJobSubmission *compute_resource_model.UnicoreJobSubmission `thrift:"unicoreJobSubmission,4,required" db:"unicoreJobSubmission" json:"unicoreJobSubmission"`
}

func NewAiravataAddUNICOREJobSubmissionDetailsArgs() *AiravataAddUNICOREJobSubmissionDetailsArgs {
  return &AiravataAddUNICOREJobSubmissionDetailsArgs{}
}

var AiravataAddUNICOREJobSubmissionDetailsArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataAddUNICOREJobSubmissionDetailsArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataAddUNICOREJobSubmissionDetailsArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataAddUNICOREJobSubmissionDetailsArgs) GetComputeResourceId() string {
  return p.ComputeResourceId
}

func (p *AiravataAddUNICOREJobSubmissionDetailsArgs) GetPriorityOrder() int32 {
  return p.PriorityOrder
}
var AiravataAddUNICOREJobSubmissionDetailsArgs_UnicoreJobSubmission_DEFAULT *compute_resource_model.UnicoreJobSubmission
func (p *AiravataAddUNICOREJobSubmissionDetailsArgs) GetUnicoreJobSubmission() *compute_resource_model.UnicoreJobSubmission {
  if !p.IsSetUnicoreJobSubmission() {
    return AiravataAddUNICOREJobSubmissionDetailsArgs_UnicoreJobSubmission_DEFAULT
  }
return p.UnicoreJobSubmission
}
func (p *AiravataAddUNICOREJobSubmissionDetailsArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataAddUNICOREJobSubmissionDetailsArgs) IsSetUnicoreJobSubmission() bool {
  return p.UnicoreJobSubmission != nil
}

func (p *AiravataAddUNICOREJobSubmissionDetailsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetComputeResourceId bool = false;
  var issetPriorityOrder bool = false;
  var issetUnicoreJobSubmission bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetComputeResourceId = true
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetPriorityOrder = true
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUnicoreJobSubmission = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetComputeResourceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ComputeResourceId is not set"));
  }
  if !issetPriorityOrder{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PriorityOrder is not set"));
  }
  if !issetUnicoreJobSubmission{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UnicoreJobSubmission is not set"));
  }
  return nil
}

func (p *AiravataAddUNICOREJobSubmissionDetailsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataAddUNICOREJobSubmissionDetailsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ComputeResourceId = v
}
  return nil
}

func (p *AiravataAddUNICOREJobSubmissionDetailsArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PriorityOrder = v
}
  return nil
}

func (p *AiravataAddUNICOREJobSubmissionDetailsArgs)  ReadField4(iprot thrift.TProtocol) error {
  p.UnicoreJobSubmission = &compute_resource_model.UnicoreJobSubmission{
  JobSubmissionInterfaceId: "DO_NOT_SET_AT_CLIENTS",
}
  if err := p.UnicoreJobSubmission.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UnicoreJobSubmission), err)
  }
  return nil
}

func (p *AiravataAddUNICOREJobSubmissionDetailsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addUNICOREJobSubmissionDetails_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataAddUNICOREJobSubmissionDetailsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataAddUNICOREJobSubmissionDetailsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("computeResourceId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:computeResourceId: ", p), err) }
  if err := oprot.WriteString(string(p.ComputeResourceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.computeResourceId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:computeResourceId: ", p), err) }
  return err
}

func (p *AiravataAddUNICOREJobSubmissionDetailsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("priorityOrder", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:priorityOrder: ", p), err) }
  if err := oprot.WriteI32(int32(p.PriorityOrder)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.priorityOrder (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:priorityOrder: ", p), err) }
  return err
}

func (p *AiravataAddUNICOREJobSubmissionDetailsArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("unicoreJobSubmission", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:unicoreJobSubmission: ", p), err) }
  if err := p.UnicoreJobSubmission.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UnicoreJobSubmission), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:unicoreJobSubmission: ", p), err) }
  return err
}

func (p *AiravataAddUNICOREJobSubmissionDetailsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataAddUNICOREJobSubmissionDetailsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataAddUNICOREJobSubmissionDetailsResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataAddUNICOREJobSubmissionDetailsResult() *AiravataAddUNICOREJobSubmissionDetailsResult {
  return &AiravataAddUNICOREJobSubmissionDetailsResult{}
}

var AiravataAddUNICOREJobSubmissionDetailsResult_Success_DEFAULT string
func (p *AiravataAddUNICOREJobSubmissionDetailsResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return AiravataAddUNICOREJobSubmissionDetailsResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataAddUNICOREJobSubmissionDetailsResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataAddUNICOREJobSubmissionDetailsResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataAddUNICOREJobSubmissionDetailsResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataAddUNICOREJobSubmissionDetailsResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataAddUNICOREJobSubmissionDetailsResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataAddUNICOREJobSubmissionDetailsResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataAddUNICOREJobSubmissionDetailsResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataAddUNICOREJobSubmissionDetailsResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataAddUNICOREJobSubmissionDetailsResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataAddUNICOREJobSubmissionDetailsResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataAddUNICOREJobSubmissionDetailsResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataAddUNICOREJobSubmissionDetailsResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataAddUNICOREJobSubmissionDetailsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataAddUNICOREJobSubmissionDetailsResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataAddUNICOREJobSubmissionDetailsResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataAddUNICOREJobSubmissionDetailsResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataAddUNICOREJobSubmissionDetailsResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataAddUNICOREJobSubmissionDetailsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataAddUNICOREJobSubmissionDetailsResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataAddUNICOREJobSubmissionDetailsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataAddUNICOREJobSubmissionDetailsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataAddUNICOREJobSubmissionDetailsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataAddUNICOREJobSubmissionDetailsResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataAddUNICOREJobSubmissionDetailsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addUNICOREJobSubmissionDetails_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataAddUNICOREJobSubmissionDetailsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataAddUNICOREJobSubmissionDetailsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataAddUNICOREJobSubmissionDetailsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataAddUNICOREJobSubmissionDetailsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataAddUNICOREJobSubmissionDetailsResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataAddUNICOREJobSubmissionDetailsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataAddUNICOREJobSubmissionDetailsResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - JobSubmissionId
type AiravataGetUnicoreJobSubmissionArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  JobSubmissionId string `thrift:"jobSubmissionId,2,required" db:"jobSubmissionId" json:"jobSubmissionId"`
}

func NewAiravataGetUnicoreJobSubmissionArgs() *AiravataGetUnicoreJobSubmissionArgs {
  return &AiravataGetUnicoreJobSubmissionArgs{}
}

var AiravataGetUnicoreJobSubmissionArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetUnicoreJobSubmissionArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetUnicoreJobSubmissionArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetUnicoreJobSubmissionArgs) GetJobSubmissionId() string {
  return p.JobSubmissionId
}
func (p *AiravataGetUnicoreJobSubmissionArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetUnicoreJobSubmissionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetJobSubmissionId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetJobSubmissionId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetJobSubmissionId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field JobSubmissionId is not set"));
  }
  return nil
}

func (p *AiravataGetUnicoreJobSubmissionArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetUnicoreJobSubmissionArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.JobSubmissionId = v
}
  return nil
}

func (p *AiravataGetUnicoreJobSubmissionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUnicoreJobSubmission_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetUnicoreJobSubmissionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetUnicoreJobSubmissionArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("jobSubmissionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:jobSubmissionId: ", p), err) }
  if err := oprot.WriteString(string(p.JobSubmissionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.jobSubmissionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:jobSubmissionId: ", p), err) }
  return err
}

func (p *AiravataGetUnicoreJobSubmissionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetUnicoreJobSubmissionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetUnicoreJobSubmissionResult struct {
  Success *compute_resource_model.UnicoreJobSubmission `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetUnicoreJobSubmissionResult() *AiravataGetUnicoreJobSubmissionResult {
  return &AiravataGetUnicoreJobSubmissionResult{}
}

var AiravataGetUnicoreJobSubmissionResult_Success_DEFAULT *compute_resource_model.UnicoreJobSubmission
func (p *AiravataGetUnicoreJobSubmissionResult) GetSuccess() *compute_resource_model.UnicoreJobSubmission {
  if !p.IsSetSuccess() {
    return AiravataGetUnicoreJobSubmissionResult_Success_DEFAULT
  }
return p.Success
}
var AiravataGetUnicoreJobSubmissionResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetUnicoreJobSubmissionResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetUnicoreJobSubmissionResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetUnicoreJobSubmissionResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetUnicoreJobSubmissionResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetUnicoreJobSubmissionResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetUnicoreJobSubmissionResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetUnicoreJobSubmissionResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetUnicoreJobSubmissionResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetUnicoreJobSubmissionResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetUnicoreJobSubmissionResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetUnicoreJobSubmissionResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetUnicoreJobSubmissionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetUnicoreJobSubmissionResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetUnicoreJobSubmissionResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetUnicoreJobSubmissionResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetUnicoreJobSubmissionResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetUnicoreJobSubmissionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetUnicoreJobSubmissionResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &compute_resource_model.UnicoreJobSubmission{
  JobSubmissionInterfaceId: "DO_NOT_SET_AT_CLIENTS",
}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AiravataGetUnicoreJobSubmissionResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetUnicoreJobSubmissionResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetUnicoreJobSubmissionResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetUnicoreJobSubmissionResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetUnicoreJobSubmissionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUnicoreJobSubmission_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetUnicoreJobSubmissionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetUnicoreJobSubmissionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetUnicoreJobSubmissionResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetUnicoreJobSubmissionResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetUnicoreJobSubmissionResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetUnicoreJobSubmissionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetUnicoreJobSubmissionResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - ComputeResourceId
//  - PriorityOrder
//  - CloudSubmission
type AiravataAddCloudJobSubmissionDetailsArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  ComputeResourceId string `thrift:"computeResourceId,2,required" db:"computeResourceId" json:"computeResourceId"`
  PriorityOrder int32 `thrift:"priorityOrder,3,required" db:"priorityOrder" json:"priorityOrder"`
  CloudSubmission *compute_resource_model.CloudJobSubmission `thrift:"cloudSubmission,4,required" db:"cloudSubmission" json:"cloudSubmission"`
}

func NewAiravataAddCloudJobSubmissionDetailsArgs() *AiravataAddCloudJobSubmissionDetailsArgs {
  return &AiravataAddCloudJobSubmissionDetailsArgs{}
}

var AiravataAddCloudJobSubmissionDetailsArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataAddCloudJobSubmissionDetailsArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataAddCloudJobSubmissionDetailsArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataAddCloudJobSubmissionDetailsArgs) GetComputeResourceId() string {
  return p.ComputeResourceId
}

func (p *AiravataAddCloudJobSubmissionDetailsArgs) GetPriorityOrder() int32 {
  return p.PriorityOrder
}
var AiravataAddCloudJobSubmissionDetailsArgs_CloudSubmission_DEFAULT *compute_resource_model.CloudJobSubmission
func (p *AiravataAddCloudJobSubmissionDetailsArgs) GetCloudSubmission() *compute_resource_model.CloudJobSubmission {
  if !p.IsSetCloudSubmission() {
    return AiravataAddCloudJobSubmissionDetailsArgs_CloudSubmission_DEFAULT
  }
return p.CloudSubmission
}
func (p *AiravataAddCloudJobSubmissionDetailsArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataAddCloudJobSubmissionDetailsArgs) IsSetCloudSubmission() bool {
  return p.CloudSubmission != nil
}

func (p *AiravataAddCloudJobSubmissionDetailsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetComputeResourceId bool = false;
  var issetPriorityOrder bool = false;
  var issetCloudSubmission bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetComputeResourceId = true
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetPriorityOrder = true
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetCloudSubmission = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetComputeResourceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ComputeResourceId is not set"));
  }
  if !issetPriorityOrder{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PriorityOrder is not set"));
  }
  if !issetCloudSubmission{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CloudSubmission is not set"));
  }
  return nil
}

func (p *AiravataAddCloudJobSubmissionDetailsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataAddCloudJobSubmissionDetailsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ComputeResourceId = v
}
  return nil
}

func (p *AiravataAddCloudJobSubmissionDetailsArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PriorityOrder = v
}
  return nil
}

func (p *AiravataAddCloudJobSubmissionDetailsArgs)  ReadField4(iprot thrift.TProtocol) error {
  p.CloudSubmission = &compute_resource_model.CloudJobSubmission{
  JobSubmissionInterfaceId: "DO_NOT_SET_AT_CLIENTS",
}
  if err := p.CloudSubmission.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CloudSubmission), err)
  }
  return nil
}

func (p *AiravataAddCloudJobSubmissionDetailsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addCloudJobSubmissionDetails_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataAddCloudJobSubmissionDetailsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataAddCloudJobSubmissionDetailsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("computeResourceId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:computeResourceId: ", p), err) }
  if err := oprot.WriteString(string(p.ComputeResourceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.computeResourceId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:computeResourceId: ", p), err) }
  return err
}

func (p *AiravataAddCloudJobSubmissionDetailsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("priorityOrder", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:priorityOrder: ", p), err) }
  if err := oprot.WriteI32(int32(p.PriorityOrder)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.priorityOrder (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:priorityOrder: ", p), err) }
  return err
}

func (p *AiravataAddCloudJobSubmissionDetailsArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cloudSubmission", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:cloudSubmission: ", p), err) }
  if err := p.CloudSubmission.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CloudSubmission), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:cloudSubmission: ", p), err) }
  return err
}

func (p *AiravataAddCloudJobSubmissionDetailsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataAddCloudJobSubmissionDetailsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataAddCloudJobSubmissionDetailsResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataAddCloudJobSubmissionDetailsResult() *AiravataAddCloudJobSubmissionDetailsResult {
  return &AiravataAddCloudJobSubmissionDetailsResult{}
}

var AiravataAddCloudJobSubmissionDetailsResult_Success_DEFAULT string
func (p *AiravataAddCloudJobSubmissionDetailsResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return AiravataAddCloudJobSubmissionDetailsResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataAddCloudJobSubmissionDetailsResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataAddCloudJobSubmissionDetailsResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataAddCloudJobSubmissionDetailsResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataAddCloudJobSubmissionDetailsResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataAddCloudJobSubmissionDetailsResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataAddCloudJobSubmissionDetailsResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataAddCloudJobSubmissionDetailsResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataAddCloudJobSubmissionDetailsResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataAddCloudJobSubmissionDetailsResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataAddCloudJobSubmissionDetailsResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataAddCloudJobSubmissionDetailsResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataAddCloudJobSubmissionDetailsResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataAddCloudJobSubmissionDetailsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataAddCloudJobSubmissionDetailsResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataAddCloudJobSubmissionDetailsResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataAddCloudJobSubmissionDetailsResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataAddCloudJobSubmissionDetailsResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataAddCloudJobSubmissionDetailsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataAddCloudJobSubmissionDetailsResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataAddCloudJobSubmissionDetailsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataAddCloudJobSubmissionDetailsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataAddCloudJobSubmissionDetailsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataAddCloudJobSubmissionDetailsResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataAddCloudJobSubmissionDetailsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addCloudJobSubmissionDetails_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataAddCloudJobSubmissionDetailsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataAddCloudJobSubmissionDetailsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataAddCloudJobSubmissionDetailsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataAddCloudJobSubmissionDetailsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataAddCloudJobSubmissionDetailsResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataAddCloudJobSubmissionDetailsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataAddCloudJobSubmissionDetailsResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - JobSubmissionId
type AiravataGetCloudJobSubmissionArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  JobSubmissionId string `thrift:"jobSubmissionId,2,required" db:"jobSubmissionId" json:"jobSubmissionId"`
}

func NewAiravataGetCloudJobSubmissionArgs() *AiravataGetCloudJobSubmissionArgs {
  return &AiravataGetCloudJobSubmissionArgs{}
}

var AiravataGetCloudJobSubmissionArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetCloudJobSubmissionArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetCloudJobSubmissionArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetCloudJobSubmissionArgs) GetJobSubmissionId() string {
  return p.JobSubmissionId
}
func (p *AiravataGetCloudJobSubmissionArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetCloudJobSubmissionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetJobSubmissionId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetJobSubmissionId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetJobSubmissionId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field JobSubmissionId is not set"));
  }
  return nil
}

func (p *AiravataGetCloudJobSubmissionArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetCloudJobSubmissionArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.JobSubmissionId = v
}
  return nil
}

func (p *AiravataGetCloudJobSubmissionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCloudJobSubmission_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetCloudJobSubmissionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetCloudJobSubmissionArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("jobSubmissionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:jobSubmissionId: ", p), err) }
  if err := oprot.WriteString(string(p.JobSubmissionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.jobSubmissionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:jobSubmissionId: ", p), err) }
  return err
}

func (p *AiravataGetCloudJobSubmissionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetCloudJobSubmissionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetCloudJobSubmissionResult struct {
  Success *compute_resource_model.CloudJobSubmission `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetCloudJobSubmissionResult() *AiravataGetCloudJobSubmissionResult {
  return &AiravataGetCloudJobSubmissionResult{}
}

var AiravataGetCloudJobSubmissionResult_Success_DEFAULT *compute_resource_model.CloudJobSubmission
func (p *AiravataGetCloudJobSubmissionResult) GetSuccess() *compute_resource_model.CloudJobSubmission {
  if !p.IsSetSuccess() {
    return AiravataGetCloudJobSubmissionResult_Success_DEFAULT
  }
return p.Success
}
var AiravataGetCloudJobSubmissionResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetCloudJobSubmissionResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetCloudJobSubmissionResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetCloudJobSubmissionResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetCloudJobSubmissionResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetCloudJobSubmissionResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetCloudJobSubmissionResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetCloudJobSubmissionResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetCloudJobSubmissionResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetCloudJobSubmissionResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetCloudJobSubmissionResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetCloudJobSubmissionResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetCloudJobSubmissionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetCloudJobSubmissionResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetCloudJobSubmissionResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetCloudJobSubmissionResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetCloudJobSubmissionResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetCloudJobSubmissionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetCloudJobSubmissionResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &compute_resource_model.CloudJobSubmission{
  JobSubmissionInterfaceId: "DO_NOT_SET_AT_CLIENTS",
}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AiravataGetCloudJobSubmissionResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetCloudJobSubmissionResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetCloudJobSubmissionResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetCloudJobSubmissionResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetCloudJobSubmissionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCloudJobSubmission_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetCloudJobSubmissionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetCloudJobSubmissionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetCloudJobSubmissionResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetCloudJobSubmissionResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetCloudJobSubmissionResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetCloudJobSubmissionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetCloudJobSubmissionResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - JobSubmissionInterfaceId
//  - SshJobSubmission
type AiravataUpdateSSHJobSubmissionDetailsArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  JobSubmissionInterfaceId string `thrift:"jobSubmissionInterfaceId,2,required" db:"jobSubmissionInterfaceId" json:"jobSubmissionInterfaceId"`
  SshJobSubmission *compute_resource_model.SSHJobSubmission `thrift:"sshJobSubmission,3,required" db:"sshJobSubmission" json:"sshJobSubmission"`
}

func NewAiravataUpdateSSHJobSubmissionDetailsArgs() *AiravataUpdateSSHJobSubmissionDetailsArgs {
  return &AiravataUpdateSSHJobSubmissionDetailsArgs{}
}

var AiravataUpdateSSHJobSubmissionDetailsArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataUpdateSSHJobSubmissionDetailsArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataUpdateSSHJobSubmissionDetailsArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataUpdateSSHJobSubmissionDetailsArgs) GetJobSubmissionInterfaceId() string {
  return p.JobSubmissionInterfaceId
}
var AiravataUpdateSSHJobSubmissionDetailsArgs_SshJobSubmission_DEFAULT *compute_resource_model.SSHJobSubmission
func (p *AiravataUpdateSSHJobSubmissionDetailsArgs) GetSshJobSubmission() *compute_resource_model.SSHJobSubmission {
  if !p.IsSetSshJobSubmission() {
    return AiravataUpdateSSHJobSubmissionDetailsArgs_SshJobSubmission_DEFAULT
  }
return p.SshJobSubmission
}
func (p *AiravataUpdateSSHJobSubmissionDetailsArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataUpdateSSHJobSubmissionDetailsArgs) IsSetSshJobSubmission() bool {
  return p.SshJobSubmission != nil
}

func (p *AiravataUpdateSSHJobSubmissionDetailsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetJobSubmissionInterfaceId bool = false;
  var issetSshJobSubmission bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetJobSubmissionInterfaceId = true
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetSshJobSubmission = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetJobSubmissionInterfaceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field JobSubmissionInterfaceId is not set"));
  }
  if !issetSshJobSubmission{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SshJobSubmission is not set"));
  }
  return nil
}

func (p *AiravataUpdateSSHJobSubmissionDetailsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataUpdateSSHJobSubmissionDetailsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.JobSubmissionInterfaceId = v
}
  return nil
}

func (p *AiravataUpdateSSHJobSubmissionDetailsArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.SshJobSubmission = &compute_resource_model.SSHJobSubmission{
  JobSubmissionInterfaceId: "DO_NOT_SET_AT_CLIENTS",

  SshPort: 22,
}
  if err := p.SshJobSubmission.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SshJobSubmission), err)
  }
  return nil
}

func (p *AiravataUpdateSSHJobSubmissionDetailsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateSSHJobSubmissionDetails_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateSSHJobSubmissionDetailsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataUpdateSSHJobSubmissionDetailsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("jobSubmissionInterfaceId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:jobSubmissionInterfaceId: ", p), err) }
  if err := oprot.WriteString(string(p.JobSubmissionInterfaceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.jobSubmissionInterfaceId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:jobSubmissionInterfaceId: ", p), err) }
  return err
}

func (p *AiravataUpdateSSHJobSubmissionDetailsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sshJobSubmission", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sshJobSubmission: ", p), err) }
  if err := p.SshJobSubmission.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SshJobSubmission), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sshJobSubmission: ", p), err) }
  return err
}

func (p *AiravataUpdateSSHJobSubmissionDetailsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateSSHJobSubmissionDetailsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataUpdateSSHJobSubmissionDetailsResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataUpdateSSHJobSubmissionDetailsResult() *AiravataUpdateSSHJobSubmissionDetailsResult {
  return &AiravataUpdateSSHJobSubmissionDetailsResult{}
}

var AiravataUpdateSSHJobSubmissionDetailsResult_Success_DEFAULT bool
func (p *AiravataUpdateSSHJobSubmissionDetailsResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataUpdateSSHJobSubmissionDetailsResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataUpdateSSHJobSubmissionDetailsResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataUpdateSSHJobSubmissionDetailsResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataUpdateSSHJobSubmissionDetailsResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataUpdateSSHJobSubmissionDetailsResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataUpdateSSHJobSubmissionDetailsResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataUpdateSSHJobSubmissionDetailsResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataUpdateSSHJobSubmissionDetailsResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataUpdateSSHJobSubmissionDetailsResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataUpdateSSHJobSubmissionDetailsResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataUpdateSSHJobSubmissionDetailsResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataUpdateSSHJobSubmissionDetailsResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataUpdateSSHJobSubmissionDetailsResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataUpdateSSHJobSubmissionDetailsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataUpdateSSHJobSubmissionDetailsResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataUpdateSSHJobSubmissionDetailsResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataUpdateSSHJobSubmissionDetailsResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataUpdateSSHJobSubmissionDetailsResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataUpdateSSHJobSubmissionDetailsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataUpdateSSHJobSubmissionDetailsResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataUpdateSSHJobSubmissionDetailsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataUpdateSSHJobSubmissionDetailsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataUpdateSSHJobSubmissionDetailsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataUpdateSSHJobSubmissionDetailsResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataUpdateSSHJobSubmissionDetailsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateSSHJobSubmissionDetails_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateSSHJobSubmissionDetailsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateSSHJobSubmissionDetailsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateSSHJobSubmissionDetailsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateSSHJobSubmissionDetailsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateSSHJobSubmissionDetailsResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateSSHJobSubmissionDetailsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateSSHJobSubmissionDetailsResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - JobSubmissionInterfaceId
//  - SshJobSubmission
type AiravataUpdateCloudJobSubmissionDetailsArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  JobSubmissionInterfaceId string `thrift:"jobSubmissionInterfaceId,2,required" db:"jobSubmissionInterfaceId" json:"jobSubmissionInterfaceId"`
  SshJobSubmission *compute_resource_model.CloudJobSubmission `thrift:"sshJobSubmission,3,required" db:"sshJobSubmission" json:"sshJobSubmission"`
}

func NewAiravataUpdateCloudJobSubmissionDetailsArgs() *AiravataUpdateCloudJobSubmissionDetailsArgs {
  return &AiravataUpdateCloudJobSubmissionDetailsArgs{}
}

var AiravataUpdateCloudJobSubmissionDetailsArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataUpdateCloudJobSubmissionDetailsArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataUpdateCloudJobSubmissionDetailsArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataUpdateCloudJobSubmissionDetailsArgs) GetJobSubmissionInterfaceId() string {
  return p.JobSubmissionInterfaceId
}
var AiravataUpdateCloudJobSubmissionDetailsArgs_SshJobSubmission_DEFAULT *compute_resource_model.CloudJobSubmission
func (p *AiravataUpdateCloudJobSubmissionDetailsArgs) GetSshJobSubmission() *compute_resource_model.CloudJobSubmission {
  if !p.IsSetSshJobSubmission() {
    return AiravataUpdateCloudJobSubmissionDetailsArgs_SshJobSubmission_DEFAULT
  }
return p.SshJobSubmission
}
func (p *AiravataUpdateCloudJobSubmissionDetailsArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataUpdateCloudJobSubmissionDetailsArgs) IsSetSshJobSubmission() bool {
  return p.SshJobSubmission != nil
}

func (p *AiravataUpdateCloudJobSubmissionDetailsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetJobSubmissionInterfaceId bool = false;
  var issetSshJobSubmission bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetJobSubmissionInterfaceId = true
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetSshJobSubmission = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetJobSubmissionInterfaceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field JobSubmissionInterfaceId is not set"));
  }
  if !issetSshJobSubmission{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SshJobSubmission is not set"));
  }
  return nil
}

func (p *AiravataUpdateCloudJobSubmissionDetailsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataUpdateCloudJobSubmissionDetailsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.JobSubmissionInterfaceId = v
}
  return nil
}

func (p *AiravataUpdateCloudJobSubmissionDetailsArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.SshJobSubmission = &compute_resource_model.CloudJobSubmission{
  JobSubmissionInterfaceId: "DO_NOT_SET_AT_CLIENTS",
}
  if err := p.SshJobSubmission.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SshJobSubmission), err)
  }
  return nil
}

func (p *AiravataUpdateCloudJobSubmissionDetailsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateCloudJobSubmissionDetails_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateCloudJobSubmissionDetailsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataUpdateCloudJobSubmissionDetailsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("jobSubmissionInterfaceId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:jobSubmissionInterfaceId: ", p), err) }
  if err := oprot.WriteString(string(p.JobSubmissionInterfaceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.jobSubmissionInterfaceId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:jobSubmissionInterfaceId: ", p), err) }
  return err
}

func (p *AiravataUpdateCloudJobSubmissionDetailsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sshJobSubmission", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sshJobSubmission: ", p), err) }
  if err := p.SshJobSubmission.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SshJobSubmission), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sshJobSubmission: ", p), err) }
  return err
}

func (p *AiravataUpdateCloudJobSubmissionDetailsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateCloudJobSubmissionDetailsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataUpdateCloudJobSubmissionDetailsResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataUpdateCloudJobSubmissionDetailsResult() *AiravataUpdateCloudJobSubmissionDetailsResult {
  return &AiravataUpdateCloudJobSubmissionDetailsResult{}
}

var AiravataUpdateCloudJobSubmissionDetailsResult_Success_DEFAULT bool
func (p *AiravataUpdateCloudJobSubmissionDetailsResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataUpdateCloudJobSubmissionDetailsResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataUpdateCloudJobSubmissionDetailsResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataUpdateCloudJobSubmissionDetailsResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataUpdateCloudJobSubmissionDetailsResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataUpdateCloudJobSubmissionDetailsResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataUpdateCloudJobSubmissionDetailsResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataUpdateCloudJobSubmissionDetailsResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataUpdateCloudJobSubmissionDetailsResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataUpdateCloudJobSubmissionDetailsResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataUpdateCloudJobSubmissionDetailsResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataUpdateCloudJobSubmissionDetailsResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataUpdateCloudJobSubmissionDetailsResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataUpdateCloudJobSubmissionDetailsResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataUpdateCloudJobSubmissionDetailsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataUpdateCloudJobSubmissionDetailsResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataUpdateCloudJobSubmissionDetailsResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataUpdateCloudJobSubmissionDetailsResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataUpdateCloudJobSubmissionDetailsResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataUpdateCloudJobSubmissionDetailsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataUpdateCloudJobSubmissionDetailsResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataUpdateCloudJobSubmissionDetailsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataUpdateCloudJobSubmissionDetailsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataUpdateCloudJobSubmissionDetailsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataUpdateCloudJobSubmissionDetailsResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataUpdateCloudJobSubmissionDetailsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateCloudJobSubmissionDetails_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateCloudJobSubmissionDetailsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateCloudJobSubmissionDetailsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateCloudJobSubmissionDetailsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateCloudJobSubmissionDetailsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateCloudJobSubmissionDetailsResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateCloudJobSubmissionDetailsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateCloudJobSubmissionDetailsResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - JobSubmissionInterfaceId
//  - UnicoreJobSubmission
type AiravataUpdateUnicoreJobSubmissionDetailsArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  JobSubmissionInterfaceId string `thrift:"jobSubmissionInterfaceId,2,required" db:"jobSubmissionInterfaceId" json:"jobSubmissionInterfaceId"`
  UnicoreJobSubmission *compute_resource_model.UnicoreJobSubmission `thrift:"unicoreJobSubmission,3,required" db:"unicoreJobSubmission" json:"unicoreJobSubmission"`
}

func NewAiravataUpdateUnicoreJobSubmissionDetailsArgs() *AiravataUpdateUnicoreJobSubmissionDetailsArgs {
  return &AiravataUpdateUnicoreJobSubmissionDetailsArgs{}
}

var AiravataUpdateUnicoreJobSubmissionDetailsArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataUpdateUnicoreJobSubmissionDetailsArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataUpdateUnicoreJobSubmissionDetailsArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataUpdateUnicoreJobSubmissionDetailsArgs) GetJobSubmissionInterfaceId() string {
  return p.JobSubmissionInterfaceId
}
var AiravataUpdateUnicoreJobSubmissionDetailsArgs_UnicoreJobSubmission_DEFAULT *compute_resource_model.UnicoreJobSubmission
func (p *AiravataUpdateUnicoreJobSubmissionDetailsArgs) GetUnicoreJobSubmission() *compute_resource_model.UnicoreJobSubmission {
  if !p.IsSetUnicoreJobSubmission() {
    return AiravataUpdateUnicoreJobSubmissionDetailsArgs_UnicoreJobSubmission_DEFAULT
  }
return p.UnicoreJobSubmission
}
func (p *AiravataUpdateUnicoreJobSubmissionDetailsArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataUpdateUnicoreJobSubmissionDetailsArgs) IsSetUnicoreJobSubmission() bool {
  return p.UnicoreJobSubmission != nil
}

func (p *AiravataUpdateUnicoreJobSubmissionDetailsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetJobSubmissionInterfaceId bool = false;
  var issetUnicoreJobSubmission bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetJobSubmissionInterfaceId = true
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUnicoreJobSubmission = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetJobSubmissionInterfaceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field JobSubmissionInterfaceId is not set"));
  }
  if !issetUnicoreJobSubmission{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UnicoreJobSubmission is not set"));
  }
  return nil
}

func (p *AiravataUpdateUnicoreJobSubmissionDetailsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataUpdateUnicoreJobSubmissionDetailsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.JobSubmissionInterfaceId = v
}
  return nil
}

func (p *AiravataUpdateUnicoreJobSubmissionDetailsArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.UnicoreJobSubmission = &compute_resource_model.UnicoreJobSubmission{
  JobSubmissionInterfaceId: "DO_NOT_SET_AT_CLIENTS",
}
  if err := p.UnicoreJobSubmission.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UnicoreJobSubmission), err)
  }
  return nil
}

func (p *AiravataUpdateUnicoreJobSubmissionDetailsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateUnicoreJobSubmissionDetails_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateUnicoreJobSubmissionDetailsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataUpdateUnicoreJobSubmissionDetailsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("jobSubmissionInterfaceId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:jobSubmissionInterfaceId: ", p), err) }
  if err := oprot.WriteString(string(p.JobSubmissionInterfaceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.jobSubmissionInterfaceId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:jobSubmissionInterfaceId: ", p), err) }
  return err
}

func (p *AiravataUpdateUnicoreJobSubmissionDetailsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("unicoreJobSubmission", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:unicoreJobSubmission: ", p), err) }
  if err := p.UnicoreJobSubmission.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UnicoreJobSubmission), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:unicoreJobSubmission: ", p), err) }
  return err
}

func (p *AiravataUpdateUnicoreJobSubmissionDetailsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateUnicoreJobSubmissionDetailsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataUpdateUnicoreJobSubmissionDetailsResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataUpdateUnicoreJobSubmissionDetailsResult() *AiravataUpdateUnicoreJobSubmissionDetailsResult {
  return &AiravataUpdateUnicoreJobSubmissionDetailsResult{}
}

var AiravataUpdateUnicoreJobSubmissionDetailsResult_Success_DEFAULT bool
func (p *AiravataUpdateUnicoreJobSubmissionDetailsResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataUpdateUnicoreJobSubmissionDetailsResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataUpdateUnicoreJobSubmissionDetailsResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataUpdateUnicoreJobSubmissionDetailsResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataUpdateUnicoreJobSubmissionDetailsResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataUpdateUnicoreJobSubmissionDetailsResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataUpdateUnicoreJobSubmissionDetailsResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataUpdateUnicoreJobSubmissionDetailsResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataUpdateUnicoreJobSubmissionDetailsResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataUpdateUnicoreJobSubmissionDetailsResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataUpdateUnicoreJobSubmissionDetailsResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataUpdateUnicoreJobSubmissionDetailsResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataUpdateUnicoreJobSubmissionDetailsResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataUpdateUnicoreJobSubmissionDetailsResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataUpdateUnicoreJobSubmissionDetailsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataUpdateUnicoreJobSubmissionDetailsResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataUpdateUnicoreJobSubmissionDetailsResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataUpdateUnicoreJobSubmissionDetailsResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataUpdateUnicoreJobSubmissionDetailsResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataUpdateUnicoreJobSubmissionDetailsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataUpdateUnicoreJobSubmissionDetailsResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataUpdateUnicoreJobSubmissionDetailsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataUpdateUnicoreJobSubmissionDetailsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataUpdateUnicoreJobSubmissionDetailsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataUpdateUnicoreJobSubmissionDetailsResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataUpdateUnicoreJobSubmissionDetailsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateUnicoreJobSubmissionDetails_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateUnicoreJobSubmissionDetailsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateUnicoreJobSubmissionDetailsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateUnicoreJobSubmissionDetailsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateUnicoreJobSubmissionDetailsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateUnicoreJobSubmissionDetailsResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateUnicoreJobSubmissionDetailsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateUnicoreJobSubmissionDetailsResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - ProductUri
//  - DataMoveType
//  - PriorityOrder
//  - LocalDataMovement
type AiravataAddLocalDataMovementDetailsArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  ProductUri string `thrift:"productUri,2,required" db:"productUri" json:"productUri"`
  DataMoveType data_movement_models.DMType `thrift:"dataMoveType,3,required" db:"dataMoveType" json:"dataMoveType"`
  PriorityOrder int32 `thrift:"priorityOrder,4,required" db:"priorityOrder" json:"priorityOrder"`
  LocalDataMovement *data_movement_models.LOCALDataMovement `thrift:"localDataMovement,5,required" db:"localDataMovement" json:"localDataMovement"`
}

func NewAiravataAddLocalDataMovementDetailsArgs() *AiravataAddLocalDataMovementDetailsArgs {
  return &AiravataAddLocalDataMovementDetailsArgs{}
}

var AiravataAddLocalDataMovementDetailsArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataAddLocalDataMovementDetailsArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataAddLocalDataMovementDetailsArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataAddLocalDataMovementDetailsArgs) GetProductUri() string {
  return p.ProductUri
}

func (p *AiravataAddLocalDataMovementDetailsArgs) GetDataMoveType() data_movement_models.DMType {
  return p.DataMoveType
}

func (p *AiravataAddLocalDataMovementDetailsArgs) GetPriorityOrder() int32 {
  return p.PriorityOrder
}
var AiravataAddLocalDataMovementDetailsArgs_LocalDataMovement_DEFAULT *data_movement_models.LOCALDataMovement
func (p *AiravataAddLocalDataMovementDetailsArgs) GetLocalDataMovement() *data_movement_models.LOCALDataMovement {
  if !p.IsSetLocalDataMovement() {
    return AiravataAddLocalDataMovementDetailsArgs_LocalDataMovement_DEFAULT
  }
return p.LocalDataMovement
}
func (p *AiravataAddLocalDataMovementDetailsArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataAddLocalDataMovementDetailsArgs) IsSetLocalDataMovement() bool {
  return p.LocalDataMovement != nil
}

func (p *AiravataAddLocalDataMovementDetailsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetProductUri bool = false;
  var issetDataMoveType bool = false;
  var issetPriorityOrder bool = false;
  var issetLocalDataMovement bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProductUri = true
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetDataMoveType = true
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetPriorityOrder = true
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetLocalDataMovement = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetProductUri{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProductUri is not set"));
  }
  if !issetDataMoveType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DataMoveType is not set"));
  }
  if !issetPriorityOrder{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PriorityOrder is not set"));
  }
  if !issetLocalDataMovement{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LocalDataMovement is not set"));
  }
  return nil
}

func (p *AiravataAddLocalDataMovementDetailsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataAddLocalDataMovementDetailsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ProductUri = v
}
  return nil
}

func (p *AiravataAddLocalDataMovementDetailsArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := data_movement_models.DMType(v)
  p.DataMoveType = temp
}
  return nil
}

func (p *AiravataAddLocalDataMovementDetailsArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PriorityOrder = v
}
  return nil
}

func (p *AiravataAddLocalDataMovementDetailsArgs)  ReadField5(iprot thrift.TProtocol) error {
  p.LocalDataMovement = &data_movement_models.LOCALDataMovement{
  DataMovementInterfaceId: "DO_NOT_SET_AT_CLIENTS",
}
  if err := p.LocalDataMovement.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LocalDataMovement), err)
  }
  return nil
}

func (p *AiravataAddLocalDataMovementDetailsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addLocalDataMovementDetails_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataAddLocalDataMovementDetailsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataAddLocalDataMovementDetailsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("productUri", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:productUri: ", p), err) }
  if err := oprot.WriteString(string(p.ProductUri)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.productUri (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:productUri: ", p), err) }
  return err
}

func (p *AiravataAddLocalDataMovementDetailsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dataMoveType", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dataMoveType: ", p), err) }
  if err := oprot.WriteI32(int32(p.DataMoveType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dataMoveType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dataMoveType: ", p), err) }
  return err
}

func (p *AiravataAddLocalDataMovementDetailsArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("priorityOrder", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:priorityOrder: ", p), err) }
  if err := oprot.WriteI32(int32(p.PriorityOrder)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.priorityOrder (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:priorityOrder: ", p), err) }
  return err
}

func (p *AiravataAddLocalDataMovementDetailsArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("localDataMovement", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:localDataMovement: ", p), err) }
  if err := p.LocalDataMovement.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LocalDataMovement), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:localDataMovement: ", p), err) }
  return err
}

func (p *AiravataAddLocalDataMovementDetailsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataAddLocalDataMovementDetailsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataAddLocalDataMovementDetailsResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataAddLocalDataMovementDetailsResult() *AiravataAddLocalDataMovementDetailsResult {
  return &AiravataAddLocalDataMovementDetailsResult{}
}

var AiravataAddLocalDataMovementDetailsResult_Success_DEFAULT string
func (p *AiravataAddLocalDataMovementDetailsResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return AiravataAddLocalDataMovementDetailsResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataAddLocalDataMovementDetailsResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataAddLocalDataMovementDetailsResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataAddLocalDataMovementDetailsResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataAddLocalDataMovementDetailsResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataAddLocalDataMovementDetailsResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataAddLocalDataMovementDetailsResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataAddLocalDataMovementDetailsResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataAddLocalDataMovementDetailsResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataAddLocalDataMovementDetailsResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataAddLocalDataMovementDetailsResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataAddLocalDataMovementDetailsResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataAddLocalDataMovementDetailsResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataAddLocalDataMovementDetailsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataAddLocalDataMovementDetailsResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataAddLocalDataMovementDetailsResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataAddLocalDataMovementDetailsResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataAddLocalDataMovementDetailsResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataAddLocalDataMovementDetailsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataAddLocalDataMovementDetailsResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataAddLocalDataMovementDetailsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataAddLocalDataMovementDetailsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataAddLocalDataMovementDetailsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataAddLocalDataMovementDetailsResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataAddLocalDataMovementDetailsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addLocalDataMovementDetails_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataAddLocalDataMovementDetailsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataAddLocalDataMovementDetailsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataAddLocalDataMovementDetailsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataAddLocalDataMovementDetailsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataAddLocalDataMovementDetailsResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataAddLocalDataMovementDetailsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataAddLocalDataMovementDetailsResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - DataMovementInterfaceId
//  - LocalDataMovement
type AiravataUpdateLocalDataMovementDetailsArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  DataMovementInterfaceId string `thrift:"dataMovementInterfaceId,2,required" db:"dataMovementInterfaceId" json:"dataMovementInterfaceId"`
  LocalDataMovement *data_movement_models.LOCALDataMovement `thrift:"localDataMovement,3,required" db:"localDataMovement" json:"localDataMovement"`
}

func NewAiravataUpdateLocalDataMovementDetailsArgs() *AiravataUpdateLocalDataMovementDetailsArgs {
  return &AiravataUpdateLocalDataMovementDetailsArgs{}
}

var AiravataUpdateLocalDataMovementDetailsArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataUpdateLocalDataMovementDetailsArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataUpdateLocalDataMovementDetailsArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataUpdateLocalDataMovementDetailsArgs) GetDataMovementInterfaceId() string {
  return p.DataMovementInterfaceId
}
var AiravataUpdateLocalDataMovementDetailsArgs_LocalDataMovement_DEFAULT *data_movement_models.LOCALDataMovement
func (p *AiravataUpdateLocalDataMovementDetailsArgs) GetLocalDataMovement() *data_movement_models.LOCALDataMovement {
  if !p.IsSetLocalDataMovement() {
    return AiravataUpdateLocalDataMovementDetailsArgs_LocalDataMovement_DEFAULT
  }
return p.LocalDataMovement
}
func (p *AiravataUpdateLocalDataMovementDetailsArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataUpdateLocalDataMovementDetailsArgs) IsSetLocalDataMovement() bool {
  return p.LocalDataMovement != nil
}

func (p *AiravataUpdateLocalDataMovementDetailsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetDataMovementInterfaceId bool = false;
  var issetLocalDataMovement bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetDataMovementInterfaceId = true
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetLocalDataMovement = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetDataMovementInterfaceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DataMovementInterfaceId is not set"));
  }
  if !issetLocalDataMovement{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LocalDataMovement is not set"));
  }
  return nil
}

func (p *AiravataUpdateLocalDataMovementDetailsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataUpdateLocalDataMovementDetailsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DataMovementInterfaceId = v
}
  return nil
}

func (p *AiravataUpdateLocalDataMovementDetailsArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.LocalDataMovement = &data_movement_models.LOCALDataMovement{
  DataMovementInterfaceId: "DO_NOT_SET_AT_CLIENTS",
}
  if err := p.LocalDataMovement.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LocalDataMovement), err)
  }
  return nil
}

func (p *AiravataUpdateLocalDataMovementDetailsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateLocalDataMovementDetails_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateLocalDataMovementDetailsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataUpdateLocalDataMovementDetailsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dataMovementInterfaceId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dataMovementInterfaceId: ", p), err) }
  if err := oprot.WriteString(string(p.DataMovementInterfaceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dataMovementInterfaceId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dataMovementInterfaceId: ", p), err) }
  return err
}

func (p *AiravataUpdateLocalDataMovementDetailsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("localDataMovement", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:localDataMovement: ", p), err) }
  if err := p.LocalDataMovement.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LocalDataMovement), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:localDataMovement: ", p), err) }
  return err
}

func (p *AiravataUpdateLocalDataMovementDetailsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateLocalDataMovementDetailsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataUpdateLocalDataMovementDetailsResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataUpdateLocalDataMovementDetailsResult() *AiravataUpdateLocalDataMovementDetailsResult {
  return &AiravataUpdateLocalDataMovementDetailsResult{}
}

var AiravataUpdateLocalDataMovementDetailsResult_Success_DEFAULT bool
func (p *AiravataUpdateLocalDataMovementDetailsResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataUpdateLocalDataMovementDetailsResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataUpdateLocalDataMovementDetailsResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataUpdateLocalDataMovementDetailsResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataUpdateLocalDataMovementDetailsResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataUpdateLocalDataMovementDetailsResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataUpdateLocalDataMovementDetailsResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataUpdateLocalDataMovementDetailsResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataUpdateLocalDataMovementDetailsResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataUpdateLocalDataMovementDetailsResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataUpdateLocalDataMovementDetailsResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataUpdateLocalDataMovementDetailsResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataUpdateLocalDataMovementDetailsResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataUpdateLocalDataMovementDetailsResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataUpdateLocalDataMovementDetailsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataUpdateLocalDataMovementDetailsResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataUpdateLocalDataMovementDetailsResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataUpdateLocalDataMovementDetailsResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataUpdateLocalDataMovementDetailsResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataUpdateLocalDataMovementDetailsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataUpdateLocalDataMovementDetailsResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataUpdateLocalDataMovementDetailsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataUpdateLocalDataMovementDetailsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataUpdateLocalDataMovementDetailsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataUpdateLocalDataMovementDetailsResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataUpdateLocalDataMovementDetailsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateLocalDataMovementDetails_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateLocalDataMovementDetailsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateLocalDataMovementDetailsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateLocalDataMovementDetailsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateLocalDataMovementDetailsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateLocalDataMovementDetailsResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateLocalDataMovementDetailsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateLocalDataMovementDetailsResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - DataMovementId
type AiravataGetLocalDataMovementArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  DataMovementId string `thrift:"dataMovementId,2,required" db:"dataMovementId" json:"dataMovementId"`
}

func NewAiravataGetLocalDataMovementArgs() *AiravataGetLocalDataMovementArgs {
  return &AiravataGetLocalDataMovementArgs{}
}

var AiravataGetLocalDataMovementArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetLocalDataMovementArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetLocalDataMovementArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetLocalDataMovementArgs) GetDataMovementId() string {
  return p.DataMovementId
}
func (p *AiravataGetLocalDataMovementArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetLocalDataMovementArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetDataMovementId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetDataMovementId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetDataMovementId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DataMovementId is not set"));
  }
  return nil
}

func (p *AiravataGetLocalDataMovementArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetLocalDataMovementArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DataMovementId = v
}
  return nil
}

func (p *AiravataGetLocalDataMovementArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getLocalDataMovement_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetLocalDataMovementArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetLocalDataMovementArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dataMovementId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dataMovementId: ", p), err) }
  if err := oprot.WriteString(string(p.DataMovementId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dataMovementId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dataMovementId: ", p), err) }
  return err
}

func (p *AiravataGetLocalDataMovementArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetLocalDataMovementArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetLocalDataMovementResult struct {
  Success *data_movement_models.LOCALDataMovement `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetLocalDataMovementResult() *AiravataGetLocalDataMovementResult {
  return &AiravataGetLocalDataMovementResult{}
}

var AiravataGetLocalDataMovementResult_Success_DEFAULT *data_movement_models.LOCALDataMovement
func (p *AiravataGetLocalDataMovementResult) GetSuccess() *data_movement_models.LOCALDataMovement {
  if !p.IsSetSuccess() {
    return AiravataGetLocalDataMovementResult_Success_DEFAULT
  }
return p.Success
}
var AiravataGetLocalDataMovementResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetLocalDataMovementResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetLocalDataMovementResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetLocalDataMovementResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetLocalDataMovementResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetLocalDataMovementResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetLocalDataMovementResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetLocalDataMovementResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetLocalDataMovementResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetLocalDataMovementResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetLocalDataMovementResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetLocalDataMovementResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetLocalDataMovementResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetLocalDataMovementResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetLocalDataMovementResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetLocalDataMovementResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetLocalDataMovementResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetLocalDataMovementResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetLocalDataMovementResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &data_movement_models.LOCALDataMovement{
  DataMovementInterfaceId: "DO_NOT_SET_AT_CLIENTS",
}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AiravataGetLocalDataMovementResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetLocalDataMovementResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetLocalDataMovementResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetLocalDataMovementResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetLocalDataMovementResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getLocalDataMovement_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetLocalDataMovementResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetLocalDataMovementResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetLocalDataMovementResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetLocalDataMovementResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetLocalDataMovementResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetLocalDataMovementResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetLocalDataMovementResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - ProductUri
//  - DataMoveType
//  - PriorityOrder
//  - ScpDataMovement
type AiravataAddSCPDataMovementDetailsArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  ProductUri string `thrift:"productUri,2,required" db:"productUri" json:"productUri"`
  DataMoveType data_movement_models.DMType `thrift:"dataMoveType,3,required" db:"dataMoveType" json:"dataMoveType"`
  PriorityOrder int32 `thrift:"priorityOrder,4,required" db:"priorityOrder" json:"priorityOrder"`
  ScpDataMovement *data_movement_models.SCPDataMovement `thrift:"scpDataMovement,5,required" db:"scpDataMovement" json:"scpDataMovement"`
}

func NewAiravataAddSCPDataMovementDetailsArgs() *AiravataAddSCPDataMovementDetailsArgs {
  return &AiravataAddSCPDataMovementDetailsArgs{}
}

var AiravataAddSCPDataMovementDetailsArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataAddSCPDataMovementDetailsArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataAddSCPDataMovementDetailsArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataAddSCPDataMovementDetailsArgs) GetProductUri() string {
  return p.ProductUri
}

func (p *AiravataAddSCPDataMovementDetailsArgs) GetDataMoveType() data_movement_models.DMType {
  return p.DataMoveType
}

func (p *AiravataAddSCPDataMovementDetailsArgs) GetPriorityOrder() int32 {
  return p.PriorityOrder
}
var AiravataAddSCPDataMovementDetailsArgs_ScpDataMovement_DEFAULT *data_movement_models.SCPDataMovement
func (p *AiravataAddSCPDataMovementDetailsArgs) GetScpDataMovement() *data_movement_models.SCPDataMovement {
  if !p.IsSetScpDataMovement() {
    return AiravataAddSCPDataMovementDetailsArgs_ScpDataMovement_DEFAULT
  }
return p.ScpDataMovement
}
func (p *AiravataAddSCPDataMovementDetailsArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataAddSCPDataMovementDetailsArgs) IsSetScpDataMovement() bool {
  return p.ScpDataMovement != nil
}

func (p *AiravataAddSCPDataMovementDetailsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetProductUri bool = false;
  var issetDataMoveType bool = false;
  var issetPriorityOrder bool = false;
  var issetScpDataMovement bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProductUri = true
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetDataMoveType = true
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetPriorityOrder = true
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetScpDataMovement = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetProductUri{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProductUri is not set"));
  }
  if !issetDataMoveType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DataMoveType is not set"));
  }
  if !issetPriorityOrder{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PriorityOrder is not set"));
  }
  if !issetScpDataMovement{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ScpDataMovement is not set"));
  }
  return nil
}

func (p *AiravataAddSCPDataMovementDetailsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataAddSCPDataMovementDetailsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ProductUri = v
}
  return nil
}

func (p *AiravataAddSCPDataMovementDetailsArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := data_movement_models.DMType(v)
  p.DataMoveType = temp
}
  return nil
}

func (p *AiravataAddSCPDataMovementDetailsArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PriorityOrder = v
}
  return nil
}

func (p *AiravataAddSCPDataMovementDetailsArgs)  ReadField5(iprot thrift.TProtocol) error {
  p.ScpDataMovement = &data_movement_models.SCPDataMovement{
  DataMovementInterfaceId: "DO_NOT_SET_AT_CLIENTS",

  SshPort: 22,
}
  if err := p.ScpDataMovement.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ScpDataMovement), err)
  }
  return nil
}

func (p *AiravataAddSCPDataMovementDetailsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addSCPDataMovementDetails_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataAddSCPDataMovementDetailsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataAddSCPDataMovementDetailsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("productUri", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:productUri: ", p), err) }
  if err := oprot.WriteString(string(p.ProductUri)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.productUri (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:productUri: ", p), err) }
  return err
}

func (p *AiravataAddSCPDataMovementDetailsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dataMoveType", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dataMoveType: ", p), err) }
  if err := oprot.WriteI32(int32(p.DataMoveType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dataMoveType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dataMoveType: ", p), err) }
  return err
}

func (p *AiravataAddSCPDataMovementDetailsArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("priorityOrder", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:priorityOrder: ", p), err) }
  if err := oprot.WriteI32(int32(p.PriorityOrder)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.priorityOrder (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:priorityOrder: ", p), err) }
  return err
}

func (p *AiravataAddSCPDataMovementDetailsArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("scpDataMovement", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:scpDataMovement: ", p), err) }
  if err := p.ScpDataMovement.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ScpDataMovement), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:scpDataMovement: ", p), err) }
  return err
}

func (p *AiravataAddSCPDataMovementDetailsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataAddSCPDataMovementDetailsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataAddSCPDataMovementDetailsResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataAddSCPDataMovementDetailsResult() *AiravataAddSCPDataMovementDetailsResult {
  return &AiravataAddSCPDataMovementDetailsResult{}
}

var AiravataAddSCPDataMovementDetailsResult_Success_DEFAULT string
func (p *AiravataAddSCPDataMovementDetailsResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return AiravataAddSCPDataMovementDetailsResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataAddSCPDataMovementDetailsResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataAddSCPDataMovementDetailsResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataAddSCPDataMovementDetailsResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataAddSCPDataMovementDetailsResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataAddSCPDataMovementDetailsResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataAddSCPDataMovementDetailsResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataAddSCPDataMovementDetailsResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataAddSCPDataMovementDetailsResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataAddSCPDataMovementDetailsResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataAddSCPDataMovementDetailsResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataAddSCPDataMovementDetailsResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataAddSCPDataMovementDetailsResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataAddSCPDataMovementDetailsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataAddSCPDataMovementDetailsResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataAddSCPDataMovementDetailsResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataAddSCPDataMovementDetailsResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataAddSCPDataMovementDetailsResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataAddSCPDataMovementDetailsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataAddSCPDataMovementDetailsResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataAddSCPDataMovementDetailsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataAddSCPDataMovementDetailsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataAddSCPDataMovementDetailsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataAddSCPDataMovementDetailsResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataAddSCPDataMovementDetailsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addSCPDataMovementDetails_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataAddSCPDataMovementDetailsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataAddSCPDataMovementDetailsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataAddSCPDataMovementDetailsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataAddSCPDataMovementDetailsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataAddSCPDataMovementDetailsResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataAddSCPDataMovementDetailsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataAddSCPDataMovementDetailsResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - DataMovementInterfaceId
//  - ScpDataMovement
type AiravataUpdateSCPDataMovementDetailsArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  DataMovementInterfaceId string `thrift:"dataMovementInterfaceId,2,required" db:"dataMovementInterfaceId" json:"dataMovementInterfaceId"`
  ScpDataMovement *data_movement_models.SCPDataMovement `thrift:"scpDataMovement,3,required" db:"scpDataMovement" json:"scpDataMovement"`
}

func NewAiravataUpdateSCPDataMovementDetailsArgs() *AiravataUpdateSCPDataMovementDetailsArgs {
  return &AiravataUpdateSCPDataMovementDetailsArgs{}
}

var AiravataUpdateSCPDataMovementDetailsArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataUpdateSCPDataMovementDetailsArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataUpdateSCPDataMovementDetailsArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataUpdateSCPDataMovementDetailsArgs) GetDataMovementInterfaceId() string {
  return p.DataMovementInterfaceId
}
var AiravataUpdateSCPDataMovementDetailsArgs_ScpDataMovement_DEFAULT *data_movement_models.SCPDataMovement
func (p *AiravataUpdateSCPDataMovementDetailsArgs) GetScpDataMovement() *data_movement_models.SCPDataMovement {
  if !p.IsSetScpDataMovement() {
    return AiravataUpdateSCPDataMovementDetailsArgs_ScpDataMovement_DEFAULT
  }
return p.ScpDataMovement
}
func (p *AiravataUpdateSCPDataMovementDetailsArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataUpdateSCPDataMovementDetailsArgs) IsSetScpDataMovement() bool {
  return p.ScpDataMovement != nil
}

func (p *AiravataUpdateSCPDataMovementDetailsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetDataMovementInterfaceId bool = false;
  var issetScpDataMovement bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetDataMovementInterfaceId = true
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetScpDataMovement = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetDataMovementInterfaceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DataMovementInterfaceId is not set"));
  }
  if !issetScpDataMovement{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ScpDataMovement is not set"));
  }
  return nil
}

func (p *AiravataUpdateSCPDataMovementDetailsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataUpdateSCPDataMovementDetailsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DataMovementInterfaceId = v
}
  return nil
}

func (p *AiravataUpdateSCPDataMovementDetailsArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.ScpDataMovement = &data_movement_models.SCPDataMovement{
  DataMovementInterfaceId: "DO_NOT_SET_AT_CLIENTS",

  SshPort: 22,
}
  if err := p.ScpDataMovement.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ScpDataMovement), err)
  }
  return nil
}

func (p *AiravataUpdateSCPDataMovementDetailsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateSCPDataMovementDetails_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateSCPDataMovementDetailsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataUpdateSCPDataMovementDetailsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dataMovementInterfaceId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dataMovementInterfaceId: ", p), err) }
  if err := oprot.WriteString(string(p.DataMovementInterfaceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dataMovementInterfaceId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dataMovementInterfaceId: ", p), err) }
  return err
}

func (p *AiravataUpdateSCPDataMovementDetailsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("scpDataMovement", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:scpDataMovement: ", p), err) }
  if err := p.ScpDataMovement.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ScpDataMovement), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:scpDataMovement: ", p), err) }
  return err
}

func (p *AiravataUpdateSCPDataMovementDetailsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateSCPDataMovementDetailsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataUpdateSCPDataMovementDetailsResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataUpdateSCPDataMovementDetailsResult() *AiravataUpdateSCPDataMovementDetailsResult {
  return &AiravataUpdateSCPDataMovementDetailsResult{}
}

var AiravataUpdateSCPDataMovementDetailsResult_Success_DEFAULT bool
func (p *AiravataUpdateSCPDataMovementDetailsResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataUpdateSCPDataMovementDetailsResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataUpdateSCPDataMovementDetailsResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataUpdateSCPDataMovementDetailsResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataUpdateSCPDataMovementDetailsResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataUpdateSCPDataMovementDetailsResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataUpdateSCPDataMovementDetailsResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataUpdateSCPDataMovementDetailsResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataUpdateSCPDataMovementDetailsResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataUpdateSCPDataMovementDetailsResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataUpdateSCPDataMovementDetailsResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataUpdateSCPDataMovementDetailsResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataUpdateSCPDataMovementDetailsResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataUpdateSCPDataMovementDetailsResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataUpdateSCPDataMovementDetailsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataUpdateSCPDataMovementDetailsResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataUpdateSCPDataMovementDetailsResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataUpdateSCPDataMovementDetailsResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataUpdateSCPDataMovementDetailsResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataUpdateSCPDataMovementDetailsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataUpdateSCPDataMovementDetailsResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataUpdateSCPDataMovementDetailsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataUpdateSCPDataMovementDetailsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataUpdateSCPDataMovementDetailsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataUpdateSCPDataMovementDetailsResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataUpdateSCPDataMovementDetailsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateSCPDataMovementDetails_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateSCPDataMovementDetailsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateSCPDataMovementDetailsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateSCPDataMovementDetailsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateSCPDataMovementDetailsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateSCPDataMovementDetailsResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateSCPDataMovementDetailsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateSCPDataMovementDetailsResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - DataMovementId
type AiravataGetSCPDataMovementArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  DataMovementId string `thrift:"dataMovementId,2,required" db:"dataMovementId" json:"dataMovementId"`
}

func NewAiravataGetSCPDataMovementArgs() *AiravataGetSCPDataMovementArgs {
  return &AiravataGetSCPDataMovementArgs{}
}

var AiravataGetSCPDataMovementArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetSCPDataMovementArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetSCPDataMovementArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetSCPDataMovementArgs) GetDataMovementId() string {
  return p.DataMovementId
}
func (p *AiravataGetSCPDataMovementArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetSCPDataMovementArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetDataMovementId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetDataMovementId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetDataMovementId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DataMovementId is not set"));
  }
  return nil
}

func (p *AiravataGetSCPDataMovementArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetSCPDataMovementArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DataMovementId = v
}
  return nil
}

func (p *AiravataGetSCPDataMovementArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSCPDataMovement_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetSCPDataMovementArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetSCPDataMovementArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dataMovementId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dataMovementId: ", p), err) }
  if err := oprot.WriteString(string(p.DataMovementId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dataMovementId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dataMovementId: ", p), err) }
  return err
}

func (p *AiravataGetSCPDataMovementArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetSCPDataMovementArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetSCPDataMovementResult struct {
  Success *data_movement_models.SCPDataMovement `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetSCPDataMovementResult() *AiravataGetSCPDataMovementResult {
  return &AiravataGetSCPDataMovementResult{}
}

var AiravataGetSCPDataMovementResult_Success_DEFAULT *data_movement_models.SCPDataMovement
func (p *AiravataGetSCPDataMovementResult) GetSuccess() *data_movement_models.SCPDataMovement {
  if !p.IsSetSuccess() {
    return AiravataGetSCPDataMovementResult_Success_DEFAULT
  }
return p.Success
}
var AiravataGetSCPDataMovementResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetSCPDataMovementResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetSCPDataMovementResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetSCPDataMovementResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetSCPDataMovementResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetSCPDataMovementResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetSCPDataMovementResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetSCPDataMovementResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetSCPDataMovementResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetSCPDataMovementResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetSCPDataMovementResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetSCPDataMovementResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetSCPDataMovementResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetSCPDataMovementResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetSCPDataMovementResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetSCPDataMovementResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetSCPDataMovementResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetSCPDataMovementResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetSCPDataMovementResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &data_movement_models.SCPDataMovement{
  DataMovementInterfaceId: "DO_NOT_SET_AT_CLIENTS",

  SshPort: 22,
}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AiravataGetSCPDataMovementResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetSCPDataMovementResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetSCPDataMovementResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetSCPDataMovementResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetSCPDataMovementResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSCPDataMovement_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetSCPDataMovementResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetSCPDataMovementResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetSCPDataMovementResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetSCPDataMovementResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetSCPDataMovementResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetSCPDataMovementResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetSCPDataMovementResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - ProductUri
//  - DataMoveType
//  - PriorityOrder
//  - UnicoreDataMovement
type AiravataAddUnicoreDataMovementDetailsArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  ProductUri string `thrift:"productUri,2,required" db:"productUri" json:"productUri"`
  DataMoveType data_movement_models.DMType `thrift:"dataMoveType,3,required" db:"dataMoveType" json:"dataMoveType"`
  PriorityOrder int32 `thrift:"priorityOrder,4,required" db:"priorityOrder" json:"priorityOrder"`
  UnicoreDataMovement *data_movement_models.UnicoreDataMovement `thrift:"unicoreDataMovement,5,required" db:"unicoreDataMovement" json:"unicoreDataMovement"`
}

func NewAiravataAddUnicoreDataMovementDetailsArgs() *AiravataAddUnicoreDataMovementDetailsArgs {
  return &AiravataAddUnicoreDataMovementDetailsArgs{}
}

var AiravataAddUnicoreDataMovementDetailsArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataAddUnicoreDataMovementDetailsArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataAddUnicoreDataMovementDetailsArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataAddUnicoreDataMovementDetailsArgs) GetProductUri() string {
  return p.ProductUri
}

func (p *AiravataAddUnicoreDataMovementDetailsArgs) GetDataMoveType() data_movement_models.DMType {
  return p.DataMoveType
}

func (p *AiravataAddUnicoreDataMovementDetailsArgs) GetPriorityOrder() int32 {
  return p.PriorityOrder
}
var AiravataAddUnicoreDataMovementDetailsArgs_UnicoreDataMovement_DEFAULT *data_movement_models.UnicoreDataMovement
func (p *AiravataAddUnicoreDataMovementDetailsArgs) GetUnicoreDataMovement() *data_movement_models.UnicoreDataMovement {
  if !p.IsSetUnicoreDataMovement() {
    return AiravataAddUnicoreDataMovementDetailsArgs_UnicoreDataMovement_DEFAULT
  }
return p.UnicoreDataMovement
}
func (p *AiravataAddUnicoreDataMovementDetailsArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataAddUnicoreDataMovementDetailsArgs) IsSetUnicoreDataMovement() bool {
  return p.UnicoreDataMovement != nil
}

func (p *AiravataAddUnicoreDataMovementDetailsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetProductUri bool = false;
  var issetDataMoveType bool = false;
  var issetPriorityOrder bool = false;
  var issetUnicoreDataMovement bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProductUri = true
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetDataMoveType = true
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetPriorityOrder = true
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUnicoreDataMovement = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetProductUri{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProductUri is not set"));
  }
  if !issetDataMoveType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DataMoveType is not set"));
  }
  if !issetPriorityOrder{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PriorityOrder is not set"));
  }
  if !issetUnicoreDataMovement{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UnicoreDataMovement is not set"));
  }
  return nil
}

func (p *AiravataAddUnicoreDataMovementDetailsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataAddUnicoreDataMovementDetailsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ProductUri = v
}
  return nil
}

func (p *AiravataAddUnicoreDataMovementDetailsArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := data_movement_models.DMType(v)
  p.DataMoveType = temp
}
  return nil
}

func (p *AiravataAddUnicoreDataMovementDetailsArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PriorityOrder = v
}
  return nil
}

func (p *AiravataAddUnicoreDataMovementDetailsArgs)  ReadField5(iprot thrift.TProtocol) error {
  p.UnicoreDataMovement = &data_movement_models.UnicoreDataMovement{
  DataMovementInterfaceId: "DO_NOT_SET_AT_CLIENTS",
}
  if err := p.UnicoreDataMovement.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UnicoreDataMovement), err)
  }
  return nil
}

func (p *AiravataAddUnicoreDataMovementDetailsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addUnicoreDataMovementDetails_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataAddUnicoreDataMovementDetailsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataAddUnicoreDataMovementDetailsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("productUri", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:productUri: ", p), err) }
  if err := oprot.WriteString(string(p.ProductUri)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.productUri (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:productUri: ", p), err) }
  return err
}

func (p *AiravataAddUnicoreDataMovementDetailsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dataMoveType", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dataMoveType: ", p), err) }
  if err := oprot.WriteI32(int32(p.DataMoveType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dataMoveType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dataMoveType: ", p), err) }
  return err
}

func (p *AiravataAddUnicoreDataMovementDetailsArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("priorityOrder", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:priorityOrder: ", p), err) }
  if err := oprot.WriteI32(int32(p.PriorityOrder)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.priorityOrder (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:priorityOrder: ", p), err) }
  return err
}

func (p *AiravataAddUnicoreDataMovementDetailsArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("unicoreDataMovement", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:unicoreDataMovement: ", p), err) }
  if err := p.UnicoreDataMovement.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UnicoreDataMovement), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:unicoreDataMovement: ", p), err) }
  return err
}

func (p *AiravataAddUnicoreDataMovementDetailsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataAddUnicoreDataMovementDetailsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataAddUnicoreDataMovementDetailsResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataAddUnicoreDataMovementDetailsResult() *AiravataAddUnicoreDataMovementDetailsResult {
  return &AiravataAddUnicoreDataMovementDetailsResult{}
}

var AiravataAddUnicoreDataMovementDetailsResult_Success_DEFAULT string
func (p *AiravataAddUnicoreDataMovementDetailsResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return AiravataAddUnicoreDataMovementDetailsResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataAddUnicoreDataMovementDetailsResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataAddUnicoreDataMovementDetailsResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataAddUnicoreDataMovementDetailsResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataAddUnicoreDataMovementDetailsResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataAddUnicoreDataMovementDetailsResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataAddUnicoreDataMovementDetailsResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataAddUnicoreDataMovementDetailsResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataAddUnicoreDataMovementDetailsResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataAddUnicoreDataMovementDetailsResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataAddUnicoreDataMovementDetailsResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataAddUnicoreDataMovementDetailsResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataAddUnicoreDataMovementDetailsResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataAddUnicoreDataMovementDetailsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataAddUnicoreDataMovementDetailsResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataAddUnicoreDataMovementDetailsResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataAddUnicoreDataMovementDetailsResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataAddUnicoreDataMovementDetailsResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataAddUnicoreDataMovementDetailsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataAddUnicoreDataMovementDetailsResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataAddUnicoreDataMovementDetailsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataAddUnicoreDataMovementDetailsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataAddUnicoreDataMovementDetailsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataAddUnicoreDataMovementDetailsResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataAddUnicoreDataMovementDetailsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addUnicoreDataMovementDetails_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataAddUnicoreDataMovementDetailsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataAddUnicoreDataMovementDetailsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataAddUnicoreDataMovementDetailsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataAddUnicoreDataMovementDetailsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataAddUnicoreDataMovementDetailsResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataAddUnicoreDataMovementDetailsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataAddUnicoreDataMovementDetailsResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - DataMovementInterfaceId
//  - UnicoreDataMovement
type AiravataUpdateUnicoreDataMovementDetailsArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  DataMovementInterfaceId string `thrift:"dataMovementInterfaceId,2,required" db:"dataMovementInterfaceId" json:"dataMovementInterfaceId"`
  UnicoreDataMovement *data_movement_models.UnicoreDataMovement `thrift:"unicoreDataMovement,3,required" db:"unicoreDataMovement" json:"unicoreDataMovement"`
}

func NewAiravataUpdateUnicoreDataMovementDetailsArgs() *AiravataUpdateUnicoreDataMovementDetailsArgs {
  return &AiravataUpdateUnicoreDataMovementDetailsArgs{}
}

var AiravataUpdateUnicoreDataMovementDetailsArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataUpdateUnicoreDataMovementDetailsArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataUpdateUnicoreDataMovementDetailsArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataUpdateUnicoreDataMovementDetailsArgs) GetDataMovementInterfaceId() string {
  return p.DataMovementInterfaceId
}
var AiravataUpdateUnicoreDataMovementDetailsArgs_UnicoreDataMovement_DEFAULT *data_movement_models.UnicoreDataMovement
func (p *AiravataUpdateUnicoreDataMovementDetailsArgs) GetUnicoreDataMovement() *data_movement_models.UnicoreDataMovement {
  if !p.IsSetUnicoreDataMovement() {
    return AiravataUpdateUnicoreDataMovementDetailsArgs_UnicoreDataMovement_DEFAULT
  }
return p.UnicoreDataMovement
}
func (p *AiravataUpdateUnicoreDataMovementDetailsArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataUpdateUnicoreDataMovementDetailsArgs) IsSetUnicoreDataMovement() bool {
  return p.UnicoreDataMovement != nil
}

func (p *AiravataUpdateUnicoreDataMovementDetailsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetDataMovementInterfaceId bool = false;
  var issetUnicoreDataMovement bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetDataMovementInterfaceId = true
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUnicoreDataMovement = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetDataMovementInterfaceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DataMovementInterfaceId is not set"));
  }
  if !issetUnicoreDataMovement{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UnicoreDataMovement is not set"));
  }
  return nil
}

func (p *AiravataUpdateUnicoreDataMovementDetailsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataUpdateUnicoreDataMovementDetailsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DataMovementInterfaceId = v
}
  return nil
}

func (p *AiravataUpdateUnicoreDataMovementDetailsArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.UnicoreDataMovement = &data_movement_models.UnicoreDataMovement{
  DataMovementInterfaceId: "DO_NOT_SET_AT_CLIENTS",
}
  if err := p.UnicoreDataMovement.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UnicoreDataMovement), err)
  }
  return nil
}

func (p *AiravataUpdateUnicoreDataMovementDetailsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateUnicoreDataMovementDetails_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateUnicoreDataMovementDetailsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataUpdateUnicoreDataMovementDetailsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dataMovementInterfaceId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dataMovementInterfaceId: ", p), err) }
  if err := oprot.WriteString(string(p.DataMovementInterfaceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dataMovementInterfaceId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dataMovementInterfaceId: ", p), err) }
  return err
}

func (p *AiravataUpdateUnicoreDataMovementDetailsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("unicoreDataMovement", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:unicoreDataMovement: ", p), err) }
  if err := p.UnicoreDataMovement.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UnicoreDataMovement), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:unicoreDataMovement: ", p), err) }
  return err
}

func (p *AiravataUpdateUnicoreDataMovementDetailsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateUnicoreDataMovementDetailsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataUpdateUnicoreDataMovementDetailsResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataUpdateUnicoreDataMovementDetailsResult() *AiravataUpdateUnicoreDataMovementDetailsResult {
  return &AiravataUpdateUnicoreDataMovementDetailsResult{}
}

var AiravataUpdateUnicoreDataMovementDetailsResult_Success_DEFAULT bool
func (p *AiravataUpdateUnicoreDataMovementDetailsResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataUpdateUnicoreDataMovementDetailsResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataUpdateUnicoreDataMovementDetailsResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataUpdateUnicoreDataMovementDetailsResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataUpdateUnicoreDataMovementDetailsResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataUpdateUnicoreDataMovementDetailsResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataUpdateUnicoreDataMovementDetailsResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataUpdateUnicoreDataMovementDetailsResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataUpdateUnicoreDataMovementDetailsResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataUpdateUnicoreDataMovementDetailsResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataUpdateUnicoreDataMovementDetailsResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataUpdateUnicoreDataMovementDetailsResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataUpdateUnicoreDataMovementDetailsResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataUpdateUnicoreDataMovementDetailsResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataUpdateUnicoreDataMovementDetailsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataUpdateUnicoreDataMovementDetailsResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataUpdateUnicoreDataMovementDetailsResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataUpdateUnicoreDataMovementDetailsResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataUpdateUnicoreDataMovementDetailsResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataUpdateUnicoreDataMovementDetailsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataUpdateUnicoreDataMovementDetailsResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataUpdateUnicoreDataMovementDetailsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataUpdateUnicoreDataMovementDetailsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataUpdateUnicoreDataMovementDetailsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataUpdateUnicoreDataMovementDetailsResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataUpdateUnicoreDataMovementDetailsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateUnicoreDataMovementDetails_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateUnicoreDataMovementDetailsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateUnicoreDataMovementDetailsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateUnicoreDataMovementDetailsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateUnicoreDataMovementDetailsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateUnicoreDataMovementDetailsResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateUnicoreDataMovementDetailsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateUnicoreDataMovementDetailsResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - DataMovementId
type AiravataGetUnicoreDataMovementArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  DataMovementId string `thrift:"dataMovementId,2,required" db:"dataMovementId" json:"dataMovementId"`
}

func NewAiravataGetUnicoreDataMovementArgs() *AiravataGetUnicoreDataMovementArgs {
  return &AiravataGetUnicoreDataMovementArgs{}
}

var AiravataGetUnicoreDataMovementArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetUnicoreDataMovementArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetUnicoreDataMovementArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetUnicoreDataMovementArgs) GetDataMovementId() string {
  return p.DataMovementId
}
func (p *AiravataGetUnicoreDataMovementArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetUnicoreDataMovementArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetDataMovementId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetDataMovementId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetDataMovementId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DataMovementId is not set"));
  }
  return nil
}

func (p *AiravataGetUnicoreDataMovementArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetUnicoreDataMovementArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DataMovementId = v
}
  return nil
}

func (p *AiravataGetUnicoreDataMovementArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUnicoreDataMovement_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetUnicoreDataMovementArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetUnicoreDataMovementArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dataMovementId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dataMovementId: ", p), err) }
  if err := oprot.WriteString(string(p.DataMovementId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dataMovementId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dataMovementId: ", p), err) }
  return err
}

func (p *AiravataGetUnicoreDataMovementArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetUnicoreDataMovementArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetUnicoreDataMovementResult struct {
  Success *data_movement_models.UnicoreDataMovement `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetUnicoreDataMovementResult() *AiravataGetUnicoreDataMovementResult {
  return &AiravataGetUnicoreDataMovementResult{}
}

var AiravataGetUnicoreDataMovementResult_Success_DEFAULT *data_movement_models.UnicoreDataMovement
func (p *AiravataGetUnicoreDataMovementResult) GetSuccess() *data_movement_models.UnicoreDataMovement {
  if !p.IsSetSuccess() {
    return AiravataGetUnicoreDataMovementResult_Success_DEFAULT
  }
return p.Success
}
var AiravataGetUnicoreDataMovementResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetUnicoreDataMovementResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetUnicoreDataMovementResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetUnicoreDataMovementResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetUnicoreDataMovementResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetUnicoreDataMovementResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetUnicoreDataMovementResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetUnicoreDataMovementResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetUnicoreDataMovementResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetUnicoreDataMovementResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetUnicoreDataMovementResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetUnicoreDataMovementResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetUnicoreDataMovementResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetUnicoreDataMovementResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetUnicoreDataMovementResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetUnicoreDataMovementResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetUnicoreDataMovementResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetUnicoreDataMovementResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetUnicoreDataMovementResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &data_movement_models.UnicoreDataMovement{
  DataMovementInterfaceId: "DO_NOT_SET_AT_CLIENTS",
}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AiravataGetUnicoreDataMovementResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetUnicoreDataMovementResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetUnicoreDataMovementResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetUnicoreDataMovementResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetUnicoreDataMovementResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUnicoreDataMovement_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetUnicoreDataMovementResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetUnicoreDataMovementResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetUnicoreDataMovementResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetUnicoreDataMovementResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetUnicoreDataMovementResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetUnicoreDataMovementResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetUnicoreDataMovementResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - ProductUri
//  - DataMoveType
//  - PriorityOrder
//  - GridFTPDataMovement
type AiravataAddGridFTPDataMovementDetailsArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  ProductUri string `thrift:"productUri,2,required" db:"productUri" json:"productUri"`
  DataMoveType data_movement_models.DMType `thrift:"dataMoveType,3,required" db:"dataMoveType" json:"dataMoveType"`
  PriorityOrder int32 `thrift:"priorityOrder,4,required" db:"priorityOrder" json:"priorityOrder"`
  GridFTPDataMovement *data_movement_models.GridFTPDataMovement `thrift:"gridFTPDataMovement,5,required" db:"gridFTPDataMovement" json:"gridFTPDataMovement"`
}

func NewAiravataAddGridFTPDataMovementDetailsArgs() *AiravataAddGridFTPDataMovementDetailsArgs {
  return &AiravataAddGridFTPDataMovementDetailsArgs{}
}

var AiravataAddGridFTPDataMovementDetailsArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataAddGridFTPDataMovementDetailsArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataAddGridFTPDataMovementDetailsArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataAddGridFTPDataMovementDetailsArgs) GetProductUri() string {
  return p.ProductUri
}

func (p *AiravataAddGridFTPDataMovementDetailsArgs) GetDataMoveType() data_movement_models.DMType {
  return p.DataMoveType
}

func (p *AiravataAddGridFTPDataMovementDetailsArgs) GetPriorityOrder() int32 {
  return p.PriorityOrder
}
var AiravataAddGridFTPDataMovementDetailsArgs_GridFTPDataMovement_DEFAULT *data_movement_models.GridFTPDataMovement
func (p *AiravataAddGridFTPDataMovementDetailsArgs) GetGridFTPDataMovement() *data_movement_models.GridFTPDataMovement {
  if !p.IsSetGridFTPDataMovement() {
    return AiravataAddGridFTPDataMovementDetailsArgs_GridFTPDataMovement_DEFAULT
  }
return p.GridFTPDataMovement
}
func (p *AiravataAddGridFTPDataMovementDetailsArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataAddGridFTPDataMovementDetailsArgs) IsSetGridFTPDataMovement() bool {
  return p.GridFTPDataMovement != nil
}

func (p *AiravataAddGridFTPDataMovementDetailsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetProductUri bool = false;
  var issetDataMoveType bool = false;
  var issetPriorityOrder bool = false;
  var issetGridFTPDataMovement bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProductUri = true
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetDataMoveType = true
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetPriorityOrder = true
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGridFTPDataMovement = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetProductUri{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProductUri is not set"));
  }
  if !issetDataMoveType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DataMoveType is not set"));
  }
  if !issetPriorityOrder{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PriorityOrder is not set"));
  }
  if !issetGridFTPDataMovement{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GridFTPDataMovement is not set"));
  }
  return nil
}

func (p *AiravataAddGridFTPDataMovementDetailsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataAddGridFTPDataMovementDetailsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ProductUri = v
}
  return nil
}

func (p *AiravataAddGridFTPDataMovementDetailsArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := data_movement_models.DMType(v)
  p.DataMoveType = temp
}
  return nil
}

func (p *AiravataAddGridFTPDataMovementDetailsArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PriorityOrder = v
}
  return nil
}

func (p *AiravataAddGridFTPDataMovementDetailsArgs)  ReadField5(iprot thrift.TProtocol) error {
  p.GridFTPDataMovement = &data_movement_models.GridFTPDataMovement{
  DataMovementInterfaceId: "DO_NOT_SET_AT_CLIENTS",
}
  if err := p.GridFTPDataMovement.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GridFTPDataMovement), err)
  }
  return nil
}

func (p *AiravataAddGridFTPDataMovementDetailsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addGridFTPDataMovementDetails_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataAddGridFTPDataMovementDetailsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataAddGridFTPDataMovementDetailsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("productUri", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:productUri: ", p), err) }
  if err := oprot.WriteString(string(p.ProductUri)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.productUri (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:productUri: ", p), err) }
  return err
}

func (p *AiravataAddGridFTPDataMovementDetailsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dataMoveType", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dataMoveType: ", p), err) }
  if err := oprot.WriteI32(int32(p.DataMoveType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dataMoveType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dataMoveType: ", p), err) }
  return err
}

func (p *AiravataAddGridFTPDataMovementDetailsArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("priorityOrder", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:priorityOrder: ", p), err) }
  if err := oprot.WriteI32(int32(p.PriorityOrder)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.priorityOrder (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:priorityOrder: ", p), err) }
  return err
}

func (p *AiravataAddGridFTPDataMovementDetailsArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gridFTPDataMovement", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:gridFTPDataMovement: ", p), err) }
  if err := p.GridFTPDataMovement.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GridFTPDataMovement), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:gridFTPDataMovement: ", p), err) }
  return err
}

func (p *AiravataAddGridFTPDataMovementDetailsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataAddGridFTPDataMovementDetailsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataAddGridFTPDataMovementDetailsResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataAddGridFTPDataMovementDetailsResult() *AiravataAddGridFTPDataMovementDetailsResult {
  return &AiravataAddGridFTPDataMovementDetailsResult{}
}

var AiravataAddGridFTPDataMovementDetailsResult_Success_DEFAULT string
func (p *AiravataAddGridFTPDataMovementDetailsResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return AiravataAddGridFTPDataMovementDetailsResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataAddGridFTPDataMovementDetailsResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataAddGridFTPDataMovementDetailsResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataAddGridFTPDataMovementDetailsResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataAddGridFTPDataMovementDetailsResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataAddGridFTPDataMovementDetailsResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataAddGridFTPDataMovementDetailsResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataAddGridFTPDataMovementDetailsResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataAddGridFTPDataMovementDetailsResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataAddGridFTPDataMovementDetailsResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataAddGridFTPDataMovementDetailsResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataAddGridFTPDataMovementDetailsResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataAddGridFTPDataMovementDetailsResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataAddGridFTPDataMovementDetailsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataAddGridFTPDataMovementDetailsResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataAddGridFTPDataMovementDetailsResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataAddGridFTPDataMovementDetailsResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataAddGridFTPDataMovementDetailsResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataAddGridFTPDataMovementDetailsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataAddGridFTPDataMovementDetailsResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataAddGridFTPDataMovementDetailsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataAddGridFTPDataMovementDetailsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataAddGridFTPDataMovementDetailsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataAddGridFTPDataMovementDetailsResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataAddGridFTPDataMovementDetailsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addGridFTPDataMovementDetails_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataAddGridFTPDataMovementDetailsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataAddGridFTPDataMovementDetailsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataAddGridFTPDataMovementDetailsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataAddGridFTPDataMovementDetailsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataAddGridFTPDataMovementDetailsResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataAddGridFTPDataMovementDetailsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataAddGridFTPDataMovementDetailsResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - DataMovementInterfaceId
//  - GridFTPDataMovement
type AiravataUpdateGridFTPDataMovementDetailsArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  DataMovementInterfaceId string `thrift:"dataMovementInterfaceId,2,required" db:"dataMovementInterfaceId" json:"dataMovementInterfaceId"`
  GridFTPDataMovement *data_movement_models.GridFTPDataMovement `thrift:"gridFTPDataMovement,3,required" db:"gridFTPDataMovement" json:"gridFTPDataMovement"`
}

func NewAiravataUpdateGridFTPDataMovementDetailsArgs() *AiravataUpdateGridFTPDataMovementDetailsArgs {
  return &AiravataUpdateGridFTPDataMovementDetailsArgs{}
}

var AiravataUpdateGridFTPDataMovementDetailsArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataUpdateGridFTPDataMovementDetailsArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataUpdateGridFTPDataMovementDetailsArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataUpdateGridFTPDataMovementDetailsArgs) GetDataMovementInterfaceId() string {
  return p.DataMovementInterfaceId
}
var AiravataUpdateGridFTPDataMovementDetailsArgs_GridFTPDataMovement_DEFAULT *data_movement_models.GridFTPDataMovement
func (p *AiravataUpdateGridFTPDataMovementDetailsArgs) GetGridFTPDataMovement() *data_movement_models.GridFTPDataMovement {
  if !p.IsSetGridFTPDataMovement() {
    return AiravataUpdateGridFTPDataMovementDetailsArgs_GridFTPDataMovement_DEFAULT
  }
return p.GridFTPDataMovement
}
func (p *AiravataUpdateGridFTPDataMovementDetailsArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataUpdateGridFTPDataMovementDetailsArgs) IsSetGridFTPDataMovement() bool {
  return p.GridFTPDataMovement != nil
}

func (p *AiravataUpdateGridFTPDataMovementDetailsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetDataMovementInterfaceId bool = false;
  var issetGridFTPDataMovement bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetDataMovementInterfaceId = true
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGridFTPDataMovement = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetDataMovementInterfaceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DataMovementInterfaceId is not set"));
  }
  if !issetGridFTPDataMovement{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GridFTPDataMovement is not set"));
  }
  return nil
}

func (p *AiravataUpdateGridFTPDataMovementDetailsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataUpdateGridFTPDataMovementDetailsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DataMovementInterfaceId = v
}
  return nil
}

func (p *AiravataUpdateGridFTPDataMovementDetailsArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.GridFTPDataMovement = &data_movement_models.GridFTPDataMovement{
  DataMovementInterfaceId: "DO_NOT_SET_AT_CLIENTS",
}
  if err := p.GridFTPDataMovement.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GridFTPDataMovement), err)
  }
  return nil
}

func (p *AiravataUpdateGridFTPDataMovementDetailsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateGridFTPDataMovementDetails_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateGridFTPDataMovementDetailsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataUpdateGridFTPDataMovementDetailsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dataMovementInterfaceId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dataMovementInterfaceId: ", p), err) }
  if err := oprot.WriteString(string(p.DataMovementInterfaceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dataMovementInterfaceId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dataMovementInterfaceId: ", p), err) }
  return err
}

func (p *AiravataUpdateGridFTPDataMovementDetailsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gridFTPDataMovement", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gridFTPDataMovement: ", p), err) }
  if err := p.GridFTPDataMovement.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GridFTPDataMovement), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gridFTPDataMovement: ", p), err) }
  return err
}

func (p *AiravataUpdateGridFTPDataMovementDetailsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateGridFTPDataMovementDetailsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataUpdateGridFTPDataMovementDetailsResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataUpdateGridFTPDataMovementDetailsResult() *AiravataUpdateGridFTPDataMovementDetailsResult {
  return &AiravataUpdateGridFTPDataMovementDetailsResult{}
}

var AiravataUpdateGridFTPDataMovementDetailsResult_Success_DEFAULT bool
func (p *AiravataUpdateGridFTPDataMovementDetailsResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataUpdateGridFTPDataMovementDetailsResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataUpdateGridFTPDataMovementDetailsResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataUpdateGridFTPDataMovementDetailsResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataUpdateGridFTPDataMovementDetailsResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataUpdateGridFTPDataMovementDetailsResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataUpdateGridFTPDataMovementDetailsResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataUpdateGridFTPDataMovementDetailsResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataUpdateGridFTPDataMovementDetailsResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataUpdateGridFTPDataMovementDetailsResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataUpdateGridFTPDataMovementDetailsResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataUpdateGridFTPDataMovementDetailsResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataUpdateGridFTPDataMovementDetailsResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataUpdateGridFTPDataMovementDetailsResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataUpdateGridFTPDataMovementDetailsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataUpdateGridFTPDataMovementDetailsResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataUpdateGridFTPDataMovementDetailsResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataUpdateGridFTPDataMovementDetailsResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataUpdateGridFTPDataMovementDetailsResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataUpdateGridFTPDataMovementDetailsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataUpdateGridFTPDataMovementDetailsResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataUpdateGridFTPDataMovementDetailsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataUpdateGridFTPDataMovementDetailsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataUpdateGridFTPDataMovementDetailsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataUpdateGridFTPDataMovementDetailsResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataUpdateGridFTPDataMovementDetailsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateGridFTPDataMovementDetails_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateGridFTPDataMovementDetailsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateGridFTPDataMovementDetailsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateGridFTPDataMovementDetailsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateGridFTPDataMovementDetailsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateGridFTPDataMovementDetailsResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateGridFTPDataMovementDetailsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateGridFTPDataMovementDetailsResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - DataMovementId
type AiravataGetGridFTPDataMovementArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  DataMovementId string `thrift:"dataMovementId,2,required" db:"dataMovementId" json:"dataMovementId"`
}

func NewAiravataGetGridFTPDataMovementArgs() *AiravataGetGridFTPDataMovementArgs {
  return &AiravataGetGridFTPDataMovementArgs{}
}

var AiravataGetGridFTPDataMovementArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetGridFTPDataMovementArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetGridFTPDataMovementArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetGridFTPDataMovementArgs) GetDataMovementId() string {
  return p.DataMovementId
}
func (p *AiravataGetGridFTPDataMovementArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetGridFTPDataMovementArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetDataMovementId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetDataMovementId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetDataMovementId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DataMovementId is not set"));
  }
  return nil
}

func (p *AiravataGetGridFTPDataMovementArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetGridFTPDataMovementArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DataMovementId = v
}
  return nil
}

func (p *AiravataGetGridFTPDataMovementArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getGridFTPDataMovement_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetGridFTPDataMovementArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetGridFTPDataMovementArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dataMovementId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dataMovementId: ", p), err) }
  if err := oprot.WriteString(string(p.DataMovementId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dataMovementId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dataMovementId: ", p), err) }
  return err
}

func (p *AiravataGetGridFTPDataMovementArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetGridFTPDataMovementArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetGridFTPDataMovementResult struct {
  Success *data_movement_models.GridFTPDataMovement `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetGridFTPDataMovementResult() *AiravataGetGridFTPDataMovementResult {
  return &AiravataGetGridFTPDataMovementResult{}
}

var AiravataGetGridFTPDataMovementResult_Success_DEFAULT *data_movement_models.GridFTPDataMovement
func (p *AiravataGetGridFTPDataMovementResult) GetSuccess() *data_movement_models.GridFTPDataMovement {
  if !p.IsSetSuccess() {
    return AiravataGetGridFTPDataMovementResult_Success_DEFAULT
  }
return p.Success
}
var AiravataGetGridFTPDataMovementResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetGridFTPDataMovementResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetGridFTPDataMovementResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetGridFTPDataMovementResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetGridFTPDataMovementResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetGridFTPDataMovementResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetGridFTPDataMovementResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetGridFTPDataMovementResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetGridFTPDataMovementResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetGridFTPDataMovementResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetGridFTPDataMovementResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetGridFTPDataMovementResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetGridFTPDataMovementResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetGridFTPDataMovementResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetGridFTPDataMovementResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetGridFTPDataMovementResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetGridFTPDataMovementResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetGridFTPDataMovementResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetGridFTPDataMovementResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &data_movement_models.GridFTPDataMovement{
  DataMovementInterfaceId: "DO_NOT_SET_AT_CLIENTS",
}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AiravataGetGridFTPDataMovementResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetGridFTPDataMovementResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetGridFTPDataMovementResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetGridFTPDataMovementResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetGridFTPDataMovementResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getGridFTPDataMovement_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetGridFTPDataMovementResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetGridFTPDataMovementResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetGridFTPDataMovementResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetGridFTPDataMovementResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetGridFTPDataMovementResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetGridFTPDataMovementResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetGridFTPDataMovementResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - JobSubmissionInterfaceId
//  - NewPriorityOrder_
type AiravataChangeJobSubmissionPriorityArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  JobSubmissionInterfaceId string `thrift:"jobSubmissionInterfaceId,2,required" db:"jobSubmissionInterfaceId" json:"jobSubmissionInterfaceId"`
  NewPriorityOrder_ int32 `thrift:"newPriorityOrder,3,required" db:"newPriorityOrder" json:"newPriorityOrder"`
}

func NewAiravataChangeJobSubmissionPriorityArgs() *AiravataChangeJobSubmissionPriorityArgs {
  return &AiravataChangeJobSubmissionPriorityArgs{}
}

var AiravataChangeJobSubmissionPriorityArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataChangeJobSubmissionPriorityArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataChangeJobSubmissionPriorityArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataChangeJobSubmissionPriorityArgs) GetJobSubmissionInterfaceId() string {
  return p.JobSubmissionInterfaceId
}

func (p *AiravataChangeJobSubmissionPriorityArgs) GetNewPriorityOrder_() int32 {
  return p.NewPriorityOrder_
}
func (p *AiravataChangeJobSubmissionPriorityArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataChangeJobSubmissionPriorityArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetJobSubmissionInterfaceId bool = false;
  var issetNewPriorityOrder_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetJobSubmissionInterfaceId = true
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetNewPriorityOrder_ = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetJobSubmissionInterfaceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field JobSubmissionInterfaceId is not set"));
  }
  if !issetNewPriorityOrder_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NewPriorityOrder_ is not set"));
  }
  return nil
}

func (p *AiravataChangeJobSubmissionPriorityArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataChangeJobSubmissionPriorityArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.JobSubmissionInterfaceId = v
}
  return nil
}

func (p *AiravataChangeJobSubmissionPriorityArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NewPriorityOrder_ = v
}
  return nil
}

func (p *AiravataChangeJobSubmissionPriorityArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("changeJobSubmissionPriority_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataChangeJobSubmissionPriorityArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataChangeJobSubmissionPriorityArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("jobSubmissionInterfaceId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:jobSubmissionInterfaceId: ", p), err) }
  if err := oprot.WriteString(string(p.JobSubmissionInterfaceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.jobSubmissionInterfaceId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:jobSubmissionInterfaceId: ", p), err) }
  return err
}

func (p *AiravataChangeJobSubmissionPriorityArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("newPriorityOrder", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:newPriorityOrder: ", p), err) }
  if err := oprot.WriteI32(int32(p.NewPriorityOrder_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.newPriorityOrder (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:newPriorityOrder: ", p), err) }
  return err
}

func (p *AiravataChangeJobSubmissionPriorityArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataChangeJobSubmissionPriorityArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataChangeJobSubmissionPriorityResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataChangeJobSubmissionPriorityResult() *AiravataChangeJobSubmissionPriorityResult {
  return &AiravataChangeJobSubmissionPriorityResult{}
}

var AiravataChangeJobSubmissionPriorityResult_Success_DEFAULT bool
func (p *AiravataChangeJobSubmissionPriorityResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataChangeJobSubmissionPriorityResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataChangeJobSubmissionPriorityResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataChangeJobSubmissionPriorityResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataChangeJobSubmissionPriorityResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataChangeJobSubmissionPriorityResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataChangeJobSubmissionPriorityResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataChangeJobSubmissionPriorityResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataChangeJobSubmissionPriorityResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataChangeJobSubmissionPriorityResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataChangeJobSubmissionPriorityResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataChangeJobSubmissionPriorityResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataChangeJobSubmissionPriorityResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataChangeJobSubmissionPriorityResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataChangeJobSubmissionPriorityResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataChangeJobSubmissionPriorityResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataChangeJobSubmissionPriorityResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataChangeJobSubmissionPriorityResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataChangeJobSubmissionPriorityResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataChangeJobSubmissionPriorityResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataChangeJobSubmissionPriorityResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataChangeJobSubmissionPriorityResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataChangeJobSubmissionPriorityResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataChangeJobSubmissionPriorityResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataChangeJobSubmissionPriorityResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataChangeJobSubmissionPriorityResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("changeJobSubmissionPriority_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataChangeJobSubmissionPriorityResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataChangeJobSubmissionPriorityResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataChangeJobSubmissionPriorityResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataChangeJobSubmissionPriorityResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataChangeJobSubmissionPriorityResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataChangeJobSubmissionPriorityResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataChangeJobSubmissionPriorityResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - DataMovementInterfaceId
//  - NewPriorityOrder_
type AiravataChangeDataMovementPriorityArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  DataMovementInterfaceId string `thrift:"dataMovementInterfaceId,2,required" db:"dataMovementInterfaceId" json:"dataMovementInterfaceId"`
  NewPriorityOrder_ int32 `thrift:"newPriorityOrder,3,required" db:"newPriorityOrder" json:"newPriorityOrder"`
}

func NewAiravataChangeDataMovementPriorityArgs() *AiravataChangeDataMovementPriorityArgs {
  return &AiravataChangeDataMovementPriorityArgs{}
}

var AiravataChangeDataMovementPriorityArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataChangeDataMovementPriorityArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataChangeDataMovementPriorityArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataChangeDataMovementPriorityArgs) GetDataMovementInterfaceId() string {
  return p.DataMovementInterfaceId
}

func (p *AiravataChangeDataMovementPriorityArgs) GetNewPriorityOrder_() int32 {
  return p.NewPriorityOrder_
}
func (p *AiravataChangeDataMovementPriorityArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataChangeDataMovementPriorityArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetDataMovementInterfaceId bool = false;
  var issetNewPriorityOrder_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetDataMovementInterfaceId = true
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetNewPriorityOrder_ = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetDataMovementInterfaceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DataMovementInterfaceId is not set"));
  }
  if !issetNewPriorityOrder_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NewPriorityOrder_ is not set"));
  }
  return nil
}

func (p *AiravataChangeDataMovementPriorityArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataChangeDataMovementPriorityArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DataMovementInterfaceId = v
}
  return nil
}

func (p *AiravataChangeDataMovementPriorityArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NewPriorityOrder_ = v
}
  return nil
}

func (p *AiravataChangeDataMovementPriorityArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("changeDataMovementPriority_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataChangeDataMovementPriorityArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataChangeDataMovementPriorityArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dataMovementInterfaceId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dataMovementInterfaceId: ", p), err) }
  if err := oprot.WriteString(string(p.DataMovementInterfaceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dataMovementInterfaceId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dataMovementInterfaceId: ", p), err) }
  return err
}

func (p *AiravataChangeDataMovementPriorityArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("newPriorityOrder", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:newPriorityOrder: ", p), err) }
  if err := oprot.WriteI32(int32(p.NewPriorityOrder_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.newPriorityOrder (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:newPriorityOrder: ", p), err) }
  return err
}

func (p *AiravataChangeDataMovementPriorityArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataChangeDataMovementPriorityArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataChangeDataMovementPriorityResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataChangeDataMovementPriorityResult() *AiravataChangeDataMovementPriorityResult {
  return &AiravataChangeDataMovementPriorityResult{}
}

var AiravataChangeDataMovementPriorityResult_Success_DEFAULT bool
func (p *AiravataChangeDataMovementPriorityResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataChangeDataMovementPriorityResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataChangeDataMovementPriorityResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataChangeDataMovementPriorityResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataChangeDataMovementPriorityResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataChangeDataMovementPriorityResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataChangeDataMovementPriorityResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataChangeDataMovementPriorityResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataChangeDataMovementPriorityResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataChangeDataMovementPriorityResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataChangeDataMovementPriorityResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataChangeDataMovementPriorityResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataChangeDataMovementPriorityResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataChangeDataMovementPriorityResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataChangeDataMovementPriorityResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataChangeDataMovementPriorityResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataChangeDataMovementPriorityResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataChangeDataMovementPriorityResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataChangeDataMovementPriorityResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataChangeDataMovementPriorityResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataChangeDataMovementPriorityResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataChangeDataMovementPriorityResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataChangeDataMovementPriorityResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataChangeDataMovementPriorityResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataChangeDataMovementPriorityResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataChangeDataMovementPriorityResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("changeDataMovementPriority_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataChangeDataMovementPriorityResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataChangeDataMovementPriorityResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataChangeDataMovementPriorityResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataChangeDataMovementPriorityResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataChangeDataMovementPriorityResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataChangeDataMovementPriorityResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataChangeDataMovementPriorityResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - JobSubmissionPriorityMap
type AiravataChangeJobSubmissionPrioritiesArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  JobSubmissionPriorityMap map[string]int32 `thrift:"jobSubmissionPriorityMap,2,required" db:"jobSubmissionPriorityMap" json:"jobSubmissionPriorityMap"`
}

func NewAiravataChangeJobSubmissionPrioritiesArgs() *AiravataChangeJobSubmissionPrioritiesArgs {
  return &AiravataChangeJobSubmissionPrioritiesArgs{}
}

var AiravataChangeJobSubmissionPrioritiesArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataChangeJobSubmissionPrioritiesArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataChangeJobSubmissionPrioritiesArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataChangeJobSubmissionPrioritiesArgs) GetJobSubmissionPriorityMap() map[string]int32 {
  return p.JobSubmissionPriorityMap
}
func (p *AiravataChangeJobSubmissionPrioritiesArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataChangeJobSubmissionPrioritiesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetJobSubmissionPriorityMap bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetJobSubmissionPriorityMap = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetJobSubmissionPriorityMap{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field JobSubmissionPriorityMap is not set"));
  }
  return nil
}

func (p *AiravataChangeJobSubmissionPrioritiesArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataChangeJobSubmissionPrioritiesArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]int32, size)
  p.JobSubmissionPriorityMap =  tMap
  for i := 0; i < size; i ++ {
var _key377 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key377 = v
}
var _val378 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val378 = v
}
    p.JobSubmissionPriorityMap[_key377] = _val378
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AiravataChangeJobSubmissionPrioritiesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("changeJobSubmissionPriorities_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataChangeJobSubmissionPrioritiesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataChangeJobSubmissionPrioritiesArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("jobSubmissionPriorityMap", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:jobSubmissionPriorityMap: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(p.JobSubmissionPriorityMap)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.JobSubmissionPriorityMap {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:jobSubmissionPriorityMap: ", p), err) }
  return err
}

func (p *AiravataChangeJobSubmissionPrioritiesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataChangeJobSubmissionPrioritiesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataChangeJobSubmissionPrioritiesResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataChangeJobSubmissionPrioritiesResult() *AiravataChangeJobSubmissionPrioritiesResult {
  return &AiravataChangeJobSubmissionPrioritiesResult{}
}

var AiravataChangeJobSubmissionPrioritiesResult_Success_DEFAULT bool
func (p *AiravataChangeJobSubmissionPrioritiesResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataChangeJobSubmissionPrioritiesResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataChangeJobSubmissionPrioritiesResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataChangeJobSubmissionPrioritiesResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataChangeJobSubmissionPrioritiesResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataChangeJobSubmissionPrioritiesResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataChangeJobSubmissionPrioritiesResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataChangeJobSubmissionPrioritiesResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataChangeJobSubmissionPrioritiesResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataChangeJobSubmissionPrioritiesResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataChangeJobSubmissionPrioritiesResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataChangeJobSubmissionPrioritiesResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataChangeJobSubmissionPrioritiesResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataChangeJobSubmissionPrioritiesResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataChangeJobSubmissionPrioritiesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataChangeJobSubmissionPrioritiesResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataChangeJobSubmissionPrioritiesResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataChangeJobSubmissionPrioritiesResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataChangeJobSubmissionPrioritiesResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataChangeJobSubmissionPrioritiesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataChangeJobSubmissionPrioritiesResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataChangeJobSubmissionPrioritiesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataChangeJobSubmissionPrioritiesResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataChangeJobSubmissionPrioritiesResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataChangeJobSubmissionPrioritiesResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataChangeJobSubmissionPrioritiesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("changeJobSubmissionPriorities_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataChangeJobSubmissionPrioritiesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataChangeJobSubmissionPrioritiesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataChangeJobSubmissionPrioritiesResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataChangeJobSubmissionPrioritiesResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataChangeJobSubmissionPrioritiesResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataChangeJobSubmissionPrioritiesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataChangeJobSubmissionPrioritiesResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - DataMovementPriorityMap
type AiravataChangeDataMovementPrioritiesArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  DataMovementPriorityMap map[string]int32 `thrift:"dataMovementPriorityMap,2,required" db:"dataMovementPriorityMap" json:"dataMovementPriorityMap"`
}

func NewAiravataChangeDataMovementPrioritiesArgs() *AiravataChangeDataMovementPrioritiesArgs {
  return &AiravataChangeDataMovementPrioritiesArgs{}
}

var AiravataChangeDataMovementPrioritiesArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataChangeDataMovementPrioritiesArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataChangeDataMovementPrioritiesArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataChangeDataMovementPrioritiesArgs) GetDataMovementPriorityMap() map[string]int32 {
  return p.DataMovementPriorityMap
}
func (p *AiravataChangeDataMovementPrioritiesArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataChangeDataMovementPrioritiesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetDataMovementPriorityMap bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetDataMovementPriorityMap = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetDataMovementPriorityMap{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DataMovementPriorityMap is not set"));
  }
  return nil
}

func (p *AiravataChangeDataMovementPrioritiesArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataChangeDataMovementPrioritiesArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]int32, size)
  p.DataMovementPriorityMap =  tMap
  for i := 0; i < size; i ++ {
var _key379 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key379 = v
}
var _val380 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val380 = v
}
    p.DataMovementPriorityMap[_key379] = _val380
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AiravataChangeDataMovementPrioritiesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("changeDataMovementPriorities_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataChangeDataMovementPrioritiesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataChangeDataMovementPrioritiesArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dataMovementPriorityMap", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dataMovementPriorityMap: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(p.DataMovementPriorityMap)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.DataMovementPriorityMap {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dataMovementPriorityMap: ", p), err) }
  return err
}

func (p *AiravataChangeDataMovementPrioritiesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataChangeDataMovementPrioritiesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataChangeDataMovementPrioritiesResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataChangeDataMovementPrioritiesResult() *AiravataChangeDataMovementPrioritiesResult {
  return &AiravataChangeDataMovementPrioritiesResult{}
}

var AiravataChangeDataMovementPrioritiesResult_Success_DEFAULT bool
func (p *AiravataChangeDataMovementPrioritiesResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataChangeDataMovementPrioritiesResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataChangeDataMovementPrioritiesResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataChangeDataMovementPrioritiesResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataChangeDataMovementPrioritiesResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataChangeDataMovementPrioritiesResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataChangeDataMovementPrioritiesResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataChangeDataMovementPrioritiesResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataChangeDataMovementPrioritiesResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataChangeDataMovementPrioritiesResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataChangeDataMovementPrioritiesResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataChangeDataMovementPrioritiesResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataChangeDataMovementPrioritiesResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataChangeDataMovementPrioritiesResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataChangeDataMovementPrioritiesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataChangeDataMovementPrioritiesResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataChangeDataMovementPrioritiesResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataChangeDataMovementPrioritiesResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataChangeDataMovementPrioritiesResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataChangeDataMovementPrioritiesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataChangeDataMovementPrioritiesResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataChangeDataMovementPrioritiesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataChangeDataMovementPrioritiesResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataChangeDataMovementPrioritiesResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataChangeDataMovementPrioritiesResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataChangeDataMovementPrioritiesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("changeDataMovementPriorities_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataChangeDataMovementPrioritiesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataChangeDataMovementPrioritiesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataChangeDataMovementPrioritiesResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataChangeDataMovementPrioritiesResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataChangeDataMovementPrioritiesResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataChangeDataMovementPrioritiesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataChangeDataMovementPrioritiesResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - ComputeResourceId
//  - JobSubmissionInterfaceId
type AiravataDeleteJobSubmissionInterfaceArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  ComputeResourceId string `thrift:"computeResourceId,2,required" db:"computeResourceId" json:"computeResourceId"`
  JobSubmissionInterfaceId string `thrift:"jobSubmissionInterfaceId,3,required" db:"jobSubmissionInterfaceId" json:"jobSubmissionInterfaceId"`
}

func NewAiravataDeleteJobSubmissionInterfaceArgs() *AiravataDeleteJobSubmissionInterfaceArgs {
  return &AiravataDeleteJobSubmissionInterfaceArgs{}
}

var AiravataDeleteJobSubmissionInterfaceArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataDeleteJobSubmissionInterfaceArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataDeleteJobSubmissionInterfaceArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataDeleteJobSubmissionInterfaceArgs) GetComputeResourceId() string {
  return p.ComputeResourceId
}

func (p *AiravataDeleteJobSubmissionInterfaceArgs) GetJobSubmissionInterfaceId() string {
  return p.JobSubmissionInterfaceId
}
func (p *AiravataDeleteJobSubmissionInterfaceArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataDeleteJobSubmissionInterfaceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetComputeResourceId bool = false;
  var issetJobSubmissionInterfaceId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetComputeResourceId = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetJobSubmissionInterfaceId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetComputeResourceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ComputeResourceId is not set"));
  }
  if !issetJobSubmissionInterfaceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field JobSubmissionInterfaceId is not set"));
  }
  return nil
}

func (p *AiravataDeleteJobSubmissionInterfaceArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataDeleteJobSubmissionInterfaceArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ComputeResourceId = v
}
  return nil
}

func (p *AiravataDeleteJobSubmissionInterfaceArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.JobSubmissionInterfaceId = v
}
  return nil
}

func (p *AiravataDeleteJobSubmissionInterfaceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteJobSubmissionInterface_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeleteJobSubmissionInterfaceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataDeleteJobSubmissionInterfaceArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("computeResourceId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:computeResourceId: ", p), err) }
  if err := oprot.WriteString(string(p.ComputeResourceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.computeResourceId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:computeResourceId: ", p), err) }
  return err
}

func (p *AiravataDeleteJobSubmissionInterfaceArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("jobSubmissionInterfaceId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:jobSubmissionInterfaceId: ", p), err) }
  if err := oprot.WriteString(string(p.JobSubmissionInterfaceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.jobSubmissionInterfaceId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:jobSubmissionInterfaceId: ", p), err) }
  return err
}

func (p *AiravataDeleteJobSubmissionInterfaceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeleteJobSubmissionInterfaceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataDeleteJobSubmissionInterfaceResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataDeleteJobSubmissionInterfaceResult() *AiravataDeleteJobSubmissionInterfaceResult {
  return &AiravataDeleteJobSubmissionInterfaceResult{}
}

var AiravataDeleteJobSubmissionInterfaceResult_Success_DEFAULT bool
func (p *AiravataDeleteJobSubmissionInterfaceResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataDeleteJobSubmissionInterfaceResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataDeleteJobSubmissionInterfaceResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataDeleteJobSubmissionInterfaceResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataDeleteJobSubmissionInterfaceResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataDeleteJobSubmissionInterfaceResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataDeleteJobSubmissionInterfaceResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataDeleteJobSubmissionInterfaceResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataDeleteJobSubmissionInterfaceResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataDeleteJobSubmissionInterfaceResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataDeleteJobSubmissionInterfaceResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataDeleteJobSubmissionInterfaceResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataDeleteJobSubmissionInterfaceResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataDeleteJobSubmissionInterfaceResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataDeleteJobSubmissionInterfaceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataDeleteJobSubmissionInterfaceResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataDeleteJobSubmissionInterfaceResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataDeleteJobSubmissionInterfaceResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataDeleteJobSubmissionInterfaceResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataDeleteJobSubmissionInterfaceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataDeleteJobSubmissionInterfaceResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataDeleteJobSubmissionInterfaceResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataDeleteJobSubmissionInterfaceResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataDeleteJobSubmissionInterfaceResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataDeleteJobSubmissionInterfaceResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataDeleteJobSubmissionInterfaceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteJobSubmissionInterface_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeleteJobSubmissionInterfaceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteJobSubmissionInterfaceResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteJobSubmissionInterfaceResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteJobSubmissionInterfaceResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteJobSubmissionInterfaceResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteJobSubmissionInterfaceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeleteJobSubmissionInterfaceResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - ProductUri
//  - DataMovementInterfaceId
//  - DataMoveType
type AiravataDeleteDataMovementInterfaceArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  ProductUri string `thrift:"productUri,2,required" db:"productUri" json:"productUri"`
  DataMovementInterfaceId string `thrift:"dataMovementInterfaceId,3,required" db:"dataMovementInterfaceId" json:"dataMovementInterfaceId"`
  DataMoveType data_movement_models.DMType `thrift:"dataMoveType,4,required" db:"dataMoveType" json:"dataMoveType"`
}

func NewAiravataDeleteDataMovementInterfaceArgs() *AiravataDeleteDataMovementInterfaceArgs {
  return &AiravataDeleteDataMovementInterfaceArgs{}
}

var AiravataDeleteDataMovementInterfaceArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataDeleteDataMovementInterfaceArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataDeleteDataMovementInterfaceArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataDeleteDataMovementInterfaceArgs) GetProductUri() string {
  return p.ProductUri
}

func (p *AiravataDeleteDataMovementInterfaceArgs) GetDataMovementInterfaceId() string {
  return p.DataMovementInterfaceId
}

func (p *AiravataDeleteDataMovementInterfaceArgs) GetDataMoveType() data_movement_models.DMType {
  return p.DataMoveType
}
func (p *AiravataDeleteDataMovementInterfaceArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataDeleteDataMovementInterfaceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetProductUri bool = false;
  var issetDataMovementInterfaceId bool = false;
  var issetDataMoveType bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProductUri = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetDataMovementInterfaceId = true
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetDataMoveType = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetProductUri{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProductUri is not set"));
  }
  if !issetDataMovementInterfaceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DataMovementInterfaceId is not set"));
  }
  if !issetDataMoveType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DataMoveType is not set"));
  }
  return nil
}

func (p *AiravataDeleteDataMovementInterfaceArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataDeleteDataMovementInterfaceArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ProductUri = v
}
  return nil
}

func (p *AiravataDeleteDataMovementInterfaceArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DataMovementInterfaceId = v
}
  return nil
}

func (p *AiravataDeleteDataMovementInterfaceArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := data_movement_models.DMType(v)
  p.DataMoveType = temp
}
  return nil
}

func (p *AiravataDeleteDataMovementInterfaceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteDataMovementInterface_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeleteDataMovementInterfaceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataDeleteDataMovementInterfaceArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("productUri", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:productUri: ", p), err) }
  if err := oprot.WriteString(string(p.ProductUri)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.productUri (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:productUri: ", p), err) }
  return err
}

func (p *AiravataDeleteDataMovementInterfaceArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dataMovementInterfaceId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dataMovementInterfaceId: ", p), err) }
  if err := oprot.WriteString(string(p.DataMovementInterfaceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dataMovementInterfaceId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dataMovementInterfaceId: ", p), err) }
  return err
}

func (p *AiravataDeleteDataMovementInterfaceArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dataMoveType", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:dataMoveType: ", p), err) }
  if err := oprot.WriteI32(int32(p.DataMoveType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dataMoveType (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:dataMoveType: ", p), err) }
  return err
}

func (p *AiravataDeleteDataMovementInterfaceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeleteDataMovementInterfaceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataDeleteDataMovementInterfaceResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataDeleteDataMovementInterfaceResult() *AiravataDeleteDataMovementInterfaceResult {
  return &AiravataDeleteDataMovementInterfaceResult{}
}

var AiravataDeleteDataMovementInterfaceResult_Success_DEFAULT bool
func (p *AiravataDeleteDataMovementInterfaceResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataDeleteDataMovementInterfaceResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataDeleteDataMovementInterfaceResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataDeleteDataMovementInterfaceResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataDeleteDataMovementInterfaceResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataDeleteDataMovementInterfaceResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataDeleteDataMovementInterfaceResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataDeleteDataMovementInterfaceResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataDeleteDataMovementInterfaceResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataDeleteDataMovementInterfaceResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataDeleteDataMovementInterfaceResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataDeleteDataMovementInterfaceResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataDeleteDataMovementInterfaceResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataDeleteDataMovementInterfaceResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataDeleteDataMovementInterfaceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataDeleteDataMovementInterfaceResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataDeleteDataMovementInterfaceResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataDeleteDataMovementInterfaceResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataDeleteDataMovementInterfaceResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataDeleteDataMovementInterfaceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataDeleteDataMovementInterfaceResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataDeleteDataMovementInterfaceResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataDeleteDataMovementInterfaceResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataDeleteDataMovementInterfaceResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataDeleteDataMovementInterfaceResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataDeleteDataMovementInterfaceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteDataMovementInterface_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeleteDataMovementInterfaceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteDataMovementInterfaceResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteDataMovementInterfaceResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteDataMovementInterfaceResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteDataMovementInterfaceResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteDataMovementInterfaceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeleteDataMovementInterfaceResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - ResourceJobManager
type AiravataRegisterResourceJobManagerArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  ResourceJobManager *compute_resource_model.ResourceJobManager `thrift:"resourceJobManager,2,required" db:"resourceJobManager" json:"resourceJobManager"`
}

func NewAiravataRegisterResourceJobManagerArgs() *AiravataRegisterResourceJobManagerArgs {
  return &AiravataRegisterResourceJobManagerArgs{}
}

var AiravataRegisterResourceJobManagerArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataRegisterResourceJobManagerArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataRegisterResourceJobManagerArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}
var AiravataRegisterResourceJobManagerArgs_ResourceJobManager_DEFAULT *compute_resource_model.ResourceJobManager
func (p *AiravataRegisterResourceJobManagerArgs) GetResourceJobManager() *compute_resource_model.ResourceJobManager {
  if !p.IsSetResourceJobManager() {
    return AiravataRegisterResourceJobManagerArgs_ResourceJobManager_DEFAULT
  }
return p.ResourceJobManager
}
func (p *AiravataRegisterResourceJobManagerArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataRegisterResourceJobManagerArgs) IsSetResourceJobManager() bool {
  return p.ResourceJobManager != nil
}

func (p *AiravataRegisterResourceJobManagerArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetResourceJobManager bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetResourceJobManager = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetResourceJobManager{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ResourceJobManager is not set"));
  }
  return nil
}

func (p *AiravataRegisterResourceJobManagerArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataRegisterResourceJobManagerArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.ResourceJobManager = &compute_resource_model.ResourceJobManager{
  ResourceJobManagerId: "DO_NOT_SET_AT_CLIENTS",
}
  if err := p.ResourceJobManager.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ResourceJobManager), err)
  }
  return nil
}

func (p *AiravataRegisterResourceJobManagerArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerResourceJobManager_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataRegisterResourceJobManagerArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataRegisterResourceJobManagerArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resourceJobManager", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resourceJobManager: ", p), err) }
  if err := p.ResourceJobManager.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ResourceJobManager), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resourceJobManager: ", p), err) }
  return err
}

func (p *AiravataRegisterResourceJobManagerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataRegisterResourceJobManagerArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataRegisterResourceJobManagerResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataRegisterResourceJobManagerResult() *AiravataRegisterResourceJobManagerResult {
  return &AiravataRegisterResourceJobManagerResult{}
}

var AiravataRegisterResourceJobManagerResult_Success_DEFAULT string
func (p *AiravataRegisterResourceJobManagerResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return AiravataRegisterResourceJobManagerResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataRegisterResourceJobManagerResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataRegisterResourceJobManagerResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataRegisterResourceJobManagerResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataRegisterResourceJobManagerResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataRegisterResourceJobManagerResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataRegisterResourceJobManagerResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataRegisterResourceJobManagerResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataRegisterResourceJobManagerResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataRegisterResourceJobManagerResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataRegisterResourceJobManagerResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataRegisterResourceJobManagerResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataRegisterResourceJobManagerResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataRegisterResourceJobManagerResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataRegisterResourceJobManagerResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataRegisterResourceJobManagerResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataRegisterResourceJobManagerResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataRegisterResourceJobManagerResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataRegisterResourceJobManagerResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataRegisterResourceJobManagerResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataRegisterResourceJobManagerResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataRegisterResourceJobManagerResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataRegisterResourceJobManagerResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataRegisterResourceJobManagerResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataRegisterResourceJobManagerResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerResourceJobManager_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataRegisterResourceJobManagerResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterResourceJobManagerResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterResourceJobManagerResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterResourceJobManagerResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterResourceJobManagerResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterResourceJobManagerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataRegisterResourceJobManagerResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - ResourceJobManagerId
//  - UpdatedResourceJobManager
type AiravataUpdateResourceJobManagerArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  ResourceJobManagerId string `thrift:"resourceJobManagerId,2,required" db:"resourceJobManagerId" json:"resourceJobManagerId"`
  UpdatedResourceJobManager *compute_resource_model.ResourceJobManager `thrift:"updatedResourceJobManager,3,required" db:"updatedResourceJobManager" json:"updatedResourceJobManager"`
}

func NewAiravataUpdateResourceJobManagerArgs() *AiravataUpdateResourceJobManagerArgs {
  return &AiravataUpdateResourceJobManagerArgs{}
}

var AiravataUpdateResourceJobManagerArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataUpdateResourceJobManagerArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataUpdateResourceJobManagerArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataUpdateResourceJobManagerArgs) GetResourceJobManagerId() string {
  return p.ResourceJobManagerId
}
var AiravataUpdateResourceJobManagerArgs_UpdatedResourceJobManager_DEFAULT *compute_resource_model.ResourceJobManager
func (p *AiravataUpdateResourceJobManagerArgs) GetUpdatedResourceJobManager() *compute_resource_model.ResourceJobManager {
  if !p.IsSetUpdatedResourceJobManager() {
    return AiravataUpdateResourceJobManagerArgs_UpdatedResourceJobManager_DEFAULT
  }
return p.UpdatedResourceJobManager
}
func (p *AiravataUpdateResourceJobManagerArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataUpdateResourceJobManagerArgs) IsSetUpdatedResourceJobManager() bool {
  return p.UpdatedResourceJobManager != nil
}

func (p *AiravataUpdateResourceJobManagerArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetResourceJobManagerId bool = false;
  var issetUpdatedResourceJobManager bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetResourceJobManagerId = true
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUpdatedResourceJobManager = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetResourceJobManagerId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ResourceJobManagerId is not set"));
  }
  if !issetUpdatedResourceJobManager{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UpdatedResourceJobManager is not set"));
  }
  return nil
}

func (p *AiravataUpdateResourceJobManagerArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataUpdateResourceJobManagerArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ResourceJobManagerId = v
}
  return nil
}

func (p *AiravataUpdateResourceJobManagerArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.UpdatedResourceJobManager = &compute_resource_model.ResourceJobManager{
  ResourceJobManagerId: "DO_NOT_SET_AT_CLIENTS",
}
  if err := p.UpdatedResourceJobManager.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UpdatedResourceJobManager), err)
  }
  return nil
}

func (p *AiravataUpdateResourceJobManagerArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateResourceJobManager_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateResourceJobManagerArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataUpdateResourceJobManagerArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resourceJobManagerId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resourceJobManagerId: ", p), err) }
  if err := oprot.WriteString(string(p.ResourceJobManagerId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resourceJobManagerId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resourceJobManagerId: ", p), err) }
  return err
}

func (p *AiravataUpdateResourceJobManagerArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updatedResourceJobManager", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:updatedResourceJobManager: ", p), err) }
  if err := p.UpdatedResourceJobManager.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UpdatedResourceJobManager), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:updatedResourceJobManager: ", p), err) }
  return err
}

func (p *AiravataUpdateResourceJobManagerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateResourceJobManagerArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataUpdateResourceJobManagerResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataUpdateResourceJobManagerResult() *AiravataUpdateResourceJobManagerResult {
  return &AiravataUpdateResourceJobManagerResult{}
}

var AiravataUpdateResourceJobManagerResult_Success_DEFAULT bool
func (p *AiravataUpdateResourceJobManagerResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataUpdateResourceJobManagerResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataUpdateResourceJobManagerResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataUpdateResourceJobManagerResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataUpdateResourceJobManagerResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataUpdateResourceJobManagerResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataUpdateResourceJobManagerResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataUpdateResourceJobManagerResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataUpdateResourceJobManagerResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataUpdateResourceJobManagerResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataUpdateResourceJobManagerResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataUpdateResourceJobManagerResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataUpdateResourceJobManagerResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataUpdateResourceJobManagerResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataUpdateResourceJobManagerResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataUpdateResourceJobManagerResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataUpdateResourceJobManagerResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataUpdateResourceJobManagerResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataUpdateResourceJobManagerResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataUpdateResourceJobManagerResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataUpdateResourceJobManagerResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataUpdateResourceJobManagerResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataUpdateResourceJobManagerResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataUpdateResourceJobManagerResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataUpdateResourceJobManagerResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataUpdateResourceJobManagerResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateResourceJobManager_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateResourceJobManagerResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateResourceJobManagerResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateResourceJobManagerResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateResourceJobManagerResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateResourceJobManagerResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateResourceJobManagerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateResourceJobManagerResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - ResourceJobManagerId
type AiravataGetResourceJobManagerArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  ResourceJobManagerId string `thrift:"resourceJobManagerId,2,required" db:"resourceJobManagerId" json:"resourceJobManagerId"`
}

func NewAiravataGetResourceJobManagerArgs() *AiravataGetResourceJobManagerArgs {
  return &AiravataGetResourceJobManagerArgs{}
}

var AiravataGetResourceJobManagerArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetResourceJobManagerArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetResourceJobManagerArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetResourceJobManagerArgs) GetResourceJobManagerId() string {
  return p.ResourceJobManagerId
}
func (p *AiravataGetResourceJobManagerArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetResourceJobManagerArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetResourceJobManagerId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetResourceJobManagerId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetResourceJobManagerId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ResourceJobManagerId is not set"));
  }
  return nil
}

func (p *AiravataGetResourceJobManagerArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetResourceJobManagerArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ResourceJobManagerId = v
}
  return nil
}

func (p *AiravataGetResourceJobManagerArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getResourceJobManager_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetResourceJobManagerArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetResourceJobManagerArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resourceJobManagerId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resourceJobManagerId: ", p), err) }
  if err := oprot.WriteString(string(p.ResourceJobManagerId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resourceJobManagerId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resourceJobManagerId: ", p), err) }
  return err
}

func (p *AiravataGetResourceJobManagerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetResourceJobManagerArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetResourceJobManagerResult struct {
  Success *compute_resource_model.ResourceJobManager `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetResourceJobManagerResult() *AiravataGetResourceJobManagerResult {
  return &AiravataGetResourceJobManagerResult{}
}

var AiravataGetResourceJobManagerResult_Success_DEFAULT *compute_resource_model.ResourceJobManager
func (p *AiravataGetResourceJobManagerResult) GetSuccess() *compute_resource_model.ResourceJobManager {
  if !p.IsSetSuccess() {
    return AiravataGetResourceJobManagerResult_Success_DEFAULT
  }
return p.Success
}
var AiravataGetResourceJobManagerResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetResourceJobManagerResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetResourceJobManagerResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetResourceJobManagerResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetResourceJobManagerResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetResourceJobManagerResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetResourceJobManagerResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetResourceJobManagerResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetResourceJobManagerResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetResourceJobManagerResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetResourceJobManagerResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetResourceJobManagerResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetResourceJobManagerResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetResourceJobManagerResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetResourceJobManagerResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetResourceJobManagerResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetResourceJobManagerResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetResourceJobManagerResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetResourceJobManagerResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &compute_resource_model.ResourceJobManager{
  ResourceJobManagerId: "DO_NOT_SET_AT_CLIENTS",
}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AiravataGetResourceJobManagerResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetResourceJobManagerResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetResourceJobManagerResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetResourceJobManagerResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetResourceJobManagerResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getResourceJobManager_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetResourceJobManagerResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetResourceJobManagerResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetResourceJobManagerResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetResourceJobManagerResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetResourceJobManagerResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetResourceJobManagerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetResourceJobManagerResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - ResourceJobManagerId
type AiravataDeleteResourceJobManagerArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  ResourceJobManagerId string `thrift:"resourceJobManagerId,2,required" db:"resourceJobManagerId" json:"resourceJobManagerId"`
}

func NewAiravataDeleteResourceJobManagerArgs() *AiravataDeleteResourceJobManagerArgs {
  return &AiravataDeleteResourceJobManagerArgs{}
}

var AiravataDeleteResourceJobManagerArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataDeleteResourceJobManagerArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataDeleteResourceJobManagerArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataDeleteResourceJobManagerArgs) GetResourceJobManagerId() string {
  return p.ResourceJobManagerId
}
func (p *AiravataDeleteResourceJobManagerArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataDeleteResourceJobManagerArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetResourceJobManagerId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetResourceJobManagerId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetResourceJobManagerId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ResourceJobManagerId is not set"));
  }
  return nil
}

func (p *AiravataDeleteResourceJobManagerArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataDeleteResourceJobManagerArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ResourceJobManagerId = v
}
  return nil
}

func (p *AiravataDeleteResourceJobManagerArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteResourceJobManager_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeleteResourceJobManagerArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataDeleteResourceJobManagerArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resourceJobManagerId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resourceJobManagerId: ", p), err) }
  if err := oprot.WriteString(string(p.ResourceJobManagerId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resourceJobManagerId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resourceJobManagerId: ", p), err) }
  return err
}

func (p *AiravataDeleteResourceJobManagerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeleteResourceJobManagerArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataDeleteResourceJobManagerResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataDeleteResourceJobManagerResult() *AiravataDeleteResourceJobManagerResult {
  return &AiravataDeleteResourceJobManagerResult{}
}

var AiravataDeleteResourceJobManagerResult_Success_DEFAULT bool
func (p *AiravataDeleteResourceJobManagerResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataDeleteResourceJobManagerResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataDeleteResourceJobManagerResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataDeleteResourceJobManagerResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataDeleteResourceJobManagerResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataDeleteResourceJobManagerResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataDeleteResourceJobManagerResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataDeleteResourceJobManagerResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataDeleteResourceJobManagerResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataDeleteResourceJobManagerResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataDeleteResourceJobManagerResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataDeleteResourceJobManagerResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataDeleteResourceJobManagerResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataDeleteResourceJobManagerResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataDeleteResourceJobManagerResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataDeleteResourceJobManagerResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataDeleteResourceJobManagerResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataDeleteResourceJobManagerResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataDeleteResourceJobManagerResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataDeleteResourceJobManagerResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataDeleteResourceJobManagerResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataDeleteResourceJobManagerResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataDeleteResourceJobManagerResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataDeleteResourceJobManagerResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataDeleteResourceJobManagerResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataDeleteResourceJobManagerResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteResourceJobManager_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeleteResourceJobManagerResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteResourceJobManagerResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteResourceJobManagerResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteResourceJobManagerResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteResourceJobManagerResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteResourceJobManagerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeleteResourceJobManagerResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - ComputeResourceId
//  - QueueName
type AiravataDeleteBatchQueueArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  ComputeResourceId string `thrift:"computeResourceId,2,required" db:"computeResourceId" json:"computeResourceId"`
  QueueName string `thrift:"queueName,3,required" db:"queueName" json:"queueName"`
}

func NewAiravataDeleteBatchQueueArgs() *AiravataDeleteBatchQueueArgs {
  return &AiravataDeleteBatchQueueArgs{}
}

var AiravataDeleteBatchQueueArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataDeleteBatchQueueArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataDeleteBatchQueueArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataDeleteBatchQueueArgs) GetComputeResourceId() string {
  return p.ComputeResourceId
}

func (p *AiravataDeleteBatchQueueArgs) GetQueueName() string {
  return p.QueueName
}
func (p *AiravataDeleteBatchQueueArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataDeleteBatchQueueArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetComputeResourceId bool = false;
  var issetQueueName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetComputeResourceId = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetQueueName = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetComputeResourceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ComputeResourceId is not set"));
  }
  if !issetQueueName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field QueueName is not set"));
  }
  return nil
}

func (p *AiravataDeleteBatchQueueArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataDeleteBatchQueueArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ComputeResourceId = v
}
  return nil
}

func (p *AiravataDeleteBatchQueueArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.QueueName = v
}
  return nil
}

func (p *AiravataDeleteBatchQueueArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteBatchQueue_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeleteBatchQueueArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataDeleteBatchQueueArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("computeResourceId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:computeResourceId: ", p), err) }
  if err := oprot.WriteString(string(p.ComputeResourceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.computeResourceId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:computeResourceId: ", p), err) }
  return err
}

func (p *AiravataDeleteBatchQueueArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:queueName: ", p), err) }
  if err := oprot.WriteString(string(p.QueueName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.queueName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:queueName: ", p), err) }
  return err
}

func (p *AiravataDeleteBatchQueueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeleteBatchQueueArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataDeleteBatchQueueResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataDeleteBatchQueueResult() *AiravataDeleteBatchQueueResult {
  return &AiravataDeleteBatchQueueResult{}
}

var AiravataDeleteBatchQueueResult_Success_DEFAULT bool
func (p *AiravataDeleteBatchQueueResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataDeleteBatchQueueResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataDeleteBatchQueueResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataDeleteBatchQueueResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataDeleteBatchQueueResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataDeleteBatchQueueResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataDeleteBatchQueueResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataDeleteBatchQueueResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataDeleteBatchQueueResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataDeleteBatchQueueResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataDeleteBatchQueueResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataDeleteBatchQueueResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataDeleteBatchQueueResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataDeleteBatchQueueResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataDeleteBatchQueueResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataDeleteBatchQueueResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataDeleteBatchQueueResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataDeleteBatchQueueResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataDeleteBatchQueueResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataDeleteBatchQueueResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataDeleteBatchQueueResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataDeleteBatchQueueResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataDeleteBatchQueueResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataDeleteBatchQueueResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataDeleteBatchQueueResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataDeleteBatchQueueResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteBatchQueue_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeleteBatchQueueResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteBatchQueueResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteBatchQueueResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteBatchQueueResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteBatchQueueResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteBatchQueueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeleteBatchQueueResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GatewayResourceProfile
type AiravataRegisterGatewayResourceProfileArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GatewayResourceProfile *gateway_resource_profile_model.GatewayResourceProfile `thrift:"gatewayResourceProfile,2,required" db:"gatewayResourceProfile" json:"gatewayResourceProfile"`
}

func NewAiravataRegisterGatewayResourceProfileArgs() *AiravataRegisterGatewayResourceProfileArgs {
  return &AiravataRegisterGatewayResourceProfileArgs{}
}

var AiravataRegisterGatewayResourceProfileArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataRegisterGatewayResourceProfileArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataRegisterGatewayResourceProfileArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}
var AiravataRegisterGatewayResourceProfileArgs_GatewayResourceProfile_DEFAULT *gateway_resource_profile_model.GatewayResourceProfile
func (p *AiravataRegisterGatewayResourceProfileArgs) GetGatewayResourceProfile() *gateway_resource_profile_model.GatewayResourceProfile {
  if !p.IsSetGatewayResourceProfile() {
    return AiravataRegisterGatewayResourceProfileArgs_GatewayResourceProfile_DEFAULT
  }
return p.GatewayResourceProfile
}
func (p *AiravataRegisterGatewayResourceProfileArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataRegisterGatewayResourceProfileArgs) IsSetGatewayResourceProfile() bool {
  return p.GatewayResourceProfile != nil
}

func (p *AiravataRegisterGatewayResourceProfileArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGatewayResourceProfile bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayResourceProfile = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGatewayResourceProfile{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayResourceProfile is not set"));
  }
  return nil
}

func (p *AiravataRegisterGatewayResourceProfileArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataRegisterGatewayResourceProfileArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.GatewayResourceProfile = &gateway_resource_profile_model.GatewayResourceProfile{}
  if err := p.GatewayResourceProfile.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GatewayResourceProfile), err)
  }
  return nil
}

func (p *AiravataRegisterGatewayResourceProfileArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerGatewayResourceProfile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataRegisterGatewayResourceProfileArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataRegisterGatewayResourceProfileArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayResourceProfile", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayResourceProfile: ", p), err) }
  if err := p.GatewayResourceProfile.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GatewayResourceProfile), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayResourceProfile: ", p), err) }
  return err
}

func (p *AiravataRegisterGatewayResourceProfileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataRegisterGatewayResourceProfileArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataRegisterGatewayResourceProfileResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataRegisterGatewayResourceProfileResult() *AiravataRegisterGatewayResourceProfileResult {
  return &AiravataRegisterGatewayResourceProfileResult{}
}

var AiravataRegisterGatewayResourceProfileResult_Success_DEFAULT string
func (p *AiravataRegisterGatewayResourceProfileResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return AiravataRegisterGatewayResourceProfileResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataRegisterGatewayResourceProfileResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataRegisterGatewayResourceProfileResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataRegisterGatewayResourceProfileResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataRegisterGatewayResourceProfileResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataRegisterGatewayResourceProfileResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataRegisterGatewayResourceProfileResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataRegisterGatewayResourceProfileResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataRegisterGatewayResourceProfileResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataRegisterGatewayResourceProfileResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataRegisterGatewayResourceProfileResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataRegisterGatewayResourceProfileResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataRegisterGatewayResourceProfileResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataRegisterGatewayResourceProfileResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataRegisterGatewayResourceProfileResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataRegisterGatewayResourceProfileResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataRegisterGatewayResourceProfileResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataRegisterGatewayResourceProfileResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataRegisterGatewayResourceProfileResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataRegisterGatewayResourceProfileResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataRegisterGatewayResourceProfileResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataRegisterGatewayResourceProfileResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataRegisterGatewayResourceProfileResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataRegisterGatewayResourceProfileResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataRegisterGatewayResourceProfileResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerGatewayResourceProfile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataRegisterGatewayResourceProfileResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterGatewayResourceProfileResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterGatewayResourceProfileResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterGatewayResourceProfileResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterGatewayResourceProfileResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterGatewayResourceProfileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataRegisterGatewayResourceProfileResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GatewayID
type AiravataGetGatewayResourceProfileArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GatewayID string `thrift:"gatewayID,2,required" db:"gatewayID" json:"gatewayID"`
}

func NewAiravataGetGatewayResourceProfileArgs() *AiravataGetGatewayResourceProfileArgs {
  return &AiravataGetGatewayResourceProfileArgs{}
}

var AiravataGetGatewayResourceProfileArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetGatewayResourceProfileArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetGatewayResourceProfileArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetGatewayResourceProfileArgs) GetGatewayID() string {
  return p.GatewayID
}
func (p *AiravataGetGatewayResourceProfileArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetGatewayResourceProfileArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGatewayID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayID = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGatewayID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayID is not set"));
  }
  return nil
}

func (p *AiravataGetGatewayResourceProfileArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetGatewayResourceProfileArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayID = v
}
  return nil
}

func (p *AiravataGetGatewayResourceProfileArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getGatewayResourceProfile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetGatewayResourceProfileArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetGatewayResourceProfileArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayID", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayID: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayID: ", p), err) }
  return err
}

func (p *AiravataGetGatewayResourceProfileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetGatewayResourceProfileArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetGatewayResourceProfileResult struct {
  Success *gateway_resource_profile_model.GatewayResourceProfile `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetGatewayResourceProfileResult() *AiravataGetGatewayResourceProfileResult {
  return &AiravataGetGatewayResourceProfileResult{}
}

var AiravataGetGatewayResourceProfileResult_Success_DEFAULT *gateway_resource_profile_model.GatewayResourceProfile
func (p *AiravataGetGatewayResourceProfileResult) GetSuccess() *gateway_resource_profile_model.GatewayResourceProfile {
  if !p.IsSetSuccess() {
    return AiravataGetGatewayResourceProfileResult_Success_DEFAULT
  }
return p.Success
}
var AiravataGetGatewayResourceProfileResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetGatewayResourceProfileResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetGatewayResourceProfileResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetGatewayResourceProfileResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetGatewayResourceProfileResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetGatewayResourceProfileResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetGatewayResourceProfileResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetGatewayResourceProfileResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetGatewayResourceProfileResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetGatewayResourceProfileResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetGatewayResourceProfileResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetGatewayResourceProfileResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetGatewayResourceProfileResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetGatewayResourceProfileResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetGatewayResourceProfileResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetGatewayResourceProfileResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetGatewayResourceProfileResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetGatewayResourceProfileResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetGatewayResourceProfileResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &gateway_resource_profile_model.GatewayResourceProfile{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AiravataGetGatewayResourceProfileResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetGatewayResourceProfileResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetGatewayResourceProfileResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetGatewayResourceProfileResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetGatewayResourceProfileResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getGatewayResourceProfile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetGatewayResourceProfileResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetGatewayResourceProfileResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetGatewayResourceProfileResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetGatewayResourceProfileResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetGatewayResourceProfileResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetGatewayResourceProfileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetGatewayResourceProfileResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GatewayID
//  - GatewayResourceProfile
type AiravataUpdateGatewayResourceProfileArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GatewayID string `thrift:"gatewayID,2,required" db:"gatewayID" json:"gatewayID"`
  GatewayResourceProfile *gateway_resource_profile_model.GatewayResourceProfile `thrift:"gatewayResourceProfile,3,required" db:"gatewayResourceProfile" json:"gatewayResourceProfile"`
}

func NewAiravataUpdateGatewayResourceProfileArgs() *AiravataUpdateGatewayResourceProfileArgs {
  return &AiravataUpdateGatewayResourceProfileArgs{}
}

var AiravataUpdateGatewayResourceProfileArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataUpdateGatewayResourceProfileArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataUpdateGatewayResourceProfileArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataUpdateGatewayResourceProfileArgs) GetGatewayID() string {
  return p.GatewayID
}
var AiravataUpdateGatewayResourceProfileArgs_GatewayResourceProfile_DEFAULT *gateway_resource_profile_model.GatewayResourceProfile
func (p *AiravataUpdateGatewayResourceProfileArgs) GetGatewayResourceProfile() *gateway_resource_profile_model.GatewayResourceProfile {
  if !p.IsSetGatewayResourceProfile() {
    return AiravataUpdateGatewayResourceProfileArgs_GatewayResourceProfile_DEFAULT
  }
return p.GatewayResourceProfile
}
func (p *AiravataUpdateGatewayResourceProfileArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataUpdateGatewayResourceProfileArgs) IsSetGatewayResourceProfile() bool {
  return p.GatewayResourceProfile != nil
}

func (p *AiravataUpdateGatewayResourceProfileArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGatewayID bool = false;
  var issetGatewayResourceProfile bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayID = true
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayResourceProfile = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGatewayID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayID is not set"));
  }
  if !issetGatewayResourceProfile{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayResourceProfile is not set"));
  }
  return nil
}

func (p *AiravataUpdateGatewayResourceProfileArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataUpdateGatewayResourceProfileArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayID = v
}
  return nil
}

func (p *AiravataUpdateGatewayResourceProfileArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.GatewayResourceProfile = &gateway_resource_profile_model.GatewayResourceProfile{}
  if err := p.GatewayResourceProfile.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GatewayResourceProfile), err)
  }
  return nil
}

func (p *AiravataUpdateGatewayResourceProfileArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateGatewayResourceProfile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateGatewayResourceProfileArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataUpdateGatewayResourceProfileArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayID", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayID: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayID: ", p), err) }
  return err
}

func (p *AiravataUpdateGatewayResourceProfileArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayResourceProfile", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gatewayResourceProfile: ", p), err) }
  if err := p.GatewayResourceProfile.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GatewayResourceProfile), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gatewayResourceProfile: ", p), err) }
  return err
}

func (p *AiravataUpdateGatewayResourceProfileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateGatewayResourceProfileArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataUpdateGatewayResourceProfileResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataUpdateGatewayResourceProfileResult() *AiravataUpdateGatewayResourceProfileResult {
  return &AiravataUpdateGatewayResourceProfileResult{}
}

var AiravataUpdateGatewayResourceProfileResult_Success_DEFAULT bool
func (p *AiravataUpdateGatewayResourceProfileResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataUpdateGatewayResourceProfileResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataUpdateGatewayResourceProfileResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataUpdateGatewayResourceProfileResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataUpdateGatewayResourceProfileResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataUpdateGatewayResourceProfileResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataUpdateGatewayResourceProfileResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataUpdateGatewayResourceProfileResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataUpdateGatewayResourceProfileResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataUpdateGatewayResourceProfileResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataUpdateGatewayResourceProfileResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataUpdateGatewayResourceProfileResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataUpdateGatewayResourceProfileResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataUpdateGatewayResourceProfileResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataUpdateGatewayResourceProfileResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataUpdateGatewayResourceProfileResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataUpdateGatewayResourceProfileResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataUpdateGatewayResourceProfileResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataUpdateGatewayResourceProfileResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataUpdateGatewayResourceProfileResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataUpdateGatewayResourceProfileResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataUpdateGatewayResourceProfileResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataUpdateGatewayResourceProfileResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataUpdateGatewayResourceProfileResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataUpdateGatewayResourceProfileResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataUpdateGatewayResourceProfileResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateGatewayResourceProfile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateGatewayResourceProfileResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateGatewayResourceProfileResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateGatewayResourceProfileResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateGatewayResourceProfileResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateGatewayResourceProfileResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateGatewayResourceProfileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateGatewayResourceProfileResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GatewayID
type AiravataDeleteGatewayResourceProfileArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GatewayID string `thrift:"gatewayID,2,required" db:"gatewayID" json:"gatewayID"`
}

func NewAiravataDeleteGatewayResourceProfileArgs() *AiravataDeleteGatewayResourceProfileArgs {
  return &AiravataDeleteGatewayResourceProfileArgs{}
}

var AiravataDeleteGatewayResourceProfileArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataDeleteGatewayResourceProfileArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataDeleteGatewayResourceProfileArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataDeleteGatewayResourceProfileArgs) GetGatewayID() string {
  return p.GatewayID
}
func (p *AiravataDeleteGatewayResourceProfileArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataDeleteGatewayResourceProfileArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGatewayID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayID = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGatewayID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayID is not set"));
  }
  return nil
}

func (p *AiravataDeleteGatewayResourceProfileArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataDeleteGatewayResourceProfileArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayID = v
}
  return nil
}

func (p *AiravataDeleteGatewayResourceProfileArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteGatewayResourceProfile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeleteGatewayResourceProfileArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataDeleteGatewayResourceProfileArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayID", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayID: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayID: ", p), err) }
  return err
}

func (p *AiravataDeleteGatewayResourceProfileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeleteGatewayResourceProfileArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataDeleteGatewayResourceProfileResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataDeleteGatewayResourceProfileResult() *AiravataDeleteGatewayResourceProfileResult {
  return &AiravataDeleteGatewayResourceProfileResult{}
}

var AiravataDeleteGatewayResourceProfileResult_Success_DEFAULT bool
func (p *AiravataDeleteGatewayResourceProfileResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataDeleteGatewayResourceProfileResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataDeleteGatewayResourceProfileResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataDeleteGatewayResourceProfileResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataDeleteGatewayResourceProfileResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataDeleteGatewayResourceProfileResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataDeleteGatewayResourceProfileResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataDeleteGatewayResourceProfileResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataDeleteGatewayResourceProfileResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataDeleteGatewayResourceProfileResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataDeleteGatewayResourceProfileResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataDeleteGatewayResourceProfileResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataDeleteGatewayResourceProfileResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataDeleteGatewayResourceProfileResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataDeleteGatewayResourceProfileResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataDeleteGatewayResourceProfileResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataDeleteGatewayResourceProfileResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataDeleteGatewayResourceProfileResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataDeleteGatewayResourceProfileResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataDeleteGatewayResourceProfileResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataDeleteGatewayResourceProfileResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataDeleteGatewayResourceProfileResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataDeleteGatewayResourceProfileResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataDeleteGatewayResourceProfileResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataDeleteGatewayResourceProfileResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataDeleteGatewayResourceProfileResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteGatewayResourceProfile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeleteGatewayResourceProfileResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteGatewayResourceProfileResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteGatewayResourceProfileResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteGatewayResourceProfileResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteGatewayResourceProfileResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteGatewayResourceProfileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeleteGatewayResourceProfileResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GatewayID
//  - ComputeResourceId
//  - ComputeResourcePreference
type AiravataAddGatewayComputeResourcePreferenceArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GatewayID string `thrift:"gatewayID,2,required" db:"gatewayID" json:"gatewayID"`
  ComputeResourceId string `thrift:"computeResourceId,3,required" db:"computeResourceId" json:"computeResourceId"`
  ComputeResourcePreference *gateway_resource_profile_model.ComputeResourcePreference `thrift:"computeResourcePreference,4,required" db:"computeResourcePreference" json:"computeResourcePreference"`
}

func NewAiravataAddGatewayComputeResourcePreferenceArgs() *AiravataAddGatewayComputeResourcePreferenceArgs {
  return &AiravataAddGatewayComputeResourcePreferenceArgs{}
}

var AiravataAddGatewayComputeResourcePreferenceArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataAddGatewayComputeResourcePreferenceArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataAddGatewayComputeResourcePreferenceArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataAddGatewayComputeResourcePreferenceArgs) GetGatewayID() string {
  return p.GatewayID
}

func (p *AiravataAddGatewayComputeResourcePreferenceArgs) GetComputeResourceId() string {
  return p.ComputeResourceId
}
var AiravataAddGatewayComputeResourcePreferenceArgs_ComputeResourcePreference_DEFAULT *gateway_resource_profile_model.ComputeResourcePreference
func (p *AiravataAddGatewayComputeResourcePreferenceArgs) GetComputeResourcePreference() *gateway_resource_profile_model.ComputeResourcePreference {
  if !p.IsSetComputeResourcePreference() {
    return AiravataAddGatewayComputeResourcePreferenceArgs_ComputeResourcePreference_DEFAULT
  }
return p.ComputeResourcePreference
}
func (p *AiravataAddGatewayComputeResourcePreferenceArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataAddGatewayComputeResourcePreferenceArgs) IsSetComputeResourcePreference() bool {
  return p.ComputeResourcePreference != nil
}

func (p *AiravataAddGatewayComputeResourcePreferenceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGatewayID bool = false;
  var issetComputeResourceId bool = false;
  var issetComputeResourcePreference bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayID = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetComputeResourceId = true
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetComputeResourcePreference = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGatewayID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayID is not set"));
  }
  if !issetComputeResourceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ComputeResourceId is not set"));
  }
  if !issetComputeResourcePreference{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ComputeResourcePreference is not set"));
  }
  return nil
}

func (p *AiravataAddGatewayComputeResourcePreferenceArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataAddGatewayComputeResourcePreferenceArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayID = v
}
  return nil
}

func (p *AiravataAddGatewayComputeResourcePreferenceArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ComputeResourceId = v
}
  return nil
}

func (p *AiravataAddGatewayComputeResourcePreferenceArgs)  ReadField4(iprot thrift.TProtocol) error {
  p.ComputeResourcePreference = &gateway_resource_profile_model.ComputeResourcePreference{
  OverridebyAiravata: true,
}
  if err := p.ComputeResourcePreference.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ComputeResourcePreference), err)
  }
  return nil
}

func (p *AiravataAddGatewayComputeResourcePreferenceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addGatewayComputeResourcePreference_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataAddGatewayComputeResourcePreferenceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataAddGatewayComputeResourcePreferenceArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayID", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayID: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayID: ", p), err) }
  return err
}

func (p *AiravataAddGatewayComputeResourcePreferenceArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("computeResourceId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:computeResourceId: ", p), err) }
  if err := oprot.WriteString(string(p.ComputeResourceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.computeResourceId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:computeResourceId: ", p), err) }
  return err
}

func (p *AiravataAddGatewayComputeResourcePreferenceArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("computeResourcePreference", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:computeResourcePreference: ", p), err) }
  if err := p.ComputeResourcePreference.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ComputeResourcePreference), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:computeResourcePreference: ", p), err) }
  return err
}

func (p *AiravataAddGatewayComputeResourcePreferenceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataAddGatewayComputeResourcePreferenceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataAddGatewayComputeResourcePreferenceResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataAddGatewayComputeResourcePreferenceResult() *AiravataAddGatewayComputeResourcePreferenceResult {
  return &AiravataAddGatewayComputeResourcePreferenceResult{}
}

var AiravataAddGatewayComputeResourcePreferenceResult_Success_DEFAULT bool
func (p *AiravataAddGatewayComputeResourcePreferenceResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataAddGatewayComputeResourcePreferenceResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataAddGatewayComputeResourcePreferenceResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataAddGatewayComputeResourcePreferenceResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataAddGatewayComputeResourcePreferenceResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataAddGatewayComputeResourcePreferenceResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataAddGatewayComputeResourcePreferenceResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataAddGatewayComputeResourcePreferenceResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataAddGatewayComputeResourcePreferenceResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataAddGatewayComputeResourcePreferenceResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataAddGatewayComputeResourcePreferenceResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataAddGatewayComputeResourcePreferenceResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataAddGatewayComputeResourcePreferenceResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataAddGatewayComputeResourcePreferenceResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataAddGatewayComputeResourcePreferenceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataAddGatewayComputeResourcePreferenceResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataAddGatewayComputeResourcePreferenceResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataAddGatewayComputeResourcePreferenceResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataAddGatewayComputeResourcePreferenceResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataAddGatewayComputeResourcePreferenceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataAddGatewayComputeResourcePreferenceResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataAddGatewayComputeResourcePreferenceResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataAddGatewayComputeResourcePreferenceResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataAddGatewayComputeResourcePreferenceResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataAddGatewayComputeResourcePreferenceResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataAddGatewayComputeResourcePreferenceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addGatewayComputeResourcePreference_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataAddGatewayComputeResourcePreferenceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataAddGatewayComputeResourcePreferenceResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataAddGatewayComputeResourcePreferenceResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataAddGatewayComputeResourcePreferenceResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataAddGatewayComputeResourcePreferenceResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataAddGatewayComputeResourcePreferenceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataAddGatewayComputeResourcePreferenceResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GatewayID
//  - StorageResourceId
//  - StoragePreference
type AiravataAddGatewayStoragePreferenceArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GatewayID string `thrift:"gatewayID,2,required" db:"gatewayID" json:"gatewayID"`
  StorageResourceId string `thrift:"storageResourceId,3,required" db:"storageResourceId" json:"storageResourceId"`
  StoragePreference *gateway_resource_profile_model.StoragePreference `thrift:"storagePreference,4,required" db:"storagePreference" json:"storagePreference"`
}

func NewAiravataAddGatewayStoragePreferenceArgs() *AiravataAddGatewayStoragePreferenceArgs {
  return &AiravataAddGatewayStoragePreferenceArgs{}
}

var AiravataAddGatewayStoragePreferenceArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataAddGatewayStoragePreferenceArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataAddGatewayStoragePreferenceArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataAddGatewayStoragePreferenceArgs) GetGatewayID() string {
  return p.GatewayID
}

func (p *AiravataAddGatewayStoragePreferenceArgs) GetStorageResourceId() string {
  return p.StorageResourceId
}
var AiravataAddGatewayStoragePreferenceArgs_StoragePreference_DEFAULT *gateway_resource_profile_model.StoragePreference
func (p *AiravataAddGatewayStoragePreferenceArgs) GetStoragePreference() *gateway_resource_profile_model.StoragePreference {
  if !p.IsSetStoragePreference() {
    return AiravataAddGatewayStoragePreferenceArgs_StoragePreference_DEFAULT
  }
return p.StoragePreference
}
func (p *AiravataAddGatewayStoragePreferenceArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataAddGatewayStoragePreferenceArgs) IsSetStoragePreference() bool {
  return p.StoragePreference != nil
}

func (p *AiravataAddGatewayStoragePreferenceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGatewayID bool = false;
  var issetStorageResourceId bool = false;
  var issetStoragePreference bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayID = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStorageResourceId = true
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStoragePreference = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGatewayID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayID is not set"));
  }
  if !issetStorageResourceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StorageResourceId is not set"));
  }
  if !issetStoragePreference{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StoragePreference is not set"));
  }
  return nil
}

func (p *AiravataAddGatewayStoragePreferenceArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataAddGatewayStoragePreferenceArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayID = v
}
  return nil
}

func (p *AiravataAddGatewayStoragePreferenceArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.StorageResourceId = v
}
  return nil
}

func (p *AiravataAddGatewayStoragePreferenceArgs)  ReadField4(iprot thrift.TProtocol) error {
  p.StoragePreference = &gateway_resource_profile_model.StoragePreference{}
  if err := p.StoragePreference.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StoragePreference), err)
  }
  return nil
}

func (p *AiravataAddGatewayStoragePreferenceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addGatewayStoragePreference_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataAddGatewayStoragePreferenceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataAddGatewayStoragePreferenceArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayID", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayID: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayID: ", p), err) }
  return err
}

func (p *AiravataAddGatewayStoragePreferenceArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("storageResourceId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:storageResourceId: ", p), err) }
  if err := oprot.WriteString(string(p.StorageResourceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.storageResourceId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:storageResourceId: ", p), err) }
  return err
}

func (p *AiravataAddGatewayStoragePreferenceArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("storagePreference", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:storagePreference: ", p), err) }
  if err := p.StoragePreference.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StoragePreference), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:storagePreference: ", p), err) }
  return err
}

func (p *AiravataAddGatewayStoragePreferenceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataAddGatewayStoragePreferenceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataAddGatewayStoragePreferenceResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataAddGatewayStoragePreferenceResult() *AiravataAddGatewayStoragePreferenceResult {
  return &AiravataAddGatewayStoragePreferenceResult{}
}

var AiravataAddGatewayStoragePreferenceResult_Success_DEFAULT bool
func (p *AiravataAddGatewayStoragePreferenceResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataAddGatewayStoragePreferenceResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataAddGatewayStoragePreferenceResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataAddGatewayStoragePreferenceResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataAddGatewayStoragePreferenceResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataAddGatewayStoragePreferenceResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataAddGatewayStoragePreferenceResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataAddGatewayStoragePreferenceResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataAddGatewayStoragePreferenceResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataAddGatewayStoragePreferenceResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataAddGatewayStoragePreferenceResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataAddGatewayStoragePreferenceResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataAddGatewayStoragePreferenceResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataAddGatewayStoragePreferenceResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataAddGatewayStoragePreferenceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataAddGatewayStoragePreferenceResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataAddGatewayStoragePreferenceResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataAddGatewayStoragePreferenceResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataAddGatewayStoragePreferenceResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataAddGatewayStoragePreferenceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataAddGatewayStoragePreferenceResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataAddGatewayStoragePreferenceResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataAddGatewayStoragePreferenceResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataAddGatewayStoragePreferenceResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataAddGatewayStoragePreferenceResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataAddGatewayStoragePreferenceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addGatewayStoragePreference_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataAddGatewayStoragePreferenceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataAddGatewayStoragePreferenceResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataAddGatewayStoragePreferenceResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataAddGatewayStoragePreferenceResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataAddGatewayStoragePreferenceResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataAddGatewayStoragePreferenceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataAddGatewayStoragePreferenceResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GatewayID
//  - ComputeResourceId
type AiravataGetGatewayComputeResourcePreferenceArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GatewayID string `thrift:"gatewayID,2,required" db:"gatewayID" json:"gatewayID"`
  ComputeResourceId string `thrift:"computeResourceId,3,required" db:"computeResourceId" json:"computeResourceId"`
}

func NewAiravataGetGatewayComputeResourcePreferenceArgs() *AiravataGetGatewayComputeResourcePreferenceArgs {
  return &AiravataGetGatewayComputeResourcePreferenceArgs{}
}

var AiravataGetGatewayComputeResourcePreferenceArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetGatewayComputeResourcePreferenceArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetGatewayComputeResourcePreferenceArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetGatewayComputeResourcePreferenceArgs) GetGatewayID() string {
  return p.GatewayID
}

func (p *AiravataGetGatewayComputeResourcePreferenceArgs) GetComputeResourceId() string {
  return p.ComputeResourceId
}
func (p *AiravataGetGatewayComputeResourcePreferenceArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetGatewayComputeResourcePreferenceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGatewayID bool = false;
  var issetComputeResourceId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayID = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetComputeResourceId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGatewayID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayID is not set"));
  }
  if !issetComputeResourceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ComputeResourceId is not set"));
  }
  return nil
}

func (p *AiravataGetGatewayComputeResourcePreferenceArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetGatewayComputeResourcePreferenceArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayID = v
}
  return nil
}

func (p *AiravataGetGatewayComputeResourcePreferenceArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ComputeResourceId = v
}
  return nil
}

func (p *AiravataGetGatewayComputeResourcePreferenceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getGatewayComputeResourcePreference_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetGatewayComputeResourcePreferenceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetGatewayComputeResourcePreferenceArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayID", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayID: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayID: ", p), err) }
  return err
}

func (p *AiravataGetGatewayComputeResourcePreferenceArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("computeResourceId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:computeResourceId: ", p), err) }
  if err := oprot.WriteString(string(p.ComputeResourceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.computeResourceId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:computeResourceId: ", p), err) }
  return err
}

func (p *AiravataGetGatewayComputeResourcePreferenceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetGatewayComputeResourcePreferenceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetGatewayComputeResourcePreferenceResult struct {
  Success *gateway_resource_profile_model.ComputeResourcePreference `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetGatewayComputeResourcePreferenceResult() *AiravataGetGatewayComputeResourcePreferenceResult {
  return &AiravataGetGatewayComputeResourcePreferenceResult{}
}

var AiravataGetGatewayComputeResourcePreferenceResult_Success_DEFAULT *gateway_resource_profile_model.ComputeResourcePreference
func (p *AiravataGetGatewayComputeResourcePreferenceResult) GetSuccess() *gateway_resource_profile_model.ComputeResourcePreference {
  if !p.IsSetSuccess() {
    return AiravataGetGatewayComputeResourcePreferenceResult_Success_DEFAULT
  }
return p.Success
}
var AiravataGetGatewayComputeResourcePreferenceResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetGatewayComputeResourcePreferenceResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetGatewayComputeResourcePreferenceResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetGatewayComputeResourcePreferenceResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetGatewayComputeResourcePreferenceResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetGatewayComputeResourcePreferenceResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetGatewayComputeResourcePreferenceResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetGatewayComputeResourcePreferenceResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetGatewayComputeResourcePreferenceResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetGatewayComputeResourcePreferenceResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetGatewayComputeResourcePreferenceResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetGatewayComputeResourcePreferenceResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetGatewayComputeResourcePreferenceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetGatewayComputeResourcePreferenceResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetGatewayComputeResourcePreferenceResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetGatewayComputeResourcePreferenceResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetGatewayComputeResourcePreferenceResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetGatewayComputeResourcePreferenceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetGatewayComputeResourcePreferenceResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &gateway_resource_profile_model.ComputeResourcePreference{
  OverridebyAiravata: true,
}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AiravataGetGatewayComputeResourcePreferenceResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetGatewayComputeResourcePreferenceResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetGatewayComputeResourcePreferenceResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetGatewayComputeResourcePreferenceResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetGatewayComputeResourcePreferenceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getGatewayComputeResourcePreference_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetGatewayComputeResourcePreferenceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetGatewayComputeResourcePreferenceResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetGatewayComputeResourcePreferenceResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetGatewayComputeResourcePreferenceResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetGatewayComputeResourcePreferenceResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetGatewayComputeResourcePreferenceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetGatewayComputeResourcePreferenceResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GatewayID
//  - StorageResourceId
type AiravataGetGatewayStoragePreferenceArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GatewayID string `thrift:"gatewayID,2,required" db:"gatewayID" json:"gatewayID"`
  StorageResourceId string `thrift:"storageResourceId,3,required" db:"storageResourceId" json:"storageResourceId"`
}

func NewAiravataGetGatewayStoragePreferenceArgs() *AiravataGetGatewayStoragePreferenceArgs {
  return &AiravataGetGatewayStoragePreferenceArgs{}
}

var AiravataGetGatewayStoragePreferenceArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetGatewayStoragePreferenceArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetGatewayStoragePreferenceArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetGatewayStoragePreferenceArgs) GetGatewayID() string {
  return p.GatewayID
}

func (p *AiravataGetGatewayStoragePreferenceArgs) GetStorageResourceId() string {
  return p.StorageResourceId
}
func (p *AiravataGetGatewayStoragePreferenceArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetGatewayStoragePreferenceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGatewayID bool = false;
  var issetStorageResourceId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayID = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStorageResourceId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGatewayID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayID is not set"));
  }
  if !issetStorageResourceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StorageResourceId is not set"));
  }
  return nil
}

func (p *AiravataGetGatewayStoragePreferenceArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetGatewayStoragePreferenceArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayID = v
}
  return nil
}

func (p *AiravataGetGatewayStoragePreferenceArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.StorageResourceId = v
}
  return nil
}

func (p *AiravataGetGatewayStoragePreferenceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getGatewayStoragePreference_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetGatewayStoragePreferenceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetGatewayStoragePreferenceArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayID", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayID: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayID: ", p), err) }
  return err
}

func (p *AiravataGetGatewayStoragePreferenceArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("storageResourceId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:storageResourceId: ", p), err) }
  if err := oprot.WriteString(string(p.StorageResourceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.storageResourceId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:storageResourceId: ", p), err) }
  return err
}

func (p *AiravataGetGatewayStoragePreferenceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetGatewayStoragePreferenceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetGatewayStoragePreferenceResult struct {
  Success *gateway_resource_profile_model.StoragePreference `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetGatewayStoragePreferenceResult() *AiravataGetGatewayStoragePreferenceResult {
  return &AiravataGetGatewayStoragePreferenceResult{}
}

var AiravataGetGatewayStoragePreferenceResult_Success_DEFAULT *gateway_resource_profile_model.StoragePreference
func (p *AiravataGetGatewayStoragePreferenceResult) GetSuccess() *gateway_resource_profile_model.StoragePreference {
  if !p.IsSetSuccess() {
    return AiravataGetGatewayStoragePreferenceResult_Success_DEFAULT
  }
return p.Success
}
var AiravataGetGatewayStoragePreferenceResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetGatewayStoragePreferenceResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetGatewayStoragePreferenceResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetGatewayStoragePreferenceResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetGatewayStoragePreferenceResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetGatewayStoragePreferenceResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetGatewayStoragePreferenceResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetGatewayStoragePreferenceResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetGatewayStoragePreferenceResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetGatewayStoragePreferenceResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetGatewayStoragePreferenceResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetGatewayStoragePreferenceResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetGatewayStoragePreferenceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetGatewayStoragePreferenceResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetGatewayStoragePreferenceResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetGatewayStoragePreferenceResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetGatewayStoragePreferenceResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetGatewayStoragePreferenceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetGatewayStoragePreferenceResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &gateway_resource_profile_model.StoragePreference{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AiravataGetGatewayStoragePreferenceResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetGatewayStoragePreferenceResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetGatewayStoragePreferenceResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetGatewayStoragePreferenceResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetGatewayStoragePreferenceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getGatewayStoragePreference_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetGatewayStoragePreferenceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetGatewayStoragePreferenceResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetGatewayStoragePreferenceResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetGatewayStoragePreferenceResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetGatewayStoragePreferenceResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetGatewayStoragePreferenceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetGatewayStoragePreferenceResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GatewayID
type AiravataGetAllGatewayComputeResourcePreferencesArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GatewayID string `thrift:"gatewayID,2,required" db:"gatewayID" json:"gatewayID"`
}

func NewAiravataGetAllGatewayComputeResourcePreferencesArgs() *AiravataGetAllGatewayComputeResourcePreferencesArgs {
  return &AiravataGetAllGatewayComputeResourcePreferencesArgs{}
}

var AiravataGetAllGatewayComputeResourcePreferencesArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetAllGatewayComputeResourcePreferencesArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetAllGatewayComputeResourcePreferencesArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetAllGatewayComputeResourcePreferencesArgs) GetGatewayID() string {
  return p.GatewayID
}
func (p *AiravataGetAllGatewayComputeResourcePreferencesArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetAllGatewayComputeResourcePreferencesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGatewayID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayID = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGatewayID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayID is not set"));
  }
  return nil
}

func (p *AiravataGetAllGatewayComputeResourcePreferencesArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetAllGatewayComputeResourcePreferencesArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayID = v
}
  return nil
}

func (p *AiravataGetAllGatewayComputeResourcePreferencesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllGatewayComputeResourcePreferences_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAllGatewayComputeResourcePreferencesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetAllGatewayComputeResourcePreferencesArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayID", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayID: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayID: ", p), err) }
  return err
}

func (p *AiravataGetAllGatewayComputeResourcePreferencesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAllGatewayComputeResourcePreferencesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetAllGatewayComputeResourcePreferencesResult struct {
  Success []*gateway_resource_profile_model.ComputeResourcePreference `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetAllGatewayComputeResourcePreferencesResult() *AiravataGetAllGatewayComputeResourcePreferencesResult {
  return &AiravataGetAllGatewayComputeResourcePreferencesResult{}
}

var AiravataGetAllGatewayComputeResourcePreferencesResult_Success_DEFAULT []*gateway_resource_profile_model.ComputeResourcePreference

func (p *AiravataGetAllGatewayComputeResourcePreferencesResult) GetSuccess() []*gateway_resource_profile_model.ComputeResourcePreference {
  return p.Success
}
var AiravataGetAllGatewayComputeResourcePreferencesResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetAllGatewayComputeResourcePreferencesResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetAllGatewayComputeResourcePreferencesResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetAllGatewayComputeResourcePreferencesResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetAllGatewayComputeResourcePreferencesResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetAllGatewayComputeResourcePreferencesResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetAllGatewayComputeResourcePreferencesResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetAllGatewayComputeResourcePreferencesResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetAllGatewayComputeResourcePreferencesResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetAllGatewayComputeResourcePreferencesResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetAllGatewayComputeResourcePreferencesResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetAllGatewayComputeResourcePreferencesResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetAllGatewayComputeResourcePreferencesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetAllGatewayComputeResourcePreferencesResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetAllGatewayComputeResourcePreferencesResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetAllGatewayComputeResourcePreferencesResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetAllGatewayComputeResourcePreferencesResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetAllGatewayComputeResourcePreferencesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetAllGatewayComputeResourcePreferencesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*gateway_resource_profile_model.ComputeResourcePreference, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem381 := &gateway_resource_profile_model.ComputeResourcePreference{
    OverridebyAiravata: true,
}
    if err := _elem381.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem381), err)
    }
    p.Success = append(p.Success, _elem381)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AiravataGetAllGatewayComputeResourcePreferencesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetAllGatewayComputeResourcePreferencesResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetAllGatewayComputeResourcePreferencesResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetAllGatewayComputeResourcePreferencesResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetAllGatewayComputeResourcePreferencesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllGatewayComputeResourcePreferences_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAllGatewayComputeResourcePreferencesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllGatewayComputeResourcePreferencesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllGatewayComputeResourcePreferencesResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllGatewayComputeResourcePreferencesResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllGatewayComputeResourcePreferencesResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllGatewayComputeResourcePreferencesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAllGatewayComputeResourcePreferencesResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GatewayID
type AiravataGetAllGatewayStoragePreferencesArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GatewayID string `thrift:"gatewayID,2,required" db:"gatewayID" json:"gatewayID"`
}

func NewAiravataGetAllGatewayStoragePreferencesArgs() *AiravataGetAllGatewayStoragePreferencesArgs {
  return &AiravataGetAllGatewayStoragePreferencesArgs{}
}

var AiravataGetAllGatewayStoragePreferencesArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetAllGatewayStoragePreferencesArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetAllGatewayStoragePreferencesArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetAllGatewayStoragePreferencesArgs) GetGatewayID() string {
  return p.GatewayID
}
func (p *AiravataGetAllGatewayStoragePreferencesArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetAllGatewayStoragePreferencesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGatewayID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayID = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGatewayID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayID is not set"));
  }
  return nil
}

func (p *AiravataGetAllGatewayStoragePreferencesArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetAllGatewayStoragePreferencesArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayID = v
}
  return nil
}

func (p *AiravataGetAllGatewayStoragePreferencesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllGatewayStoragePreferences_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAllGatewayStoragePreferencesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetAllGatewayStoragePreferencesArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayID", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayID: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayID: ", p), err) }
  return err
}

func (p *AiravataGetAllGatewayStoragePreferencesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAllGatewayStoragePreferencesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetAllGatewayStoragePreferencesResult struct {
  Success []*gateway_resource_profile_model.StoragePreference `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetAllGatewayStoragePreferencesResult() *AiravataGetAllGatewayStoragePreferencesResult {
  return &AiravataGetAllGatewayStoragePreferencesResult{}
}

var AiravataGetAllGatewayStoragePreferencesResult_Success_DEFAULT []*gateway_resource_profile_model.StoragePreference

func (p *AiravataGetAllGatewayStoragePreferencesResult) GetSuccess() []*gateway_resource_profile_model.StoragePreference {
  return p.Success
}
var AiravataGetAllGatewayStoragePreferencesResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetAllGatewayStoragePreferencesResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetAllGatewayStoragePreferencesResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetAllGatewayStoragePreferencesResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetAllGatewayStoragePreferencesResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetAllGatewayStoragePreferencesResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetAllGatewayStoragePreferencesResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetAllGatewayStoragePreferencesResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetAllGatewayStoragePreferencesResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetAllGatewayStoragePreferencesResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetAllGatewayStoragePreferencesResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetAllGatewayStoragePreferencesResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetAllGatewayStoragePreferencesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetAllGatewayStoragePreferencesResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetAllGatewayStoragePreferencesResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetAllGatewayStoragePreferencesResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetAllGatewayStoragePreferencesResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetAllGatewayStoragePreferencesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetAllGatewayStoragePreferencesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*gateway_resource_profile_model.StoragePreference, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem382 := &gateway_resource_profile_model.StoragePreference{}
    if err := _elem382.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem382), err)
    }
    p.Success = append(p.Success, _elem382)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AiravataGetAllGatewayStoragePreferencesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetAllGatewayStoragePreferencesResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetAllGatewayStoragePreferencesResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetAllGatewayStoragePreferencesResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetAllGatewayStoragePreferencesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllGatewayStoragePreferences_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAllGatewayStoragePreferencesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllGatewayStoragePreferencesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllGatewayStoragePreferencesResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllGatewayStoragePreferencesResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllGatewayStoragePreferencesResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllGatewayStoragePreferencesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAllGatewayStoragePreferencesResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
type AiravataGetAllGatewayResourceProfilesArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
}

func NewAiravataGetAllGatewayResourceProfilesArgs() *AiravataGetAllGatewayResourceProfilesArgs {
  return &AiravataGetAllGatewayResourceProfilesArgs{}
}

var AiravataGetAllGatewayResourceProfilesArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetAllGatewayResourceProfilesArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetAllGatewayResourceProfilesArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}
func (p *AiravataGetAllGatewayResourceProfilesArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetAllGatewayResourceProfilesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  return nil
}

func (p *AiravataGetAllGatewayResourceProfilesArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetAllGatewayResourceProfilesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllGatewayResourceProfiles_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAllGatewayResourceProfilesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetAllGatewayResourceProfilesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAllGatewayResourceProfilesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetAllGatewayResourceProfilesResult struct {
  Success []*gateway_resource_profile_model.GatewayResourceProfile `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetAllGatewayResourceProfilesResult() *AiravataGetAllGatewayResourceProfilesResult {
  return &AiravataGetAllGatewayResourceProfilesResult{}
}

var AiravataGetAllGatewayResourceProfilesResult_Success_DEFAULT []*gateway_resource_profile_model.GatewayResourceProfile

func (p *AiravataGetAllGatewayResourceProfilesResult) GetSuccess() []*gateway_resource_profile_model.GatewayResourceProfile {
  return p.Success
}
var AiravataGetAllGatewayResourceProfilesResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetAllGatewayResourceProfilesResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetAllGatewayResourceProfilesResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetAllGatewayResourceProfilesResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetAllGatewayResourceProfilesResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetAllGatewayResourceProfilesResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetAllGatewayResourceProfilesResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetAllGatewayResourceProfilesResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetAllGatewayResourceProfilesResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetAllGatewayResourceProfilesResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetAllGatewayResourceProfilesResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetAllGatewayResourceProfilesResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetAllGatewayResourceProfilesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetAllGatewayResourceProfilesResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetAllGatewayResourceProfilesResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetAllGatewayResourceProfilesResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetAllGatewayResourceProfilesResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetAllGatewayResourceProfilesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetAllGatewayResourceProfilesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*gateway_resource_profile_model.GatewayResourceProfile, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem383 := &gateway_resource_profile_model.GatewayResourceProfile{}
    if err := _elem383.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem383), err)
    }
    p.Success = append(p.Success, _elem383)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AiravataGetAllGatewayResourceProfilesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetAllGatewayResourceProfilesResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetAllGatewayResourceProfilesResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetAllGatewayResourceProfilesResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetAllGatewayResourceProfilesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllGatewayResourceProfiles_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAllGatewayResourceProfilesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllGatewayResourceProfilesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllGatewayResourceProfilesResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllGatewayResourceProfilesResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllGatewayResourceProfilesResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllGatewayResourceProfilesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAllGatewayResourceProfilesResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GatewayID
//  - ComputeResourceId
//  - ComputeResourcePreference
type AiravataUpdateGatewayComputeResourcePreferenceArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GatewayID string `thrift:"gatewayID,2,required" db:"gatewayID" json:"gatewayID"`
  ComputeResourceId string `thrift:"computeResourceId,3,required" db:"computeResourceId" json:"computeResourceId"`
  ComputeResourcePreference *gateway_resource_profile_model.ComputeResourcePreference `thrift:"computeResourcePreference,4,required" db:"computeResourcePreference" json:"computeResourcePreference"`
}

func NewAiravataUpdateGatewayComputeResourcePreferenceArgs() *AiravataUpdateGatewayComputeResourcePreferenceArgs {
  return &AiravataUpdateGatewayComputeResourcePreferenceArgs{}
}

var AiravataUpdateGatewayComputeResourcePreferenceArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataUpdateGatewayComputeResourcePreferenceArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataUpdateGatewayComputeResourcePreferenceArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataUpdateGatewayComputeResourcePreferenceArgs) GetGatewayID() string {
  return p.GatewayID
}

func (p *AiravataUpdateGatewayComputeResourcePreferenceArgs) GetComputeResourceId() string {
  return p.ComputeResourceId
}
var AiravataUpdateGatewayComputeResourcePreferenceArgs_ComputeResourcePreference_DEFAULT *gateway_resource_profile_model.ComputeResourcePreference
func (p *AiravataUpdateGatewayComputeResourcePreferenceArgs) GetComputeResourcePreference() *gateway_resource_profile_model.ComputeResourcePreference {
  if !p.IsSetComputeResourcePreference() {
    return AiravataUpdateGatewayComputeResourcePreferenceArgs_ComputeResourcePreference_DEFAULT
  }
return p.ComputeResourcePreference
}
func (p *AiravataUpdateGatewayComputeResourcePreferenceArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataUpdateGatewayComputeResourcePreferenceArgs) IsSetComputeResourcePreference() bool {
  return p.ComputeResourcePreference != nil
}

func (p *AiravataUpdateGatewayComputeResourcePreferenceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGatewayID bool = false;
  var issetComputeResourceId bool = false;
  var issetComputeResourcePreference bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayID = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetComputeResourceId = true
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetComputeResourcePreference = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGatewayID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayID is not set"));
  }
  if !issetComputeResourceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ComputeResourceId is not set"));
  }
  if !issetComputeResourcePreference{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ComputeResourcePreference is not set"));
  }
  return nil
}

func (p *AiravataUpdateGatewayComputeResourcePreferenceArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataUpdateGatewayComputeResourcePreferenceArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayID = v
}
  return nil
}

func (p *AiravataUpdateGatewayComputeResourcePreferenceArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ComputeResourceId = v
}
  return nil
}

func (p *AiravataUpdateGatewayComputeResourcePreferenceArgs)  ReadField4(iprot thrift.TProtocol) error {
  p.ComputeResourcePreference = &gateway_resource_profile_model.ComputeResourcePreference{
  OverridebyAiravata: true,
}
  if err := p.ComputeResourcePreference.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ComputeResourcePreference), err)
  }
  return nil
}

func (p *AiravataUpdateGatewayComputeResourcePreferenceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateGatewayComputeResourcePreference_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateGatewayComputeResourcePreferenceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataUpdateGatewayComputeResourcePreferenceArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayID", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayID: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayID: ", p), err) }
  return err
}

func (p *AiravataUpdateGatewayComputeResourcePreferenceArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("computeResourceId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:computeResourceId: ", p), err) }
  if err := oprot.WriteString(string(p.ComputeResourceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.computeResourceId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:computeResourceId: ", p), err) }
  return err
}

func (p *AiravataUpdateGatewayComputeResourcePreferenceArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("computeResourcePreference", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:computeResourcePreference: ", p), err) }
  if err := p.ComputeResourcePreference.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ComputeResourcePreference), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:computeResourcePreference: ", p), err) }
  return err
}

func (p *AiravataUpdateGatewayComputeResourcePreferenceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateGatewayComputeResourcePreferenceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataUpdateGatewayComputeResourcePreferenceResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataUpdateGatewayComputeResourcePreferenceResult() *AiravataUpdateGatewayComputeResourcePreferenceResult {
  return &AiravataUpdateGatewayComputeResourcePreferenceResult{}
}

var AiravataUpdateGatewayComputeResourcePreferenceResult_Success_DEFAULT bool
func (p *AiravataUpdateGatewayComputeResourcePreferenceResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataUpdateGatewayComputeResourcePreferenceResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataUpdateGatewayComputeResourcePreferenceResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataUpdateGatewayComputeResourcePreferenceResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataUpdateGatewayComputeResourcePreferenceResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataUpdateGatewayComputeResourcePreferenceResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataUpdateGatewayComputeResourcePreferenceResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataUpdateGatewayComputeResourcePreferenceResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataUpdateGatewayComputeResourcePreferenceResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataUpdateGatewayComputeResourcePreferenceResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataUpdateGatewayComputeResourcePreferenceResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataUpdateGatewayComputeResourcePreferenceResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataUpdateGatewayComputeResourcePreferenceResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataUpdateGatewayComputeResourcePreferenceResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataUpdateGatewayComputeResourcePreferenceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataUpdateGatewayComputeResourcePreferenceResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataUpdateGatewayComputeResourcePreferenceResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataUpdateGatewayComputeResourcePreferenceResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataUpdateGatewayComputeResourcePreferenceResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataUpdateGatewayComputeResourcePreferenceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataUpdateGatewayComputeResourcePreferenceResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataUpdateGatewayComputeResourcePreferenceResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataUpdateGatewayComputeResourcePreferenceResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataUpdateGatewayComputeResourcePreferenceResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataUpdateGatewayComputeResourcePreferenceResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataUpdateGatewayComputeResourcePreferenceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateGatewayComputeResourcePreference_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateGatewayComputeResourcePreferenceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateGatewayComputeResourcePreferenceResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateGatewayComputeResourcePreferenceResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateGatewayComputeResourcePreferenceResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateGatewayComputeResourcePreferenceResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateGatewayComputeResourcePreferenceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateGatewayComputeResourcePreferenceResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GatewayID
//  - StorageId
//  - StoragePreference
type AiravataUpdateGatewayStoragePreferenceArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GatewayID string `thrift:"gatewayID,2,required" db:"gatewayID" json:"gatewayID"`
  StorageId string `thrift:"storageId,3,required" db:"storageId" json:"storageId"`
  StoragePreference *gateway_resource_profile_model.StoragePreference `thrift:"storagePreference,4,required" db:"storagePreference" json:"storagePreference"`
}

func NewAiravataUpdateGatewayStoragePreferenceArgs() *AiravataUpdateGatewayStoragePreferenceArgs {
  return &AiravataUpdateGatewayStoragePreferenceArgs{}
}

var AiravataUpdateGatewayStoragePreferenceArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataUpdateGatewayStoragePreferenceArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataUpdateGatewayStoragePreferenceArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataUpdateGatewayStoragePreferenceArgs) GetGatewayID() string {
  return p.GatewayID
}

func (p *AiravataUpdateGatewayStoragePreferenceArgs) GetStorageId() string {
  return p.StorageId
}
var AiravataUpdateGatewayStoragePreferenceArgs_StoragePreference_DEFAULT *gateway_resource_profile_model.StoragePreference
func (p *AiravataUpdateGatewayStoragePreferenceArgs) GetStoragePreference() *gateway_resource_profile_model.StoragePreference {
  if !p.IsSetStoragePreference() {
    return AiravataUpdateGatewayStoragePreferenceArgs_StoragePreference_DEFAULT
  }
return p.StoragePreference
}
func (p *AiravataUpdateGatewayStoragePreferenceArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataUpdateGatewayStoragePreferenceArgs) IsSetStoragePreference() bool {
  return p.StoragePreference != nil
}

func (p *AiravataUpdateGatewayStoragePreferenceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGatewayID bool = false;
  var issetStorageId bool = false;
  var issetStoragePreference bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayID = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStorageId = true
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStoragePreference = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGatewayID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayID is not set"));
  }
  if !issetStorageId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StorageId is not set"));
  }
  if !issetStoragePreference{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StoragePreference is not set"));
  }
  return nil
}

func (p *AiravataUpdateGatewayStoragePreferenceArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataUpdateGatewayStoragePreferenceArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayID = v
}
  return nil
}

func (p *AiravataUpdateGatewayStoragePreferenceArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.StorageId = v
}
  return nil
}

func (p *AiravataUpdateGatewayStoragePreferenceArgs)  ReadField4(iprot thrift.TProtocol) error {
  p.StoragePreference = &gateway_resource_profile_model.StoragePreference{}
  if err := p.StoragePreference.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StoragePreference), err)
  }
  return nil
}

func (p *AiravataUpdateGatewayStoragePreferenceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateGatewayStoragePreference_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateGatewayStoragePreferenceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataUpdateGatewayStoragePreferenceArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayID", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayID: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayID: ", p), err) }
  return err
}

func (p *AiravataUpdateGatewayStoragePreferenceArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("storageId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:storageId: ", p), err) }
  if err := oprot.WriteString(string(p.StorageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.storageId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:storageId: ", p), err) }
  return err
}

func (p *AiravataUpdateGatewayStoragePreferenceArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("storagePreference", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:storagePreference: ", p), err) }
  if err := p.StoragePreference.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StoragePreference), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:storagePreference: ", p), err) }
  return err
}

func (p *AiravataUpdateGatewayStoragePreferenceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateGatewayStoragePreferenceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataUpdateGatewayStoragePreferenceResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataUpdateGatewayStoragePreferenceResult() *AiravataUpdateGatewayStoragePreferenceResult {
  return &AiravataUpdateGatewayStoragePreferenceResult{}
}

var AiravataUpdateGatewayStoragePreferenceResult_Success_DEFAULT bool
func (p *AiravataUpdateGatewayStoragePreferenceResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataUpdateGatewayStoragePreferenceResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataUpdateGatewayStoragePreferenceResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataUpdateGatewayStoragePreferenceResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataUpdateGatewayStoragePreferenceResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataUpdateGatewayStoragePreferenceResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataUpdateGatewayStoragePreferenceResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataUpdateGatewayStoragePreferenceResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataUpdateGatewayStoragePreferenceResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataUpdateGatewayStoragePreferenceResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataUpdateGatewayStoragePreferenceResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataUpdateGatewayStoragePreferenceResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataUpdateGatewayStoragePreferenceResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataUpdateGatewayStoragePreferenceResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataUpdateGatewayStoragePreferenceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataUpdateGatewayStoragePreferenceResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataUpdateGatewayStoragePreferenceResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataUpdateGatewayStoragePreferenceResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataUpdateGatewayStoragePreferenceResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataUpdateGatewayStoragePreferenceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataUpdateGatewayStoragePreferenceResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataUpdateGatewayStoragePreferenceResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataUpdateGatewayStoragePreferenceResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataUpdateGatewayStoragePreferenceResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataUpdateGatewayStoragePreferenceResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataUpdateGatewayStoragePreferenceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateGatewayStoragePreference_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateGatewayStoragePreferenceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateGatewayStoragePreferenceResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateGatewayStoragePreferenceResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateGatewayStoragePreferenceResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateGatewayStoragePreferenceResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateGatewayStoragePreferenceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateGatewayStoragePreferenceResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GatewayID
//  - ComputeResourceId
type AiravataDeleteGatewayComputeResourcePreferenceArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GatewayID string `thrift:"gatewayID,2,required" db:"gatewayID" json:"gatewayID"`
  ComputeResourceId string `thrift:"computeResourceId,3,required" db:"computeResourceId" json:"computeResourceId"`
}

func NewAiravataDeleteGatewayComputeResourcePreferenceArgs() *AiravataDeleteGatewayComputeResourcePreferenceArgs {
  return &AiravataDeleteGatewayComputeResourcePreferenceArgs{}
}

var AiravataDeleteGatewayComputeResourcePreferenceArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataDeleteGatewayComputeResourcePreferenceArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataDeleteGatewayComputeResourcePreferenceArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataDeleteGatewayComputeResourcePreferenceArgs) GetGatewayID() string {
  return p.GatewayID
}

func (p *AiravataDeleteGatewayComputeResourcePreferenceArgs) GetComputeResourceId() string {
  return p.ComputeResourceId
}
func (p *AiravataDeleteGatewayComputeResourcePreferenceArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataDeleteGatewayComputeResourcePreferenceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGatewayID bool = false;
  var issetComputeResourceId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayID = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetComputeResourceId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGatewayID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayID is not set"));
  }
  if !issetComputeResourceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ComputeResourceId is not set"));
  }
  return nil
}

func (p *AiravataDeleteGatewayComputeResourcePreferenceArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataDeleteGatewayComputeResourcePreferenceArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayID = v
}
  return nil
}

func (p *AiravataDeleteGatewayComputeResourcePreferenceArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ComputeResourceId = v
}
  return nil
}

func (p *AiravataDeleteGatewayComputeResourcePreferenceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteGatewayComputeResourcePreference_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeleteGatewayComputeResourcePreferenceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataDeleteGatewayComputeResourcePreferenceArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayID", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayID: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayID: ", p), err) }
  return err
}

func (p *AiravataDeleteGatewayComputeResourcePreferenceArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("computeResourceId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:computeResourceId: ", p), err) }
  if err := oprot.WriteString(string(p.ComputeResourceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.computeResourceId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:computeResourceId: ", p), err) }
  return err
}

func (p *AiravataDeleteGatewayComputeResourcePreferenceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeleteGatewayComputeResourcePreferenceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataDeleteGatewayComputeResourcePreferenceResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataDeleteGatewayComputeResourcePreferenceResult() *AiravataDeleteGatewayComputeResourcePreferenceResult {
  return &AiravataDeleteGatewayComputeResourcePreferenceResult{}
}

var AiravataDeleteGatewayComputeResourcePreferenceResult_Success_DEFAULT bool
func (p *AiravataDeleteGatewayComputeResourcePreferenceResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataDeleteGatewayComputeResourcePreferenceResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataDeleteGatewayComputeResourcePreferenceResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataDeleteGatewayComputeResourcePreferenceResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataDeleteGatewayComputeResourcePreferenceResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataDeleteGatewayComputeResourcePreferenceResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataDeleteGatewayComputeResourcePreferenceResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataDeleteGatewayComputeResourcePreferenceResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataDeleteGatewayComputeResourcePreferenceResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataDeleteGatewayComputeResourcePreferenceResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataDeleteGatewayComputeResourcePreferenceResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataDeleteGatewayComputeResourcePreferenceResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataDeleteGatewayComputeResourcePreferenceResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataDeleteGatewayComputeResourcePreferenceResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataDeleteGatewayComputeResourcePreferenceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataDeleteGatewayComputeResourcePreferenceResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataDeleteGatewayComputeResourcePreferenceResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataDeleteGatewayComputeResourcePreferenceResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataDeleteGatewayComputeResourcePreferenceResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataDeleteGatewayComputeResourcePreferenceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataDeleteGatewayComputeResourcePreferenceResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataDeleteGatewayComputeResourcePreferenceResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataDeleteGatewayComputeResourcePreferenceResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataDeleteGatewayComputeResourcePreferenceResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataDeleteGatewayComputeResourcePreferenceResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataDeleteGatewayComputeResourcePreferenceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteGatewayComputeResourcePreference_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeleteGatewayComputeResourcePreferenceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteGatewayComputeResourcePreferenceResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteGatewayComputeResourcePreferenceResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteGatewayComputeResourcePreferenceResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteGatewayComputeResourcePreferenceResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteGatewayComputeResourcePreferenceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeleteGatewayComputeResourcePreferenceResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GatewayID
//  - StorageId
type AiravataDeleteGatewayStoragePreferenceArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GatewayID string `thrift:"gatewayID,2,required" db:"gatewayID" json:"gatewayID"`
  StorageId string `thrift:"storageId,3,required" db:"storageId" json:"storageId"`
}

func NewAiravataDeleteGatewayStoragePreferenceArgs() *AiravataDeleteGatewayStoragePreferenceArgs {
  return &AiravataDeleteGatewayStoragePreferenceArgs{}
}

var AiravataDeleteGatewayStoragePreferenceArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataDeleteGatewayStoragePreferenceArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataDeleteGatewayStoragePreferenceArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataDeleteGatewayStoragePreferenceArgs) GetGatewayID() string {
  return p.GatewayID
}

func (p *AiravataDeleteGatewayStoragePreferenceArgs) GetStorageId() string {
  return p.StorageId
}
func (p *AiravataDeleteGatewayStoragePreferenceArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataDeleteGatewayStoragePreferenceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGatewayID bool = false;
  var issetStorageId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayID = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStorageId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGatewayID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayID is not set"));
  }
  if !issetStorageId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StorageId is not set"));
  }
  return nil
}

func (p *AiravataDeleteGatewayStoragePreferenceArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataDeleteGatewayStoragePreferenceArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayID = v
}
  return nil
}

func (p *AiravataDeleteGatewayStoragePreferenceArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.StorageId = v
}
  return nil
}

func (p *AiravataDeleteGatewayStoragePreferenceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteGatewayStoragePreference_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeleteGatewayStoragePreferenceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataDeleteGatewayStoragePreferenceArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayID", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayID: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayID: ", p), err) }
  return err
}

func (p *AiravataDeleteGatewayStoragePreferenceArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("storageId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:storageId: ", p), err) }
  if err := oprot.WriteString(string(p.StorageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.storageId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:storageId: ", p), err) }
  return err
}

func (p *AiravataDeleteGatewayStoragePreferenceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeleteGatewayStoragePreferenceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataDeleteGatewayStoragePreferenceResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataDeleteGatewayStoragePreferenceResult() *AiravataDeleteGatewayStoragePreferenceResult {
  return &AiravataDeleteGatewayStoragePreferenceResult{}
}

var AiravataDeleteGatewayStoragePreferenceResult_Success_DEFAULT bool
func (p *AiravataDeleteGatewayStoragePreferenceResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataDeleteGatewayStoragePreferenceResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataDeleteGatewayStoragePreferenceResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataDeleteGatewayStoragePreferenceResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataDeleteGatewayStoragePreferenceResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataDeleteGatewayStoragePreferenceResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataDeleteGatewayStoragePreferenceResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataDeleteGatewayStoragePreferenceResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataDeleteGatewayStoragePreferenceResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataDeleteGatewayStoragePreferenceResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataDeleteGatewayStoragePreferenceResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataDeleteGatewayStoragePreferenceResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataDeleteGatewayStoragePreferenceResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataDeleteGatewayStoragePreferenceResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataDeleteGatewayStoragePreferenceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataDeleteGatewayStoragePreferenceResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataDeleteGatewayStoragePreferenceResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataDeleteGatewayStoragePreferenceResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataDeleteGatewayStoragePreferenceResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataDeleteGatewayStoragePreferenceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataDeleteGatewayStoragePreferenceResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataDeleteGatewayStoragePreferenceResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataDeleteGatewayStoragePreferenceResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataDeleteGatewayStoragePreferenceResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataDeleteGatewayStoragePreferenceResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataDeleteGatewayStoragePreferenceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteGatewayStoragePreference_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeleteGatewayStoragePreferenceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteGatewayStoragePreferenceResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteGatewayStoragePreferenceResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteGatewayStoragePreferenceResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteGatewayStoragePreferenceResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteGatewayStoragePreferenceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeleteGatewayStoragePreferenceResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - UserResourceProfile
type AiravataRegisterUserResourceProfileArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  UserResourceProfile *user_resource_profile_model.UserResourceProfile `thrift:"userResourceProfile,2,required" db:"userResourceProfile" json:"userResourceProfile"`
}

func NewAiravataRegisterUserResourceProfileArgs() *AiravataRegisterUserResourceProfileArgs {
  return &AiravataRegisterUserResourceProfileArgs{}
}

var AiravataRegisterUserResourceProfileArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataRegisterUserResourceProfileArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataRegisterUserResourceProfileArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}
var AiravataRegisterUserResourceProfileArgs_UserResourceProfile_DEFAULT *user_resource_profile_model.UserResourceProfile
func (p *AiravataRegisterUserResourceProfileArgs) GetUserResourceProfile() *user_resource_profile_model.UserResourceProfile {
  if !p.IsSetUserResourceProfile() {
    return AiravataRegisterUserResourceProfileArgs_UserResourceProfile_DEFAULT
  }
return p.UserResourceProfile
}
func (p *AiravataRegisterUserResourceProfileArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataRegisterUserResourceProfileArgs) IsSetUserResourceProfile() bool {
  return p.UserResourceProfile != nil
}

func (p *AiravataRegisterUserResourceProfileArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetUserResourceProfile bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserResourceProfile = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetUserResourceProfile{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserResourceProfile is not set"));
  }
  return nil
}

func (p *AiravataRegisterUserResourceProfileArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataRegisterUserResourceProfileArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.UserResourceProfile = &user_resource_profile_model.UserResourceProfile{}
  if err := p.UserResourceProfile.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserResourceProfile), err)
  }
  return nil
}

func (p *AiravataRegisterUserResourceProfileArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerUserResourceProfile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataRegisterUserResourceProfileArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataRegisterUserResourceProfileArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userResourceProfile", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userResourceProfile: ", p), err) }
  if err := p.UserResourceProfile.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserResourceProfile), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userResourceProfile: ", p), err) }
  return err
}

func (p *AiravataRegisterUserResourceProfileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataRegisterUserResourceProfileArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataRegisterUserResourceProfileResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataRegisterUserResourceProfileResult() *AiravataRegisterUserResourceProfileResult {
  return &AiravataRegisterUserResourceProfileResult{}
}

var AiravataRegisterUserResourceProfileResult_Success_DEFAULT string
func (p *AiravataRegisterUserResourceProfileResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return AiravataRegisterUserResourceProfileResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataRegisterUserResourceProfileResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataRegisterUserResourceProfileResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataRegisterUserResourceProfileResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataRegisterUserResourceProfileResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataRegisterUserResourceProfileResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataRegisterUserResourceProfileResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataRegisterUserResourceProfileResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataRegisterUserResourceProfileResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataRegisterUserResourceProfileResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataRegisterUserResourceProfileResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataRegisterUserResourceProfileResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataRegisterUserResourceProfileResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataRegisterUserResourceProfileResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataRegisterUserResourceProfileResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataRegisterUserResourceProfileResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataRegisterUserResourceProfileResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataRegisterUserResourceProfileResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataRegisterUserResourceProfileResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataRegisterUserResourceProfileResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataRegisterUserResourceProfileResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataRegisterUserResourceProfileResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataRegisterUserResourceProfileResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataRegisterUserResourceProfileResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataRegisterUserResourceProfileResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerUserResourceProfile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataRegisterUserResourceProfileResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterUserResourceProfileResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterUserResourceProfileResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterUserResourceProfileResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterUserResourceProfileResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterUserResourceProfileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataRegisterUserResourceProfileResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - UserId
//  - GatewayID
type AiravataGetUserResourceProfileArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  UserId string `thrift:"userId,2,required" db:"userId" json:"userId"`
  GatewayID string `thrift:"gatewayID,3,required" db:"gatewayID" json:"gatewayID"`
}

func NewAiravataGetUserResourceProfileArgs() *AiravataGetUserResourceProfileArgs {
  return &AiravataGetUserResourceProfileArgs{}
}

var AiravataGetUserResourceProfileArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetUserResourceProfileArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetUserResourceProfileArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetUserResourceProfileArgs) GetUserId() string {
  return p.UserId
}

func (p *AiravataGetUserResourceProfileArgs) GetGatewayID() string {
  return p.GatewayID
}
func (p *AiravataGetUserResourceProfileArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetUserResourceProfileArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetUserId bool = false;
  var issetGatewayID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserId = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayID = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetUserId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserId is not set"));
  }
  if !issetGatewayID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayID is not set"));
  }
  return nil
}

func (p *AiravataGetUserResourceProfileArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetUserResourceProfileArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *AiravataGetUserResourceProfileArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.GatewayID = v
}
  return nil
}

func (p *AiravataGetUserResourceProfileArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUserResourceProfile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetUserResourceProfileArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetUserResourceProfileArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteString(string(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *AiravataGetUserResourceProfileArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayID", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gatewayID: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayID (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gatewayID: ", p), err) }
  return err
}

func (p *AiravataGetUserResourceProfileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetUserResourceProfileArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetUserResourceProfileResult struct {
  Success *user_resource_profile_model.UserResourceProfile `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetUserResourceProfileResult() *AiravataGetUserResourceProfileResult {
  return &AiravataGetUserResourceProfileResult{}
}

var AiravataGetUserResourceProfileResult_Success_DEFAULT *user_resource_profile_model.UserResourceProfile
func (p *AiravataGetUserResourceProfileResult) GetSuccess() *user_resource_profile_model.UserResourceProfile {
  if !p.IsSetSuccess() {
    return AiravataGetUserResourceProfileResult_Success_DEFAULT
  }
return p.Success
}
var AiravataGetUserResourceProfileResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetUserResourceProfileResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetUserResourceProfileResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetUserResourceProfileResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetUserResourceProfileResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetUserResourceProfileResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetUserResourceProfileResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetUserResourceProfileResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetUserResourceProfileResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetUserResourceProfileResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetUserResourceProfileResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetUserResourceProfileResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetUserResourceProfileResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetUserResourceProfileResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetUserResourceProfileResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetUserResourceProfileResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetUserResourceProfileResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetUserResourceProfileResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetUserResourceProfileResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &user_resource_profile_model.UserResourceProfile{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AiravataGetUserResourceProfileResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetUserResourceProfileResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetUserResourceProfileResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetUserResourceProfileResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetUserResourceProfileResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUserResourceProfile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetUserResourceProfileResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetUserResourceProfileResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetUserResourceProfileResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetUserResourceProfileResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetUserResourceProfileResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetUserResourceProfileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetUserResourceProfileResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - UserId
//  - GatewayID
//  - UserResourceProfile
type AiravataUpdateUserResourceProfileArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  UserId string `thrift:"userId,2,required" db:"userId" json:"userId"`
  GatewayID string `thrift:"gatewayID,3,required" db:"gatewayID" json:"gatewayID"`
  UserResourceProfile *user_resource_profile_model.UserResourceProfile `thrift:"userResourceProfile,4,required" db:"userResourceProfile" json:"userResourceProfile"`
}

func NewAiravataUpdateUserResourceProfileArgs() *AiravataUpdateUserResourceProfileArgs {
  return &AiravataUpdateUserResourceProfileArgs{}
}

var AiravataUpdateUserResourceProfileArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataUpdateUserResourceProfileArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataUpdateUserResourceProfileArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataUpdateUserResourceProfileArgs) GetUserId() string {
  return p.UserId
}

func (p *AiravataUpdateUserResourceProfileArgs) GetGatewayID() string {
  return p.GatewayID
}
var AiravataUpdateUserResourceProfileArgs_UserResourceProfile_DEFAULT *user_resource_profile_model.UserResourceProfile
func (p *AiravataUpdateUserResourceProfileArgs) GetUserResourceProfile() *user_resource_profile_model.UserResourceProfile {
  if !p.IsSetUserResourceProfile() {
    return AiravataUpdateUserResourceProfileArgs_UserResourceProfile_DEFAULT
  }
return p.UserResourceProfile
}
func (p *AiravataUpdateUserResourceProfileArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataUpdateUserResourceProfileArgs) IsSetUserResourceProfile() bool {
  return p.UserResourceProfile != nil
}

func (p *AiravataUpdateUserResourceProfileArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetUserId bool = false;
  var issetGatewayID bool = false;
  var issetUserResourceProfile bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserId = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayID = true
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserResourceProfile = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetUserId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserId is not set"));
  }
  if !issetGatewayID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayID is not set"));
  }
  if !issetUserResourceProfile{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserResourceProfile is not set"));
  }
  return nil
}

func (p *AiravataUpdateUserResourceProfileArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataUpdateUserResourceProfileArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *AiravataUpdateUserResourceProfileArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.GatewayID = v
}
  return nil
}

func (p *AiravataUpdateUserResourceProfileArgs)  ReadField4(iprot thrift.TProtocol) error {
  p.UserResourceProfile = &user_resource_profile_model.UserResourceProfile{}
  if err := p.UserResourceProfile.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserResourceProfile), err)
  }
  return nil
}

func (p *AiravataUpdateUserResourceProfileArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateUserResourceProfile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateUserResourceProfileArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataUpdateUserResourceProfileArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteString(string(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *AiravataUpdateUserResourceProfileArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayID", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gatewayID: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayID (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gatewayID: ", p), err) }
  return err
}

func (p *AiravataUpdateUserResourceProfileArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userResourceProfile", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:userResourceProfile: ", p), err) }
  if err := p.UserResourceProfile.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserResourceProfile), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:userResourceProfile: ", p), err) }
  return err
}

func (p *AiravataUpdateUserResourceProfileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateUserResourceProfileArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataUpdateUserResourceProfileResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataUpdateUserResourceProfileResult() *AiravataUpdateUserResourceProfileResult {
  return &AiravataUpdateUserResourceProfileResult{}
}

var AiravataUpdateUserResourceProfileResult_Success_DEFAULT bool
func (p *AiravataUpdateUserResourceProfileResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataUpdateUserResourceProfileResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataUpdateUserResourceProfileResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataUpdateUserResourceProfileResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataUpdateUserResourceProfileResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataUpdateUserResourceProfileResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataUpdateUserResourceProfileResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataUpdateUserResourceProfileResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataUpdateUserResourceProfileResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataUpdateUserResourceProfileResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataUpdateUserResourceProfileResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataUpdateUserResourceProfileResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataUpdateUserResourceProfileResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataUpdateUserResourceProfileResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataUpdateUserResourceProfileResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataUpdateUserResourceProfileResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataUpdateUserResourceProfileResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataUpdateUserResourceProfileResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataUpdateUserResourceProfileResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataUpdateUserResourceProfileResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataUpdateUserResourceProfileResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataUpdateUserResourceProfileResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataUpdateUserResourceProfileResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataUpdateUserResourceProfileResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataUpdateUserResourceProfileResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataUpdateUserResourceProfileResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateUserResourceProfile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateUserResourceProfileResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateUserResourceProfileResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateUserResourceProfileResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateUserResourceProfileResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateUserResourceProfileResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateUserResourceProfileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateUserResourceProfileResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - UserId
//  - GatewayID
type AiravataDeleteUserResourceProfileArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  UserId string `thrift:"userId,2,required" db:"userId" json:"userId"`
  GatewayID string `thrift:"gatewayID,3,required" db:"gatewayID" json:"gatewayID"`
}

func NewAiravataDeleteUserResourceProfileArgs() *AiravataDeleteUserResourceProfileArgs {
  return &AiravataDeleteUserResourceProfileArgs{}
}

var AiravataDeleteUserResourceProfileArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataDeleteUserResourceProfileArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataDeleteUserResourceProfileArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataDeleteUserResourceProfileArgs) GetUserId() string {
  return p.UserId
}

func (p *AiravataDeleteUserResourceProfileArgs) GetGatewayID() string {
  return p.GatewayID
}
func (p *AiravataDeleteUserResourceProfileArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataDeleteUserResourceProfileArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetUserId bool = false;
  var issetGatewayID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserId = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayID = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetUserId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserId is not set"));
  }
  if !issetGatewayID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayID is not set"));
  }
  return nil
}

func (p *AiravataDeleteUserResourceProfileArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataDeleteUserResourceProfileArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *AiravataDeleteUserResourceProfileArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.GatewayID = v
}
  return nil
}

func (p *AiravataDeleteUserResourceProfileArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteUserResourceProfile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeleteUserResourceProfileArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataDeleteUserResourceProfileArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteString(string(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *AiravataDeleteUserResourceProfileArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayID", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gatewayID: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayID (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gatewayID: ", p), err) }
  return err
}

func (p *AiravataDeleteUserResourceProfileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeleteUserResourceProfileArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataDeleteUserResourceProfileResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataDeleteUserResourceProfileResult() *AiravataDeleteUserResourceProfileResult {
  return &AiravataDeleteUserResourceProfileResult{}
}

var AiravataDeleteUserResourceProfileResult_Success_DEFAULT bool
func (p *AiravataDeleteUserResourceProfileResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataDeleteUserResourceProfileResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataDeleteUserResourceProfileResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataDeleteUserResourceProfileResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataDeleteUserResourceProfileResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataDeleteUserResourceProfileResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataDeleteUserResourceProfileResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataDeleteUserResourceProfileResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataDeleteUserResourceProfileResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataDeleteUserResourceProfileResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataDeleteUserResourceProfileResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataDeleteUserResourceProfileResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataDeleteUserResourceProfileResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataDeleteUserResourceProfileResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataDeleteUserResourceProfileResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataDeleteUserResourceProfileResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataDeleteUserResourceProfileResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataDeleteUserResourceProfileResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataDeleteUserResourceProfileResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataDeleteUserResourceProfileResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataDeleteUserResourceProfileResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataDeleteUserResourceProfileResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataDeleteUserResourceProfileResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataDeleteUserResourceProfileResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataDeleteUserResourceProfileResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataDeleteUserResourceProfileResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteUserResourceProfile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeleteUserResourceProfileResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteUserResourceProfileResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteUserResourceProfileResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteUserResourceProfileResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteUserResourceProfileResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteUserResourceProfileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeleteUserResourceProfileResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - UserId
//  - GatewayID
//  - UserComputeResourceId
//  - UserComputeResourcePreference
type AiravataAddUserComputeResourcePreferenceArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  UserId string `thrift:"userId,2,required" db:"userId" json:"userId"`
  GatewayID string `thrift:"gatewayID,3,required" db:"gatewayID" json:"gatewayID"`
  UserComputeResourceId string `thrift:"userComputeResourceId,4,required" db:"userComputeResourceId" json:"userComputeResourceId"`
  UserComputeResourcePreference *user_resource_profile_model.UserComputeResourcePreference `thrift:"userComputeResourcePreference,5,required" db:"userComputeResourcePreference" json:"userComputeResourcePreference"`
}

func NewAiravataAddUserComputeResourcePreferenceArgs() *AiravataAddUserComputeResourcePreferenceArgs {
  return &AiravataAddUserComputeResourcePreferenceArgs{}
}

var AiravataAddUserComputeResourcePreferenceArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataAddUserComputeResourcePreferenceArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataAddUserComputeResourcePreferenceArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataAddUserComputeResourcePreferenceArgs) GetUserId() string {
  return p.UserId
}

func (p *AiravataAddUserComputeResourcePreferenceArgs) GetGatewayID() string {
  return p.GatewayID
}

func (p *AiravataAddUserComputeResourcePreferenceArgs) GetUserComputeResourceId() string {
  return p.UserComputeResourceId
}
var AiravataAddUserComputeResourcePreferenceArgs_UserComputeResourcePreference_DEFAULT *user_resource_profile_model.UserComputeResourcePreference
func (p *AiravataAddUserComputeResourcePreferenceArgs) GetUserComputeResourcePreference() *user_resource_profile_model.UserComputeResourcePreference {
  if !p.IsSetUserComputeResourcePreference() {
    return AiravataAddUserComputeResourcePreferenceArgs_UserComputeResourcePreference_DEFAULT
  }
return p.UserComputeResourcePreference
}
func (p *AiravataAddUserComputeResourcePreferenceArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataAddUserComputeResourcePreferenceArgs) IsSetUserComputeResourcePreference() bool {
  return p.UserComputeResourcePreference != nil
}

func (p *AiravataAddUserComputeResourcePreferenceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetUserId bool = false;
  var issetGatewayID bool = false;
  var issetUserComputeResourceId bool = false;
  var issetUserComputeResourcePreference bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserId = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayID = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserComputeResourceId = true
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserComputeResourcePreference = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetUserId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserId is not set"));
  }
  if !issetGatewayID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayID is not set"));
  }
  if !issetUserComputeResourceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserComputeResourceId is not set"));
  }
  if !issetUserComputeResourcePreference{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserComputeResourcePreference is not set"));
  }
  return nil
}

func (p *AiravataAddUserComputeResourcePreferenceArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataAddUserComputeResourcePreferenceArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *AiravataAddUserComputeResourcePreferenceArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.GatewayID = v
}
  return nil
}

func (p *AiravataAddUserComputeResourcePreferenceArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UserComputeResourceId = v
}
  return nil
}

func (p *AiravataAddUserComputeResourcePreferenceArgs)  ReadField5(iprot thrift.TProtocol) error {
  p.UserComputeResourcePreference = &user_resource_profile_model.UserComputeResourcePreference{}
  if err := p.UserComputeResourcePreference.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserComputeResourcePreference), err)
  }
  return nil
}

func (p *AiravataAddUserComputeResourcePreferenceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addUserComputeResourcePreference_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataAddUserComputeResourcePreferenceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataAddUserComputeResourcePreferenceArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteString(string(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *AiravataAddUserComputeResourcePreferenceArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayID", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gatewayID: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayID (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gatewayID: ", p), err) }
  return err
}

func (p *AiravataAddUserComputeResourcePreferenceArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userComputeResourceId", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:userComputeResourceId: ", p), err) }
  if err := oprot.WriteString(string(p.UserComputeResourceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userComputeResourceId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:userComputeResourceId: ", p), err) }
  return err
}

func (p *AiravataAddUserComputeResourcePreferenceArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userComputeResourcePreference", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:userComputeResourcePreference: ", p), err) }
  if err := p.UserComputeResourcePreference.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserComputeResourcePreference), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:userComputeResourcePreference: ", p), err) }
  return err
}

func (p *AiravataAddUserComputeResourcePreferenceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataAddUserComputeResourcePreferenceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataAddUserComputeResourcePreferenceResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataAddUserComputeResourcePreferenceResult() *AiravataAddUserComputeResourcePreferenceResult {
  return &AiravataAddUserComputeResourcePreferenceResult{}
}

var AiravataAddUserComputeResourcePreferenceResult_Success_DEFAULT bool
func (p *AiravataAddUserComputeResourcePreferenceResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataAddUserComputeResourcePreferenceResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataAddUserComputeResourcePreferenceResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataAddUserComputeResourcePreferenceResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataAddUserComputeResourcePreferenceResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataAddUserComputeResourcePreferenceResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataAddUserComputeResourcePreferenceResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataAddUserComputeResourcePreferenceResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataAddUserComputeResourcePreferenceResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataAddUserComputeResourcePreferenceResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataAddUserComputeResourcePreferenceResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataAddUserComputeResourcePreferenceResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataAddUserComputeResourcePreferenceResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataAddUserComputeResourcePreferenceResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataAddUserComputeResourcePreferenceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataAddUserComputeResourcePreferenceResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataAddUserComputeResourcePreferenceResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataAddUserComputeResourcePreferenceResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataAddUserComputeResourcePreferenceResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataAddUserComputeResourcePreferenceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataAddUserComputeResourcePreferenceResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataAddUserComputeResourcePreferenceResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataAddUserComputeResourcePreferenceResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataAddUserComputeResourcePreferenceResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataAddUserComputeResourcePreferenceResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataAddUserComputeResourcePreferenceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addUserComputeResourcePreference_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataAddUserComputeResourcePreferenceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataAddUserComputeResourcePreferenceResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataAddUserComputeResourcePreferenceResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataAddUserComputeResourcePreferenceResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataAddUserComputeResourcePreferenceResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataAddUserComputeResourcePreferenceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataAddUserComputeResourcePreferenceResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - UserId
//  - GatewayID
//  - UserStorageResourceId
//  - UserStoragePreference
type AiravataAddUserStoragePreferenceArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  UserId string `thrift:"userId,2,required" db:"userId" json:"userId"`
  GatewayID string `thrift:"gatewayID,3,required" db:"gatewayID" json:"gatewayID"`
  UserStorageResourceId string `thrift:"userStorageResourceId,4,required" db:"userStorageResourceId" json:"userStorageResourceId"`
  UserStoragePreference *user_resource_profile_model.UserStoragePreference `thrift:"userStoragePreference,5,required" db:"userStoragePreference" json:"userStoragePreference"`
}

func NewAiravataAddUserStoragePreferenceArgs() *AiravataAddUserStoragePreferenceArgs {
  return &AiravataAddUserStoragePreferenceArgs{}
}

var AiravataAddUserStoragePreferenceArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataAddUserStoragePreferenceArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataAddUserStoragePreferenceArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataAddUserStoragePreferenceArgs) GetUserId() string {
  return p.UserId
}

func (p *AiravataAddUserStoragePreferenceArgs) GetGatewayID() string {
  return p.GatewayID
}

func (p *AiravataAddUserStoragePreferenceArgs) GetUserStorageResourceId() string {
  return p.UserStorageResourceId
}
var AiravataAddUserStoragePreferenceArgs_UserStoragePreference_DEFAULT *user_resource_profile_model.UserStoragePreference
func (p *AiravataAddUserStoragePreferenceArgs) GetUserStoragePreference() *user_resource_profile_model.UserStoragePreference {
  if !p.IsSetUserStoragePreference() {
    return AiravataAddUserStoragePreferenceArgs_UserStoragePreference_DEFAULT
  }
return p.UserStoragePreference
}
func (p *AiravataAddUserStoragePreferenceArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataAddUserStoragePreferenceArgs) IsSetUserStoragePreference() bool {
  return p.UserStoragePreference != nil
}

func (p *AiravataAddUserStoragePreferenceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetUserId bool = false;
  var issetGatewayID bool = false;
  var issetUserStorageResourceId bool = false;
  var issetUserStoragePreference bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserId = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayID = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserStorageResourceId = true
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserStoragePreference = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetUserId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserId is not set"));
  }
  if !issetGatewayID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayID is not set"));
  }
  if !issetUserStorageResourceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserStorageResourceId is not set"));
  }
  if !issetUserStoragePreference{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserStoragePreference is not set"));
  }
  return nil
}

func (p *AiravataAddUserStoragePreferenceArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataAddUserStoragePreferenceArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *AiravataAddUserStoragePreferenceArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.GatewayID = v
}
  return nil
}

func (p *AiravataAddUserStoragePreferenceArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UserStorageResourceId = v
}
  return nil
}

func (p *AiravataAddUserStoragePreferenceArgs)  ReadField5(iprot thrift.TProtocol) error {
  p.UserStoragePreference = &user_resource_profile_model.UserStoragePreference{}
  if err := p.UserStoragePreference.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserStoragePreference), err)
  }
  return nil
}

func (p *AiravataAddUserStoragePreferenceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addUserStoragePreference_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataAddUserStoragePreferenceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataAddUserStoragePreferenceArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteString(string(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *AiravataAddUserStoragePreferenceArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayID", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gatewayID: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayID (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gatewayID: ", p), err) }
  return err
}

func (p *AiravataAddUserStoragePreferenceArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userStorageResourceId", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:userStorageResourceId: ", p), err) }
  if err := oprot.WriteString(string(p.UserStorageResourceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userStorageResourceId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:userStorageResourceId: ", p), err) }
  return err
}

func (p *AiravataAddUserStoragePreferenceArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userStoragePreference", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:userStoragePreference: ", p), err) }
  if err := p.UserStoragePreference.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserStoragePreference), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:userStoragePreference: ", p), err) }
  return err
}

func (p *AiravataAddUserStoragePreferenceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataAddUserStoragePreferenceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataAddUserStoragePreferenceResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataAddUserStoragePreferenceResult() *AiravataAddUserStoragePreferenceResult {
  return &AiravataAddUserStoragePreferenceResult{}
}

var AiravataAddUserStoragePreferenceResult_Success_DEFAULT bool
func (p *AiravataAddUserStoragePreferenceResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataAddUserStoragePreferenceResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataAddUserStoragePreferenceResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataAddUserStoragePreferenceResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataAddUserStoragePreferenceResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataAddUserStoragePreferenceResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataAddUserStoragePreferenceResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataAddUserStoragePreferenceResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataAddUserStoragePreferenceResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataAddUserStoragePreferenceResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataAddUserStoragePreferenceResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataAddUserStoragePreferenceResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataAddUserStoragePreferenceResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataAddUserStoragePreferenceResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataAddUserStoragePreferenceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataAddUserStoragePreferenceResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataAddUserStoragePreferenceResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataAddUserStoragePreferenceResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataAddUserStoragePreferenceResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataAddUserStoragePreferenceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataAddUserStoragePreferenceResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataAddUserStoragePreferenceResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataAddUserStoragePreferenceResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataAddUserStoragePreferenceResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataAddUserStoragePreferenceResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataAddUserStoragePreferenceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addUserStoragePreference_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataAddUserStoragePreferenceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataAddUserStoragePreferenceResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataAddUserStoragePreferenceResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataAddUserStoragePreferenceResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataAddUserStoragePreferenceResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataAddUserStoragePreferenceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataAddUserStoragePreferenceResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - UserId
//  - GatewayID
//  - UserComputeResourceId
type AiravataGetUserComputeResourcePreferenceArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  UserId string `thrift:"userId,2,required" db:"userId" json:"userId"`
  GatewayID string `thrift:"gatewayID,3,required" db:"gatewayID" json:"gatewayID"`
  UserComputeResourceId string `thrift:"userComputeResourceId,4,required" db:"userComputeResourceId" json:"userComputeResourceId"`
}

func NewAiravataGetUserComputeResourcePreferenceArgs() *AiravataGetUserComputeResourcePreferenceArgs {
  return &AiravataGetUserComputeResourcePreferenceArgs{}
}

var AiravataGetUserComputeResourcePreferenceArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetUserComputeResourcePreferenceArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetUserComputeResourcePreferenceArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetUserComputeResourcePreferenceArgs) GetUserId() string {
  return p.UserId
}

func (p *AiravataGetUserComputeResourcePreferenceArgs) GetGatewayID() string {
  return p.GatewayID
}

func (p *AiravataGetUserComputeResourcePreferenceArgs) GetUserComputeResourceId() string {
  return p.UserComputeResourceId
}
func (p *AiravataGetUserComputeResourcePreferenceArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetUserComputeResourcePreferenceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetUserId bool = false;
  var issetGatewayID bool = false;
  var issetUserComputeResourceId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserId = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayID = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserComputeResourceId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetUserId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserId is not set"));
  }
  if !issetGatewayID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayID is not set"));
  }
  if !issetUserComputeResourceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserComputeResourceId is not set"));
  }
  return nil
}

func (p *AiravataGetUserComputeResourcePreferenceArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetUserComputeResourcePreferenceArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *AiravataGetUserComputeResourcePreferenceArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.GatewayID = v
}
  return nil
}

func (p *AiravataGetUserComputeResourcePreferenceArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UserComputeResourceId = v
}
  return nil
}

func (p *AiravataGetUserComputeResourcePreferenceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUserComputeResourcePreference_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetUserComputeResourcePreferenceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetUserComputeResourcePreferenceArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteString(string(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *AiravataGetUserComputeResourcePreferenceArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayID", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gatewayID: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayID (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gatewayID: ", p), err) }
  return err
}

func (p *AiravataGetUserComputeResourcePreferenceArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userComputeResourceId", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:userComputeResourceId: ", p), err) }
  if err := oprot.WriteString(string(p.UserComputeResourceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userComputeResourceId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:userComputeResourceId: ", p), err) }
  return err
}

func (p *AiravataGetUserComputeResourcePreferenceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetUserComputeResourcePreferenceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetUserComputeResourcePreferenceResult struct {
  Success *user_resource_profile_model.UserComputeResourcePreference `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetUserComputeResourcePreferenceResult() *AiravataGetUserComputeResourcePreferenceResult {
  return &AiravataGetUserComputeResourcePreferenceResult{}
}

var AiravataGetUserComputeResourcePreferenceResult_Success_DEFAULT *user_resource_profile_model.UserComputeResourcePreference
func (p *AiravataGetUserComputeResourcePreferenceResult) GetSuccess() *user_resource_profile_model.UserComputeResourcePreference {
  if !p.IsSetSuccess() {
    return AiravataGetUserComputeResourcePreferenceResult_Success_DEFAULT
  }
return p.Success
}
var AiravataGetUserComputeResourcePreferenceResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetUserComputeResourcePreferenceResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetUserComputeResourcePreferenceResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetUserComputeResourcePreferenceResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetUserComputeResourcePreferenceResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetUserComputeResourcePreferenceResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetUserComputeResourcePreferenceResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetUserComputeResourcePreferenceResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetUserComputeResourcePreferenceResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetUserComputeResourcePreferenceResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetUserComputeResourcePreferenceResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetUserComputeResourcePreferenceResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetUserComputeResourcePreferenceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetUserComputeResourcePreferenceResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetUserComputeResourcePreferenceResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetUserComputeResourcePreferenceResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetUserComputeResourcePreferenceResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetUserComputeResourcePreferenceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetUserComputeResourcePreferenceResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &user_resource_profile_model.UserComputeResourcePreference{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AiravataGetUserComputeResourcePreferenceResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetUserComputeResourcePreferenceResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetUserComputeResourcePreferenceResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetUserComputeResourcePreferenceResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetUserComputeResourcePreferenceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUserComputeResourcePreference_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetUserComputeResourcePreferenceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetUserComputeResourcePreferenceResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetUserComputeResourcePreferenceResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetUserComputeResourcePreferenceResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetUserComputeResourcePreferenceResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetUserComputeResourcePreferenceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetUserComputeResourcePreferenceResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - UserId
//  - GatewayID
//  - UserStorageResourceId
type AiravataGetUserStoragePreferenceArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  UserId string `thrift:"userId,2,required" db:"userId" json:"userId"`
  GatewayID string `thrift:"gatewayID,3,required" db:"gatewayID" json:"gatewayID"`
  UserStorageResourceId string `thrift:"userStorageResourceId,4,required" db:"userStorageResourceId" json:"userStorageResourceId"`
}

func NewAiravataGetUserStoragePreferenceArgs() *AiravataGetUserStoragePreferenceArgs {
  return &AiravataGetUserStoragePreferenceArgs{}
}

var AiravataGetUserStoragePreferenceArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetUserStoragePreferenceArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetUserStoragePreferenceArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetUserStoragePreferenceArgs) GetUserId() string {
  return p.UserId
}

func (p *AiravataGetUserStoragePreferenceArgs) GetGatewayID() string {
  return p.GatewayID
}

func (p *AiravataGetUserStoragePreferenceArgs) GetUserStorageResourceId() string {
  return p.UserStorageResourceId
}
func (p *AiravataGetUserStoragePreferenceArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetUserStoragePreferenceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetUserId bool = false;
  var issetGatewayID bool = false;
  var issetUserStorageResourceId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserId = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayID = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserStorageResourceId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetUserId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserId is not set"));
  }
  if !issetGatewayID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayID is not set"));
  }
  if !issetUserStorageResourceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserStorageResourceId is not set"));
  }
  return nil
}

func (p *AiravataGetUserStoragePreferenceArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetUserStoragePreferenceArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *AiravataGetUserStoragePreferenceArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.GatewayID = v
}
  return nil
}

func (p *AiravataGetUserStoragePreferenceArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UserStorageResourceId = v
}
  return nil
}

func (p *AiravataGetUserStoragePreferenceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUserStoragePreference_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetUserStoragePreferenceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetUserStoragePreferenceArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteString(string(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *AiravataGetUserStoragePreferenceArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayID", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gatewayID: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayID (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gatewayID: ", p), err) }
  return err
}

func (p *AiravataGetUserStoragePreferenceArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userStorageResourceId", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:userStorageResourceId: ", p), err) }
  if err := oprot.WriteString(string(p.UserStorageResourceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userStorageResourceId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:userStorageResourceId: ", p), err) }
  return err
}

func (p *AiravataGetUserStoragePreferenceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetUserStoragePreferenceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetUserStoragePreferenceResult struct {
  Success *user_resource_profile_model.UserStoragePreference `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetUserStoragePreferenceResult() *AiravataGetUserStoragePreferenceResult {
  return &AiravataGetUserStoragePreferenceResult{}
}

var AiravataGetUserStoragePreferenceResult_Success_DEFAULT *user_resource_profile_model.UserStoragePreference
func (p *AiravataGetUserStoragePreferenceResult) GetSuccess() *user_resource_profile_model.UserStoragePreference {
  if !p.IsSetSuccess() {
    return AiravataGetUserStoragePreferenceResult_Success_DEFAULT
  }
return p.Success
}
var AiravataGetUserStoragePreferenceResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetUserStoragePreferenceResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetUserStoragePreferenceResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetUserStoragePreferenceResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetUserStoragePreferenceResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetUserStoragePreferenceResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetUserStoragePreferenceResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetUserStoragePreferenceResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetUserStoragePreferenceResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetUserStoragePreferenceResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetUserStoragePreferenceResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetUserStoragePreferenceResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetUserStoragePreferenceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetUserStoragePreferenceResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetUserStoragePreferenceResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetUserStoragePreferenceResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetUserStoragePreferenceResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetUserStoragePreferenceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetUserStoragePreferenceResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &user_resource_profile_model.UserStoragePreference{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AiravataGetUserStoragePreferenceResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetUserStoragePreferenceResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetUserStoragePreferenceResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetUserStoragePreferenceResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetUserStoragePreferenceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUserStoragePreference_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetUserStoragePreferenceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetUserStoragePreferenceResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetUserStoragePreferenceResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetUserStoragePreferenceResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetUserStoragePreferenceResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetUserStoragePreferenceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetUserStoragePreferenceResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - UserId
//  - GatewayID
type AiravataGetAllUserComputeResourcePreferencesArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  UserId string `thrift:"userId,2,required" db:"userId" json:"userId"`
  GatewayID string `thrift:"gatewayID,3,required" db:"gatewayID" json:"gatewayID"`
}

func NewAiravataGetAllUserComputeResourcePreferencesArgs() *AiravataGetAllUserComputeResourcePreferencesArgs {
  return &AiravataGetAllUserComputeResourcePreferencesArgs{}
}

var AiravataGetAllUserComputeResourcePreferencesArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetAllUserComputeResourcePreferencesArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetAllUserComputeResourcePreferencesArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetAllUserComputeResourcePreferencesArgs) GetUserId() string {
  return p.UserId
}

func (p *AiravataGetAllUserComputeResourcePreferencesArgs) GetGatewayID() string {
  return p.GatewayID
}
func (p *AiravataGetAllUserComputeResourcePreferencesArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetAllUserComputeResourcePreferencesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetUserId bool = false;
  var issetGatewayID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserId = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayID = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetUserId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserId is not set"));
  }
  if !issetGatewayID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayID is not set"));
  }
  return nil
}

func (p *AiravataGetAllUserComputeResourcePreferencesArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetAllUserComputeResourcePreferencesArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *AiravataGetAllUserComputeResourcePreferencesArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.GatewayID = v
}
  return nil
}

func (p *AiravataGetAllUserComputeResourcePreferencesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllUserComputeResourcePreferences_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAllUserComputeResourcePreferencesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetAllUserComputeResourcePreferencesArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteString(string(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *AiravataGetAllUserComputeResourcePreferencesArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayID", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gatewayID: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayID (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gatewayID: ", p), err) }
  return err
}

func (p *AiravataGetAllUserComputeResourcePreferencesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAllUserComputeResourcePreferencesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetAllUserComputeResourcePreferencesResult struct {
  Success []*user_resource_profile_model.UserComputeResourcePreference `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetAllUserComputeResourcePreferencesResult() *AiravataGetAllUserComputeResourcePreferencesResult {
  return &AiravataGetAllUserComputeResourcePreferencesResult{}
}

var AiravataGetAllUserComputeResourcePreferencesResult_Success_DEFAULT []*user_resource_profile_model.UserComputeResourcePreference

func (p *AiravataGetAllUserComputeResourcePreferencesResult) GetSuccess() []*user_resource_profile_model.UserComputeResourcePreference {
  return p.Success
}
var AiravataGetAllUserComputeResourcePreferencesResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetAllUserComputeResourcePreferencesResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetAllUserComputeResourcePreferencesResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetAllUserComputeResourcePreferencesResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetAllUserComputeResourcePreferencesResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetAllUserComputeResourcePreferencesResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetAllUserComputeResourcePreferencesResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetAllUserComputeResourcePreferencesResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetAllUserComputeResourcePreferencesResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetAllUserComputeResourcePreferencesResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetAllUserComputeResourcePreferencesResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetAllUserComputeResourcePreferencesResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetAllUserComputeResourcePreferencesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetAllUserComputeResourcePreferencesResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetAllUserComputeResourcePreferencesResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetAllUserComputeResourcePreferencesResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetAllUserComputeResourcePreferencesResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetAllUserComputeResourcePreferencesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetAllUserComputeResourcePreferencesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*user_resource_profile_model.UserComputeResourcePreference, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem384 := &user_resource_profile_model.UserComputeResourcePreference{}
    if err := _elem384.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem384), err)
    }
    p.Success = append(p.Success, _elem384)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AiravataGetAllUserComputeResourcePreferencesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetAllUserComputeResourcePreferencesResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetAllUserComputeResourcePreferencesResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetAllUserComputeResourcePreferencesResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetAllUserComputeResourcePreferencesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllUserComputeResourcePreferences_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAllUserComputeResourcePreferencesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllUserComputeResourcePreferencesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllUserComputeResourcePreferencesResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllUserComputeResourcePreferencesResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllUserComputeResourcePreferencesResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllUserComputeResourcePreferencesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAllUserComputeResourcePreferencesResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - UserId
//  - GatewayID
type AiravataGetAllUserStoragePreferencesArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  UserId string `thrift:"userId,2,required" db:"userId" json:"userId"`
  GatewayID string `thrift:"gatewayID,3,required" db:"gatewayID" json:"gatewayID"`
}

func NewAiravataGetAllUserStoragePreferencesArgs() *AiravataGetAllUserStoragePreferencesArgs {
  return &AiravataGetAllUserStoragePreferencesArgs{}
}

var AiravataGetAllUserStoragePreferencesArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetAllUserStoragePreferencesArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetAllUserStoragePreferencesArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetAllUserStoragePreferencesArgs) GetUserId() string {
  return p.UserId
}

func (p *AiravataGetAllUserStoragePreferencesArgs) GetGatewayID() string {
  return p.GatewayID
}
func (p *AiravataGetAllUserStoragePreferencesArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetAllUserStoragePreferencesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetUserId bool = false;
  var issetGatewayID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserId = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayID = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetUserId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserId is not set"));
  }
  if !issetGatewayID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayID is not set"));
  }
  return nil
}

func (p *AiravataGetAllUserStoragePreferencesArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetAllUserStoragePreferencesArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *AiravataGetAllUserStoragePreferencesArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.GatewayID = v
}
  return nil
}

func (p *AiravataGetAllUserStoragePreferencesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllUserStoragePreferences_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAllUserStoragePreferencesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetAllUserStoragePreferencesArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteString(string(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *AiravataGetAllUserStoragePreferencesArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayID", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gatewayID: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayID (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gatewayID: ", p), err) }
  return err
}

func (p *AiravataGetAllUserStoragePreferencesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAllUserStoragePreferencesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetAllUserStoragePreferencesResult struct {
  Success []*user_resource_profile_model.UserStoragePreference `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetAllUserStoragePreferencesResult() *AiravataGetAllUserStoragePreferencesResult {
  return &AiravataGetAllUserStoragePreferencesResult{}
}

var AiravataGetAllUserStoragePreferencesResult_Success_DEFAULT []*user_resource_profile_model.UserStoragePreference

func (p *AiravataGetAllUserStoragePreferencesResult) GetSuccess() []*user_resource_profile_model.UserStoragePreference {
  return p.Success
}
var AiravataGetAllUserStoragePreferencesResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetAllUserStoragePreferencesResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetAllUserStoragePreferencesResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetAllUserStoragePreferencesResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetAllUserStoragePreferencesResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetAllUserStoragePreferencesResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetAllUserStoragePreferencesResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetAllUserStoragePreferencesResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetAllUserStoragePreferencesResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetAllUserStoragePreferencesResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetAllUserStoragePreferencesResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetAllUserStoragePreferencesResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetAllUserStoragePreferencesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetAllUserStoragePreferencesResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetAllUserStoragePreferencesResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetAllUserStoragePreferencesResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetAllUserStoragePreferencesResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetAllUserStoragePreferencesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetAllUserStoragePreferencesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*user_resource_profile_model.UserStoragePreference, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem385 := &user_resource_profile_model.UserStoragePreference{}
    if err := _elem385.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem385), err)
    }
    p.Success = append(p.Success, _elem385)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AiravataGetAllUserStoragePreferencesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetAllUserStoragePreferencesResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetAllUserStoragePreferencesResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetAllUserStoragePreferencesResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetAllUserStoragePreferencesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllUserStoragePreferences_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAllUserStoragePreferencesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllUserStoragePreferencesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllUserStoragePreferencesResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllUserStoragePreferencesResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllUserStoragePreferencesResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllUserStoragePreferencesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAllUserStoragePreferencesResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
type AiravataGetAllUserResourceProfilesArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
}

func NewAiravataGetAllUserResourceProfilesArgs() *AiravataGetAllUserResourceProfilesArgs {
  return &AiravataGetAllUserResourceProfilesArgs{}
}

var AiravataGetAllUserResourceProfilesArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetAllUserResourceProfilesArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetAllUserResourceProfilesArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}
func (p *AiravataGetAllUserResourceProfilesArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetAllUserResourceProfilesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  return nil
}

func (p *AiravataGetAllUserResourceProfilesArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetAllUserResourceProfilesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllUserResourceProfiles_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAllUserResourceProfilesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetAllUserResourceProfilesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAllUserResourceProfilesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetAllUserResourceProfilesResult struct {
  Success []*user_resource_profile_model.UserResourceProfile `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetAllUserResourceProfilesResult() *AiravataGetAllUserResourceProfilesResult {
  return &AiravataGetAllUserResourceProfilesResult{}
}

var AiravataGetAllUserResourceProfilesResult_Success_DEFAULT []*user_resource_profile_model.UserResourceProfile

func (p *AiravataGetAllUserResourceProfilesResult) GetSuccess() []*user_resource_profile_model.UserResourceProfile {
  return p.Success
}
var AiravataGetAllUserResourceProfilesResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetAllUserResourceProfilesResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetAllUserResourceProfilesResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetAllUserResourceProfilesResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetAllUserResourceProfilesResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetAllUserResourceProfilesResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetAllUserResourceProfilesResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetAllUserResourceProfilesResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetAllUserResourceProfilesResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetAllUserResourceProfilesResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetAllUserResourceProfilesResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetAllUserResourceProfilesResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetAllUserResourceProfilesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetAllUserResourceProfilesResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetAllUserResourceProfilesResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetAllUserResourceProfilesResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetAllUserResourceProfilesResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetAllUserResourceProfilesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetAllUserResourceProfilesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*user_resource_profile_model.UserResourceProfile, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem386 := &user_resource_profile_model.UserResourceProfile{}
    if err := _elem386.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem386), err)
    }
    p.Success = append(p.Success, _elem386)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AiravataGetAllUserResourceProfilesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetAllUserResourceProfilesResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetAllUserResourceProfilesResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetAllUserResourceProfilesResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetAllUserResourceProfilesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllUserResourceProfiles_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAllUserResourceProfilesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllUserResourceProfilesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllUserResourceProfilesResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllUserResourceProfilesResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllUserResourceProfilesResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllUserResourceProfilesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAllUserResourceProfilesResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - UserId
//  - GatewayID
//  - UserComputeResourceId
//  - UserComputeResourcePreference
type AiravataUpdateUserComputeResourcePreferenceArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  UserId string `thrift:"userId,2,required" db:"userId" json:"userId"`
  GatewayID string `thrift:"gatewayID,3,required" db:"gatewayID" json:"gatewayID"`
  UserComputeResourceId string `thrift:"userComputeResourceId,4,required" db:"userComputeResourceId" json:"userComputeResourceId"`
  UserComputeResourcePreference *user_resource_profile_model.UserComputeResourcePreference `thrift:"userComputeResourcePreference,5,required" db:"userComputeResourcePreference" json:"userComputeResourcePreference"`
}

func NewAiravataUpdateUserComputeResourcePreferenceArgs() *AiravataUpdateUserComputeResourcePreferenceArgs {
  return &AiravataUpdateUserComputeResourcePreferenceArgs{}
}

var AiravataUpdateUserComputeResourcePreferenceArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataUpdateUserComputeResourcePreferenceArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataUpdateUserComputeResourcePreferenceArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataUpdateUserComputeResourcePreferenceArgs) GetUserId() string {
  return p.UserId
}

func (p *AiravataUpdateUserComputeResourcePreferenceArgs) GetGatewayID() string {
  return p.GatewayID
}

func (p *AiravataUpdateUserComputeResourcePreferenceArgs) GetUserComputeResourceId() string {
  return p.UserComputeResourceId
}
var AiravataUpdateUserComputeResourcePreferenceArgs_UserComputeResourcePreference_DEFAULT *user_resource_profile_model.UserComputeResourcePreference
func (p *AiravataUpdateUserComputeResourcePreferenceArgs) GetUserComputeResourcePreference() *user_resource_profile_model.UserComputeResourcePreference {
  if !p.IsSetUserComputeResourcePreference() {
    return AiravataUpdateUserComputeResourcePreferenceArgs_UserComputeResourcePreference_DEFAULT
  }
return p.UserComputeResourcePreference
}
func (p *AiravataUpdateUserComputeResourcePreferenceArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataUpdateUserComputeResourcePreferenceArgs) IsSetUserComputeResourcePreference() bool {
  return p.UserComputeResourcePreference != nil
}

func (p *AiravataUpdateUserComputeResourcePreferenceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetUserId bool = false;
  var issetGatewayID bool = false;
  var issetUserComputeResourceId bool = false;
  var issetUserComputeResourcePreference bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserId = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayID = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserComputeResourceId = true
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserComputeResourcePreference = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetUserId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserId is not set"));
  }
  if !issetGatewayID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayID is not set"));
  }
  if !issetUserComputeResourceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserComputeResourceId is not set"));
  }
  if !issetUserComputeResourcePreference{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserComputeResourcePreference is not set"));
  }
  return nil
}

func (p *AiravataUpdateUserComputeResourcePreferenceArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataUpdateUserComputeResourcePreferenceArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *AiravataUpdateUserComputeResourcePreferenceArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.GatewayID = v
}
  return nil
}

func (p *AiravataUpdateUserComputeResourcePreferenceArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UserComputeResourceId = v
}
  return nil
}

func (p *AiravataUpdateUserComputeResourcePreferenceArgs)  ReadField5(iprot thrift.TProtocol) error {
  p.UserComputeResourcePreference = &user_resource_profile_model.UserComputeResourcePreference{}
  if err := p.UserComputeResourcePreference.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserComputeResourcePreference), err)
  }
  return nil
}

func (p *AiravataUpdateUserComputeResourcePreferenceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateUserComputeResourcePreference_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateUserComputeResourcePreferenceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataUpdateUserComputeResourcePreferenceArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteString(string(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *AiravataUpdateUserComputeResourcePreferenceArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayID", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gatewayID: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayID (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gatewayID: ", p), err) }
  return err
}

func (p *AiravataUpdateUserComputeResourcePreferenceArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userComputeResourceId", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:userComputeResourceId: ", p), err) }
  if err := oprot.WriteString(string(p.UserComputeResourceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userComputeResourceId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:userComputeResourceId: ", p), err) }
  return err
}

func (p *AiravataUpdateUserComputeResourcePreferenceArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userComputeResourcePreference", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:userComputeResourcePreference: ", p), err) }
  if err := p.UserComputeResourcePreference.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserComputeResourcePreference), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:userComputeResourcePreference: ", p), err) }
  return err
}

func (p *AiravataUpdateUserComputeResourcePreferenceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateUserComputeResourcePreferenceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataUpdateUserComputeResourcePreferenceResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataUpdateUserComputeResourcePreferenceResult() *AiravataUpdateUserComputeResourcePreferenceResult {
  return &AiravataUpdateUserComputeResourcePreferenceResult{}
}

var AiravataUpdateUserComputeResourcePreferenceResult_Success_DEFAULT bool
func (p *AiravataUpdateUserComputeResourcePreferenceResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataUpdateUserComputeResourcePreferenceResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataUpdateUserComputeResourcePreferenceResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataUpdateUserComputeResourcePreferenceResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataUpdateUserComputeResourcePreferenceResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataUpdateUserComputeResourcePreferenceResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataUpdateUserComputeResourcePreferenceResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataUpdateUserComputeResourcePreferenceResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataUpdateUserComputeResourcePreferenceResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataUpdateUserComputeResourcePreferenceResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataUpdateUserComputeResourcePreferenceResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataUpdateUserComputeResourcePreferenceResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataUpdateUserComputeResourcePreferenceResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataUpdateUserComputeResourcePreferenceResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataUpdateUserComputeResourcePreferenceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataUpdateUserComputeResourcePreferenceResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataUpdateUserComputeResourcePreferenceResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataUpdateUserComputeResourcePreferenceResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataUpdateUserComputeResourcePreferenceResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataUpdateUserComputeResourcePreferenceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataUpdateUserComputeResourcePreferenceResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataUpdateUserComputeResourcePreferenceResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataUpdateUserComputeResourcePreferenceResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataUpdateUserComputeResourcePreferenceResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataUpdateUserComputeResourcePreferenceResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataUpdateUserComputeResourcePreferenceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateUserComputeResourcePreference_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateUserComputeResourcePreferenceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateUserComputeResourcePreferenceResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateUserComputeResourcePreferenceResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateUserComputeResourcePreferenceResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateUserComputeResourcePreferenceResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateUserComputeResourcePreferenceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateUserComputeResourcePreferenceResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - UserId
//  - GatewayID
//  - UserStorageId
//  - UserStoragePreference
type AiravataUpdateUserStoragePreferenceArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  UserId string `thrift:"userId,2,required" db:"userId" json:"userId"`
  GatewayID string `thrift:"gatewayID,3,required" db:"gatewayID" json:"gatewayID"`
  UserStorageId string `thrift:"userStorageId,4,required" db:"userStorageId" json:"userStorageId"`
  UserStoragePreference *user_resource_profile_model.UserStoragePreference `thrift:"userStoragePreference,5,required" db:"userStoragePreference" json:"userStoragePreference"`
}

func NewAiravataUpdateUserStoragePreferenceArgs() *AiravataUpdateUserStoragePreferenceArgs {
  return &AiravataUpdateUserStoragePreferenceArgs{}
}

var AiravataUpdateUserStoragePreferenceArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataUpdateUserStoragePreferenceArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataUpdateUserStoragePreferenceArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataUpdateUserStoragePreferenceArgs) GetUserId() string {
  return p.UserId
}

func (p *AiravataUpdateUserStoragePreferenceArgs) GetGatewayID() string {
  return p.GatewayID
}

func (p *AiravataUpdateUserStoragePreferenceArgs) GetUserStorageId() string {
  return p.UserStorageId
}
var AiravataUpdateUserStoragePreferenceArgs_UserStoragePreference_DEFAULT *user_resource_profile_model.UserStoragePreference
func (p *AiravataUpdateUserStoragePreferenceArgs) GetUserStoragePreference() *user_resource_profile_model.UserStoragePreference {
  if !p.IsSetUserStoragePreference() {
    return AiravataUpdateUserStoragePreferenceArgs_UserStoragePreference_DEFAULT
  }
return p.UserStoragePreference
}
func (p *AiravataUpdateUserStoragePreferenceArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataUpdateUserStoragePreferenceArgs) IsSetUserStoragePreference() bool {
  return p.UserStoragePreference != nil
}

func (p *AiravataUpdateUserStoragePreferenceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetUserId bool = false;
  var issetGatewayID bool = false;
  var issetUserStorageId bool = false;
  var issetUserStoragePreference bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserId = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayID = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserStorageId = true
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserStoragePreference = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetUserId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserId is not set"));
  }
  if !issetGatewayID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayID is not set"));
  }
  if !issetUserStorageId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserStorageId is not set"));
  }
  if !issetUserStoragePreference{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserStoragePreference is not set"));
  }
  return nil
}

func (p *AiravataUpdateUserStoragePreferenceArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataUpdateUserStoragePreferenceArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *AiravataUpdateUserStoragePreferenceArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.GatewayID = v
}
  return nil
}

func (p *AiravataUpdateUserStoragePreferenceArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UserStorageId = v
}
  return nil
}

func (p *AiravataUpdateUserStoragePreferenceArgs)  ReadField5(iprot thrift.TProtocol) error {
  p.UserStoragePreference = &user_resource_profile_model.UserStoragePreference{}
  if err := p.UserStoragePreference.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserStoragePreference), err)
  }
  return nil
}

func (p *AiravataUpdateUserStoragePreferenceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateUserStoragePreference_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateUserStoragePreferenceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataUpdateUserStoragePreferenceArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteString(string(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *AiravataUpdateUserStoragePreferenceArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayID", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gatewayID: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayID (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gatewayID: ", p), err) }
  return err
}

func (p *AiravataUpdateUserStoragePreferenceArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userStorageId", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:userStorageId: ", p), err) }
  if err := oprot.WriteString(string(p.UserStorageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userStorageId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:userStorageId: ", p), err) }
  return err
}

func (p *AiravataUpdateUserStoragePreferenceArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userStoragePreference", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:userStoragePreference: ", p), err) }
  if err := p.UserStoragePreference.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserStoragePreference), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:userStoragePreference: ", p), err) }
  return err
}

func (p *AiravataUpdateUserStoragePreferenceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateUserStoragePreferenceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataUpdateUserStoragePreferenceResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataUpdateUserStoragePreferenceResult() *AiravataUpdateUserStoragePreferenceResult {
  return &AiravataUpdateUserStoragePreferenceResult{}
}

var AiravataUpdateUserStoragePreferenceResult_Success_DEFAULT bool
func (p *AiravataUpdateUserStoragePreferenceResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataUpdateUserStoragePreferenceResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataUpdateUserStoragePreferenceResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataUpdateUserStoragePreferenceResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataUpdateUserStoragePreferenceResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataUpdateUserStoragePreferenceResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataUpdateUserStoragePreferenceResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataUpdateUserStoragePreferenceResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataUpdateUserStoragePreferenceResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataUpdateUserStoragePreferenceResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataUpdateUserStoragePreferenceResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataUpdateUserStoragePreferenceResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataUpdateUserStoragePreferenceResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataUpdateUserStoragePreferenceResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataUpdateUserStoragePreferenceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataUpdateUserStoragePreferenceResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataUpdateUserStoragePreferenceResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataUpdateUserStoragePreferenceResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataUpdateUserStoragePreferenceResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataUpdateUserStoragePreferenceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataUpdateUserStoragePreferenceResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataUpdateUserStoragePreferenceResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataUpdateUserStoragePreferenceResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataUpdateUserStoragePreferenceResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataUpdateUserStoragePreferenceResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataUpdateUserStoragePreferenceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateUserStoragePreference_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateUserStoragePreferenceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateUserStoragePreferenceResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateUserStoragePreferenceResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateUserStoragePreferenceResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateUserStoragePreferenceResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateUserStoragePreferenceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateUserStoragePreferenceResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - UserId
//  - GatewayID
//  - UserComputeResourceId
type AiravataDeleteUserComputeResourcePreferenceArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  UserId string `thrift:"userId,2,required" db:"userId" json:"userId"`
  GatewayID string `thrift:"gatewayID,3,required" db:"gatewayID" json:"gatewayID"`
  UserComputeResourceId string `thrift:"userComputeResourceId,4,required" db:"userComputeResourceId" json:"userComputeResourceId"`
}

func NewAiravataDeleteUserComputeResourcePreferenceArgs() *AiravataDeleteUserComputeResourcePreferenceArgs {
  return &AiravataDeleteUserComputeResourcePreferenceArgs{}
}

var AiravataDeleteUserComputeResourcePreferenceArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataDeleteUserComputeResourcePreferenceArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataDeleteUserComputeResourcePreferenceArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataDeleteUserComputeResourcePreferenceArgs) GetUserId() string {
  return p.UserId
}

func (p *AiravataDeleteUserComputeResourcePreferenceArgs) GetGatewayID() string {
  return p.GatewayID
}

func (p *AiravataDeleteUserComputeResourcePreferenceArgs) GetUserComputeResourceId() string {
  return p.UserComputeResourceId
}
func (p *AiravataDeleteUserComputeResourcePreferenceArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataDeleteUserComputeResourcePreferenceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetUserId bool = false;
  var issetGatewayID bool = false;
  var issetUserComputeResourceId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserId = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayID = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserComputeResourceId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetUserId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserId is not set"));
  }
  if !issetGatewayID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayID is not set"));
  }
  if !issetUserComputeResourceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserComputeResourceId is not set"));
  }
  return nil
}

func (p *AiravataDeleteUserComputeResourcePreferenceArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataDeleteUserComputeResourcePreferenceArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *AiravataDeleteUserComputeResourcePreferenceArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.GatewayID = v
}
  return nil
}

func (p *AiravataDeleteUserComputeResourcePreferenceArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UserComputeResourceId = v
}
  return nil
}

func (p *AiravataDeleteUserComputeResourcePreferenceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteUserComputeResourcePreference_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeleteUserComputeResourcePreferenceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataDeleteUserComputeResourcePreferenceArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteString(string(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *AiravataDeleteUserComputeResourcePreferenceArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayID", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gatewayID: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayID (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gatewayID: ", p), err) }
  return err
}

func (p *AiravataDeleteUserComputeResourcePreferenceArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userComputeResourceId", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:userComputeResourceId: ", p), err) }
  if err := oprot.WriteString(string(p.UserComputeResourceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userComputeResourceId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:userComputeResourceId: ", p), err) }
  return err
}

func (p *AiravataDeleteUserComputeResourcePreferenceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeleteUserComputeResourcePreferenceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataDeleteUserComputeResourcePreferenceResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataDeleteUserComputeResourcePreferenceResult() *AiravataDeleteUserComputeResourcePreferenceResult {
  return &AiravataDeleteUserComputeResourcePreferenceResult{}
}

var AiravataDeleteUserComputeResourcePreferenceResult_Success_DEFAULT bool
func (p *AiravataDeleteUserComputeResourcePreferenceResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataDeleteUserComputeResourcePreferenceResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataDeleteUserComputeResourcePreferenceResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataDeleteUserComputeResourcePreferenceResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataDeleteUserComputeResourcePreferenceResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataDeleteUserComputeResourcePreferenceResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataDeleteUserComputeResourcePreferenceResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataDeleteUserComputeResourcePreferenceResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataDeleteUserComputeResourcePreferenceResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataDeleteUserComputeResourcePreferenceResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataDeleteUserComputeResourcePreferenceResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataDeleteUserComputeResourcePreferenceResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataDeleteUserComputeResourcePreferenceResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataDeleteUserComputeResourcePreferenceResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataDeleteUserComputeResourcePreferenceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataDeleteUserComputeResourcePreferenceResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataDeleteUserComputeResourcePreferenceResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataDeleteUserComputeResourcePreferenceResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataDeleteUserComputeResourcePreferenceResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataDeleteUserComputeResourcePreferenceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataDeleteUserComputeResourcePreferenceResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataDeleteUserComputeResourcePreferenceResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataDeleteUserComputeResourcePreferenceResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataDeleteUserComputeResourcePreferenceResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataDeleteUserComputeResourcePreferenceResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataDeleteUserComputeResourcePreferenceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteUserComputeResourcePreference_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeleteUserComputeResourcePreferenceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteUserComputeResourcePreferenceResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteUserComputeResourcePreferenceResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteUserComputeResourcePreferenceResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteUserComputeResourcePreferenceResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteUserComputeResourcePreferenceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeleteUserComputeResourcePreferenceResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - UserId
//  - GatewayID
//  - UserStorageId
type AiravataDeleteUserStoragePreferenceArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  UserId string `thrift:"userId,2,required" db:"userId" json:"userId"`
  GatewayID string `thrift:"gatewayID,3,required" db:"gatewayID" json:"gatewayID"`
  UserStorageId string `thrift:"userStorageId,4,required" db:"userStorageId" json:"userStorageId"`
}

func NewAiravataDeleteUserStoragePreferenceArgs() *AiravataDeleteUserStoragePreferenceArgs {
  return &AiravataDeleteUserStoragePreferenceArgs{}
}

var AiravataDeleteUserStoragePreferenceArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataDeleteUserStoragePreferenceArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataDeleteUserStoragePreferenceArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataDeleteUserStoragePreferenceArgs) GetUserId() string {
  return p.UserId
}

func (p *AiravataDeleteUserStoragePreferenceArgs) GetGatewayID() string {
  return p.GatewayID
}

func (p *AiravataDeleteUserStoragePreferenceArgs) GetUserStorageId() string {
  return p.UserStorageId
}
func (p *AiravataDeleteUserStoragePreferenceArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataDeleteUserStoragePreferenceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetUserId bool = false;
  var issetGatewayID bool = false;
  var issetUserStorageId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserId = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayID = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserStorageId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetUserId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserId is not set"));
  }
  if !issetGatewayID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayID is not set"));
  }
  if !issetUserStorageId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserStorageId is not set"));
  }
  return nil
}

func (p *AiravataDeleteUserStoragePreferenceArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataDeleteUserStoragePreferenceArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *AiravataDeleteUserStoragePreferenceArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.GatewayID = v
}
  return nil
}

func (p *AiravataDeleteUserStoragePreferenceArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UserStorageId = v
}
  return nil
}

func (p *AiravataDeleteUserStoragePreferenceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteUserStoragePreference_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeleteUserStoragePreferenceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataDeleteUserStoragePreferenceArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteString(string(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *AiravataDeleteUserStoragePreferenceArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayID", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gatewayID: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayID (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gatewayID: ", p), err) }
  return err
}

func (p *AiravataDeleteUserStoragePreferenceArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userStorageId", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:userStorageId: ", p), err) }
  if err := oprot.WriteString(string(p.UserStorageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userStorageId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:userStorageId: ", p), err) }
  return err
}

func (p *AiravataDeleteUserStoragePreferenceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeleteUserStoragePreferenceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataDeleteUserStoragePreferenceResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataDeleteUserStoragePreferenceResult() *AiravataDeleteUserStoragePreferenceResult {
  return &AiravataDeleteUserStoragePreferenceResult{}
}

var AiravataDeleteUserStoragePreferenceResult_Success_DEFAULT bool
func (p *AiravataDeleteUserStoragePreferenceResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataDeleteUserStoragePreferenceResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataDeleteUserStoragePreferenceResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataDeleteUserStoragePreferenceResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataDeleteUserStoragePreferenceResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataDeleteUserStoragePreferenceResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataDeleteUserStoragePreferenceResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataDeleteUserStoragePreferenceResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataDeleteUserStoragePreferenceResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataDeleteUserStoragePreferenceResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataDeleteUserStoragePreferenceResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataDeleteUserStoragePreferenceResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataDeleteUserStoragePreferenceResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataDeleteUserStoragePreferenceResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataDeleteUserStoragePreferenceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataDeleteUserStoragePreferenceResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataDeleteUserStoragePreferenceResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataDeleteUserStoragePreferenceResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataDeleteUserStoragePreferenceResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataDeleteUserStoragePreferenceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataDeleteUserStoragePreferenceResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataDeleteUserStoragePreferenceResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataDeleteUserStoragePreferenceResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataDeleteUserStoragePreferenceResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataDeleteUserStoragePreferenceResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataDeleteUserStoragePreferenceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteUserStoragePreference_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeleteUserStoragePreferenceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteUserStoragePreferenceResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteUserStoragePreferenceResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteUserStoragePreferenceResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteUserStoragePreferenceResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteUserStoragePreferenceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeleteUserStoragePreferenceResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GatewayId
type AiravataGetAllWorkflowsArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GatewayId string `thrift:"gatewayId,2,required" db:"gatewayId" json:"gatewayId"`
}

func NewAiravataGetAllWorkflowsArgs() *AiravataGetAllWorkflowsArgs {
  return &AiravataGetAllWorkflowsArgs{}
}

var AiravataGetAllWorkflowsArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetAllWorkflowsArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetAllWorkflowsArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetAllWorkflowsArgs) GetGatewayId() string {
  return p.GatewayId
}
func (p *AiravataGetAllWorkflowsArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetAllWorkflowsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGatewayId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  return nil
}

func (p *AiravataGetAllWorkflowsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetAllWorkflowsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *AiravataGetAllWorkflowsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllWorkflows_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAllWorkflowsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetAllWorkflowsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayId: ", p), err) }
  return err
}

func (p *AiravataGetAllWorkflowsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAllWorkflowsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetAllWorkflowsResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetAllWorkflowsResult() *AiravataGetAllWorkflowsResult {
  return &AiravataGetAllWorkflowsResult{}
}

var AiravataGetAllWorkflowsResult_Success_DEFAULT []string

func (p *AiravataGetAllWorkflowsResult) GetSuccess() []string {
  return p.Success
}
var AiravataGetAllWorkflowsResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetAllWorkflowsResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetAllWorkflowsResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetAllWorkflowsResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetAllWorkflowsResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetAllWorkflowsResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetAllWorkflowsResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetAllWorkflowsResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetAllWorkflowsResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetAllWorkflowsResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetAllWorkflowsResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetAllWorkflowsResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetAllWorkflowsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetAllWorkflowsResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetAllWorkflowsResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetAllWorkflowsResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetAllWorkflowsResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetAllWorkflowsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetAllWorkflowsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem387 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem387 = v
}
    p.Success = append(p.Success, _elem387)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AiravataGetAllWorkflowsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetAllWorkflowsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetAllWorkflowsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetAllWorkflowsResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetAllWorkflowsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllWorkflows_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAllWorkflowsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllWorkflowsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllWorkflowsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllWorkflowsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllWorkflowsResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllWorkflowsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAllWorkflowsResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
type AiravataGetLatestQueueStatusesArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
}

func NewAiravataGetLatestQueueStatusesArgs() *AiravataGetLatestQueueStatusesArgs {
  return &AiravataGetLatestQueueStatusesArgs{}
}

var AiravataGetLatestQueueStatusesArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetLatestQueueStatusesArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetLatestQueueStatusesArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}
func (p *AiravataGetLatestQueueStatusesArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetLatestQueueStatusesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  return nil
}

func (p *AiravataGetLatestQueueStatusesArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetLatestQueueStatusesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getLatestQueueStatuses_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetLatestQueueStatusesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetLatestQueueStatusesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetLatestQueueStatusesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetLatestQueueStatusesResult struct {
  Success []*status_models.QueueStatusModel `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetLatestQueueStatusesResult() *AiravataGetLatestQueueStatusesResult {
  return &AiravataGetLatestQueueStatusesResult{}
}

var AiravataGetLatestQueueStatusesResult_Success_DEFAULT []*status_models.QueueStatusModel

func (p *AiravataGetLatestQueueStatusesResult) GetSuccess() []*status_models.QueueStatusModel {
  return p.Success
}
var AiravataGetLatestQueueStatusesResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetLatestQueueStatusesResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetLatestQueueStatusesResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetLatestQueueStatusesResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetLatestQueueStatusesResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetLatestQueueStatusesResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetLatestQueueStatusesResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetLatestQueueStatusesResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetLatestQueueStatusesResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetLatestQueueStatusesResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetLatestQueueStatusesResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetLatestQueueStatusesResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetLatestQueueStatusesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetLatestQueueStatusesResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetLatestQueueStatusesResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetLatestQueueStatusesResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetLatestQueueStatusesResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetLatestQueueStatusesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetLatestQueueStatusesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*status_models.QueueStatusModel, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem388 := &status_models.QueueStatusModel{}
    if err := _elem388.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem388), err)
    }
    p.Success = append(p.Success, _elem388)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AiravataGetLatestQueueStatusesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetLatestQueueStatusesResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetLatestQueueStatusesResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetLatestQueueStatusesResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetLatestQueueStatusesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getLatestQueueStatuses_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetLatestQueueStatusesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetLatestQueueStatusesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetLatestQueueStatusesResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetLatestQueueStatusesResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetLatestQueueStatusesResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetLatestQueueStatusesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetLatestQueueStatusesResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - WorkflowTemplateId
type AiravataGetWorkflowArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  WorkflowTemplateId string `thrift:"workflowTemplateId,2,required" db:"workflowTemplateId" json:"workflowTemplateId"`
}

func NewAiravataGetWorkflowArgs() *AiravataGetWorkflowArgs {
  return &AiravataGetWorkflowArgs{}
}

var AiravataGetWorkflowArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetWorkflowArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetWorkflowArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetWorkflowArgs) GetWorkflowTemplateId() string {
  return p.WorkflowTemplateId
}
func (p *AiravataGetWorkflowArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetWorkflowArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetWorkflowTemplateId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetWorkflowTemplateId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetWorkflowTemplateId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field WorkflowTemplateId is not set"));
  }
  return nil
}

func (p *AiravataGetWorkflowArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetWorkflowArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.WorkflowTemplateId = v
}
  return nil
}

func (p *AiravataGetWorkflowArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getWorkflow_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetWorkflowArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetWorkflowArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("workflowTemplateId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:workflowTemplateId: ", p), err) }
  if err := oprot.WriteString(string(p.WorkflowTemplateId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.workflowTemplateId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:workflowTemplateId: ", p), err) }
  return err
}

func (p *AiravataGetWorkflowArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetWorkflowArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetWorkflowResult struct {
  Success *workflow_data_model.WorkflowModel `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetWorkflowResult() *AiravataGetWorkflowResult {
  return &AiravataGetWorkflowResult{}
}

var AiravataGetWorkflowResult_Success_DEFAULT *workflow_data_model.WorkflowModel
func (p *AiravataGetWorkflowResult) GetSuccess() *workflow_data_model.WorkflowModel {
  if !p.IsSetSuccess() {
    return AiravataGetWorkflowResult_Success_DEFAULT
  }
return p.Success
}
var AiravataGetWorkflowResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetWorkflowResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetWorkflowResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetWorkflowResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetWorkflowResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetWorkflowResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetWorkflowResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetWorkflowResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetWorkflowResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetWorkflowResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetWorkflowResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetWorkflowResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetWorkflowResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetWorkflowResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetWorkflowResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetWorkflowResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetWorkflowResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetWorkflowResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetWorkflowResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &workflow_data_model.WorkflowModel{
  TemplateId: "DO_NOT_SET_AT_CLIENTS",
}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AiravataGetWorkflowResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetWorkflowResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetWorkflowResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetWorkflowResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetWorkflowResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getWorkflow_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetWorkflowResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetWorkflowResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetWorkflowResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetWorkflowResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetWorkflowResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetWorkflowResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetWorkflowResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - WorkflowTemplateId
type AiravataDeleteWorkflowArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  WorkflowTemplateId string `thrift:"workflowTemplateId,2,required" db:"workflowTemplateId" json:"workflowTemplateId"`
}

func NewAiravataDeleteWorkflowArgs() *AiravataDeleteWorkflowArgs {
  return &AiravataDeleteWorkflowArgs{}
}

var AiravataDeleteWorkflowArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataDeleteWorkflowArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataDeleteWorkflowArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataDeleteWorkflowArgs) GetWorkflowTemplateId() string {
  return p.WorkflowTemplateId
}
func (p *AiravataDeleteWorkflowArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataDeleteWorkflowArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetWorkflowTemplateId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetWorkflowTemplateId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetWorkflowTemplateId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field WorkflowTemplateId is not set"));
  }
  return nil
}

func (p *AiravataDeleteWorkflowArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataDeleteWorkflowArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.WorkflowTemplateId = v
}
  return nil
}

func (p *AiravataDeleteWorkflowArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteWorkflow_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeleteWorkflowArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataDeleteWorkflowArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("workflowTemplateId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:workflowTemplateId: ", p), err) }
  if err := oprot.WriteString(string(p.WorkflowTemplateId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.workflowTemplateId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:workflowTemplateId: ", p), err) }
  return err
}

func (p *AiravataDeleteWorkflowArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeleteWorkflowArgs(%+v)", *p)
}

// Attributes:
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataDeleteWorkflowResult struct {
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataDeleteWorkflowResult() *AiravataDeleteWorkflowResult {
  return &AiravataDeleteWorkflowResult{}
}

var AiravataDeleteWorkflowResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataDeleteWorkflowResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataDeleteWorkflowResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataDeleteWorkflowResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataDeleteWorkflowResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataDeleteWorkflowResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataDeleteWorkflowResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataDeleteWorkflowResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataDeleteWorkflowResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataDeleteWorkflowResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataDeleteWorkflowResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataDeleteWorkflowResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataDeleteWorkflowResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataDeleteWorkflowResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataDeleteWorkflowResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataDeleteWorkflowResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataDeleteWorkflowResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataDeleteWorkflowResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataDeleteWorkflowResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataDeleteWorkflowResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataDeleteWorkflowResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataDeleteWorkflowResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteWorkflow_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeleteWorkflowResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteWorkflowResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteWorkflowResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteWorkflowResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteWorkflowResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeleteWorkflowResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GatewayId
//  - Workflow
type AiravataRegisterWorkflowArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GatewayId string `thrift:"gatewayId,2,required" db:"gatewayId" json:"gatewayId"`
  Workflow *workflow_data_model.WorkflowModel `thrift:"workflow,3,required" db:"workflow" json:"workflow"`
}

func NewAiravataRegisterWorkflowArgs() *AiravataRegisterWorkflowArgs {
  return &AiravataRegisterWorkflowArgs{}
}

var AiravataRegisterWorkflowArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataRegisterWorkflowArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataRegisterWorkflowArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataRegisterWorkflowArgs) GetGatewayId() string {
  return p.GatewayId
}
var AiravataRegisterWorkflowArgs_Workflow_DEFAULT *workflow_data_model.WorkflowModel
func (p *AiravataRegisterWorkflowArgs) GetWorkflow() *workflow_data_model.WorkflowModel {
  if !p.IsSetWorkflow() {
    return AiravataRegisterWorkflowArgs_Workflow_DEFAULT
  }
return p.Workflow
}
func (p *AiravataRegisterWorkflowArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataRegisterWorkflowArgs) IsSetWorkflow() bool {
  return p.Workflow != nil
}

func (p *AiravataRegisterWorkflowArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGatewayId bool = false;
  var issetWorkflow bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetWorkflow = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  if !issetWorkflow{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Workflow is not set"));
  }
  return nil
}

func (p *AiravataRegisterWorkflowArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataRegisterWorkflowArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *AiravataRegisterWorkflowArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.Workflow = &workflow_data_model.WorkflowModel{
  TemplateId: "DO_NOT_SET_AT_CLIENTS",
}
  if err := p.Workflow.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Workflow), err)
  }
  return nil
}

func (p *AiravataRegisterWorkflowArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerWorkflow_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataRegisterWorkflowArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataRegisterWorkflowArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gatewayId: ", p), err) }
  return err
}

func (p *AiravataRegisterWorkflowArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("workflow", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:workflow: ", p), err) }
  if err := p.Workflow.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Workflow), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:workflow: ", p), err) }
  return err
}

func (p *AiravataRegisterWorkflowArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataRegisterWorkflowArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataRegisterWorkflowResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataRegisterWorkflowResult() *AiravataRegisterWorkflowResult {
  return &AiravataRegisterWorkflowResult{}
}

var AiravataRegisterWorkflowResult_Success_DEFAULT string
func (p *AiravataRegisterWorkflowResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return AiravataRegisterWorkflowResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataRegisterWorkflowResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataRegisterWorkflowResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataRegisterWorkflowResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataRegisterWorkflowResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataRegisterWorkflowResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataRegisterWorkflowResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataRegisterWorkflowResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataRegisterWorkflowResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataRegisterWorkflowResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataRegisterWorkflowResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataRegisterWorkflowResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataRegisterWorkflowResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataRegisterWorkflowResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataRegisterWorkflowResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataRegisterWorkflowResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataRegisterWorkflowResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataRegisterWorkflowResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataRegisterWorkflowResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataRegisterWorkflowResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataRegisterWorkflowResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataRegisterWorkflowResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataRegisterWorkflowResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataRegisterWorkflowResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataRegisterWorkflowResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerWorkflow_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataRegisterWorkflowResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterWorkflowResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterWorkflowResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterWorkflowResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterWorkflowResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterWorkflowResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataRegisterWorkflowResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - WorkflowTemplateId
//  - Workflow
type AiravataUpdateWorkflowArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  WorkflowTemplateId string `thrift:"workflowTemplateId,2,required" db:"workflowTemplateId" json:"workflowTemplateId"`
  Workflow *workflow_data_model.WorkflowModel `thrift:"workflow,3,required" db:"workflow" json:"workflow"`
}

func NewAiravataUpdateWorkflowArgs() *AiravataUpdateWorkflowArgs {
  return &AiravataUpdateWorkflowArgs{}
}

var AiravataUpdateWorkflowArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataUpdateWorkflowArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataUpdateWorkflowArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataUpdateWorkflowArgs) GetWorkflowTemplateId() string {
  return p.WorkflowTemplateId
}
var AiravataUpdateWorkflowArgs_Workflow_DEFAULT *workflow_data_model.WorkflowModel
func (p *AiravataUpdateWorkflowArgs) GetWorkflow() *workflow_data_model.WorkflowModel {
  if !p.IsSetWorkflow() {
    return AiravataUpdateWorkflowArgs_Workflow_DEFAULT
  }
return p.Workflow
}
func (p *AiravataUpdateWorkflowArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataUpdateWorkflowArgs) IsSetWorkflow() bool {
  return p.Workflow != nil
}

func (p *AiravataUpdateWorkflowArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetWorkflowTemplateId bool = false;
  var issetWorkflow bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetWorkflowTemplateId = true
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetWorkflow = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetWorkflowTemplateId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field WorkflowTemplateId is not set"));
  }
  if !issetWorkflow{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Workflow is not set"));
  }
  return nil
}

func (p *AiravataUpdateWorkflowArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataUpdateWorkflowArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.WorkflowTemplateId = v
}
  return nil
}

func (p *AiravataUpdateWorkflowArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.Workflow = &workflow_data_model.WorkflowModel{
  TemplateId: "DO_NOT_SET_AT_CLIENTS",
}
  if err := p.Workflow.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Workflow), err)
  }
  return nil
}

func (p *AiravataUpdateWorkflowArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateWorkflow_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateWorkflowArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataUpdateWorkflowArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("workflowTemplateId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:workflowTemplateId: ", p), err) }
  if err := oprot.WriteString(string(p.WorkflowTemplateId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.workflowTemplateId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:workflowTemplateId: ", p), err) }
  return err
}

func (p *AiravataUpdateWorkflowArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("workflow", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:workflow: ", p), err) }
  if err := p.Workflow.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Workflow), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:workflow: ", p), err) }
  return err
}

func (p *AiravataUpdateWorkflowArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateWorkflowArgs(%+v)", *p)
}

// Attributes:
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataUpdateWorkflowResult struct {
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataUpdateWorkflowResult() *AiravataUpdateWorkflowResult {
  return &AiravataUpdateWorkflowResult{}
}

var AiravataUpdateWorkflowResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataUpdateWorkflowResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataUpdateWorkflowResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataUpdateWorkflowResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataUpdateWorkflowResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataUpdateWorkflowResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataUpdateWorkflowResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataUpdateWorkflowResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataUpdateWorkflowResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataUpdateWorkflowResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataUpdateWorkflowResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataUpdateWorkflowResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataUpdateWorkflowResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataUpdateWorkflowResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataUpdateWorkflowResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataUpdateWorkflowResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataUpdateWorkflowResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataUpdateWorkflowResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataUpdateWorkflowResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataUpdateWorkflowResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataUpdateWorkflowResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataUpdateWorkflowResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateWorkflow_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateWorkflowResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateWorkflowResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateWorkflowResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateWorkflowResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateWorkflowResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateWorkflowResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - WorkflowName
type AiravataGetWorkflowTemplateIdArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  WorkflowName string `thrift:"workflowName,2,required" db:"workflowName" json:"workflowName"`
}

func NewAiravataGetWorkflowTemplateIdArgs() *AiravataGetWorkflowTemplateIdArgs {
  return &AiravataGetWorkflowTemplateIdArgs{}
}

var AiravataGetWorkflowTemplateIdArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetWorkflowTemplateIdArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetWorkflowTemplateIdArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetWorkflowTemplateIdArgs) GetWorkflowName() string {
  return p.WorkflowName
}
func (p *AiravataGetWorkflowTemplateIdArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetWorkflowTemplateIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetWorkflowName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetWorkflowName = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetWorkflowName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field WorkflowName is not set"));
  }
  return nil
}

func (p *AiravataGetWorkflowTemplateIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetWorkflowTemplateIdArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.WorkflowName = v
}
  return nil
}

func (p *AiravataGetWorkflowTemplateIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getWorkflowTemplateId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetWorkflowTemplateIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetWorkflowTemplateIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("workflowName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:workflowName: ", p), err) }
  if err := oprot.WriteString(string(p.WorkflowName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.workflowName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:workflowName: ", p), err) }
  return err
}

func (p *AiravataGetWorkflowTemplateIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetWorkflowTemplateIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetWorkflowTemplateIdResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetWorkflowTemplateIdResult() *AiravataGetWorkflowTemplateIdResult {
  return &AiravataGetWorkflowTemplateIdResult{}
}

var AiravataGetWorkflowTemplateIdResult_Success_DEFAULT string
func (p *AiravataGetWorkflowTemplateIdResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return AiravataGetWorkflowTemplateIdResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataGetWorkflowTemplateIdResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetWorkflowTemplateIdResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetWorkflowTemplateIdResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetWorkflowTemplateIdResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetWorkflowTemplateIdResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetWorkflowTemplateIdResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetWorkflowTemplateIdResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetWorkflowTemplateIdResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetWorkflowTemplateIdResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetWorkflowTemplateIdResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetWorkflowTemplateIdResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetWorkflowTemplateIdResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetWorkflowTemplateIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetWorkflowTemplateIdResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetWorkflowTemplateIdResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetWorkflowTemplateIdResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetWorkflowTemplateIdResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetWorkflowTemplateIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetWorkflowTemplateIdResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataGetWorkflowTemplateIdResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetWorkflowTemplateIdResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetWorkflowTemplateIdResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetWorkflowTemplateIdResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetWorkflowTemplateIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getWorkflowTemplateId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetWorkflowTemplateIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetWorkflowTemplateIdResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetWorkflowTemplateIdResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetWorkflowTemplateIdResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetWorkflowTemplateIdResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetWorkflowTemplateIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetWorkflowTemplateIdResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - WorkflowName
type AiravataIsWorkflowExistWithNameArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  WorkflowName string `thrift:"workflowName,2,required" db:"workflowName" json:"workflowName"`
}

func NewAiravataIsWorkflowExistWithNameArgs() *AiravataIsWorkflowExistWithNameArgs {
  return &AiravataIsWorkflowExistWithNameArgs{}
}

var AiravataIsWorkflowExistWithNameArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataIsWorkflowExistWithNameArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataIsWorkflowExistWithNameArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataIsWorkflowExistWithNameArgs) GetWorkflowName() string {
  return p.WorkflowName
}
func (p *AiravataIsWorkflowExistWithNameArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataIsWorkflowExistWithNameArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetWorkflowName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetWorkflowName = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetWorkflowName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field WorkflowName is not set"));
  }
  return nil
}

func (p *AiravataIsWorkflowExistWithNameArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataIsWorkflowExistWithNameArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.WorkflowName = v
}
  return nil
}

func (p *AiravataIsWorkflowExistWithNameArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("isWorkflowExistWithName_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataIsWorkflowExistWithNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataIsWorkflowExistWithNameArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("workflowName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:workflowName: ", p), err) }
  if err := oprot.WriteString(string(p.WorkflowName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.workflowName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:workflowName: ", p), err) }
  return err
}

func (p *AiravataIsWorkflowExistWithNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataIsWorkflowExistWithNameArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataIsWorkflowExistWithNameResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataIsWorkflowExistWithNameResult() *AiravataIsWorkflowExistWithNameResult {
  return &AiravataIsWorkflowExistWithNameResult{}
}

var AiravataIsWorkflowExistWithNameResult_Success_DEFAULT bool
func (p *AiravataIsWorkflowExistWithNameResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataIsWorkflowExistWithNameResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataIsWorkflowExistWithNameResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataIsWorkflowExistWithNameResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataIsWorkflowExistWithNameResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataIsWorkflowExistWithNameResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataIsWorkflowExistWithNameResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataIsWorkflowExistWithNameResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataIsWorkflowExistWithNameResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataIsWorkflowExistWithNameResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataIsWorkflowExistWithNameResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataIsWorkflowExistWithNameResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataIsWorkflowExistWithNameResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataIsWorkflowExistWithNameResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataIsWorkflowExistWithNameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataIsWorkflowExistWithNameResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataIsWorkflowExistWithNameResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataIsWorkflowExistWithNameResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataIsWorkflowExistWithNameResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataIsWorkflowExistWithNameResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataIsWorkflowExistWithNameResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataIsWorkflowExistWithNameResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataIsWorkflowExistWithNameResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataIsWorkflowExistWithNameResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataIsWorkflowExistWithNameResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataIsWorkflowExistWithNameResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("isWorkflowExistWithName_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataIsWorkflowExistWithNameResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataIsWorkflowExistWithNameResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataIsWorkflowExistWithNameResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataIsWorkflowExistWithNameResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataIsWorkflowExistWithNameResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataIsWorkflowExistWithNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataIsWorkflowExistWithNameResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - DataProductModel
type AiravataRegisterDataProductArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  DataProductModel *replica_catalog_models.DataProductModel `thrift:"dataProductModel,2,required" db:"dataProductModel" json:"dataProductModel"`
}

func NewAiravataRegisterDataProductArgs() *AiravataRegisterDataProductArgs {
  return &AiravataRegisterDataProductArgs{}
}

var AiravataRegisterDataProductArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataRegisterDataProductArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataRegisterDataProductArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}
var AiravataRegisterDataProductArgs_DataProductModel_DEFAULT *replica_catalog_models.DataProductModel
func (p *AiravataRegisterDataProductArgs) GetDataProductModel() *replica_catalog_models.DataProductModel {
  if !p.IsSetDataProductModel() {
    return AiravataRegisterDataProductArgs_DataProductModel_DEFAULT
  }
return p.DataProductModel
}
func (p *AiravataRegisterDataProductArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataRegisterDataProductArgs) IsSetDataProductModel() bool {
  return p.DataProductModel != nil
}

func (p *AiravataRegisterDataProductArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetDataProductModel bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetDataProductModel = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetDataProductModel{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DataProductModel is not set"));
  }
  return nil
}

func (p *AiravataRegisterDataProductArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataRegisterDataProductArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.DataProductModel = &replica_catalog_models.DataProductModel{}
  if err := p.DataProductModel.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DataProductModel), err)
  }
  return nil
}

func (p *AiravataRegisterDataProductArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerDataProduct_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataRegisterDataProductArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataRegisterDataProductArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dataProductModel", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dataProductModel: ", p), err) }
  if err := p.DataProductModel.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DataProductModel), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dataProductModel: ", p), err) }
  return err
}

func (p *AiravataRegisterDataProductArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataRegisterDataProductArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataRegisterDataProductResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataRegisterDataProductResult() *AiravataRegisterDataProductResult {
  return &AiravataRegisterDataProductResult{}
}

var AiravataRegisterDataProductResult_Success_DEFAULT string
func (p *AiravataRegisterDataProductResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return AiravataRegisterDataProductResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataRegisterDataProductResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataRegisterDataProductResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataRegisterDataProductResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataRegisterDataProductResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataRegisterDataProductResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataRegisterDataProductResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataRegisterDataProductResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataRegisterDataProductResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataRegisterDataProductResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataRegisterDataProductResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataRegisterDataProductResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataRegisterDataProductResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataRegisterDataProductResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataRegisterDataProductResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataRegisterDataProductResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataRegisterDataProductResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataRegisterDataProductResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataRegisterDataProductResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataRegisterDataProductResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataRegisterDataProductResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataRegisterDataProductResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataRegisterDataProductResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataRegisterDataProductResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataRegisterDataProductResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerDataProduct_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataRegisterDataProductResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterDataProductResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterDataProductResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterDataProductResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterDataProductResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterDataProductResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataRegisterDataProductResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - DataProductUri
type AiravataGetDataProductArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  DataProductUri string `thrift:"dataProductUri,2,required" db:"dataProductUri" json:"dataProductUri"`
}

func NewAiravataGetDataProductArgs() *AiravataGetDataProductArgs {
  return &AiravataGetDataProductArgs{}
}

var AiravataGetDataProductArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetDataProductArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetDataProductArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetDataProductArgs) GetDataProductUri() string {
  return p.DataProductUri
}
func (p *AiravataGetDataProductArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetDataProductArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetDataProductUri bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetDataProductUri = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetDataProductUri{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DataProductUri is not set"));
  }
  return nil
}

func (p *AiravataGetDataProductArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetDataProductArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DataProductUri = v
}
  return nil
}

func (p *AiravataGetDataProductArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getDataProduct_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetDataProductArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetDataProductArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dataProductUri", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dataProductUri: ", p), err) }
  if err := oprot.WriteString(string(p.DataProductUri)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dataProductUri (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dataProductUri: ", p), err) }
  return err
}

func (p *AiravataGetDataProductArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetDataProductArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetDataProductResult struct {
  Success *replica_catalog_models.DataProductModel `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetDataProductResult() *AiravataGetDataProductResult {
  return &AiravataGetDataProductResult{}
}

var AiravataGetDataProductResult_Success_DEFAULT *replica_catalog_models.DataProductModel
func (p *AiravataGetDataProductResult) GetSuccess() *replica_catalog_models.DataProductModel {
  if !p.IsSetSuccess() {
    return AiravataGetDataProductResult_Success_DEFAULT
  }
return p.Success
}
var AiravataGetDataProductResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetDataProductResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetDataProductResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetDataProductResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetDataProductResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetDataProductResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetDataProductResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetDataProductResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetDataProductResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetDataProductResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetDataProductResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetDataProductResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetDataProductResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetDataProductResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetDataProductResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetDataProductResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetDataProductResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetDataProductResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetDataProductResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &replica_catalog_models.DataProductModel{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AiravataGetDataProductResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetDataProductResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetDataProductResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetDataProductResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetDataProductResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getDataProduct_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetDataProductResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetDataProductResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetDataProductResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetDataProductResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetDataProductResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetDataProductResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetDataProductResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - ReplicaLocationModel
type AiravataRegisterReplicaLocationArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  ReplicaLocationModel *replica_catalog_models.DataReplicaLocationModel `thrift:"replicaLocationModel,2,required" db:"replicaLocationModel" json:"replicaLocationModel"`
}

func NewAiravataRegisterReplicaLocationArgs() *AiravataRegisterReplicaLocationArgs {
  return &AiravataRegisterReplicaLocationArgs{}
}

var AiravataRegisterReplicaLocationArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataRegisterReplicaLocationArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataRegisterReplicaLocationArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}
var AiravataRegisterReplicaLocationArgs_ReplicaLocationModel_DEFAULT *replica_catalog_models.DataReplicaLocationModel
func (p *AiravataRegisterReplicaLocationArgs) GetReplicaLocationModel() *replica_catalog_models.DataReplicaLocationModel {
  if !p.IsSetReplicaLocationModel() {
    return AiravataRegisterReplicaLocationArgs_ReplicaLocationModel_DEFAULT
  }
return p.ReplicaLocationModel
}
func (p *AiravataRegisterReplicaLocationArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataRegisterReplicaLocationArgs) IsSetReplicaLocationModel() bool {
  return p.ReplicaLocationModel != nil
}

func (p *AiravataRegisterReplicaLocationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetReplicaLocationModel bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetReplicaLocationModel = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetReplicaLocationModel{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ReplicaLocationModel is not set"));
  }
  return nil
}

func (p *AiravataRegisterReplicaLocationArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataRegisterReplicaLocationArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.ReplicaLocationModel = &replica_catalog_models.DataReplicaLocationModel{}
  if err := p.ReplicaLocationModel.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ReplicaLocationModel), err)
  }
  return nil
}

func (p *AiravataRegisterReplicaLocationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerReplicaLocation_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataRegisterReplicaLocationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataRegisterReplicaLocationArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("replicaLocationModel", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:replicaLocationModel: ", p), err) }
  if err := p.ReplicaLocationModel.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ReplicaLocationModel), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:replicaLocationModel: ", p), err) }
  return err
}

func (p *AiravataRegisterReplicaLocationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataRegisterReplicaLocationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataRegisterReplicaLocationResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataRegisterReplicaLocationResult() *AiravataRegisterReplicaLocationResult {
  return &AiravataRegisterReplicaLocationResult{}
}

var AiravataRegisterReplicaLocationResult_Success_DEFAULT string
func (p *AiravataRegisterReplicaLocationResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return AiravataRegisterReplicaLocationResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataRegisterReplicaLocationResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataRegisterReplicaLocationResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataRegisterReplicaLocationResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataRegisterReplicaLocationResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataRegisterReplicaLocationResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataRegisterReplicaLocationResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataRegisterReplicaLocationResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataRegisterReplicaLocationResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataRegisterReplicaLocationResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataRegisterReplicaLocationResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataRegisterReplicaLocationResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataRegisterReplicaLocationResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataRegisterReplicaLocationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataRegisterReplicaLocationResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataRegisterReplicaLocationResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataRegisterReplicaLocationResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataRegisterReplicaLocationResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataRegisterReplicaLocationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataRegisterReplicaLocationResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataRegisterReplicaLocationResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataRegisterReplicaLocationResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataRegisterReplicaLocationResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataRegisterReplicaLocationResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataRegisterReplicaLocationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerReplicaLocation_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataRegisterReplicaLocationResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterReplicaLocationResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterReplicaLocationResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterReplicaLocationResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterReplicaLocationResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataRegisterReplicaLocationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataRegisterReplicaLocationResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - ProductUri
type AiravataGetParentDataProductArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  ProductUri string `thrift:"productUri,2,required" db:"productUri" json:"productUri"`
}

func NewAiravataGetParentDataProductArgs() *AiravataGetParentDataProductArgs {
  return &AiravataGetParentDataProductArgs{}
}

var AiravataGetParentDataProductArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetParentDataProductArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetParentDataProductArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetParentDataProductArgs) GetProductUri() string {
  return p.ProductUri
}
func (p *AiravataGetParentDataProductArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetParentDataProductArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetProductUri bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProductUri = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetProductUri{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProductUri is not set"));
  }
  return nil
}

func (p *AiravataGetParentDataProductArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetParentDataProductArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ProductUri = v
}
  return nil
}

func (p *AiravataGetParentDataProductArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getParentDataProduct_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetParentDataProductArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetParentDataProductArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("productUri", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:productUri: ", p), err) }
  if err := oprot.WriteString(string(p.ProductUri)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.productUri (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:productUri: ", p), err) }
  return err
}

func (p *AiravataGetParentDataProductArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetParentDataProductArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetParentDataProductResult struct {
  Success *replica_catalog_models.DataProductModel `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetParentDataProductResult() *AiravataGetParentDataProductResult {
  return &AiravataGetParentDataProductResult{}
}

var AiravataGetParentDataProductResult_Success_DEFAULT *replica_catalog_models.DataProductModel
func (p *AiravataGetParentDataProductResult) GetSuccess() *replica_catalog_models.DataProductModel {
  if !p.IsSetSuccess() {
    return AiravataGetParentDataProductResult_Success_DEFAULT
  }
return p.Success
}
var AiravataGetParentDataProductResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetParentDataProductResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetParentDataProductResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetParentDataProductResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetParentDataProductResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetParentDataProductResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetParentDataProductResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetParentDataProductResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetParentDataProductResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetParentDataProductResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetParentDataProductResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetParentDataProductResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetParentDataProductResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetParentDataProductResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetParentDataProductResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetParentDataProductResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetParentDataProductResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetParentDataProductResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetParentDataProductResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &replica_catalog_models.DataProductModel{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AiravataGetParentDataProductResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetParentDataProductResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetParentDataProductResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetParentDataProductResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetParentDataProductResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getParentDataProduct_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetParentDataProductResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetParentDataProductResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetParentDataProductResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetParentDataProductResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetParentDataProductResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetParentDataProductResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetParentDataProductResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - ProductUri
type AiravataGetChildDataProductsArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  ProductUri string `thrift:"productUri,2,required" db:"productUri" json:"productUri"`
}

func NewAiravataGetChildDataProductsArgs() *AiravataGetChildDataProductsArgs {
  return &AiravataGetChildDataProductsArgs{}
}

var AiravataGetChildDataProductsArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetChildDataProductsArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetChildDataProductsArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetChildDataProductsArgs) GetProductUri() string {
  return p.ProductUri
}
func (p *AiravataGetChildDataProductsArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetChildDataProductsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetProductUri bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProductUri = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetProductUri{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProductUri is not set"));
  }
  return nil
}

func (p *AiravataGetChildDataProductsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetChildDataProductsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ProductUri = v
}
  return nil
}

func (p *AiravataGetChildDataProductsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getChildDataProducts_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetChildDataProductsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetChildDataProductsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("productUri", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:productUri: ", p), err) }
  if err := oprot.WriteString(string(p.ProductUri)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.productUri (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:productUri: ", p), err) }
  return err
}

func (p *AiravataGetChildDataProductsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetChildDataProductsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetChildDataProductsResult struct {
  Success []*replica_catalog_models.DataProductModel `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetChildDataProductsResult() *AiravataGetChildDataProductsResult {
  return &AiravataGetChildDataProductsResult{}
}

var AiravataGetChildDataProductsResult_Success_DEFAULT []*replica_catalog_models.DataProductModel

func (p *AiravataGetChildDataProductsResult) GetSuccess() []*replica_catalog_models.DataProductModel {
  return p.Success
}
var AiravataGetChildDataProductsResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetChildDataProductsResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetChildDataProductsResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetChildDataProductsResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetChildDataProductsResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetChildDataProductsResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetChildDataProductsResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetChildDataProductsResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetChildDataProductsResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetChildDataProductsResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetChildDataProductsResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetChildDataProductsResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetChildDataProductsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetChildDataProductsResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetChildDataProductsResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetChildDataProductsResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetChildDataProductsResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetChildDataProductsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetChildDataProductsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*replica_catalog_models.DataProductModel, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem389 := &replica_catalog_models.DataProductModel{}
    if err := _elem389.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem389), err)
    }
    p.Success = append(p.Success, _elem389)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AiravataGetChildDataProductsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetChildDataProductsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetChildDataProductsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetChildDataProductsResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetChildDataProductsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getChildDataProducts_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetChildDataProductsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetChildDataProductsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetChildDataProductsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetChildDataProductsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetChildDataProductsResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetChildDataProductsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetChildDataProductsResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - ResourceId
//  - ResourceType
//  - UserPermissionList
type AiravataShareResourceWithUsersArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  ResourceId string `thrift:"resourceId,2,required" db:"resourceId" json:"resourceId"`
  ResourceType group_manager_model.ResourceType `thrift:"resourceType,3,required" db:"resourceType" json:"resourceType"`
  UserPermissionList map[string]group_manager_model.ResourcePermissionType `thrift:"userPermissionList,4" db:"userPermissionList" json:"userPermissionList"`
}

func NewAiravataShareResourceWithUsersArgs() *AiravataShareResourceWithUsersArgs {
  return &AiravataShareResourceWithUsersArgs{}
}

var AiravataShareResourceWithUsersArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataShareResourceWithUsersArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataShareResourceWithUsersArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataShareResourceWithUsersArgs) GetResourceId() string {
  return p.ResourceId
}

func (p *AiravataShareResourceWithUsersArgs) GetResourceType() group_manager_model.ResourceType {
  return p.ResourceType
}

func (p *AiravataShareResourceWithUsersArgs) GetUserPermissionList() map[string]group_manager_model.ResourcePermissionType {
  return p.UserPermissionList
}
func (p *AiravataShareResourceWithUsersArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataShareResourceWithUsersArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetResourceId bool = false;
  var issetResourceType bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetResourceId = true
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetResourceType = true
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetResourceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ResourceId is not set"));
  }
  if !issetResourceType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ResourceType is not set"));
  }
  return nil
}

func (p *AiravataShareResourceWithUsersArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataShareResourceWithUsersArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ResourceId = v
}
  return nil
}

func (p *AiravataShareResourceWithUsersArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := group_manager_model.ResourceType(v)
  p.ResourceType = temp
}
  return nil
}

func (p *AiravataShareResourceWithUsersArgs)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]group_manager_model.ResourcePermissionType, size)
  p.UserPermissionList =  tMap
  for i := 0; i < size; i ++ {
var _key390 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key390 = v
}
var _val391 group_manager_model.ResourcePermissionType
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := group_manager_model.ResourcePermissionType(v)
    _val391 = temp
}
    p.UserPermissionList[_key390] = _val391
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AiravataShareResourceWithUsersArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("shareResourceWithUsers_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataShareResourceWithUsersArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataShareResourceWithUsersArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resourceId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resourceId: ", p), err) }
  if err := oprot.WriteString(string(p.ResourceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resourceId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resourceId: ", p), err) }
  return err
}

func (p *AiravataShareResourceWithUsersArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resourceType", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:resourceType: ", p), err) }
  if err := oprot.WriteI32(int32(p.ResourceType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resourceType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:resourceType: ", p), err) }
  return err
}

func (p *AiravataShareResourceWithUsersArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userPermissionList", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:userPermissionList: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(p.UserPermissionList)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.UserPermissionList {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:userPermissionList: ", p), err) }
  return err
}

func (p *AiravataShareResourceWithUsersArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataShareResourceWithUsersArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataShareResourceWithUsersResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataShareResourceWithUsersResult() *AiravataShareResourceWithUsersResult {
  return &AiravataShareResourceWithUsersResult{}
}

var AiravataShareResourceWithUsersResult_Success_DEFAULT bool
func (p *AiravataShareResourceWithUsersResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataShareResourceWithUsersResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataShareResourceWithUsersResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataShareResourceWithUsersResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataShareResourceWithUsersResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataShareResourceWithUsersResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataShareResourceWithUsersResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataShareResourceWithUsersResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataShareResourceWithUsersResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataShareResourceWithUsersResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataShareResourceWithUsersResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataShareResourceWithUsersResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataShareResourceWithUsersResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataShareResourceWithUsersResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataShareResourceWithUsersResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataShareResourceWithUsersResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataShareResourceWithUsersResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataShareResourceWithUsersResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataShareResourceWithUsersResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataShareResourceWithUsersResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataShareResourceWithUsersResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataShareResourceWithUsersResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataShareResourceWithUsersResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataShareResourceWithUsersResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataShareResourceWithUsersResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataShareResourceWithUsersResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("shareResourceWithUsers_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataShareResourceWithUsersResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataShareResourceWithUsersResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataShareResourceWithUsersResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataShareResourceWithUsersResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataShareResourceWithUsersResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataShareResourceWithUsersResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataShareResourceWithUsersResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - ResourceId
//  - ResourceType
//  - UserPermissionList
type AiravataRevokeSharingOfResourceFromUsersArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  ResourceId string `thrift:"resourceId,2,required" db:"resourceId" json:"resourceId"`
  ResourceType group_manager_model.ResourceType `thrift:"resourceType,3,required" db:"resourceType" json:"resourceType"`
  UserPermissionList map[string]group_manager_model.ResourcePermissionType `thrift:"userPermissionList,4" db:"userPermissionList" json:"userPermissionList"`
}

func NewAiravataRevokeSharingOfResourceFromUsersArgs() *AiravataRevokeSharingOfResourceFromUsersArgs {
  return &AiravataRevokeSharingOfResourceFromUsersArgs{}
}

var AiravataRevokeSharingOfResourceFromUsersArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataRevokeSharingOfResourceFromUsersArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataRevokeSharingOfResourceFromUsersArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataRevokeSharingOfResourceFromUsersArgs) GetResourceId() string {
  return p.ResourceId
}

func (p *AiravataRevokeSharingOfResourceFromUsersArgs) GetResourceType() group_manager_model.ResourceType {
  return p.ResourceType
}

func (p *AiravataRevokeSharingOfResourceFromUsersArgs) GetUserPermissionList() map[string]group_manager_model.ResourcePermissionType {
  return p.UserPermissionList
}
func (p *AiravataRevokeSharingOfResourceFromUsersArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataRevokeSharingOfResourceFromUsersArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetResourceId bool = false;
  var issetResourceType bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetResourceId = true
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetResourceType = true
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetResourceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ResourceId is not set"));
  }
  if !issetResourceType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ResourceType is not set"));
  }
  return nil
}

func (p *AiravataRevokeSharingOfResourceFromUsersArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataRevokeSharingOfResourceFromUsersArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ResourceId = v
}
  return nil
}

func (p *AiravataRevokeSharingOfResourceFromUsersArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := group_manager_model.ResourceType(v)
  p.ResourceType = temp
}
  return nil
}

func (p *AiravataRevokeSharingOfResourceFromUsersArgs)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]group_manager_model.ResourcePermissionType, size)
  p.UserPermissionList =  tMap
  for i := 0; i < size; i ++ {
var _key392 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key392 = v
}
var _val393 group_manager_model.ResourcePermissionType
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := group_manager_model.ResourcePermissionType(v)
    _val393 = temp
}
    p.UserPermissionList[_key392] = _val393
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AiravataRevokeSharingOfResourceFromUsersArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("revokeSharingOfResourceFromUsers_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataRevokeSharingOfResourceFromUsersArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataRevokeSharingOfResourceFromUsersArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resourceId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resourceId: ", p), err) }
  if err := oprot.WriteString(string(p.ResourceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resourceId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resourceId: ", p), err) }
  return err
}

func (p *AiravataRevokeSharingOfResourceFromUsersArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resourceType", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:resourceType: ", p), err) }
  if err := oprot.WriteI32(int32(p.ResourceType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resourceType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:resourceType: ", p), err) }
  return err
}

func (p *AiravataRevokeSharingOfResourceFromUsersArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userPermissionList", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:userPermissionList: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(p.UserPermissionList)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.UserPermissionList {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:userPermissionList: ", p), err) }
  return err
}

func (p *AiravataRevokeSharingOfResourceFromUsersArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataRevokeSharingOfResourceFromUsersArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataRevokeSharingOfResourceFromUsersResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataRevokeSharingOfResourceFromUsersResult() *AiravataRevokeSharingOfResourceFromUsersResult {
  return &AiravataRevokeSharingOfResourceFromUsersResult{}
}

var AiravataRevokeSharingOfResourceFromUsersResult_Success_DEFAULT bool
func (p *AiravataRevokeSharingOfResourceFromUsersResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataRevokeSharingOfResourceFromUsersResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataRevokeSharingOfResourceFromUsersResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataRevokeSharingOfResourceFromUsersResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataRevokeSharingOfResourceFromUsersResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataRevokeSharingOfResourceFromUsersResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataRevokeSharingOfResourceFromUsersResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataRevokeSharingOfResourceFromUsersResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataRevokeSharingOfResourceFromUsersResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataRevokeSharingOfResourceFromUsersResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataRevokeSharingOfResourceFromUsersResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataRevokeSharingOfResourceFromUsersResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataRevokeSharingOfResourceFromUsersResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataRevokeSharingOfResourceFromUsersResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataRevokeSharingOfResourceFromUsersResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataRevokeSharingOfResourceFromUsersResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataRevokeSharingOfResourceFromUsersResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataRevokeSharingOfResourceFromUsersResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataRevokeSharingOfResourceFromUsersResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataRevokeSharingOfResourceFromUsersResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataRevokeSharingOfResourceFromUsersResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataRevokeSharingOfResourceFromUsersResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataRevokeSharingOfResourceFromUsersResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataRevokeSharingOfResourceFromUsersResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataRevokeSharingOfResourceFromUsersResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataRevokeSharingOfResourceFromUsersResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("revokeSharingOfResourceFromUsers_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataRevokeSharingOfResourceFromUsersResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataRevokeSharingOfResourceFromUsersResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataRevokeSharingOfResourceFromUsersResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataRevokeSharingOfResourceFromUsersResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataRevokeSharingOfResourceFromUsersResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataRevokeSharingOfResourceFromUsersResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataRevokeSharingOfResourceFromUsersResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - ResourceId
//  - ResourceType
//  - PermissionType
type AiravataGetAllAccessibleUsersArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  ResourceId string `thrift:"resourceId,2,required" db:"resourceId" json:"resourceId"`
  ResourceType group_manager_model.ResourceType `thrift:"resourceType,3,required" db:"resourceType" json:"resourceType"`
  PermissionType group_manager_model.ResourcePermissionType `thrift:"permissionType,4,required" db:"permissionType" json:"permissionType"`
}

func NewAiravataGetAllAccessibleUsersArgs() *AiravataGetAllAccessibleUsersArgs {
  return &AiravataGetAllAccessibleUsersArgs{}
}

var AiravataGetAllAccessibleUsersArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetAllAccessibleUsersArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetAllAccessibleUsersArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetAllAccessibleUsersArgs) GetResourceId() string {
  return p.ResourceId
}

func (p *AiravataGetAllAccessibleUsersArgs) GetResourceType() group_manager_model.ResourceType {
  return p.ResourceType
}

func (p *AiravataGetAllAccessibleUsersArgs) GetPermissionType() group_manager_model.ResourcePermissionType {
  return p.PermissionType
}
func (p *AiravataGetAllAccessibleUsersArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetAllAccessibleUsersArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetResourceId bool = false;
  var issetResourceType bool = false;
  var issetPermissionType bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetResourceId = true
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetResourceType = true
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetPermissionType = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetResourceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ResourceId is not set"));
  }
  if !issetResourceType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ResourceType is not set"));
  }
  if !issetPermissionType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PermissionType is not set"));
  }
  return nil
}

func (p *AiravataGetAllAccessibleUsersArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetAllAccessibleUsersArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ResourceId = v
}
  return nil
}

func (p *AiravataGetAllAccessibleUsersArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := group_manager_model.ResourceType(v)
  p.ResourceType = temp
}
  return nil
}

func (p *AiravataGetAllAccessibleUsersArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := group_manager_model.ResourcePermissionType(v)
  p.PermissionType = temp
}
  return nil
}

func (p *AiravataGetAllAccessibleUsersArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllAccessibleUsers_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAllAccessibleUsersArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetAllAccessibleUsersArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resourceId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resourceId: ", p), err) }
  if err := oprot.WriteString(string(p.ResourceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resourceId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resourceId: ", p), err) }
  return err
}

func (p *AiravataGetAllAccessibleUsersArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resourceType", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:resourceType: ", p), err) }
  if err := oprot.WriteI32(int32(p.ResourceType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resourceType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:resourceType: ", p), err) }
  return err
}

func (p *AiravataGetAllAccessibleUsersArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("permissionType", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:permissionType: ", p), err) }
  if err := oprot.WriteI32(int32(p.PermissionType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.permissionType (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:permissionType: ", p), err) }
  return err
}

func (p *AiravataGetAllAccessibleUsersArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAllAccessibleUsersArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetAllAccessibleUsersResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetAllAccessibleUsersResult() *AiravataGetAllAccessibleUsersResult {
  return &AiravataGetAllAccessibleUsersResult{}
}

var AiravataGetAllAccessibleUsersResult_Success_DEFAULT []string

func (p *AiravataGetAllAccessibleUsersResult) GetSuccess() []string {
  return p.Success
}
var AiravataGetAllAccessibleUsersResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetAllAccessibleUsersResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetAllAccessibleUsersResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetAllAccessibleUsersResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetAllAccessibleUsersResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetAllAccessibleUsersResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetAllAccessibleUsersResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetAllAccessibleUsersResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetAllAccessibleUsersResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetAllAccessibleUsersResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetAllAccessibleUsersResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetAllAccessibleUsersResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetAllAccessibleUsersResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetAllAccessibleUsersResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetAllAccessibleUsersResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetAllAccessibleUsersResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetAllAccessibleUsersResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetAllAccessibleUsersResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetAllAccessibleUsersResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem394 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem394 = v
}
    p.Success = append(p.Success, _elem394)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AiravataGetAllAccessibleUsersResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetAllAccessibleUsersResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetAllAccessibleUsersResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetAllAccessibleUsersResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetAllAccessibleUsersResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllAccessibleUsers_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAllAccessibleUsersResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllAccessibleUsersResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllAccessibleUsersResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllAccessibleUsersResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllAccessibleUsersResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllAccessibleUsersResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAllAccessibleUsersResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GroupModel
type AiravataCreateGroupArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GroupModel *group_manager_model.GroupModel `thrift:"groupModel,2,required" db:"groupModel" json:"groupModel"`
}

func NewAiravataCreateGroupArgs() *AiravataCreateGroupArgs {
  return &AiravataCreateGroupArgs{}
}

var AiravataCreateGroupArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataCreateGroupArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataCreateGroupArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}
var AiravataCreateGroupArgs_GroupModel_DEFAULT *group_manager_model.GroupModel
func (p *AiravataCreateGroupArgs) GetGroupModel() *group_manager_model.GroupModel {
  if !p.IsSetGroupModel() {
    return AiravataCreateGroupArgs_GroupModel_DEFAULT
  }
return p.GroupModel
}
func (p *AiravataCreateGroupArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataCreateGroupArgs) IsSetGroupModel() bool {
  return p.GroupModel != nil
}

func (p *AiravataCreateGroupArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGroupModel bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGroupModel = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGroupModel{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GroupModel is not set"));
  }
  return nil
}

func (p *AiravataCreateGroupArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataCreateGroupArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.GroupModel = &group_manager_model.GroupModel{}
  if err := p.GroupModel.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GroupModel), err)
  }
  return nil
}

func (p *AiravataCreateGroupArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataCreateGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataCreateGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groupModel", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupModel: ", p), err) }
  if err := p.GroupModel.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GroupModel), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupModel: ", p), err) }
  return err
}

func (p *AiravataCreateGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataCreateGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataCreateGroupResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataCreateGroupResult() *AiravataCreateGroupResult {
  return &AiravataCreateGroupResult{}
}

var AiravataCreateGroupResult_Success_DEFAULT string
func (p *AiravataCreateGroupResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return AiravataCreateGroupResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataCreateGroupResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataCreateGroupResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataCreateGroupResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataCreateGroupResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataCreateGroupResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataCreateGroupResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataCreateGroupResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataCreateGroupResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataCreateGroupResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataCreateGroupResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataCreateGroupResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataCreateGroupResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataCreateGroupResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataCreateGroupResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataCreateGroupResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataCreateGroupResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataCreateGroupResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataCreateGroupResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataCreateGroupResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataCreateGroupResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataCreateGroupResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataCreateGroupResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataCreateGroupResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataCreateGroupResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataCreateGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataCreateGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataCreateGroupResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataCreateGroupResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataCreateGroupResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataCreateGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataCreateGroupResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GroupModel
type AiravataUpdateGroupArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GroupModel *group_manager_model.GroupModel `thrift:"groupModel,2,required" db:"groupModel" json:"groupModel"`
}

func NewAiravataUpdateGroupArgs() *AiravataUpdateGroupArgs {
  return &AiravataUpdateGroupArgs{}
}

var AiravataUpdateGroupArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataUpdateGroupArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataUpdateGroupArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}
var AiravataUpdateGroupArgs_GroupModel_DEFAULT *group_manager_model.GroupModel
func (p *AiravataUpdateGroupArgs) GetGroupModel() *group_manager_model.GroupModel {
  if !p.IsSetGroupModel() {
    return AiravataUpdateGroupArgs_GroupModel_DEFAULT
  }
return p.GroupModel
}
func (p *AiravataUpdateGroupArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataUpdateGroupArgs) IsSetGroupModel() bool {
  return p.GroupModel != nil
}

func (p *AiravataUpdateGroupArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGroupModel bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGroupModel = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGroupModel{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GroupModel is not set"));
  }
  return nil
}

func (p *AiravataUpdateGroupArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataUpdateGroupArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.GroupModel = &group_manager_model.GroupModel{}
  if err := p.GroupModel.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GroupModel), err)
  }
  return nil
}

func (p *AiravataUpdateGroupArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataUpdateGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groupModel", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupModel: ", p), err) }
  if err := p.GroupModel.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GroupModel), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupModel: ", p), err) }
  return err
}

func (p *AiravataUpdateGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataUpdateGroupResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataUpdateGroupResult() *AiravataUpdateGroupResult {
  return &AiravataUpdateGroupResult{}
}

var AiravataUpdateGroupResult_Success_DEFAULT bool
func (p *AiravataUpdateGroupResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataUpdateGroupResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataUpdateGroupResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataUpdateGroupResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataUpdateGroupResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataUpdateGroupResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataUpdateGroupResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataUpdateGroupResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataUpdateGroupResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataUpdateGroupResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataUpdateGroupResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataUpdateGroupResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataUpdateGroupResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataUpdateGroupResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataUpdateGroupResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataUpdateGroupResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataUpdateGroupResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataUpdateGroupResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataUpdateGroupResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataUpdateGroupResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataUpdateGroupResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataUpdateGroupResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataUpdateGroupResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataUpdateGroupResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataUpdateGroupResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataUpdateGroupResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataUpdateGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateGroupResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateGroupResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateGroupResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataUpdateGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataUpdateGroupResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GroupId
//  - OwnerId
type AiravataDeleteGroupArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GroupId string `thrift:"groupId,2,required" db:"groupId" json:"groupId"`
  OwnerId string `thrift:"ownerId,3,required" db:"ownerId" json:"ownerId"`
}

func NewAiravataDeleteGroupArgs() *AiravataDeleteGroupArgs {
  return &AiravataDeleteGroupArgs{}
}

var AiravataDeleteGroupArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataDeleteGroupArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataDeleteGroupArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataDeleteGroupArgs) GetGroupId() string {
  return p.GroupId
}

func (p *AiravataDeleteGroupArgs) GetOwnerId() string {
  return p.OwnerId
}
func (p *AiravataDeleteGroupArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataDeleteGroupArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGroupId bool = false;
  var issetOwnerId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGroupId = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetOwnerId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGroupId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GroupId is not set"));
  }
  if !issetOwnerId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field OwnerId is not set"));
  }
  return nil
}

func (p *AiravataDeleteGroupArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataDeleteGroupArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GroupId = v
}
  return nil
}

func (p *AiravataDeleteGroupArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.OwnerId = v
}
  return nil
}

func (p *AiravataDeleteGroupArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeleteGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataDeleteGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groupId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err) }
  if err := oprot.WriteString(string(p.GroupId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err) }
  return err
}

func (p *AiravataDeleteGroupArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ownerId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ownerId: ", p), err) }
  if err := oprot.WriteString(string(p.OwnerId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ownerId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ownerId: ", p), err) }
  return err
}

func (p *AiravataDeleteGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeleteGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataDeleteGroupResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataDeleteGroupResult() *AiravataDeleteGroupResult {
  return &AiravataDeleteGroupResult{}
}

var AiravataDeleteGroupResult_Success_DEFAULT bool
func (p *AiravataDeleteGroupResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AiravataDeleteGroupResult_Success_DEFAULT
  }
return *p.Success
}
var AiravataDeleteGroupResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataDeleteGroupResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataDeleteGroupResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataDeleteGroupResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataDeleteGroupResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataDeleteGroupResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataDeleteGroupResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataDeleteGroupResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataDeleteGroupResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataDeleteGroupResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataDeleteGroupResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataDeleteGroupResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataDeleteGroupResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataDeleteGroupResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataDeleteGroupResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataDeleteGroupResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataDeleteGroupResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataDeleteGroupResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataDeleteGroupResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AiravataDeleteGroupResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataDeleteGroupResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataDeleteGroupResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataDeleteGroupResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataDeleteGroupResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataDeleteGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteGroupResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteGroupResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteGroupResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataDeleteGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataDeleteGroupResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - GroupId
type AiravataGetGroupArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  GroupId string `thrift:"groupId,2,required" db:"groupId" json:"groupId"`
}

func NewAiravataGetGroupArgs() *AiravataGetGroupArgs {
  return &AiravataGetGroupArgs{}
}

var AiravataGetGroupArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetGroupArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetGroupArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetGroupArgs) GetGroupId() string {
  return p.GroupId
}
func (p *AiravataGetGroupArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetGroupArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetGroupId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGroupId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetGroupId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GroupId is not set"));
  }
  return nil
}

func (p *AiravataGetGroupArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetGroupArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GroupId = v
}
  return nil
}

func (p *AiravataGetGroupArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groupId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err) }
  if err := oprot.WriteString(string(p.GroupId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err) }
  return err
}

func (p *AiravataGetGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetGroupResult struct {
  Success *group_manager_model.GroupModel `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetGroupResult() *AiravataGetGroupResult {
  return &AiravataGetGroupResult{}
}

var AiravataGetGroupResult_Success_DEFAULT *group_manager_model.GroupModel
func (p *AiravataGetGroupResult) GetSuccess() *group_manager_model.GroupModel {
  if !p.IsSetSuccess() {
    return AiravataGetGroupResult_Success_DEFAULT
  }
return p.Success
}
var AiravataGetGroupResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetGroupResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetGroupResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetGroupResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetGroupResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetGroupResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetGroupResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetGroupResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetGroupResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetGroupResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetGroupResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetGroupResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetGroupResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetGroupResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetGroupResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetGroupResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetGroupResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetGroupResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetGroupResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &group_manager_model.GroupModel{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AiravataGetGroupResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetGroupResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetGroupResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetGroupResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetGroupResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetGroupResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetGroupResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetGroupResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetGroupResult(%+v)", *p)
}

// Attributes:
//  - AuthzToken
//  - UserName
type AiravataGetAllGroupsUserBelongsArgs struct {
  AuthzToken *security_model.AuthzToken `thrift:"authzToken,1,required" db:"authzToken" json:"authzToken"`
  UserName string `thrift:"userName,2,required" db:"userName" json:"userName"`
}

func NewAiravataGetAllGroupsUserBelongsArgs() *AiravataGetAllGroupsUserBelongsArgs {
  return &AiravataGetAllGroupsUserBelongsArgs{}
}

var AiravataGetAllGroupsUserBelongsArgs_AuthzToken_DEFAULT *security_model.AuthzToken
func (p *AiravataGetAllGroupsUserBelongsArgs) GetAuthzToken() *security_model.AuthzToken {
  if !p.IsSetAuthzToken() {
    return AiravataGetAllGroupsUserBelongsArgs_AuthzToken_DEFAULT
  }
return p.AuthzToken
}

func (p *AiravataGetAllGroupsUserBelongsArgs) GetUserName() string {
  return p.UserName
}
func (p *AiravataGetAllGroupsUserBelongsArgs) IsSetAuthzToken() bool {
  return p.AuthzToken != nil
}

func (p *AiravataGetAllGroupsUserBelongsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAuthzToken bool = false;
  var issetUserName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAuthzToken = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserName = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAuthzToken{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthzToken is not set"));
  }
  if !issetUserName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserName is not set"));
  }
  return nil
}

func (p *AiravataGetAllGroupsUserBelongsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AuthzToken = &security_model.AuthzToken{}
  if err := p.AuthzToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AuthzToken), err)
  }
  return nil
}

func (p *AiravataGetAllGroupsUserBelongsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserName = v
}
  return nil
}

func (p *AiravataGetAllGroupsUserBelongsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllGroupsUserBelongs_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAllGroupsUserBelongsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authzToken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authzToken: ", p), err) }
  if err := p.AuthzToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AuthzToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authzToken: ", p), err) }
  return err
}

func (p *AiravataGetAllGroupsUserBelongsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userName: ", p), err) }
  if err := oprot.WriteString(string(p.UserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userName: ", p), err) }
  return err
}

func (p *AiravataGetAllGroupsUserBelongsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAllGroupsUserBelongsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ire
//  - Ace
//  - Ase
//  - Ae
type AiravataGetAllGroupsUserBelongsResult struct {
  Success []*group_manager_model.GroupModel `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ire *airavata_errors.InvalidRequestException `thrift:"ire,1" db:"ire" json:"ire,omitempty"`
  Ace *airavata_errors.AiravataClientException `thrift:"ace,2" db:"ace" json:"ace,omitempty"`
  Ase *airavata_errors.AiravataSystemException `thrift:"ase,3" db:"ase" json:"ase,omitempty"`
  Ae *airavata_errors.AuthorizationException `thrift:"ae,4" db:"ae" json:"ae,omitempty"`
}

func NewAiravataGetAllGroupsUserBelongsResult() *AiravataGetAllGroupsUserBelongsResult {
  return &AiravataGetAllGroupsUserBelongsResult{}
}

var AiravataGetAllGroupsUserBelongsResult_Success_DEFAULT []*group_manager_model.GroupModel

func (p *AiravataGetAllGroupsUserBelongsResult) GetSuccess() []*group_manager_model.GroupModel {
  return p.Success
}
var AiravataGetAllGroupsUserBelongsResult_Ire_DEFAULT *airavata_errors.InvalidRequestException
func (p *AiravataGetAllGroupsUserBelongsResult) GetIre() *airavata_errors.InvalidRequestException {
  if !p.IsSetIre() {
    return AiravataGetAllGroupsUserBelongsResult_Ire_DEFAULT
  }
return p.Ire
}
var AiravataGetAllGroupsUserBelongsResult_Ace_DEFAULT *airavata_errors.AiravataClientException
func (p *AiravataGetAllGroupsUserBelongsResult) GetAce() *airavata_errors.AiravataClientException {
  if !p.IsSetAce() {
    return AiravataGetAllGroupsUserBelongsResult_Ace_DEFAULT
  }
return p.Ace
}
var AiravataGetAllGroupsUserBelongsResult_Ase_DEFAULT *airavata_errors.AiravataSystemException
func (p *AiravataGetAllGroupsUserBelongsResult) GetAse() *airavata_errors.AiravataSystemException {
  if !p.IsSetAse() {
    return AiravataGetAllGroupsUserBelongsResult_Ase_DEFAULT
  }
return p.Ase
}
var AiravataGetAllGroupsUserBelongsResult_Ae_DEFAULT *airavata_errors.AuthorizationException
func (p *AiravataGetAllGroupsUserBelongsResult) GetAe() *airavata_errors.AuthorizationException {
  if !p.IsSetAe() {
    return AiravataGetAllGroupsUserBelongsResult_Ae_DEFAULT
  }
return p.Ae
}
func (p *AiravataGetAllGroupsUserBelongsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AiravataGetAllGroupsUserBelongsResult) IsSetIre() bool {
  return p.Ire != nil
}

func (p *AiravataGetAllGroupsUserBelongsResult) IsSetAce() bool {
  return p.Ace != nil
}

func (p *AiravataGetAllGroupsUserBelongsResult) IsSetAse() bool {
  return p.Ase != nil
}

func (p *AiravataGetAllGroupsUserBelongsResult) IsSetAe() bool {
  return p.Ae != nil
}

func (p *AiravataGetAllGroupsUserBelongsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AiravataGetAllGroupsUserBelongsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*group_manager_model.GroupModel, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem395 := &group_manager_model.GroupModel{}
    if err := _elem395.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem395), err)
    }
    p.Success = append(p.Success, _elem395)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AiravataGetAllGroupsUserBelongsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ire = &airavata_errors.InvalidRequestException{}
  if err := p.Ire.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ire), err)
  }
  return nil
}

func (p *AiravataGetAllGroupsUserBelongsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ace = &airavata_errors.AiravataClientException{}
  if err := p.Ace.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ace), err)
  }
  return nil
}

func (p *AiravataGetAllGroupsUserBelongsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.Ase = &airavata_errors.AiravataSystemException{}
  if err := p.Ase.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ase), err)
  }
  return nil
}

func (p *AiravataGetAllGroupsUserBelongsResult)  ReadField4(iprot thrift.TProtocol) error {
  p.Ae = &airavata_errors.AuthorizationException{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *AiravataGetAllGroupsUserBelongsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllGroupsUserBelongs_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AiravataGetAllGroupsUserBelongsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllGroupsUserBelongsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIre() {
    if err := oprot.WriteFieldBegin("ire", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ire: ", p), err) }
    if err := p.Ire.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ire), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ire: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllGroupsUserBelongsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAce() {
    if err := oprot.WriteFieldBegin("ace", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ace: ", p), err) }
    if err := p.Ace.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ace), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ace: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllGroupsUserBelongsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAse() {
    if err := oprot.WriteFieldBegin("ase", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ase: ", p), err) }
    if err := p.Ase.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ase), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ase: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllGroupsUserBelongsResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAe() {
    if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ae: ", p), err) }
    if err := p.Ae.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ae: ", p), err) }
  }
  return err
}

func (p *AiravataGetAllGroupsUserBelongsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AiravataGetAllGroupsUserBelongsResult(%+v)", *p)
}


