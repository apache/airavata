// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package application_deployment_model

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"airavata_commons"
	"parallelism_model"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = airavata_commons.GoUnusedProtection__
var _ = parallelism_model.GoUnusedProtection__
// Key Value pairs to be used to set environments
// 
// name:
//   Name of the environment variable such as PATH, LD_LIBRARY_PATH, NETCDF_HOME.
// 
// value:
//   Value of the environment variable to set
// 
// envPathOrder:
//   The order of the setting of the env variables when there are multiple env variables
// 
// Attributes:
//  - Name
//  - Value
//  - EnvPathOrder
type SetEnvPaths struct {
  Name string `thrift:"name,1,required" db:"name" json:"name"`
  Value string `thrift:"value,2,required" db:"value" json:"value"`
  EnvPathOrder *int32 `thrift:"envPathOrder,3" db:"envPathOrder" json:"envPathOrder,omitempty"`
}

func NewSetEnvPaths() *SetEnvPaths {
  return &SetEnvPaths{}
}


func (p *SetEnvPaths) GetName() string {
  return p.Name
}

func (p *SetEnvPaths) GetValue() string {
  return p.Value
}
var SetEnvPaths_EnvPathOrder_DEFAULT int32
func (p *SetEnvPaths) GetEnvPathOrder() int32 {
  if !p.IsSetEnvPathOrder() {
    return SetEnvPaths_EnvPathOrder_DEFAULT
  }
return *p.EnvPathOrder
}
func (p *SetEnvPaths) IsSetEnvPathOrder() bool {
  return p.EnvPathOrder != nil
}

func (p *SetEnvPaths) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetName bool = false;
  var issetValue bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetName = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetValue = true
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"));
  }
  if !issetValue{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Value is not set"));
  }
  return nil
}

func (p *SetEnvPaths)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *SetEnvPaths)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *SetEnvPaths)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.EnvPathOrder = &v
}
  return nil
}

func (p *SetEnvPaths) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SetEnvPaths"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SetEnvPaths) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *SetEnvPaths) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
  if err := oprot.WriteString(string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  return err
}

func (p *SetEnvPaths) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetEnvPathOrder() {
    if err := oprot.WriteFieldBegin("envPathOrder", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:envPathOrder: ", p), err) }
    if err := oprot.WriteI32(int32(*p.EnvPathOrder)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.envPathOrder (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:envPathOrder: ", p), err) }
  }
  return err
}

func (p *SetEnvPaths) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetEnvPaths(%+v)", *p)
}

// Job commands to be used in Pre Job, Post Job and Module Load Commands
// 
// command:
//   The actual command in string format
// 
// commandOrder:
//   Order of the command in the multiple command situation
// 
// Attributes:
//  - Command
//  - CommandOrder
type CommandObject struct {
  Command string `thrift:"command,1,required" db:"command" json:"command"`
  CommandOrder *int32 `thrift:"commandOrder,2" db:"commandOrder" json:"commandOrder,omitempty"`
}

func NewCommandObject() *CommandObject {
  return &CommandObject{}
}


func (p *CommandObject) GetCommand() string {
  return p.Command
}
var CommandObject_CommandOrder_DEFAULT int32
func (p *CommandObject) GetCommandOrder() int32 {
  if !p.IsSetCommandOrder() {
    return CommandObject_CommandOrder_DEFAULT
  }
return *p.CommandOrder
}
func (p *CommandObject) IsSetCommandOrder() bool {
  return p.CommandOrder != nil
}

func (p *CommandObject) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetCommand bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetCommand = true
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetCommand{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Command is not set"));
  }
  return nil
}

func (p *CommandObject)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Command = v
}
  return nil
}

func (p *CommandObject)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CommandOrder = &v
}
  return nil
}

func (p *CommandObject) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CommandObject"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CommandObject) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("command", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:command: ", p), err) }
  if err := oprot.WriteString(string(p.Command)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.command (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:command: ", p), err) }
  return err
}

func (p *CommandObject) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetCommandOrder() {
    if err := oprot.WriteFieldBegin("commandOrder", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:commandOrder: ", p), err) }
    if err := oprot.WriteI32(int32(*p.CommandOrder)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.commandOrder (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:commandOrder: ", p), err) }
  }
  return err
}

func (p *CommandObject) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CommandObject(%+v)", *p)
}

// Application Module Information. A module has to be registered before registering a deployment.
// 
// appModuleId: Airavata Internal Unique Job ID. This is set by the registry.
// 
// appModuleName:
//   Name of the application module.
// 
// appModuleVersion:
//   Version of the application.
// 
// appModuleDescription:
//    Descriprion of the Module
// 
// 
// Attributes:
//  - AppModuleId
//  - AppModuleName
//  - AppModuleVersion
//  - AppModuleDescription
type ApplicationModule struct {
  AppModuleId string `thrift:"appModuleId,1,required" db:"appModuleId" json:"appModuleId"`
  AppModuleName string `thrift:"appModuleName,2,required" db:"appModuleName" json:"appModuleName"`
  AppModuleVersion *string `thrift:"appModuleVersion,3" db:"appModuleVersion" json:"appModuleVersion,omitempty"`
  AppModuleDescription *string `thrift:"appModuleDescription,4" db:"appModuleDescription" json:"appModuleDescription,omitempty"`
}

func NewApplicationModule() *ApplicationModule {
  return &ApplicationModule{
AppModuleId: "DO_NOT_SET_AT_CLIENTS",
}
}


func (p *ApplicationModule) GetAppModuleId() string {
  return p.AppModuleId
}

func (p *ApplicationModule) GetAppModuleName() string {
  return p.AppModuleName
}
var ApplicationModule_AppModuleVersion_DEFAULT string
func (p *ApplicationModule) GetAppModuleVersion() string {
  if !p.IsSetAppModuleVersion() {
    return ApplicationModule_AppModuleVersion_DEFAULT
  }
return *p.AppModuleVersion
}
var ApplicationModule_AppModuleDescription_DEFAULT string
func (p *ApplicationModule) GetAppModuleDescription() string {
  if !p.IsSetAppModuleDescription() {
    return ApplicationModule_AppModuleDescription_DEFAULT
  }
return *p.AppModuleDescription
}
func (p *ApplicationModule) IsSetAppModuleVersion() bool {
  return p.AppModuleVersion != nil
}

func (p *ApplicationModule) IsSetAppModuleDescription() bool {
  return p.AppModuleDescription != nil
}

func (p *ApplicationModule) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAppModuleId bool = false;
  var issetAppModuleName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAppModuleId = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAppModuleName = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAppModuleId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AppModuleId is not set"));
  }
  if !issetAppModuleName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AppModuleName is not set"));
  }
  return nil
}

func (p *ApplicationModule)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AppModuleId = v
}
  return nil
}

func (p *ApplicationModule)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AppModuleName = v
}
  return nil
}

func (p *ApplicationModule)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AppModuleVersion = &v
}
  return nil
}

func (p *ApplicationModule)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.AppModuleDescription = &v
}
  return nil
}

func (p *ApplicationModule) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ApplicationModule"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ApplicationModule) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appModuleId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:appModuleId: ", p), err) }
  if err := oprot.WriteString(string(p.AppModuleId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appModuleId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:appModuleId: ", p), err) }
  return err
}

func (p *ApplicationModule) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appModuleName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appModuleName: ", p), err) }
  if err := oprot.WriteString(string(p.AppModuleName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appModuleName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appModuleName: ", p), err) }
  return err
}

func (p *ApplicationModule) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAppModuleVersion() {
    if err := oprot.WriteFieldBegin("appModuleVersion", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:appModuleVersion: ", p), err) }
    if err := oprot.WriteString(string(*p.AppModuleVersion)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.appModuleVersion (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:appModuleVersion: ", p), err) }
  }
  return err
}

func (p *ApplicationModule) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAppModuleDescription() {
    if err := oprot.WriteFieldBegin("appModuleDescription", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:appModuleDescription: ", p), err) }
    if err := oprot.WriteString(string(*p.AppModuleDescription)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.appModuleDescription (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:appModuleDescription: ", p), err) }
  }
  return err
}

func (p *ApplicationModule) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ApplicationModule(%+v)", *p)
}

// Application Deployment Description
// 
// appDeploymentId: Airavata Internal Unique Job ID. This is set by the registry.
// 
// appModuleName:
//   Application Module Name. This has to be precise describing the binary.
// 
// computeHostId:
//   This ID maps application deployment to a particular resource previously described within Airavata.
//   Example: Stampede is first registered and refered when registering WRF.
// 
// moduleLoadCmd:
//  Command string to load modules. This will be placed in the job submisison
//  Ex: module load amber
// 
// libPrependPaths:
//  prepend to a path variable the value
// 
// libAppendPaths:
//  append to a path variable the value
// 
// setEnvironment:
//  assigns to the environment variable "NAME" the value
// 
// 
// Attributes:
//  - AppDeploymentId
//  - AppModuleId
//  - ComputeHostId
//  - ExecutablePath
//  - Parallelism
//  - AppDeploymentDescription
//  - ModuleLoadCmds
//  - LibPrependPaths
//  - LibAppendPaths
//  - SetEnvironment
//  - PreJobCommands
//  - PostJobCommands
//  - DefaultQueueName
//  - DefaultNodeCount
//  - DefaultCPUCount
//  - DefaultWalltime
//  - EditableByUser
type ApplicationDeploymentDescription struct {
  AppDeploymentId string `thrift:"appDeploymentId,1,required" db:"appDeploymentId" json:"appDeploymentId"`
  AppModuleId string `thrift:"appModuleId,2,required" db:"appModuleId" json:"appModuleId"`
  ComputeHostId string `thrift:"computeHostId,3,required" db:"computeHostId" json:"computeHostId"`
  ExecutablePath string `thrift:"executablePath,4,required" db:"executablePath" json:"executablePath"`
  Parallelism parallelism_model.ApplicationParallelismType `thrift:"parallelism,5,required" db:"parallelism" json:"parallelism"`
  AppDeploymentDescription *string `thrift:"appDeploymentDescription,6" db:"appDeploymentDescription" json:"appDeploymentDescription,omitempty"`
  ModuleLoadCmds []*CommandObject `thrift:"moduleLoadCmds,7" db:"moduleLoadCmds" json:"moduleLoadCmds,omitempty"`
  LibPrependPaths []*SetEnvPaths `thrift:"libPrependPaths,8" db:"libPrependPaths" json:"libPrependPaths,omitempty"`
  LibAppendPaths []*SetEnvPaths `thrift:"libAppendPaths,9" db:"libAppendPaths" json:"libAppendPaths,omitempty"`
  SetEnvironment []*SetEnvPaths `thrift:"setEnvironment,10" db:"setEnvironment" json:"setEnvironment,omitempty"`
  PreJobCommands []*CommandObject `thrift:"preJobCommands,11" db:"preJobCommands" json:"preJobCommands,omitempty"`
  PostJobCommands []*CommandObject `thrift:"postJobCommands,12" db:"postJobCommands" json:"postJobCommands,omitempty"`
  DefaultQueueName *string `thrift:"defaultQueueName,13" db:"defaultQueueName" json:"defaultQueueName,omitempty"`
  DefaultNodeCount *int32 `thrift:"defaultNodeCount,14" db:"defaultNodeCount" json:"defaultNodeCount,omitempty"`
  DefaultCPUCount *int32 `thrift:"defaultCPUCount,15" db:"defaultCPUCount" json:"defaultCPUCount,omitempty"`
  DefaultWalltime *int32 `thrift:"defaultWalltime,16" db:"defaultWalltime" json:"defaultWalltime,omitempty"`
  EditableByUser *bool `thrift:"editableByUser,17" db:"editableByUser" json:"editableByUser,omitempty"`
}

func NewApplicationDeploymentDescription() *ApplicationDeploymentDescription {
  return &ApplicationDeploymentDescription{
AppDeploymentId: "DO_NOT_SET_AT_CLIENTS",

Parallelism: 0,
}
}


func (p *ApplicationDeploymentDescription) GetAppDeploymentId() string {
  return p.AppDeploymentId
}

func (p *ApplicationDeploymentDescription) GetAppModuleId() string {
  return p.AppModuleId
}

func (p *ApplicationDeploymentDescription) GetComputeHostId() string {
  return p.ComputeHostId
}

func (p *ApplicationDeploymentDescription) GetExecutablePath() string {
  return p.ExecutablePath
}

func (p *ApplicationDeploymentDescription) GetParallelism() parallelism_model.ApplicationParallelismType {
  return p.Parallelism
}
var ApplicationDeploymentDescription_AppDeploymentDescription_DEFAULT string
func (p *ApplicationDeploymentDescription) GetAppDeploymentDescription() string {
  if !p.IsSetAppDeploymentDescription() {
    return ApplicationDeploymentDescription_AppDeploymentDescription_DEFAULT
  }
return *p.AppDeploymentDescription
}
var ApplicationDeploymentDescription_ModuleLoadCmds_DEFAULT []*CommandObject

func (p *ApplicationDeploymentDescription) GetModuleLoadCmds() []*CommandObject {
  return p.ModuleLoadCmds
}
var ApplicationDeploymentDescription_LibPrependPaths_DEFAULT []*SetEnvPaths

func (p *ApplicationDeploymentDescription) GetLibPrependPaths() []*SetEnvPaths {
  return p.LibPrependPaths
}
var ApplicationDeploymentDescription_LibAppendPaths_DEFAULT []*SetEnvPaths

func (p *ApplicationDeploymentDescription) GetLibAppendPaths() []*SetEnvPaths {
  return p.LibAppendPaths
}
var ApplicationDeploymentDescription_SetEnvironment_DEFAULT []*SetEnvPaths

func (p *ApplicationDeploymentDescription) GetSetEnvironment() []*SetEnvPaths {
  return p.SetEnvironment
}
var ApplicationDeploymentDescription_PreJobCommands_DEFAULT []*CommandObject

func (p *ApplicationDeploymentDescription) GetPreJobCommands() []*CommandObject {
  return p.PreJobCommands
}
var ApplicationDeploymentDescription_PostJobCommands_DEFAULT []*CommandObject

func (p *ApplicationDeploymentDescription) GetPostJobCommands() []*CommandObject {
  return p.PostJobCommands
}
var ApplicationDeploymentDescription_DefaultQueueName_DEFAULT string
func (p *ApplicationDeploymentDescription) GetDefaultQueueName() string {
  if !p.IsSetDefaultQueueName() {
    return ApplicationDeploymentDescription_DefaultQueueName_DEFAULT
  }
return *p.DefaultQueueName
}
var ApplicationDeploymentDescription_DefaultNodeCount_DEFAULT int32
func (p *ApplicationDeploymentDescription) GetDefaultNodeCount() int32 {
  if !p.IsSetDefaultNodeCount() {
    return ApplicationDeploymentDescription_DefaultNodeCount_DEFAULT
  }
return *p.DefaultNodeCount
}
var ApplicationDeploymentDescription_DefaultCPUCount_DEFAULT int32
func (p *ApplicationDeploymentDescription) GetDefaultCPUCount() int32 {
  if !p.IsSetDefaultCPUCount() {
    return ApplicationDeploymentDescription_DefaultCPUCount_DEFAULT
  }
return *p.DefaultCPUCount
}
var ApplicationDeploymentDescription_DefaultWalltime_DEFAULT int32
func (p *ApplicationDeploymentDescription) GetDefaultWalltime() int32 {
  if !p.IsSetDefaultWalltime() {
    return ApplicationDeploymentDescription_DefaultWalltime_DEFAULT
  }
return *p.DefaultWalltime
}
var ApplicationDeploymentDescription_EditableByUser_DEFAULT bool
func (p *ApplicationDeploymentDescription) GetEditableByUser() bool {
  if !p.IsSetEditableByUser() {
    return ApplicationDeploymentDescription_EditableByUser_DEFAULT
  }
return *p.EditableByUser
}
func (p *ApplicationDeploymentDescription) IsSetAppDeploymentDescription() bool {
  return p.AppDeploymentDescription != nil
}

func (p *ApplicationDeploymentDescription) IsSetModuleLoadCmds() bool {
  return p.ModuleLoadCmds != nil
}

func (p *ApplicationDeploymentDescription) IsSetLibPrependPaths() bool {
  return p.LibPrependPaths != nil
}

func (p *ApplicationDeploymentDescription) IsSetLibAppendPaths() bool {
  return p.LibAppendPaths != nil
}

func (p *ApplicationDeploymentDescription) IsSetSetEnvironment() bool {
  return p.SetEnvironment != nil
}

func (p *ApplicationDeploymentDescription) IsSetPreJobCommands() bool {
  return p.PreJobCommands != nil
}

func (p *ApplicationDeploymentDescription) IsSetPostJobCommands() bool {
  return p.PostJobCommands != nil
}

func (p *ApplicationDeploymentDescription) IsSetDefaultQueueName() bool {
  return p.DefaultQueueName != nil
}

func (p *ApplicationDeploymentDescription) IsSetDefaultNodeCount() bool {
  return p.DefaultNodeCount != nil
}

func (p *ApplicationDeploymentDescription) IsSetDefaultCPUCount() bool {
  return p.DefaultCPUCount != nil
}

func (p *ApplicationDeploymentDescription) IsSetDefaultWalltime() bool {
  return p.DefaultWalltime != nil
}

func (p *ApplicationDeploymentDescription) IsSetEditableByUser() bool {
  return p.EditableByUser != nil
}

func (p *ApplicationDeploymentDescription) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAppDeploymentId bool = false;
  var issetAppModuleId bool = false;
  var issetComputeHostId bool = false;
  var issetExecutablePath bool = false;
  var issetParallelism bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAppDeploymentId = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAppModuleId = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetComputeHostId = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetExecutablePath = true
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetParallelism = true
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAppDeploymentId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AppDeploymentId is not set"));
  }
  if !issetAppModuleId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AppModuleId is not set"));
  }
  if !issetComputeHostId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ComputeHostId is not set"));
  }
  if !issetExecutablePath{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ExecutablePath is not set"));
  }
  if !issetParallelism{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Parallelism is not set"));
  }
  return nil
}

func (p *ApplicationDeploymentDescription)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AppDeploymentId = v
}
  return nil
}

func (p *ApplicationDeploymentDescription)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AppModuleId = v
}
  return nil
}

func (p *ApplicationDeploymentDescription)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ComputeHostId = v
}
  return nil
}

func (p *ApplicationDeploymentDescription)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ExecutablePath = v
}
  return nil
}

func (p *ApplicationDeploymentDescription)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := parallelism_model.ApplicationParallelismType(v)
  p.Parallelism = temp
}
  return nil
}

func (p *ApplicationDeploymentDescription)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.AppDeploymentDescription = &v
}
  return nil
}

func (p *ApplicationDeploymentDescription)  ReadField7(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*CommandObject, 0, size)
  p.ModuleLoadCmds =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &CommandObject{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.ModuleLoadCmds = append(p.ModuleLoadCmds, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ApplicationDeploymentDescription)  ReadField8(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SetEnvPaths, 0, size)
  p.LibPrependPaths =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &SetEnvPaths{}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.LibPrependPaths = append(p.LibPrependPaths, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ApplicationDeploymentDescription)  ReadField9(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SetEnvPaths, 0, size)
  p.LibAppendPaths =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &SetEnvPaths{}
    if err := _elem2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.LibAppendPaths = append(p.LibAppendPaths, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ApplicationDeploymentDescription)  ReadField10(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SetEnvPaths, 0, size)
  p.SetEnvironment =  tSlice
  for i := 0; i < size; i ++ {
    _elem3 := &SetEnvPaths{}
    if err := _elem3.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
    }
    p.SetEnvironment = append(p.SetEnvironment, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ApplicationDeploymentDescription)  ReadField11(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*CommandObject, 0, size)
  p.PreJobCommands =  tSlice
  for i := 0; i < size; i ++ {
    _elem4 := &CommandObject{}
    if err := _elem4.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
    }
    p.PreJobCommands = append(p.PreJobCommands, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ApplicationDeploymentDescription)  ReadField12(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*CommandObject, 0, size)
  p.PostJobCommands =  tSlice
  for i := 0; i < size; i ++ {
    _elem5 := &CommandObject{}
    if err := _elem5.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem5), err)
    }
    p.PostJobCommands = append(p.PostJobCommands, _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ApplicationDeploymentDescription)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.DefaultQueueName = &v
}
  return nil
}

func (p *ApplicationDeploymentDescription)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.DefaultNodeCount = &v
}
  return nil
}

func (p *ApplicationDeploymentDescription)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.DefaultCPUCount = &v
}
  return nil
}

func (p *ApplicationDeploymentDescription)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.DefaultWalltime = &v
}
  return nil
}

func (p *ApplicationDeploymentDescription)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.EditableByUser = &v
}
  return nil
}

func (p *ApplicationDeploymentDescription) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ApplicationDeploymentDescription"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ApplicationDeploymentDescription) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appDeploymentId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:appDeploymentId: ", p), err) }
  if err := oprot.WriteString(string(p.AppDeploymentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appDeploymentId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:appDeploymentId: ", p), err) }
  return err
}

func (p *ApplicationDeploymentDescription) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appModuleId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appModuleId: ", p), err) }
  if err := oprot.WriteString(string(p.AppModuleId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appModuleId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appModuleId: ", p), err) }
  return err
}

func (p *ApplicationDeploymentDescription) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("computeHostId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:computeHostId: ", p), err) }
  if err := oprot.WriteString(string(p.ComputeHostId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.computeHostId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:computeHostId: ", p), err) }
  return err
}

func (p *ApplicationDeploymentDescription) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("executablePath", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:executablePath: ", p), err) }
  if err := oprot.WriteString(string(p.ExecutablePath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.executablePath (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:executablePath: ", p), err) }
  return err
}

func (p *ApplicationDeploymentDescription) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("parallelism", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:parallelism: ", p), err) }
  if err := oprot.WriteI32(int32(p.Parallelism)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.parallelism (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:parallelism: ", p), err) }
  return err
}

func (p *ApplicationDeploymentDescription) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetAppDeploymentDescription() {
    if err := oprot.WriteFieldBegin("appDeploymentDescription", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:appDeploymentDescription: ", p), err) }
    if err := oprot.WriteString(string(*p.AppDeploymentDescription)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.appDeploymentDescription (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:appDeploymentDescription: ", p), err) }
  }
  return err
}

func (p *ApplicationDeploymentDescription) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetModuleLoadCmds() {
    if err := oprot.WriteFieldBegin("moduleLoadCmds", thrift.LIST, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:moduleLoadCmds: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ModuleLoadCmds)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ModuleLoadCmds {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:moduleLoadCmds: ", p), err) }
  }
  return err
}

func (p *ApplicationDeploymentDescription) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetLibPrependPaths() {
    if err := oprot.WriteFieldBegin("libPrependPaths", thrift.LIST, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:libPrependPaths: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.LibPrependPaths)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.LibPrependPaths {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:libPrependPaths: ", p), err) }
  }
  return err
}

func (p *ApplicationDeploymentDescription) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetLibAppendPaths() {
    if err := oprot.WriteFieldBegin("libAppendPaths", thrift.LIST, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:libAppendPaths: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.LibAppendPaths)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.LibAppendPaths {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:libAppendPaths: ", p), err) }
  }
  return err
}

func (p *ApplicationDeploymentDescription) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetSetEnvironment() {
    if err := oprot.WriteFieldBegin("setEnvironment", thrift.LIST, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:setEnvironment: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SetEnvironment)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.SetEnvironment {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:setEnvironment: ", p), err) }
  }
  return err
}

func (p *ApplicationDeploymentDescription) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetPreJobCommands() {
    if err := oprot.WriteFieldBegin("preJobCommands", thrift.LIST, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:preJobCommands: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PreJobCommands)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.PreJobCommands {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:preJobCommands: ", p), err) }
  }
  return err
}

func (p *ApplicationDeploymentDescription) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetPostJobCommands() {
    if err := oprot.WriteFieldBegin("postJobCommands", thrift.LIST, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:postJobCommands: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PostJobCommands)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.PostJobCommands {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:postJobCommands: ", p), err) }
  }
  return err
}

func (p *ApplicationDeploymentDescription) writeField13(oprot thrift.TProtocol) (err error) {
  if p.IsSetDefaultQueueName() {
    if err := oprot.WriteFieldBegin("defaultQueueName", thrift.STRING, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:defaultQueueName: ", p), err) }
    if err := oprot.WriteString(string(*p.DefaultQueueName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.defaultQueueName (13) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:defaultQueueName: ", p), err) }
  }
  return err
}

func (p *ApplicationDeploymentDescription) writeField14(oprot thrift.TProtocol) (err error) {
  if p.IsSetDefaultNodeCount() {
    if err := oprot.WriteFieldBegin("defaultNodeCount", thrift.I32, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:defaultNodeCount: ", p), err) }
    if err := oprot.WriteI32(int32(*p.DefaultNodeCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.defaultNodeCount (14) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:defaultNodeCount: ", p), err) }
  }
  return err
}

func (p *ApplicationDeploymentDescription) writeField15(oprot thrift.TProtocol) (err error) {
  if p.IsSetDefaultCPUCount() {
    if err := oprot.WriteFieldBegin("defaultCPUCount", thrift.I32, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:defaultCPUCount: ", p), err) }
    if err := oprot.WriteI32(int32(*p.DefaultCPUCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.defaultCPUCount (15) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:defaultCPUCount: ", p), err) }
  }
  return err
}

func (p *ApplicationDeploymentDescription) writeField16(oprot thrift.TProtocol) (err error) {
  if p.IsSetDefaultWalltime() {
    if err := oprot.WriteFieldBegin("defaultWalltime", thrift.I32, 16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:defaultWalltime: ", p), err) }
    if err := oprot.WriteI32(int32(*p.DefaultWalltime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.defaultWalltime (16) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 16:defaultWalltime: ", p), err) }
  }
  return err
}

func (p *ApplicationDeploymentDescription) writeField17(oprot thrift.TProtocol) (err error) {
  if p.IsSetEditableByUser() {
    if err := oprot.WriteFieldBegin("editableByUser", thrift.BOOL, 17); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:editableByUser: ", p), err) }
    if err := oprot.WriteBool(bool(*p.EditableByUser)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.editableByUser (17) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 17:editableByUser: ", p), err) }
  }
  return err
}

func (p *ApplicationDeploymentDescription) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ApplicationDeploymentDescription(%+v)", *p)
}

