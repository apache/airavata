// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package compute_resource_model

import (
	"bytes"
	"reflect"
	"database/sql/driver"
	"errors"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"airavata_commons"
	"parallelism_model"
	"data_movement_models"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = airavata_commons.GoUnusedProtection__
var _ = parallelism_model.GoUnusedProtection__
var _ = data_movement_models.GoUnusedProtection__
//* Enumeration of local resource job manager types supported by Airavata
//*
//* FORK:
//*  Forking of commands without any job manager
//*
//* PBS:
//*  Job manager supporting the Portal Batch System (PBS) protocol. Some examples include TORQUE, PBSPro, Grid Engine.
//*
//* SLURM:
//*  The Simple Linux Utility for Resource Management is a open source workload manager.
// *
// * UGE:
// *  Univa Grid Engine, a variation of PBS implementation.
// *
// * LSF:
// *  IBM Platform Load Sharing Facility is dominantly installed on IBM clusters.
//*
type ResourceJobManagerType int64
const (
  ResourceJobManagerType_FORK ResourceJobManagerType = 0
  ResourceJobManagerType_PBS ResourceJobManagerType = 1
  ResourceJobManagerType_SLURM ResourceJobManagerType = 2
  ResourceJobManagerType_LSF ResourceJobManagerType = 3
  ResourceJobManagerType_UGE ResourceJobManagerType = 4
  ResourceJobManagerType_CLOUD ResourceJobManagerType = 5
  ResourceJobManagerType_AIRAVATA_CUSTOM ResourceJobManagerType = 6
)

func (p ResourceJobManagerType) String() string {
  switch p {
  case ResourceJobManagerType_FORK: return "FORK"
  case ResourceJobManagerType_PBS: return "PBS"
  case ResourceJobManagerType_SLURM: return "SLURM"
  case ResourceJobManagerType_LSF: return "LSF"
  case ResourceJobManagerType_UGE: return "UGE"
  case ResourceJobManagerType_CLOUD: return "CLOUD"
  case ResourceJobManagerType_AIRAVATA_CUSTOM: return "AIRAVATA_CUSTOM"
  }
  return "<UNSET>"
}

func ResourceJobManagerTypeFromString(s string) (ResourceJobManagerType, error) {
  switch s {
  case "FORK": return ResourceJobManagerType_FORK, nil 
  case "PBS": return ResourceJobManagerType_PBS, nil 
  case "SLURM": return ResourceJobManagerType_SLURM, nil 
  case "LSF": return ResourceJobManagerType_LSF, nil 
  case "UGE": return ResourceJobManagerType_UGE, nil 
  case "CLOUD": return ResourceJobManagerType_CLOUD, nil 
  case "AIRAVATA_CUSTOM": return ResourceJobManagerType_AIRAVATA_CUSTOM, nil 
  }
  return ResourceJobManagerType(0), fmt.Errorf("not a valid ResourceJobManagerType string")
}


func ResourceJobManagerTypePtr(v ResourceJobManagerType) *ResourceJobManagerType { return &v }

func (p ResourceJobManagerType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ResourceJobManagerType) UnmarshalText(text []byte) error {
q, err := ResourceJobManagerTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ResourceJobManagerType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ResourceJobManagerType(v)
return nil
}

func (p * ResourceJobManagerType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//Enumeration of resource job manager commands
//
//SUBMISSION:
// Ex: qsub, sbatch
//
//JOBMONITORING:
// Ex: qstat, squeue
//
//DELETION:
// Ex: qdel, scancel
//
//CHECK_JOB:
// Detailed Status about the Job. Ex: checkjob
//
//SHOW_QUEUE:
// List of Queued Job by the schedular. Ex: showq
//
//SHOW_RESERVATION:
// List all reservations. Ex:showres, show_res
//
//SHOW_START:
// Display the start time of the specified job. Ex: showstart
//
type JobManagerCommand int64
const (
  JobManagerCommand_SUBMISSION JobManagerCommand = 0
  JobManagerCommand_JOB_MONITORING JobManagerCommand = 1
  JobManagerCommand_DELETION JobManagerCommand = 2
  JobManagerCommand_CHECK_JOB JobManagerCommand = 3
  JobManagerCommand_SHOW_QUEUE JobManagerCommand = 4
  JobManagerCommand_SHOW_RESERVATION JobManagerCommand = 5
  JobManagerCommand_SHOW_START JobManagerCommand = 6
)

func (p JobManagerCommand) String() string {
  switch p {
  case JobManagerCommand_SUBMISSION: return "SUBMISSION"
  case JobManagerCommand_JOB_MONITORING: return "JOB_MONITORING"
  case JobManagerCommand_DELETION: return "DELETION"
  case JobManagerCommand_CHECK_JOB: return "CHECK_JOB"
  case JobManagerCommand_SHOW_QUEUE: return "SHOW_QUEUE"
  case JobManagerCommand_SHOW_RESERVATION: return "SHOW_RESERVATION"
  case JobManagerCommand_SHOW_START: return "SHOW_START"
  }
  return "<UNSET>"
}

func JobManagerCommandFromString(s string) (JobManagerCommand, error) {
  switch s {
  case "SUBMISSION": return JobManagerCommand_SUBMISSION, nil 
  case "JOB_MONITORING": return JobManagerCommand_JOB_MONITORING, nil 
  case "DELETION": return JobManagerCommand_DELETION, nil 
  case "CHECK_JOB": return JobManagerCommand_CHECK_JOB, nil 
  case "SHOW_QUEUE": return JobManagerCommand_SHOW_QUEUE, nil 
  case "SHOW_RESERVATION": return JobManagerCommand_SHOW_RESERVATION, nil 
  case "SHOW_START": return JobManagerCommand_SHOW_START, nil 
  }
  return JobManagerCommand(0), fmt.Errorf("not a valid JobManagerCommand string")
}


func JobManagerCommandPtr(v JobManagerCommand) *JobManagerCommand { return &v }

func (p JobManagerCommand) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *JobManagerCommand) UnmarshalText(text []byte) error {
q, err := JobManagerCommandFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *JobManagerCommand) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = JobManagerCommand(v)
return nil
}

func (p * JobManagerCommand) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//Enumeration of File Systems on the resource
//
//FORK:
// Forking of commands without any job manager
//
//PBS:
// Job manager supporting the Portal Batch System (PBS) protocol. Some examples include TORQUE, PBSPro, Grid Engine.
//
//UGE:
// Univa Grid Engine, a variation of PBS implementation.
//
//SLURM:
// The Simple Linux Utility for Resource Management is a open source workload manager.
//
type FileSystems int64
const (
  FileSystems_HOME FileSystems = 0
  FileSystems_WORK FileSystems = 1
  FileSystems_LOCALTMP FileSystems = 2
  FileSystems_SCRATCH FileSystems = 3
  FileSystems_ARCHIVE FileSystems = 4
)

func (p FileSystems) String() string {
  switch p {
  case FileSystems_HOME: return "HOME"
  case FileSystems_WORK: return "WORK"
  case FileSystems_LOCALTMP: return "LOCALTMP"
  case FileSystems_SCRATCH: return "SCRATCH"
  case FileSystems_ARCHIVE: return "ARCHIVE"
  }
  return "<UNSET>"
}

func FileSystemsFromString(s string) (FileSystems, error) {
  switch s {
  case "HOME": return FileSystems_HOME, nil 
  case "WORK": return FileSystems_WORK, nil 
  case "LOCALTMP": return FileSystems_LOCALTMP, nil 
  case "SCRATCH": return FileSystems_SCRATCH, nil 
  case "ARCHIVE": return FileSystems_ARCHIVE, nil 
  }
  return FileSystems(0), fmt.Errorf("not a valid FileSystems string")
}


func FileSystemsPtr(v FileSystems) *FileSystems { return &v }

func (p FileSystems) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *FileSystems) UnmarshalText(text []byte) error {
q, err := FileSystemsFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *FileSystems) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = FileSystems(v)
return nil
}

func (p * FileSystems) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//Enumeration of Airavata supported Job Submission Mechanisms for High Performance Computing Clusters.
//
//SSH:
// Execute remote job submission commands using via secure shell protocol.
//
//GRAM:
// Execute remote jobs via Globus GRAM service.
//
//UNICORE:
// Execute remote jobs via Unicore services
//
type JobSubmissionProtocol int64
const (
  JobSubmissionProtocol_LOCAL JobSubmissionProtocol = 0
  JobSubmissionProtocol_SSH JobSubmissionProtocol = 1
  JobSubmissionProtocol_GLOBUS JobSubmissionProtocol = 2
  JobSubmissionProtocol_UNICORE JobSubmissionProtocol = 3
  JobSubmissionProtocol_CLOUD JobSubmissionProtocol = 4
  JobSubmissionProtocol_SSH_FORK JobSubmissionProtocol = 5
  JobSubmissionProtocol_LOCAL_FORK JobSubmissionProtocol = 6
)

func (p JobSubmissionProtocol) String() string {
  switch p {
  case JobSubmissionProtocol_LOCAL: return "LOCAL"
  case JobSubmissionProtocol_SSH: return "SSH"
  case JobSubmissionProtocol_GLOBUS: return "GLOBUS"
  case JobSubmissionProtocol_UNICORE: return "UNICORE"
  case JobSubmissionProtocol_CLOUD: return "CLOUD"
  case JobSubmissionProtocol_SSH_FORK: return "SSH_FORK"
  case JobSubmissionProtocol_LOCAL_FORK: return "LOCAL_FORK"
  }
  return "<UNSET>"
}

func JobSubmissionProtocolFromString(s string) (JobSubmissionProtocol, error) {
  switch s {
  case "LOCAL": return JobSubmissionProtocol_LOCAL, nil 
  case "SSH": return JobSubmissionProtocol_SSH, nil 
  case "GLOBUS": return JobSubmissionProtocol_GLOBUS, nil 
  case "UNICORE": return JobSubmissionProtocol_UNICORE, nil 
  case "CLOUD": return JobSubmissionProtocol_CLOUD, nil 
  case "SSH_FORK": return JobSubmissionProtocol_SSH_FORK, nil 
  case "LOCAL_FORK": return JobSubmissionProtocol_LOCAL_FORK, nil 
  }
  return JobSubmissionProtocol(0), fmt.Errorf("not a valid JobSubmissionProtocol string")
}


func JobSubmissionProtocolPtr(v JobSubmissionProtocol) *JobSubmissionProtocol { return &v }

func (p JobSubmissionProtocol) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *JobSubmissionProtocol) UnmarshalText(text []byte) error {
q, err := JobSubmissionProtocolFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *JobSubmissionProtocol) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = JobSubmissionProtocol(v)
return nil
}

func (p * JobSubmissionProtocol) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//Monitoring modes
//
//POLL_JOB_MANAGER:
//GFac need to pull job status changes.
//
//XSEDE_AMQP_SUBSCRIBE:
//Server will publish job status changes to amqp servert.
//
//
type MonitorMode int64
const (
  MonitorMode_POLL_JOB_MANAGER MonitorMode = 0
  MonitorMode_CLOUD_JOB_MONITOR MonitorMode = 1
  MonitorMode_JOB_EMAIL_NOTIFICATION_MONITOR MonitorMode = 2
  MonitorMode_XSEDE_AMQP_SUBSCRIBE MonitorMode = 3
  MonitorMode_FORK MonitorMode = 4
  MonitorMode_LOCAL MonitorMode = 5
)

func (p MonitorMode) String() string {
  switch p {
  case MonitorMode_POLL_JOB_MANAGER: return "POLL_JOB_MANAGER"
  case MonitorMode_CLOUD_JOB_MONITOR: return "CLOUD_JOB_MONITOR"
  case MonitorMode_JOB_EMAIL_NOTIFICATION_MONITOR: return "JOB_EMAIL_NOTIFICATION_MONITOR"
  case MonitorMode_XSEDE_AMQP_SUBSCRIBE: return "XSEDE_AMQP_SUBSCRIBE"
  case MonitorMode_FORK: return "FORK"
  case MonitorMode_LOCAL: return "LOCAL"
  }
  return "<UNSET>"
}

func MonitorModeFromString(s string) (MonitorMode, error) {
  switch s {
  case "POLL_JOB_MANAGER": return MonitorMode_POLL_JOB_MANAGER, nil 
  case "CLOUD_JOB_MONITOR": return MonitorMode_CLOUD_JOB_MONITOR, nil 
  case "JOB_EMAIL_NOTIFICATION_MONITOR": return MonitorMode_JOB_EMAIL_NOTIFICATION_MONITOR, nil 
  case "XSEDE_AMQP_SUBSCRIBE": return MonitorMode_XSEDE_AMQP_SUBSCRIBE, nil 
  case "FORK": return MonitorMode_FORK, nil 
  case "LOCAL": return MonitorMode_LOCAL, nil 
  }
  return MonitorMode(0), fmt.Errorf("not a valid MonitorMode string")
}


func MonitorModePtr(v MonitorMode) *MonitorMode { return &v }

func (p MonitorMode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *MonitorMode) UnmarshalText(text []byte) error {
q, err := MonitorModeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *MonitorMode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = MonitorMode(v)
return nil
}

func (p * MonitorMode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type DMType int64
const (
  DMType_COMPUTE_RESOURCE DMType = 0
  DMType_STORAGE_RESOURCE DMType = 1
)

func (p DMType) String() string {
  switch p {
  case DMType_COMPUTE_RESOURCE: return "COMPUTE_RESOURCE"
  case DMType_STORAGE_RESOURCE: return "STORAGE_RESOURCE"
  }
  return "<UNSET>"
}

func DMTypeFromString(s string) (DMType, error) {
  switch s {
  case "COMPUTE_RESOURCE": return DMType_COMPUTE_RESOURCE, nil 
  case "STORAGE_RESOURCE": return DMType_STORAGE_RESOURCE, nil 
  }
  return DMType(0), fmt.Errorf("not a valid DMType string")
}


func DMTypePtr(v DMType) *DMType { return &v }

func (p DMType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *DMType) UnmarshalText(text []byte) error {
q, err := DMTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *DMType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = DMType(v)
return nil
}

func (p * DMType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//Provider name
//
type ProviderName int64
const (
  ProviderName_EC2 ProviderName = 0
  ProviderName_AWSEC2 ProviderName = 1
  ProviderName_RACKSPACE ProviderName = 2
)

func (p ProviderName) String() string {
  switch p {
  case ProviderName_EC2: return "EC2"
  case ProviderName_AWSEC2: return "AWSEC2"
  case ProviderName_RACKSPACE: return "RACKSPACE"
  }
  return "<UNSET>"
}

func ProviderNameFromString(s string) (ProviderName, error) {
  switch s {
  case "EC2": return ProviderName_EC2, nil 
  case "AWSEC2": return ProviderName_AWSEC2, nil 
  case "RACKSPACE": return ProviderName_RACKSPACE, nil 
  }
  return ProviderName(0), fmt.Errorf("not a valid ProviderName string")
}


func ProviderNamePtr(v ProviderName) *ProviderName { return &v }

func (p ProviderName) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ProviderName) UnmarshalText(text []byte) error {
q, err := ProviderNameFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ProviderName) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ProviderName(v)
return nil
}

func (p * ProviderName) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Resource Job Manager Information
// 
// resourceJobManagerType:
//  A typical HPC cluster has a single Job Manager to manage the resources.
// 
// pushMonitoringEndpoint:
//  If the job manager pushes out state changes to a database or bus, specify the service endpoint.
//   Ex: Moab Web Service, Moab MongoDB URL, AMQP (GLUE2) Broker
// 
// jobManagerBinPath:
//  Path to the Job Manager Installation Binary directory.
// 
// jobManagerCommands:
//  An enumeration of commonly used manager commands.
// 
// 
// Attributes:
//  - ResourceJobManagerId
//  - ResourceJobManagerType
//  - PushMonitoringEndpoint
//  - JobManagerBinPath
//  - JobManagerCommands
//  - ParallelismPrefix
type ResourceJobManager struct {
  ResourceJobManagerId string `thrift:"resourceJobManagerId,1,required" db:"resourceJobManagerId" json:"resourceJobManagerId"`
  ResourceJobManagerType ResourceJobManagerType `thrift:"resourceJobManagerType,2,required" db:"resourceJobManagerType" json:"resourceJobManagerType"`
  PushMonitoringEndpoint *string `thrift:"pushMonitoringEndpoint,3" db:"pushMonitoringEndpoint" json:"pushMonitoringEndpoint,omitempty"`
  JobManagerBinPath *string `thrift:"jobManagerBinPath,4" db:"jobManagerBinPath" json:"jobManagerBinPath,omitempty"`
  JobManagerCommands map[JobManagerCommand]string `thrift:"jobManagerCommands,5" db:"jobManagerCommands" json:"jobManagerCommands,omitempty"`
  ParallelismPrefix map[parallelism_model.ApplicationParallelismType]string `thrift:"parallelismPrefix,6" db:"parallelismPrefix" json:"parallelismPrefix,omitempty"`
}

func NewResourceJobManager() *ResourceJobManager {
  return &ResourceJobManager{
ResourceJobManagerId: "DO_NOT_SET_AT_CLIENTS",
}
}


func (p *ResourceJobManager) GetResourceJobManagerId() string {
  return p.ResourceJobManagerId
}

func (p *ResourceJobManager) GetResourceJobManagerType() ResourceJobManagerType {
  return p.ResourceJobManagerType
}
var ResourceJobManager_PushMonitoringEndpoint_DEFAULT string
func (p *ResourceJobManager) GetPushMonitoringEndpoint() string {
  if !p.IsSetPushMonitoringEndpoint() {
    return ResourceJobManager_PushMonitoringEndpoint_DEFAULT
  }
return *p.PushMonitoringEndpoint
}
var ResourceJobManager_JobManagerBinPath_DEFAULT string
func (p *ResourceJobManager) GetJobManagerBinPath() string {
  if !p.IsSetJobManagerBinPath() {
    return ResourceJobManager_JobManagerBinPath_DEFAULT
  }
return *p.JobManagerBinPath
}
var ResourceJobManager_JobManagerCommands_DEFAULT map[JobManagerCommand]string

func (p *ResourceJobManager) GetJobManagerCommands() map[JobManagerCommand]string {
  return p.JobManagerCommands
}
var ResourceJobManager_ParallelismPrefix_DEFAULT map[parallelism_model.ApplicationParallelismType]string

func (p *ResourceJobManager) GetParallelismPrefix() map[parallelism_model.ApplicationParallelismType]string {
  return p.ParallelismPrefix
}
func (p *ResourceJobManager) IsSetPushMonitoringEndpoint() bool {
  return p.PushMonitoringEndpoint != nil
}

func (p *ResourceJobManager) IsSetJobManagerBinPath() bool {
  return p.JobManagerBinPath != nil
}

func (p *ResourceJobManager) IsSetJobManagerCommands() bool {
  return p.JobManagerCommands != nil
}

func (p *ResourceJobManager) IsSetParallelismPrefix() bool {
  return p.ParallelismPrefix != nil
}

func (p *ResourceJobManager) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResourceJobManagerId bool = false;
  var issetResourceJobManagerType bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetResourceJobManagerId = true
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetResourceJobManagerType = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResourceJobManagerId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ResourceJobManagerId is not set"));
  }
  if !issetResourceJobManagerType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ResourceJobManagerType is not set"));
  }
  return nil
}

func (p *ResourceJobManager)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ResourceJobManagerId = v
}
  return nil
}

func (p *ResourceJobManager)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := ResourceJobManagerType(v)
  p.ResourceJobManagerType = temp
}
  return nil
}

func (p *ResourceJobManager)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PushMonitoringEndpoint = &v
}
  return nil
}

func (p *ResourceJobManager)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.JobManagerBinPath = &v
}
  return nil
}

func (p *ResourceJobManager)  ReadField5(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[JobManagerCommand]string, size)
  p.JobManagerCommands =  tMap
  for i := 0; i < size; i ++ {
var _key0 JobManagerCommand
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := JobManagerCommand(v)
    _key0 = temp
}
var _val1 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val1 = v
}
    p.JobManagerCommands[_key0] = _val1
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ResourceJobManager)  ReadField6(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[parallelism_model.ApplicationParallelismType]string, size)
  p.ParallelismPrefix =  tMap
  for i := 0; i < size; i ++ {
var _key2 parallelism_model.ApplicationParallelismType
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := parallelism_model.ApplicationParallelismType(v)
    _key2 = temp
}
var _val3 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val3 = v
}
    p.ParallelismPrefix[_key2] = _val3
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ResourceJobManager) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ResourceJobManager"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResourceJobManager) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resourceJobManagerId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:resourceJobManagerId: ", p), err) }
  if err := oprot.WriteString(string(p.ResourceJobManagerId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resourceJobManagerId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:resourceJobManagerId: ", p), err) }
  return err
}

func (p *ResourceJobManager) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resourceJobManagerType", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resourceJobManagerType: ", p), err) }
  if err := oprot.WriteI32(int32(p.ResourceJobManagerType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resourceJobManagerType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resourceJobManagerType: ", p), err) }
  return err
}

func (p *ResourceJobManager) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetPushMonitoringEndpoint() {
    if err := oprot.WriteFieldBegin("pushMonitoringEndpoint", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pushMonitoringEndpoint: ", p), err) }
    if err := oprot.WriteString(string(*p.PushMonitoringEndpoint)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.pushMonitoringEndpoint (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pushMonitoringEndpoint: ", p), err) }
  }
  return err
}

func (p *ResourceJobManager) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetJobManagerBinPath() {
    if err := oprot.WriteFieldBegin("jobManagerBinPath", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:jobManagerBinPath: ", p), err) }
    if err := oprot.WriteString(string(*p.JobManagerBinPath)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jobManagerBinPath (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:jobManagerBinPath: ", p), err) }
  }
  return err
}

func (p *ResourceJobManager) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetJobManagerCommands() {
    if err := oprot.WriteFieldBegin("jobManagerCommands", thrift.MAP, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:jobManagerCommands: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.I32, thrift.STRING, len(p.JobManagerCommands)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.JobManagerCommands {
      if err := oprot.WriteI32(int32(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:jobManagerCommands: ", p), err) }
  }
  return err
}

func (p *ResourceJobManager) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetParallelismPrefix() {
    if err := oprot.WriteFieldBegin("parallelismPrefix", thrift.MAP, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:parallelismPrefix: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.I32, thrift.STRING, len(p.ParallelismPrefix)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.ParallelismPrefix {
      if err := oprot.WriteI32(int32(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:parallelismPrefix: ", p), err) }
  }
  return err
}

func (p *ResourceJobManager) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResourceJobManager(%+v)", *p)
}

// Batch Queue Information on SuperComputers
// 
// maxRunTime:
//  Maximum allowed run time in hours.
// 
// Attributes:
//  - QueueName
//  - QueueDescription
//  - MaxRunTime
//  - MaxNodes
//  - MaxProcessors
//  - MaxJobsInQueue
//  - MaxMemory
//  - CpuPerNode
//  - DefaultNodeCount
//  - DefaultCPUCount
//  - DefaultWalltime
//  - QueueSpecificMacros
//  - IsDefaultQueue
type BatchQueue struct {
  QueueName string `thrift:"queueName,1,required" db:"queueName" json:"queueName"`
  QueueDescription *string `thrift:"queueDescription,2" db:"queueDescription" json:"queueDescription,omitempty"`
  MaxRunTime *int32 `thrift:"maxRunTime,3" db:"maxRunTime" json:"maxRunTime,omitempty"`
  MaxNodes *int32 `thrift:"maxNodes,4" db:"maxNodes" json:"maxNodes,omitempty"`
  MaxProcessors *int32 `thrift:"maxProcessors,5" db:"maxProcessors" json:"maxProcessors,omitempty"`
  MaxJobsInQueue *int32 `thrift:"maxJobsInQueue,6" db:"maxJobsInQueue" json:"maxJobsInQueue,omitempty"`
  MaxMemory *int32 `thrift:"maxMemory,7" db:"maxMemory" json:"maxMemory,omitempty"`
  CpuPerNode *int32 `thrift:"cpuPerNode,8" db:"cpuPerNode" json:"cpuPerNode,omitempty"`
  DefaultNodeCount *int32 `thrift:"defaultNodeCount,9" db:"defaultNodeCount" json:"defaultNodeCount,omitempty"`
  DefaultCPUCount *int32 `thrift:"defaultCPUCount,10" db:"defaultCPUCount" json:"defaultCPUCount,omitempty"`
  DefaultWalltime *int32 `thrift:"defaultWalltime,11" db:"defaultWalltime" json:"defaultWalltime,omitempty"`
  QueueSpecificMacros *string `thrift:"queueSpecificMacros,12" db:"queueSpecificMacros" json:"queueSpecificMacros,omitempty"`
  IsDefaultQueue *bool `thrift:"isDefaultQueue,13" db:"isDefaultQueue" json:"isDefaultQueue,omitempty"`
}

func NewBatchQueue() *BatchQueue {
  return &BatchQueue{}
}


func (p *BatchQueue) GetQueueName() string {
  return p.QueueName
}
var BatchQueue_QueueDescription_DEFAULT string
func (p *BatchQueue) GetQueueDescription() string {
  if !p.IsSetQueueDescription() {
    return BatchQueue_QueueDescription_DEFAULT
  }
return *p.QueueDescription
}
var BatchQueue_MaxRunTime_DEFAULT int32
func (p *BatchQueue) GetMaxRunTime() int32 {
  if !p.IsSetMaxRunTime() {
    return BatchQueue_MaxRunTime_DEFAULT
  }
return *p.MaxRunTime
}
var BatchQueue_MaxNodes_DEFAULT int32
func (p *BatchQueue) GetMaxNodes() int32 {
  if !p.IsSetMaxNodes() {
    return BatchQueue_MaxNodes_DEFAULT
  }
return *p.MaxNodes
}
var BatchQueue_MaxProcessors_DEFAULT int32
func (p *BatchQueue) GetMaxProcessors() int32 {
  if !p.IsSetMaxProcessors() {
    return BatchQueue_MaxProcessors_DEFAULT
  }
return *p.MaxProcessors
}
var BatchQueue_MaxJobsInQueue_DEFAULT int32
func (p *BatchQueue) GetMaxJobsInQueue() int32 {
  if !p.IsSetMaxJobsInQueue() {
    return BatchQueue_MaxJobsInQueue_DEFAULT
  }
return *p.MaxJobsInQueue
}
var BatchQueue_MaxMemory_DEFAULT int32
func (p *BatchQueue) GetMaxMemory() int32 {
  if !p.IsSetMaxMemory() {
    return BatchQueue_MaxMemory_DEFAULT
  }
return *p.MaxMemory
}
var BatchQueue_CpuPerNode_DEFAULT int32
func (p *BatchQueue) GetCpuPerNode() int32 {
  if !p.IsSetCpuPerNode() {
    return BatchQueue_CpuPerNode_DEFAULT
  }
return *p.CpuPerNode
}
var BatchQueue_DefaultNodeCount_DEFAULT int32
func (p *BatchQueue) GetDefaultNodeCount() int32 {
  if !p.IsSetDefaultNodeCount() {
    return BatchQueue_DefaultNodeCount_DEFAULT
  }
return *p.DefaultNodeCount
}
var BatchQueue_DefaultCPUCount_DEFAULT int32
func (p *BatchQueue) GetDefaultCPUCount() int32 {
  if !p.IsSetDefaultCPUCount() {
    return BatchQueue_DefaultCPUCount_DEFAULT
  }
return *p.DefaultCPUCount
}
var BatchQueue_DefaultWalltime_DEFAULT int32
func (p *BatchQueue) GetDefaultWalltime() int32 {
  if !p.IsSetDefaultWalltime() {
    return BatchQueue_DefaultWalltime_DEFAULT
  }
return *p.DefaultWalltime
}
var BatchQueue_QueueSpecificMacros_DEFAULT string
func (p *BatchQueue) GetQueueSpecificMacros() string {
  if !p.IsSetQueueSpecificMacros() {
    return BatchQueue_QueueSpecificMacros_DEFAULT
  }
return *p.QueueSpecificMacros
}
var BatchQueue_IsDefaultQueue_DEFAULT bool
func (p *BatchQueue) GetIsDefaultQueue() bool {
  if !p.IsSetIsDefaultQueue() {
    return BatchQueue_IsDefaultQueue_DEFAULT
  }
return *p.IsDefaultQueue
}
func (p *BatchQueue) IsSetQueueDescription() bool {
  return p.QueueDescription != nil
}

func (p *BatchQueue) IsSetMaxRunTime() bool {
  return p.MaxRunTime != nil
}

func (p *BatchQueue) IsSetMaxNodes() bool {
  return p.MaxNodes != nil
}

func (p *BatchQueue) IsSetMaxProcessors() bool {
  return p.MaxProcessors != nil
}

func (p *BatchQueue) IsSetMaxJobsInQueue() bool {
  return p.MaxJobsInQueue != nil
}

func (p *BatchQueue) IsSetMaxMemory() bool {
  return p.MaxMemory != nil
}

func (p *BatchQueue) IsSetCpuPerNode() bool {
  return p.CpuPerNode != nil
}

func (p *BatchQueue) IsSetDefaultNodeCount() bool {
  return p.DefaultNodeCount != nil
}

func (p *BatchQueue) IsSetDefaultCPUCount() bool {
  return p.DefaultCPUCount != nil
}

func (p *BatchQueue) IsSetDefaultWalltime() bool {
  return p.DefaultWalltime != nil
}

func (p *BatchQueue) IsSetQueueSpecificMacros() bool {
  return p.QueueSpecificMacros != nil
}

func (p *BatchQueue) IsSetIsDefaultQueue() bool {
  return p.IsDefaultQueue != nil
}

func (p *BatchQueue) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetQueueName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetQueueName = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetQueueName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field QueueName is not set"));
  }
  return nil
}

func (p *BatchQueue)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.QueueName = v
}
  return nil
}

func (p *BatchQueue)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.QueueDescription = &v
}
  return nil
}

func (p *BatchQueue)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MaxRunTime = &v
}
  return nil
}

func (p *BatchQueue)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MaxNodes = &v
}
  return nil
}

func (p *BatchQueue)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.MaxProcessors = &v
}
  return nil
}

func (p *BatchQueue)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.MaxJobsInQueue = &v
}
  return nil
}

func (p *BatchQueue)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.MaxMemory = &v
}
  return nil
}

func (p *BatchQueue)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.CpuPerNode = &v
}
  return nil
}

func (p *BatchQueue)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.DefaultNodeCount = &v
}
  return nil
}

func (p *BatchQueue)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.DefaultCPUCount = &v
}
  return nil
}

func (p *BatchQueue)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.DefaultWalltime = &v
}
  return nil
}

func (p *BatchQueue)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.QueueSpecificMacros = &v
}
  return nil
}

func (p *BatchQueue)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.IsDefaultQueue = &v
}
  return nil
}

func (p *BatchQueue) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("BatchQueue"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BatchQueue) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:queueName: ", p), err) }
  if err := oprot.WriteString(string(p.QueueName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.queueName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:queueName: ", p), err) }
  return err
}

func (p *BatchQueue) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetQueueDescription() {
    if err := oprot.WriteFieldBegin("queueDescription", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:queueDescription: ", p), err) }
    if err := oprot.WriteString(string(*p.QueueDescription)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.queueDescription (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:queueDescription: ", p), err) }
  }
  return err
}

func (p *BatchQueue) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetMaxRunTime() {
    if err := oprot.WriteFieldBegin("maxRunTime", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:maxRunTime: ", p), err) }
    if err := oprot.WriteI32(int32(*p.MaxRunTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.maxRunTime (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:maxRunTime: ", p), err) }
  }
  return err
}

func (p *BatchQueue) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetMaxNodes() {
    if err := oprot.WriteFieldBegin("maxNodes", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:maxNodes: ", p), err) }
    if err := oprot.WriteI32(int32(*p.MaxNodes)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.maxNodes (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:maxNodes: ", p), err) }
  }
  return err
}

func (p *BatchQueue) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetMaxProcessors() {
    if err := oprot.WriteFieldBegin("maxProcessors", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:maxProcessors: ", p), err) }
    if err := oprot.WriteI32(int32(*p.MaxProcessors)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.maxProcessors (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:maxProcessors: ", p), err) }
  }
  return err
}

func (p *BatchQueue) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetMaxJobsInQueue() {
    if err := oprot.WriteFieldBegin("maxJobsInQueue", thrift.I32, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:maxJobsInQueue: ", p), err) }
    if err := oprot.WriteI32(int32(*p.MaxJobsInQueue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.maxJobsInQueue (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:maxJobsInQueue: ", p), err) }
  }
  return err
}

func (p *BatchQueue) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetMaxMemory() {
    if err := oprot.WriteFieldBegin("maxMemory", thrift.I32, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:maxMemory: ", p), err) }
    if err := oprot.WriteI32(int32(*p.MaxMemory)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.maxMemory (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:maxMemory: ", p), err) }
  }
  return err
}

func (p *BatchQueue) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetCpuPerNode() {
    if err := oprot.WriteFieldBegin("cpuPerNode", thrift.I32, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:cpuPerNode: ", p), err) }
    if err := oprot.WriteI32(int32(*p.CpuPerNode)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.cpuPerNode (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:cpuPerNode: ", p), err) }
  }
  return err
}

func (p *BatchQueue) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetDefaultNodeCount() {
    if err := oprot.WriteFieldBegin("defaultNodeCount", thrift.I32, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:defaultNodeCount: ", p), err) }
    if err := oprot.WriteI32(int32(*p.DefaultNodeCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.defaultNodeCount (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:defaultNodeCount: ", p), err) }
  }
  return err
}

func (p *BatchQueue) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetDefaultCPUCount() {
    if err := oprot.WriteFieldBegin("defaultCPUCount", thrift.I32, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:defaultCPUCount: ", p), err) }
    if err := oprot.WriteI32(int32(*p.DefaultCPUCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.defaultCPUCount (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:defaultCPUCount: ", p), err) }
  }
  return err
}

func (p *BatchQueue) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetDefaultWalltime() {
    if err := oprot.WriteFieldBegin("defaultWalltime", thrift.I32, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:defaultWalltime: ", p), err) }
    if err := oprot.WriteI32(int32(*p.DefaultWalltime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.defaultWalltime (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:defaultWalltime: ", p), err) }
  }
  return err
}

func (p *BatchQueue) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetQueueSpecificMacros() {
    if err := oprot.WriteFieldBegin("queueSpecificMacros", thrift.STRING, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:queueSpecificMacros: ", p), err) }
    if err := oprot.WriteString(string(*p.QueueSpecificMacros)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.queueSpecificMacros (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:queueSpecificMacros: ", p), err) }
  }
  return err
}

func (p *BatchQueue) writeField13(oprot thrift.TProtocol) (err error) {
  if p.IsSetIsDefaultQueue() {
    if err := oprot.WriteFieldBegin("isDefaultQueue", thrift.BOOL, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:isDefaultQueue: ", p), err) }
    if err := oprot.WriteBool(bool(*p.IsDefaultQueue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.isDefaultQueue (13) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:isDefaultQueue: ", p), err) }
  }
  return err
}

func (p *BatchQueue) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BatchQueue(%+v)", *p)
}

// Locally Fork Jobs as OS processes
// 
// alternativeSSHHostName:
//  If the login to ssh is different than the hostname itself, specify it here
// 
// sshPort:
//  If a non-default port needs to used, specify it.
// 
// Attributes:
//  - JobSubmissionInterfaceId
//  - ResourceJobManager
//  - SecurityProtocol
type LOCALSubmission struct {
  JobSubmissionInterfaceId string `thrift:"jobSubmissionInterfaceId,1,required" db:"jobSubmissionInterfaceId" json:"jobSubmissionInterfaceId"`
  ResourceJobManager *ResourceJobManager `thrift:"resourceJobManager,2,required" db:"resourceJobManager" json:"resourceJobManager"`
  SecurityProtocol data_movement_models.SecurityProtocol `thrift:"securityProtocol,3,required" db:"securityProtocol" json:"securityProtocol"`
}

func NewLOCALSubmission() *LOCALSubmission {
  return &LOCALSubmission{
JobSubmissionInterfaceId: "DO_NOT_SET_AT_CLIENTS",
}
}


func (p *LOCALSubmission) GetJobSubmissionInterfaceId() string {
  return p.JobSubmissionInterfaceId
}
var LOCALSubmission_ResourceJobManager_DEFAULT *ResourceJobManager
func (p *LOCALSubmission) GetResourceJobManager() *ResourceJobManager {
  if !p.IsSetResourceJobManager() {
    return LOCALSubmission_ResourceJobManager_DEFAULT
  }
return p.ResourceJobManager
}

func (p *LOCALSubmission) GetSecurityProtocol() data_movement_models.SecurityProtocol {
  return p.SecurityProtocol
}
func (p *LOCALSubmission) IsSetResourceJobManager() bool {
  return p.ResourceJobManager != nil
}

func (p *LOCALSubmission) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetJobSubmissionInterfaceId bool = false;
  var issetResourceJobManager bool = false;
  var issetSecurityProtocol bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetJobSubmissionInterfaceId = true
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetResourceJobManager = true
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetSecurityProtocol = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetJobSubmissionInterfaceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field JobSubmissionInterfaceId is not set"));
  }
  if !issetResourceJobManager{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ResourceJobManager is not set"));
  }
  if !issetSecurityProtocol{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SecurityProtocol is not set"));
  }
  return nil
}

func (p *LOCALSubmission)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.JobSubmissionInterfaceId = v
}
  return nil
}

func (p *LOCALSubmission)  ReadField2(iprot thrift.TProtocol) error {
  p.ResourceJobManager = &ResourceJobManager{
  ResourceJobManagerId: "DO_NOT_SET_AT_CLIENTS",
}
  if err := p.ResourceJobManager.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ResourceJobManager), err)
  }
  return nil
}

func (p *LOCALSubmission)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := data_movement_models.SecurityProtocol(v)
  p.SecurityProtocol = temp
}
  return nil
}

func (p *LOCALSubmission) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("LOCALSubmission"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LOCALSubmission) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("jobSubmissionInterfaceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:jobSubmissionInterfaceId: ", p), err) }
  if err := oprot.WriteString(string(p.JobSubmissionInterfaceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.jobSubmissionInterfaceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:jobSubmissionInterfaceId: ", p), err) }
  return err
}

func (p *LOCALSubmission) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resourceJobManager", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resourceJobManager: ", p), err) }
  if err := p.ResourceJobManager.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ResourceJobManager), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resourceJobManager: ", p), err) }
  return err
}

func (p *LOCALSubmission) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("securityProtocol", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:securityProtocol: ", p), err) }
  if err := oprot.WriteI32(int32(p.SecurityProtocol)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.securityProtocol (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:securityProtocol: ", p), err) }
  return err
}

func (p *LOCALSubmission) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LOCALSubmission(%+v)", *p)
}

// Authenticate using Secured Shell
// 
// alternativeSSHHostName:
//  If the login to ssh is different than the hostname itself, specify it here
// 
// sshPort:
//  If a non-default port needs to used, specify it.
// 
// batchQueueEmailSenders:
//  If a resource always sends the monitoring from a specific address, specify the
//   full email address. If a resource sends emails from multiple addresses (
//    example: based on the submitted login node) then use the wildchar * to indicate
//    the same. Example: *@*.example.com or *@example.com
// 
// 
// Attributes:
//  - JobSubmissionInterfaceId
//  - SecurityProtocol
//  - ResourceJobManager
//  - AlternativeSSHHostName
//  - SshPort
//  - MonitorMode
//  - BatchQueueEmailSenders
type SSHJobSubmission struct {
  JobSubmissionInterfaceId string `thrift:"jobSubmissionInterfaceId,1,required" db:"jobSubmissionInterfaceId" json:"jobSubmissionInterfaceId"`
  SecurityProtocol data_movement_models.SecurityProtocol `thrift:"securityProtocol,2,required" db:"securityProtocol" json:"securityProtocol"`
  ResourceJobManager *ResourceJobManager `thrift:"resourceJobManager,3,required" db:"resourceJobManager" json:"resourceJobManager"`
  AlternativeSSHHostName *string `thrift:"alternativeSSHHostName,4" db:"alternativeSSHHostName" json:"alternativeSSHHostName,omitempty"`
  SshPort int32 `thrift:"sshPort,5" db:"sshPort" json:"sshPort,omitempty"`
  MonitorMode *MonitorMode `thrift:"monitorMode,6" db:"monitorMode" json:"monitorMode,omitempty"`
  BatchQueueEmailSenders []string `thrift:"batchQueueEmailSenders,7" db:"batchQueueEmailSenders" json:"batchQueueEmailSenders,omitempty"`
}

func NewSSHJobSubmission() *SSHJobSubmission {
  return &SSHJobSubmission{
JobSubmissionInterfaceId: "DO_NOT_SET_AT_CLIENTS",

SshPort: 22,
}
}


func (p *SSHJobSubmission) GetJobSubmissionInterfaceId() string {
  return p.JobSubmissionInterfaceId
}

func (p *SSHJobSubmission) GetSecurityProtocol() data_movement_models.SecurityProtocol {
  return p.SecurityProtocol
}
var SSHJobSubmission_ResourceJobManager_DEFAULT *ResourceJobManager
func (p *SSHJobSubmission) GetResourceJobManager() *ResourceJobManager {
  if !p.IsSetResourceJobManager() {
    return SSHJobSubmission_ResourceJobManager_DEFAULT
  }
return p.ResourceJobManager
}
var SSHJobSubmission_AlternativeSSHHostName_DEFAULT string
func (p *SSHJobSubmission) GetAlternativeSSHHostName() string {
  if !p.IsSetAlternativeSSHHostName() {
    return SSHJobSubmission_AlternativeSSHHostName_DEFAULT
  }
return *p.AlternativeSSHHostName
}
var SSHJobSubmission_SshPort_DEFAULT int32 = 22

func (p *SSHJobSubmission) GetSshPort() int32 {
  return p.SshPort
}
var SSHJobSubmission_MonitorMode_DEFAULT MonitorMode
func (p *SSHJobSubmission) GetMonitorMode() MonitorMode {
  if !p.IsSetMonitorMode() {
    return SSHJobSubmission_MonitorMode_DEFAULT
  }
return *p.MonitorMode
}
var SSHJobSubmission_BatchQueueEmailSenders_DEFAULT []string

func (p *SSHJobSubmission) GetBatchQueueEmailSenders() []string {
  return p.BatchQueueEmailSenders
}
func (p *SSHJobSubmission) IsSetResourceJobManager() bool {
  return p.ResourceJobManager != nil
}

func (p *SSHJobSubmission) IsSetAlternativeSSHHostName() bool {
  return p.AlternativeSSHHostName != nil
}

func (p *SSHJobSubmission) IsSetSshPort() bool {
  return p.SshPort != SSHJobSubmission_SshPort_DEFAULT
}

func (p *SSHJobSubmission) IsSetMonitorMode() bool {
  return p.MonitorMode != nil
}

func (p *SSHJobSubmission) IsSetBatchQueueEmailSenders() bool {
  return p.BatchQueueEmailSenders != nil
}

func (p *SSHJobSubmission) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetJobSubmissionInterfaceId bool = false;
  var issetSecurityProtocol bool = false;
  var issetResourceJobManager bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetJobSubmissionInterfaceId = true
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetSecurityProtocol = true
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetResourceJobManager = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetJobSubmissionInterfaceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field JobSubmissionInterfaceId is not set"));
  }
  if !issetSecurityProtocol{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SecurityProtocol is not set"));
  }
  if !issetResourceJobManager{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ResourceJobManager is not set"));
  }
  return nil
}

func (p *SSHJobSubmission)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.JobSubmissionInterfaceId = v
}
  return nil
}

func (p *SSHJobSubmission)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := data_movement_models.SecurityProtocol(v)
  p.SecurityProtocol = temp
}
  return nil
}

func (p *SSHJobSubmission)  ReadField3(iprot thrift.TProtocol) error {
  p.ResourceJobManager = &ResourceJobManager{
  ResourceJobManagerId: "DO_NOT_SET_AT_CLIENTS",
}
  if err := p.ResourceJobManager.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ResourceJobManager), err)
  }
  return nil
}

func (p *SSHJobSubmission)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.AlternativeSSHHostName = &v
}
  return nil
}

func (p *SSHJobSubmission)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.SshPort = v
}
  return nil
}

func (p *SSHJobSubmission)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := MonitorMode(v)
  p.MonitorMode = &temp
}
  return nil
}

func (p *SSHJobSubmission)  ReadField7(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.BatchQueueEmailSenders =  tSlice
  for i := 0; i < size; i ++ {
var _elem4 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem4 = v
}
    p.BatchQueueEmailSenders = append(p.BatchQueueEmailSenders, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SSHJobSubmission) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SSHJobSubmission"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SSHJobSubmission) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("jobSubmissionInterfaceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:jobSubmissionInterfaceId: ", p), err) }
  if err := oprot.WriteString(string(p.JobSubmissionInterfaceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.jobSubmissionInterfaceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:jobSubmissionInterfaceId: ", p), err) }
  return err
}

func (p *SSHJobSubmission) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("securityProtocol", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:securityProtocol: ", p), err) }
  if err := oprot.WriteI32(int32(p.SecurityProtocol)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.securityProtocol (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:securityProtocol: ", p), err) }
  return err
}

func (p *SSHJobSubmission) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resourceJobManager", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:resourceJobManager: ", p), err) }
  if err := p.ResourceJobManager.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ResourceJobManager), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:resourceJobManager: ", p), err) }
  return err
}

func (p *SSHJobSubmission) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAlternativeSSHHostName() {
    if err := oprot.WriteFieldBegin("alternativeSSHHostName", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:alternativeSSHHostName: ", p), err) }
    if err := oprot.WriteString(string(*p.AlternativeSSHHostName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.alternativeSSHHostName (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:alternativeSSHHostName: ", p), err) }
  }
  return err
}

func (p *SSHJobSubmission) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetSshPort() {
    if err := oprot.WriteFieldBegin("sshPort", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:sshPort: ", p), err) }
    if err := oprot.WriteI32(int32(p.SshPort)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sshPort (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:sshPort: ", p), err) }
  }
  return err
}

func (p *SSHJobSubmission) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetMonitorMode() {
    if err := oprot.WriteFieldBegin("monitorMode", thrift.I32, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:monitorMode: ", p), err) }
    if err := oprot.WriteI32(int32(*p.MonitorMode)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.monitorMode (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:monitorMode: ", p), err) }
  }
  return err
}

func (p *SSHJobSubmission) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetBatchQueueEmailSenders() {
    if err := oprot.WriteFieldBegin("batchQueueEmailSenders", thrift.LIST, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:batchQueueEmailSenders: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.BatchQueueEmailSenders)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.BatchQueueEmailSenders {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:batchQueueEmailSenders: ", p), err) }
  }
  return err
}

func (p *SSHJobSubmission) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SSHJobSubmission(%+v)", *p)
}

// Attributes:
//  - JobSubmissionInterfaceId
//  - SecurityProtocol
//  - GlobusGateKeeperEndPoint
type GlobusJobSubmission struct {
  JobSubmissionInterfaceId string `thrift:"jobSubmissionInterfaceId,1,required" db:"jobSubmissionInterfaceId" json:"jobSubmissionInterfaceId"`
  SecurityProtocol data_movement_models.SecurityProtocol `thrift:"securityProtocol,2,required" db:"securityProtocol" json:"securityProtocol"`
  GlobusGateKeeperEndPoint []string `thrift:"globusGateKeeperEndPoint,3" db:"globusGateKeeperEndPoint" json:"globusGateKeeperEndPoint,omitempty"`
}

func NewGlobusJobSubmission() *GlobusJobSubmission {
  return &GlobusJobSubmission{
JobSubmissionInterfaceId: "DO_NOT_SET_AT_CLIENTS",
}
}


func (p *GlobusJobSubmission) GetJobSubmissionInterfaceId() string {
  return p.JobSubmissionInterfaceId
}

func (p *GlobusJobSubmission) GetSecurityProtocol() data_movement_models.SecurityProtocol {
  return p.SecurityProtocol
}
var GlobusJobSubmission_GlobusGateKeeperEndPoint_DEFAULT []string

func (p *GlobusJobSubmission) GetGlobusGateKeeperEndPoint() []string {
  return p.GlobusGateKeeperEndPoint
}
func (p *GlobusJobSubmission) IsSetGlobusGateKeeperEndPoint() bool {
  return p.GlobusGateKeeperEndPoint != nil
}

func (p *GlobusJobSubmission) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetJobSubmissionInterfaceId bool = false;
  var issetSecurityProtocol bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetJobSubmissionInterfaceId = true
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetSecurityProtocol = true
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetJobSubmissionInterfaceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field JobSubmissionInterfaceId is not set"));
  }
  if !issetSecurityProtocol{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SecurityProtocol is not set"));
  }
  return nil
}

func (p *GlobusJobSubmission)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.JobSubmissionInterfaceId = v
}
  return nil
}

func (p *GlobusJobSubmission)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := data_movement_models.SecurityProtocol(v)
  p.SecurityProtocol = temp
}
  return nil
}

func (p *GlobusJobSubmission)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.GlobusGateKeeperEndPoint =  tSlice
  for i := 0; i < size; i ++ {
var _elem5 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem5 = v
}
    p.GlobusGateKeeperEndPoint = append(p.GlobusGateKeeperEndPoint, _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GlobusJobSubmission) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GlobusJobSubmission"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GlobusJobSubmission) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("jobSubmissionInterfaceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:jobSubmissionInterfaceId: ", p), err) }
  if err := oprot.WriteString(string(p.JobSubmissionInterfaceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.jobSubmissionInterfaceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:jobSubmissionInterfaceId: ", p), err) }
  return err
}

func (p *GlobusJobSubmission) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("securityProtocol", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:securityProtocol: ", p), err) }
  if err := oprot.WriteI32(int32(p.SecurityProtocol)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.securityProtocol (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:securityProtocol: ", p), err) }
  return err
}

func (p *GlobusJobSubmission) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetGlobusGateKeeperEndPoint() {
    if err := oprot.WriteFieldBegin("globusGateKeeperEndPoint", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:globusGateKeeperEndPoint: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.GlobusGateKeeperEndPoint)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.GlobusGateKeeperEndPoint {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:globusGateKeeperEndPoint: ", p), err) }
  }
  return err
}

func (p *GlobusJobSubmission) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GlobusJobSubmission(%+v)", *p)
}

// Unicore Job Submission
// 
// unicoreEndPointURL:
//  unicoreGateway End Point. The provider will query this service to fetch required service end points.
// authenticationMode
//  The authenticationMode defines the way certificate is fetched.
// 
// Attributes:
//  - JobSubmissionInterfaceId
//  - SecurityProtocol
//  - UnicoreEndPointURL
type UnicoreJobSubmission struct {
  JobSubmissionInterfaceId string `thrift:"jobSubmissionInterfaceId,1,required" db:"jobSubmissionInterfaceId" json:"jobSubmissionInterfaceId"`
  SecurityProtocol data_movement_models.SecurityProtocol `thrift:"securityProtocol,2,required" db:"securityProtocol" json:"securityProtocol"`
  UnicoreEndPointURL string `thrift:"unicoreEndPointURL,3,required" db:"unicoreEndPointURL" json:"unicoreEndPointURL"`
}

func NewUnicoreJobSubmission() *UnicoreJobSubmission {
  return &UnicoreJobSubmission{
JobSubmissionInterfaceId: "DO_NOT_SET_AT_CLIENTS",
}
}


func (p *UnicoreJobSubmission) GetJobSubmissionInterfaceId() string {
  return p.JobSubmissionInterfaceId
}

func (p *UnicoreJobSubmission) GetSecurityProtocol() data_movement_models.SecurityProtocol {
  return p.SecurityProtocol
}

func (p *UnicoreJobSubmission) GetUnicoreEndPointURL() string {
  return p.UnicoreEndPointURL
}
func (p *UnicoreJobSubmission) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetJobSubmissionInterfaceId bool = false;
  var issetSecurityProtocol bool = false;
  var issetUnicoreEndPointURL bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetJobSubmissionInterfaceId = true
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetSecurityProtocol = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUnicoreEndPointURL = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetJobSubmissionInterfaceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field JobSubmissionInterfaceId is not set"));
  }
  if !issetSecurityProtocol{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SecurityProtocol is not set"));
  }
  if !issetUnicoreEndPointURL{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UnicoreEndPointURL is not set"));
  }
  return nil
}

func (p *UnicoreJobSubmission)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.JobSubmissionInterfaceId = v
}
  return nil
}

func (p *UnicoreJobSubmission)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := data_movement_models.SecurityProtocol(v)
  p.SecurityProtocol = temp
}
  return nil
}

func (p *UnicoreJobSubmission)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.UnicoreEndPointURL = v
}
  return nil
}

func (p *UnicoreJobSubmission) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UnicoreJobSubmission"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UnicoreJobSubmission) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("jobSubmissionInterfaceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:jobSubmissionInterfaceId: ", p), err) }
  if err := oprot.WriteString(string(p.JobSubmissionInterfaceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.jobSubmissionInterfaceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:jobSubmissionInterfaceId: ", p), err) }
  return err
}

func (p *UnicoreJobSubmission) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("securityProtocol", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:securityProtocol: ", p), err) }
  if err := oprot.WriteI32(int32(p.SecurityProtocol)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.securityProtocol (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:securityProtocol: ", p), err) }
  return err
}

func (p *UnicoreJobSubmission) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("unicoreEndPointURL", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:unicoreEndPointURL: ", p), err) }
  if err := oprot.WriteString(string(p.UnicoreEndPointURL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.unicoreEndPointURL (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:unicoreEndPointURL: ", p), err) }
  return err
}

func (p *UnicoreJobSubmission) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UnicoreJobSubmission(%+v)", *p)
}

// Cloud Job Submission
// 
// 
// 
// Attributes:
//  - JobSubmissionInterfaceId
//  - SecurityProtocol
//  - NodeId
//  - ExecutableType
//  - ProviderName
//  - UserAccountName
type CloudJobSubmission struct {
  JobSubmissionInterfaceId string `thrift:"jobSubmissionInterfaceId,1,required" db:"jobSubmissionInterfaceId" json:"jobSubmissionInterfaceId"`
  SecurityProtocol data_movement_models.SecurityProtocol `thrift:"securityProtocol,2,required" db:"securityProtocol" json:"securityProtocol"`
  NodeId string `thrift:"nodeId,3,required" db:"nodeId" json:"nodeId"`
  ExecutableType string `thrift:"executableType,4,required" db:"executableType" json:"executableType"`
  ProviderName ProviderName `thrift:"providerName,5,required" db:"providerName" json:"providerName"`
  UserAccountName string `thrift:"userAccountName,6,required" db:"userAccountName" json:"userAccountName"`
}

func NewCloudJobSubmission() *CloudJobSubmission {
  return &CloudJobSubmission{
JobSubmissionInterfaceId: "DO_NOT_SET_AT_CLIENTS",
}
}


func (p *CloudJobSubmission) GetJobSubmissionInterfaceId() string {
  return p.JobSubmissionInterfaceId
}

func (p *CloudJobSubmission) GetSecurityProtocol() data_movement_models.SecurityProtocol {
  return p.SecurityProtocol
}

func (p *CloudJobSubmission) GetNodeId() string {
  return p.NodeId
}

func (p *CloudJobSubmission) GetExecutableType() string {
  return p.ExecutableType
}

func (p *CloudJobSubmission) GetProviderName() ProviderName {
  return p.ProviderName
}

func (p *CloudJobSubmission) GetUserAccountName() string {
  return p.UserAccountName
}
func (p *CloudJobSubmission) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetJobSubmissionInterfaceId bool = false;
  var issetSecurityProtocol bool = false;
  var issetNodeId bool = false;
  var issetExecutableType bool = false;
  var issetProviderName bool = false;
  var issetUserAccountName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetJobSubmissionInterfaceId = true
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetSecurityProtocol = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetNodeId = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetExecutableType = true
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetProviderName = true
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetUserAccountName = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetJobSubmissionInterfaceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field JobSubmissionInterfaceId is not set"));
  }
  if !issetSecurityProtocol{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SecurityProtocol is not set"));
  }
  if !issetNodeId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NodeId is not set"));
  }
  if !issetExecutableType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ExecutableType is not set"));
  }
  if !issetProviderName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProviderName is not set"));
  }
  if !issetUserAccountName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserAccountName is not set"));
  }
  return nil
}

func (p *CloudJobSubmission)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.JobSubmissionInterfaceId = v
}
  return nil
}

func (p *CloudJobSubmission)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := data_movement_models.SecurityProtocol(v)
  p.SecurityProtocol = temp
}
  return nil
}

func (p *CloudJobSubmission)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NodeId = v
}
  return nil
}

func (p *CloudJobSubmission)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ExecutableType = v
}
  return nil
}

func (p *CloudJobSubmission)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := ProviderName(v)
  p.ProviderName = temp
}
  return nil
}

func (p *CloudJobSubmission)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.UserAccountName = v
}
  return nil
}

func (p *CloudJobSubmission) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CloudJobSubmission"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CloudJobSubmission) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("jobSubmissionInterfaceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:jobSubmissionInterfaceId: ", p), err) }
  if err := oprot.WriteString(string(p.JobSubmissionInterfaceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.jobSubmissionInterfaceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:jobSubmissionInterfaceId: ", p), err) }
  return err
}

func (p *CloudJobSubmission) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("securityProtocol", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:securityProtocol: ", p), err) }
  if err := oprot.WriteI32(int32(p.SecurityProtocol)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.securityProtocol (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:securityProtocol: ", p), err) }
  return err
}

func (p *CloudJobSubmission) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nodeId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nodeId: ", p), err) }
  if err := oprot.WriteString(string(p.NodeId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nodeId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nodeId: ", p), err) }
  return err
}

func (p *CloudJobSubmission) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("executableType", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:executableType: ", p), err) }
  if err := oprot.WriteString(string(p.ExecutableType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.executableType (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:executableType: ", p), err) }
  return err
}

func (p *CloudJobSubmission) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("providerName", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:providerName: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProviderName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.providerName (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:providerName: ", p), err) }
  return err
}

func (p *CloudJobSubmission) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userAccountName", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:userAccountName: ", p), err) }
  if err := oprot.WriteString(string(p.UserAccountName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userAccountName (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:userAccountName: ", p), err) }
  return err
}

func (p *CloudJobSubmission) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CloudJobSubmission(%+v)", *p)
}

// Job Submission Interfaces
// 
// jobSubmissionInterfaceId: The Job Submission Interface has to be previously registered and referenced here.
// 
// priorityOrder:
//  For resources with multiple interfaces, the priority order should be selected.
//   Lower the numerical number, higher the priority
// 
// 
// Attributes:
//  - JobSubmissionInterfaceId
//  - JobSubmissionProtocol
//  - PriorityOrder
type JobSubmissionInterface struct {
  JobSubmissionInterfaceId string `thrift:"jobSubmissionInterfaceId,1,required" db:"jobSubmissionInterfaceId" json:"jobSubmissionInterfaceId"`
  JobSubmissionProtocol JobSubmissionProtocol `thrift:"jobSubmissionProtocol,2,required" db:"jobSubmissionProtocol" json:"jobSubmissionProtocol"`
  PriorityOrder int32 `thrift:"priorityOrder,3,required" db:"priorityOrder" json:"priorityOrder"`
}

func NewJobSubmissionInterface() *JobSubmissionInterface {
  return &JobSubmissionInterface{}
}


func (p *JobSubmissionInterface) GetJobSubmissionInterfaceId() string {
  return p.JobSubmissionInterfaceId
}

func (p *JobSubmissionInterface) GetJobSubmissionProtocol() JobSubmissionProtocol {
  return p.JobSubmissionProtocol
}

func (p *JobSubmissionInterface) GetPriorityOrder() int32 {
  return p.PriorityOrder
}
func (p *JobSubmissionInterface) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetJobSubmissionInterfaceId bool = false;
  var issetJobSubmissionProtocol bool = false;
  var issetPriorityOrder bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetJobSubmissionInterfaceId = true
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetJobSubmissionProtocol = true
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetPriorityOrder = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetJobSubmissionInterfaceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field JobSubmissionInterfaceId is not set"));
  }
  if !issetJobSubmissionProtocol{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field JobSubmissionProtocol is not set"));
  }
  if !issetPriorityOrder{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PriorityOrder is not set"));
  }
  return nil
}

func (p *JobSubmissionInterface)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.JobSubmissionInterfaceId = v
}
  return nil
}

func (p *JobSubmissionInterface)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := JobSubmissionProtocol(v)
  p.JobSubmissionProtocol = temp
}
  return nil
}

func (p *JobSubmissionInterface)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PriorityOrder = v
}
  return nil
}

func (p *JobSubmissionInterface) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("JobSubmissionInterface"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JobSubmissionInterface) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("jobSubmissionInterfaceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:jobSubmissionInterfaceId: ", p), err) }
  if err := oprot.WriteString(string(p.JobSubmissionInterfaceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.jobSubmissionInterfaceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:jobSubmissionInterfaceId: ", p), err) }
  return err
}

func (p *JobSubmissionInterface) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("jobSubmissionProtocol", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:jobSubmissionProtocol: ", p), err) }
  if err := oprot.WriteI32(int32(p.JobSubmissionProtocol)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.jobSubmissionProtocol (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:jobSubmissionProtocol: ", p), err) }
  return err
}

func (p *JobSubmissionInterface) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("priorityOrder", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:priorityOrder: ", p), err) }
  if err := oprot.WriteI32(int32(p.PriorityOrder)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.priorityOrder (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:priorityOrder: ", p), err) }
  return err
}

func (p *JobSubmissionInterface) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JobSubmissionInterface(%+v)", *p)
}

// Computational Resource Description
// 
// computeResourceId: Airavata Internal Unique Identifier to distinguish Compute Resource.
// 
// hostName:
//   Fully Qualified Host Name.
// 
// hostAliases:
//   Aliases if any.
// 
// ipAddress:
//   IP Addresses of the Resource.
// 
// resourceDescription:
//  A user friendly description of the resource.
// 
// JobSubmissionProtocols:
//  A computational resources may have one or more ways of submitting Jobs. This structure
//    will hold all available mechanisms to interact with the resource.
//  The key is the priority
// 
// DataMovementProtocol:
//  Option to specify a prefered data movement mechanism of the available options.
// 
// fileSystems:
//  Map of file systems type and the path.
// 
// 
// Attributes:
//  - ComputeResourceId
//  - HostName
//  - HostAliases
//  - IpAddresses
//  - ResourceDescription
//  - Enabled
//  - BatchQueues
//  - FileSystems
//  - JobSubmissionInterfaces
//  - DataMovementInterfaces
//  - MaxMemoryPerNode
//  - GatewayUsageReporting
//  - GatewayUsageModuleLoadCommand
//  - GatewayUsageExecutable
//  - CpusPerNode
//  - DefaultNodeCount
//  - DefaultCPUCount
//  - DefaultWalltime
type ComputeResourceDescription struct {
  ComputeResourceId string `thrift:"computeResourceId,1,required" db:"computeResourceId" json:"computeResourceId"`
  HostName string `thrift:"hostName,2,required" db:"hostName" json:"hostName"`
  HostAliases []string `thrift:"hostAliases,3" db:"hostAliases" json:"hostAliases,omitempty"`
  IpAddresses []string `thrift:"ipAddresses,4" db:"ipAddresses" json:"ipAddresses,omitempty"`
  ResourceDescription *string `thrift:"resourceDescription,5" db:"resourceDescription" json:"resourceDescription,omitempty"`
  Enabled *bool `thrift:"enabled,6" db:"enabled" json:"enabled,omitempty"`
  BatchQueues []*BatchQueue `thrift:"batchQueues,7" db:"batchQueues" json:"batchQueues,omitempty"`
  FileSystems map[FileSystems]string `thrift:"fileSystems,8" db:"fileSystems" json:"fileSystems,omitempty"`
  JobSubmissionInterfaces []*JobSubmissionInterface `thrift:"jobSubmissionInterfaces,9" db:"jobSubmissionInterfaces" json:"jobSubmissionInterfaces,omitempty"`
  DataMovementInterfaces []*data_movement_models.DataMovementInterface `thrift:"dataMovementInterfaces,10" db:"dataMovementInterfaces" json:"dataMovementInterfaces,omitempty"`
  MaxMemoryPerNode *int32 `thrift:"maxMemoryPerNode,11" db:"maxMemoryPerNode" json:"maxMemoryPerNode,omitempty"`
  GatewayUsageReporting *bool `thrift:"gatewayUsageReporting,12" db:"gatewayUsageReporting" json:"gatewayUsageReporting,omitempty"`
  GatewayUsageModuleLoadCommand *string `thrift:"gatewayUsageModuleLoadCommand,13" db:"gatewayUsageModuleLoadCommand" json:"gatewayUsageModuleLoadCommand,omitempty"`
  GatewayUsageExecutable *string `thrift:"gatewayUsageExecutable,14" db:"gatewayUsageExecutable" json:"gatewayUsageExecutable,omitempty"`
  CpusPerNode *int32 `thrift:"cpusPerNode,15" db:"cpusPerNode" json:"cpusPerNode,omitempty"`
  DefaultNodeCount *int32 `thrift:"defaultNodeCount,16" db:"defaultNodeCount" json:"defaultNodeCount,omitempty"`
  DefaultCPUCount *int32 `thrift:"defaultCPUCount,17" db:"defaultCPUCount" json:"defaultCPUCount,omitempty"`
  DefaultWalltime *int32 `thrift:"defaultWalltime,18" db:"defaultWalltime" json:"defaultWalltime,omitempty"`
}

func NewComputeResourceDescription() *ComputeResourceDescription {
  return &ComputeResourceDescription{
ComputeResourceId: "DO_NOT_SET_AT_CLIENTS",
}
}


func (p *ComputeResourceDescription) GetComputeResourceId() string {
  return p.ComputeResourceId
}

func (p *ComputeResourceDescription) GetHostName() string {
  return p.HostName
}
var ComputeResourceDescription_HostAliases_DEFAULT []string

func (p *ComputeResourceDescription) GetHostAliases() []string {
  return p.HostAliases
}
var ComputeResourceDescription_IpAddresses_DEFAULT []string

func (p *ComputeResourceDescription) GetIpAddresses() []string {
  return p.IpAddresses
}
var ComputeResourceDescription_ResourceDescription_DEFAULT string
func (p *ComputeResourceDescription) GetResourceDescription() string {
  if !p.IsSetResourceDescription() {
    return ComputeResourceDescription_ResourceDescription_DEFAULT
  }
return *p.ResourceDescription
}
var ComputeResourceDescription_Enabled_DEFAULT bool
func (p *ComputeResourceDescription) GetEnabled() bool {
  if !p.IsSetEnabled() {
    return ComputeResourceDescription_Enabled_DEFAULT
  }
return *p.Enabled
}
var ComputeResourceDescription_BatchQueues_DEFAULT []*BatchQueue

func (p *ComputeResourceDescription) GetBatchQueues() []*BatchQueue {
  return p.BatchQueues
}
var ComputeResourceDescription_FileSystems_DEFAULT map[FileSystems]string

func (p *ComputeResourceDescription) GetFileSystems() map[FileSystems]string {
  return p.FileSystems
}
var ComputeResourceDescription_JobSubmissionInterfaces_DEFAULT []*JobSubmissionInterface

func (p *ComputeResourceDescription) GetJobSubmissionInterfaces() []*JobSubmissionInterface {
  return p.JobSubmissionInterfaces
}
var ComputeResourceDescription_DataMovementInterfaces_DEFAULT []*data_movement_models.DataMovementInterface

func (p *ComputeResourceDescription) GetDataMovementInterfaces() []*data_movement_models.DataMovementInterface {
  return p.DataMovementInterfaces
}
var ComputeResourceDescription_MaxMemoryPerNode_DEFAULT int32
func (p *ComputeResourceDescription) GetMaxMemoryPerNode() int32 {
  if !p.IsSetMaxMemoryPerNode() {
    return ComputeResourceDescription_MaxMemoryPerNode_DEFAULT
  }
return *p.MaxMemoryPerNode
}
var ComputeResourceDescription_GatewayUsageReporting_DEFAULT bool
func (p *ComputeResourceDescription) GetGatewayUsageReporting() bool {
  if !p.IsSetGatewayUsageReporting() {
    return ComputeResourceDescription_GatewayUsageReporting_DEFAULT
  }
return *p.GatewayUsageReporting
}
var ComputeResourceDescription_GatewayUsageModuleLoadCommand_DEFAULT string
func (p *ComputeResourceDescription) GetGatewayUsageModuleLoadCommand() string {
  if !p.IsSetGatewayUsageModuleLoadCommand() {
    return ComputeResourceDescription_GatewayUsageModuleLoadCommand_DEFAULT
  }
return *p.GatewayUsageModuleLoadCommand
}
var ComputeResourceDescription_GatewayUsageExecutable_DEFAULT string
func (p *ComputeResourceDescription) GetGatewayUsageExecutable() string {
  if !p.IsSetGatewayUsageExecutable() {
    return ComputeResourceDescription_GatewayUsageExecutable_DEFAULT
  }
return *p.GatewayUsageExecutable
}
var ComputeResourceDescription_CpusPerNode_DEFAULT int32
func (p *ComputeResourceDescription) GetCpusPerNode() int32 {
  if !p.IsSetCpusPerNode() {
    return ComputeResourceDescription_CpusPerNode_DEFAULT
  }
return *p.CpusPerNode
}
var ComputeResourceDescription_DefaultNodeCount_DEFAULT int32
func (p *ComputeResourceDescription) GetDefaultNodeCount() int32 {
  if !p.IsSetDefaultNodeCount() {
    return ComputeResourceDescription_DefaultNodeCount_DEFAULT
  }
return *p.DefaultNodeCount
}
var ComputeResourceDescription_DefaultCPUCount_DEFAULT int32
func (p *ComputeResourceDescription) GetDefaultCPUCount() int32 {
  if !p.IsSetDefaultCPUCount() {
    return ComputeResourceDescription_DefaultCPUCount_DEFAULT
  }
return *p.DefaultCPUCount
}
var ComputeResourceDescription_DefaultWalltime_DEFAULT int32
func (p *ComputeResourceDescription) GetDefaultWalltime() int32 {
  if !p.IsSetDefaultWalltime() {
    return ComputeResourceDescription_DefaultWalltime_DEFAULT
  }
return *p.DefaultWalltime
}
func (p *ComputeResourceDescription) IsSetHostAliases() bool {
  return p.HostAliases != nil
}

func (p *ComputeResourceDescription) IsSetIpAddresses() bool {
  return p.IpAddresses != nil
}

func (p *ComputeResourceDescription) IsSetResourceDescription() bool {
  return p.ResourceDescription != nil
}

func (p *ComputeResourceDescription) IsSetEnabled() bool {
  return p.Enabled != nil
}

func (p *ComputeResourceDescription) IsSetBatchQueues() bool {
  return p.BatchQueues != nil
}

func (p *ComputeResourceDescription) IsSetFileSystems() bool {
  return p.FileSystems != nil
}

func (p *ComputeResourceDescription) IsSetJobSubmissionInterfaces() bool {
  return p.JobSubmissionInterfaces != nil
}

func (p *ComputeResourceDescription) IsSetDataMovementInterfaces() bool {
  return p.DataMovementInterfaces != nil
}

func (p *ComputeResourceDescription) IsSetMaxMemoryPerNode() bool {
  return p.MaxMemoryPerNode != nil
}

func (p *ComputeResourceDescription) IsSetGatewayUsageReporting() bool {
  return p.GatewayUsageReporting != nil
}

func (p *ComputeResourceDescription) IsSetGatewayUsageModuleLoadCommand() bool {
  return p.GatewayUsageModuleLoadCommand != nil
}

func (p *ComputeResourceDescription) IsSetGatewayUsageExecutable() bool {
  return p.GatewayUsageExecutable != nil
}

func (p *ComputeResourceDescription) IsSetCpusPerNode() bool {
  return p.CpusPerNode != nil
}

func (p *ComputeResourceDescription) IsSetDefaultNodeCount() bool {
  return p.DefaultNodeCount != nil
}

func (p *ComputeResourceDescription) IsSetDefaultCPUCount() bool {
  return p.DefaultCPUCount != nil
}

func (p *ComputeResourceDescription) IsSetDefaultWalltime() bool {
  return p.DefaultWalltime != nil
}

func (p *ComputeResourceDescription) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetComputeResourceId bool = false;
  var issetHostName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetComputeResourceId = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetHostName = true
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetComputeResourceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ComputeResourceId is not set"));
  }
  if !issetHostName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field HostName is not set"));
  }
  return nil
}

func (p *ComputeResourceDescription)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ComputeResourceId = v
}
  return nil
}

func (p *ComputeResourceDescription)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.HostName = v
}
  return nil
}

func (p *ComputeResourceDescription)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.HostAliases =  tSlice
  for i := 0; i < size; i ++ {
var _elem6 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem6 = v
}
    p.HostAliases = append(p.HostAliases, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ComputeResourceDescription)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.IpAddresses =  tSlice
  for i := 0; i < size; i ++ {
var _elem7 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem7 = v
}
    p.IpAddresses = append(p.IpAddresses, _elem7)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ComputeResourceDescription)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ResourceDescription = &v
}
  return nil
}

func (p *ComputeResourceDescription)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Enabled = &v
}
  return nil
}

func (p *ComputeResourceDescription)  ReadField7(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*BatchQueue, 0, size)
  p.BatchQueues =  tSlice
  for i := 0; i < size; i ++ {
    _elem8 := &BatchQueue{}
    if err := _elem8.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
    }
    p.BatchQueues = append(p.BatchQueues, _elem8)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ComputeResourceDescription)  ReadField8(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[FileSystems]string, size)
  p.FileSystems =  tMap
  for i := 0; i < size; i ++ {
var _key9 FileSystems
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := FileSystems(v)
    _key9 = temp
}
var _val10 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val10 = v
}
    p.FileSystems[_key9] = _val10
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ComputeResourceDescription)  ReadField9(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*JobSubmissionInterface, 0, size)
  p.JobSubmissionInterfaces =  tSlice
  for i := 0; i < size; i ++ {
    _elem11 := &JobSubmissionInterface{}
    if err := _elem11.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem11), err)
    }
    p.JobSubmissionInterfaces = append(p.JobSubmissionInterfaces, _elem11)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ComputeResourceDescription)  ReadField10(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*data_movement_models.DataMovementInterface, 0, size)
  p.DataMovementInterfaces =  tSlice
  for i := 0; i < size; i ++ {
    _elem12 := &data_movement_models.DataMovementInterface{}
    if err := _elem12.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem12), err)
    }
    p.DataMovementInterfaces = append(p.DataMovementInterfaces, _elem12)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ComputeResourceDescription)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.MaxMemoryPerNode = &v
}
  return nil
}

func (p *ComputeResourceDescription)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.GatewayUsageReporting = &v
}
  return nil
}

func (p *ComputeResourceDescription)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.GatewayUsageModuleLoadCommand = &v
}
  return nil
}

func (p *ComputeResourceDescription)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.GatewayUsageExecutable = &v
}
  return nil
}

func (p *ComputeResourceDescription)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.CpusPerNode = &v
}
  return nil
}

func (p *ComputeResourceDescription)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.DefaultNodeCount = &v
}
  return nil
}

func (p *ComputeResourceDescription)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.DefaultCPUCount = &v
}
  return nil
}

func (p *ComputeResourceDescription)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.DefaultWalltime = &v
}
  return nil
}

func (p *ComputeResourceDescription) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ComputeResourceDescription"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ComputeResourceDescription) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("computeResourceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:computeResourceId: ", p), err) }
  if err := oprot.WriteString(string(p.ComputeResourceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.computeResourceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:computeResourceId: ", p), err) }
  return err
}

func (p *ComputeResourceDescription) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hostName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hostName: ", p), err) }
  if err := oprot.WriteString(string(p.HostName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hostName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hostName: ", p), err) }
  return err
}

func (p *ComputeResourceDescription) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetHostAliases() {
    if err := oprot.WriteFieldBegin("hostAliases", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hostAliases: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.HostAliases)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.HostAliases {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hostAliases: ", p), err) }
  }
  return err
}

func (p *ComputeResourceDescription) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetIpAddresses() {
    if err := oprot.WriteFieldBegin("ipAddresses", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ipAddresses: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.IpAddresses)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.IpAddresses {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ipAddresses: ", p), err) }
  }
  return err
}

func (p *ComputeResourceDescription) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetResourceDescription() {
    if err := oprot.WriteFieldBegin("resourceDescription", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:resourceDescription: ", p), err) }
    if err := oprot.WriteString(string(*p.ResourceDescription)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.resourceDescription (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:resourceDescription: ", p), err) }
  }
  return err
}

func (p *ComputeResourceDescription) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetEnabled() {
    if err := oprot.WriteFieldBegin("enabled", thrift.BOOL, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:enabled: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Enabled)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.enabled (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:enabled: ", p), err) }
  }
  return err
}

func (p *ComputeResourceDescription) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetBatchQueues() {
    if err := oprot.WriteFieldBegin("batchQueues", thrift.LIST, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:batchQueues: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.BatchQueues)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.BatchQueues {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:batchQueues: ", p), err) }
  }
  return err
}

func (p *ComputeResourceDescription) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetFileSystems() {
    if err := oprot.WriteFieldBegin("fileSystems", thrift.MAP, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:fileSystems: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.I32, thrift.STRING, len(p.FileSystems)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.FileSystems {
      if err := oprot.WriteI32(int32(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:fileSystems: ", p), err) }
  }
  return err
}

func (p *ComputeResourceDescription) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetJobSubmissionInterfaces() {
    if err := oprot.WriteFieldBegin("jobSubmissionInterfaces", thrift.LIST, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:jobSubmissionInterfaces: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.JobSubmissionInterfaces)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.JobSubmissionInterfaces {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:jobSubmissionInterfaces: ", p), err) }
  }
  return err
}

func (p *ComputeResourceDescription) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetDataMovementInterfaces() {
    if err := oprot.WriteFieldBegin("dataMovementInterfaces", thrift.LIST, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:dataMovementInterfaces: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.DataMovementInterfaces)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.DataMovementInterfaces {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:dataMovementInterfaces: ", p), err) }
  }
  return err
}

func (p *ComputeResourceDescription) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetMaxMemoryPerNode() {
    if err := oprot.WriteFieldBegin("maxMemoryPerNode", thrift.I32, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:maxMemoryPerNode: ", p), err) }
    if err := oprot.WriteI32(int32(*p.MaxMemoryPerNode)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.maxMemoryPerNode (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:maxMemoryPerNode: ", p), err) }
  }
  return err
}

func (p *ComputeResourceDescription) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetGatewayUsageReporting() {
    if err := oprot.WriteFieldBegin("gatewayUsageReporting", thrift.BOOL, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:gatewayUsageReporting: ", p), err) }
    if err := oprot.WriteBool(bool(*p.GatewayUsageReporting)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.gatewayUsageReporting (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:gatewayUsageReporting: ", p), err) }
  }
  return err
}

func (p *ComputeResourceDescription) writeField13(oprot thrift.TProtocol) (err error) {
  if p.IsSetGatewayUsageModuleLoadCommand() {
    if err := oprot.WriteFieldBegin("gatewayUsageModuleLoadCommand", thrift.STRING, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:gatewayUsageModuleLoadCommand: ", p), err) }
    if err := oprot.WriteString(string(*p.GatewayUsageModuleLoadCommand)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.gatewayUsageModuleLoadCommand (13) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:gatewayUsageModuleLoadCommand: ", p), err) }
  }
  return err
}

func (p *ComputeResourceDescription) writeField14(oprot thrift.TProtocol) (err error) {
  if p.IsSetGatewayUsageExecutable() {
    if err := oprot.WriteFieldBegin("gatewayUsageExecutable", thrift.STRING, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:gatewayUsageExecutable: ", p), err) }
    if err := oprot.WriteString(string(*p.GatewayUsageExecutable)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.gatewayUsageExecutable (14) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:gatewayUsageExecutable: ", p), err) }
  }
  return err
}

func (p *ComputeResourceDescription) writeField15(oprot thrift.TProtocol) (err error) {
  if p.IsSetCpusPerNode() {
    if err := oprot.WriteFieldBegin("cpusPerNode", thrift.I32, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:cpusPerNode: ", p), err) }
    if err := oprot.WriteI32(int32(*p.CpusPerNode)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.cpusPerNode (15) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:cpusPerNode: ", p), err) }
  }
  return err
}

func (p *ComputeResourceDescription) writeField16(oprot thrift.TProtocol) (err error) {
  if p.IsSetDefaultNodeCount() {
    if err := oprot.WriteFieldBegin("defaultNodeCount", thrift.I32, 16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:defaultNodeCount: ", p), err) }
    if err := oprot.WriteI32(int32(*p.DefaultNodeCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.defaultNodeCount (16) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 16:defaultNodeCount: ", p), err) }
  }
  return err
}

func (p *ComputeResourceDescription) writeField17(oprot thrift.TProtocol) (err error) {
  if p.IsSetDefaultCPUCount() {
    if err := oprot.WriteFieldBegin("defaultCPUCount", thrift.I32, 17); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:defaultCPUCount: ", p), err) }
    if err := oprot.WriteI32(int32(*p.DefaultCPUCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.defaultCPUCount (17) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 17:defaultCPUCount: ", p), err) }
  }
  return err
}

func (p *ComputeResourceDescription) writeField18(oprot thrift.TProtocol) (err error) {
  if p.IsSetDefaultWalltime() {
    if err := oprot.WriteFieldBegin("defaultWalltime", thrift.I32, 18); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:defaultWalltime: ", p), err) }
    if err := oprot.WriteI32(int32(*p.DefaultWalltime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.defaultWalltime (18) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 18:defaultWalltime: ", p), err) }
  }
  return err
}

func (p *ComputeResourceDescription) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ComputeResourceDescription(%+v)", *p)
}

