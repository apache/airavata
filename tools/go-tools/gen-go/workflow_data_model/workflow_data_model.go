// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package workflow_data_model

import (
	"bytes"
	"reflect"
	"database/sql/driver"
	"errors"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"application_io_models"
	"airavata_commons"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = application_io_models.GoUnusedProtection__
var _ = airavata_commons.GoUnusedProtection__
type WorkflowState int64
const (
  WorkflowState_CREATED WorkflowState = 0
  WorkflowState_STARTED WorkflowState = 1
  WorkflowState_EXECUTING WorkflowState = 2
  WorkflowState_COMPLETED WorkflowState = 3
  WorkflowState_FAILED WorkflowState = 4
  WorkflowState_CANCELLING WorkflowState = 5
  WorkflowState_CANCELED WorkflowState = 6
)

func (p WorkflowState) String() string {
  switch p {
  case WorkflowState_CREATED: return "CREATED"
  case WorkflowState_STARTED: return "STARTED"
  case WorkflowState_EXECUTING: return "EXECUTING"
  case WorkflowState_COMPLETED: return "COMPLETED"
  case WorkflowState_FAILED: return "FAILED"
  case WorkflowState_CANCELLING: return "CANCELLING"
  case WorkflowState_CANCELED: return "CANCELED"
  }
  return "<UNSET>"
}

func WorkflowStateFromString(s string) (WorkflowState, error) {
  switch s {
  case "CREATED": return WorkflowState_CREATED, nil 
  case "STARTED": return WorkflowState_STARTED, nil 
  case "EXECUTING": return WorkflowState_EXECUTING, nil 
  case "COMPLETED": return WorkflowState_COMPLETED, nil 
  case "FAILED": return WorkflowState_FAILED, nil 
  case "CANCELLING": return WorkflowState_CANCELLING, nil 
  case "CANCELED": return WorkflowState_CANCELED, nil 
  }
  return WorkflowState(0), fmt.Errorf("not a valid WorkflowState string")
}


func WorkflowStatePtr(v WorkflowState) *WorkflowState { return &v }

func (p WorkflowState) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *WorkflowState) UnmarshalText(text []byte) error {
q, err := WorkflowStateFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *WorkflowState) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = WorkflowState(v)
return nil
}

func (p * WorkflowState) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ComponentState int64
const (
  ComponentState_CREATED ComponentState = 0
  ComponentState_WAITING ComponentState = 1
  ComponentState_READY ComponentState = 2
  ComponentState_RUNNING ComponentState = 3
  ComponentState_COMPLETED ComponentState = 4
  ComponentState_FAILED ComponentState = 5
  ComponentState_CANCELED ComponentState = 6
)

func (p ComponentState) String() string {
  switch p {
  case ComponentState_CREATED: return "CREATED"
  case ComponentState_WAITING: return "WAITING"
  case ComponentState_READY: return "READY"
  case ComponentState_RUNNING: return "RUNNING"
  case ComponentState_COMPLETED: return "COMPLETED"
  case ComponentState_FAILED: return "FAILED"
  case ComponentState_CANCELED: return "CANCELED"
  }
  return "<UNSET>"
}

func ComponentStateFromString(s string) (ComponentState, error) {
  switch s {
  case "CREATED": return ComponentState_CREATED, nil 
  case "WAITING": return ComponentState_WAITING, nil 
  case "READY": return ComponentState_READY, nil 
  case "RUNNING": return ComponentState_RUNNING, nil 
  case "COMPLETED": return ComponentState_COMPLETED, nil 
  case "FAILED": return ComponentState_FAILED, nil 
  case "CANCELED": return ComponentState_CANCELED, nil 
  }
  return ComponentState(0), fmt.Errorf("not a valid ComponentState string")
}


func ComponentStatePtr(v ComponentState) *ComponentState { return &v }

func (p ComponentState) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ComponentState) UnmarshalText(text []byte) error {
q, err := ComponentStateFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ComponentState) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ComponentState(v)
return nil
}

func (p * ComponentState) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - TemplateId
//  - Name
//  - Graph
//  - GatewayId
//  - CreatedUser
//  - Image
//  - WorkflowInputs
//  - WorkflowOutputs
//  - CreationTime
type WorkflowModel struct {
  TemplateId string `thrift:"templateId,1,required" db:"templateId" json:"templateId"`
  Name string `thrift:"name,2,required" db:"name" json:"name"`
  Graph string `thrift:"graph,3,required" db:"graph" json:"graph"`
  GatewayId string `thrift:"gatewayId,4,required" db:"gatewayId" json:"gatewayId"`
  CreatedUser string `thrift:"createdUser,5,required" db:"createdUser" json:"createdUser"`
  Image []byte `thrift:"image,6" db:"image" json:"image,omitempty"`
  WorkflowInputs []*application_io_models.InputDataObjectType `thrift:"workflowInputs,7" db:"workflowInputs" json:"workflowInputs,omitempty"`
  WorkflowOutputs []*application_io_models.OutputDataObjectType `thrift:"workflowOutputs,8" db:"workflowOutputs" json:"workflowOutputs,omitempty"`
  CreationTime *int64 `thrift:"creationTime,9" db:"creationTime" json:"creationTime,omitempty"`
}

func NewWorkflowModel() *WorkflowModel {
  return &WorkflowModel{
TemplateId: "DO_NOT_SET_AT_CLIENTS",
}
}


func (p *WorkflowModel) GetTemplateId() string {
  return p.TemplateId
}

func (p *WorkflowModel) GetName() string {
  return p.Name
}

func (p *WorkflowModel) GetGraph() string {
  return p.Graph
}

func (p *WorkflowModel) GetGatewayId() string {
  return p.GatewayId
}

func (p *WorkflowModel) GetCreatedUser() string {
  return p.CreatedUser
}
var WorkflowModel_Image_DEFAULT []byte

func (p *WorkflowModel) GetImage() []byte {
  return p.Image
}
var WorkflowModel_WorkflowInputs_DEFAULT []*application_io_models.InputDataObjectType

func (p *WorkflowModel) GetWorkflowInputs() []*application_io_models.InputDataObjectType {
  return p.WorkflowInputs
}
var WorkflowModel_WorkflowOutputs_DEFAULT []*application_io_models.OutputDataObjectType

func (p *WorkflowModel) GetWorkflowOutputs() []*application_io_models.OutputDataObjectType {
  return p.WorkflowOutputs
}
var WorkflowModel_CreationTime_DEFAULT int64
func (p *WorkflowModel) GetCreationTime() int64 {
  if !p.IsSetCreationTime() {
    return WorkflowModel_CreationTime_DEFAULT
  }
return *p.CreationTime
}
func (p *WorkflowModel) IsSetImage() bool {
  return p.Image != nil
}

func (p *WorkflowModel) IsSetWorkflowInputs() bool {
  return p.WorkflowInputs != nil
}

func (p *WorkflowModel) IsSetWorkflowOutputs() bool {
  return p.WorkflowOutputs != nil
}

func (p *WorkflowModel) IsSetCreationTime() bool {
  return p.CreationTime != nil
}

func (p *WorkflowModel) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTemplateId bool = false;
  var issetName bool = false;
  var issetGraph bool = false;
  var issetGatewayId bool = false;
  var issetCreatedUser bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetTemplateId = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetName = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGraph = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGatewayId = true
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetCreatedUser = true
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTemplateId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TemplateId is not set"));
  }
  if !issetName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"));
  }
  if !issetGraph{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Graph is not set"));
  }
  if !issetGatewayId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GatewayId is not set"));
  }
  if !issetCreatedUser{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CreatedUser is not set"));
  }
  return nil
}

func (p *WorkflowModel)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TemplateId = v
}
  return nil
}

func (p *WorkflowModel)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *WorkflowModel)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Graph = v
}
  return nil
}

func (p *WorkflowModel)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.GatewayId = v
}
  return nil
}

func (p *WorkflowModel)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CreatedUser = v
}
  return nil
}

func (p *WorkflowModel)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Image = v
}
  return nil
}

func (p *WorkflowModel)  ReadField7(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*application_io_models.InputDataObjectType, 0, size)
  p.WorkflowInputs =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &application_io_models.InputDataObjectType{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.WorkflowInputs = append(p.WorkflowInputs, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *WorkflowModel)  ReadField8(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*application_io_models.OutputDataObjectType, 0, size)
  p.WorkflowOutputs =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &application_io_models.OutputDataObjectType{}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.WorkflowOutputs = append(p.WorkflowOutputs, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *WorkflowModel)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.CreationTime = &v
}
  return nil
}

func (p *WorkflowModel) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("WorkflowModel"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowModel) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("templateId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:templateId: ", p), err) }
  if err := oprot.WriteString(string(p.TemplateId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.templateId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:templateId: ", p), err) }
  return err
}

func (p *WorkflowModel) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *WorkflowModel) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("graph", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:graph: ", p), err) }
  if err := oprot.WriteString(string(p.Graph)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.graph (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:graph: ", p), err) }
  return err
}

func (p *WorkflowModel) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gatewayId", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:gatewayId: ", p), err) }
  if err := oprot.WriteString(string(p.GatewayId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gatewayId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:gatewayId: ", p), err) }
  return err
}

func (p *WorkflowModel) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createdUser", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:createdUser: ", p), err) }
  if err := oprot.WriteString(string(p.CreatedUser)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdUser (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:createdUser: ", p), err) }
  return err
}

func (p *WorkflowModel) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetImage() {
    if err := oprot.WriteFieldBegin("image", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:image: ", p), err) }
    if err := oprot.WriteBinary(p.Image); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.image (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:image: ", p), err) }
  }
  return err
}

func (p *WorkflowModel) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetWorkflowInputs() {
    if err := oprot.WriteFieldBegin("workflowInputs", thrift.LIST, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:workflowInputs: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.WorkflowInputs)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.WorkflowInputs {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:workflowInputs: ", p), err) }
  }
  return err
}

func (p *WorkflowModel) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetWorkflowOutputs() {
    if err := oprot.WriteFieldBegin("workflowOutputs", thrift.LIST, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:workflowOutputs: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.WorkflowOutputs)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.WorkflowOutputs {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:workflowOutputs: ", p), err) }
  }
  return err
}

func (p *WorkflowModel) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetCreationTime() {
    if err := oprot.WriteFieldBegin("creationTime", thrift.I64, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:creationTime: ", p), err) }
    if err := oprot.WriteI64(int64(*p.CreationTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.creationTime (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:creationTime: ", p), err) }
  }
  return err
}

func (p *WorkflowModel) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowModel(%+v)", *p)
}

// Attributes:
//  - State
//  - Reason
//  - TimeofStateChange
type ComponentStatus struct {
  State ComponentState `thrift:"state,1,required" db:"state" json:"state"`
  Reason *string `thrift:"reason,2" db:"reason" json:"reason,omitempty"`
  TimeofStateChange *int64 `thrift:"timeofStateChange,3" db:"timeofStateChange" json:"timeofStateChange,omitempty"`
}

func NewComponentStatus() *ComponentStatus {
  return &ComponentStatus{
State: 0,
}
}


func (p *ComponentStatus) GetState() ComponentState {
  return p.State
}
var ComponentStatus_Reason_DEFAULT string
func (p *ComponentStatus) GetReason() string {
  if !p.IsSetReason() {
    return ComponentStatus_Reason_DEFAULT
  }
return *p.Reason
}
var ComponentStatus_TimeofStateChange_DEFAULT int64
func (p *ComponentStatus) GetTimeofStateChange() int64 {
  if !p.IsSetTimeofStateChange() {
    return ComponentStatus_TimeofStateChange_DEFAULT
  }
return *p.TimeofStateChange
}
func (p *ComponentStatus) IsSetReason() bool {
  return p.Reason != nil
}

func (p *ComponentStatus) IsSetTimeofStateChange() bool {
  return p.TimeofStateChange != nil
}

func (p *ComponentStatus) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetState bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetState = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetState{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field State is not set"));
  }
  return nil
}

func (p *ComponentStatus)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ComponentState(v)
  p.State = temp
}
  return nil
}

func (p *ComponentStatus)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Reason = &v
}
  return nil
}

func (p *ComponentStatus)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TimeofStateChange = &v
}
  return nil
}

func (p *ComponentStatus) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ComponentStatus"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ComponentStatus) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("state", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:state: ", p), err) }
  if err := oprot.WriteI32(int32(p.State)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.state (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:state: ", p), err) }
  return err
}

func (p *ComponentStatus) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetReason() {
    if err := oprot.WriteFieldBegin("reason", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:reason: ", p), err) }
    if err := oprot.WriteString(string(*p.Reason)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.reason (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:reason: ", p), err) }
  }
  return err
}

func (p *ComponentStatus) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimeofStateChange() {
    if err := oprot.WriteFieldBegin("timeofStateChange", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timeofStateChange: ", p), err) }
    if err := oprot.WriteI64(int64(*p.TimeofStateChange)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timeofStateChange (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timeofStateChange: ", p), err) }
  }
  return err
}

func (p *ComponentStatus) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ComponentStatus(%+v)", *p)
}

// Attributes:
//  - State
//  - TimeOfStateChange
//  - Reason
type WorkflowStatus struct {
  State WorkflowState `thrift:"state,1,required" db:"state" json:"state"`
  TimeOfStateChange *int64 `thrift:"timeOfStateChange,2" db:"timeOfStateChange" json:"timeOfStateChange,omitempty"`
  Reason *string `thrift:"reason,3" db:"reason" json:"reason,omitempty"`
}

func NewWorkflowStatus() *WorkflowStatus {
  return &WorkflowStatus{}
}


func (p *WorkflowStatus) GetState() WorkflowState {
  return p.State
}
var WorkflowStatus_TimeOfStateChange_DEFAULT int64
func (p *WorkflowStatus) GetTimeOfStateChange() int64 {
  if !p.IsSetTimeOfStateChange() {
    return WorkflowStatus_TimeOfStateChange_DEFAULT
  }
return *p.TimeOfStateChange
}
var WorkflowStatus_Reason_DEFAULT string
func (p *WorkflowStatus) GetReason() string {
  if !p.IsSetReason() {
    return WorkflowStatus_Reason_DEFAULT
  }
return *p.Reason
}
func (p *WorkflowStatus) IsSetTimeOfStateChange() bool {
  return p.TimeOfStateChange != nil
}

func (p *WorkflowStatus) IsSetReason() bool {
  return p.Reason != nil
}

func (p *WorkflowStatus) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetState bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetState = true
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetState{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field State is not set"));
  }
  return nil
}

func (p *WorkflowStatus)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := WorkflowState(v)
  p.State = temp
}
  return nil
}

func (p *WorkflowStatus)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TimeOfStateChange = &v
}
  return nil
}

func (p *WorkflowStatus)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Reason = &v
}
  return nil
}

func (p *WorkflowStatus) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("WorkflowStatus"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WorkflowStatus) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("state", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:state: ", p), err) }
  if err := oprot.WriteI32(int32(p.State)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.state (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:state: ", p), err) }
  return err
}

func (p *WorkflowStatus) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimeOfStateChange() {
    if err := oprot.WriteFieldBegin("timeOfStateChange", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timeOfStateChange: ", p), err) }
    if err := oprot.WriteI64(int64(*p.TimeOfStateChange)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timeOfStateChange (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timeOfStateChange: ", p), err) }
  }
  return err
}

func (p *WorkflowStatus) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetReason() {
    if err := oprot.WriteFieldBegin("reason", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reason: ", p), err) }
    if err := oprot.WriteString(string(*p.Reason)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.reason (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reason: ", p), err) }
  }
  return err
}

func (p *WorkflowStatus) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WorkflowStatus(%+v)", *p)
}

// Attributes:
//  - EdgeId
//  - Name
//  - Status
//  - Description
type EdgeModel struct {
  EdgeId string `thrift:"edgeId,1,required" db:"edgeId" json:"edgeId"`
  Name *string `thrift:"name,2" db:"name" json:"name,omitempty"`
  Status *ComponentStatus `thrift:"status,3" db:"status" json:"status,omitempty"`
  Description *string `thrift:"description,4" db:"description" json:"description,omitempty"`
}

func NewEdgeModel() *EdgeModel {
  return &EdgeModel{
EdgeId: "DO_NOT_SET_AT_CLIENTS",
}
}


func (p *EdgeModel) GetEdgeId() string {
  return p.EdgeId
}
var EdgeModel_Name_DEFAULT string
func (p *EdgeModel) GetName() string {
  if !p.IsSetName() {
    return EdgeModel_Name_DEFAULT
  }
return *p.Name
}
var EdgeModel_Status_DEFAULT *ComponentStatus
func (p *EdgeModel) GetStatus() *ComponentStatus {
  if !p.IsSetStatus() {
    return EdgeModel_Status_DEFAULT
  }
return p.Status
}
var EdgeModel_Description_DEFAULT string
func (p *EdgeModel) GetDescription() string {
  if !p.IsSetDescription() {
    return EdgeModel_Description_DEFAULT
  }
return *p.Description
}
func (p *EdgeModel) IsSetName() bool {
  return p.Name != nil
}

func (p *EdgeModel) IsSetStatus() bool {
  return p.Status != nil
}

func (p *EdgeModel) IsSetDescription() bool {
  return p.Description != nil
}

func (p *EdgeModel) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetEdgeId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetEdgeId = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetEdgeId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field EdgeId is not set"));
  }
  return nil
}

func (p *EdgeModel)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.EdgeId = v
}
  return nil
}

func (p *EdgeModel)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = &v
}
  return nil
}

func (p *EdgeModel)  ReadField3(iprot thrift.TProtocol) error {
  p.Status = &ComponentStatus{
  State:   0,
}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *EdgeModel)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Description = &v
}
  return nil
}

func (p *EdgeModel) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("EdgeModel"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EdgeModel) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("edgeId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:edgeId: ", p), err) }
  if err := oprot.WriteString(string(p.EdgeId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.edgeId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:edgeId: ", p), err) }
  return err
}

func (p *EdgeModel) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetName() {
    if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
    if err := oprot.WriteString(string(*p.Name)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  }
  return err
}

func (p *EdgeModel) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err) }
    if err := p.Status.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err) }
  }
  return err
}

func (p *EdgeModel) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetDescription() {
    if err := oprot.WriteFieldBegin("description", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:description: ", p), err) }
    if err := oprot.WriteString(string(*p.Description)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.description (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:description: ", p), err) }
  }
  return err
}

func (p *EdgeModel) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EdgeModel(%+v)", *p)
}

// Attributes:
//  - PortId
//  - Name
//  - Status
//  - Value
//  - Description
type PortModel struct {
  PortId string `thrift:"portId,1,required" db:"portId" json:"portId"`
  Name *string `thrift:"name,2" db:"name" json:"name,omitempty"`
  Status *ComponentStatus `thrift:"status,3" db:"status" json:"status,omitempty"`
  Value *string `thrift:"value,4" db:"value" json:"value,omitempty"`
  Description *string `thrift:"description,5" db:"description" json:"description,omitempty"`
}

func NewPortModel() *PortModel {
  return &PortModel{
PortId: "DO_NOT_SET_AT_CLIENTS",
}
}


func (p *PortModel) GetPortId() string {
  return p.PortId
}
var PortModel_Name_DEFAULT string
func (p *PortModel) GetName() string {
  if !p.IsSetName() {
    return PortModel_Name_DEFAULT
  }
return *p.Name
}
var PortModel_Status_DEFAULT *ComponentStatus
func (p *PortModel) GetStatus() *ComponentStatus {
  if !p.IsSetStatus() {
    return PortModel_Status_DEFAULT
  }
return p.Status
}
var PortModel_Value_DEFAULT string
func (p *PortModel) GetValue() string {
  if !p.IsSetValue() {
    return PortModel_Value_DEFAULT
  }
return *p.Value
}
var PortModel_Description_DEFAULT string
func (p *PortModel) GetDescription() string {
  if !p.IsSetDescription() {
    return PortModel_Description_DEFAULT
  }
return *p.Description
}
func (p *PortModel) IsSetName() bool {
  return p.Name != nil
}

func (p *PortModel) IsSetStatus() bool {
  return p.Status != nil
}

func (p *PortModel) IsSetValue() bool {
  return p.Value != nil
}

func (p *PortModel) IsSetDescription() bool {
  return p.Description != nil
}

func (p *PortModel) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetPortId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetPortId = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetPortId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PortId is not set"));
  }
  return nil
}

func (p *PortModel)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.PortId = v
}
  return nil
}

func (p *PortModel)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = &v
}
  return nil
}

func (p *PortModel)  ReadField3(iprot thrift.TProtocol) error {
  p.Status = &ComponentStatus{
  State:   0,
}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *PortModel)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Value = &v
}
  return nil
}

func (p *PortModel)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Description = &v
}
  return nil
}

func (p *PortModel) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PortModel"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PortModel) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("portId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:portId: ", p), err) }
  if err := oprot.WriteString(string(p.PortId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.portId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:portId: ", p), err) }
  return err
}

func (p *PortModel) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetName() {
    if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
    if err := oprot.WriteString(string(*p.Name)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  }
  return err
}

func (p *PortModel) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err) }
    if err := p.Status.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err) }
  }
  return err
}

func (p *PortModel) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetValue() {
    if err := oprot.WriteFieldBegin("value", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:value: ", p), err) }
    if err := oprot.WriteString(string(*p.Value)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.value (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:value: ", p), err) }
  }
  return err
}

func (p *PortModel) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetDescription() {
    if err := oprot.WriteFieldBegin("description", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:description: ", p), err) }
    if err := oprot.WriteString(string(*p.Description)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.description (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:description: ", p), err) }
  }
  return err
}

func (p *PortModel) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PortModel(%+v)", *p)
}

// Attributes:
//  - NodeId
//  - Name
//  - ApplicationId
//  - ApplicationName
//  - Status
//  - Description
type NodeModel struct {
  NodeId string `thrift:"nodeId,1,required" db:"nodeId" json:"nodeId"`
  Name *string `thrift:"name,2" db:"name" json:"name,omitempty"`
  ApplicationId *string `thrift:"applicationId,3" db:"applicationId" json:"applicationId,omitempty"`
  ApplicationName *string `thrift:"applicationName,4" db:"applicationName" json:"applicationName,omitempty"`
  Status *ComponentStatus `thrift:"status,5" db:"status" json:"status,omitempty"`
  Description *string `thrift:"description,6" db:"description" json:"description,omitempty"`
}

func NewNodeModel() *NodeModel {
  return &NodeModel{
NodeId: "DO_NOT_SET_AT_CLIENTS",
}
}


func (p *NodeModel) GetNodeId() string {
  return p.NodeId
}
var NodeModel_Name_DEFAULT string
func (p *NodeModel) GetName() string {
  if !p.IsSetName() {
    return NodeModel_Name_DEFAULT
  }
return *p.Name
}
var NodeModel_ApplicationId_DEFAULT string
func (p *NodeModel) GetApplicationId() string {
  if !p.IsSetApplicationId() {
    return NodeModel_ApplicationId_DEFAULT
  }
return *p.ApplicationId
}
var NodeModel_ApplicationName_DEFAULT string
func (p *NodeModel) GetApplicationName() string {
  if !p.IsSetApplicationName() {
    return NodeModel_ApplicationName_DEFAULT
  }
return *p.ApplicationName
}
var NodeModel_Status_DEFAULT *ComponentStatus
func (p *NodeModel) GetStatus() *ComponentStatus {
  if !p.IsSetStatus() {
    return NodeModel_Status_DEFAULT
  }
return p.Status
}
var NodeModel_Description_DEFAULT string
func (p *NodeModel) GetDescription() string {
  if !p.IsSetDescription() {
    return NodeModel_Description_DEFAULT
  }
return *p.Description
}
func (p *NodeModel) IsSetName() bool {
  return p.Name != nil
}

func (p *NodeModel) IsSetApplicationId() bool {
  return p.ApplicationId != nil
}

func (p *NodeModel) IsSetApplicationName() bool {
  return p.ApplicationName != nil
}

func (p *NodeModel) IsSetStatus() bool {
  return p.Status != nil
}

func (p *NodeModel) IsSetDescription() bool {
  return p.Description != nil
}

func (p *NodeModel) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNodeId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetNodeId = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNodeId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NodeId is not set"));
  }
  return nil
}

func (p *NodeModel)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.NodeId = v
}
  return nil
}

func (p *NodeModel)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = &v
}
  return nil
}

func (p *NodeModel)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ApplicationId = &v
}
  return nil
}

func (p *NodeModel)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ApplicationName = &v
}
  return nil
}

func (p *NodeModel)  ReadField5(iprot thrift.TProtocol) error {
  p.Status = &ComponentStatus{
  State:   0,
}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *NodeModel)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Description = &v
}
  return nil
}

func (p *NodeModel) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("NodeModel"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NodeModel) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nodeId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nodeId: ", p), err) }
  if err := oprot.WriteString(string(p.NodeId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nodeId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nodeId: ", p), err) }
  return err
}

func (p *NodeModel) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetName() {
    if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
    if err := oprot.WriteString(string(*p.Name)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  }
  return err
}

func (p *NodeModel) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetApplicationId() {
    if err := oprot.WriteFieldBegin("applicationId", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:applicationId: ", p), err) }
    if err := oprot.WriteString(string(*p.ApplicationId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.applicationId (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:applicationId: ", p), err) }
  }
  return err
}

func (p *NodeModel) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetApplicationName() {
    if err := oprot.WriteFieldBegin("applicationName", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:applicationName: ", p), err) }
    if err := oprot.WriteString(string(*p.ApplicationName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.applicationName (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:applicationName: ", p), err) }
  }
  return err
}

func (p *NodeModel) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:status: ", p), err) }
    if err := p.Status.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:status: ", p), err) }
  }
  return err
}

func (p *NodeModel) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetDescription() {
    if err := oprot.WriteFieldBegin("description", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:description: ", p), err) }
    if err := oprot.WriteString(string(*p.Description)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.description (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:description: ", p), err) }
  }
  return err
}

func (p *NodeModel) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NodeModel(%+v)", *p)
}

