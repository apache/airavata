// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package status_models

import (
	"bytes"
	"reflect"
	"database/sql/driver"
	"errors"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type ExperimentState int64
const (
  ExperimentState_CREATED ExperimentState = 0
  ExperimentState_VALIDATED ExperimentState = 1
  ExperimentState_SCHEDULED ExperimentState = 2
  ExperimentState_LAUNCHED ExperimentState = 3
  ExperimentState_EXECUTING ExperimentState = 4
  ExperimentState_CANCELING ExperimentState = 5
  ExperimentState_CANCELED ExperimentState = 6
  ExperimentState_COMPLETED ExperimentState = 7
  ExperimentState_FAILED ExperimentState = 8
)

func (p ExperimentState) String() string {
  switch p {
  case ExperimentState_CREATED: return "CREATED"
  case ExperimentState_VALIDATED: return "VALIDATED"
  case ExperimentState_SCHEDULED: return "SCHEDULED"
  case ExperimentState_LAUNCHED: return "LAUNCHED"
  case ExperimentState_EXECUTING: return "EXECUTING"
  case ExperimentState_CANCELING: return "CANCELING"
  case ExperimentState_CANCELED: return "CANCELED"
  case ExperimentState_COMPLETED: return "COMPLETED"
  case ExperimentState_FAILED: return "FAILED"
  }
  return "<UNSET>"
}

func ExperimentStateFromString(s string) (ExperimentState, error) {
  switch s {
  case "CREATED": return ExperimentState_CREATED, nil 
  case "VALIDATED": return ExperimentState_VALIDATED, nil 
  case "SCHEDULED": return ExperimentState_SCHEDULED, nil 
  case "LAUNCHED": return ExperimentState_LAUNCHED, nil 
  case "EXECUTING": return ExperimentState_EXECUTING, nil 
  case "CANCELING": return ExperimentState_CANCELING, nil 
  case "CANCELED": return ExperimentState_CANCELED, nil 
  case "COMPLETED": return ExperimentState_COMPLETED, nil 
  case "FAILED": return ExperimentState_FAILED, nil 
  }
  return ExperimentState(0), fmt.Errorf("not a valid ExperimentState string")
}


func ExperimentStatePtr(v ExperimentState) *ExperimentState { return &v }

func (p ExperimentState) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ExperimentState) UnmarshalText(text []byte) error {
q, err := ExperimentStateFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ExperimentState) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ExperimentState(v)
return nil
}

func (p * ExperimentState) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TaskState int64
const (
  TaskState_CREATED TaskState = 0
  TaskState_EXECUTING TaskState = 1
  TaskState_COMPLETED TaskState = 2
  TaskState_FAILED TaskState = 3
  TaskState_CANCELED TaskState = 4
)

func (p TaskState) String() string {
  switch p {
  case TaskState_CREATED: return "CREATED"
  case TaskState_EXECUTING: return "EXECUTING"
  case TaskState_COMPLETED: return "COMPLETED"
  case TaskState_FAILED: return "FAILED"
  case TaskState_CANCELED: return "CANCELED"
  }
  return "<UNSET>"
}

func TaskStateFromString(s string) (TaskState, error) {
  switch s {
  case "CREATED": return TaskState_CREATED, nil 
  case "EXECUTING": return TaskState_EXECUTING, nil 
  case "COMPLETED": return TaskState_COMPLETED, nil 
  case "FAILED": return TaskState_FAILED, nil 
  case "CANCELED": return TaskState_CANCELED, nil 
  }
  return TaskState(0), fmt.Errorf("not a valid TaskState string")
}


func TaskStatePtr(v TaskState) *TaskState { return &v }

func (p TaskState) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TaskState) UnmarshalText(text []byte) error {
q, err := TaskStateFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TaskState) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TaskState(v)
return nil
}

func (p * TaskState) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ProcessState int64
const (
  ProcessState_CREATED ProcessState = 0
  ProcessState_VALIDATED ProcessState = 1
  ProcessState_STARTED ProcessState = 2
  ProcessState_PRE_PROCESSING ProcessState = 3
  ProcessState_CONFIGURING_WORKSPACE ProcessState = 4
  ProcessState_INPUT_DATA_STAGING ProcessState = 5
  ProcessState_EXECUTING ProcessState = 6
  ProcessState_MONITORING ProcessState = 7
  ProcessState_OUTPUT_DATA_STAGING ProcessState = 8
  ProcessState_POST_PROCESSING ProcessState = 9
  ProcessState_COMPLETED ProcessState = 10
  ProcessState_FAILED ProcessState = 11
  ProcessState_CANCELLING ProcessState = 12
  ProcessState_CANCELED ProcessState = 13
)

func (p ProcessState) String() string {
  switch p {
  case ProcessState_CREATED: return "CREATED"
  case ProcessState_VALIDATED: return "VALIDATED"
  case ProcessState_STARTED: return "STARTED"
  case ProcessState_PRE_PROCESSING: return "PRE_PROCESSING"
  case ProcessState_CONFIGURING_WORKSPACE: return "CONFIGURING_WORKSPACE"
  case ProcessState_INPUT_DATA_STAGING: return "INPUT_DATA_STAGING"
  case ProcessState_EXECUTING: return "EXECUTING"
  case ProcessState_MONITORING: return "MONITORING"
  case ProcessState_OUTPUT_DATA_STAGING: return "OUTPUT_DATA_STAGING"
  case ProcessState_POST_PROCESSING: return "POST_PROCESSING"
  case ProcessState_COMPLETED: return "COMPLETED"
  case ProcessState_FAILED: return "FAILED"
  case ProcessState_CANCELLING: return "CANCELLING"
  case ProcessState_CANCELED: return "CANCELED"
  }
  return "<UNSET>"
}

func ProcessStateFromString(s string) (ProcessState, error) {
  switch s {
  case "CREATED": return ProcessState_CREATED, nil 
  case "VALIDATED": return ProcessState_VALIDATED, nil 
  case "STARTED": return ProcessState_STARTED, nil 
  case "PRE_PROCESSING": return ProcessState_PRE_PROCESSING, nil 
  case "CONFIGURING_WORKSPACE": return ProcessState_CONFIGURING_WORKSPACE, nil 
  case "INPUT_DATA_STAGING": return ProcessState_INPUT_DATA_STAGING, nil 
  case "EXECUTING": return ProcessState_EXECUTING, nil 
  case "MONITORING": return ProcessState_MONITORING, nil 
  case "OUTPUT_DATA_STAGING": return ProcessState_OUTPUT_DATA_STAGING, nil 
  case "POST_PROCESSING": return ProcessState_POST_PROCESSING, nil 
  case "COMPLETED": return ProcessState_COMPLETED, nil 
  case "FAILED": return ProcessState_FAILED, nil 
  case "CANCELLING": return ProcessState_CANCELLING, nil 
  case "CANCELED": return ProcessState_CANCELED, nil 
  }
  return ProcessState(0), fmt.Errorf("not a valid ProcessState string")
}


func ProcessStatePtr(v ProcessState) *ProcessState { return &v }

func (p ProcessState) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ProcessState) UnmarshalText(text []byte) error {
q, err := ProcessStateFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ProcessState) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ProcessState(v)
return nil
}

func (p * ProcessState) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type JobState int64
const (
  JobState_SUBMITTED JobState = 0
  JobState_QUEUED JobState = 1
  JobState_ACTIVE JobState = 2
  JobState_COMPLETE JobState = 3
  JobState_CANCELED JobState = 4
  JobState_FAILED JobState = 5
  JobState_SUSPENDED JobState = 6
  JobState_UNKNOWN JobState = 7
)

func (p JobState) String() string {
  switch p {
  case JobState_SUBMITTED: return "SUBMITTED"
  case JobState_QUEUED: return "QUEUED"
  case JobState_ACTIVE: return "ACTIVE"
  case JobState_COMPLETE: return "COMPLETE"
  case JobState_CANCELED: return "CANCELED"
  case JobState_FAILED: return "FAILED"
  case JobState_SUSPENDED: return "SUSPENDED"
  case JobState_UNKNOWN: return "UNKNOWN"
  }
  return "<UNSET>"
}

func JobStateFromString(s string) (JobState, error) {
  switch s {
  case "SUBMITTED": return JobState_SUBMITTED, nil 
  case "QUEUED": return JobState_QUEUED, nil 
  case "ACTIVE": return JobState_ACTIVE, nil 
  case "COMPLETE": return JobState_COMPLETE, nil 
  case "CANCELED": return JobState_CANCELED, nil 
  case "FAILED": return JobState_FAILED, nil 
  case "SUSPENDED": return JobState_SUSPENDED, nil 
  case "UNKNOWN": return JobState_UNKNOWN, nil 
  }
  return JobState(0), fmt.Errorf("not a valid JobState string")
}


func JobStatePtr(v JobState) *JobState { return &v }

func (p JobState) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *JobState) UnmarshalText(text []byte) error {
q, err := JobStateFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *JobState) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = JobState(v)
return nil
}

func (p * JobState) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Status: A generic status object.
// 
// state:
//   State .
// 
// timeOfStateChange:
//   time the status was last updated.
// 
// reason:
//   User friendly reason on how the state is inferred.
// 
// 
// Attributes:
//  - State
//  - TimeOfStateChange
//  - Reason
type ExperimentStatus struct {
  State ExperimentState `thrift:"state,1,required" db:"state" json:"state"`
  TimeOfStateChange *int64 `thrift:"timeOfStateChange,2" db:"timeOfStateChange" json:"timeOfStateChange,omitempty"`
  Reason *string `thrift:"reason,3" db:"reason" json:"reason,omitempty"`
}

func NewExperimentStatus() *ExperimentStatus {
  return &ExperimentStatus{}
}


func (p *ExperimentStatus) GetState() ExperimentState {
  return p.State
}
var ExperimentStatus_TimeOfStateChange_DEFAULT int64
func (p *ExperimentStatus) GetTimeOfStateChange() int64 {
  if !p.IsSetTimeOfStateChange() {
    return ExperimentStatus_TimeOfStateChange_DEFAULT
  }
return *p.TimeOfStateChange
}
var ExperimentStatus_Reason_DEFAULT string
func (p *ExperimentStatus) GetReason() string {
  if !p.IsSetReason() {
    return ExperimentStatus_Reason_DEFAULT
  }
return *p.Reason
}
func (p *ExperimentStatus) IsSetTimeOfStateChange() bool {
  return p.TimeOfStateChange != nil
}

func (p *ExperimentStatus) IsSetReason() bool {
  return p.Reason != nil
}

func (p *ExperimentStatus) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetState bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetState = true
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetState{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field State is not set"));
  }
  return nil
}

func (p *ExperimentStatus)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ExperimentState(v)
  p.State = temp
}
  return nil
}

func (p *ExperimentStatus)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TimeOfStateChange = &v
}
  return nil
}

func (p *ExperimentStatus)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Reason = &v
}
  return nil
}

func (p *ExperimentStatus) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ExperimentStatus"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExperimentStatus) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("state", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:state: ", p), err) }
  if err := oprot.WriteI32(int32(p.State)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.state (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:state: ", p), err) }
  return err
}

func (p *ExperimentStatus) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimeOfStateChange() {
    if err := oprot.WriteFieldBegin("timeOfStateChange", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timeOfStateChange: ", p), err) }
    if err := oprot.WriteI64(int64(*p.TimeOfStateChange)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timeOfStateChange (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timeOfStateChange: ", p), err) }
  }
  return err
}

func (p *ExperimentStatus) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetReason() {
    if err := oprot.WriteFieldBegin("reason", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reason: ", p), err) }
    if err := oprot.WriteString(string(*p.Reason)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.reason (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reason: ", p), err) }
  }
  return err
}

func (p *ExperimentStatus) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExperimentStatus(%+v)", *p)
}

// Attributes:
//  - State
//  - TimeOfStateChange
//  - Reason
type ProcessStatus struct {
  State ProcessState `thrift:"state,1,required" db:"state" json:"state"`
  TimeOfStateChange *int64 `thrift:"timeOfStateChange,2" db:"timeOfStateChange" json:"timeOfStateChange,omitempty"`
  Reason *string `thrift:"reason,3" db:"reason" json:"reason,omitempty"`
}

func NewProcessStatus() *ProcessStatus {
  return &ProcessStatus{}
}


func (p *ProcessStatus) GetState() ProcessState {
  return p.State
}
var ProcessStatus_TimeOfStateChange_DEFAULT int64
func (p *ProcessStatus) GetTimeOfStateChange() int64 {
  if !p.IsSetTimeOfStateChange() {
    return ProcessStatus_TimeOfStateChange_DEFAULT
  }
return *p.TimeOfStateChange
}
var ProcessStatus_Reason_DEFAULT string
func (p *ProcessStatus) GetReason() string {
  if !p.IsSetReason() {
    return ProcessStatus_Reason_DEFAULT
  }
return *p.Reason
}
func (p *ProcessStatus) IsSetTimeOfStateChange() bool {
  return p.TimeOfStateChange != nil
}

func (p *ProcessStatus) IsSetReason() bool {
  return p.Reason != nil
}

func (p *ProcessStatus) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetState bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetState = true
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetState{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field State is not set"));
  }
  return nil
}

func (p *ProcessStatus)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ProcessState(v)
  p.State = temp
}
  return nil
}

func (p *ProcessStatus)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TimeOfStateChange = &v
}
  return nil
}

func (p *ProcessStatus)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Reason = &v
}
  return nil
}

func (p *ProcessStatus) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ProcessStatus"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ProcessStatus) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("state", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:state: ", p), err) }
  if err := oprot.WriteI32(int32(p.State)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.state (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:state: ", p), err) }
  return err
}

func (p *ProcessStatus) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimeOfStateChange() {
    if err := oprot.WriteFieldBegin("timeOfStateChange", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timeOfStateChange: ", p), err) }
    if err := oprot.WriteI64(int64(*p.TimeOfStateChange)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timeOfStateChange (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timeOfStateChange: ", p), err) }
  }
  return err
}

func (p *ProcessStatus) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetReason() {
    if err := oprot.WriteFieldBegin("reason", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reason: ", p), err) }
    if err := oprot.WriteString(string(*p.Reason)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.reason (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reason: ", p), err) }
  }
  return err
}

func (p *ProcessStatus) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProcessStatus(%+v)", *p)
}

// Attributes:
//  - State
//  - TimeOfStateChange
//  - Reason
type TaskStatus struct {
  State TaskState `thrift:"state,1,required" db:"state" json:"state"`
  TimeOfStateChange *int64 `thrift:"timeOfStateChange,2" db:"timeOfStateChange" json:"timeOfStateChange,omitempty"`
  Reason *string `thrift:"reason,3" db:"reason" json:"reason,omitempty"`
}

func NewTaskStatus() *TaskStatus {
  return &TaskStatus{}
}


func (p *TaskStatus) GetState() TaskState {
  return p.State
}
var TaskStatus_TimeOfStateChange_DEFAULT int64
func (p *TaskStatus) GetTimeOfStateChange() int64 {
  if !p.IsSetTimeOfStateChange() {
    return TaskStatus_TimeOfStateChange_DEFAULT
  }
return *p.TimeOfStateChange
}
var TaskStatus_Reason_DEFAULT string
func (p *TaskStatus) GetReason() string {
  if !p.IsSetReason() {
    return TaskStatus_Reason_DEFAULT
  }
return *p.Reason
}
func (p *TaskStatus) IsSetTimeOfStateChange() bool {
  return p.TimeOfStateChange != nil
}

func (p *TaskStatus) IsSetReason() bool {
  return p.Reason != nil
}

func (p *TaskStatus) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetState bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetState = true
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetState{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field State is not set"));
  }
  return nil
}

func (p *TaskStatus)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TaskState(v)
  p.State = temp
}
  return nil
}

func (p *TaskStatus)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TimeOfStateChange = &v
}
  return nil
}

func (p *TaskStatus)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Reason = &v
}
  return nil
}

func (p *TaskStatus) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TaskStatus"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TaskStatus) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("state", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:state: ", p), err) }
  if err := oprot.WriteI32(int32(p.State)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.state (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:state: ", p), err) }
  return err
}

func (p *TaskStatus) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimeOfStateChange() {
    if err := oprot.WriteFieldBegin("timeOfStateChange", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timeOfStateChange: ", p), err) }
    if err := oprot.WriteI64(int64(*p.TimeOfStateChange)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timeOfStateChange (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timeOfStateChange: ", p), err) }
  }
  return err
}

func (p *TaskStatus) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetReason() {
    if err := oprot.WriteFieldBegin("reason", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reason: ", p), err) }
    if err := oprot.WriteString(string(*p.Reason)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.reason (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reason: ", p), err) }
  }
  return err
}

func (p *TaskStatus) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TaskStatus(%+v)", *p)
}

// Attributes:
//  - JobState
//  - TimeOfStateChange
//  - Reason
type JobStatus struct {
  JobState JobState `thrift:"jobState,1,required" db:"jobState" json:"jobState"`
  TimeOfStateChange *int64 `thrift:"timeOfStateChange,2" db:"timeOfStateChange" json:"timeOfStateChange,omitempty"`
  Reason *string `thrift:"reason,3" db:"reason" json:"reason,omitempty"`
}

func NewJobStatus() *JobStatus {
  return &JobStatus{}
}


func (p *JobStatus) GetJobState() JobState {
  return p.JobState
}
var JobStatus_TimeOfStateChange_DEFAULT int64
func (p *JobStatus) GetTimeOfStateChange() int64 {
  if !p.IsSetTimeOfStateChange() {
    return JobStatus_TimeOfStateChange_DEFAULT
  }
return *p.TimeOfStateChange
}
var JobStatus_Reason_DEFAULT string
func (p *JobStatus) GetReason() string {
  if !p.IsSetReason() {
    return JobStatus_Reason_DEFAULT
  }
return *p.Reason
}
func (p *JobStatus) IsSetTimeOfStateChange() bool {
  return p.TimeOfStateChange != nil
}

func (p *JobStatus) IsSetReason() bool {
  return p.Reason != nil
}

func (p *JobStatus) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetJobState bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetJobState = true
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetJobState{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field JobState is not set"));
  }
  return nil
}

func (p *JobStatus)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := JobState(v)
  p.JobState = temp
}
  return nil
}

func (p *JobStatus)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TimeOfStateChange = &v
}
  return nil
}

func (p *JobStatus)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Reason = &v
}
  return nil
}

func (p *JobStatus) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("JobStatus"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JobStatus) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("jobState", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:jobState: ", p), err) }
  if err := oprot.WriteI32(int32(p.JobState)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.jobState (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:jobState: ", p), err) }
  return err
}

func (p *JobStatus) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimeOfStateChange() {
    if err := oprot.WriteFieldBegin("timeOfStateChange", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timeOfStateChange: ", p), err) }
    if err := oprot.WriteI64(int64(*p.TimeOfStateChange)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timeOfStateChange (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timeOfStateChange: ", p), err) }
  }
  return err
}

func (p *JobStatus) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetReason() {
    if err := oprot.WriteFieldBegin("reason", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reason: ", p), err) }
    if err := oprot.WriteString(string(*p.Reason)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.reason (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reason: ", p), err) }
  }
  return err
}

func (p *JobStatus) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JobStatus(%+v)", *p)
}

// Attributes:
//  - HostName
//  - QueueName
//  - QueueUp
//  - RunningJobs
//  - QueuedJobs
//  - Time
type QueueStatusModel struct {
  HostName string `thrift:"hostName,1,required" db:"hostName" json:"hostName"`
  QueueName string `thrift:"queueName,2,required" db:"queueName" json:"queueName"`
  QueueUp bool `thrift:"queueUp,3,required" db:"queueUp" json:"queueUp"`
  RunningJobs int32 `thrift:"runningJobs,4,required" db:"runningJobs" json:"runningJobs"`
  QueuedJobs int32 `thrift:"queuedJobs,5,required" db:"queuedJobs" json:"queuedJobs"`
  Time int64 `thrift:"time,6,required" db:"time" json:"time"`
}

func NewQueueStatusModel() *QueueStatusModel {
  return &QueueStatusModel{}
}


func (p *QueueStatusModel) GetHostName() string {
  return p.HostName
}

func (p *QueueStatusModel) GetQueueName() string {
  return p.QueueName
}

func (p *QueueStatusModel) GetQueueUp() bool {
  return p.QueueUp
}

func (p *QueueStatusModel) GetRunningJobs() int32 {
  return p.RunningJobs
}

func (p *QueueStatusModel) GetQueuedJobs() int32 {
  return p.QueuedJobs
}

func (p *QueueStatusModel) GetTime() int64 {
  return p.Time
}
func (p *QueueStatusModel) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetHostName bool = false;
  var issetQueueName bool = false;
  var issetQueueUp bool = false;
  var issetRunningJobs bool = false;
  var issetQueuedJobs bool = false;
  var issetTime bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetHostName = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetQueueName = true
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetQueueUp = true
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRunningJobs = true
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetQueuedJobs = true
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetTime = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetHostName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field HostName is not set"));
  }
  if !issetQueueName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field QueueName is not set"));
  }
  if !issetQueueUp{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field QueueUp is not set"));
  }
  if !issetRunningJobs{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RunningJobs is not set"));
  }
  if !issetQueuedJobs{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field QueuedJobs is not set"));
  }
  if !issetTime{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Time is not set"));
  }
  return nil
}

func (p *QueueStatusModel)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.HostName = v
}
  return nil
}

func (p *QueueStatusModel)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.QueueName = v
}
  return nil
}

func (p *QueueStatusModel)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.QueueUp = v
}
  return nil
}

func (p *QueueStatusModel)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.RunningJobs = v
}
  return nil
}

func (p *QueueStatusModel)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.QueuedJobs = v
}
  return nil
}

func (p *QueueStatusModel)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Time = v
}
  return nil
}

func (p *QueueStatusModel) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("QueueStatusModel"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *QueueStatusModel) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hostName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hostName: ", p), err) }
  if err := oprot.WriteString(string(p.HostName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hostName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hostName: ", p), err) }
  return err
}

func (p *QueueStatusModel) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("queueName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:queueName: ", p), err) }
  if err := oprot.WriteString(string(p.QueueName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.queueName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:queueName: ", p), err) }
  return err
}

func (p *QueueStatusModel) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("queueUp", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:queueUp: ", p), err) }
  if err := oprot.WriteBool(bool(p.QueueUp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.queueUp (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:queueUp: ", p), err) }
  return err
}

func (p *QueueStatusModel) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("runningJobs", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:runningJobs: ", p), err) }
  if err := oprot.WriteI32(int32(p.RunningJobs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.runningJobs (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:runningJobs: ", p), err) }
  return err
}

func (p *QueueStatusModel) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("queuedJobs", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:queuedJobs: ", p), err) }
  if err := oprot.WriteI32(int32(p.QueuedJobs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.queuedJobs (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:queuedJobs: ", p), err) }
  return err
}

func (p *QueueStatusModel) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("time", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:time: ", p), err) }
  if err := oprot.WriteI64(int64(p.Time)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.time (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:time: ", p), err) }
  return err
}

func (p *QueueStatusModel) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("QueueStatusModel(%+v)", *p)
}

