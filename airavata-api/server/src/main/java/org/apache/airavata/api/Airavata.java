    /*
     * Licensed to the Apache Software Foundation (ASF) under one or more
     * contributor license agreements.  See the NOTICE file distributed with
     * this work for additional information regarding copyright ownership.
     * The ASF licenses this file to You under the Apache License, Version 2.0
     * (the "License"); you may not use this file except in compliance with
     * the License.  You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings("all") public class Airavata {

  public interface Iface {

    /**
     * Query Airavata to fetch the API version
     */
    public String GetAPIVersion() throws org.apache.thrift.TException;

    /**
     * Create an experiment for the specified user belonging to the gateway. The gateway identity is not explicitly passed
     *   but inferred from the authentication header. This experiment is just a persistent place holder. The client
     *   has to subsequently configure and launch the created experiment. No action is taken on Airavata Server except
     *   registering the experiment in a persistent store.
     * 
     * @param basicExperimentMetadata
     *    The create experiment will require the basic experiment metadata like the name and description, intended user,
     *      the gateway identifer and if the experiment should be shared public by defualt. During the creation of an experiment
     *      the ExperimentMetadata is a required field.
     * 
     * @return
     *   The server-side generated airavata experiment globally unique identifier.
     * 
     * @throws org.apache.airavata.api.error.InvalidRequestException
     *    For any incorrect forming of the request itself.
     * 
     * @throws org.apache.airavata.api.error.AiravataClientException
     *    The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
     * 
     *      UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
     *         step, then Airavata Registry will not have a provenance area setup. The client has to follow
     *         gateway registration steps and retry this request.
     * 
     *      AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
     *         For now this is a place holder.
     * 
     *      INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
     *         is implemented, the authorization will be more substantial.
     * 
     * @throws org.apache.airavata.api.error.AiravataSystemException
     *    This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
     *       rather an Airavata Administrator will be notified to take corrective action.
     * 
     * 
     * @param basicExperimentMetadata
     */
    public String createExperiment(org.apache.airavata.model.experiment.BasicMetadata basicExperimentMetadata) throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Fetch previously created experiment metadata.
     * 
     * @param airavataExperimentId
     *    The identifier for the requested experiment. This is returned during the create experiment step.
     * 
     * @return experimentMetada
     *   This method will return the previously stored experiment metadata.
     * 
     * @throws org.apache.airavata.api.error.InvalidRequestException
     *    For any incorrect forming of the request itself.
     * 
     * @throws org.apache.airavata.api.error.ExperimentNotFoundException
     *    If the specified experiment is not previously created, then an Experiment Not Found Exception is thrown.
     * 
     * @throws org.apache.airavata.api.error.AiravataClientException
     *    The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
     *      
     *      UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
     *         step, then Airavata Registry will not have a provenance area setup. The client has to follow
     *         gateway registration steps and retry this request.
     * 
     *      AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
     *         For now this is a place holder.
     * 
     *      INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
     *         is implemented, the authorization will be more substantial.
     * 
     * @throws org.apache.airavata.api.error.AiravataSystemException
     *    This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
     *       rather an Airavata Administrator will be notified to take corrective action.
     * 
     * 
     * @param airavataExperimentId
     */
    public org.apache.airavata.model.experiment.BasicMetadata getBasicExperimentMetadata(String airavataExperimentId) throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.ExperimentNotFoundException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Configure a previously created experiment with required inputs, scheduling and other quality of service
     *   parameters. This method only updates the experiment object within the registry. The experiment has to be launched
     *   to make it actionable by the server.
     * 
     * @param airavataExperimentId
     *    The identifier for the requested experiment. This is returned during the create experiment step.
     * 
     * @param experimentConfigurationData
     *    The configuration information of the experiment with application input parameters, computational resource scheduling
     *      information, special input output handling and additional quality of service parameters.
     * 
     * @return
     *   This method call does not have a return value.
     * 
     * @throws org.apache.airavata.api.error.InvalidRequestException
     *    For any incorrect forming of the request itself.
     * 
     * @throws org.apache.airavata.api.error.ExperimentNotFoundException
     *    If the specified experiment is not previously created, then an Experiment Not Found Exception is thrown.
     * 
     * @throws org.apache.airavata.api.error.AiravataClientException
     *    The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
     *      
     *      UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
     *         step, then Airavata Registry will not have a provenance area setup. The client has to follow
     *         gateway registration steps and retry this request.
     * 
     *      AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
     *         For now this is a place holder.
     * 
     *      INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
     *         is implemented, the authorization will be more substantial.
     * 
     * @throws org.apache.airavata.api.error.AiravataSystemException
     *    This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
     *       rather an Airavata Administrator will be notified to take corrective action.
     * 
     * 
     * @param airavataExperimentId
     * @param experimentConfigurationData
     */
    public void configureExperiment(String airavataExperimentId, org.apache.airavata.model.experiment.ConfigurationData experimentConfigurationData) throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.ExperimentNotFoundException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Fetch the previously configured experiment configuration information.
     * 
     * @param airavataExperimentId
     *    The identifier for the requested experiment. This is returned during the create experiment step.
     * 
     * @return
     *   This method returns the previously configured experiment configuration data.
     * 
     * @throws org.apache.airavata.api.error.InvalidRequestException
     *    For any incorrect forming of the request itself.
     * 
     * @throws org.apache.airavata.api.error.ExperimentNotFoundException
     *    If the specified experiment is not previously created, then an Experiment Not Found Exception is thrown.
     * 
     * @throws org.apache.airavata.api.error.AiravataClientException
     *    The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
     *      
     *      UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
     *         step, then Airavata Registry will not have a provenance area setup. The client has to follow
     *         gateway registration steps and retry this request.
     * 
     *      AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
     *         For now this is a place holder.
     * 
     *      INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
     *         is implemented, the authorization will be more substantial.
     * 
     * @throws org.apache.airavata.api.error.AiravataSystemException
     *    This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
     *       rather an Airavata Administrator will be notified to take corrective action.
     * 
     * 
     * @param airavataExperimentId
     */
    public org.apache.airavata.model.experiment.ConfigurationData getExperimentConfiguration(String airavataExperimentId) throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.ExperimentNotFoundException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Launch a previously created and configured experiment. Airavata Server will then start processing the request and appropriate
     *   notifications and intermediate and output data will be subsequently available for this experiment.
     * 
     * @param airavataExperimentId
     *    The identifier for the requested experiment. This is returned during the create experiment step.
     * 
     * @param airavataCredStoreToken:
     *   A requirement to execute experiments within Airavata is to first register the targeted remote computational account
     *     credentials with Airavata Credential Store. The administrative API (related to credential store) will return a
     *     generated token associated with the registered credentials. The client has to security posses this token id and is
     *     required to pass it to Airavata Server for all execution requests.
     *   Note: At this point only the credential store token is required so the string is directly passed here. In future if
     *     if more security credentials are enables, then the structure ExecutionSecurityParameters should be used.
     *   Note: This parameter is not persisted within Airavata Registry for security reasons.
     * 
     * @return
     *   This method call does not have a return value.
     * 
     * @throws org.apache.airavata.api.error.InvalidRequestException
     *    For any incorrect forming of the request itself.
     * 
     * @throws org.apache.airavata.api.error.ExperimentNotFoundException
     *    If the specified experiment is not previously created, then an Experiment Not Found Exception is thrown.
     * 
     * @throws org.apache.airavata.api.error.AiravataClientException
     *    The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
     *      
     *      UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
     *         step, then Airavata Registry will not have a provenance area setup. The client has to follow
     *         gateway registration steps and retry this request.
     * 
     *      AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
     *         For now this is a place holder.
     * 
     *      INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
     *         is implemented, the authorization will be more substantial.
     * 
     * @throws org.apache.airavata.api.error.AiravataSystemException
     *    This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
     *       rather an Airavata Administrator will be notified to take corrective action.
     * 
     * 
     * @param airavataExperimentId
     * @param airavataCredStoreToken
     */
    public void launchConfiguredExperiment(String airavataExperimentId, String airavataCredStoreToken) throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.ExperimentNotFoundException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Configure and Launch a previously created experiment with required inputs, scheduling, security and other quality of service
     *   parameters. This method also launches the experiment after it is configured. If you would like to configure only
     *   and launch at a later time or partially configure then ConfigureExperiment should be used.
     * 
     * @param airavataExperimentId
     *    The identifier for the requested experiment. This is returned during the create experiment step.
     * 
     * @param experimentConfigurationData
     *    The configuration information of the experiment with application input parameters, computational resource scheduling
     *      information, special input output handling and additional quality of service parameters.
     * 
     * @param airavataCredStoreToken:
     *   A requirement to execute experiments within Airavata is to first register the targeted remote computational account
     *     credentials with Airavata Credential Store. The administrative API (related to credential store) will return a
     *     generated token associated with the registered credentials. The client has to security posses this token id and is
     *     required to pass it to Airavata Server for all execution requests.
     *   Note: At this point only the credential store token is required so the string is directly passed here. In future if
     *     if more security credentials are enables, then the structure ExecutionSecurityParameters should be used.
     * 
     * @return
     *   The server-side generated experiment GUID.
     * 
     * @throws org.apache.airavata.api.error.InvalidRequestException
     *    For any incorrect forming of the request itself.
     * 
     * @throws org.apache.airavata.api.error.AiravataClientException
     *    The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
     *      
     *      UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
     *         step, then Airavata Registry will not have a provenance area setup. The client has to follow
     *         gateway registration steps and retry this request.
     * 
     *      AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
     *         For now this is a place holder.
     * 
     *      INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
     *         is implemented, the authorization will be more substantial.
     * 
     * @throws org.apache.airavata.api.error.AiravataSystemException
     *    This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
     *       rather an Airavata Administrator will be notified to take corrective action.
     * 
     * 
     * @param airavataExperimentId
     * @param experimentConfigurationData
     * @param airavataCredStoreToken
     */
    public String configureAndLaunchExperiment(String airavataExperimentId, org.apache.airavata.model.experiment.ConfigurationData experimentConfigurationData, String airavataCredStoreToken) throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.ExperimentNotFoundException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Clone an specified experiment with a new name. A copy of the experiment configuration is made and is persisted with new metadata.
     *   The client has to subsequently update this configuration if needed and launch the cloned experiment.
     * 
     * @param airavataExperimentIdToBeCloned
     *    This is the experiment identifier that is to be cloned.
     * 
     * @param basicExperimentMetadata
     *    Once an experiment is cloned, to disambiguate, the users are suggested to provide new metadata. This will again require
     *      the basic experiment metadata like the name and description, intended user, the gateway identifier and if the experiment
     *      should be shared public by default.
     * 
     * @return
     *   The server-side generated airavata experiment globally unique identifier for the newly cloned experiment.
     * 
     * @throws org.apache.airavata.api.error.InvalidRequestException
     *    For any incorrect forming of the request itself.
     * 
     * @throws org.apache.airavata.api.error.ExperimentNotFoundException
     *    If the specified experiment is not previously created, then an Experiment Not Found Exception is thrown.
     * 
     * @throws org.apache.airavata.api.error.AiravataClientException
     *    The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
     *      
     *      UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
     *         step, then Airavata Registry will not have a provenance area setup. The client has to follow
     *         gateway registration steps and retry this request.
     * 
     *      AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
     *         For now this is a place holder.
     * 
     *      INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
     *         is implemented, the authorization will be more substantial.
     * 
     * @throws org.apache.airavata.api.error.AiravataSystemException
     *    This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
     *       rather an Airavata Administrator will be notified to take corrective action.
     * 
     * 
     * @param airavataExperimentIdToBeCloned
     * @param basicExperimentMetadata
     */
    public String cloneExperimentConfiguration(String airavataExperimentIdToBeCloned, org.apache.airavata.model.experiment.BasicMetadata basicExperimentMetadata) throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.ExperimentNotFoundException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException;

    /**
     * Terminate a running experiment.
     * 
     * @param airavataExperimentId
     *    The identifier for the requested experiment. This is returned during the create experiment step.
     * 
     * @return
     *   This method call does not have a return value.
     * 
     * @throws org.apache.airavata.api.error.InvalidRequestException
     *    For any incorrect forming of the request itself.
     * 
     * @throws org.apache.airavata.api.error.ExperimentNotFoundException
     *    If the specified experiment is not previously created, then an Experiment Not Found Exception is thrown.
     * 
     * @throws org.apache.airavata.api.error.AiravataClientException
     *    The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
     *      
     *      UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
     *         step, then Airavata Registry will not have a provenance area setup. The client has to follow
     *         gateway registration steps and retry this request.
     * 
     *      AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
     *         For now this is a place holder.
     * 
     *      INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
     *         is implemented, the authorization will be more substantial.
     * 
     * @throws org.apache.airavata.api.error.AiravataSystemException
     *    This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
     *       rather an Airavata Administrator will be notified to take corrective action.
     * 
     * 
     * @param airavataExperimentId
     */
    public void terminateExperiment(String airavataExperimentId) throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.ExperimentNotFoundException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void GetAPIVersion(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createExperiment(org.apache.airavata.model.experiment.BasicMetadata basicExperimentMetadata, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBasicExperimentMetadata(String airavataExperimentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void configureExperiment(String airavataExperimentId, org.apache.airavata.model.experiment.ConfigurationData experimentConfigurationData, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getExperimentConfiguration(String airavataExperimentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void launchConfiguredExperiment(String airavataExperimentId, String airavataCredStoreToken, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void configureAndLaunchExperiment(String airavataExperimentId, org.apache.airavata.model.experiment.ConfigurationData experimentConfigurationData, String airavataCredStoreToken, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void cloneExperimentConfiguration(String airavataExperimentIdToBeCloned, org.apache.airavata.model.experiment.BasicMetadata basicExperimentMetadata, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void terminateExperiment(String airavataExperimentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String GetAPIVersion() throws org.apache.thrift.TException
    {
      send_GetAPIVersion();
      return recv_GetAPIVersion();
    }

    public void send_GetAPIVersion() throws org.apache.thrift.TException
    {
      GetAPIVersion_args args = new GetAPIVersion_args();
      sendBase("GetAPIVersion", args);
    }

    public String recv_GetAPIVersion() throws org.apache.thrift.TException
    {
      GetAPIVersion_result result = new GetAPIVersion_result();
      receiveBase(result, "GetAPIVersion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetAPIVersion failed: unknown result");
    }

    public String createExperiment(org.apache.airavata.model.experiment.BasicMetadata basicExperimentMetadata) throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_createExperiment(basicExperimentMetadata);
      return recv_createExperiment();
    }

    public void send_createExperiment(org.apache.airavata.model.experiment.BasicMetadata basicExperimentMetadata) throws org.apache.thrift.TException
    {
      createExperiment_args args = new createExperiment_args();
      args.setBasicExperimentMetadata(basicExperimentMetadata);
      sendBase("createExperiment", args);
    }

    public String recv_createExperiment() throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException
    {
      createExperiment_result result = new createExperiment_result();
      receiveBase(result, "createExperiment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createExperiment failed: unknown result");
    }

    public org.apache.airavata.model.experiment.BasicMetadata getBasicExperimentMetadata(String airavataExperimentId) throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.ExperimentNotFoundException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_getBasicExperimentMetadata(airavataExperimentId);
      return recv_getBasicExperimentMetadata();
    }

    public void send_getBasicExperimentMetadata(String airavataExperimentId) throws org.apache.thrift.TException
    {
      getBasicExperimentMetadata_args args = new getBasicExperimentMetadata_args();
      args.setAiravataExperimentId(airavataExperimentId);
      sendBase("getBasicExperimentMetadata", args);
    }

    public org.apache.airavata.model.experiment.BasicMetadata recv_getBasicExperimentMetadata() throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.ExperimentNotFoundException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException
    {
      getBasicExperimentMetadata_result result = new getBasicExperimentMetadata_result();
      receiveBase(result, "getBasicExperimentMetadata");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.enf != null) {
        throw result.enf;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBasicExperimentMetadata failed: unknown result");
    }

    public void configureExperiment(String airavataExperimentId, org.apache.airavata.model.experiment.ConfigurationData experimentConfigurationData) throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.ExperimentNotFoundException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_configureExperiment(airavataExperimentId, experimentConfigurationData);
      recv_configureExperiment();
    }

    public void send_configureExperiment(String airavataExperimentId, org.apache.airavata.model.experiment.ConfigurationData experimentConfigurationData) throws org.apache.thrift.TException
    {
      configureExperiment_args args = new configureExperiment_args();
      args.setAiravataExperimentId(airavataExperimentId);
      args.setExperimentConfigurationData(experimentConfigurationData);
      sendBase("configureExperiment", args);
    }

    public void recv_configureExperiment() throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.ExperimentNotFoundException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException
    {
      configureExperiment_result result = new configureExperiment_result();
      receiveBase(result, "configureExperiment");
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.enf != null) {
        throw result.enf;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      return;
    }

    public org.apache.airavata.model.experiment.ConfigurationData getExperimentConfiguration(String airavataExperimentId) throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.ExperimentNotFoundException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_getExperimentConfiguration(airavataExperimentId);
      return recv_getExperimentConfiguration();
    }

    public void send_getExperimentConfiguration(String airavataExperimentId) throws org.apache.thrift.TException
    {
      getExperimentConfiguration_args args = new getExperimentConfiguration_args();
      args.setAiravataExperimentId(airavataExperimentId);
      sendBase("getExperimentConfiguration", args);
    }

    public org.apache.airavata.model.experiment.ConfigurationData recv_getExperimentConfiguration() throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.ExperimentNotFoundException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException
    {
      getExperimentConfiguration_result result = new getExperimentConfiguration_result();
      receiveBase(result, "getExperimentConfiguration");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.enf != null) {
        throw result.enf;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getExperimentConfiguration failed: unknown result");
    }

    public void launchConfiguredExperiment(String airavataExperimentId, String airavataCredStoreToken) throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.ExperimentNotFoundException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_launchConfiguredExperiment(airavataExperimentId, airavataCredStoreToken);
      recv_launchConfiguredExperiment();
    }

    public void send_launchConfiguredExperiment(String airavataExperimentId, String airavataCredStoreToken) throws org.apache.thrift.TException
    {
      launchConfiguredExperiment_args args = new launchConfiguredExperiment_args();
      args.setAiravataExperimentId(airavataExperimentId);
      args.setAiravataCredStoreToken(airavataCredStoreToken);
      sendBase("launchConfiguredExperiment", args);
    }

    public void recv_launchConfiguredExperiment() throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.ExperimentNotFoundException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException
    {
      launchConfiguredExperiment_result result = new launchConfiguredExperiment_result();
      receiveBase(result, "launchConfiguredExperiment");
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.enf != null) {
        throw result.enf;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      return;
    }

    public String configureAndLaunchExperiment(String airavataExperimentId, org.apache.airavata.model.experiment.ConfigurationData experimentConfigurationData, String airavataCredStoreToken) throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.ExperimentNotFoundException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_configureAndLaunchExperiment(airavataExperimentId, experimentConfigurationData, airavataCredStoreToken);
      return recv_configureAndLaunchExperiment();
    }

    public void send_configureAndLaunchExperiment(String airavataExperimentId, org.apache.airavata.model.experiment.ConfigurationData experimentConfigurationData, String airavataCredStoreToken) throws org.apache.thrift.TException
    {
      configureAndLaunchExperiment_args args = new configureAndLaunchExperiment_args();
      args.setAiravataExperimentId(airavataExperimentId);
      args.setExperimentConfigurationData(experimentConfigurationData);
      args.setAiravataCredStoreToken(airavataCredStoreToken);
      sendBase("configureAndLaunchExperiment", args);
    }

    public String recv_configureAndLaunchExperiment() throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.ExperimentNotFoundException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException
    {
      configureAndLaunchExperiment_result result = new configureAndLaunchExperiment_result();
      receiveBase(result, "configureAndLaunchExperiment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.enf != null) {
        throw result.enf;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "configureAndLaunchExperiment failed: unknown result");
    }

    public String cloneExperimentConfiguration(String airavataExperimentIdToBeCloned, org.apache.airavata.model.experiment.BasicMetadata basicExperimentMetadata) throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.ExperimentNotFoundException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_cloneExperimentConfiguration(airavataExperimentIdToBeCloned, basicExperimentMetadata);
      return recv_cloneExperimentConfiguration();
    }

    public void send_cloneExperimentConfiguration(String airavataExperimentIdToBeCloned, org.apache.airavata.model.experiment.BasicMetadata basicExperimentMetadata) throws org.apache.thrift.TException
    {
      cloneExperimentConfiguration_args args = new cloneExperimentConfiguration_args();
      args.setAiravataExperimentIdToBeCloned(airavataExperimentIdToBeCloned);
      args.setBasicExperimentMetadata(basicExperimentMetadata);
      sendBase("cloneExperimentConfiguration", args);
    }

    public String recv_cloneExperimentConfiguration() throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.ExperimentNotFoundException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException
    {
      cloneExperimentConfiguration_result result = new cloneExperimentConfiguration_result();
      receiveBase(result, "cloneExperimentConfiguration");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.enf != null) {
        throw result.enf;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cloneExperimentConfiguration failed: unknown result");
    }

    public void terminateExperiment(String airavataExperimentId) throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.ExperimentNotFoundException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException
    {
      send_terminateExperiment(airavataExperimentId);
      recv_terminateExperiment();
    }

    public void send_terminateExperiment(String airavataExperimentId) throws org.apache.thrift.TException
    {
      terminateExperiment_args args = new terminateExperiment_args();
      args.setAiravataExperimentId(airavataExperimentId);
      sendBase("terminateExperiment", args);
    }

    public void recv_terminateExperiment() throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.ExperimentNotFoundException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException
    {
      terminateExperiment_result result = new terminateExperiment_result();
      receiveBase(result, "terminateExperiment");
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.enf != null) {
        throw result.enf;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void GetAPIVersion(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetAPIVersion_call method_call = new GetAPIVersion_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetAPIVersion_call extends org.apache.thrift.async.TAsyncMethodCall {
      public GetAPIVersion_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetAPIVersion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetAPIVersion_args args = new GetAPIVersion_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetAPIVersion();
      }
    }

    public void createExperiment(org.apache.airavata.model.experiment.BasicMetadata basicExperimentMetadata, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createExperiment_call method_call = new createExperiment_call(basicExperimentMetadata, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createExperiment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.apache.airavata.model.experiment.BasicMetadata basicExperimentMetadata;
      public createExperiment_call(org.apache.airavata.model.experiment.BasicMetadata basicExperimentMetadata, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.basicExperimentMetadata = basicExperimentMetadata;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createExperiment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createExperiment_args args = new createExperiment_args();
        args.setBasicExperimentMetadata(basicExperimentMetadata);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createExperiment();
      }
    }

    public void getBasicExperimentMetadata(String airavataExperimentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBasicExperimentMetadata_call method_call = new getBasicExperimentMetadata_call(airavataExperimentId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBasicExperimentMetadata_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String airavataExperimentId;
      public getBasicExperimentMetadata_call(String airavataExperimentId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.airavataExperimentId = airavataExperimentId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBasicExperimentMetadata", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBasicExperimentMetadata_args args = new getBasicExperimentMetadata_args();
        args.setAiravataExperimentId(airavataExperimentId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.apache.airavata.model.experiment.BasicMetadata getResult() throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.ExperimentNotFoundException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBasicExperimentMetadata();
      }
    }

    public void configureExperiment(String airavataExperimentId, org.apache.airavata.model.experiment.ConfigurationData experimentConfigurationData, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      configureExperiment_call method_call = new configureExperiment_call(airavataExperimentId, experimentConfigurationData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class configureExperiment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String airavataExperimentId;
      private org.apache.airavata.model.experiment.ConfigurationData experimentConfigurationData;
      public configureExperiment_call(String airavataExperimentId, org.apache.airavata.model.experiment.ConfigurationData experimentConfigurationData, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.airavataExperimentId = airavataExperimentId;
        this.experimentConfigurationData = experimentConfigurationData;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("configureExperiment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        configureExperiment_args args = new configureExperiment_args();
        args.setAiravataExperimentId(airavataExperimentId);
        args.setExperimentConfigurationData(experimentConfigurationData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.ExperimentNotFoundException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_configureExperiment();
      }
    }

    public void getExperimentConfiguration(String airavataExperimentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getExperimentConfiguration_call method_call = new getExperimentConfiguration_call(airavataExperimentId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getExperimentConfiguration_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String airavataExperimentId;
      public getExperimentConfiguration_call(String airavataExperimentId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.airavataExperimentId = airavataExperimentId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getExperimentConfiguration", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getExperimentConfiguration_args args = new getExperimentConfiguration_args();
        args.setAiravataExperimentId(airavataExperimentId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.apache.airavata.model.experiment.ConfigurationData getResult() throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.ExperimentNotFoundException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getExperimentConfiguration();
      }
    }

    public void launchConfiguredExperiment(String airavataExperimentId, String airavataCredStoreToken, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      launchConfiguredExperiment_call method_call = new launchConfiguredExperiment_call(airavataExperimentId, airavataCredStoreToken, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class launchConfiguredExperiment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String airavataExperimentId;
      private String airavataCredStoreToken;
      public launchConfiguredExperiment_call(String airavataExperimentId, String airavataCredStoreToken, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.airavataExperimentId = airavataExperimentId;
        this.airavataCredStoreToken = airavataCredStoreToken;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("launchConfiguredExperiment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        launchConfiguredExperiment_args args = new launchConfiguredExperiment_args();
        args.setAiravataExperimentId(airavataExperimentId);
        args.setAiravataCredStoreToken(airavataCredStoreToken);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.ExperimentNotFoundException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_launchConfiguredExperiment();
      }
    }

    public void configureAndLaunchExperiment(String airavataExperimentId, org.apache.airavata.model.experiment.ConfigurationData experimentConfigurationData, String airavataCredStoreToken, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      configureAndLaunchExperiment_call method_call = new configureAndLaunchExperiment_call(airavataExperimentId, experimentConfigurationData, airavataCredStoreToken, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class configureAndLaunchExperiment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String airavataExperimentId;
      private org.apache.airavata.model.experiment.ConfigurationData experimentConfigurationData;
      private String airavataCredStoreToken;
      public configureAndLaunchExperiment_call(String airavataExperimentId, org.apache.airavata.model.experiment.ConfigurationData experimentConfigurationData, String airavataCredStoreToken, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.airavataExperimentId = airavataExperimentId;
        this.experimentConfigurationData = experimentConfigurationData;
        this.airavataCredStoreToken = airavataCredStoreToken;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("configureAndLaunchExperiment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        configureAndLaunchExperiment_args args = new configureAndLaunchExperiment_args();
        args.setAiravataExperimentId(airavataExperimentId);
        args.setExperimentConfigurationData(experimentConfigurationData);
        args.setAiravataCredStoreToken(airavataCredStoreToken);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.ExperimentNotFoundException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_configureAndLaunchExperiment();
      }
    }

    public void cloneExperimentConfiguration(String airavataExperimentIdToBeCloned, org.apache.airavata.model.experiment.BasicMetadata basicExperimentMetadata, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cloneExperimentConfiguration_call method_call = new cloneExperimentConfiguration_call(airavataExperimentIdToBeCloned, basicExperimentMetadata, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cloneExperimentConfiguration_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String airavataExperimentIdToBeCloned;
      private org.apache.airavata.model.experiment.BasicMetadata basicExperimentMetadata;
      public cloneExperimentConfiguration_call(String airavataExperimentIdToBeCloned, org.apache.airavata.model.experiment.BasicMetadata basicExperimentMetadata, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.airavataExperimentIdToBeCloned = airavataExperimentIdToBeCloned;
        this.basicExperimentMetadata = basicExperimentMetadata;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cloneExperimentConfiguration", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cloneExperimentConfiguration_args args = new cloneExperimentConfiguration_args();
        args.setAiravataExperimentIdToBeCloned(airavataExperimentIdToBeCloned);
        args.setBasicExperimentMetadata(basicExperimentMetadata);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.ExperimentNotFoundException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cloneExperimentConfiguration();
      }
    }

    public void terminateExperiment(String airavataExperimentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      terminateExperiment_call method_call = new terminateExperiment_call(airavataExperimentId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class terminateExperiment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String airavataExperimentId;
      public terminateExperiment_call(String airavataExperimentId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.airavataExperimentId = airavataExperimentId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("terminateExperiment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        terminateExperiment_args args = new terminateExperiment_args();
        args.setAiravataExperimentId(airavataExperimentId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.ExperimentNotFoundException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_terminateExperiment();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("GetAPIVersion", new GetAPIVersion());
      processMap.put("createExperiment", new createExperiment());
      processMap.put("getBasicExperimentMetadata", new getBasicExperimentMetadata());
      processMap.put("configureExperiment", new configureExperiment());
      processMap.put("getExperimentConfiguration", new getExperimentConfiguration());
      processMap.put("launchConfiguredExperiment", new launchConfiguredExperiment());
      processMap.put("configureAndLaunchExperiment", new configureAndLaunchExperiment());
      processMap.put("cloneExperimentConfiguration", new cloneExperimentConfiguration());
      processMap.put("terminateExperiment", new terminateExperiment());
      return processMap;
    }

    public static class GetAPIVersion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetAPIVersion_args> {
      public GetAPIVersion() {
        super("GetAPIVersion");
      }

      public GetAPIVersion_args getEmptyArgsInstance() {
        return new GetAPIVersion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetAPIVersion_result getResult(I iface, GetAPIVersion_args args) throws org.apache.thrift.TException {
        GetAPIVersion_result result = new GetAPIVersion_result();
        result.success = iface.GetAPIVersion();
        return result;
      }
    }

    public static class createExperiment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createExperiment_args> {
      public createExperiment() {
        super("createExperiment");
      }

      public createExperiment_args getEmptyArgsInstance() {
        return new createExperiment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createExperiment_result getResult(I iface, createExperiment_args args) throws org.apache.thrift.TException {
        createExperiment_result result = new createExperiment_result();
        try {
          result.success = iface.createExperiment(args.basicExperimentMetadata);
        } catch (org.apache.airavata.api.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.api.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.api.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class getBasicExperimentMetadata<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBasicExperimentMetadata_args> {
      public getBasicExperimentMetadata() {
        super("getBasicExperimentMetadata");
      }

      public getBasicExperimentMetadata_args getEmptyArgsInstance() {
        return new getBasicExperimentMetadata_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBasicExperimentMetadata_result getResult(I iface, getBasicExperimentMetadata_args args) throws org.apache.thrift.TException {
        getBasicExperimentMetadata_result result = new getBasicExperimentMetadata_result();
        try {
          result.success = iface.getBasicExperimentMetadata(args.airavataExperimentId);
        } catch (org.apache.airavata.api.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.api.error.ExperimentNotFoundException enf) {
          result.enf = enf;
        } catch (org.apache.airavata.api.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.api.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class configureExperiment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, configureExperiment_args> {
      public configureExperiment() {
        super("configureExperiment");
      }

      public configureExperiment_args getEmptyArgsInstance() {
        return new configureExperiment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public configureExperiment_result getResult(I iface, configureExperiment_args args) throws org.apache.thrift.TException {
        configureExperiment_result result = new configureExperiment_result();
        try {
          iface.configureExperiment(args.airavataExperimentId, args.experimentConfigurationData);
        } catch (org.apache.airavata.api.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.api.error.ExperimentNotFoundException enf) {
          result.enf = enf;
        } catch (org.apache.airavata.api.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.api.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class getExperimentConfiguration<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getExperimentConfiguration_args> {
      public getExperimentConfiguration() {
        super("getExperimentConfiguration");
      }

      public getExperimentConfiguration_args getEmptyArgsInstance() {
        return new getExperimentConfiguration_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getExperimentConfiguration_result getResult(I iface, getExperimentConfiguration_args args) throws org.apache.thrift.TException {
        getExperimentConfiguration_result result = new getExperimentConfiguration_result();
        try {
          result.success = iface.getExperimentConfiguration(args.airavataExperimentId);
        } catch (org.apache.airavata.api.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.api.error.ExperimentNotFoundException enf) {
          result.enf = enf;
        } catch (org.apache.airavata.api.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.api.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class launchConfiguredExperiment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, launchConfiguredExperiment_args> {
      public launchConfiguredExperiment() {
        super("launchConfiguredExperiment");
      }

      public launchConfiguredExperiment_args getEmptyArgsInstance() {
        return new launchConfiguredExperiment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public launchConfiguredExperiment_result getResult(I iface, launchConfiguredExperiment_args args) throws org.apache.thrift.TException {
        launchConfiguredExperiment_result result = new launchConfiguredExperiment_result();
        try {
          iface.launchConfiguredExperiment(args.airavataExperimentId, args.airavataCredStoreToken);
        } catch (org.apache.airavata.api.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.api.error.ExperimentNotFoundException enf) {
          result.enf = enf;
        } catch (org.apache.airavata.api.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.api.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class configureAndLaunchExperiment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, configureAndLaunchExperiment_args> {
      public configureAndLaunchExperiment() {
        super("configureAndLaunchExperiment");
      }

      public configureAndLaunchExperiment_args getEmptyArgsInstance() {
        return new configureAndLaunchExperiment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public configureAndLaunchExperiment_result getResult(I iface, configureAndLaunchExperiment_args args) throws org.apache.thrift.TException {
        configureAndLaunchExperiment_result result = new configureAndLaunchExperiment_result();
        try {
          result.success = iface.configureAndLaunchExperiment(args.airavataExperimentId, args.experimentConfigurationData, args.airavataCredStoreToken);
        } catch (org.apache.airavata.api.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.api.error.ExperimentNotFoundException enf) {
          result.enf = enf;
        } catch (org.apache.airavata.api.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.api.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class cloneExperimentConfiguration<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cloneExperimentConfiguration_args> {
      public cloneExperimentConfiguration() {
        super("cloneExperimentConfiguration");
      }

      public cloneExperimentConfiguration_args getEmptyArgsInstance() {
        return new cloneExperimentConfiguration_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cloneExperimentConfiguration_result getResult(I iface, cloneExperimentConfiguration_args args) throws org.apache.thrift.TException {
        cloneExperimentConfiguration_result result = new cloneExperimentConfiguration_result();
        try {
          result.success = iface.cloneExperimentConfiguration(args.airavataExperimentIdToBeCloned, args.basicExperimentMetadata);
        } catch (org.apache.airavata.api.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.api.error.ExperimentNotFoundException enf) {
          result.enf = enf;
        } catch (org.apache.airavata.api.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.api.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class terminateExperiment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, terminateExperiment_args> {
      public terminateExperiment() {
        super("terminateExperiment");
      }

      public terminateExperiment_args getEmptyArgsInstance() {
        return new terminateExperiment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public terminateExperiment_result getResult(I iface, terminateExperiment_args args) throws org.apache.thrift.TException {
        terminateExperiment_result result = new terminateExperiment_result();
        try {
          iface.terminateExperiment(args.airavataExperimentId);
        } catch (org.apache.airavata.api.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.api.error.ExperimentNotFoundException enf) {
          result.enf = enf;
        } catch (org.apache.airavata.api.error.AiravataClientException ace) {
          result.ace = ace;
        } catch (org.apache.airavata.api.error.AiravataSystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("GetAPIVersion", new GetAPIVersion());
      processMap.put("createExperiment", new createExperiment());
      processMap.put("getBasicExperimentMetadata", new getBasicExperimentMetadata());
      processMap.put("configureExperiment", new configureExperiment());
      processMap.put("getExperimentConfiguration", new getExperimentConfiguration());
      processMap.put("launchConfiguredExperiment", new launchConfiguredExperiment());
      processMap.put("configureAndLaunchExperiment", new configureAndLaunchExperiment());
      processMap.put("cloneExperimentConfiguration", new cloneExperimentConfiguration());
      processMap.put("terminateExperiment", new terminateExperiment());
      return processMap;
    }

    public static class GetAPIVersion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetAPIVersion_args, String> {
      public GetAPIVersion() {
        super("GetAPIVersion");
      }

      public GetAPIVersion_args getEmptyArgsInstance() {
        return new GetAPIVersion_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            GetAPIVersion_result result = new GetAPIVersion_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetAPIVersion_result result = new GetAPIVersion_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetAPIVersion_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.GetAPIVersion(resultHandler);
      }
    }

    public static class createExperiment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createExperiment_args, String> {
      public createExperiment() {
        super("createExperiment");
      }

      public createExperiment_args getEmptyArgsInstance() {
        return new createExperiment_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            createExperiment_result result = new createExperiment_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createExperiment_result result = new createExperiment_result();
            if (e instanceof org.apache.airavata.api.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.api.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.api.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.api.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.api.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.api.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createExperiment_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.createExperiment(args.basicExperimentMetadata,resultHandler);
      }
    }

    public static class getBasicExperimentMetadata<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBasicExperimentMetadata_args, org.apache.airavata.model.experiment.BasicMetadata> {
      public getBasicExperimentMetadata() {
        super("getBasicExperimentMetadata");
      }

      public getBasicExperimentMetadata_args getEmptyArgsInstance() {
        return new getBasicExperimentMetadata_args();
      }

      public AsyncMethodCallback<org.apache.airavata.model.experiment.BasicMetadata> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.apache.airavata.model.experiment.BasicMetadata>() { 
          public void onComplete(org.apache.airavata.model.experiment.BasicMetadata o) {
            getBasicExperimentMetadata_result result = new getBasicExperimentMetadata_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBasicExperimentMetadata_result result = new getBasicExperimentMetadata_result();
            if (e instanceof org.apache.airavata.api.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.api.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.api.error.ExperimentNotFoundException) {
                        result.enf = (org.apache.airavata.api.error.ExperimentNotFoundException) e;
                        result.setEnfIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.api.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.api.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.api.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.api.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBasicExperimentMetadata_args args, org.apache.thrift.async.AsyncMethodCallback<org.apache.airavata.model.experiment.BasicMetadata> resultHandler) throws TException {
        iface.getBasicExperimentMetadata(args.airavataExperimentId,resultHandler);
      }
    }

    public static class configureExperiment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, configureExperiment_args, Void> {
      public configureExperiment() {
        super("configureExperiment");
      }

      public configureExperiment_args getEmptyArgsInstance() {
        return new configureExperiment_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            configureExperiment_result result = new configureExperiment_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            configureExperiment_result result = new configureExperiment_result();
            if (e instanceof org.apache.airavata.api.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.api.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.api.error.ExperimentNotFoundException) {
                        result.enf = (org.apache.airavata.api.error.ExperimentNotFoundException) e;
                        result.setEnfIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.api.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.api.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.api.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.api.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, configureExperiment_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.configureExperiment(args.airavataExperimentId, args.experimentConfigurationData,resultHandler);
      }
    }

    public static class getExperimentConfiguration<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getExperimentConfiguration_args, org.apache.airavata.model.experiment.ConfigurationData> {
      public getExperimentConfiguration() {
        super("getExperimentConfiguration");
      }

      public getExperimentConfiguration_args getEmptyArgsInstance() {
        return new getExperimentConfiguration_args();
      }

      public AsyncMethodCallback<org.apache.airavata.model.experiment.ConfigurationData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.apache.airavata.model.experiment.ConfigurationData>() { 
          public void onComplete(org.apache.airavata.model.experiment.ConfigurationData o) {
            getExperimentConfiguration_result result = new getExperimentConfiguration_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getExperimentConfiguration_result result = new getExperimentConfiguration_result();
            if (e instanceof org.apache.airavata.api.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.api.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.api.error.ExperimentNotFoundException) {
                        result.enf = (org.apache.airavata.api.error.ExperimentNotFoundException) e;
                        result.setEnfIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.api.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.api.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.api.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.api.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getExperimentConfiguration_args args, org.apache.thrift.async.AsyncMethodCallback<org.apache.airavata.model.experiment.ConfigurationData> resultHandler) throws TException {
        iface.getExperimentConfiguration(args.airavataExperimentId,resultHandler);
      }
    }

    public static class launchConfiguredExperiment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, launchConfiguredExperiment_args, Void> {
      public launchConfiguredExperiment() {
        super("launchConfiguredExperiment");
      }

      public launchConfiguredExperiment_args getEmptyArgsInstance() {
        return new launchConfiguredExperiment_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            launchConfiguredExperiment_result result = new launchConfiguredExperiment_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            launchConfiguredExperiment_result result = new launchConfiguredExperiment_result();
            if (e instanceof org.apache.airavata.api.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.api.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.api.error.ExperimentNotFoundException) {
                        result.enf = (org.apache.airavata.api.error.ExperimentNotFoundException) e;
                        result.setEnfIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.api.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.api.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.api.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.api.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, launchConfiguredExperiment_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.launchConfiguredExperiment(args.airavataExperimentId, args.airavataCredStoreToken,resultHandler);
      }
    }

    public static class configureAndLaunchExperiment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, configureAndLaunchExperiment_args, String> {
      public configureAndLaunchExperiment() {
        super("configureAndLaunchExperiment");
      }

      public configureAndLaunchExperiment_args getEmptyArgsInstance() {
        return new configureAndLaunchExperiment_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            configureAndLaunchExperiment_result result = new configureAndLaunchExperiment_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            configureAndLaunchExperiment_result result = new configureAndLaunchExperiment_result();
            if (e instanceof org.apache.airavata.api.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.api.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.api.error.ExperimentNotFoundException) {
                        result.enf = (org.apache.airavata.api.error.ExperimentNotFoundException) e;
                        result.setEnfIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.api.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.api.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.api.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.api.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, configureAndLaunchExperiment_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.configureAndLaunchExperiment(args.airavataExperimentId, args.experimentConfigurationData, args.airavataCredStoreToken,resultHandler);
      }
    }

    public static class cloneExperimentConfiguration<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cloneExperimentConfiguration_args, String> {
      public cloneExperimentConfiguration() {
        super("cloneExperimentConfiguration");
      }

      public cloneExperimentConfiguration_args getEmptyArgsInstance() {
        return new cloneExperimentConfiguration_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            cloneExperimentConfiguration_result result = new cloneExperimentConfiguration_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            cloneExperimentConfiguration_result result = new cloneExperimentConfiguration_result();
            if (e instanceof org.apache.airavata.api.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.api.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.api.error.ExperimentNotFoundException) {
                        result.enf = (org.apache.airavata.api.error.ExperimentNotFoundException) e;
                        result.setEnfIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.api.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.api.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.api.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.api.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cloneExperimentConfiguration_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.cloneExperimentConfiguration(args.airavataExperimentIdToBeCloned, args.basicExperimentMetadata,resultHandler);
      }
    }

    public static class terminateExperiment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, terminateExperiment_args, Void> {
      public terminateExperiment() {
        super("terminateExperiment");
      }

      public terminateExperiment_args getEmptyArgsInstance() {
        return new terminateExperiment_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            terminateExperiment_result result = new terminateExperiment_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            terminateExperiment_result result = new terminateExperiment_result();
            if (e instanceof org.apache.airavata.api.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.api.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.api.error.ExperimentNotFoundException) {
                        result.enf = (org.apache.airavata.api.error.ExperimentNotFoundException) e;
                        result.setEnfIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.api.error.AiravataClientException) {
                        result.ace = (org.apache.airavata.api.error.AiravataClientException) e;
                        result.setAceIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.api.error.AiravataSystemException) {
                        result.ase = (org.apache.airavata.api.error.AiravataSystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, terminateExperiment_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.terminateExperiment(args.airavataExperimentId,resultHandler);
      }
    }

  }

  public static class GetAPIVersion_args implements org.apache.thrift.TBase<GetAPIVersion_args, GetAPIVersion_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetAPIVersion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAPIVersion_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetAPIVersion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetAPIVersion_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAPIVersion_args.class, metaDataMap);
    }

    public GetAPIVersion_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetAPIVersion_args(GetAPIVersion_args other) {
    }

    public GetAPIVersion_args deepCopy() {
      return new GetAPIVersion_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetAPIVersion_args)
        return this.equals((GetAPIVersion_args)that);
      return false;
    }

    public boolean equals(GetAPIVersion_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(GetAPIVersion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetAPIVersion_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetAPIVersion_argsStandardSchemeFactory implements SchemeFactory {
      public GetAPIVersion_argsStandardScheme getScheme() {
        return new GetAPIVersion_argsStandardScheme();
      }
    }

    private static class GetAPIVersion_argsStandardScheme extends StandardScheme<GetAPIVersion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAPIVersion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAPIVersion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetAPIVersion_argsTupleSchemeFactory implements SchemeFactory {
      public GetAPIVersion_argsTupleScheme getScheme() {
        return new GetAPIVersion_argsTupleScheme();
      }
    }

    private static class GetAPIVersion_argsTupleScheme extends TupleScheme<GetAPIVersion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetAPIVersion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetAPIVersion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class GetAPIVersion_result implements org.apache.thrift.TBase<GetAPIVersion_result, GetAPIVersion_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetAPIVersion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAPIVersion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetAPIVersion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetAPIVersion_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAPIVersion_result.class, metaDataMap);
    }

    public GetAPIVersion_result() {
    }

    public GetAPIVersion_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetAPIVersion_result(GetAPIVersion_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public GetAPIVersion_result deepCopy() {
      return new GetAPIVersion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public GetAPIVersion_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetAPIVersion_result)
        return this.equals((GetAPIVersion_result)that);
      return false;
    }

    public boolean equals(GetAPIVersion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(GetAPIVersion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetAPIVersion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetAPIVersion_resultStandardSchemeFactory implements SchemeFactory {
      public GetAPIVersion_resultStandardScheme getScheme() {
        return new GetAPIVersion_resultStandardScheme();
      }
    }

    private static class GetAPIVersion_resultStandardScheme extends StandardScheme<GetAPIVersion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAPIVersion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAPIVersion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetAPIVersion_resultTupleSchemeFactory implements SchemeFactory {
      public GetAPIVersion_resultTupleScheme getScheme() {
        return new GetAPIVersion_resultTupleScheme();
      }
    }

    private static class GetAPIVersion_resultTupleScheme extends TupleScheme<GetAPIVersion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetAPIVersion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetAPIVersion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class createExperiment_args implements org.apache.thrift.TBase<createExperiment_args, createExperiment_args._Fields>, java.io.Serializable, Cloneable, Comparable<createExperiment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createExperiment_args");

    private static final org.apache.thrift.protocol.TField BASIC_EXPERIMENT_METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("basicExperimentMetadata", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createExperiment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createExperiment_argsTupleSchemeFactory());
    }

    public org.apache.airavata.model.experiment.BasicMetadata basicExperimentMetadata; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BASIC_EXPERIMENT_METADATA((short)1, "basicExperimentMetadata");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BASIC_EXPERIMENT_METADATA
            return BASIC_EXPERIMENT_METADATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BASIC_EXPERIMENT_METADATA, new org.apache.thrift.meta_data.FieldMetaData("basicExperimentMetadata", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.experiment.BasicMetadata.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createExperiment_args.class, metaDataMap);
    }

    public createExperiment_args() {
    }

    public createExperiment_args(
      org.apache.airavata.model.experiment.BasicMetadata basicExperimentMetadata)
    {
      this();
      this.basicExperimentMetadata = basicExperimentMetadata;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createExperiment_args(createExperiment_args other) {
      if (other.isSetBasicExperimentMetadata()) {
        this.basicExperimentMetadata = new org.apache.airavata.model.experiment.BasicMetadata(other.basicExperimentMetadata);
      }
    }

    public createExperiment_args deepCopy() {
      return new createExperiment_args(this);
    }

    @Override
    public void clear() {
      this.basicExperimentMetadata = null;
    }

    public org.apache.airavata.model.experiment.BasicMetadata getBasicExperimentMetadata() {
      return this.basicExperimentMetadata;
    }

    public createExperiment_args setBasicExperimentMetadata(org.apache.airavata.model.experiment.BasicMetadata basicExperimentMetadata) {
      this.basicExperimentMetadata = basicExperimentMetadata;
      return this;
    }

    public void unsetBasicExperimentMetadata() {
      this.basicExperimentMetadata = null;
    }

    /** Returns true if field basicExperimentMetadata is set (has been assigned a value) and false otherwise */
    public boolean isSetBasicExperimentMetadata() {
      return this.basicExperimentMetadata != null;
    }

    public void setBasicExperimentMetadataIsSet(boolean value) {
      if (!value) {
        this.basicExperimentMetadata = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BASIC_EXPERIMENT_METADATA:
        if (value == null) {
          unsetBasicExperimentMetadata();
        } else {
          setBasicExperimentMetadata((org.apache.airavata.model.experiment.BasicMetadata)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BASIC_EXPERIMENT_METADATA:
        return getBasicExperimentMetadata();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BASIC_EXPERIMENT_METADATA:
        return isSetBasicExperimentMetadata();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createExperiment_args)
        return this.equals((createExperiment_args)that);
      return false;
    }

    public boolean equals(createExperiment_args that) {
      if (that == null)
        return false;

      boolean this_present_basicExperimentMetadata = true && this.isSetBasicExperimentMetadata();
      boolean that_present_basicExperimentMetadata = true && that.isSetBasicExperimentMetadata();
      if (this_present_basicExperimentMetadata || that_present_basicExperimentMetadata) {
        if (!(this_present_basicExperimentMetadata && that_present_basicExperimentMetadata))
          return false;
        if (!this.basicExperimentMetadata.equals(that.basicExperimentMetadata))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createExperiment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBasicExperimentMetadata()).compareTo(other.isSetBasicExperimentMetadata());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBasicExperimentMetadata()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.basicExperimentMetadata, other.basicExperimentMetadata);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createExperiment_args(");
      boolean first = true;

      sb.append("basicExperimentMetadata:");
      if (this.basicExperimentMetadata == null) {
        sb.append("null");
      } else {
        sb.append(this.basicExperimentMetadata);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (basicExperimentMetadata != null) {
        basicExperimentMetadata.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createExperiment_argsStandardSchemeFactory implements SchemeFactory {
      public createExperiment_argsStandardScheme getScheme() {
        return new createExperiment_argsStandardScheme();
      }
    }

    private static class createExperiment_argsStandardScheme extends StandardScheme<createExperiment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createExperiment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BASIC_EXPERIMENT_METADATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.basicExperimentMetadata = new org.apache.airavata.model.experiment.BasicMetadata();
                struct.basicExperimentMetadata.read(iprot);
                struct.setBasicExperimentMetadataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createExperiment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.basicExperimentMetadata != null) {
          oprot.writeFieldBegin(BASIC_EXPERIMENT_METADATA_FIELD_DESC);
          struct.basicExperimentMetadata.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createExperiment_argsTupleSchemeFactory implements SchemeFactory {
      public createExperiment_argsTupleScheme getScheme() {
        return new createExperiment_argsTupleScheme();
      }
    }

    private static class createExperiment_argsTupleScheme extends TupleScheme<createExperiment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createExperiment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBasicExperimentMetadata()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBasicExperimentMetadata()) {
          struct.basicExperimentMetadata.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createExperiment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.basicExperimentMetadata = new org.apache.airavata.model.experiment.BasicMetadata();
          struct.basicExperimentMetadata.read(iprot);
          struct.setBasicExperimentMetadataIsSet(true);
        }
      }
    }

  }

  public static class createExperiment_result implements org.apache.thrift.TBase<createExperiment_result, createExperiment_result._Fields>, java.io.Serializable, Cloneable, Comparable<createExperiment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createExperiment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createExperiment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createExperiment_resultTupleSchemeFactory());
    }

    public String success; // required
    public org.apache.airavata.api.error.InvalidRequestException ire; // required
    public org.apache.airavata.api.error.AiravataClientException ace; // required
    public org.apache.airavata.api.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ACE((short)2, "ace"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ACE
            return ACE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createExperiment_result.class, metaDataMap);
    }

    public createExperiment_result() {
    }

    public createExperiment_result(
      String success,
      org.apache.airavata.api.error.InvalidRequestException ire,
      org.apache.airavata.api.error.AiravataClientException ace,
      org.apache.airavata.api.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createExperiment_result(createExperiment_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.api.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.api.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.api.error.AiravataSystemException(other.ase);
      }
    }

    public createExperiment_result deepCopy() {
      return new createExperiment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ace = null;
      this.ase = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public createExperiment_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.api.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public createExperiment_result setIre(org.apache.airavata.api.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.api.error.AiravataClientException getAce() {
      return this.ace;
    }

    public createExperiment_result setAce(org.apache.airavata.api.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.api.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public createExperiment_result setAse(org.apache.airavata.api.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.api.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.api.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.api.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createExperiment_result)
        return this.equals((createExperiment_result)that);
      return false;
    }

    public boolean equals(createExperiment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createExperiment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createExperiment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createExperiment_resultStandardSchemeFactory implements SchemeFactory {
      public createExperiment_resultStandardScheme getScheme() {
        return new createExperiment_resultStandardScheme();
      }
    }

    private static class createExperiment_resultStandardScheme extends StandardScheme<createExperiment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createExperiment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.api.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.api.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.api.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createExperiment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createExperiment_resultTupleSchemeFactory implements SchemeFactory {
      public createExperiment_resultTupleScheme getScheme() {
        return new createExperiment_resultTupleScheme();
      }
    }

    private static class createExperiment_resultTupleScheme extends TupleScheme<createExperiment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createExperiment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createExperiment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.api.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.api.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.api.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class getBasicExperimentMetadata_args implements org.apache.thrift.TBase<getBasicExperimentMetadata_args, getBasicExperimentMetadata_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBasicExperimentMetadata_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBasicExperimentMetadata_args");

    private static final org.apache.thrift.protocol.TField AIRAVATA_EXPERIMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("airavataExperimentId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBasicExperimentMetadata_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBasicExperimentMetadata_argsTupleSchemeFactory());
    }

    public String airavataExperimentId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AIRAVATA_EXPERIMENT_ID((short)1, "airavataExperimentId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AIRAVATA_EXPERIMENT_ID
            return AIRAVATA_EXPERIMENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AIRAVATA_EXPERIMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("airavataExperimentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBasicExperimentMetadata_args.class, metaDataMap);
    }

    public getBasicExperimentMetadata_args() {
    }

    public getBasicExperimentMetadata_args(
      String airavataExperimentId)
    {
      this();
      this.airavataExperimentId = airavataExperimentId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBasicExperimentMetadata_args(getBasicExperimentMetadata_args other) {
      if (other.isSetAiravataExperimentId()) {
        this.airavataExperimentId = other.airavataExperimentId;
      }
    }

    public getBasicExperimentMetadata_args deepCopy() {
      return new getBasicExperimentMetadata_args(this);
    }

    @Override
    public void clear() {
      this.airavataExperimentId = null;
    }

    public String getAiravataExperimentId() {
      return this.airavataExperimentId;
    }

    public getBasicExperimentMetadata_args setAiravataExperimentId(String airavataExperimentId) {
      this.airavataExperimentId = airavataExperimentId;
      return this;
    }

    public void unsetAiravataExperimentId() {
      this.airavataExperimentId = null;
    }

    /** Returns true if field airavataExperimentId is set (has been assigned a value) and false otherwise */
    public boolean isSetAiravataExperimentId() {
      return this.airavataExperimentId != null;
    }

    public void setAiravataExperimentIdIsSet(boolean value) {
      if (!value) {
        this.airavataExperimentId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        if (value == null) {
          unsetAiravataExperimentId();
        } else {
          setAiravataExperimentId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        return getAiravataExperimentId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        return isSetAiravataExperimentId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBasicExperimentMetadata_args)
        return this.equals((getBasicExperimentMetadata_args)that);
      return false;
    }

    public boolean equals(getBasicExperimentMetadata_args that) {
      if (that == null)
        return false;

      boolean this_present_airavataExperimentId = true && this.isSetAiravataExperimentId();
      boolean that_present_airavataExperimentId = true && that.isSetAiravataExperimentId();
      if (this_present_airavataExperimentId || that_present_airavataExperimentId) {
        if (!(this_present_airavataExperimentId && that_present_airavataExperimentId))
          return false;
        if (!this.airavataExperimentId.equals(that.airavataExperimentId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getBasicExperimentMetadata_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAiravataExperimentId()).compareTo(other.isSetAiravataExperimentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAiravataExperimentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.airavataExperimentId, other.airavataExperimentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBasicExperimentMetadata_args(");
      boolean first = true;

      sb.append("airavataExperimentId:");
      if (this.airavataExperimentId == null) {
        sb.append("null");
      } else {
        sb.append(this.airavataExperimentId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBasicExperimentMetadata_argsStandardSchemeFactory implements SchemeFactory {
      public getBasicExperimentMetadata_argsStandardScheme getScheme() {
        return new getBasicExperimentMetadata_argsStandardScheme();
      }
    }

    private static class getBasicExperimentMetadata_argsStandardScheme extends StandardScheme<getBasicExperimentMetadata_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBasicExperimentMetadata_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AIRAVATA_EXPERIMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.airavataExperimentId = iprot.readString();
                struct.setAiravataExperimentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBasicExperimentMetadata_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.airavataExperimentId != null) {
          oprot.writeFieldBegin(AIRAVATA_EXPERIMENT_ID_FIELD_DESC);
          oprot.writeString(struct.airavataExperimentId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBasicExperimentMetadata_argsTupleSchemeFactory implements SchemeFactory {
      public getBasicExperimentMetadata_argsTupleScheme getScheme() {
        return new getBasicExperimentMetadata_argsTupleScheme();
      }
    }

    private static class getBasicExperimentMetadata_argsTupleScheme extends TupleScheme<getBasicExperimentMetadata_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBasicExperimentMetadata_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAiravataExperimentId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAiravataExperimentId()) {
          oprot.writeString(struct.airavataExperimentId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBasicExperimentMetadata_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.airavataExperimentId = iprot.readString();
          struct.setAiravataExperimentIdIsSet(true);
        }
      }
    }

  }

  public static class getBasicExperimentMetadata_result implements org.apache.thrift.TBase<getBasicExperimentMetadata_result, getBasicExperimentMetadata_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBasicExperimentMetadata_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBasicExperimentMetadata_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ENF_FIELD_DESC = new org.apache.thrift.protocol.TField("enf", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBasicExperimentMetadata_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBasicExperimentMetadata_resultTupleSchemeFactory());
    }

    public org.apache.airavata.model.experiment.BasicMetadata success; // required
    public org.apache.airavata.api.error.InvalidRequestException ire; // required
    public org.apache.airavata.api.error.ExperimentNotFoundException enf; // required
    public org.apache.airavata.api.error.AiravataClientException ace; // required
    public org.apache.airavata.api.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ENF((short)2, "enf"),
      ACE((short)3, "ace"),
      ASE((short)4, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ENF
            return ENF;
          case 3: // ACE
            return ACE;
          case 4: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.experiment.BasicMetadata.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ENF, new org.apache.thrift.meta_data.FieldMetaData("enf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBasicExperimentMetadata_result.class, metaDataMap);
    }

    public getBasicExperimentMetadata_result() {
    }

    public getBasicExperimentMetadata_result(
      org.apache.airavata.model.experiment.BasicMetadata success,
      org.apache.airavata.api.error.InvalidRequestException ire,
      org.apache.airavata.api.error.ExperimentNotFoundException enf,
      org.apache.airavata.api.error.AiravataClientException ace,
      org.apache.airavata.api.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.enf = enf;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBasicExperimentMetadata_result(getBasicExperimentMetadata_result other) {
      if (other.isSetSuccess()) {
        this.success = new org.apache.airavata.model.experiment.BasicMetadata(other.success);
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.api.error.InvalidRequestException(other.ire);
      }
      if (other.isSetEnf()) {
        this.enf = new org.apache.airavata.api.error.ExperimentNotFoundException(other.enf);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.api.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.api.error.AiravataSystemException(other.ase);
      }
    }

    public getBasicExperimentMetadata_result deepCopy() {
      return new getBasicExperimentMetadata_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.enf = null;
      this.ace = null;
      this.ase = null;
    }

    public org.apache.airavata.model.experiment.BasicMetadata getSuccess() {
      return this.success;
    }

    public getBasicExperimentMetadata_result setSuccess(org.apache.airavata.model.experiment.BasicMetadata success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.api.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public getBasicExperimentMetadata_result setIre(org.apache.airavata.api.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.api.error.ExperimentNotFoundException getEnf() {
      return this.enf;
    }

    public getBasicExperimentMetadata_result setEnf(org.apache.airavata.api.error.ExperimentNotFoundException enf) {
      this.enf = enf;
      return this;
    }

    public void unsetEnf() {
      this.enf = null;
    }

    /** Returns true if field enf is set (has been assigned a value) and false otherwise */
    public boolean isSetEnf() {
      return this.enf != null;
    }

    public void setEnfIsSet(boolean value) {
      if (!value) {
        this.enf = null;
      }
    }

    public org.apache.airavata.api.error.AiravataClientException getAce() {
      return this.ace;
    }

    public getBasicExperimentMetadata_result setAce(org.apache.airavata.api.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.api.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public getBasicExperimentMetadata_result setAse(org.apache.airavata.api.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.apache.airavata.model.experiment.BasicMetadata)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.api.error.InvalidRequestException)value);
        }
        break;

      case ENF:
        if (value == null) {
          unsetEnf();
        } else {
          setEnf((org.apache.airavata.api.error.ExperimentNotFoundException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.api.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.api.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ENF:
        return getEnf();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ENF:
        return isSetEnf();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBasicExperimentMetadata_result)
        return this.equals((getBasicExperimentMetadata_result)that);
      return false;
    }

    public boolean equals(getBasicExperimentMetadata_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_enf = true && this.isSetEnf();
      boolean that_present_enf = true && that.isSetEnf();
      if (this_present_enf || that_present_enf) {
        if (!(this_present_enf && that_present_enf))
          return false;
        if (!this.enf.equals(that.enf))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getBasicExperimentMetadata_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnf()).compareTo(other.isSetEnf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enf, other.enf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBasicExperimentMetadata_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("enf:");
      if (this.enf == null) {
        sb.append("null");
      } else {
        sb.append(this.enf);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBasicExperimentMetadata_resultStandardSchemeFactory implements SchemeFactory {
      public getBasicExperimentMetadata_resultStandardScheme getScheme() {
        return new getBasicExperimentMetadata_resultStandardScheme();
      }
    }

    private static class getBasicExperimentMetadata_resultStandardScheme extends StandardScheme<getBasicExperimentMetadata_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBasicExperimentMetadata_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.apache.airavata.model.experiment.BasicMetadata();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.api.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ENF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.enf = new org.apache.airavata.api.error.ExperimentNotFoundException();
                struct.enf.read(iprot);
                struct.setEnfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.api.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.api.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBasicExperimentMetadata_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.enf != null) {
          oprot.writeFieldBegin(ENF_FIELD_DESC);
          struct.enf.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBasicExperimentMetadata_resultTupleSchemeFactory implements SchemeFactory {
      public getBasicExperimentMetadata_resultTupleScheme getScheme() {
        return new getBasicExperimentMetadata_resultTupleScheme();
      }
    }

    private static class getBasicExperimentMetadata_resultTupleScheme extends TupleScheme<getBasicExperimentMetadata_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBasicExperimentMetadata_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetEnf()) {
          optionals.set(2);
        }
        if (struct.isSetAce()) {
          optionals.set(3);
        }
        if (struct.isSetAse()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetEnf()) {
          struct.enf.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBasicExperimentMetadata_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.success = new org.apache.airavata.model.experiment.BasicMetadata();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.api.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.enf = new org.apache.airavata.api.error.ExperimentNotFoundException();
          struct.enf.read(iprot);
          struct.setEnfIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ace = new org.apache.airavata.api.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(4)) {
          struct.ase = new org.apache.airavata.api.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class configureExperiment_args implements org.apache.thrift.TBase<configureExperiment_args, configureExperiment_args._Fields>, java.io.Serializable, Cloneable, Comparable<configureExperiment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("configureExperiment_args");

    private static final org.apache.thrift.protocol.TField AIRAVATA_EXPERIMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("airavataExperimentId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField EXPERIMENT_CONFIGURATION_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("experimentConfigurationData", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new configureExperiment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new configureExperiment_argsTupleSchemeFactory());
    }

    public String airavataExperimentId; // required
    public org.apache.airavata.model.experiment.ConfigurationData experimentConfigurationData; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AIRAVATA_EXPERIMENT_ID((short)1, "airavataExperimentId"),
      EXPERIMENT_CONFIGURATION_DATA((short)2, "experimentConfigurationData");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AIRAVATA_EXPERIMENT_ID
            return AIRAVATA_EXPERIMENT_ID;
          case 2: // EXPERIMENT_CONFIGURATION_DATA
            return EXPERIMENT_CONFIGURATION_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AIRAVATA_EXPERIMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("airavataExperimentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXPERIMENT_CONFIGURATION_DATA, new org.apache.thrift.meta_data.FieldMetaData("experimentConfigurationData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.experiment.ConfigurationData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(configureExperiment_args.class, metaDataMap);
    }

    public configureExperiment_args() {
    }

    public configureExperiment_args(
      String airavataExperimentId,
      org.apache.airavata.model.experiment.ConfigurationData experimentConfigurationData)
    {
      this();
      this.airavataExperimentId = airavataExperimentId;
      this.experimentConfigurationData = experimentConfigurationData;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public configureExperiment_args(configureExperiment_args other) {
      if (other.isSetAiravataExperimentId()) {
        this.airavataExperimentId = other.airavataExperimentId;
      }
      if (other.isSetExperimentConfigurationData()) {
        this.experimentConfigurationData = new org.apache.airavata.model.experiment.ConfigurationData(other.experimentConfigurationData);
      }
    }

    public configureExperiment_args deepCopy() {
      return new configureExperiment_args(this);
    }

    @Override
    public void clear() {
      this.airavataExperimentId = null;
      this.experimentConfigurationData = null;
    }

    public String getAiravataExperimentId() {
      return this.airavataExperimentId;
    }

    public configureExperiment_args setAiravataExperimentId(String airavataExperimentId) {
      this.airavataExperimentId = airavataExperimentId;
      return this;
    }

    public void unsetAiravataExperimentId() {
      this.airavataExperimentId = null;
    }

    /** Returns true if field airavataExperimentId is set (has been assigned a value) and false otherwise */
    public boolean isSetAiravataExperimentId() {
      return this.airavataExperimentId != null;
    }

    public void setAiravataExperimentIdIsSet(boolean value) {
      if (!value) {
        this.airavataExperimentId = null;
      }
    }

    public org.apache.airavata.model.experiment.ConfigurationData getExperimentConfigurationData() {
      return this.experimentConfigurationData;
    }

    public configureExperiment_args setExperimentConfigurationData(org.apache.airavata.model.experiment.ConfigurationData experimentConfigurationData) {
      this.experimentConfigurationData = experimentConfigurationData;
      return this;
    }

    public void unsetExperimentConfigurationData() {
      this.experimentConfigurationData = null;
    }

    /** Returns true if field experimentConfigurationData is set (has been assigned a value) and false otherwise */
    public boolean isSetExperimentConfigurationData() {
      return this.experimentConfigurationData != null;
    }

    public void setExperimentConfigurationDataIsSet(boolean value) {
      if (!value) {
        this.experimentConfigurationData = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        if (value == null) {
          unsetAiravataExperimentId();
        } else {
          setAiravataExperimentId((String)value);
        }
        break;

      case EXPERIMENT_CONFIGURATION_DATA:
        if (value == null) {
          unsetExperimentConfigurationData();
        } else {
          setExperimentConfigurationData((org.apache.airavata.model.experiment.ConfigurationData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        return getAiravataExperimentId();

      case EXPERIMENT_CONFIGURATION_DATA:
        return getExperimentConfigurationData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        return isSetAiravataExperimentId();
      case EXPERIMENT_CONFIGURATION_DATA:
        return isSetExperimentConfigurationData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof configureExperiment_args)
        return this.equals((configureExperiment_args)that);
      return false;
    }

    public boolean equals(configureExperiment_args that) {
      if (that == null)
        return false;

      boolean this_present_airavataExperimentId = true && this.isSetAiravataExperimentId();
      boolean that_present_airavataExperimentId = true && that.isSetAiravataExperimentId();
      if (this_present_airavataExperimentId || that_present_airavataExperimentId) {
        if (!(this_present_airavataExperimentId && that_present_airavataExperimentId))
          return false;
        if (!this.airavataExperimentId.equals(that.airavataExperimentId))
          return false;
      }

      boolean this_present_experimentConfigurationData = true && this.isSetExperimentConfigurationData();
      boolean that_present_experimentConfigurationData = true && that.isSetExperimentConfigurationData();
      if (this_present_experimentConfigurationData || that_present_experimentConfigurationData) {
        if (!(this_present_experimentConfigurationData && that_present_experimentConfigurationData))
          return false;
        if (!this.experimentConfigurationData.equals(that.experimentConfigurationData))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(configureExperiment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAiravataExperimentId()).compareTo(other.isSetAiravataExperimentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAiravataExperimentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.airavataExperimentId, other.airavataExperimentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExperimentConfigurationData()).compareTo(other.isSetExperimentConfigurationData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExperimentConfigurationData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experimentConfigurationData, other.experimentConfigurationData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("configureExperiment_args(");
      boolean first = true;

      sb.append("airavataExperimentId:");
      if (this.airavataExperimentId == null) {
        sb.append("null");
      } else {
        sb.append(this.airavataExperimentId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("experimentConfigurationData:");
      if (this.experimentConfigurationData == null) {
        sb.append("null");
      } else {
        sb.append(this.experimentConfigurationData);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (experimentConfigurationData != null) {
        experimentConfigurationData.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class configureExperiment_argsStandardSchemeFactory implements SchemeFactory {
      public configureExperiment_argsStandardScheme getScheme() {
        return new configureExperiment_argsStandardScheme();
      }
    }

    private static class configureExperiment_argsStandardScheme extends StandardScheme<configureExperiment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, configureExperiment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AIRAVATA_EXPERIMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.airavataExperimentId = iprot.readString();
                struct.setAiravataExperimentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EXPERIMENT_CONFIGURATION_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.experimentConfigurationData = new org.apache.airavata.model.experiment.ConfigurationData();
                struct.experimentConfigurationData.read(iprot);
                struct.setExperimentConfigurationDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, configureExperiment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.airavataExperimentId != null) {
          oprot.writeFieldBegin(AIRAVATA_EXPERIMENT_ID_FIELD_DESC);
          oprot.writeString(struct.airavataExperimentId);
          oprot.writeFieldEnd();
        }
        if (struct.experimentConfigurationData != null) {
          oprot.writeFieldBegin(EXPERIMENT_CONFIGURATION_DATA_FIELD_DESC);
          struct.experimentConfigurationData.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class configureExperiment_argsTupleSchemeFactory implements SchemeFactory {
      public configureExperiment_argsTupleScheme getScheme() {
        return new configureExperiment_argsTupleScheme();
      }
    }

    private static class configureExperiment_argsTupleScheme extends TupleScheme<configureExperiment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, configureExperiment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAiravataExperimentId()) {
          optionals.set(0);
        }
        if (struct.isSetExperimentConfigurationData()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAiravataExperimentId()) {
          oprot.writeString(struct.airavataExperimentId);
        }
        if (struct.isSetExperimentConfigurationData()) {
          struct.experimentConfigurationData.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, configureExperiment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.airavataExperimentId = iprot.readString();
          struct.setAiravataExperimentIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.experimentConfigurationData = new org.apache.airavata.model.experiment.ConfigurationData();
          struct.experimentConfigurationData.read(iprot);
          struct.setExperimentConfigurationDataIsSet(true);
        }
      }
    }

  }

  public static class configureExperiment_result implements org.apache.thrift.TBase<configureExperiment_result, configureExperiment_result._Fields>, java.io.Serializable, Cloneable, Comparable<configureExperiment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("configureExperiment_result");

    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ENF_FIELD_DESC = new org.apache.thrift.protocol.TField("enf", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new configureExperiment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new configureExperiment_resultTupleSchemeFactory());
    }

    public org.apache.airavata.api.error.InvalidRequestException ire; // required
    public org.apache.airavata.api.error.ExperimentNotFoundException enf; // required
    public org.apache.airavata.api.error.AiravataClientException ace; // required
    public org.apache.airavata.api.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IRE((short)1, "ire"),
      ENF((short)2, "enf"),
      ACE((short)3, "ace"),
      ASE((short)4, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IRE
            return IRE;
          case 2: // ENF
            return ENF;
          case 3: // ACE
            return ACE;
          case 4: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ENF, new org.apache.thrift.meta_data.FieldMetaData("enf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(configureExperiment_result.class, metaDataMap);
    }

    public configureExperiment_result() {
    }

    public configureExperiment_result(
      org.apache.airavata.api.error.InvalidRequestException ire,
      org.apache.airavata.api.error.ExperimentNotFoundException enf,
      org.apache.airavata.api.error.AiravataClientException ace,
      org.apache.airavata.api.error.AiravataSystemException ase)
    {
      this();
      this.ire = ire;
      this.enf = enf;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public configureExperiment_result(configureExperiment_result other) {
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.api.error.InvalidRequestException(other.ire);
      }
      if (other.isSetEnf()) {
        this.enf = new org.apache.airavata.api.error.ExperimentNotFoundException(other.enf);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.api.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.api.error.AiravataSystemException(other.ase);
      }
    }

    public configureExperiment_result deepCopy() {
      return new configureExperiment_result(this);
    }

    @Override
    public void clear() {
      this.ire = null;
      this.enf = null;
      this.ace = null;
      this.ase = null;
    }

    public org.apache.airavata.api.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public configureExperiment_result setIre(org.apache.airavata.api.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.api.error.ExperimentNotFoundException getEnf() {
      return this.enf;
    }

    public configureExperiment_result setEnf(org.apache.airavata.api.error.ExperimentNotFoundException enf) {
      this.enf = enf;
      return this;
    }

    public void unsetEnf() {
      this.enf = null;
    }

    /** Returns true if field enf is set (has been assigned a value) and false otherwise */
    public boolean isSetEnf() {
      return this.enf != null;
    }

    public void setEnfIsSet(boolean value) {
      if (!value) {
        this.enf = null;
      }
    }

    public org.apache.airavata.api.error.AiravataClientException getAce() {
      return this.ace;
    }

    public configureExperiment_result setAce(org.apache.airavata.api.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.api.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public configureExperiment_result setAse(org.apache.airavata.api.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.api.error.InvalidRequestException)value);
        }
        break;

      case ENF:
        if (value == null) {
          unsetEnf();
        } else {
          setEnf((org.apache.airavata.api.error.ExperimentNotFoundException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.api.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.api.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IRE:
        return getIre();

      case ENF:
        return getEnf();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IRE:
        return isSetIre();
      case ENF:
        return isSetEnf();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof configureExperiment_result)
        return this.equals((configureExperiment_result)that);
      return false;
    }

    public boolean equals(configureExperiment_result that) {
      if (that == null)
        return false;

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_enf = true && this.isSetEnf();
      boolean that_present_enf = true && that.isSetEnf();
      if (this_present_enf || that_present_enf) {
        if (!(this_present_enf && that_present_enf))
          return false;
        if (!this.enf.equals(that.enf))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(configureExperiment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnf()).compareTo(other.isSetEnf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enf, other.enf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("configureExperiment_result(");
      boolean first = true;

      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("enf:");
      if (this.enf == null) {
        sb.append("null");
      } else {
        sb.append(this.enf);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class configureExperiment_resultStandardSchemeFactory implements SchemeFactory {
      public configureExperiment_resultStandardScheme getScheme() {
        return new configureExperiment_resultStandardScheme();
      }
    }

    private static class configureExperiment_resultStandardScheme extends StandardScheme<configureExperiment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, configureExperiment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.api.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ENF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.enf = new org.apache.airavata.api.error.ExperimentNotFoundException();
                struct.enf.read(iprot);
                struct.setEnfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.api.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.api.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, configureExperiment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.enf != null) {
          oprot.writeFieldBegin(ENF_FIELD_DESC);
          struct.enf.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class configureExperiment_resultTupleSchemeFactory implements SchemeFactory {
      public configureExperiment_resultTupleScheme getScheme() {
        return new configureExperiment_resultTupleScheme();
      }
    }

    private static class configureExperiment_resultTupleScheme extends TupleScheme<configureExperiment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, configureExperiment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIre()) {
          optionals.set(0);
        }
        if (struct.isSetEnf()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetEnf()) {
          struct.enf.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, configureExperiment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.ire = new org.apache.airavata.api.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(1)) {
          struct.enf = new org.apache.airavata.api.error.ExperimentNotFoundException();
          struct.enf.read(iprot);
          struct.setEnfIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.api.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.api.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class getExperimentConfiguration_args implements org.apache.thrift.TBase<getExperimentConfiguration_args, getExperimentConfiguration_args._Fields>, java.io.Serializable, Cloneable, Comparable<getExperimentConfiguration_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExperimentConfiguration_args");

    private static final org.apache.thrift.protocol.TField AIRAVATA_EXPERIMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("airavataExperimentId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getExperimentConfiguration_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getExperimentConfiguration_argsTupleSchemeFactory());
    }

    public String airavataExperimentId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AIRAVATA_EXPERIMENT_ID((short)1, "airavataExperimentId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AIRAVATA_EXPERIMENT_ID
            return AIRAVATA_EXPERIMENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AIRAVATA_EXPERIMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("airavataExperimentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExperimentConfiguration_args.class, metaDataMap);
    }

    public getExperimentConfiguration_args() {
    }

    public getExperimentConfiguration_args(
      String airavataExperimentId)
    {
      this();
      this.airavataExperimentId = airavataExperimentId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExperimentConfiguration_args(getExperimentConfiguration_args other) {
      if (other.isSetAiravataExperimentId()) {
        this.airavataExperimentId = other.airavataExperimentId;
      }
    }

    public getExperimentConfiguration_args deepCopy() {
      return new getExperimentConfiguration_args(this);
    }

    @Override
    public void clear() {
      this.airavataExperimentId = null;
    }

    public String getAiravataExperimentId() {
      return this.airavataExperimentId;
    }

    public getExperimentConfiguration_args setAiravataExperimentId(String airavataExperimentId) {
      this.airavataExperimentId = airavataExperimentId;
      return this;
    }

    public void unsetAiravataExperimentId() {
      this.airavataExperimentId = null;
    }

    /** Returns true if field airavataExperimentId is set (has been assigned a value) and false otherwise */
    public boolean isSetAiravataExperimentId() {
      return this.airavataExperimentId != null;
    }

    public void setAiravataExperimentIdIsSet(boolean value) {
      if (!value) {
        this.airavataExperimentId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        if (value == null) {
          unsetAiravataExperimentId();
        } else {
          setAiravataExperimentId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        return getAiravataExperimentId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        return isSetAiravataExperimentId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getExperimentConfiguration_args)
        return this.equals((getExperimentConfiguration_args)that);
      return false;
    }

    public boolean equals(getExperimentConfiguration_args that) {
      if (that == null)
        return false;

      boolean this_present_airavataExperimentId = true && this.isSetAiravataExperimentId();
      boolean that_present_airavataExperimentId = true && that.isSetAiravataExperimentId();
      if (this_present_airavataExperimentId || that_present_airavataExperimentId) {
        if (!(this_present_airavataExperimentId && that_present_airavataExperimentId))
          return false;
        if (!this.airavataExperimentId.equals(that.airavataExperimentId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getExperimentConfiguration_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAiravataExperimentId()).compareTo(other.isSetAiravataExperimentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAiravataExperimentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.airavataExperimentId, other.airavataExperimentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getExperimentConfiguration_args(");
      boolean first = true;

      sb.append("airavataExperimentId:");
      if (this.airavataExperimentId == null) {
        sb.append("null");
      } else {
        sb.append(this.airavataExperimentId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExperimentConfiguration_argsStandardSchemeFactory implements SchemeFactory {
      public getExperimentConfiguration_argsStandardScheme getScheme() {
        return new getExperimentConfiguration_argsStandardScheme();
      }
    }

    private static class getExperimentConfiguration_argsStandardScheme extends StandardScheme<getExperimentConfiguration_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExperimentConfiguration_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AIRAVATA_EXPERIMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.airavataExperimentId = iprot.readString();
                struct.setAiravataExperimentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExperimentConfiguration_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.airavataExperimentId != null) {
          oprot.writeFieldBegin(AIRAVATA_EXPERIMENT_ID_FIELD_DESC);
          oprot.writeString(struct.airavataExperimentId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExperimentConfiguration_argsTupleSchemeFactory implements SchemeFactory {
      public getExperimentConfiguration_argsTupleScheme getScheme() {
        return new getExperimentConfiguration_argsTupleScheme();
      }
    }

    private static class getExperimentConfiguration_argsTupleScheme extends TupleScheme<getExperimentConfiguration_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExperimentConfiguration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAiravataExperimentId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAiravataExperimentId()) {
          oprot.writeString(struct.airavataExperimentId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExperimentConfiguration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.airavataExperimentId = iprot.readString();
          struct.setAiravataExperimentIdIsSet(true);
        }
      }
    }

  }

  public static class getExperimentConfiguration_result implements org.apache.thrift.TBase<getExperimentConfiguration_result, getExperimentConfiguration_result._Fields>, java.io.Serializable, Cloneable, Comparable<getExperimentConfiguration_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExperimentConfiguration_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ENF_FIELD_DESC = new org.apache.thrift.protocol.TField("enf", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getExperimentConfiguration_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getExperimentConfiguration_resultTupleSchemeFactory());
    }

    public org.apache.airavata.model.experiment.ConfigurationData success; // required
    public org.apache.airavata.api.error.InvalidRequestException ire; // required
    public org.apache.airavata.api.error.ExperimentNotFoundException enf; // required
    public org.apache.airavata.api.error.AiravataClientException ace; // required
    public org.apache.airavata.api.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ENF((short)2, "enf"),
      ACE((short)3, "ace"),
      ASE((short)4, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ENF
            return ENF;
          case 3: // ACE
            return ACE;
          case 4: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.experiment.ConfigurationData.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ENF, new org.apache.thrift.meta_data.FieldMetaData("enf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExperimentConfiguration_result.class, metaDataMap);
    }

    public getExperimentConfiguration_result() {
    }

    public getExperimentConfiguration_result(
      org.apache.airavata.model.experiment.ConfigurationData success,
      org.apache.airavata.api.error.InvalidRequestException ire,
      org.apache.airavata.api.error.ExperimentNotFoundException enf,
      org.apache.airavata.api.error.AiravataClientException ace,
      org.apache.airavata.api.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.enf = enf;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExperimentConfiguration_result(getExperimentConfiguration_result other) {
      if (other.isSetSuccess()) {
        this.success = new org.apache.airavata.model.experiment.ConfigurationData(other.success);
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.api.error.InvalidRequestException(other.ire);
      }
      if (other.isSetEnf()) {
        this.enf = new org.apache.airavata.api.error.ExperimentNotFoundException(other.enf);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.api.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.api.error.AiravataSystemException(other.ase);
      }
    }

    public getExperimentConfiguration_result deepCopy() {
      return new getExperimentConfiguration_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.enf = null;
      this.ace = null;
      this.ase = null;
    }

    public org.apache.airavata.model.experiment.ConfigurationData getSuccess() {
      return this.success;
    }

    public getExperimentConfiguration_result setSuccess(org.apache.airavata.model.experiment.ConfigurationData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.api.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public getExperimentConfiguration_result setIre(org.apache.airavata.api.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.api.error.ExperimentNotFoundException getEnf() {
      return this.enf;
    }

    public getExperimentConfiguration_result setEnf(org.apache.airavata.api.error.ExperimentNotFoundException enf) {
      this.enf = enf;
      return this;
    }

    public void unsetEnf() {
      this.enf = null;
    }

    /** Returns true if field enf is set (has been assigned a value) and false otherwise */
    public boolean isSetEnf() {
      return this.enf != null;
    }

    public void setEnfIsSet(boolean value) {
      if (!value) {
        this.enf = null;
      }
    }

    public org.apache.airavata.api.error.AiravataClientException getAce() {
      return this.ace;
    }

    public getExperimentConfiguration_result setAce(org.apache.airavata.api.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.api.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public getExperimentConfiguration_result setAse(org.apache.airavata.api.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.apache.airavata.model.experiment.ConfigurationData)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.api.error.InvalidRequestException)value);
        }
        break;

      case ENF:
        if (value == null) {
          unsetEnf();
        } else {
          setEnf((org.apache.airavata.api.error.ExperimentNotFoundException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.api.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.api.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ENF:
        return getEnf();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ENF:
        return isSetEnf();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getExperimentConfiguration_result)
        return this.equals((getExperimentConfiguration_result)that);
      return false;
    }

    public boolean equals(getExperimentConfiguration_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_enf = true && this.isSetEnf();
      boolean that_present_enf = true && that.isSetEnf();
      if (this_present_enf || that_present_enf) {
        if (!(this_present_enf && that_present_enf))
          return false;
        if (!this.enf.equals(that.enf))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getExperimentConfiguration_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnf()).compareTo(other.isSetEnf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enf, other.enf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getExperimentConfiguration_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("enf:");
      if (this.enf == null) {
        sb.append("null");
      } else {
        sb.append(this.enf);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExperimentConfiguration_resultStandardSchemeFactory implements SchemeFactory {
      public getExperimentConfiguration_resultStandardScheme getScheme() {
        return new getExperimentConfiguration_resultStandardScheme();
      }
    }

    private static class getExperimentConfiguration_resultStandardScheme extends StandardScheme<getExperimentConfiguration_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExperimentConfiguration_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.apache.airavata.model.experiment.ConfigurationData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.api.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ENF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.enf = new org.apache.airavata.api.error.ExperimentNotFoundException();
                struct.enf.read(iprot);
                struct.setEnfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.api.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.api.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExperimentConfiguration_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.enf != null) {
          oprot.writeFieldBegin(ENF_FIELD_DESC);
          struct.enf.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExperimentConfiguration_resultTupleSchemeFactory implements SchemeFactory {
      public getExperimentConfiguration_resultTupleScheme getScheme() {
        return new getExperimentConfiguration_resultTupleScheme();
      }
    }

    private static class getExperimentConfiguration_resultTupleScheme extends TupleScheme<getExperimentConfiguration_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExperimentConfiguration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetEnf()) {
          optionals.set(2);
        }
        if (struct.isSetAce()) {
          optionals.set(3);
        }
        if (struct.isSetAse()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetEnf()) {
          struct.enf.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExperimentConfiguration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.success = new org.apache.airavata.model.experiment.ConfigurationData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.api.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.enf = new org.apache.airavata.api.error.ExperimentNotFoundException();
          struct.enf.read(iprot);
          struct.setEnfIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ace = new org.apache.airavata.api.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(4)) {
          struct.ase = new org.apache.airavata.api.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class launchConfiguredExperiment_args implements org.apache.thrift.TBase<launchConfiguredExperiment_args, launchConfiguredExperiment_args._Fields>, java.io.Serializable, Cloneable, Comparable<launchConfiguredExperiment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("launchConfiguredExperiment_args");

    private static final org.apache.thrift.protocol.TField AIRAVATA_EXPERIMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("airavataExperimentId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField AIRAVATA_CRED_STORE_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("airavataCredStoreToken", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new launchConfiguredExperiment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new launchConfiguredExperiment_argsTupleSchemeFactory());
    }

    public String airavataExperimentId; // required
    public String airavataCredStoreToken; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AIRAVATA_EXPERIMENT_ID((short)1, "airavataExperimentId"),
      AIRAVATA_CRED_STORE_TOKEN((short)2, "airavataCredStoreToken");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AIRAVATA_EXPERIMENT_ID
            return AIRAVATA_EXPERIMENT_ID;
          case 2: // AIRAVATA_CRED_STORE_TOKEN
            return AIRAVATA_CRED_STORE_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AIRAVATA_EXPERIMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("airavataExperimentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AIRAVATA_CRED_STORE_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("airavataCredStoreToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(launchConfiguredExperiment_args.class, metaDataMap);
    }

    public launchConfiguredExperiment_args() {
    }

    public launchConfiguredExperiment_args(
      String airavataExperimentId,
      String airavataCredStoreToken)
    {
      this();
      this.airavataExperimentId = airavataExperimentId;
      this.airavataCredStoreToken = airavataCredStoreToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public launchConfiguredExperiment_args(launchConfiguredExperiment_args other) {
      if (other.isSetAiravataExperimentId()) {
        this.airavataExperimentId = other.airavataExperimentId;
      }
      if (other.isSetAiravataCredStoreToken()) {
        this.airavataCredStoreToken = other.airavataCredStoreToken;
      }
    }

    public launchConfiguredExperiment_args deepCopy() {
      return new launchConfiguredExperiment_args(this);
    }

    @Override
    public void clear() {
      this.airavataExperimentId = null;
      this.airavataCredStoreToken = null;
    }

    public String getAiravataExperimentId() {
      return this.airavataExperimentId;
    }

    public launchConfiguredExperiment_args setAiravataExperimentId(String airavataExperimentId) {
      this.airavataExperimentId = airavataExperimentId;
      return this;
    }

    public void unsetAiravataExperimentId() {
      this.airavataExperimentId = null;
    }

    /** Returns true if field airavataExperimentId is set (has been assigned a value) and false otherwise */
    public boolean isSetAiravataExperimentId() {
      return this.airavataExperimentId != null;
    }

    public void setAiravataExperimentIdIsSet(boolean value) {
      if (!value) {
        this.airavataExperimentId = null;
      }
    }

    public String getAiravataCredStoreToken() {
      return this.airavataCredStoreToken;
    }

    public launchConfiguredExperiment_args setAiravataCredStoreToken(String airavataCredStoreToken) {
      this.airavataCredStoreToken = airavataCredStoreToken;
      return this;
    }

    public void unsetAiravataCredStoreToken() {
      this.airavataCredStoreToken = null;
    }

    /** Returns true if field airavataCredStoreToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAiravataCredStoreToken() {
      return this.airavataCredStoreToken != null;
    }

    public void setAiravataCredStoreTokenIsSet(boolean value) {
      if (!value) {
        this.airavataCredStoreToken = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        if (value == null) {
          unsetAiravataExperimentId();
        } else {
          setAiravataExperimentId((String)value);
        }
        break;

      case AIRAVATA_CRED_STORE_TOKEN:
        if (value == null) {
          unsetAiravataCredStoreToken();
        } else {
          setAiravataCredStoreToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        return getAiravataExperimentId();

      case AIRAVATA_CRED_STORE_TOKEN:
        return getAiravataCredStoreToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        return isSetAiravataExperimentId();
      case AIRAVATA_CRED_STORE_TOKEN:
        return isSetAiravataCredStoreToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof launchConfiguredExperiment_args)
        return this.equals((launchConfiguredExperiment_args)that);
      return false;
    }

    public boolean equals(launchConfiguredExperiment_args that) {
      if (that == null)
        return false;

      boolean this_present_airavataExperimentId = true && this.isSetAiravataExperimentId();
      boolean that_present_airavataExperimentId = true && that.isSetAiravataExperimentId();
      if (this_present_airavataExperimentId || that_present_airavataExperimentId) {
        if (!(this_present_airavataExperimentId && that_present_airavataExperimentId))
          return false;
        if (!this.airavataExperimentId.equals(that.airavataExperimentId))
          return false;
      }

      boolean this_present_airavataCredStoreToken = true && this.isSetAiravataCredStoreToken();
      boolean that_present_airavataCredStoreToken = true && that.isSetAiravataCredStoreToken();
      if (this_present_airavataCredStoreToken || that_present_airavataCredStoreToken) {
        if (!(this_present_airavataCredStoreToken && that_present_airavataCredStoreToken))
          return false;
        if (!this.airavataCredStoreToken.equals(that.airavataCredStoreToken))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(launchConfiguredExperiment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAiravataExperimentId()).compareTo(other.isSetAiravataExperimentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAiravataExperimentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.airavataExperimentId, other.airavataExperimentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAiravataCredStoreToken()).compareTo(other.isSetAiravataCredStoreToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAiravataCredStoreToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.airavataCredStoreToken, other.airavataCredStoreToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("launchConfiguredExperiment_args(");
      boolean first = true;

      sb.append("airavataExperimentId:");
      if (this.airavataExperimentId == null) {
        sb.append("null");
      } else {
        sb.append(this.airavataExperimentId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("airavataCredStoreToken:");
      if (this.airavataCredStoreToken == null) {
        sb.append("null");
      } else {
        sb.append(this.airavataCredStoreToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class launchConfiguredExperiment_argsStandardSchemeFactory implements SchemeFactory {
      public launchConfiguredExperiment_argsStandardScheme getScheme() {
        return new launchConfiguredExperiment_argsStandardScheme();
      }
    }

    private static class launchConfiguredExperiment_argsStandardScheme extends StandardScheme<launchConfiguredExperiment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, launchConfiguredExperiment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AIRAVATA_EXPERIMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.airavataExperimentId = iprot.readString();
                struct.setAiravataExperimentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AIRAVATA_CRED_STORE_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.airavataCredStoreToken = iprot.readString();
                struct.setAiravataCredStoreTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, launchConfiguredExperiment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.airavataExperimentId != null) {
          oprot.writeFieldBegin(AIRAVATA_EXPERIMENT_ID_FIELD_DESC);
          oprot.writeString(struct.airavataExperimentId);
          oprot.writeFieldEnd();
        }
        if (struct.airavataCredStoreToken != null) {
          oprot.writeFieldBegin(AIRAVATA_CRED_STORE_TOKEN_FIELD_DESC);
          oprot.writeString(struct.airavataCredStoreToken);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class launchConfiguredExperiment_argsTupleSchemeFactory implements SchemeFactory {
      public launchConfiguredExperiment_argsTupleScheme getScheme() {
        return new launchConfiguredExperiment_argsTupleScheme();
      }
    }

    private static class launchConfiguredExperiment_argsTupleScheme extends TupleScheme<launchConfiguredExperiment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, launchConfiguredExperiment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAiravataExperimentId()) {
          optionals.set(0);
        }
        if (struct.isSetAiravataCredStoreToken()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAiravataExperimentId()) {
          oprot.writeString(struct.airavataExperimentId);
        }
        if (struct.isSetAiravataCredStoreToken()) {
          oprot.writeString(struct.airavataCredStoreToken);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, launchConfiguredExperiment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.airavataExperimentId = iprot.readString();
          struct.setAiravataExperimentIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.airavataCredStoreToken = iprot.readString();
          struct.setAiravataCredStoreTokenIsSet(true);
        }
      }
    }

  }

  public static class launchConfiguredExperiment_result implements org.apache.thrift.TBase<launchConfiguredExperiment_result, launchConfiguredExperiment_result._Fields>, java.io.Serializable, Cloneable, Comparable<launchConfiguredExperiment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("launchConfiguredExperiment_result");

    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ENF_FIELD_DESC = new org.apache.thrift.protocol.TField("enf", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new launchConfiguredExperiment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new launchConfiguredExperiment_resultTupleSchemeFactory());
    }

    public org.apache.airavata.api.error.InvalidRequestException ire; // required
    public org.apache.airavata.api.error.ExperimentNotFoundException enf; // required
    public org.apache.airavata.api.error.AiravataClientException ace; // required
    public org.apache.airavata.api.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IRE((short)1, "ire"),
      ENF((short)2, "enf"),
      ACE((short)3, "ace"),
      ASE((short)4, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IRE
            return IRE;
          case 2: // ENF
            return ENF;
          case 3: // ACE
            return ACE;
          case 4: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ENF, new org.apache.thrift.meta_data.FieldMetaData("enf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(launchConfiguredExperiment_result.class, metaDataMap);
    }

    public launchConfiguredExperiment_result() {
    }

    public launchConfiguredExperiment_result(
      org.apache.airavata.api.error.InvalidRequestException ire,
      org.apache.airavata.api.error.ExperimentNotFoundException enf,
      org.apache.airavata.api.error.AiravataClientException ace,
      org.apache.airavata.api.error.AiravataSystemException ase)
    {
      this();
      this.ire = ire;
      this.enf = enf;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public launchConfiguredExperiment_result(launchConfiguredExperiment_result other) {
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.api.error.InvalidRequestException(other.ire);
      }
      if (other.isSetEnf()) {
        this.enf = new org.apache.airavata.api.error.ExperimentNotFoundException(other.enf);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.api.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.api.error.AiravataSystemException(other.ase);
      }
    }

    public launchConfiguredExperiment_result deepCopy() {
      return new launchConfiguredExperiment_result(this);
    }

    @Override
    public void clear() {
      this.ire = null;
      this.enf = null;
      this.ace = null;
      this.ase = null;
    }

    public org.apache.airavata.api.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public launchConfiguredExperiment_result setIre(org.apache.airavata.api.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.api.error.ExperimentNotFoundException getEnf() {
      return this.enf;
    }

    public launchConfiguredExperiment_result setEnf(org.apache.airavata.api.error.ExperimentNotFoundException enf) {
      this.enf = enf;
      return this;
    }

    public void unsetEnf() {
      this.enf = null;
    }

    /** Returns true if field enf is set (has been assigned a value) and false otherwise */
    public boolean isSetEnf() {
      return this.enf != null;
    }

    public void setEnfIsSet(boolean value) {
      if (!value) {
        this.enf = null;
      }
    }

    public org.apache.airavata.api.error.AiravataClientException getAce() {
      return this.ace;
    }

    public launchConfiguredExperiment_result setAce(org.apache.airavata.api.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.api.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public launchConfiguredExperiment_result setAse(org.apache.airavata.api.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.api.error.InvalidRequestException)value);
        }
        break;

      case ENF:
        if (value == null) {
          unsetEnf();
        } else {
          setEnf((org.apache.airavata.api.error.ExperimentNotFoundException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.api.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.api.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IRE:
        return getIre();

      case ENF:
        return getEnf();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IRE:
        return isSetIre();
      case ENF:
        return isSetEnf();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof launchConfiguredExperiment_result)
        return this.equals((launchConfiguredExperiment_result)that);
      return false;
    }

    public boolean equals(launchConfiguredExperiment_result that) {
      if (that == null)
        return false;

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_enf = true && this.isSetEnf();
      boolean that_present_enf = true && that.isSetEnf();
      if (this_present_enf || that_present_enf) {
        if (!(this_present_enf && that_present_enf))
          return false;
        if (!this.enf.equals(that.enf))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(launchConfiguredExperiment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnf()).compareTo(other.isSetEnf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enf, other.enf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("launchConfiguredExperiment_result(");
      boolean first = true;

      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("enf:");
      if (this.enf == null) {
        sb.append("null");
      } else {
        sb.append(this.enf);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class launchConfiguredExperiment_resultStandardSchemeFactory implements SchemeFactory {
      public launchConfiguredExperiment_resultStandardScheme getScheme() {
        return new launchConfiguredExperiment_resultStandardScheme();
      }
    }

    private static class launchConfiguredExperiment_resultStandardScheme extends StandardScheme<launchConfiguredExperiment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, launchConfiguredExperiment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.api.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ENF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.enf = new org.apache.airavata.api.error.ExperimentNotFoundException();
                struct.enf.read(iprot);
                struct.setEnfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.api.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.api.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, launchConfiguredExperiment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.enf != null) {
          oprot.writeFieldBegin(ENF_FIELD_DESC);
          struct.enf.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class launchConfiguredExperiment_resultTupleSchemeFactory implements SchemeFactory {
      public launchConfiguredExperiment_resultTupleScheme getScheme() {
        return new launchConfiguredExperiment_resultTupleScheme();
      }
    }

    private static class launchConfiguredExperiment_resultTupleScheme extends TupleScheme<launchConfiguredExperiment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, launchConfiguredExperiment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIre()) {
          optionals.set(0);
        }
        if (struct.isSetEnf()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetEnf()) {
          struct.enf.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, launchConfiguredExperiment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.ire = new org.apache.airavata.api.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(1)) {
          struct.enf = new org.apache.airavata.api.error.ExperimentNotFoundException();
          struct.enf.read(iprot);
          struct.setEnfIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.api.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.api.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class configureAndLaunchExperiment_args implements org.apache.thrift.TBase<configureAndLaunchExperiment_args, configureAndLaunchExperiment_args._Fields>, java.io.Serializable, Cloneable, Comparable<configureAndLaunchExperiment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("configureAndLaunchExperiment_args");

    private static final org.apache.thrift.protocol.TField AIRAVATA_EXPERIMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("airavataExperimentId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField EXPERIMENT_CONFIGURATION_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("experimentConfigurationData", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField AIRAVATA_CRED_STORE_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("airavataCredStoreToken", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new configureAndLaunchExperiment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new configureAndLaunchExperiment_argsTupleSchemeFactory());
    }

    public String airavataExperimentId; // required
    public org.apache.airavata.model.experiment.ConfigurationData experimentConfigurationData; // required
    public String airavataCredStoreToken; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AIRAVATA_EXPERIMENT_ID((short)1, "airavataExperimentId"),
      EXPERIMENT_CONFIGURATION_DATA((short)2, "experimentConfigurationData"),
      AIRAVATA_CRED_STORE_TOKEN((short)3, "airavataCredStoreToken");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AIRAVATA_EXPERIMENT_ID
            return AIRAVATA_EXPERIMENT_ID;
          case 2: // EXPERIMENT_CONFIGURATION_DATA
            return EXPERIMENT_CONFIGURATION_DATA;
          case 3: // AIRAVATA_CRED_STORE_TOKEN
            return AIRAVATA_CRED_STORE_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AIRAVATA_EXPERIMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("airavataExperimentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXPERIMENT_CONFIGURATION_DATA, new org.apache.thrift.meta_data.FieldMetaData("experimentConfigurationData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.experiment.ConfigurationData.class)));
      tmpMap.put(_Fields.AIRAVATA_CRED_STORE_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("airavataCredStoreToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(configureAndLaunchExperiment_args.class, metaDataMap);
    }

    public configureAndLaunchExperiment_args() {
    }

    public configureAndLaunchExperiment_args(
      String airavataExperimentId,
      org.apache.airavata.model.experiment.ConfigurationData experimentConfigurationData,
      String airavataCredStoreToken)
    {
      this();
      this.airavataExperimentId = airavataExperimentId;
      this.experimentConfigurationData = experimentConfigurationData;
      this.airavataCredStoreToken = airavataCredStoreToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public configureAndLaunchExperiment_args(configureAndLaunchExperiment_args other) {
      if (other.isSetAiravataExperimentId()) {
        this.airavataExperimentId = other.airavataExperimentId;
      }
      if (other.isSetExperimentConfigurationData()) {
        this.experimentConfigurationData = new org.apache.airavata.model.experiment.ConfigurationData(other.experimentConfigurationData);
      }
      if (other.isSetAiravataCredStoreToken()) {
        this.airavataCredStoreToken = other.airavataCredStoreToken;
      }
    }

    public configureAndLaunchExperiment_args deepCopy() {
      return new configureAndLaunchExperiment_args(this);
    }

    @Override
    public void clear() {
      this.airavataExperimentId = null;
      this.experimentConfigurationData = null;
      this.airavataCredStoreToken = null;
    }

    public String getAiravataExperimentId() {
      return this.airavataExperimentId;
    }

    public configureAndLaunchExperiment_args setAiravataExperimentId(String airavataExperimentId) {
      this.airavataExperimentId = airavataExperimentId;
      return this;
    }

    public void unsetAiravataExperimentId() {
      this.airavataExperimentId = null;
    }

    /** Returns true if field airavataExperimentId is set (has been assigned a value) and false otherwise */
    public boolean isSetAiravataExperimentId() {
      return this.airavataExperimentId != null;
    }

    public void setAiravataExperimentIdIsSet(boolean value) {
      if (!value) {
        this.airavataExperimentId = null;
      }
    }

    public org.apache.airavata.model.experiment.ConfigurationData getExperimentConfigurationData() {
      return this.experimentConfigurationData;
    }

    public configureAndLaunchExperiment_args setExperimentConfigurationData(org.apache.airavata.model.experiment.ConfigurationData experimentConfigurationData) {
      this.experimentConfigurationData = experimentConfigurationData;
      return this;
    }

    public void unsetExperimentConfigurationData() {
      this.experimentConfigurationData = null;
    }

    /** Returns true if field experimentConfigurationData is set (has been assigned a value) and false otherwise */
    public boolean isSetExperimentConfigurationData() {
      return this.experimentConfigurationData != null;
    }

    public void setExperimentConfigurationDataIsSet(boolean value) {
      if (!value) {
        this.experimentConfigurationData = null;
      }
    }

    public String getAiravataCredStoreToken() {
      return this.airavataCredStoreToken;
    }

    public configureAndLaunchExperiment_args setAiravataCredStoreToken(String airavataCredStoreToken) {
      this.airavataCredStoreToken = airavataCredStoreToken;
      return this;
    }

    public void unsetAiravataCredStoreToken() {
      this.airavataCredStoreToken = null;
    }

    /** Returns true if field airavataCredStoreToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAiravataCredStoreToken() {
      return this.airavataCredStoreToken != null;
    }

    public void setAiravataCredStoreTokenIsSet(boolean value) {
      if (!value) {
        this.airavataCredStoreToken = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        if (value == null) {
          unsetAiravataExperimentId();
        } else {
          setAiravataExperimentId((String)value);
        }
        break;

      case EXPERIMENT_CONFIGURATION_DATA:
        if (value == null) {
          unsetExperimentConfigurationData();
        } else {
          setExperimentConfigurationData((org.apache.airavata.model.experiment.ConfigurationData)value);
        }
        break;

      case AIRAVATA_CRED_STORE_TOKEN:
        if (value == null) {
          unsetAiravataCredStoreToken();
        } else {
          setAiravataCredStoreToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        return getAiravataExperimentId();

      case EXPERIMENT_CONFIGURATION_DATA:
        return getExperimentConfigurationData();

      case AIRAVATA_CRED_STORE_TOKEN:
        return getAiravataCredStoreToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        return isSetAiravataExperimentId();
      case EXPERIMENT_CONFIGURATION_DATA:
        return isSetExperimentConfigurationData();
      case AIRAVATA_CRED_STORE_TOKEN:
        return isSetAiravataCredStoreToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof configureAndLaunchExperiment_args)
        return this.equals((configureAndLaunchExperiment_args)that);
      return false;
    }

    public boolean equals(configureAndLaunchExperiment_args that) {
      if (that == null)
        return false;

      boolean this_present_airavataExperimentId = true && this.isSetAiravataExperimentId();
      boolean that_present_airavataExperimentId = true && that.isSetAiravataExperimentId();
      if (this_present_airavataExperimentId || that_present_airavataExperimentId) {
        if (!(this_present_airavataExperimentId && that_present_airavataExperimentId))
          return false;
        if (!this.airavataExperimentId.equals(that.airavataExperimentId))
          return false;
      }

      boolean this_present_experimentConfigurationData = true && this.isSetExperimentConfigurationData();
      boolean that_present_experimentConfigurationData = true && that.isSetExperimentConfigurationData();
      if (this_present_experimentConfigurationData || that_present_experimentConfigurationData) {
        if (!(this_present_experimentConfigurationData && that_present_experimentConfigurationData))
          return false;
        if (!this.experimentConfigurationData.equals(that.experimentConfigurationData))
          return false;
      }

      boolean this_present_airavataCredStoreToken = true && this.isSetAiravataCredStoreToken();
      boolean that_present_airavataCredStoreToken = true && that.isSetAiravataCredStoreToken();
      if (this_present_airavataCredStoreToken || that_present_airavataCredStoreToken) {
        if (!(this_present_airavataCredStoreToken && that_present_airavataCredStoreToken))
          return false;
        if (!this.airavataCredStoreToken.equals(that.airavataCredStoreToken))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(configureAndLaunchExperiment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAiravataExperimentId()).compareTo(other.isSetAiravataExperimentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAiravataExperimentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.airavataExperimentId, other.airavataExperimentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExperimentConfigurationData()).compareTo(other.isSetExperimentConfigurationData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExperimentConfigurationData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experimentConfigurationData, other.experimentConfigurationData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAiravataCredStoreToken()).compareTo(other.isSetAiravataCredStoreToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAiravataCredStoreToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.airavataCredStoreToken, other.airavataCredStoreToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("configureAndLaunchExperiment_args(");
      boolean first = true;

      sb.append("airavataExperimentId:");
      if (this.airavataExperimentId == null) {
        sb.append("null");
      } else {
        sb.append(this.airavataExperimentId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("experimentConfigurationData:");
      if (this.experimentConfigurationData == null) {
        sb.append("null");
      } else {
        sb.append(this.experimentConfigurationData);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("airavataCredStoreToken:");
      if (this.airavataCredStoreToken == null) {
        sb.append("null");
      } else {
        sb.append(this.airavataCredStoreToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (experimentConfigurationData != null) {
        experimentConfigurationData.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class configureAndLaunchExperiment_argsStandardSchemeFactory implements SchemeFactory {
      public configureAndLaunchExperiment_argsStandardScheme getScheme() {
        return new configureAndLaunchExperiment_argsStandardScheme();
      }
    }

    private static class configureAndLaunchExperiment_argsStandardScheme extends StandardScheme<configureAndLaunchExperiment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, configureAndLaunchExperiment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AIRAVATA_EXPERIMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.airavataExperimentId = iprot.readString();
                struct.setAiravataExperimentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EXPERIMENT_CONFIGURATION_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.experimentConfigurationData = new org.apache.airavata.model.experiment.ConfigurationData();
                struct.experimentConfigurationData.read(iprot);
                struct.setExperimentConfigurationDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AIRAVATA_CRED_STORE_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.airavataCredStoreToken = iprot.readString();
                struct.setAiravataCredStoreTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, configureAndLaunchExperiment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.airavataExperimentId != null) {
          oprot.writeFieldBegin(AIRAVATA_EXPERIMENT_ID_FIELD_DESC);
          oprot.writeString(struct.airavataExperimentId);
          oprot.writeFieldEnd();
        }
        if (struct.experimentConfigurationData != null) {
          oprot.writeFieldBegin(EXPERIMENT_CONFIGURATION_DATA_FIELD_DESC);
          struct.experimentConfigurationData.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.airavataCredStoreToken != null) {
          oprot.writeFieldBegin(AIRAVATA_CRED_STORE_TOKEN_FIELD_DESC);
          oprot.writeString(struct.airavataCredStoreToken);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class configureAndLaunchExperiment_argsTupleSchemeFactory implements SchemeFactory {
      public configureAndLaunchExperiment_argsTupleScheme getScheme() {
        return new configureAndLaunchExperiment_argsTupleScheme();
      }
    }

    private static class configureAndLaunchExperiment_argsTupleScheme extends TupleScheme<configureAndLaunchExperiment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, configureAndLaunchExperiment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAiravataExperimentId()) {
          optionals.set(0);
        }
        if (struct.isSetExperimentConfigurationData()) {
          optionals.set(1);
        }
        if (struct.isSetAiravataCredStoreToken()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAiravataExperimentId()) {
          oprot.writeString(struct.airavataExperimentId);
        }
        if (struct.isSetExperimentConfigurationData()) {
          struct.experimentConfigurationData.write(oprot);
        }
        if (struct.isSetAiravataCredStoreToken()) {
          oprot.writeString(struct.airavataCredStoreToken);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, configureAndLaunchExperiment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.airavataExperimentId = iprot.readString();
          struct.setAiravataExperimentIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.experimentConfigurationData = new org.apache.airavata.model.experiment.ConfigurationData();
          struct.experimentConfigurationData.read(iprot);
          struct.setExperimentConfigurationDataIsSet(true);
        }
        if (incoming.get(2)) {
          struct.airavataCredStoreToken = iprot.readString();
          struct.setAiravataCredStoreTokenIsSet(true);
        }
      }
    }

  }

  public static class configureAndLaunchExperiment_result implements org.apache.thrift.TBase<configureAndLaunchExperiment_result, configureAndLaunchExperiment_result._Fields>, java.io.Serializable, Cloneable, Comparable<configureAndLaunchExperiment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("configureAndLaunchExperiment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ENF_FIELD_DESC = new org.apache.thrift.protocol.TField("enf", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new configureAndLaunchExperiment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new configureAndLaunchExperiment_resultTupleSchemeFactory());
    }

    public String success; // required
    public org.apache.airavata.api.error.InvalidRequestException ire; // required
    public org.apache.airavata.api.error.ExperimentNotFoundException enf; // required
    public org.apache.airavata.api.error.AiravataClientException ace; // required
    public org.apache.airavata.api.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ENF((short)2, "enf"),
      ACE((short)3, "ace"),
      ASE((short)4, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ENF
            return ENF;
          case 3: // ACE
            return ACE;
          case 4: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ENF, new org.apache.thrift.meta_data.FieldMetaData("enf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(configureAndLaunchExperiment_result.class, metaDataMap);
    }

    public configureAndLaunchExperiment_result() {
    }

    public configureAndLaunchExperiment_result(
      String success,
      org.apache.airavata.api.error.InvalidRequestException ire,
      org.apache.airavata.api.error.ExperimentNotFoundException enf,
      org.apache.airavata.api.error.AiravataClientException ace,
      org.apache.airavata.api.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.enf = enf;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public configureAndLaunchExperiment_result(configureAndLaunchExperiment_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.api.error.InvalidRequestException(other.ire);
      }
      if (other.isSetEnf()) {
        this.enf = new org.apache.airavata.api.error.ExperimentNotFoundException(other.enf);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.api.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.api.error.AiravataSystemException(other.ase);
      }
    }

    public configureAndLaunchExperiment_result deepCopy() {
      return new configureAndLaunchExperiment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.enf = null;
      this.ace = null;
      this.ase = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public configureAndLaunchExperiment_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.api.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public configureAndLaunchExperiment_result setIre(org.apache.airavata.api.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.api.error.ExperimentNotFoundException getEnf() {
      return this.enf;
    }

    public configureAndLaunchExperiment_result setEnf(org.apache.airavata.api.error.ExperimentNotFoundException enf) {
      this.enf = enf;
      return this;
    }

    public void unsetEnf() {
      this.enf = null;
    }

    /** Returns true if field enf is set (has been assigned a value) and false otherwise */
    public boolean isSetEnf() {
      return this.enf != null;
    }

    public void setEnfIsSet(boolean value) {
      if (!value) {
        this.enf = null;
      }
    }

    public org.apache.airavata.api.error.AiravataClientException getAce() {
      return this.ace;
    }

    public configureAndLaunchExperiment_result setAce(org.apache.airavata.api.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.api.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public configureAndLaunchExperiment_result setAse(org.apache.airavata.api.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.api.error.InvalidRequestException)value);
        }
        break;

      case ENF:
        if (value == null) {
          unsetEnf();
        } else {
          setEnf((org.apache.airavata.api.error.ExperimentNotFoundException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.api.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.api.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ENF:
        return getEnf();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ENF:
        return isSetEnf();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof configureAndLaunchExperiment_result)
        return this.equals((configureAndLaunchExperiment_result)that);
      return false;
    }

    public boolean equals(configureAndLaunchExperiment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_enf = true && this.isSetEnf();
      boolean that_present_enf = true && that.isSetEnf();
      if (this_present_enf || that_present_enf) {
        if (!(this_present_enf && that_present_enf))
          return false;
        if (!this.enf.equals(that.enf))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(configureAndLaunchExperiment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnf()).compareTo(other.isSetEnf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enf, other.enf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("configureAndLaunchExperiment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("enf:");
      if (this.enf == null) {
        sb.append("null");
      } else {
        sb.append(this.enf);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class configureAndLaunchExperiment_resultStandardSchemeFactory implements SchemeFactory {
      public configureAndLaunchExperiment_resultStandardScheme getScheme() {
        return new configureAndLaunchExperiment_resultStandardScheme();
      }
    }

    private static class configureAndLaunchExperiment_resultStandardScheme extends StandardScheme<configureAndLaunchExperiment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, configureAndLaunchExperiment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.api.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ENF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.enf = new org.apache.airavata.api.error.ExperimentNotFoundException();
                struct.enf.read(iprot);
                struct.setEnfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.api.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.api.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, configureAndLaunchExperiment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.enf != null) {
          oprot.writeFieldBegin(ENF_FIELD_DESC);
          struct.enf.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class configureAndLaunchExperiment_resultTupleSchemeFactory implements SchemeFactory {
      public configureAndLaunchExperiment_resultTupleScheme getScheme() {
        return new configureAndLaunchExperiment_resultTupleScheme();
      }
    }

    private static class configureAndLaunchExperiment_resultTupleScheme extends TupleScheme<configureAndLaunchExperiment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, configureAndLaunchExperiment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetEnf()) {
          optionals.set(2);
        }
        if (struct.isSetAce()) {
          optionals.set(3);
        }
        if (struct.isSetAse()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetEnf()) {
          struct.enf.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, configureAndLaunchExperiment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.api.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.enf = new org.apache.airavata.api.error.ExperimentNotFoundException();
          struct.enf.read(iprot);
          struct.setEnfIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ace = new org.apache.airavata.api.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(4)) {
          struct.ase = new org.apache.airavata.api.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class cloneExperimentConfiguration_args implements org.apache.thrift.TBase<cloneExperimentConfiguration_args, cloneExperimentConfiguration_args._Fields>, java.io.Serializable, Cloneable, Comparable<cloneExperimentConfiguration_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cloneExperimentConfiguration_args");

    private static final org.apache.thrift.protocol.TField AIRAVATA_EXPERIMENT_ID_TO_BE_CLONED_FIELD_DESC = new org.apache.thrift.protocol.TField("airavataExperimentIdToBeCloned", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BASIC_EXPERIMENT_METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("basicExperimentMetadata", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cloneExperimentConfiguration_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cloneExperimentConfiguration_argsTupleSchemeFactory());
    }

    public String airavataExperimentIdToBeCloned; // required
    public org.apache.airavata.model.experiment.BasicMetadata basicExperimentMetadata; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AIRAVATA_EXPERIMENT_ID_TO_BE_CLONED((short)1, "airavataExperimentIdToBeCloned"),
      BASIC_EXPERIMENT_METADATA((short)2, "basicExperimentMetadata");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AIRAVATA_EXPERIMENT_ID_TO_BE_CLONED
            return AIRAVATA_EXPERIMENT_ID_TO_BE_CLONED;
          case 2: // BASIC_EXPERIMENT_METADATA
            return BASIC_EXPERIMENT_METADATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AIRAVATA_EXPERIMENT_ID_TO_BE_CLONED, new org.apache.thrift.meta_data.FieldMetaData("airavataExperimentIdToBeCloned", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BASIC_EXPERIMENT_METADATA, new org.apache.thrift.meta_data.FieldMetaData("basicExperimentMetadata", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.experiment.BasicMetadata.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cloneExperimentConfiguration_args.class, metaDataMap);
    }

    public cloneExperimentConfiguration_args() {
    }

    public cloneExperimentConfiguration_args(
      String airavataExperimentIdToBeCloned,
      org.apache.airavata.model.experiment.BasicMetadata basicExperimentMetadata)
    {
      this();
      this.airavataExperimentIdToBeCloned = airavataExperimentIdToBeCloned;
      this.basicExperimentMetadata = basicExperimentMetadata;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cloneExperimentConfiguration_args(cloneExperimentConfiguration_args other) {
      if (other.isSetAiravataExperimentIdToBeCloned()) {
        this.airavataExperimentIdToBeCloned = other.airavataExperimentIdToBeCloned;
      }
      if (other.isSetBasicExperimentMetadata()) {
        this.basicExperimentMetadata = new org.apache.airavata.model.experiment.BasicMetadata(other.basicExperimentMetadata);
      }
    }

    public cloneExperimentConfiguration_args deepCopy() {
      return new cloneExperimentConfiguration_args(this);
    }

    @Override
    public void clear() {
      this.airavataExperimentIdToBeCloned = null;
      this.basicExperimentMetadata = null;
    }

    public String getAiravataExperimentIdToBeCloned() {
      return this.airavataExperimentIdToBeCloned;
    }

    public cloneExperimentConfiguration_args setAiravataExperimentIdToBeCloned(String airavataExperimentIdToBeCloned) {
      this.airavataExperimentIdToBeCloned = airavataExperimentIdToBeCloned;
      return this;
    }

    public void unsetAiravataExperimentIdToBeCloned() {
      this.airavataExperimentIdToBeCloned = null;
    }

    /** Returns true if field airavataExperimentIdToBeCloned is set (has been assigned a value) and false otherwise */
    public boolean isSetAiravataExperimentIdToBeCloned() {
      return this.airavataExperimentIdToBeCloned != null;
    }

    public void setAiravataExperimentIdToBeClonedIsSet(boolean value) {
      if (!value) {
        this.airavataExperimentIdToBeCloned = null;
      }
    }

    public org.apache.airavata.model.experiment.BasicMetadata getBasicExperimentMetadata() {
      return this.basicExperimentMetadata;
    }

    public cloneExperimentConfiguration_args setBasicExperimentMetadata(org.apache.airavata.model.experiment.BasicMetadata basicExperimentMetadata) {
      this.basicExperimentMetadata = basicExperimentMetadata;
      return this;
    }

    public void unsetBasicExperimentMetadata() {
      this.basicExperimentMetadata = null;
    }

    /** Returns true if field basicExperimentMetadata is set (has been assigned a value) and false otherwise */
    public boolean isSetBasicExperimentMetadata() {
      return this.basicExperimentMetadata != null;
    }

    public void setBasicExperimentMetadataIsSet(boolean value) {
      if (!value) {
        this.basicExperimentMetadata = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AIRAVATA_EXPERIMENT_ID_TO_BE_CLONED:
        if (value == null) {
          unsetAiravataExperimentIdToBeCloned();
        } else {
          setAiravataExperimentIdToBeCloned((String)value);
        }
        break;

      case BASIC_EXPERIMENT_METADATA:
        if (value == null) {
          unsetBasicExperimentMetadata();
        } else {
          setBasicExperimentMetadata((org.apache.airavata.model.experiment.BasicMetadata)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AIRAVATA_EXPERIMENT_ID_TO_BE_CLONED:
        return getAiravataExperimentIdToBeCloned();

      case BASIC_EXPERIMENT_METADATA:
        return getBasicExperimentMetadata();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AIRAVATA_EXPERIMENT_ID_TO_BE_CLONED:
        return isSetAiravataExperimentIdToBeCloned();
      case BASIC_EXPERIMENT_METADATA:
        return isSetBasicExperimentMetadata();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cloneExperimentConfiguration_args)
        return this.equals((cloneExperimentConfiguration_args)that);
      return false;
    }

    public boolean equals(cloneExperimentConfiguration_args that) {
      if (that == null)
        return false;

      boolean this_present_airavataExperimentIdToBeCloned = true && this.isSetAiravataExperimentIdToBeCloned();
      boolean that_present_airavataExperimentIdToBeCloned = true && that.isSetAiravataExperimentIdToBeCloned();
      if (this_present_airavataExperimentIdToBeCloned || that_present_airavataExperimentIdToBeCloned) {
        if (!(this_present_airavataExperimentIdToBeCloned && that_present_airavataExperimentIdToBeCloned))
          return false;
        if (!this.airavataExperimentIdToBeCloned.equals(that.airavataExperimentIdToBeCloned))
          return false;
      }

      boolean this_present_basicExperimentMetadata = true && this.isSetBasicExperimentMetadata();
      boolean that_present_basicExperimentMetadata = true && that.isSetBasicExperimentMetadata();
      if (this_present_basicExperimentMetadata || that_present_basicExperimentMetadata) {
        if (!(this_present_basicExperimentMetadata && that_present_basicExperimentMetadata))
          return false;
        if (!this.basicExperimentMetadata.equals(that.basicExperimentMetadata))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(cloneExperimentConfiguration_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAiravataExperimentIdToBeCloned()).compareTo(other.isSetAiravataExperimentIdToBeCloned());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAiravataExperimentIdToBeCloned()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.airavataExperimentIdToBeCloned, other.airavataExperimentIdToBeCloned);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBasicExperimentMetadata()).compareTo(other.isSetBasicExperimentMetadata());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBasicExperimentMetadata()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.basicExperimentMetadata, other.basicExperimentMetadata);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cloneExperimentConfiguration_args(");
      boolean first = true;

      sb.append("airavataExperimentIdToBeCloned:");
      if (this.airavataExperimentIdToBeCloned == null) {
        sb.append("null");
      } else {
        sb.append(this.airavataExperimentIdToBeCloned);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("basicExperimentMetadata:");
      if (this.basicExperimentMetadata == null) {
        sb.append("null");
      } else {
        sb.append(this.basicExperimentMetadata);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (basicExperimentMetadata != null) {
        basicExperimentMetadata.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cloneExperimentConfiguration_argsStandardSchemeFactory implements SchemeFactory {
      public cloneExperimentConfiguration_argsStandardScheme getScheme() {
        return new cloneExperimentConfiguration_argsStandardScheme();
      }
    }

    private static class cloneExperimentConfiguration_argsStandardScheme extends StandardScheme<cloneExperimentConfiguration_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cloneExperimentConfiguration_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AIRAVATA_EXPERIMENT_ID_TO_BE_CLONED
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.airavataExperimentIdToBeCloned = iprot.readString();
                struct.setAiravataExperimentIdToBeClonedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BASIC_EXPERIMENT_METADATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.basicExperimentMetadata = new org.apache.airavata.model.experiment.BasicMetadata();
                struct.basicExperimentMetadata.read(iprot);
                struct.setBasicExperimentMetadataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cloneExperimentConfiguration_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.airavataExperimentIdToBeCloned != null) {
          oprot.writeFieldBegin(AIRAVATA_EXPERIMENT_ID_TO_BE_CLONED_FIELD_DESC);
          oprot.writeString(struct.airavataExperimentIdToBeCloned);
          oprot.writeFieldEnd();
        }
        if (struct.basicExperimentMetadata != null) {
          oprot.writeFieldBegin(BASIC_EXPERIMENT_METADATA_FIELD_DESC);
          struct.basicExperimentMetadata.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cloneExperimentConfiguration_argsTupleSchemeFactory implements SchemeFactory {
      public cloneExperimentConfiguration_argsTupleScheme getScheme() {
        return new cloneExperimentConfiguration_argsTupleScheme();
      }
    }

    private static class cloneExperimentConfiguration_argsTupleScheme extends TupleScheme<cloneExperimentConfiguration_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cloneExperimentConfiguration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAiravataExperimentIdToBeCloned()) {
          optionals.set(0);
        }
        if (struct.isSetBasicExperimentMetadata()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAiravataExperimentIdToBeCloned()) {
          oprot.writeString(struct.airavataExperimentIdToBeCloned);
        }
        if (struct.isSetBasicExperimentMetadata()) {
          struct.basicExperimentMetadata.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cloneExperimentConfiguration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.airavataExperimentIdToBeCloned = iprot.readString();
          struct.setAiravataExperimentIdToBeClonedIsSet(true);
        }
        if (incoming.get(1)) {
          struct.basicExperimentMetadata = new org.apache.airavata.model.experiment.BasicMetadata();
          struct.basicExperimentMetadata.read(iprot);
          struct.setBasicExperimentMetadataIsSet(true);
        }
      }
    }

  }

  public static class cloneExperimentConfiguration_result implements org.apache.thrift.TBase<cloneExperimentConfiguration_result, cloneExperimentConfiguration_result._Fields>, java.io.Serializable, Cloneable, Comparable<cloneExperimentConfiguration_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cloneExperimentConfiguration_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ENF_FIELD_DESC = new org.apache.thrift.protocol.TField("enf", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cloneExperimentConfiguration_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cloneExperimentConfiguration_resultTupleSchemeFactory());
    }

    public String success; // required
    public org.apache.airavata.api.error.InvalidRequestException ire; // required
    public org.apache.airavata.api.error.ExperimentNotFoundException enf; // required
    public org.apache.airavata.api.error.AiravataClientException ace; // required
    public org.apache.airavata.api.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ENF((short)2, "enf"),
      ACE((short)3, "ace"),
      ASE((short)4, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ENF
            return ENF;
          case 3: // ACE
            return ACE;
          case 4: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ENF, new org.apache.thrift.meta_data.FieldMetaData("enf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cloneExperimentConfiguration_result.class, metaDataMap);
    }

    public cloneExperimentConfiguration_result() {
    }

    public cloneExperimentConfiguration_result(
      String success,
      org.apache.airavata.api.error.InvalidRequestException ire,
      org.apache.airavata.api.error.ExperimentNotFoundException enf,
      org.apache.airavata.api.error.AiravataClientException ace,
      org.apache.airavata.api.error.AiravataSystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.enf = enf;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cloneExperimentConfiguration_result(cloneExperimentConfiguration_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.api.error.InvalidRequestException(other.ire);
      }
      if (other.isSetEnf()) {
        this.enf = new org.apache.airavata.api.error.ExperimentNotFoundException(other.enf);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.api.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.api.error.AiravataSystemException(other.ase);
      }
    }

    public cloneExperimentConfiguration_result deepCopy() {
      return new cloneExperimentConfiguration_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.enf = null;
      this.ace = null;
      this.ase = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public cloneExperimentConfiguration_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.api.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public cloneExperimentConfiguration_result setIre(org.apache.airavata.api.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.api.error.ExperimentNotFoundException getEnf() {
      return this.enf;
    }

    public cloneExperimentConfiguration_result setEnf(org.apache.airavata.api.error.ExperimentNotFoundException enf) {
      this.enf = enf;
      return this;
    }

    public void unsetEnf() {
      this.enf = null;
    }

    /** Returns true if field enf is set (has been assigned a value) and false otherwise */
    public boolean isSetEnf() {
      return this.enf != null;
    }

    public void setEnfIsSet(boolean value) {
      if (!value) {
        this.enf = null;
      }
    }

    public org.apache.airavata.api.error.AiravataClientException getAce() {
      return this.ace;
    }

    public cloneExperimentConfiguration_result setAce(org.apache.airavata.api.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.api.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public cloneExperimentConfiguration_result setAse(org.apache.airavata.api.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.api.error.InvalidRequestException)value);
        }
        break;

      case ENF:
        if (value == null) {
          unsetEnf();
        } else {
          setEnf((org.apache.airavata.api.error.ExperimentNotFoundException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.api.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.api.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ENF:
        return getEnf();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ENF:
        return isSetEnf();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cloneExperimentConfiguration_result)
        return this.equals((cloneExperimentConfiguration_result)that);
      return false;
    }

    public boolean equals(cloneExperimentConfiguration_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_enf = true && this.isSetEnf();
      boolean that_present_enf = true && that.isSetEnf();
      if (this_present_enf || that_present_enf) {
        if (!(this_present_enf && that_present_enf))
          return false;
        if (!this.enf.equals(that.enf))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(cloneExperimentConfiguration_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnf()).compareTo(other.isSetEnf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enf, other.enf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cloneExperimentConfiguration_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("enf:");
      if (this.enf == null) {
        sb.append("null");
      } else {
        sb.append(this.enf);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cloneExperimentConfiguration_resultStandardSchemeFactory implements SchemeFactory {
      public cloneExperimentConfiguration_resultStandardScheme getScheme() {
        return new cloneExperimentConfiguration_resultStandardScheme();
      }
    }

    private static class cloneExperimentConfiguration_resultStandardScheme extends StandardScheme<cloneExperimentConfiguration_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cloneExperimentConfiguration_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.api.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ENF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.enf = new org.apache.airavata.api.error.ExperimentNotFoundException();
                struct.enf.read(iprot);
                struct.setEnfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.api.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.api.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cloneExperimentConfiguration_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.enf != null) {
          oprot.writeFieldBegin(ENF_FIELD_DESC);
          struct.enf.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cloneExperimentConfiguration_resultTupleSchemeFactory implements SchemeFactory {
      public cloneExperimentConfiguration_resultTupleScheme getScheme() {
        return new cloneExperimentConfiguration_resultTupleScheme();
      }
    }

    private static class cloneExperimentConfiguration_resultTupleScheme extends TupleScheme<cloneExperimentConfiguration_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cloneExperimentConfiguration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetEnf()) {
          optionals.set(2);
        }
        if (struct.isSetAce()) {
          optionals.set(3);
        }
        if (struct.isSetAse()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetEnf()) {
          struct.enf.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cloneExperimentConfiguration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.api.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.enf = new org.apache.airavata.api.error.ExperimentNotFoundException();
          struct.enf.read(iprot);
          struct.setEnfIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ace = new org.apache.airavata.api.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(4)) {
          struct.ase = new org.apache.airavata.api.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class terminateExperiment_args implements org.apache.thrift.TBase<terminateExperiment_args, terminateExperiment_args._Fields>, java.io.Serializable, Cloneable, Comparable<terminateExperiment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("terminateExperiment_args");

    private static final org.apache.thrift.protocol.TField AIRAVATA_EXPERIMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("airavataExperimentId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new terminateExperiment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new terminateExperiment_argsTupleSchemeFactory());
    }

    public String airavataExperimentId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AIRAVATA_EXPERIMENT_ID((short)1, "airavataExperimentId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AIRAVATA_EXPERIMENT_ID
            return AIRAVATA_EXPERIMENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AIRAVATA_EXPERIMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("airavataExperimentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(terminateExperiment_args.class, metaDataMap);
    }

    public terminateExperiment_args() {
    }

    public terminateExperiment_args(
      String airavataExperimentId)
    {
      this();
      this.airavataExperimentId = airavataExperimentId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public terminateExperiment_args(terminateExperiment_args other) {
      if (other.isSetAiravataExperimentId()) {
        this.airavataExperimentId = other.airavataExperimentId;
      }
    }

    public terminateExperiment_args deepCopy() {
      return new terminateExperiment_args(this);
    }

    @Override
    public void clear() {
      this.airavataExperimentId = null;
    }

    public String getAiravataExperimentId() {
      return this.airavataExperimentId;
    }

    public terminateExperiment_args setAiravataExperimentId(String airavataExperimentId) {
      this.airavataExperimentId = airavataExperimentId;
      return this;
    }

    public void unsetAiravataExperimentId() {
      this.airavataExperimentId = null;
    }

    /** Returns true if field airavataExperimentId is set (has been assigned a value) and false otherwise */
    public boolean isSetAiravataExperimentId() {
      return this.airavataExperimentId != null;
    }

    public void setAiravataExperimentIdIsSet(boolean value) {
      if (!value) {
        this.airavataExperimentId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        if (value == null) {
          unsetAiravataExperimentId();
        } else {
          setAiravataExperimentId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        return getAiravataExperimentId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AIRAVATA_EXPERIMENT_ID:
        return isSetAiravataExperimentId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof terminateExperiment_args)
        return this.equals((terminateExperiment_args)that);
      return false;
    }

    public boolean equals(terminateExperiment_args that) {
      if (that == null)
        return false;

      boolean this_present_airavataExperimentId = true && this.isSetAiravataExperimentId();
      boolean that_present_airavataExperimentId = true && that.isSetAiravataExperimentId();
      if (this_present_airavataExperimentId || that_present_airavataExperimentId) {
        if (!(this_present_airavataExperimentId && that_present_airavataExperimentId))
          return false;
        if (!this.airavataExperimentId.equals(that.airavataExperimentId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(terminateExperiment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAiravataExperimentId()).compareTo(other.isSetAiravataExperimentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAiravataExperimentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.airavataExperimentId, other.airavataExperimentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("terminateExperiment_args(");
      boolean first = true;

      sb.append("airavataExperimentId:");
      if (this.airavataExperimentId == null) {
        sb.append("null");
      } else {
        sb.append(this.airavataExperimentId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class terminateExperiment_argsStandardSchemeFactory implements SchemeFactory {
      public terminateExperiment_argsStandardScheme getScheme() {
        return new terminateExperiment_argsStandardScheme();
      }
    }

    private static class terminateExperiment_argsStandardScheme extends StandardScheme<terminateExperiment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, terminateExperiment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AIRAVATA_EXPERIMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.airavataExperimentId = iprot.readString();
                struct.setAiravataExperimentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, terminateExperiment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.airavataExperimentId != null) {
          oprot.writeFieldBegin(AIRAVATA_EXPERIMENT_ID_FIELD_DESC);
          oprot.writeString(struct.airavataExperimentId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class terminateExperiment_argsTupleSchemeFactory implements SchemeFactory {
      public terminateExperiment_argsTupleScheme getScheme() {
        return new terminateExperiment_argsTupleScheme();
      }
    }

    private static class terminateExperiment_argsTupleScheme extends TupleScheme<terminateExperiment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, terminateExperiment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAiravataExperimentId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAiravataExperimentId()) {
          oprot.writeString(struct.airavataExperimentId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, terminateExperiment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.airavataExperimentId = iprot.readString();
          struct.setAiravataExperimentIdIsSet(true);
        }
      }
    }

  }

  public static class terminateExperiment_result implements org.apache.thrift.TBase<terminateExperiment_result, terminateExperiment_result._Fields>, java.io.Serializable, Cloneable, Comparable<terminateExperiment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("terminateExperiment_result");

    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ENF_FIELD_DESC = new org.apache.thrift.protocol.TField("enf", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new terminateExperiment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new terminateExperiment_resultTupleSchemeFactory());
    }

    public org.apache.airavata.api.error.InvalidRequestException ire; // required
    public org.apache.airavata.api.error.ExperimentNotFoundException enf; // required
    public org.apache.airavata.api.error.AiravataClientException ace; // required
    public org.apache.airavata.api.error.AiravataSystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IRE((short)1, "ire"),
      ENF((short)2, "enf"),
      ACE((short)3, "ace"),
      ASE((short)4, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IRE
            return IRE;
          case 2: // ENF
            return ENF;
          case 3: // ACE
            return ACE;
          case 4: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ENF, new org.apache.thrift.meta_data.FieldMetaData("enf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(terminateExperiment_result.class, metaDataMap);
    }

    public terminateExperiment_result() {
    }

    public terminateExperiment_result(
      org.apache.airavata.api.error.InvalidRequestException ire,
      org.apache.airavata.api.error.ExperimentNotFoundException enf,
      org.apache.airavata.api.error.AiravataClientException ace,
      org.apache.airavata.api.error.AiravataSystemException ase)
    {
      this();
      this.ire = ire;
      this.enf = enf;
      this.ace = ace;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public terminateExperiment_result(terminateExperiment_result other) {
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.api.error.InvalidRequestException(other.ire);
      }
      if (other.isSetEnf()) {
        this.enf = new org.apache.airavata.api.error.ExperimentNotFoundException(other.enf);
      }
      if (other.isSetAce()) {
        this.ace = new org.apache.airavata.api.error.AiravataClientException(other.ace);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.api.error.AiravataSystemException(other.ase);
      }
    }

    public terminateExperiment_result deepCopy() {
      return new terminateExperiment_result(this);
    }

    @Override
    public void clear() {
      this.ire = null;
      this.enf = null;
      this.ace = null;
      this.ase = null;
    }

    public org.apache.airavata.api.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public terminateExperiment_result setIre(org.apache.airavata.api.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.api.error.ExperimentNotFoundException getEnf() {
      return this.enf;
    }

    public terminateExperiment_result setEnf(org.apache.airavata.api.error.ExperimentNotFoundException enf) {
      this.enf = enf;
      return this;
    }

    public void unsetEnf() {
      this.enf = null;
    }

    /** Returns true if field enf is set (has been assigned a value) and false otherwise */
    public boolean isSetEnf() {
      return this.enf != null;
    }

    public void setEnfIsSet(boolean value) {
      if (!value) {
        this.enf = null;
      }
    }

    public org.apache.airavata.api.error.AiravataClientException getAce() {
      return this.ace;
    }

    public terminateExperiment_result setAce(org.apache.airavata.api.error.AiravataClientException ace) {
      this.ace = ace;
      return this;
    }

    public void unsetAce() {
      this.ace = null;
    }

    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
    public boolean isSetAce() {
      return this.ace != null;
    }

    public void setAceIsSet(boolean value) {
      if (!value) {
        this.ace = null;
      }
    }

    public org.apache.airavata.api.error.AiravataSystemException getAse() {
      return this.ase;
    }

    public terminateExperiment_result setAse(org.apache.airavata.api.error.AiravataSystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.api.error.InvalidRequestException)value);
        }
        break;

      case ENF:
        if (value == null) {
          unsetEnf();
        } else {
          setEnf((org.apache.airavata.api.error.ExperimentNotFoundException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.api.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.api.error.AiravataSystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IRE:
        return getIre();

      case ENF:
        return getEnf();

      case ACE:
        return getAce();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IRE:
        return isSetIre();
      case ENF:
        return isSetEnf();
      case ACE:
        return isSetAce();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof terminateExperiment_result)
        return this.equals((terminateExperiment_result)that);
      return false;
    }

    public boolean equals(terminateExperiment_result that) {
      if (that == null)
        return false;

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_enf = true && this.isSetEnf();
      boolean that_present_enf = true && that.isSetEnf();
      if (this_present_enf || that_present_enf) {
        if (!(this_present_enf && that_present_enf))
          return false;
        if (!this.enf.equals(that.enf))
          return false;
      }

      boolean this_present_ace = true && this.isSetAce();
      boolean that_present_ace = true && that.isSetAce();
      if (this_present_ace || that_present_ace) {
        if (!(this_present_ace && that_present_ace))
          return false;
        if (!this.ace.equals(that.ace))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(terminateExperiment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnf()).compareTo(other.isSetEnf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enf, other.enf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("terminateExperiment_result(");
      boolean first = true;

      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("enf:");
      if (this.enf == null) {
        sb.append("null");
      } else {
        sb.append(this.enf);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ace:");
      if (this.ace == null) {
        sb.append("null");
      } else {
        sb.append(this.ace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class terminateExperiment_resultStandardSchemeFactory implements SchemeFactory {
      public terminateExperiment_resultStandardScheme getScheme() {
        return new terminateExperiment_resultStandardScheme();
      }
    }

    private static class terminateExperiment_resultStandardScheme extends StandardScheme<terminateExperiment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, terminateExperiment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.api.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ENF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.enf = new org.apache.airavata.api.error.ExperimentNotFoundException();
                struct.enf.read(iprot);
                struct.setEnfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ace = new org.apache.airavata.api.error.AiravataClientException();
                struct.ace.read(iprot);
                struct.setAceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.api.error.AiravataSystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, terminateExperiment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.enf != null) {
          oprot.writeFieldBegin(ENF_FIELD_DESC);
          struct.enf.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ace != null) {
          oprot.writeFieldBegin(ACE_FIELD_DESC);
          struct.ace.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class terminateExperiment_resultTupleSchemeFactory implements SchemeFactory {
      public terminateExperiment_resultTupleScheme getScheme() {
        return new terminateExperiment_resultTupleScheme();
      }
    }

    private static class terminateExperiment_resultTupleScheme extends TupleScheme<terminateExperiment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, terminateExperiment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIre()) {
          optionals.set(0);
        }
        if (struct.isSetEnf()) {
          optionals.set(1);
        }
        if (struct.isSetAce()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetEnf()) {
          struct.enf.write(oprot);
        }
        if (struct.isSetAce()) {
          struct.ace.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, terminateExperiment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.ire = new org.apache.airavata.api.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(1)) {
          struct.enf = new org.apache.airavata.api.error.ExperimentNotFoundException();
          struct.enf.read(iprot);
          struct.setEnfIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ace = new org.apache.airavata.api.error.AiravataClientException();
          struct.ace.read(iprot);
          struct.setAceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.api.error.AiravataSystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

}
