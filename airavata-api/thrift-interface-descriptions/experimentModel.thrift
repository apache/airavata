/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */

namespace java org.apache.airavata.model.experiment
namespace php Airavata.Model.Experiment

/*
 * This file describes the definitions of the Airavata Experiment Data Structures. Each of the
 *   language specific Airavata Client SDK's will translate this neutral data model into an
 *   appropriate form for passing to the Airavata Server Execution API Calls.
 * 
 * The Experiment data model is divided into 6 categories: experiment metadata, experiment configuration
 *   data, experiment generated data, experiment monitoring data, provenance data and error handling data.
 *
 *   Experiment Metadata:
 *     this structure holds the owner of the experiment, name, description, creation and last update times,
 *     last known status, and if is private to the user or shared publicly. 
 *    FIXME: To start with, we will not define this but populate it inferring data from other structures. This
 *    structure needs revisiting once the API gets used.
 * 
 *  Experiment Configuration Data:
 *     this structure will contain all user provided configuration data.
 * 
 *  Experiment Generated Data:
 *     this structure describes all intermediate and output data generated by executing the experiment.
 * 
 *  Experiment Monitoring Data:
 *     this structure contains fine grained experiment status information.
 *
 *  Experiment Summary Data: 
 *     this is derived information from all experiment objects to provide a quick summary.
 *
*/

enum ExperimentState {
    CREATED,
    VALIDATED,
    SCHEDULED,
    LAUNCHED,
    EXECUTING,
    CANCELED,
    COMPLETED,
    FAILED,
    UNKNOWN
}

struct ExperimentStatus {
    1: required ExperimentState experimentState,
    2: optional i64 timeOfStateChange
}

enum WorkflowNodeState {
    INVOKED,
    EXECUTING,
    CANCELED,
    COMPLETED,
    FAILED,
    UNKNOWN
}

struct WorkflowNodeStatus {
    1: required WorkflowNodeState workflowNodeState,
    2: optional i64 timeOfStateChange
}

enum ExecutionState {
    AUTHENTICATED,
    PRE_PROCESSING,
    CONFIGURING_WORKSPACE,
    INPUT_DATA_STAGING,
    OUTPUT_DATA_STAGING,
    POST_PROCESSING,
    CANCELED,
    COMPLETED,
    FAILED,
    UNKNOWN
}

struct ExecutionStatus {
    1: required ExecutionState executionState,
    2: optional i64 timeOfStateChange
}

enum JobState {
    SUBMITTED,
    QUEUED,
    ACTIVE,
    COMPLETE,
    CANCELED,
    FAILED,
    HELD,
    SUSPENDED,
    UNKNOWN
}

struct JobStatus {
    1: required JobState jobState,
    2: optional i64 timeOfStateChange
}

enum TransferState {
    SUBMITTED,
    QUEUED,
    ACTIVE,
    COMPLETE,
    CANCELED,
    FAILED,
    HELD,
    SUSPENDED,
    UNKNOWN
}

struct TransferStatus {
    1: required TransferState transferState,
    2: optional i64 timeOfStateChange
}

struct ApplicationStatus {
    1: required ApplicationState applicationState,
    2: optional i64 timeOfStateChange
}

enum ActionableGroup {
    RESOURCE_ADMINS,
    AIRAVATA_ADMINS,
    GATEWAYS_ADMINS,
    USER,
    CANNOT_BE_DETERMINED
}

enum ErrorCategory {
    FILE_SYSTEM_FAILURE,
    APPLICATION_FAILURE,
    RESOURCE_NODE_FAILURE,
    DISK_FULL,
    INSUFFICIENT_ALLOCATION,
    SYSTEM_MAINTENANCE,
    AIRAVATA_INTERNAL_ERROR,
    CANNOT_BE_DETERMINED
}

enum CorrectiveAction {
    RETRY_SUBMISSION,
    CONTACT_SUPPORT,
    CANNOT_BE_DETERMINED
}

/**
* A structure  hold experiment input output
*
*/
struct DataObjectType {
    1: required string key,
    2: optional string type,
    3: optional string metaData,
    3: optional string value
}

/**
 * A structure holding the Computational Resource Scheduling.
 *
*/
struct ComputationalResourceScheduling {
    1: optional string resourceHostId,
    2: optional i32 totalCPUCount,
    3: optional i32 nodeCount,
    4: optional i32 numberOfThreads,
    5: optional string queueName,
    6: optional i32 wallTimeLimit,
    7: optional i32 jobStartTime,
    8: optional i32 totalPhysicalMemory,
    9: optional string ComputationalProjectAccount
}

/**
 * A structure holding specified input data handling.
 *
*/
struct AdvancedInputDataHandling {
    1: optional bool stageInputFilesToWorkingDir = 0,
    2: optional string parentWorkingDirectory,
    3: optional string uniqueWorkingDirectory,
    4: optional bool cleanUpWorkingDirAfterJob = 0
}

/**
 * A structure holding specified output data handling.
 *
*/
struct AdvancedOutputDataHandling {
    2: optional string outputDataDir,
    3: optional string dataRegistryURL,
    4: optional bool persistOutputData = 1
}

/**
 * A structure holding Quality of Service Parameters.
 *
*/
struct QualityOfServiceParams {
    1: optional string startExecutionAt,
    2: optional string executeBefore,
    3: optional i32 numberofRetries
}

/**
 * A structure holding the experiment configuration.
 *
 *
*/
struct UserConfigurationData {
    1: required bool airavataAutoSchedule = 0,
    2: required bool overrideManualScheduledParams = 0,
    3: optional bool shareExperimentPublicly = 0,
    4: optional ComputationalResourceScheduling computationalResourceScheduling,
    5: optional AdvancedInputDataHandling advanceInputDataHandling,
    6: optional AdvancedOutputDataHandling advanceOutputDataHandling,
    7: optional QualityOfServiceParams qosParams
}

struct ErrorDetails {
    1: required string errorID = "DO_NO_SET_BY_CLIENT",
    2: optional i64 creationTime,
    3: optional string actualErrorMessage,
    4: optional string userFriendlyMessage,
    5: optional ErrorCategory errorCategory,
    6: optional bool transientOrPersistent = 0,
    7: optional CorrectiveAction correctiveAction,
    8: optional ActionableGroup actionableGroup,
    9: optional list<string> rootCauseErrorIdList
}

struct JobDetails {
    1: required string jobID,
    2: required string jobDescription,
    3: optional i64 creationTime,
    4: optional JobStatus jobStatus,
    5: optional ApplicationStatus applicationStatus,
    6: optional list<ErrorDetails> errors
}

struct DataTransferDetails {
    1: required string transferID,
    2: optional i64 creationTime,
    3: required string transferDescription,
    4: optional TransferStatus transferStatus,
}

/**
 * A structure holding the actual execution context decided based on user provided configuration data or system inferred
 *   information from scheduling and QoS parameters. One experiment can have multiple tasks. Each tasks results in data transsfers and jobs
 *
*/
struct TaskDetails {
    1: required string taskID
    2: optional i64 creationTime,
    3: optional string applicationId,
    4: optional string applicationVersion,
    5: optional list<DataObjectType> applicationInputs,
    6: optional list<DataObjectType> applicationOutputs,
    7: optional ComputationalResourceScheduling executionScheduling,
    8: optional AdvancedInputDataHandling advancedInputDataHandling,
    9: optional AdvancedOutputDataHandling advancedOutputDataHandling,
    10: optional ExecutionStatus executionStatus,
    11: optional list<JobDetails> jobDetailsList,
    12: optional list<DataTransferDetails> dataTransferDetailsList,
    13: optional list<ErrorDetails> errors
}

/**
* A structure holding the node data.
* nodeInstanceId - unique node identifier for each run
*/
struct WorkflowNodeDetails {
    1: required string nodeInstanceId = "DO_NO_SET_BY_CLIENT",
    2: optional i64 creationTime,
    3: required string nodeName = "SIMPLE_APP_NODE",
    4: optional list<DataObjectType> nodeInputs,
    5: optional list<DataObjectType> nodeOutputs,
    6: optional WorkflowNodeStatus workflowNodeStatus,
    7: optional list<TaskDetails> taskDetailsList,
    8: optional list<ErrorDetails> errors
}

/**
 * A structure holding the experiment metadata and its child models.
 *
 * userName:
 *   The user name of the targeted gateway end user on whose behalf the experiment is being created.
 *     the associated gateway identity can only be inferred from the security hand-shake so as to avoid
 *     authorized Airavata Clients mimicking an unauthorized request. If a gateway is not registered with
 *     Airavata, an authorization exception is thrown.
 *
 * experimentName:
 *   The name of the experiment as defined by the user. The name need not be unique as uniqueness is enforced
 *      by the generated experiment id.
 *
 * experimentDescription:
 *    The verbose description of the experiment. This is an optional parameter.
*/

struct Experiment {
    1: required string experimentID = "DO_NO_SET_BY_CLIENT"
    2: required string projectID = "DEFAULT",
    3: optional i64 creationTime,
    4: required string userName,
    5: required string name,
    6: optional string description,
    7: optional string applicationId,
    8: optional string applicationVersion,
    9: optional string workflowTemplateId,
    10: optional string workflowTemplateVersion,
    11: optional string workflowExecutionInstanceId,
    12: optional list<DataObjectType> experimentInputs,
    13: optional list<DataObjectType> experimentOutputs,
    14: optional ExecutionStatus experimentStatus,
    15: optional list<ExecutionStatus> stateChangeList,
    16: optional list<WorkflowNodeDetails> workflowNodeDetailsList,
    17: optional list<ErrorDetails> errors
}