/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */

namespace java org.apache.airavata.model.experiment
namespace php Airavata.Model.Experiment

/*
 * This file describes the definitions of the Airavata Experiment Data Structures. Each of the
 *   language specific Airavata Client SDK's will translate this neutral data model into an
 *   appropriate form for passing to the Airavata Server Execution API Calls.
 * 
 * The Experiment data model is divided into 6 categories: experiment metadata, experiment configuration
 *   data, experiment generated data, experiment monitoring data, provenance data and error handling data.
 *
 *   Experiment Metadata:
 *     this structure holds the owner of the experiment, name, description, creation and last update times,
 *     last known status, and if is private to the user or shared publicly. 
 *    FIXME: To start with, we will not define this but populate it inferring data from other structures. This
 *    structure needs revisiting once the API gets used.
 * 
 *  Experiment Configuration Data:
 *     this structure will contain all user provided configuration data.
 * 
 *  Experiment Generated Data:
 *     this structure describes all intermediate and output data generated by executing the experiment.
 * 
 *  Experiment Monitoring Data:
 *     this structure contains fine grained experiment status information.
 *
 *  Experiment Summary Data: 
 *     this is derived information from all experiment objects to provide a quick summary.
 *
*/

/**
 * A structure holding the basic experiment metadata.
 *
 * userName:
 *   The user name of the targeted gateway end user on whose behalf the experiment is being created.
 *     the associated gateway identity can only be inferred from the security hand-shake so as to avoid
 *     authorized Airavata Clients mimicking an unauthorized request. If a gateway is not registered with
 *     Airavata, an authorization exception is thrown.
 *
 * experimentName:
 *   The name of the experiment as defined by the user. The name need not be unique as uniqueness is enforced
 *      by the generated experiment id.
 *
 * experimentDescription:
 *    The verbose description of the experiment. This is an optional parameter.
*/
struct BasicMetadata {
  1: required string userName,
  2: required string experimentName,
  3: required string projectID = "default",
  4: optional string experimentDescription,
  5: optional bool shareExperimentPublicly = 0,
  6: required string experimentID = "DO_NOT_SET"
}

/**
 * A structure holding the Computational Resource Scheduling.
 *
*/
struct ComputationalResourceScheduling {
  1:required bool airavataAutoSchedule = 1
  2:required bool overrideManualScheduledParams = 0,
  3:optional string resourceHostId,
  4:optional i32 totalCPUCount,
  5:optional i32 nodeCount,
  6:optional i32 numberOfThreads,
  7:optional string queueName,
  8:optional i32 wallTimeLimit,
  9:optional i32 jobStartTime,
  10:optional i32 totalPhysicalMemory,
  11:optional string ComputationalProjectAccount
}

/**
 * A structure holding specified input data handling.
 *
*/
struct AdvancedInputDataHandling {
    1:optional bool stageInputFilesToWorkingDir = 0,
    2: optional string workingDirectoryParent,
    3: optional string uniqueWorkingDirectory,
    4: optional bool cleanUpWorkingDirAfterJob = 0
}

/**
 * A structure holding specified output data handling.
 *
*/
struct AdvancedOutputDataHandling {
    2:optional string outputdataDir,
    3:optional string dataRegistryURL,
    4:optional bool persistOutputData = 1
}

/**
 * A structure holding Quality of Service Parameters.
 *
*/
struct QualityOfServiceParams {
    1:optional string startExecutionAt,
    2:optional string executeBefore,
    3:optional i32 numberofRetries,
}

/**
 * A structure holding the experiment configuration.
 *
 *
*/
struct ConfigurationData {
  1: optional BasicMetadata basicMetadata,
  2: optional string applicationId,
  3: optional string applicationVersion,
  4: optional string workflowTemplateId,
  5: optional string worklfowTemplateVersion,
  6: optional map<string,string> experimentInputs,
  7: optional ComputationalResourceScheduling computationalResourceScheduling,
  8: optional AdvancedInputDataHandling advanceInputDataHandling,
  9: optional AdvancedOutputDataHandling advanceOutputDataHandling,
  10: optional QualityOfServiceParams qosParams
}
