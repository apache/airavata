#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def getAPIVersion(self, authzToken):
    """
    Fetch Apache Airavata API version

    Parameters:
     - authzToken
    """
    pass

  def addGateway(self, gateway):
    """
    Parameters:
     - gateway
    """
    pass

  def updateGateway(self, gatewayId, updatedGateway):
    """
    Parameters:
     - gatewayId
     - updatedGateway
    """
    pass

  def getGateway(self, gatewayId):
    """
    Parameters:
     - gatewayId
    """
    pass

  def deleteGateway(self, gatewayId):
    """
    Parameters:
     - gatewayId
    """
    pass

  def getAllGateways(self):
    pass

  def isGatewayExist(self, gatewayId):
    """
    Parameters:
     - gatewayId
    """
    pass

  def generateAndRegisterSSHKeys(self, gatewayId, userName):
    """
    Generate and Register SSH Key Pair with Airavata Credential Store.

    @param gatewayId
       The identifier for the requested gateway.

    @param userName
       The User for which the credential should be registered. For community accounts, this user is the name of the
       community user name. For computational resources, this user name need not be the same user name on resoruces.

    @return airavataCredStoreToken
      An SSH Key pair is generated and stored in the credential store and associated with users or community account
      belonging to a gateway.



    Parameters:
     - gatewayId
     - userName
    """
    pass

  def getSSHPubKey(self, airavataCredStoreToken):
    """
    Parameters:
     - airavataCredStoreToken
    """
    pass

  def getAllUserSSHPubKeys(self, userName):
    """
    Parameters:
     - userName
    """
    pass

  def createProject(self, gatewayId, project):
    """
    Creates a Project with basic metadata.
       A Project is a container of experiments.

    @param gatewayId
       The identifier for the requested gateway.

    @param Project
       The Project Object described in the workspace_model


    Parameters:
     - gatewayId
     - project
    """
    pass

  def updateProject(self, projectId, updatedProject):
    """
    Update a Project


    Parameters:
     - projectId
     - updatedProject
    """
    pass

  def getProject(self, projectId):
    """
    Get a Project by ID


    Parameters:
     - projectId
    """
    pass

  def deleteProject(self, projectId):
    """
    Parameters:
     - projectId
    """
    pass

  def getAllUserProjects(self, gatewayId, userName):
    """
      * Get all Project by user
      *
      * @param gatewayId
      *    The identifier for the requested gateway.
      *
      * @param userName
      *    The Project Object described in the workspace_model
      * @deprecated Instead use getAllUserProjectsWithPagination
    *

    Parameters:
     - gatewayId
     - userName
    """
    pass

  def getAllUserProjectsWithPagination(self, gatewayId, userName, limit, offset):
    """
      * Get all Project by user with pagination. Results will be ordered based
      * on creation time DESC
      *
      * @param gatewayId
      *    The identifier for the requested gateway.
      * @param userName
      *    The identifier of the user
      * @param limit
      *    The amount results to be fetched
      * @param offset
      *    The starting point of the results to be fetched
    *

    Parameters:
     - gatewayId
     - userName
     - limit
     - offset
    """
    pass

  def searchProjectsByProjectName(self, gatewayId, userName, projectName):
    """
    Get all Project for user by project name

    @param gatewayId
       The identifier for the requested gateway.
    @param userName
       The identifier of the user
    @param projectName
       The name of the project on which the results to be fetched
    @deprecated Instead use searchProjectsByProjectNameWithPagination

    Parameters:
     - gatewayId
     - userName
     - projectName
    """
    pass

  def searchProjectsByProjectNameWithPagination(self, gatewayId, userName, projectName, limit, offset):
    """
    Get all Project for user by project name with pagination.Results will be ordered based
    on creation time DESC

    @param gatewayId
       The identifier for the requested gateway.
    @param userName
       The identifier of the user
    @param projectName
       The name of the project on which the results to be fetched
    @param limit
       The amount results to be fetched
    @param offset
       The starting point of the results to be fetched

    Parameters:
     - gatewayId
     - userName
     - projectName
     - limit
     - offset
    """
    pass

  def searchProjectsByProjectDesc(self, gatewayId, userName, description):
    """
    Get all Project for user by project description
    @param gatewayId
       The identifier for the requested gateway.
    @param userName
       The identifier of the user
    @param description
       The description to be matched
    @deprecated Instead use searchProjectsByProjectDescWithPagination

    Parameters:
     - gatewayId
     - userName
     - description
    """
    pass

  def searchProjectsByProjectDescWithPagination(self, gatewayId, userName, description, limit, offset):
    """
    Search and get all Projects for user by project description with pagination. Results
    will be ordered based on creation time DESC

    @param gatewayId
       The identifier for the requested gateway.
    @param userName
       The identifier of the user
    @param description
       The description to be matched
    @param limit
       The amount results to be fetched
    @param offset
       The starting point of the results to be fetched

    Parameters:
     - gatewayId
     - userName
     - description
     - limit
     - offset
    """
    pass

  def searchExperimentsByName(self, gatewayId, userName, expName):
    """
    Search Experiments by experiment name

    @param gatewayId
          Identifier of the requested gateway
    @param useNname
          Username of the requested user
    @param expName
          Experiment name to be matched
    @deprecated
          Instead use searchExperimentsByNameWithPagination


    Parameters:
     - gatewayId
     - userName
     - expName
    """
    pass

  def searchExperimentsByNameWithPagination(self, gatewayId, userName, expName, limit, offset):
    """
    Search Experiments by experiment name with pagination. Results will be sorted
    based on creation time DESC

    @param gatewayId
          Identifier of the requested gateway
    @param userName
          Username of the requested user
    @param expName
          Experiment name to be matched
    @param limit
          Amount of results to be fetched
    @param offset
          The starting point of the results to be fetched

    Parameters:
     - gatewayId
     - userName
     - expName
     - limit
     - offset
    """
    pass

  def searchExperimentsByDesc(self, gatewayId, userName, description):
    """
    Search Experiments by experiment name

    @param gatewayId
          Identifier of the requested gateway
    @param userName
          Username of the requested user
    @param description
          Experiment description to be matched
    @deprecated
          Instead use searchExperimentsByDescWithPagination

    Parameters:
     - gatewayId
     - userName
     - description
    """
    pass

  def searchExperimentsByDescWithPagination(self, gatewayId, userName, description, limit, offset):
    """
    Search Experiments by experiment name with pagination. Results will be sorted
    based on creation time DESC

    @param gatewayId
          Identifier of the requested gateway
    @param userName
          Username of the requested user
    @param description
          Experiment description to be matched
    @param limit
          Amount of results to be fetched
    @param offset
          The starting point of the results to be fetched

    Parameters:
     - gatewayId
     - userName
     - description
     - limit
     - offset
    """
    pass

  def searchExperimentsByApplication(self, gatewayId, userName, applicationId):
    """
    Search Experiments by application id

    @param gatewayId
          Identifier of the requested gateway
    @param userName
          Username of the requested user
    @param applicationId
          Application id to be matched
    @deprecated
          Instead use searchExperimentsByApplicationWithPagination

    Parameters:
     - gatewayId
     - userName
     - applicationId
    """
    pass

  def searchExperimentsByApplicationWithPagination(self, gatewayId, userName, applicationId, limit, offset):
    """
    Search Experiments by application id with pagination. Results will be sorted
    based on creation time DESC

    @param gatewayId
          Identifier of the requested gateway
    @param userName
          Username of the requested user
    @param applicationId
          Application id to be matched
    @param limit
          Amount of results to be fetched
    @param offset
          The starting point of the results to be fetched

    Parameters:
     - gatewayId
     - userName
     - applicationId
     - limit
     - offset
    """
    pass

  def searchExperimentsByStatus(self, gatewayId, userName, experimentState):
    """
    Search Experiments by experiment status

    @param gatewayId
          Identifier of the requested gateway
    @param userName
          Username of the requested user
    @param experimentState
          Experiement state to be matched
    @deprecated
          Instead use searchExperimentsByStatusWithPagination

    Parameters:
     - gatewayId
     - userName
     - experimentState
    """
    pass

  def searchExperimentsByStatusWithPagination(self, gatewayId, userName, experimentState, limit, offset):
    """
    Search Experiments by experiment status with pagination. Results will be sorted
    based on creation time DESC

    @param gatewayId
          Identifier of the requested gateway
    @param userName
          Username of the requested user
    @param experimentState
          Experiement state to be matched
    @param limit
          Amount of results to be fetched
    @param offset
          The starting point of the results to be fetched

    Parameters:
     - gatewayId
     - userName
     - experimentState
     - limit
     - offset
    """
    pass

  def searchExperimentsByCreationTime(self, gatewayId, userName, fromTime, toTime):
    """
    Search Experiments by experiment creation time

    @param gatewayId
          Identifier of the requested gateway
    @param userName
          Username of the requested user
    @param fromTime
          Start time of the experiments creation time
    @param toTime
          End time of the  experiement creation time
    @deprecated
          Instead use searchExperimentsByCreationTimeWithPagination

    Parameters:
     - gatewayId
     - userName
     - fromTime
     - toTime
    """
    pass

  def searchExperimentsByCreationTimeWithPagination(self, gatewayId, userName, fromTime, toTime, limit, offset):
    """
    Search Experiments by experiment creation time with pagination. Results will be sorted
    based on creation time DESC

    @param gatewayId
          Identifier of the requested gateway
    @param userName
          Username of the requested user
    @param fromTime
          Start time of the experiments creation time
    @param toTime
          End time of the  experiement creation time
    @param limit
          Amount of results to be fetched
    @param offset
          The starting point of the results to be fetched

    Parameters:
     - gatewayId
     - userName
     - fromTime
     - toTime
     - limit
     - offset
    """
    pass

  def searchExperiments(self, gatewayId, userName, filters, limit, offset):
    """
    Search Experiments by using multiple filter criteria with pagination. Results will be sorted
    based on creation time DESC

    @param gatewayId
          Identifier of the requested gateway
    @param userName
          Username of the requested user
    @param filters
          map of multiple filter criteria.
    @param limit
          Amount of results to be fetched
    @param offset
          The starting point of the results to be fetched

    Parameters:
     - gatewayId
     - userName
     - filters
     - limit
     - offset
    """
    pass

  def getExperimentStatistics(self, gatewayId, fromTime, toTime):
    """
    Get Experiment Statisitics for the given gateway for a specific time period
    @param gatewayId
          Identifier of the requested gateway
    @param fromTime
          Starting date time
    @param toTime
          Ending data time


    Parameters:
     - gatewayId
     - fromTime
     - toTime
    """
    pass

  def getAllExperimentsInProject(self, projectId):
    """
    Get all Experiments within a Project

    @param projectId
          Identifier of the project
    @deprecated
          Instead use  getAllExperimentsInProjectWithPagination

    Parameters:
     - projectId
    """
    pass

  def getAllExperimentsInProjectWithPagination(self, projectId, limit, offset):
    """
    Get all Experiments within project with pagination. Results will be sorted
    based on creation time DESC

    @param projectId
          Identifier of the project
    @param limit
          Amount of results to be fetched
    @param offset
          The starting point of the results to be fetched

    Parameters:
     - projectId
     - limit
     - offset
    """
    pass

  def getAllUserExperiments(self, gatewayId, userName):
    """
    Get all Experiments by user

    @param gatewayId
          Identifier of the requesting gateway
    @param userName
          Username of the requested user
    @deprecated
          Instead use getAllUserExperimentsWithPagination

    Parameters:
     - gatewayId
     - userName
    """
    pass

  def getAllUserExperimentsWithPagination(self, gatewayId, userName, limit, offset):
    """
    Get all Experiments by user pagination. Results will be sorted
    based on creation time DESC

    @param gatewayId
          Identifier of the requesting gateway
    @param userName
          Username of the requested user
    @param limit
          Amount of results to be fetched
    @param offset
          The starting point of the results to be fetched

    Parameters:
     - gatewayId
     - userName
     - limit
     - offset
    """
    pass

  def createExperiment(self, gatewayId, experiment):
    """
    Create an experiment for the specified user belonging to the gateway. The gateway identity is not explicitly passed
      but inferred from the authentication header. This experiment is just a persistent place holder. The client
      has to subsequently configure and launch the created experiment. No action is taken on Airavata Server except
      registering the experiment in a persistent store.

    @param basicExperimentMetadata
       The create experiment will require the basic experiment metadata like the name and description, intended user,
         the gateway identifer and if the experiment should be shared public by defualt. During the creation of an experiment
         the ExperimentMetadata is a required field.

    @return
      The server-side generated.airavata.registry.core.experiment.globally unique identifier.

    @throws org.apache.airavata.model.error.InvalidRequestException
       For any incorrect forming of the request itself.

    @throws org.apache.airavata.model.error.AiravataClientException
       The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:

         UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
            step, then Airavata Registry will not have a provenance area setup. The client has to follow
            gateway registration steps and retry this request.

         AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
            For now this is a place holder.

         INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
            is implemented, the authorization will be more substantial.

    @throws org.apache.airavata.model.error.AiravataSystemException
       This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
          rather an Airavata Administrator will be notified to take corrective action.


    Parameters:
     - gatewayId
     - experiment
    """
    pass

  def getExperiment(self, airavataExperimentId):
    """
    Fetch previously created experiment metadata.

    @param airavataExperimentId
       The identifier for the requested experiment. This is returned during the create experiment step.

    @return experimentMetada
      This method will return the previously stored experiment metadata.

    @throws org.apache.airavata.model.error.InvalidRequestException
       For any incorrect forming of the request itself.

    @throws org.apache.airavata.model.error.ExperimentNotFoundException
       If the specified experiment is not previously created, then an Experiment Not Found Exception is thrown.

    @throws org.apache.airavata.model.error.AiravataClientException
       The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
         
         UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
            step, then Airavata Registry will not have a provenance area setup. The client has to follow
            gateway registration steps and retry this request.

         AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
            For now this is a place holder.

         INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
            is implemented, the authorization will be more substantial.

    @throws org.apache.airavata.model.error.AiravataSystemException
       This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
          rather an Airavata Administrator will be notified to take corrective action.


    Parameters:
     - airavataExperimentId
    """
    pass

  def updateExperiment(self, airavataExperimentId, experiment):
    """
    Configure a previously created experiment with required inputs, scheduling and other quality of service
      parameters. This method only updates the experiment object within the registry. The experiment has to be launched
      to make it actionable by the server.

    @param airavataExperimentId
       The identifier for the requested experiment. This is returned during the create experiment step.

    @param experimentConfigurationData
       The configuration information of the experiment with application input parameters, computational resource scheduling
         information, special input output handling and additional quality of service parameters.

    @return
      This method call does not have a return value.

    @throws org.apache.airavata.model.error.InvalidRequestException
       For any incorrect forming of the request itself.

    @throws org.apache.airavata.model.error.ExperimentNotFoundException
       If the specified experiment is not previously created, then an Experiment Not Found Exception is thrown.

    @throws org.apache.airavata.model.error.AiravataClientException
       The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
         
         UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
            step, then Airavata Registry will not have a provenance area setup. The client has to follow
            gateway registration steps and retry this request.

         AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
            For now this is a place holder.

         INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
            is implemented, the authorization will be more substantial.

    @throws org.apache.airavata.model.error.AiravataSystemException
       This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
          rather an Airavata Administrator will be notified to take corrective action.


    Parameters:
     - airavataExperimentId
     - experiment
    """
    pass

  def updateExperimentConfiguration(self, airavataExperimentId, userConfiguration):
    """
    Parameters:
     - airavataExperimentId
     - userConfiguration
    """
    pass

  def updateResourceScheduleing(self, airavataExperimentId, resourceScheduling):
    """
    Parameters:
     - airavataExperimentId
     - resourceScheduling
    """
    pass

  def validateExperiment(self, airavataExperimentId):
    """
     *
     * Validate experiment configuration. A true in general indicates, the experiment is ready to be launched.
     *
     * @param experimentID
     * @return sucess/failure
     *
    *

    Parameters:
     - airavataExperimentId
    """
    pass

  def launchExperiment(self, airavataExperimentId, airavataCredStoreToken):
    """
    Launch a previously created and configured experiment. Airavata Server will then start processing the request and appropriate
      notifications and intermediate and output data will be subsequently available for this experiment.

    @param airavataExperimentId
       The identifier for the requested experiment. This is returned during the create experiment step.

    @param airavataCredStoreToken:
      A requirement to execute experiments within Airavata is to first register the targeted remote computational account
        credentials with Airavata Credential Store. The administrative API (related to credential store) will return a
        generated token associated with the registered credentials. The client has to security posses this token id and is
        required to pass it to Airavata Server for all execution requests.
      Note: At this point only the credential store token is required so the string is directly passed here. In future if
        if more security credentials are enables, then the structure ExecutionSecurityParameters should be used.
      Note: This parameter is not persisted within Airavata Registry for security reasons.

    @return
      This method call does not have a return value.

    @throws org.apache.airavata.model.error.InvalidRequestException
       For any incorrect forming of the request itself.

    @throws org.apache.airavata.model.error.ExperimentNotFoundException
       If the specified experiment is not previously created, then an Experiment Not Found Exception is thrown.

    @throws org.apache.airavata.model.error.AiravataClientException
       The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
         
         UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
            step, then Airavata Registry will not have a provenance area setup. The client has to follow
            gateway registration steps and retry this request.

         AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
            For now this is a place holder.

         INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
            is implemented, the authorization will be more substantial.

    @throws org.apache.airavata.model.error.AiravataSystemException
       This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
          rather an Airavata Administrator will be notified to take corrective action.


    Parameters:
     - airavataExperimentId
     - airavataCredStoreToken
    """
    pass

  def getExperimentStatus(self, airavataExperimentId):
    """
    Parameters:
     - airavataExperimentId
    """
    pass

  def getExperimentOutputs(self, airavataExperimentId):
    """
    Parameters:
     - airavataExperimentId
    """
    pass

  def getIntermediateOutputs(self, airavataExperimentId):
    """
    Parameters:
     - airavataExperimentId
    """
    pass

  def getJobStatuses(self, airavataExperimentId):
    """
    Parameters:
     - airavataExperimentId
    """
    pass

  def getJobDetails(self, airavataExperimentId):
    """
    Parameters:
     - airavataExperimentId
    """
    pass

  def getDataTransferDetails(self, airavataExperimentId):
    """
    Parameters:
     - airavataExperimentId
    """
    pass

  def cloneExperiment(self, existingExperimentID, newExperimentName):
    """
    Clone an specified experiment with a new name. A copy of the experiment configuration is made and is persisted with new metadata.
      The client has to subsequently update this configuration if needed and launch the cloned experiment.

    @param newExperimentName
       experiment name that should be used in the cloned experiment

    @param updatedExperiment
       Once an experiment is cloned, to disambiguate, the users are suggested to provide new metadata. This will again require
         the basic experiment metadata like the name and description, intended user, the gateway identifier and if the experiment
         should be shared public by default.

    @return
      The server-side generated.airavata.registry.core.experiment.globally unique identifier for the newly cloned experiment.

    @throws org.apache.airavata.model.error.InvalidRequestException
       For any incorrect forming of the request itself.

    @throws org.apache.airavata.model.error.ExperimentNotFoundException
       If the specified experiment is not previously created, then an Experiment Not Found Exception is thrown.

    @throws org.apache.airavata.model.error.AiravataClientException
       The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
         
         UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
            step, then Airavata Registry will not have a provenance area setup. The client has to follow
            gateway registration steps and retry this request.

         AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
            For now this is a place holder.

         INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
            is implemented, the authorization will be more substantial.

    @throws org.apache.airavata.model.error.AiravataSystemException
       This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
          rather an Airavata Administrator will be notified to take corrective action.


    Parameters:
     - existingExperimentID
     - newExperimentName
    """
    pass

  def terminateExperiment(self, airavataExperimentId, tokenId):
    """
    Terminate a running experiment.

    @param airavataExperimentId
       The identifier for the requested experiment. This is returned during the create experiment step.

    @return
      This method call does not have a return value.

    @throws org.apache.airavata.model.error.InvalidRequestException
       For any incorrect forming of the request itself.

    @throws org.apache.airavata.model.error.ExperimentNotFoundException
       If the specified experiment is not previously created, then an Experiment Not Found Exception is thrown.

    @throws org.apache.airavata.model.error.AiravataClientException
       The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
         
         UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
            step, then Airavata Registry will not have a provenance area setup. The client has to follow
            gateway registration steps and retry this request.

         AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
            For now this is a place holder.

         INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
            is implemented, the authorization will be more substantial.

    @throws org.apache.airavata.model.error.AiravataSystemException
       This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
          rather an Airavata Administrator will be notified to take corrective action.


    Parameters:
     - airavataExperimentId
     - tokenId
    """
    pass

  def registerApplicationModule(self, gatewayId, applicationModule):
    """
    Register a Application Module.

    @param applicationModule
       Application Module Object created from the datamodel.

    @return appModuleId
      Returns a server-side generated airavata appModule globally unique identifier.


    Parameters:
     - gatewayId
     - applicationModule
    """
    pass

  def getApplicationModule(self, appModuleId):
    """
    Fetch a Application Module.

    @param appModuleId
      The identifier for the requested application module

    @return applicationModule
      Returns a application Module Object.


    Parameters:
     - appModuleId
    """
    pass

  def updateApplicationModule(self, appModuleId, applicationModule):
    """
    Update a Application Module.

    @param appModuleId
      The identifier for the requested application module to be updated.

    @param applicationModule
       Application Module Object created from the datamodel.

    @return status
      Returns a success/failure of the update.


    Parameters:
     - appModuleId
     - applicationModule
    """
    pass

  def getAllAppModules(self, gatewayId):
    """
    Parameters:
     - gatewayId
    """
    pass

  def deleteApplicationModule(self, appModuleId):
    """
    Delete a Application Module.

    @param appModuleId
      The identifier for the requested application module to be deleted.

    @return status
      Returns a success/failure of the deletion.


    Parameters:
     - appModuleId
    """
    pass

  def registerApplicationDeployment(self, gatewayId, applicationDeployment):
    """
    Register a Application Deployment.

    @param applicationModule
       Application Module Object created from the datamodel.

    @return appDeploymentId
      Returns a server-side generated airavata appDeployment globally unique identifier.


    Parameters:
     - gatewayId
     - applicationDeployment
    """
    pass

  def getApplicationDeployment(self, appDeploymentId):
    """
    Fetch a Application Deployment.

    @param appDeploymentId
      The identifier for the requested application module

    @return applicationDeployment
      Returns a application Deployment Object.


    Parameters:
     - appDeploymentId
    """
    pass

  def updateApplicationDeployment(self, appDeploymentId, applicationDeployment):
    """
    Update a Application Deployment.

    @param appDeploymentId
      The identifier for the requested application deployment to be updated.

    @param appDeployment
       Application Deployment Object created from the datamodel.

    @return status
      Returns a success/failure of the update.


    Parameters:
     - appDeploymentId
     - applicationDeployment
    """
    pass

  def deleteApplicationDeployment(self, appDeploymentId):
    """
    Delete a Application deployment.

    @param appDeploymentId
      The identifier for the requested application deployment to be deleted.

    @return status
      Returns a success/failure of the deletion.


    Parameters:
     - appDeploymentId
    """
    pass

  def getAllApplicationDeployments(self, gatewayId):
    """
    Fetch all Application Deployment Descriptions.

    @return list<applicationDeployment.
      Returns the list of all application Deployment Objects.


    Parameters:
     - gatewayId
    """
    pass

  def getAppModuleDeployedResources(self, appModuleId):
    """
    Fetch a list of Deployed Compute Hosts.

    @param appModuleId
      The identifier for the requested application module

    @return list<string>
      Returns a list of Deployed Resources.


    Parameters:
     - appModuleId
    """
    pass

  def registerApplicationInterface(self, gatewayId, applicationInterface):
    """
    Register a Application Interface.

    @param applicationModule
       Application Module Object created from the datamodel.

    @return appInterfaceId
      Returns a server-side generated airavata application interface globally unique identifier.


    Parameters:
     - gatewayId
     - applicationInterface
    """
    pass

  def getApplicationInterface(self, appInterfaceId):
    """
    Fetch a Application Interface.

    @param appInterfaceId
      The identifier for the requested application module

    @return applicationInterface
      Returns a application Interface Object.



    Parameters:
     - appInterfaceId
    """
    pass

  def updateApplicationInterface(self, appInterfaceId, applicationInterface):
    """
    Update a Application Interface.

    @param appInterfaceId
      The identifier for the requested application deployment to be updated.

    @param appInterface
       Application Interface Object created from the datamodel.

    @return status
      Returns a success/failure of the update.



    Parameters:
     - appInterfaceId
     - applicationInterface
    """
    pass

  def deleteApplicationInterface(self, appInterfaceId):
    """
    Delete a Application Interface.

    @param appInterfaceId
      The identifier for the requested application interface to be deleted.

    @return status
      Returns a success/failure of the deletion.



    Parameters:
     - appInterfaceId
    """
    pass

  def getAllApplicationInterfaceNames(self, gatewayId):
    """
    Fetch name and id of  Application Interface documents.


    @return map<applicationId, applicationInterfaceNames>
      Returns a list of application interfaces with corresponsing id's


    Parameters:
     - gatewayId
    """
    pass

  def getAllApplicationInterfaces(self, gatewayId):
    """
    Fetch all Application Interface documents.


    @return map<applicationId, applicationInterfaceNames>
      Returns a list of application interfaces documents


    Parameters:
     - gatewayId
    """
    pass

  def getApplicationInputs(self, appInterfaceId):
    """
    Fetch the list of Application Inputs.

    @param appInterfaceId
      The identifier for the requested application interface

    @return list<application_interface_model.InputDataObjectType>
      Returns a list of application inputs.


    Parameters:
     - appInterfaceId
    """
    pass

  def getApplicationOutputs(self, appInterfaceId):
    """
    Fetch the list of Application Outputs.

    @param appInterfaceId
      The identifier for the requested application interface

    @return list<application_interface_model.OutputDataObjectType>
      Returns a list of application outputs.


    Parameters:
     - appInterfaceId
    """
    pass

  def getAvailableAppInterfaceComputeResources(self, appInterfaceId):
    """
    Fetch a list of all deployed Compute Hosts for a given application interfaces.

    @param appInterfaceId
      The identifier for the requested application interface

    @return map<computeResourceId, computeResourceName>
      A map of registered compute resource id's and their corresponding hostnames.
       Deployments of each modules listed within the interfaces will be listed.


    Parameters:
     - appInterfaceId
    """
    pass

  def registerComputeResource(self, computeResourceDescription):
    """
    Register a Compute Resource.

    @param computeResourceDescription
       Compute Resource Object created from the datamodel.

    @return computeResourceId
      Returns a server-side generated airavata compute resource globally unique identifier.


    Parameters:
     - computeResourceDescription
    """
    pass

  def getComputeResource(self, computeResourceId):
    """
    Fetch the given Compute Resource.

    @param computeResourceId
      The identifier for the requested compute resource

    @return computeResourceDescription
       Compute Resource Object created from the datamodel..


    Parameters:
     - computeResourceId
    """
    pass

  def getAllComputeResourceNames(self):
    """
    Fetch all registered Compute Resources.

    @return A map of registered compute resource id's and thier corresponding hostnames.
       Compute Resource Object created from the datamodel..

    """
    pass

  def updateComputeResource(self, computeResourceId, computeResourceDescription):
    """
    Update a Compute Resource.

    @param computeResourceId
      The identifier for the requested compute resource to be updated.

    @param computeResourceDescription
       Compute Resource Object created from the datamodel.

    @return status
      Returns a success/failure of the update.


    Parameters:
     - computeResourceId
     - computeResourceDescription
    """
    pass

  def deleteComputeResource(self, computeResourceId):
    """
    Delete a Compute Resource.

    @param computeResourceId
      The identifier for the requested compute resource to be deleted.

    @return status
      Returns a success/failure of the deletion.


    Parameters:
     - computeResourceId
    """
    pass

  def addLocalSubmissionDetails(self, computeResourceId, priorityOrder, localSubmission):
    """
    Add a Local Job Submission details to a compute resource
     App catalog will return a jobSubmissionInterfaceId which will be added to the jobSubmissionInterfaces.

    @param computeResourceId
      The identifier of the compute resource to which JobSubmission protocol to be added

    @param priorityOrder
      Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.

    @param localSubmission
      The LOCALSubmission object to be added to the resource.

    @return status
      Returns the unique job submission id.


    Parameters:
     - computeResourceId
     - priorityOrder
     - localSubmission
    """
    pass

  def updateLocalSubmissionDetails(self, jobSubmissionInterfaceId, localSubmission):
    """
    Update the given Local Job Submission details

    @param jobSubmissionInterfaceId
      The identifier of the JobSubmission Interface to be updated.

    @param localSubmission
      The LOCALSubmission object to be updated.

    @return status
      Returns a success/failure of the deletion.


    Parameters:
     - jobSubmissionInterfaceId
     - localSubmission
    """
    pass

  def getLocalJobSubmission(self, jobSubmissionId):
    """
    This method returns localJobSubmission object
    @param jobSubmissionInterfaceId
      The identifier of the JobSubmission Interface to be retrieved.
     @return LOCALSubmission instance


    Parameters:
     - jobSubmissionId
    """
    pass

  def addSSHJobSubmissionDetails(self, computeResourceId, priorityOrder, sshJobSubmission):
    """
    Add a SSH Job Submission details to a compute resource
     App catalog will return a jobSubmissionInterfaceId which will be added to the jobSubmissionInterfaces.

    @param computeResourceId
      The identifier of the compute resource to which JobSubmission protocol to be added

    @param priorityOrder
      Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.

    @param sshJobSubmission
      The SSHJobSubmission object to be added to the resource.

    @return status
      Returns the unique job submission id.


    Parameters:
     - computeResourceId
     - priorityOrder
     - sshJobSubmission
    """
    pass

  def getSSHJobSubmission(self, jobSubmissionId):
    """
    This method returns SSHJobSubmission object
    @param jobSubmissionInterfaceId
      The identifier of the JobSubmission Interface to be retrieved.
     @return SSHJobSubmission instance


    Parameters:
     - jobSubmissionId
    """
    pass

  def addUNICOREJobSubmissionDetails(self, computeResourceId, priorityOrder, unicoreJobSubmission):
    """
    Add a UNICORE Job Submission details to a compute resource
     App catalog will return a jobSubmissionInterfaceId which will be added to the jobSubmissionInterfaces.

    @param computeResourceId
      The identifier of the compute resource to which JobSubmission protocol to be added

    @param priorityOrder
      Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.

    @param unicoreJobSubmission
      The UnicoreJobSubmission object to be added to the resource.

    @return status
     Returns the unique job submission id.


    Parameters:
     - computeResourceId
     - priorityOrder
     - unicoreJobSubmission
    """
    pass

  def getUnicoreJobSubmission(self, jobSubmissionId):
    """
      * This method returns UnicoreJobSubmission object
      * @param jobSubmissionInterfaceId
      *   The identifier of the JobSubmission Interface to be retrieved.
      *  @return UnicoreJobSubmission instance
    *

    Parameters:
     - jobSubmissionId
    """
    pass

  def addCloudJobSubmissionDetails(self, computeResourceId, priorityOrder, cloudSubmission):
    """
       * Add a Cloud Job Submission details to a compute resource
       *  App catalog will return a jobSubmissionInterfaceId which will be added to the jobSubmissionInterfaces.
       *
       * @param computeResourceId
       *   The identifier of the compute resource to which JobSubmission protocol to be added
       *
       * @param priorityOrder
       *   Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.
       *
       * @param sshJobSubmission
       *   The SSHJobSubmission object to be added to the resource.
       *
       * @return status
       *   Returns the unique job submission id.
    *

    Parameters:
     - computeResourceId
     - priorityOrder
     - cloudSubmission
    """
    pass

  def getCloudJobSubmission(self, jobSubmissionId):
    """
       * This method returns cloudJobSubmission object
       * @param jobSubmissionInterfaceI
           *   The identifier of the JobSubmission Interface to be retrieved.
       *  @return CloudJobSubmission instance
    *

    Parameters:
     - jobSubmissionId
    """
    pass

  def updateSSHJobSubmissionDetails(self, jobSubmissionInterfaceId, sshJobSubmission):
    """
    Update the given SSH Job Submission details

    @param jobSubmissionInterfaceId
      The identifier of the JobSubmission Interface to be updated.

    @param sshJobSubmission
      The SSHJobSubmission object to be updated.

    @return status
      Returns a success/failure of the deletion.


    Parameters:
     - jobSubmissionInterfaceId
     - sshJobSubmission
    """
    pass

  def updateCloudJobSubmissionDetails(self, jobSubmissionInterfaceId, sshJobSubmission):
    """
    Update the given SSH Job Submission details

    @param jobSubmissionInterfaceId
      The identifier of the JobSubmission Interface to be updated.

    @param cloudJobSubmission
      The CloudJobSubmission object to be updated.

    @return status
      Returns a success/failure of the deletion.


    Parameters:
     - jobSubmissionInterfaceId
     - sshJobSubmission
    """
    pass

  def updateUnicoreJobSubmissionDetails(self, jobSubmissionInterfaceId, unicoreJobSubmission):
    """
    Parameters:
     - jobSubmissionInterfaceId
     - unicoreJobSubmission
    """
    pass

  def addLocalDataMovementDetails(self, computeResourceId, priorityOrder, localDataMovement):
    """
    Add a Local data movement details to a compute resource
     App catalog will return a dataMovementInterfaceId which will be added to the dataMovementInterfaces.

    @param computeResourceId
      The identifier of the compute resource to which JobSubmission protocol to be added

    @param priorityOrder
      Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.

    @param localDataMovement
      The LOCALDataMovement object to be added to the resource.

    @return status
      Returns the unique job submission id.


    Parameters:
     - computeResourceId
     - priorityOrder
     - localDataMovement
    """
    pass

  def updateLocalDataMovementDetails(self, dataMovementInterfaceId, localDataMovement):
    """
    Update the given Local data movement details

    @param dataMovementInterfaceId
      The identifier of the data movement Interface to be updated.

    @param localDataMovement
      The LOCALDataMovement object to be updated.

    @return status
      Returns a success/failure of the update.


    Parameters:
     - dataMovementInterfaceId
     - localDataMovement
    """
    pass

  def getLocalDataMovement(self, dataMovementId):
    """
            * This method returns local datamovement object
            * @param dataMovementId
            *   The identifier of the datamovement Interface to be retrieved.
            *  @return LOCALDataMovement instance
    *

    Parameters:
     - dataMovementId
    """
    pass

  def addSCPDataMovementDetails(self, computeResourceId, priorityOrder, scpDataMovement):
    """
    Add a SCP data movement details to a compute resource
     App catalog will return a dataMovementInterfaceId which will be added to the dataMovementInterfaces.

    @param computeResourceId
      The identifier of the compute resource to which JobSubmission protocol to be added

    @param priorityOrder
      Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.

    @param scpDataMovement
      The SCPDataMovement object to be added to the resource.

    @return status
      Returns the unique job submission id.


    Parameters:
     - computeResourceId
     - priorityOrder
     - scpDataMovement
    """
    pass

  def updateSCPDataMovementDetails(self, dataMovementInterfaceId, scpDataMovement):
    """
    Update the given scp data movement details
     App catalog will return a dataMovementInterfaceId which will be added to the dataMovementInterfaces.

    @param dataMovementInterfaceId
      The identifier of the data movement Interface to be updated.

    @param scpDataMovement
      The SCPDataMovement object to be updated.

    @return status
      Returns a success/failure of the update.


    Parameters:
     - dataMovementInterfaceId
     - scpDataMovement
    """
    pass

  def getSCPDataMovement(self, dataMovementId):
    """
      * This method returns SCP datamovement object
      * @param dataMovementId
         *   The identifier of the datamovement Interface to be retrieved.
         *  @return SCPDataMovement instance
    *

    Parameters:
     - dataMovementId
    """
    pass

  def addUnicoreDataMovementDetails(self, computeResourceId, priorityOrder, unicoreDataMovement):
    """
    Parameters:
     - computeResourceId
     - priorityOrder
     - unicoreDataMovement
    """
    pass

  def updateUnicoreDataMovementDetails(self, dataMovementInterfaceId, unicoreDataMovement):
    """
    Parameters:
     - dataMovementInterfaceId
     - unicoreDataMovement
    """
    pass

  def getUnicoreDataMovement(self, dataMovementId):
    """
    Parameters:
     - dataMovementId
    """
    pass

  def addGridFTPDataMovementDetails(self, computeResourceId, priorityOrder, gridFTPDataMovement):
    """
    Add a GridFTP data movement details to a compute resource
     App catalog will return a dataMovementInterfaceId which will be added to the dataMovementInterfaces.

    @param computeResourceId
      The identifier of the compute resource to which JobSubmission protocol to be added

    @param priorityOrder
      Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.

    @param gridFTPDataMovement
      The GridFTPDataMovement object to be added to the resource.

    @return status
      Returns the unique job submission id.


    Parameters:
     - computeResourceId
     - priorityOrder
     - gridFTPDataMovement
    """
    pass

  def updateGridFTPDataMovementDetails(self, dataMovementInterfaceId, gridFTPDataMovement):
    """
    Update the given GridFTP data movement details to a compute resource
     App catalog will return a dataMovementInterfaceId which will be added to the dataMovementInterfaces.

    @param dataMovementInterfaceId
      The identifier of the data movement Interface to be updated.

    @param gridFTPDataMovement
      The GridFTPDataMovement object to be updated.

    @return status
      Returns a success/failure of the updation.


    Parameters:
     - dataMovementInterfaceId
     - gridFTPDataMovement
    """
    pass

  def getGridFTPDataMovement(self, dataMovementId):
    """
      * This method returns GridFTP datamovement object
      * @param dataMovementId
         *   The identifier of the datamovement Interface to be retrieved.
      *  @return GridFTPDataMovement instance
    *

    Parameters:
     - dataMovementId
    """
    pass

  def changeJobSubmissionPriority(self, jobSubmissionInterfaceId, newPriorityOrder):
    """
    Change the priority of a given job submisison interface

    @param jobSubmissionInterfaceId
      The identifier of the JobSubmission Interface to be changed

    @param priorityOrder
      The new priority of the job manager interface.

    @return status
      Returns a success/failure of the change.


    Parameters:
     - jobSubmissionInterfaceId
     - newPriorityOrder
    """
    pass

  def changeDataMovementPriority(self, dataMovementInterfaceId, newPriorityOrder):
    """
    Change the priority of a given data movement interface

    @param dataMovementInterfaceId
      The identifier of the DataMovement Interface to be changed

    @param priorityOrder
      The new priority of the data movement interface.

    @return status
      Returns a success/failure of the change.


    Parameters:
     - dataMovementInterfaceId
     - newPriorityOrder
    """
    pass

  def changeJobSubmissionPriorities(self, jobSubmissionPriorityMap):
    """
    Change the priorities of a given set of job submission interfaces

    @param jobSubmissionPriorityMap
      A Map of identifiers of the JobSubmission Interfaces and thier associated priorities to be set.

    @return status
      Returns a success/failure of the changes.


    Parameters:
     - jobSubmissionPriorityMap
    """
    pass

  def changeDataMovementPriorities(self, dataMovementPriorityMap):
    """
    Change the priorities of a given set of data movement interfaces

    @param dataMovementPriorityMap
      A Map of identifiers of the DataMovement Interfaces and thier associated priorities to be set.

    @return status
      Returns a success/failure of the changes.


    Parameters:
     - dataMovementPriorityMap
    """
    pass

  def deleteJobSubmissionInterface(self, computeResourceId, jobSubmissionInterfaceId):
    """
    Delete a given job submisison interface

    @param jobSubmissionInterfaceId
      The identifier of the JobSubmission Interface to be changed

    @return status
      Returns a success/failure of the deletion.


    Parameters:
     - computeResourceId
     - jobSubmissionInterfaceId
    """
    pass

  def deleteDataMovementInterface(self, computeResourceId, dataMovementInterfaceId):
    """
    Delete a given data movement interface

    @param dataMovementInterfaceId
      The identifier of the DataMovement Interface to be changed

    @return status
      Returns a success/failure of the deletion.


    Parameters:
     - computeResourceId
     - dataMovementInterfaceId
    """
    pass

  def registerResourceJobManager(self, resourceJobManager):
    """
    Parameters:
     - resourceJobManager
    """
    pass

  def updateResourceJobManager(self, resourceJobManagerId, updatedResourceJobManager):
    """
    Parameters:
     - resourceJobManagerId
     - updatedResourceJobManager
    """
    pass

  def getResourceJobManager(self, resourceJobManagerId):
    """
    Parameters:
     - resourceJobManagerId
    """
    pass

  def deleteResourceJobManager(self, resourceJobManagerId):
    """
    Parameters:
     - resourceJobManagerId
    """
    pass

  def deleteBatchQueue(self, computeResourceId, queueName):
    """
    Parameters:
     - computeResourceId
     - queueName
    """
    pass

  def registerGatewayResourceProfile(self, gatewayResourceProfile):
    """
    Register a Gateway Resource Profile.

    @param gatewayResourceProfile
       Gateway Resource Profile Object.
       The GatewayID should be obtained from Airavata gateway registration and passed to register a corresponding
         resource profile.

    @return status
      Returns a success/failure of the update.


    Parameters:
     - gatewayResourceProfile
    """
    pass

  def getGatewayResourceProfile(self, gatewayID):
    """
    Fetch the given Gateway Resource Profile.

    @param gatewayID
      The identifier for the requested gateway resource

    @return gatewayResourceProfile
       Gateway Resource Profile Object.


    Parameters:
     - gatewayID
    """
    pass

  def updateGatewayResourceProfile(self, gatewayID, gatewayResourceProfile):
    """
    Update a Gateway Resource Profile.

    @param gatewayID
      The identifier for the requested gateway resource to be updated.

    @param gatewayResourceProfile
       Gateway Resource Profile Object.

    @return status
      Returns a success/failure of the update.


    Parameters:
     - gatewayID
     - gatewayResourceProfile
    """
    pass

  def deleteGatewayResourceProfile(self, gatewayID):
    """
    Delete the given Gateway Resource Profile.

    @param gatewayID
      The identifier for the requested gateway resource to be deleted.

    @return status
      Returns a success/failure of the deletion.


    Parameters:
     - gatewayID
    """
    pass

  def addGatewayComputeResourcePreference(self, gatewayID, computeResourceId, computeResourcePreference):
    """
    Add a Compute Resource Preference to a registered gateway profile.

    @param gatewayID
      The identifier for the gateway profile to be added.

    @param computeResourceId
      Preferences related to a particular compute resource

    @param computeResourcePreference
      The ComputeResourcePreference object to be added to the resource profile.

    @return status
      Returns a success/failure of the addition. If a profile already exists, this operation will fail.
       Instead an update should be used.


    Parameters:
     - gatewayID
     - computeResourceId
     - computeResourcePreference
    """
    pass

  def getGatewayComputeResourcePreference(self, gatewayID, computeResourceId):
    """
    Fetch a Compute Resource Preference of a registered gateway profile.

    @param gatewayID
      The identifier for the gateway profile to be requested

    @param computeResourceId
      Preferences related to a particular compute resource

    @return computeResourcePreference
      Returns the ComputeResourcePreference object.


    Parameters:
     - gatewayID
     - computeResourceId
    """
    pass

  def getAllGatewayComputeResourcePreferences(self, gatewayID):
    """
    Fetch all Compute Resource Preferences of a registered gateway profile.

    @param gatewayID
      The identifier for the gateway profile to be requested

    @return computeResourcePreference
      Returns the ComputeResourcePreference object.


    Parameters:
     - gatewayID
    """
    pass

  def getAllGatewayComputeResources(self):
    """
    Fetch all gateway profiles registered

    """
    pass

  def updateGatewayComputeResourcePreference(self, gatewayID, computeResourceId, computeResourcePreference):
    """
    Update a Compute Resource Preference to a registered gateway profile.

    @param gatewayID
      The identifier for the gateway profile to be updated.

    @param computeResourceId
      Preferences related to a particular compute resource

    @param computeResourcePreference
      The ComputeResourcePreference object to be updated to the resource profile.

    @return status
      Returns a success/failure of the updation.


    Parameters:
     - gatewayID
     - computeResourceId
     - computeResourcePreference
    """
    pass

  def deleteGatewayComputeResourcePreference(self, gatewayID, computeResourceId):
    """
    Delete the Compute Resource Preference of a registered gateway profile.

    @param gatewayID
      The identifier for the gateway profile to be deleted.

    @param computeResourceId
      Preferences related to a particular compute resource

    @return status
      Returns a success/failure of the deletion.


    Parameters:
     - gatewayID
     - computeResourceId
    """
    pass

  def getAllWorkflows(self, gatewayId):
    """
    Parameters:
     - gatewayId
    """
    pass

  def getWorkflow(self, workflowTemplateId):
    """
    Parameters:
     - workflowTemplateId
    """
    pass

  def deleteWorkflow(self, workflowTemplateId):
    """
    Parameters:
     - workflowTemplateId
    """
    pass

  def registerWorkflow(self, gatewayId, workflow):
    """
    Parameters:
     - gatewayId
     - workflow
    """
    pass

  def updateWorkflow(self, workflowTemplateId, workflow):
    """
    Parameters:
     - workflowTemplateId
     - workflow
    """
    pass

  def getWorkflowTemplateId(self, workflowName):
    """
    Parameters:
     - workflowName
    """
    pass

  def isWorkflowExistWithName(self, workflowName):
    """
    Parameters:
     - workflowName
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def getAPIVersion(self, authzToken):
    """
    Fetch Apache Airavata API version

    Parameters:
     - authzToken
    """
    self.send_getAPIVersion(authzToken)
    return self.recv_getAPIVersion()

  def send_getAPIVersion(self, authzToken):
    self._oprot.writeMessageBegin('getAPIVersion', TMessageType.CALL, self._seqid)
    args = getAPIVersion_args()
    args.authzToken = authzToken
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getAPIVersion(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getAPIVersion_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    if result.ae is not None:
      raise result.ae
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getAPIVersion failed: unknown result");

  def addGateway(self, gateway):
    """
    Parameters:
     - gateway
    """
    self.send_addGateway(gateway)
    return self.recv_addGateway()

  def send_addGateway(self, gateway):
    self._oprot.writeMessageBegin('addGateway', TMessageType.CALL, self._seqid)
    args = addGateway_args()
    args.gateway = gateway
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addGateway(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = addGateway_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "addGateway failed: unknown result");

  def updateGateway(self, gatewayId, updatedGateway):
    """
    Parameters:
     - gatewayId
     - updatedGateway
    """
    self.send_updateGateway(gatewayId, updatedGateway)
    self.recv_updateGateway()

  def send_updateGateway(self, gatewayId, updatedGateway):
    self._oprot.writeMessageBegin('updateGateway', TMessageType.CALL, self._seqid)
    args = updateGateway_args()
    args.gatewayId = gatewayId
    args.updatedGateway = updatedGateway
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateGateway(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = updateGateway_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    return

  def getGateway(self, gatewayId):
    """
    Parameters:
     - gatewayId
    """
    self.send_getGateway(gatewayId)
    return self.recv_getGateway()

  def send_getGateway(self, gatewayId):
    self._oprot.writeMessageBegin('getGateway', TMessageType.CALL, self._seqid)
    args = getGateway_args()
    args.gatewayId = gatewayId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getGateway(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getGateway_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getGateway failed: unknown result");

  def deleteGateway(self, gatewayId):
    """
    Parameters:
     - gatewayId
    """
    self.send_deleteGateway(gatewayId)
    return self.recv_deleteGateway()

  def send_deleteGateway(self, gatewayId):
    self._oprot.writeMessageBegin('deleteGateway', TMessageType.CALL, self._seqid)
    args = deleteGateway_args()
    args.gatewayId = gatewayId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_deleteGateway(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = deleteGateway_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "deleteGateway failed: unknown result");

  def getAllGateways(self):
    self.send_getAllGateways()
    return self.recv_getAllGateways()

  def send_getAllGateways(self):
    self._oprot.writeMessageBegin('getAllGateways', TMessageType.CALL, self._seqid)
    args = getAllGateways_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getAllGateways(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getAllGateways_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getAllGateways failed: unknown result");

  def isGatewayExist(self, gatewayId):
    """
    Parameters:
     - gatewayId
    """
    self.send_isGatewayExist(gatewayId)
    return self.recv_isGatewayExist()

  def send_isGatewayExist(self, gatewayId):
    self._oprot.writeMessageBegin('isGatewayExist', TMessageType.CALL, self._seqid)
    args = isGatewayExist_args()
    args.gatewayId = gatewayId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_isGatewayExist(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = isGatewayExist_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "isGatewayExist failed: unknown result");

  def generateAndRegisterSSHKeys(self, gatewayId, userName):
    """
    Generate and Register SSH Key Pair with Airavata Credential Store.

    @param gatewayId
       The identifier for the requested gateway.

    @param userName
       The User for which the credential should be registered. For community accounts, this user is the name of the
       community user name. For computational resources, this user name need not be the same user name on resoruces.

    @return airavataCredStoreToken
      An SSH Key pair is generated and stored in the credential store and associated with users or community account
      belonging to a gateway.



    Parameters:
     - gatewayId
     - userName
    """
    self.send_generateAndRegisterSSHKeys(gatewayId, userName)
    return self.recv_generateAndRegisterSSHKeys()

  def send_generateAndRegisterSSHKeys(self, gatewayId, userName):
    self._oprot.writeMessageBegin('generateAndRegisterSSHKeys', TMessageType.CALL, self._seqid)
    args = generateAndRegisterSSHKeys_args()
    args.gatewayId = gatewayId
    args.userName = userName
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_generateAndRegisterSSHKeys(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = generateAndRegisterSSHKeys_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "generateAndRegisterSSHKeys failed: unknown result");

  def getSSHPubKey(self, airavataCredStoreToken):
    """
    Parameters:
     - airavataCredStoreToken
    """
    self.send_getSSHPubKey(airavataCredStoreToken)
    return self.recv_getSSHPubKey()

  def send_getSSHPubKey(self, airavataCredStoreToken):
    self._oprot.writeMessageBegin('getSSHPubKey', TMessageType.CALL, self._seqid)
    args = getSSHPubKey_args()
    args.airavataCredStoreToken = airavataCredStoreToken
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getSSHPubKey(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getSSHPubKey_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getSSHPubKey failed: unknown result");

  def getAllUserSSHPubKeys(self, userName):
    """
    Parameters:
     - userName
    """
    self.send_getAllUserSSHPubKeys(userName)
    return self.recv_getAllUserSSHPubKeys()

  def send_getAllUserSSHPubKeys(self, userName):
    self._oprot.writeMessageBegin('getAllUserSSHPubKeys', TMessageType.CALL, self._seqid)
    args = getAllUserSSHPubKeys_args()
    args.userName = userName
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getAllUserSSHPubKeys(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getAllUserSSHPubKeys_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getAllUserSSHPubKeys failed: unknown result");

  def createProject(self, gatewayId, project):
    """
    Creates a Project with basic metadata.
       A Project is a container of experiments.

    @param gatewayId
       The identifier for the requested gateway.

    @param Project
       The Project Object described in the workspace_model


    Parameters:
     - gatewayId
     - project
    """
    self.send_createProject(gatewayId, project)
    return self.recv_createProject()

  def send_createProject(self, gatewayId, project):
    self._oprot.writeMessageBegin('createProject', TMessageType.CALL, self._seqid)
    args = createProject_args()
    args.gatewayId = gatewayId
    args.project = project
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_createProject(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = createProject_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "createProject failed: unknown result");

  def updateProject(self, projectId, updatedProject):
    """
    Update a Project


    Parameters:
     - projectId
     - updatedProject
    """
    self.send_updateProject(projectId, updatedProject)
    self.recv_updateProject()

  def send_updateProject(self, projectId, updatedProject):
    self._oprot.writeMessageBegin('updateProject', TMessageType.CALL, self._seqid)
    args = updateProject_args()
    args.projectId = projectId
    args.updatedProject = updatedProject
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateProject(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = updateProject_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    if result.pnfe is not None:
      raise result.pnfe
    return

  def getProject(self, projectId):
    """
    Get a Project by ID


    Parameters:
     - projectId
    """
    self.send_getProject(projectId)
    return self.recv_getProject()

  def send_getProject(self, projectId):
    self._oprot.writeMessageBegin('getProject', TMessageType.CALL, self._seqid)
    args = getProject_args()
    args.projectId = projectId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getProject(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getProject_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    if result.pnfe is not None:
      raise result.pnfe
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getProject failed: unknown result");

  def deleteProject(self, projectId):
    """
    Parameters:
     - projectId
    """
    self.send_deleteProject(projectId)
    return self.recv_deleteProject()

  def send_deleteProject(self, projectId):
    self._oprot.writeMessageBegin('deleteProject', TMessageType.CALL, self._seqid)
    args = deleteProject_args()
    args.projectId = projectId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_deleteProject(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = deleteProject_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    if result.pnfe is not None:
      raise result.pnfe
    raise TApplicationException(TApplicationException.MISSING_RESULT, "deleteProject failed: unknown result");

  def getAllUserProjects(self, gatewayId, userName):
    """
      * Get all Project by user
      *
      * @param gatewayId
      *    The identifier for the requested gateway.
      *
      * @param userName
      *    The Project Object described in the workspace_model
      * @deprecated Instead use getAllUserProjectsWithPagination
    *

    Parameters:
     - gatewayId
     - userName
    """
    self.send_getAllUserProjects(gatewayId, userName)
    return self.recv_getAllUserProjects()

  def send_getAllUserProjects(self, gatewayId, userName):
    self._oprot.writeMessageBegin('getAllUserProjects', TMessageType.CALL, self._seqid)
    args = getAllUserProjects_args()
    args.gatewayId = gatewayId
    args.userName = userName
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getAllUserProjects(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getAllUserProjects_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getAllUserProjects failed: unknown result");

  def getAllUserProjectsWithPagination(self, gatewayId, userName, limit, offset):
    """
      * Get all Project by user with pagination. Results will be ordered based
      * on creation time DESC
      *
      * @param gatewayId
      *    The identifier for the requested gateway.
      * @param userName
      *    The identifier of the user
      * @param limit
      *    The amount results to be fetched
      * @param offset
      *    The starting point of the results to be fetched
    *

    Parameters:
     - gatewayId
     - userName
     - limit
     - offset
    """
    self.send_getAllUserProjectsWithPagination(gatewayId, userName, limit, offset)
    return self.recv_getAllUserProjectsWithPagination()

  def send_getAllUserProjectsWithPagination(self, gatewayId, userName, limit, offset):
    self._oprot.writeMessageBegin('getAllUserProjectsWithPagination', TMessageType.CALL, self._seqid)
    args = getAllUserProjectsWithPagination_args()
    args.gatewayId = gatewayId
    args.userName = userName
    args.limit = limit
    args.offset = offset
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getAllUserProjectsWithPagination(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getAllUserProjectsWithPagination_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getAllUserProjectsWithPagination failed: unknown result");

  def searchProjectsByProjectName(self, gatewayId, userName, projectName):
    """
    Get all Project for user by project name

    @param gatewayId
       The identifier for the requested gateway.
    @param userName
       The identifier of the user
    @param projectName
       The name of the project on which the results to be fetched
    @deprecated Instead use searchProjectsByProjectNameWithPagination

    Parameters:
     - gatewayId
     - userName
     - projectName
    """
    self.send_searchProjectsByProjectName(gatewayId, userName, projectName)
    return self.recv_searchProjectsByProjectName()

  def send_searchProjectsByProjectName(self, gatewayId, userName, projectName):
    self._oprot.writeMessageBegin('searchProjectsByProjectName', TMessageType.CALL, self._seqid)
    args = searchProjectsByProjectName_args()
    args.gatewayId = gatewayId
    args.userName = userName
    args.projectName = projectName
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_searchProjectsByProjectName(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = searchProjectsByProjectName_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "searchProjectsByProjectName failed: unknown result");

  def searchProjectsByProjectNameWithPagination(self, gatewayId, userName, projectName, limit, offset):
    """
    Get all Project for user by project name with pagination.Results will be ordered based
    on creation time DESC

    @param gatewayId
       The identifier for the requested gateway.
    @param userName
       The identifier of the user
    @param projectName
       The name of the project on which the results to be fetched
    @param limit
       The amount results to be fetched
    @param offset
       The starting point of the results to be fetched

    Parameters:
     - gatewayId
     - userName
     - projectName
     - limit
     - offset
    """
    self.send_searchProjectsByProjectNameWithPagination(gatewayId, userName, projectName, limit, offset)
    return self.recv_searchProjectsByProjectNameWithPagination()

  def send_searchProjectsByProjectNameWithPagination(self, gatewayId, userName, projectName, limit, offset):
    self._oprot.writeMessageBegin('searchProjectsByProjectNameWithPagination', TMessageType.CALL, self._seqid)
    args = searchProjectsByProjectNameWithPagination_args()
    args.gatewayId = gatewayId
    args.userName = userName
    args.projectName = projectName
    args.limit = limit
    args.offset = offset
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_searchProjectsByProjectNameWithPagination(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = searchProjectsByProjectNameWithPagination_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "searchProjectsByProjectNameWithPagination failed: unknown result");

  def searchProjectsByProjectDesc(self, gatewayId, userName, description):
    """
    Get all Project for user by project description
    @param gatewayId
       The identifier for the requested gateway.
    @param userName
       The identifier of the user
    @param description
       The description to be matched
    @deprecated Instead use searchProjectsByProjectDescWithPagination

    Parameters:
     - gatewayId
     - userName
     - description
    """
    self.send_searchProjectsByProjectDesc(gatewayId, userName, description)
    return self.recv_searchProjectsByProjectDesc()

  def send_searchProjectsByProjectDesc(self, gatewayId, userName, description):
    self._oprot.writeMessageBegin('searchProjectsByProjectDesc', TMessageType.CALL, self._seqid)
    args = searchProjectsByProjectDesc_args()
    args.gatewayId = gatewayId
    args.userName = userName
    args.description = description
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_searchProjectsByProjectDesc(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = searchProjectsByProjectDesc_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "searchProjectsByProjectDesc failed: unknown result");

  def searchProjectsByProjectDescWithPagination(self, gatewayId, userName, description, limit, offset):
    """
    Search and get all Projects for user by project description with pagination. Results
    will be ordered based on creation time DESC

    @param gatewayId
       The identifier for the requested gateway.
    @param userName
       The identifier of the user
    @param description
       The description to be matched
    @param limit
       The amount results to be fetched
    @param offset
       The starting point of the results to be fetched

    Parameters:
     - gatewayId
     - userName
     - description
     - limit
     - offset
    """
    self.send_searchProjectsByProjectDescWithPagination(gatewayId, userName, description, limit, offset)
    return self.recv_searchProjectsByProjectDescWithPagination()

  def send_searchProjectsByProjectDescWithPagination(self, gatewayId, userName, description, limit, offset):
    self._oprot.writeMessageBegin('searchProjectsByProjectDescWithPagination', TMessageType.CALL, self._seqid)
    args = searchProjectsByProjectDescWithPagination_args()
    args.gatewayId = gatewayId
    args.userName = userName
    args.description = description
    args.limit = limit
    args.offset = offset
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_searchProjectsByProjectDescWithPagination(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = searchProjectsByProjectDescWithPagination_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "searchProjectsByProjectDescWithPagination failed: unknown result");

  def searchExperimentsByName(self, gatewayId, userName, expName):
    """
    Search Experiments by experiment name

    @param gatewayId
          Identifier of the requested gateway
    @param useNname
          Username of the requested user
    @param expName
          Experiment name to be matched
    @deprecated
          Instead use searchExperimentsByNameWithPagination


    Parameters:
     - gatewayId
     - userName
     - expName
    """
    self.send_searchExperimentsByName(gatewayId, userName, expName)
    return self.recv_searchExperimentsByName()

  def send_searchExperimentsByName(self, gatewayId, userName, expName):
    self._oprot.writeMessageBegin('searchExperimentsByName', TMessageType.CALL, self._seqid)
    args = searchExperimentsByName_args()
    args.gatewayId = gatewayId
    args.userName = userName
    args.expName = expName
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_searchExperimentsByName(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = searchExperimentsByName_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "searchExperimentsByName failed: unknown result");

  def searchExperimentsByNameWithPagination(self, gatewayId, userName, expName, limit, offset):
    """
    Search Experiments by experiment name with pagination. Results will be sorted
    based on creation time DESC

    @param gatewayId
          Identifier of the requested gateway
    @param userName
          Username of the requested user
    @param expName
          Experiment name to be matched
    @param limit
          Amount of results to be fetched
    @param offset
          The starting point of the results to be fetched

    Parameters:
     - gatewayId
     - userName
     - expName
     - limit
     - offset
    """
    self.send_searchExperimentsByNameWithPagination(gatewayId, userName, expName, limit, offset)
    return self.recv_searchExperimentsByNameWithPagination()

  def send_searchExperimentsByNameWithPagination(self, gatewayId, userName, expName, limit, offset):
    self._oprot.writeMessageBegin('searchExperimentsByNameWithPagination', TMessageType.CALL, self._seqid)
    args = searchExperimentsByNameWithPagination_args()
    args.gatewayId = gatewayId
    args.userName = userName
    args.expName = expName
    args.limit = limit
    args.offset = offset
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_searchExperimentsByNameWithPagination(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = searchExperimentsByNameWithPagination_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "searchExperimentsByNameWithPagination failed: unknown result");

  def searchExperimentsByDesc(self, gatewayId, userName, description):
    """
    Search Experiments by experiment name

    @param gatewayId
          Identifier of the requested gateway
    @param userName
          Username of the requested user
    @param description
          Experiment description to be matched
    @deprecated
          Instead use searchExperimentsByDescWithPagination

    Parameters:
     - gatewayId
     - userName
     - description
    """
    self.send_searchExperimentsByDesc(gatewayId, userName, description)
    return self.recv_searchExperimentsByDesc()

  def send_searchExperimentsByDesc(self, gatewayId, userName, description):
    self._oprot.writeMessageBegin('searchExperimentsByDesc', TMessageType.CALL, self._seqid)
    args = searchExperimentsByDesc_args()
    args.gatewayId = gatewayId
    args.userName = userName
    args.description = description
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_searchExperimentsByDesc(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = searchExperimentsByDesc_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "searchExperimentsByDesc failed: unknown result");

  def searchExperimentsByDescWithPagination(self, gatewayId, userName, description, limit, offset):
    """
    Search Experiments by experiment name with pagination. Results will be sorted
    based on creation time DESC

    @param gatewayId
          Identifier of the requested gateway
    @param userName
          Username of the requested user
    @param description
          Experiment description to be matched
    @param limit
          Amount of results to be fetched
    @param offset
          The starting point of the results to be fetched

    Parameters:
     - gatewayId
     - userName
     - description
     - limit
     - offset
    """
    self.send_searchExperimentsByDescWithPagination(gatewayId, userName, description, limit, offset)
    return self.recv_searchExperimentsByDescWithPagination()

  def send_searchExperimentsByDescWithPagination(self, gatewayId, userName, description, limit, offset):
    self._oprot.writeMessageBegin('searchExperimentsByDescWithPagination', TMessageType.CALL, self._seqid)
    args = searchExperimentsByDescWithPagination_args()
    args.gatewayId = gatewayId
    args.userName = userName
    args.description = description
    args.limit = limit
    args.offset = offset
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_searchExperimentsByDescWithPagination(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = searchExperimentsByDescWithPagination_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "searchExperimentsByDescWithPagination failed: unknown result");

  def searchExperimentsByApplication(self, gatewayId, userName, applicationId):
    """
    Search Experiments by application id

    @param gatewayId
          Identifier of the requested gateway
    @param userName
          Username of the requested user
    @param applicationId
          Application id to be matched
    @deprecated
          Instead use searchExperimentsByApplicationWithPagination

    Parameters:
     - gatewayId
     - userName
     - applicationId
    """
    self.send_searchExperimentsByApplication(gatewayId, userName, applicationId)
    return self.recv_searchExperimentsByApplication()

  def send_searchExperimentsByApplication(self, gatewayId, userName, applicationId):
    self._oprot.writeMessageBegin('searchExperimentsByApplication', TMessageType.CALL, self._seqid)
    args = searchExperimentsByApplication_args()
    args.gatewayId = gatewayId
    args.userName = userName
    args.applicationId = applicationId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_searchExperimentsByApplication(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = searchExperimentsByApplication_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "searchExperimentsByApplication failed: unknown result");

  def searchExperimentsByApplicationWithPagination(self, gatewayId, userName, applicationId, limit, offset):
    """
    Search Experiments by application id with pagination. Results will be sorted
    based on creation time DESC

    @param gatewayId
          Identifier of the requested gateway
    @param userName
          Username of the requested user
    @param applicationId
          Application id to be matched
    @param limit
          Amount of results to be fetched
    @param offset
          The starting point of the results to be fetched

    Parameters:
     - gatewayId
     - userName
     - applicationId
     - limit
     - offset
    """
    self.send_searchExperimentsByApplicationWithPagination(gatewayId, userName, applicationId, limit, offset)
    return self.recv_searchExperimentsByApplicationWithPagination()

  def send_searchExperimentsByApplicationWithPagination(self, gatewayId, userName, applicationId, limit, offset):
    self._oprot.writeMessageBegin('searchExperimentsByApplicationWithPagination', TMessageType.CALL, self._seqid)
    args = searchExperimentsByApplicationWithPagination_args()
    args.gatewayId = gatewayId
    args.userName = userName
    args.applicationId = applicationId
    args.limit = limit
    args.offset = offset
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_searchExperimentsByApplicationWithPagination(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = searchExperimentsByApplicationWithPagination_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "searchExperimentsByApplicationWithPagination failed: unknown result");

  def searchExperimentsByStatus(self, gatewayId, userName, experimentState):
    """
    Search Experiments by experiment status

    @param gatewayId
          Identifier of the requested gateway
    @param userName
          Username of the requested user
    @param experimentState
          Experiement state to be matched
    @deprecated
          Instead use searchExperimentsByStatusWithPagination

    Parameters:
     - gatewayId
     - userName
     - experimentState
    """
    self.send_searchExperimentsByStatus(gatewayId, userName, experimentState)
    return self.recv_searchExperimentsByStatus()

  def send_searchExperimentsByStatus(self, gatewayId, userName, experimentState):
    self._oprot.writeMessageBegin('searchExperimentsByStatus', TMessageType.CALL, self._seqid)
    args = searchExperimentsByStatus_args()
    args.gatewayId = gatewayId
    args.userName = userName
    args.experimentState = experimentState
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_searchExperimentsByStatus(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = searchExperimentsByStatus_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "searchExperimentsByStatus failed: unknown result");

  def searchExperimentsByStatusWithPagination(self, gatewayId, userName, experimentState, limit, offset):
    """
    Search Experiments by experiment status with pagination. Results will be sorted
    based on creation time DESC

    @param gatewayId
          Identifier of the requested gateway
    @param userName
          Username of the requested user
    @param experimentState
          Experiement state to be matched
    @param limit
          Amount of results to be fetched
    @param offset
          The starting point of the results to be fetched

    Parameters:
     - gatewayId
     - userName
     - experimentState
     - limit
     - offset
    """
    self.send_searchExperimentsByStatusWithPagination(gatewayId, userName, experimentState, limit, offset)
    return self.recv_searchExperimentsByStatusWithPagination()

  def send_searchExperimentsByStatusWithPagination(self, gatewayId, userName, experimentState, limit, offset):
    self._oprot.writeMessageBegin('searchExperimentsByStatusWithPagination', TMessageType.CALL, self._seqid)
    args = searchExperimentsByStatusWithPagination_args()
    args.gatewayId = gatewayId
    args.userName = userName
    args.experimentState = experimentState
    args.limit = limit
    args.offset = offset
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_searchExperimentsByStatusWithPagination(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = searchExperimentsByStatusWithPagination_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "searchExperimentsByStatusWithPagination failed: unknown result");

  def searchExperimentsByCreationTime(self, gatewayId, userName, fromTime, toTime):
    """
    Search Experiments by experiment creation time

    @param gatewayId
          Identifier of the requested gateway
    @param userName
          Username of the requested user
    @param fromTime
          Start time of the experiments creation time
    @param toTime
          End time of the  experiement creation time
    @deprecated
          Instead use searchExperimentsByCreationTimeWithPagination

    Parameters:
     - gatewayId
     - userName
     - fromTime
     - toTime
    """
    self.send_searchExperimentsByCreationTime(gatewayId, userName, fromTime, toTime)
    return self.recv_searchExperimentsByCreationTime()

  def send_searchExperimentsByCreationTime(self, gatewayId, userName, fromTime, toTime):
    self._oprot.writeMessageBegin('searchExperimentsByCreationTime', TMessageType.CALL, self._seqid)
    args = searchExperimentsByCreationTime_args()
    args.gatewayId = gatewayId
    args.userName = userName
    args.fromTime = fromTime
    args.toTime = toTime
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_searchExperimentsByCreationTime(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = searchExperimentsByCreationTime_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "searchExperimentsByCreationTime failed: unknown result");

  def searchExperimentsByCreationTimeWithPagination(self, gatewayId, userName, fromTime, toTime, limit, offset):
    """
    Search Experiments by experiment creation time with pagination. Results will be sorted
    based on creation time DESC

    @param gatewayId
          Identifier of the requested gateway
    @param userName
          Username of the requested user
    @param fromTime
          Start time of the experiments creation time
    @param toTime
          End time of the  experiement creation time
    @param limit
          Amount of results to be fetched
    @param offset
          The starting point of the results to be fetched

    Parameters:
     - gatewayId
     - userName
     - fromTime
     - toTime
     - limit
     - offset
    """
    self.send_searchExperimentsByCreationTimeWithPagination(gatewayId, userName, fromTime, toTime, limit, offset)
    return self.recv_searchExperimentsByCreationTimeWithPagination()

  def send_searchExperimentsByCreationTimeWithPagination(self, gatewayId, userName, fromTime, toTime, limit, offset):
    self._oprot.writeMessageBegin('searchExperimentsByCreationTimeWithPagination', TMessageType.CALL, self._seqid)
    args = searchExperimentsByCreationTimeWithPagination_args()
    args.gatewayId = gatewayId
    args.userName = userName
    args.fromTime = fromTime
    args.toTime = toTime
    args.limit = limit
    args.offset = offset
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_searchExperimentsByCreationTimeWithPagination(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = searchExperimentsByCreationTimeWithPagination_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "searchExperimentsByCreationTimeWithPagination failed: unknown result");

  def searchExperiments(self, gatewayId, userName, filters, limit, offset):
    """
    Search Experiments by using multiple filter criteria with pagination. Results will be sorted
    based on creation time DESC

    @param gatewayId
          Identifier of the requested gateway
    @param userName
          Username of the requested user
    @param filters
          map of multiple filter criteria.
    @param limit
          Amount of results to be fetched
    @param offset
          The starting point of the results to be fetched

    Parameters:
     - gatewayId
     - userName
     - filters
     - limit
     - offset
    """
    self.send_searchExperiments(gatewayId, userName, filters, limit, offset)
    return self.recv_searchExperiments()

  def send_searchExperiments(self, gatewayId, userName, filters, limit, offset):
    self._oprot.writeMessageBegin('searchExperiments', TMessageType.CALL, self._seqid)
    args = searchExperiments_args()
    args.gatewayId = gatewayId
    args.userName = userName
    args.filters = filters
    args.limit = limit
    args.offset = offset
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_searchExperiments(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = searchExperiments_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "searchExperiments failed: unknown result");

  def getExperimentStatistics(self, gatewayId, fromTime, toTime):
    """
    Get Experiment Statisitics for the given gateway for a specific time period
    @param gatewayId
          Identifier of the requested gateway
    @param fromTime
          Starting date time
    @param toTime
          Ending data time


    Parameters:
     - gatewayId
     - fromTime
     - toTime
    """
    self.send_getExperimentStatistics(gatewayId, fromTime, toTime)
    return self.recv_getExperimentStatistics()

  def send_getExperimentStatistics(self, gatewayId, fromTime, toTime):
    self._oprot.writeMessageBegin('getExperimentStatistics', TMessageType.CALL, self._seqid)
    args = getExperimentStatistics_args()
    args.gatewayId = gatewayId
    args.fromTime = fromTime
    args.toTime = toTime
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getExperimentStatistics(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getExperimentStatistics_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getExperimentStatistics failed: unknown result");

  def getAllExperimentsInProject(self, projectId):
    """
    Get all Experiments within a Project

    @param projectId
          Identifier of the project
    @deprecated
          Instead use  getAllExperimentsInProjectWithPagination

    Parameters:
     - projectId
    """
    self.send_getAllExperimentsInProject(projectId)
    return self.recv_getAllExperimentsInProject()

  def send_getAllExperimentsInProject(self, projectId):
    self._oprot.writeMessageBegin('getAllExperimentsInProject', TMessageType.CALL, self._seqid)
    args = getAllExperimentsInProject_args()
    args.projectId = projectId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getAllExperimentsInProject(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getAllExperimentsInProject_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    if result.pnfe is not None:
      raise result.pnfe
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getAllExperimentsInProject failed: unknown result");

  def getAllExperimentsInProjectWithPagination(self, projectId, limit, offset):
    """
    Get all Experiments within project with pagination. Results will be sorted
    based on creation time DESC

    @param projectId
          Identifier of the project
    @param limit
          Amount of results to be fetched
    @param offset
          The starting point of the results to be fetched

    Parameters:
     - projectId
     - limit
     - offset
    """
    self.send_getAllExperimentsInProjectWithPagination(projectId, limit, offset)
    return self.recv_getAllExperimentsInProjectWithPagination()

  def send_getAllExperimentsInProjectWithPagination(self, projectId, limit, offset):
    self._oprot.writeMessageBegin('getAllExperimentsInProjectWithPagination', TMessageType.CALL, self._seqid)
    args = getAllExperimentsInProjectWithPagination_args()
    args.projectId = projectId
    args.limit = limit
    args.offset = offset
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getAllExperimentsInProjectWithPagination(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getAllExperimentsInProjectWithPagination_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    if result.pnfe is not None:
      raise result.pnfe
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getAllExperimentsInProjectWithPagination failed: unknown result");

  def getAllUserExperiments(self, gatewayId, userName):
    """
    Get all Experiments by user

    @param gatewayId
          Identifier of the requesting gateway
    @param userName
          Username of the requested user
    @deprecated
          Instead use getAllUserExperimentsWithPagination

    Parameters:
     - gatewayId
     - userName
    """
    self.send_getAllUserExperiments(gatewayId, userName)
    return self.recv_getAllUserExperiments()

  def send_getAllUserExperiments(self, gatewayId, userName):
    self._oprot.writeMessageBegin('getAllUserExperiments', TMessageType.CALL, self._seqid)
    args = getAllUserExperiments_args()
    args.gatewayId = gatewayId
    args.userName = userName
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getAllUserExperiments(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getAllUserExperiments_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getAllUserExperiments failed: unknown result");

  def getAllUserExperimentsWithPagination(self, gatewayId, userName, limit, offset):
    """
    Get all Experiments by user pagination. Results will be sorted
    based on creation time DESC

    @param gatewayId
          Identifier of the requesting gateway
    @param userName
          Username of the requested user
    @param limit
          Amount of results to be fetched
    @param offset
          The starting point of the results to be fetched

    Parameters:
     - gatewayId
     - userName
     - limit
     - offset
    """
    self.send_getAllUserExperimentsWithPagination(gatewayId, userName, limit, offset)
    return self.recv_getAllUserExperimentsWithPagination()

  def send_getAllUserExperimentsWithPagination(self, gatewayId, userName, limit, offset):
    self._oprot.writeMessageBegin('getAllUserExperimentsWithPagination', TMessageType.CALL, self._seqid)
    args = getAllUserExperimentsWithPagination_args()
    args.gatewayId = gatewayId
    args.userName = userName
    args.limit = limit
    args.offset = offset
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getAllUserExperimentsWithPagination(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getAllUserExperimentsWithPagination_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getAllUserExperimentsWithPagination failed: unknown result");

  def createExperiment(self, gatewayId, experiment):
    """
    Create an experiment for the specified user belonging to the gateway. The gateway identity is not explicitly passed
      but inferred from the authentication header. This experiment is just a persistent place holder. The client
      has to subsequently configure and launch the created experiment. No action is taken on Airavata Server except
      registering the experiment in a persistent store.

    @param basicExperimentMetadata
       The create experiment will require the basic experiment metadata like the name and description, intended user,
         the gateway identifer and if the experiment should be shared public by defualt. During the creation of an experiment
         the ExperimentMetadata is a required field.

    @return
      The server-side generated.airavata.registry.core.experiment.globally unique identifier.

    @throws org.apache.airavata.model.error.InvalidRequestException
       For any incorrect forming of the request itself.

    @throws org.apache.airavata.model.error.AiravataClientException
       The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:

         UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
            step, then Airavata Registry will not have a provenance area setup. The client has to follow
            gateway registration steps and retry this request.

         AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
            For now this is a place holder.

         INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
            is implemented, the authorization will be more substantial.

    @throws org.apache.airavata.model.error.AiravataSystemException
       This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
          rather an Airavata Administrator will be notified to take corrective action.


    Parameters:
     - gatewayId
     - experiment
    """
    self.send_createExperiment(gatewayId, experiment)
    return self.recv_createExperiment()

  def send_createExperiment(self, gatewayId, experiment):
    self._oprot.writeMessageBegin('createExperiment', TMessageType.CALL, self._seqid)
    args = createExperiment_args()
    args.gatewayId = gatewayId
    args.experiment = experiment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_createExperiment(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = createExperiment_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "createExperiment failed: unknown result");

  def getExperiment(self, airavataExperimentId):
    """
    Fetch previously created experiment metadata.

    @param airavataExperimentId
       The identifier for the requested experiment. This is returned during the create experiment step.

    @return experimentMetada
      This method will return the previously stored experiment metadata.

    @throws org.apache.airavata.model.error.InvalidRequestException
       For any incorrect forming of the request itself.

    @throws org.apache.airavata.model.error.ExperimentNotFoundException
       If the specified experiment is not previously created, then an Experiment Not Found Exception is thrown.

    @throws org.apache.airavata.model.error.AiravataClientException
       The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
         
         UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
            step, then Airavata Registry will not have a provenance area setup. The client has to follow
            gateway registration steps and retry this request.

         AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
            For now this is a place holder.

         INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
            is implemented, the authorization will be more substantial.

    @throws org.apache.airavata.model.error.AiravataSystemException
       This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
          rather an Airavata Administrator will be notified to take corrective action.


    Parameters:
     - airavataExperimentId
    """
    self.send_getExperiment(airavataExperimentId)
    return self.recv_getExperiment()

  def send_getExperiment(self, airavataExperimentId):
    self._oprot.writeMessageBegin('getExperiment', TMessageType.CALL, self._seqid)
    args = getExperiment_args()
    args.airavataExperimentId = airavataExperimentId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getExperiment(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getExperiment_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.enf is not None:
      raise result.enf
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getExperiment failed: unknown result");

  def updateExperiment(self, airavataExperimentId, experiment):
    """
    Configure a previously created experiment with required inputs, scheduling and other quality of service
      parameters. This method only updates the experiment object within the registry. The experiment has to be launched
      to make it actionable by the server.

    @param airavataExperimentId
       The identifier for the requested experiment. This is returned during the create experiment step.

    @param experimentConfigurationData
       The configuration information of the experiment with application input parameters, computational resource scheduling
         information, special input output handling and additional quality of service parameters.

    @return
      This method call does not have a return value.

    @throws org.apache.airavata.model.error.InvalidRequestException
       For any incorrect forming of the request itself.

    @throws org.apache.airavata.model.error.ExperimentNotFoundException
       If the specified experiment is not previously created, then an Experiment Not Found Exception is thrown.

    @throws org.apache.airavata.model.error.AiravataClientException
       The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
         
         UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
            step, then Airavata Registry will not have a provenance area setup. The client has to follow
            gateway registration steps and retry this request.

         AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
            For now this is a place holder.

         INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
            is implemented, the authorization will be more substantial.

    @throws org.apache.airavata.model.error.AiravataSystemException
       This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
          rather an Airavata Administrator will be notified to take corrective action.


    Parameters:
     - airavataExperimentId
     - experiment
    """
    self.send_updateExperiment(airavataExperimentId, experiment)
    self.recv_updateExperiment()

  def send_updateExperiment(self, airavataExperimentId, experiment):
    self._oprot.writeMessageBegin('updateExperiment', TMessageType.CALL, self._seqid)
    args = updateExperiment_args()
    args.airavataExperimentId = airavataExperimentId
    args.experiment = experiment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateExperiment(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = updateExperiment_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.ire is not None:
      raise result.ire
    if result.enf is not None:
      raise result.enf
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    return

  def updateExperimentConfiguration(self, airavataExperimentId, userConfiguration):
    """
    Parameters:
     - airavataExperimentId
     - userConfiguration
    """
    self.send_updateExperimentConfiguration(airavataExperimentId, userConfiguration)
    self.recv_updateExperimentConfiguration()

  def send_updateExperimentConfiguration(self, airavataExperimentId, userConfiguration):
    self._oprot.writeMessageBegin('updateExperimentConfiguration', TMessageType.CALL, self._seqid)
    args = updateExperimentConfiguration_args()
    args.airavataExperimentId = airavataExperimentId
    args.userConfiguration = userConfiguration
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateExperimentConfiguration(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = updateExperimentConfiguration_result()
    result.read(iprot)
    iprot.readMessageEnd()
    return

  def updateResourceScheduleing(self, airavataExperimentId, resourceScheduling):
    """
    Parameters:
     - airavataExperimentId
     - resourceScheduling
    """
    self.send_updateResourceScheduleing(airavataExperimentId, resourceScheduling)
    self.recv_updateResourceScheduleing()

  def send_updateResourceScheduleing(self, airavataExperimentId, resourceScheduling):
    self._oprot.writeMessageBegin('updateResourceScheduleing', TMessageType.CALL, self._seqid)
    args = updateResourceScheduleing_args()
    args.airavataExperimentId = airavataExperimentId
    args.resourceScheduling = resourceScheduling
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateResourceScheduleing(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = updateResourceScheduleing_result()
    result.read(iprot)
    iprot.readMessageEnd()
    return

  def validateExperiment(self, airavataExperimentId):
    """
     *
     * Validate experiment configuration. A true in general indicates, the experiment is ready to be launched.
     *
     * @param experimentID
     * @return sucess/failure
     *
    *

    Parameters:
     - airavataExperimentId
    """
    self.send_validateExperiment(airavataExperimentId)
    return self.recv_validateExperiment()

  def send_validateExperiment(self, airavataExperimentId):
    self._oprot.writeMessageBegin('validateExperiment', TMessageType.CALL, self._seqid)
    args = validateExperiment_args()
    args.airavataExperimentId = airavataExperimentId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_validateExperiment(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = validateExperiment_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.enf is not None:
      raise result.enf
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "validateExperiment failed: unknown result");

  def launchExperiment(self, airavataExperimentId, airavataCredStoreToken):
    """
    Launch a previously created and configured experiment. Airavata Server will then start processing the request and appropriate
      notifications and intermediate and output data will be subsequently available for this experiment.

    @param airavataExperimentId
       The identifier for the requested experiment. This is returned during the create experiment step.

    @param airavataCredStoreToken:
      A requirement to execute experiments within Airavata is to first register the targeted remote computational account
        credentials with Airavata Credential Store. The administrative API (related to credential store) will return a
        generated token associated with the registered credentials. The client has to security posses this token id and is
        required to pass it to Airavata Server for all execution requests.
      Note: At this point only the credential store token is required so the string is directly passed here. In future if
        if more security credentials are enables, then the structure ExecutionSecurityParameters should be used.
      Note: This parameter is not persisted within Airavata Registry for security reasons.

    @return
      This method call does not have a return value.

    @throws org.apache.airavata.model.error.InvalidRequestException
       For any incorrect forming of the request itself.

    @throws org.apache.airavata.model.error.ExperimentNotFoundException
       If the specified experiment is not previously created, then an Experiment Not Found Exception is thrown.

    @throws org.apache.airavata.model.error.AiravataClientException
       The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
         
         UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
            step, then Airavata Registry will not have a provenance area setup. The client has to follow
            gateway registration steps and retry this request.

         AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
            For now this is a place holder.

         INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
            is implemented, the authorization will be more substantial.

    @throws org.apache.airavata.model.error.AiravataSystemException
       This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
          rather an Airavata Administrator will be notified to take corrective action.


    Parameters:
     - airavataExperimentId
     - airavataCredStoreToken
    """
    self.send_launchExperiment(airavataExperimentId, airavataCredStoreToken)
    self.recv_launchExperiment()

  def send_launchExperiment(self, airavataExperimentId, airavataCredStoreToken):
    self._oprot.writeMessageBegin('launchExperiment', TMessageType.CALL, self._seqid)
    args = launchExperiment_args()
    args.airavataExperimentId = airavataExperimentId
    args.airavataCredStoreToken = airavataCredStoreToken
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_launchExperiment(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = launchExperiment_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.ire is not None:
      raise result.ire
    if result.enf is not None:
      raise result.enf
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    if result.lve is not None:
      raise result.lve
    return

  def getExperimentStatus(self, airavataExperimentId):
    """
    Parameters:
     - airavataExperimentId
    """
    self.send_getExperimentStatus(airavataExperimentId)
    return self.recv_getExperimentStatus()

  def send_getExperimentStatus(self, airavataExperimentId):
    self._oprot.writeMessageBegin('getExperimentStatus', TMessageType.CALL, self._seqid)
    args = getExperimentStatus_args()
    args.airavataExperimentId = airavataExperimentId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getExperimentStatus(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getExperimentStatus_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.enf is not None:
      raise result.enf
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getExperimentStatus failed: unknown result");

  def getExperimentOutputs(self, airavataExperimentId):
    """
    Parameters:
     - airavataExperimentId
    """
    self.send_getExperimentOutputs(airavataExperimentId)
    return self.recv_getExperimentOutputs()

  def send_getExperimentOutputs(self, airavataExperimentId):
    self._oprot.writeMessageBegin('getExperimentOutputs', TMessageType.CALL, self._seqid)
    args = getExperimentOutputs_args()
    args.airavataExperimentId = airavataExperimentId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getExperimentOutputs(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getExperimentOutputs_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.enf is not None:
      raise result.enf
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getExperimentOutputs failed: unknown result");

  def getIntermediateOutputs(self, airavataExperimentId):
    """
    Parameters:
     - airavataExperimentId
    """
    self.send_getIntermediateOutputs(airavataExperimentId)
    return self.recv_getIntermediateOutputs()

  def send_getIntermediateOutputs(self, airavataExperimentId):
    self._oprot.writeMessageBegin('getIntermediateOutputs', TMessageType.CALL, self._seqid)
    args = getIntermediateOutputs_args()
    args.airavataExperimentId = airavataExperimentId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getIntermediateOutputs(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getIntermediateOutputs_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.enf is not None:
      raise result.enf
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getIntermediateOutputs failed: unknown result");

  def getJobStatuses(self, airavataExperimentId):
    """
    Parameters:
     - airavataExperimentId
    """
    self.send_getJobStatuses(airavataExperimentId)
    return self.recv_getJobStatuses()

  def send_getJobStatuses(self, airavataExperimentId):
    self._oprot.writeMessageBegin('getJobStatuses', TMessageType.CALL, self._seqid)
    args = getJobStatuses_args()
    args.airavataExperimentId = airavataExperimentId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getJobStatuses(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getJobStatuses_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.enf is not None:
      raise result.enf
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getJobStatuses failed: unknown result");

  def getJobDetails(self, airavataExperimentId):
    """
    Parameters:
     - airavataExperimentId
    """
    self.send_getJobDetails(airavataExperimentId)
    return self.recv_getJobDetails()

  def send_getJobDetails(self, airavataExperimentId):
    self._oprot.writeMessageBegin('getJobDetails', TMessageType.CALL, self._seqid)
    args = getJobDetails_args()
    args.airavataExperimentId = airavataExperimentId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getJobDetails(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getJobDetails_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.enf is not None:
      raise result.enf
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getJobDetails failed: unknown result");

  def getDataTransferDetails(self, airavataExperimentId):
    """
    Parameters:
     - airavataExperimentId
    """
    self.send_getDataTransferDetails(airavataExperimentId)
    return self.recv_getDataTransferDetails()

  def send_getDataTransferDetails(self, airavataExperimentId):
    self._oprot.writeMessageBegin('getDataTransferDetails', TMessageType.CALL, self._seqid)
    args = getDataTransferDetails_args()
    args.airavataExperimentId = airavataExperimentId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getDataTransferDetails(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getDataTransferDetails_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.enf is not None:
      raise result.enf
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getDataTransferDetails failed: unknown result");

  def cloneExperiment(self, existingExperimentID, newExperimentName):
    """
    Clone an specified experiment with a new name. A copy of the experiment configuration is made and is persisted with new metadata.
      The client has to subsequently update this configuration if needed and launch the cloned experiment.

    @param newExperimentName
       experiment name that should be used in the cloned experiment

    @param updatedExperiment
       Once an experiment is cloned, to disambiguate, the users are suggested to provide new metadata. This will again require
         the basic experiment metadata like the name and description, intended user, the gateway identifier and if the experiment
         should be shared public by default.

    @return
      The server-side generated.airavata.registry.core.experiment.globally unique identifier for the newly cloned experiment.

    @throws org.apache.airavata.model.error.InvalidRequestException
       For any incorrect forming of the request itself.

    @throws org.apache.airavata.model.error.ExperimentNotFoundException
       If the specified experiment is not previously created, then an Experiment Not Found Exception is thrown.

    @throws org.apache.airavata.model.error.AiravataClientException
       The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
         
         UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
            step, then Airavata Registry will not have a provenance area setup. The client has to follow
            gateway registration steps and retry this request.

         AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
            For now this is a place holder.

         INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
            is implemented, the authorization will be more substantial.

    @throws org.apache.airavata.model.error.AiravataSystemException
       This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
          rather an Airavata Administrator will be notified to take corrective action.


    Parameters:
     - existingExperimentID
     - newExperimentName
    """
    self.send_cloneExperiment(existingExperimentID, newExperimentName)
    return self.recv_cloneExperiment()

  def send_cloneExperiment(self, existingExperimentID, newExperimentName):
    self._oprot.writeMessageBegin('cloneExperiment', TMessageType.CALL, self._seqid)
    args = cloneExperiment_args()
    args.existingExperimentID = existingExperimentID
    args.newExperimentName = newExperimentName
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_cloneExperiment(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = cloneExperiment_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.enf is not None:
      raise result.enf
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "cloneExperiment failed: unknown result");

  def terminateExperiment(self, airavataExperimentId, tokenId):
    """
    Terminate a running experiment.

    @param airavataExperimentId
       The identifier for the requested experiment. This is returned during the create experiment step.

    @return
      This method call does not have a return value.

    @throws org.apache.airavata.model.error.InvalidRequestException
       For any incorrect forming of the request itself.

    @throws org.apache.airavata.model.error.ExperimentNotFoundException
       If the specified experiment is not previously created, then an Experiment Not Found Exception is thrown.

    @throws org.apache.airavata.model.error.AiravataClientException
       The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
         
         UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
            step, then Airavata Registry will not have a provenance area setup. The client has to follow
            gateway registration steps and retry this request.

         AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
            For now this is a place holder.

         INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
            is implemented, the authorization will be more substantial.

    @throws org.apache.airavata.model.error.AiravataSystemException
       This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
          rather an Airavata Administrator will be notified to take corrective action.


    Parameters:
     - airavataExperimentId
     - tokenId
    """
    self.send_terminateExperiment(airavataExperimentId, tokenId)
    self.recv_terminateExperiment()

  def send_terminateExperiment(self, airavataExperimentId, tokenId):
    self._oprot.writeMessageBegin('terminateExperiment', TMessageType.CALL, self._seqid)
    args = terminateExperiment_args()
    args.airavataExperimentId = airavataExperimentId
    args.tokenId = tokenId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_terminateExperiment(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = terminateExperiment_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.ire is not None:
      raise result.ire
    if result.enf is not None:
      raise result.enf
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    return

  def registerApplicationModule(self, gatewayId, applicationModule):
    """
    Register a Application Module.

    @param applicationModule
       Application Module Object created from the datamodel.

    @return appModuleId
      Returns a server-side generated airavata appModule globally unique identifier.


    Parameters:
     - gatewayId
     - applicationModule
    """
    self.send_registerApplicationModule(gatewayId, applicationModule)
    return self.recv_registerApplicationModule()

  def send_registerApplicationModule(self, gatewayId, applicationModule):
    self._oprot.writeMessageBegin('registerApplicationModule', TMessageType.CALL, self._seqid)
    args = registerApplicationModule_args()
    args.gatewayId = gatewayId
    args.applicationModule = applicationModule
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_registerApplicationModule(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = registerApplicationModule_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "registerApplicationModule failed: unknown result");

  def getApplicationModule(self, appModuleId):
    """
    Fetch a Application Module.

    @param appModuleId
      The identifier for the requested application module

    @return applicationModule
      Returns a application Module Object.


    Parameters:
     - appModuleId
    """
    self.send_getApplicationModule(appModuleId)
    return self.recv_getApplicationModule()

  def send_getApplicationModule(self, appModuleId):
    self._oprot.writeMessageBegin('getApplicationModule', TMessageType.CALL, self._seqid)
    args = getApplicationModule_args()
    args.appModuleId = appModuleId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getApplicationModule(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getApplicationModule_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getApplicationModule failed: unknown result");

  def updateApplicationModule(self, appModuleId, applicationModule):
    """
    Update a Application Module.

    @param appModuleId
      The identifier for the requested application module to be updated.

    @param applicationModule
       Application Module Object created from the datamodel.

    @return status
      Returns a success/failure of the update.


    Parameters:
     - appModuleId
     - applicationModule
    """
    self.send_updateApplicationModule(appModuleId, applicationModule)
    return self.recv_updateApplicationModule()

  def send_updateApplicationModule(self, appModuleId, applicationModule):
    self._oprot.writeMessageBegin('updateApplicationModule', TMessageType.CALL, self._seqid)
    args = updateApplicationModule_args()
    args.appModuleId = appModuleId
    args.applicationModule = applicationModule
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateApplicationModule(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = updateApplicationModule_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "updateApplicationModule failed: unknown result");

  def getAllAppModules(self, gatewayId):
    """
    Parameters:
     - gatewayId
    """
    self.send_getAllAppModules(gatewayId)
    return self.recv_getAllAppModules()

  def send_getAllAppModules(self, gatewayId):
    self._oprot.writeMessageBegin('getAllAppModules', TMessageType.CALL, self._seqid)
    args = getAllAppModules_args()
    args.gatewayId = gatewayId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getAllAppModules(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getAllAppModules_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getAllAppModules failed: unknown result");

  def deleteApplicationModule(self, appModuleId):
    """
    Delete a Application Module.

    @param appModuleId
      The identifier for the requested application module to be deleted.

    @return status
      Returns a success/failure of the deletion.


    Parameters:
     - appModuleId
    """
    self.send_deleteApplicationModule(appModuleId)
    return self.recv_deleteApplicationModule()

  def send_deleteApplicationModule(self, appModuleId):
    self._oprot.writeMessageBegin('deleteApplicationModule', TMessageType.CALL, self._seqid)
    args = deleteApplicationModule_args()
    args.appModuleId = appModuleId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_deleteApplicationModule(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = deleteApplicationModule_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "deleteApplicationModule failed: unknown result");

  def registerApplicationDeployment(self, gatewayId, applicationDeployment):
    """
    Register a Application Deployment.

    @param applicationModule
       Application Module Object created from the datamodel.

    @return appDeploymentId
      Returns a server-side generated airavata appDeployment globally unique identifier.


    Parameters:
     - gatewayId
     - applicationDeployment
    """
    self.send_registerApplicationDeployment(gatewayId, applicationDeployment)
    return self.recv_registerApplicationDeployment()

  def send_registerApplicationDeployment(self, gatewayId, applicationDeployment):
    self._oprot.writeMessageBegin('registerApplicationDeployment', TMessageType.CALL, self._seqid)
    args = registerApplicationDeployment_args()
    args.gatewayId = gatewayId
    args.applicationDeployment = applicationDeployment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_registerApplicationDeployment(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = registerApplicationDeployment_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "registerApplicationDeployment failed: unknown result");

  def getApplicationDeployment(self, appDeploymentId):
    """
    Fetch a Application Deployment.

    @param appDeploymentId
      The identifier for the requested application module

    @return applicationDeployment
      Returns a application Deployment Object.


    Parameters:
     - appDeploymentId
    """
    self.send_getApplicationDeployment(appDeploymentId)
    return self.recv_getApplicationDeployment()

  def send_getApplicationDeployment(self, appDeploymentId):
    self._oprot.writeMessageBegin('getApplicationDeployment', TMessageType.CALL, self._seqid)
    args = getApplicationDeployment_args()
    args.appDeploymentId = appDeploymentId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getApplicationDeployment(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getApplicationDeployment_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getApplicationDeployment failed: unknown result");

  def updateApplicationDeployment(self, appDeploymentId, applicationDeployment):
    """
    Update a Application Deployment.

    @param appDeploymentId
      The identifier for the requested application deployment to be updated.

    @param appDeployment
       Application Deployment Object created from the datamodel.

    @return status
      Returns a success/failure of the update.


    Parameters:
     - appDeploymentId
     - applicationDeployment
    """
    self.send_updateApplicationDeployment(appDeploymentId, applicationDeployment)
    return self.recv_updateApplicationDeployment()

  def send_updateApplicationDeployment(self, appDeploymentId, applicationDeployment):
    self._oprot.writeMessageBegin('updateApplicationDeployment', TMessageType.CALL, self._seqid)
    args = updateApplicationDeployment_args()
    args.appDeploymentId = appDeploymentId
    args.applicationDeployment = applicationDeployment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateApplicationDeployment(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = updateApplicationDeployment_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "updateApplicationDeployment failed: unknown result");

  def deleteApplicationDeployment(self, appDeploymentId):
    """
    Delete a Application deployment.

    @param appDeploymentId
      The identifier for the requested application deployment to be deleted.

    @return status
      Returns a success/failure of the deletion.


    Parameters:
     - appDeploymentId
    """
    self.send_deleteApplicationDeployment(appDeploymentId)
    return self.recv_deleteApplicationDeployment()

  def send_deleteApplicationDeployment(self, appDeploymentId):
    self._oprot.writeMessageBegin('deleteApplicationDeployment', TMessageType.CALL, self._seqid)
    args = deleteApplicationDeployment_args()
    args.appDeploymentId = appDeploymentId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_deleteApplicationDeployment(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = deleteApplicationDeployment_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "deleteApplicationDeployment failed: unknown result");

  def getAllApplicationDeployments(self, gatewayId):
    """
    Fetch all Application Deployment Descriptions.

    @return list<applicationDeployment.
      Returns the list of all application Deployment Objects.


    Parameters:
     - gatewayId
    """
    self.send_getAllApplicationDeployments(gatewayId)
    return self.recv_getAllApplicationDeployments()

  def send_getAllApplicationDeployments(self, gatewayId):
    self._oprot.writeMessageBegin('getAllApplicationDeployments', TMessageType.CALL, self._seqid)
    args = getAllApplicationDeployments_args()
    args.gatewayId = gatewayId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getAllApplicationDeployments(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getAllApplicationDeployments_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getAllApplicationDeployments failed: unknown result");

  def getAppModuleDeployedResources(self, appModuleId):
    """
    Fetch a list of Deployed Compute Hosts.

    @param appModuleId
      The identifier for the requested application module

    @return list<string>
      Returns a list of Deployed Resources.


    Parameters:
     - appModuleId
    """
    self.send_getAppModuleDeployedResources(appModuleId)
    return self.recv_getAppModuleDeployedResources()

  def send_getAppModuleDeployedResources(self, appModuleId):
    self._oprot.writeMessageBegin('getAppModuleDeployedResources', TMessageType.CALL, self._seqid)
    args = getAppModuleDeployedResources_args()
    args.appModuleId = appModuleId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getAppModuleDeployedResources(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getAppModuleDeployedResources_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getAppModuleDeployedResources failed: unknown result");

  def registerApplicationInterface(self, gatewayId, applicationInterface):
    """
    Register a Application Interface.

    @param applicationModule
       Application Module Object created from the datamodel.

    @return appInterfaceId
      Returns a server-side generated airavata application interface globally unique identifier.


    Parameters:
     - gatewayId
     - applicationInterface
    """
    self.send_registerApplicationInterface(gatewayId, applicationInterface)
    return self.recv_registerApplicationInterface()

  def send_registerApplicationInterface(self, gatewayId, applicationInterface):
    self._oprot.writeMessageBegin('registerApplicationInterface', TMessageType.CALL, self._seqid)
    args = registerApplicationInterface_args()
    args.gatewayId = gatewayId
    args.applicationInterface = applicationInterface
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_registerApplicationInterface(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = registerApplicationInterface_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "registerApplicationInterface failed: unknown result");

  def getApplicationInterface(self, appInterfaceId):
    """
    Fetch a Application Interface.

    @param appInterfaceId
      The identifier for the requested application module

    @return applicationInterface
      Returns a application Interface Object.



    Parameters:
     - appInterfaceId
    """
    self.send_getApplicationInterface(appInterfaceId)
    return self.recv_getApplicationInterface()

  def send_getApplicationInterface(self, appInterfaceId):
    self._oprot.writeMessageBegin('getApplicationInterface', TMessageType.CALL, self._seqid)
    args = getApplicationInterface_args()
    args.appInterfaceId = appInterfaceId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getApplicationInterface(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getApplicationInterface_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getApplicationInterface failed: unknown result");

  def updateApplicationInterface(self, appInterfaceId, applicationInterface):
    """
    Update a Application Interface.

    @param appInterfaceId
      The identifier for the requested application deployment to be updated.

    @param appInterface
       Application Interface Object created from the datamodel.

    @return status
      Returns a success/failure of the update.



    Parameters:
     - appInterfaceId
     - applicationInterface
    """
    self.send_updateApplicationInterface(appInterfaceId, applicationInterface)
    return self.recv_updateApplicationInterface()

  def send_updateApplicationInterface(self, appInterfaceId, applicationInterface):
    self._oprot.writeMessageBegin('updateApplicationInterface', TMessageType.CALL, self._seqid)
    args = updateApplicationInterface_args()
    args.appInterfaceId = appInterfaceId
    args.applicationInterface = applicationInterface
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateApplicationInterface(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = updateApplicationInterface_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "updateApplicationInterface failed: unknown result");

  def deleteApplicationInterface(self, appInterfaceId):
    """
    Delete a Application Interface.

    @param appInterfaceId
      The identifier for the requested application interface to be deleted.

    @return status
      Returns a success/failure of the deletion.



    Parameters:
     - appInterfaceId
    """
    self.send_deleteApplicationInterface(appInterfaceId)
    return self.recv_deleteApplicationInterface()

  def send_deleteApplicationInterface(self, appInterfaceId):
    self._oprot.writeMessageBegin('deleteApplicationInterface', TMessageType.CALL, self._seqid)
    args = deleteApplicationInterface_args()
    args.appInterfaceId = appInterfaceId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_deleteApplicationInterface(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = deleteApplicationInterface_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "deleteApplicationInterface failed: unknown result");

  def getAllApplicationInterfaceNames(self, gatewayId):
    """
    Fetch name and id of  Application Interface documents.


    @return map<applicationId, applicationInterfaceNames>
      Returns a list of application interfaces with corresponsing id's


    Parameters:
     - gatewayId
    """
    self.send_getAllApplicationInterfaceNames(gatewayId)
    return self.recv_getAllApplicationInterfaceNames()

  def send_getAllApplicationInterfaceNames(self, gatewayId):
    self._oprot.writeMessageBegin('getAllApplicationInterfaceNames', TMessageType.CALL, self._seqid)
    args = getAllApplicationInterfaceNames_args()
    args.gatewayId = gatewayId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getAllApplicationInterfaceNames(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getAllApplicationInterfaceNames_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getAllApplicationInterfaceNames failed: unknown result");

  def getAllApplicationInterfaces(self, gatewayId):
    """
    Fetch all Application Interface documents.


    @return map<applicationId, applicationInterfaceNames>
      Returns a list of application interfaces documents


    Parameters:
     - gatewayId
    """
    self.send_getAllApplicationInterfaces(gatewayId)
    return self.recv_getAllApplicationInterfaces()

  def send_getAllApplicationInterfaces(self, gatewayId):
    self._oprot.writeMessageBegin('getAllApplicationInterfaces', TMessageType.CALL, self._seqid)
    args = getAllApplicationInterfaces_args()
    args.gatewayId = gatewayId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getAllApplicationInterfaces(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getAllApplicationInterfaces_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getAllApplicationInterfaces failed: unknown result");

  def getApplicationInputs(self, appInterfaceId):
    """
    Fetch the list of Application Inputs.

    @param appInterfaceId
      The identifier for the requested application interface

    @return list<application_interface_model.InputDataObjectType>
      Returns a list of application inputs.


    Parameters:
     - appInterfaceId
    """
    self.send_getApplicationInputs(appInterfaceId)
    return self.recv_getApplicationInputs()

  def send_getApplicationInputs(self, appInterfaceId):
    self._oprot.writeMessageBegin('getApplicationInputs', TMessageType.CALL, self._seqid)
    args = getApplicationInputs_args()
    args.appInterfaceId = appInterfaceId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getApplicationInputs(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getApplicationInputs_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getApplicationInputs failed: unknown result");

  def getApplicationOutputs(self, appInterfaceId):
    """
    Fetch the list of Application Outputs.

    @param appInterfaceId
      The identifier for the requested application interface

    @return list<application_interface_model.OutputDataObjectType>
      Returns a list of application outputs.


    Parameters:
     - appInterfaceId
    """
    self.send_getApplicationOutputs(appInterfaceId)
    return self.recv_getApplicationOutputs()

  def send_getApplicationOutputs(self, appInterfaceId):
    self._oprot.writeMessageBegin('getApplicationOutputs', TMessageType.CALL, self._seqid)
    args = getApplicationOutputs_args()
    args.appInterfaceId = appInterfaceId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getApplicationOutputs(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getApplicationOutputs_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getApplicationOutputs failed: unknown result");

  def getAvailableAppInterfaceComputeResources(self, appInterfaceId):
    """
    Fetch a list of all deployed Compute Hosts for a given application interfaces.

    @param appInterfaceId
      The identifier for the requested application interface

    @return map<computeResourceId, computeResourceName>
      A map of registered compute resource id's and their corresponding hostnames.
       Deployments of each modules listed within the interfaces will be listed.


    Parameters:
     - appInterfaceId
    """
    self.send_getAvailableAppInterfaceComputeResources(appInterfaceId)
    return self.recv_getAvailableAppInterfaceComputeResources()

  def send_getAvailableAppInterfaceComputeResources(self, appInterfaceId):
    self._oprot.writeMessageBegin('getAvailableAppInterfaceComputeResources', TMessageType.CALL, self._seqid)
    args = getAvailableAppInterfaceComputeResources_args()
    args.appInterfaceId = appInterfaceId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getAvailableAppInterfaceComputeResources(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getAvailableAppInterfaceComputeResources_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getAvailableAppInterfaceComputeResources failed: unknown result");

  def registerComputeResource(self, computeResourceDescription):
    """
    Register a Compute Resource.

    @param computeResourceDescription
       Compute Resource Object created from the datamodel.

    @return computeResourceId
      Returns a server-side generated airavata compute resource globally unique identifier.


    Parameters:
     - computeResourceDescription
    """
    self.send_registerComputeResource(computeResourceDescription)
    return self.recv_registerComputeResource()

  def send_registerComputeResource(self, computeResourceDescription):
    self._oprot.writeMessageBegin('registerComputeResource', TMessageType.CALL, self._seqid)
    args = registerComputeResource_args()
    args.computeResourceDescription = computeResourceDescription
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_registerComputeResource(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = registerComputeResource_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "registerComputeResource failed: unknown result");

  def getComputeResource(self, computeResourceId):
    """
    Fetch the given Compute Resource.

    @param computeResourceId
      The identifier for the requested compute resource

    @return computeResourceDescription
       Compute Resource Object created from the datamodel..


    Parameters:
     - computeResourceId
    """
    self.send_getComputeResource(computeResourceId)
    return self.recv_getComputeResource()

  def send_getComputeResource(self, computeResourceId):
    self._oprot.writeMessageBegin('getComputeResource', TMessageType.CALL, self._seqid)
    args = getComputeResource_args()
    args.computeResourceId = computeResourceId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getComputeResource(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getComputeResource_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getComputeResource failed: unknown result");

  def getAllComputeResourceNames(self):
    """
    Fetch all registered Compute Resources.

    @return A map of registered compute resource id's and thier corresponding hostnames.
       Compute Resource Object created from the datamodel..

    """
    self.send_getAllComputeResourceNames()
    return self.recv_getAllComputeResourceNames()

  def send_getAllComputeResourceNames(self):
    self._oprot.writeMessageBegin('getAllComputeResourceNames', TMessageType.CALL, self._seqid)
    args = getAllComputeResourceNames_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getAllComputeResourceNames(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getAllComputeResourceNames_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getAllComputeResourceNames failed: unknown result");

  def updateComputeResource(self, computeResourceId, computeResourceDescription):
    """
    Update a Compute Resource.

    @param computeResourceId
      The identifier for the requested compute resource to be updated.

    @param computeResourceDescription
       Compute Resource Object created from the datamodel.

    @return status
      Returns a success/failure of the update.


    Parameters:
     - computeResourceId
     - computeResourceDescription
    """
    self.send_updateComputeResource(computeResourceId, computeResourceDescription)
    return self.recv_updateComputeResource()

  def send_updateComputeResource(self, computeResourceId, computeResourceDescription):
    self._oprot.writeMessageBegin('updateComputeResource', TMessageType.CALL, self._seqid)
    args = updateComputeResource_args()
    args.computeResourceId = computeResourceId
    args.computeResourceDescription = computeResourceDescription
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateComputeResource(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = updateComputeResource_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "updateComputeResource failed: unknown result");

  def deleteComputeResource(self, computeResourceId):
    """
    Delete a Compute Resource.

    @param computeResourceId
      The identifier for the requested compute resource to be deleted.

    @return status
      Returns a success/failure of the deletion.


    Parameters:
     - computeResourceId
    """
    self.send_deleteComputeResource(computeResourceId)
    return self.recv_deleteComputeResource()

  def send_deleteComputeResource(self, computeResourceId):
    self._oprot.writeMessageBegin('deleteComputeResource', TMessageType.CALL, self._seqid)
    args = deleteComputeResource_args()
    args.computeResourceId = computeResourceId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_deleteComputeResource(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = deleteComputeResource_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "deleteComputeResource failed: unknown result");

  def addLocalSubmissionDetails(self, computeResourceId, priorityOrder, localSubmission):
    """
    Add a Local Job Submission details to a compute resource
     App catalog will return a jobSubmissionInterfaceId which will be added to the jobSubmissionInterfaces.

    @param computeResourceId
      The identifier of the compute resource to which JobSubmission protocol to be added

    @param priorityOrder
      Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.

    @param localSubmission
      The LOCALSubmission object to be added to the resource.

    @return status
      Returns the unique job submission id.


    Parameters:
     - computeResourceId
     - priorityOrder
     - localSubmission
    """
    self.send_addLocalSubmissionDetails(computeResourceId, priorityOrder, localSubmission)
    return self.recv_addLocalSubmissionDetails()

  def send_addLocalSubmissionDetails(self, computeResourceId, priorityOrder, localSubmission):
    self._oprot.writeMessageBegin('addLocalSubmissionDetails', TMessageType.CALL, self._seqid)
    args = addLocalSubmissionDetails_args()
    args.computeResourceId = computeResourceId
    args.priorityOrder = priorityOrder
    args.localSubmission = localSubmission
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addLocalSubmissionDetails(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = addLocalSubmissionDetails_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "addLocalSubmissionDetails failed: unknown result");

  def updateLocalSubmissionDetails(self, jobSubmissionInterfaceId, localSubmission):
    """
    Update the given Local Job Submission details

    @param jobSubmissionInterfaceId
      The identifier of the JobSubmission Interface to be updated.

    @param localSubmission
      The LOCALSubmission object to be updated.

    @return status
      Returns a success/failure of the deletion.


    Parameters:
     - jobSubmissionInterfaceId
     - localSubmission
    """
    self.send_updateLocalSubmissionDetails(jobSubmissionInterfaceId, localSubmission)
    return self.recv_updateLocalSubmissionDetails()

  def send_updateLocalSubmissionDetails(self, jobSubmissionInterfaceId, localSubmission):
    self._oprot.writeMessageBegin('updateLocalSubmissionDetails', TMessageType.CALL, self._seqid)
    args = updateLocalSubmissionDetails_args()
    args.jobSubmissionInterfaceId = jobSubmissionInterfaceId
    args.localSubmission = localSubmission
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateLocalSubmissionDetails(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = updateLocalSubmissionDetails_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "updateLocalSubmissionDetails failed: unknown result");

  def getLocalJobSubmission(self, jobSubmissionId):
    """
    This method returns localJobSubmission object
    @param jobSubmissionInterfaceId
      The identifier of the JobSubmission Interface to be retrieved.
     @return LOCALSubmission instance


    Parameters:
     - jobSubmissionId
    """
    self.send_getLocalJobSubmission(jobSubmissionId)
    return self.recv_getLocalJobSubmission()

  def send_getLocalJobSubmission(self, jobSubmissionId):
    self._oprot.writeMessageBegin('getLocalJobSubmission', TMessageType.CALL, self._seqid)
    args = getLocalJobSubmission_args()
    args.jobSubmissionId = jobSubmissionId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getLocalJobSubmission(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getLocalJobSubmission_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getLocalJobSubmission failed: unknown result");

  def addSSHJobSubmissionDetails(self, computeResourceId, priorityOrder, sshJobSubmission):
    """
    Add a SSH Job Submission details to a compute resource
     App catalog will return a jobSubmissionInterfaceId which will be added to the jobSubmissionInterfaces.

    @param computeResourceId
      The identifier of the compute resource to which JobSubmission protocol to be added

    @param priorityOrder
      Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.

    @param sshJobSubmission
      The SSHJobSubmission object to be added to the resource.

    @return status
      Returns the unique job submission id.


    Parameters:
     - computeResourceId
     - priorityOrder
     - sshJobSubmission
    """
    self.send_addSSHJobSubmissionDetails(computeResourceId, priorityOrder, sshJobSubmission)
    return self.recv_addSSHJobSubmissionDetails()

  def send_addSSHJobSubmissionDetails(self, computeResourceId, priorityOrder, sshJobSubmission):
    self._oprot.writeMessageBegin('addSSHJobSubmissionDetails', TMessageType.CALL, self._seqid)
    args = addSSHJobSubmissionDetails_args()
    args.computeResourceId = computeResourceId
    args.priorityOrder = priorityOrder
    args.sshJobSubmission = sshJobSubmission
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addSSHJobSubmissionDetails(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = addSSHJobSubmissionDetails_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "addSSHJobSubmissionDetails failed: unknown result");

  def getSSHJobSubmission(self, jobSubmissionId):
    """
    This method returns SSHJobSubmission object
    @param jobSubmissionInterfaceId
      The identifier of the JobSubmission Interface to be retrieved.
     @return SSHJobSubmission instance


    Parameters:
     - jobSubmissionId
    """
    self.send_getSSHJobSubmission(jobSubmissionId)
    return self.recv_getSSHJobSubmission()

  def send_getSSHJobSubmission(self, jobSubmissionId):
    self._oprot.writeMessageBegin('getSSHJobSubmission', TMessageType.CALL, self._seqid)
    args = getSSHJobSubmission_args()
    args.jobSubmissionId = jobSubmissionId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getSSHJobSubmission(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getSSHJobSubmission_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getSSHJobSubmission failed: unknown result");

  def addUNICOREJobSubmissionDetails(self, computeResourceId, priorityOrder, unicoreJobSubmission):
    """
    Add a UNICORE Job Submission details to a compute resource
     App catalog will return a jobSubmissionInterfaceId which will be added to the jobSubmissionInterfaces.

    @param computeResourceId
      The identifier of the compute resource to which JobSubmission protocol to be added

    @param priorityOrder
      Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.

    @param unicoreJobSubmission
      The UnicoreJobSubmission object to be added to the resource.

    @return status
     Returns the unique job submission id.


    Parameters:
     - computeResourceId
     - priorityOrder
     - unicoreJobSubmission
    """
    self.send_addUNICOREJobSubmissionDetails(computeResourceId, priorityOrder, unicoreJobSubmission)
    return self.recv_addUNICOREJobSubmissionDetails()

  def send_addUNICOREJobSubmissionDetails(self, computeResourceId, priorityOrder, unicoreJobSubmission):
    self._oprot.writeMessageBegin('addUNICOREJobSubmissionDetails', TMessageType.CALL, self._seqid)
    args = addUNICOREJobSubmissionDetails_args()
    args.computeResourceId = computeResourceId
    args.priorityOrder = priorityOrder
    args.unicoreJobSubmission = unicoreJobSubmission
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addUNICOREJobSubmissionDetails(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = addUNICOREJobSubmissionDetails_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "addUNICOREJobSubmissionDetails failed: unknown result");

  def getUnicoreJobSubmission(self, jobSubmissionId):
    """
      * This method returns UnicoreJobSubmission object
      * @param jobSubmissionInterfaceId
      *   The identifier of the JobSubmission Interface to be retrieved.
      *  @return UnicoreJobSubmission instance
    *

    Parameters:
     - jobSubmissionId
    """
    self.send_getUnicoreJobSubmission(jobSubmissionId)
    return self.recv_getUnicoreJobSubmission()

  def send_getUnicoreJobSubmission(self, jobSubmissionId):
    self._oprot.writeMessageBegin('getUnicoreJobSubmission', TMessageType.CALL, self._seqid)
    args = getUnicoreJobSubmission_args()
    args.jobSubmissionId = jobSubmissionId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getUnicoreJobSubmission(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getUnicoreJobSubmission_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getUnicoreJobSubmission failed: unknown result");

  def addCloudJobSubmissionDetails(self, computeResourceId, priorityOrder, cloudSubmission):
    """
       * Add a Cloud Job Submission details to a compute resource
       *  App catalog will return a jobSubmissionInterfaceId which will be added to the jobSubmissionInterfaces.
       *
       * @param computeResourceId
       *   The identifier of the compute resource to which JobSubmission protocol to be added
       *
       * @param priorityOrder
       *   Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.
       *
       * @param sshJobSubmission
       *   The SSHJobSubmission object to be added to the resource.
       *
       * @return status
       *   Returns the unique job submission id.
    *

    Parameters:
     - computeResourceId
     - priorityOrder
     - cloudSubmission
    """
    self.send_addCloudJobSubmissionDetails(computeResourceId, priorityOrder, cloudSubmission)
    return self.recv_addCloudJobSubmissionDetails()

  def send_addCloudJobSubmissionDetails(self, computeResourceId, priorityOrder, cloudSubmission):
    self._oprot.writeMessageBegin('addCloudJobSubmissionDetails', TMessageType.CALL, self._seqid)
    args = addCloudJobSubmissionDetails_args()
    args.computeResourceId = computeResourceId
    args.priorityOrder = priorityOrder
    args.cloudSubmission = cloudSubmission
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addCloudJobSubmissionDetails(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = addCloudJobSubmissionDetails_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "addCloudJobSubmissionDetails failed: unknown result");

  def getCloudJobSubmission(self, jobSubmissionId):
    """
       * This method returns cloudJobSubmission object
       * @param jobSubmissionInterfaceI
           *   The identifier of the JobSubmission Interface to be retrieved.
       *  @return CloudJobSubmission instance
    *

    Parameters:
     - jobSubmissionId
    """
    self.send_getCloudJobSubmission(jobSubmissionId)
    return self.recv_getCloudJobSubmission()

  def send_getCloudJobSubmission(self, jobSubmissionId):
    self._oprot.writeMessageBegin('getCloudJobSubmission', TMessageType.CALL, self._seqid)
    args = getCloudJobSubmission_args()
    args.jobSubmissionId = jobSubmissionId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getCloudJobSubmission(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getCloudJobSubmission_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getCloudJobSubmission failed: unknown result");

  def updateSSHJobSubmissionDetails(self, jobSubmissionInterfaceId, sshJobSubmission):
    """
    Update the given SSH Job Submission details

    @param jobSubmissionInterfaceId
      The identifier of the JobSubmission Interface to be updated.

    @param sshJobSubmission
      The SSHJobSubmission object to be updated.

    @return status
      Returns a success/failure of the deletion.


    Parameters:
     - jobSubmissionInterfaceId
     - sshJobSubmission
    """
    self.send_updateSSHJobSubmissionDetails(jobSubmissionInterfaceId, sshJobSubmission)
    return self.recv_updateSSHJobSubmissionDetails()

  def send_updateSSHJobSubmissionDetails(self, jobSubmissionInterfaceId, sshJobSubmission):
    self._oprot.writeMessageBegin('updateSSHJobSubmissionDetails', TMessageType.CALL, self._seqid)
    args = updateSSHJobSubmissionDetails_args()
    args.jobSubmissionInterfaceId = jobSubmissionInterfaceId
    args.sshJobSubmission = sshJobSubmission
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateSSHJobSubmissionDetails(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = updateSSHJobSubmissionDetails_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "updateSSHJobSubmissionDetails failed: unknown result");

  def updateCloudJobSubmissionDetails(self, jobSubmissionInterfaceId, sshJobSubmission):
    """
    Update the given SSH Job Submission details

    @param jobSubmissionInterfaceId
      The identifier of the JobSubmission Interface to be updated.

    @param cloudJobSubmission
      The CloudJobSubmission object to be updated.

    @return status
      Returns a success/failure of the deletion.


    Parameters:
     - jobSubmissionInterfaceId
     - sshJobSubmission
    """
    self.send_updateCloudJobSubmissionDetails(jobSubmissionInterfaceId, sshJobSubmission)
    return self.recv_updateCloudJobSubmissionDetails()

  def send_updateCloudJobSubmissionDetails(self, jobSubmissionInterfaceId, sshJobSubmission):
    self._oprot.writeMessageBegin('updateCloudJobSubmissionDetails', TMessageType.CALL, self._seqid)
    args = updateCloudJobSubmissionDetails_args()
    args.jobSubmissionInterfaceId = jobSubmissionInterfaceId
    args.sshJobSubmission = sshJobSubmission
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateCloudJobSubmissionDetails(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = updateCloudJobSubmissionDetails_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "updateCloudJobSubmissionDetails failed: unknown result");

  def updateUnicoreJobSubmissionDetails(self, jobSubmissionInterfaceId, unicoreJobSubmission):
    """
    Parameters:
     - jobSubmissionInterfaceId
     - unicoreJobSubmission
    """
    self.send_updateUnicoreJobSubmissionDetails(jobSubmissionInterfaceId, unicoreJobSubmission)
    return self.recv_updateUnicoreJobSubmissionDetails()

  def send_updateUnicoreJobSubmissionDetails(self, jobSubmissionInterfaceId, unicoreJobSubmission):
    self._oprot.writeMessageBegin('updateUnicoreJobSubmissionDetails', TMessageType.CALL, self._seqid)
    args = updateUnicoreJobSubmissionDetails_args()
    args.jobSubmissionInterfaceId = jobSubmissionInterfaceId
    args.unicoreJobSubmission = unicoreJobSubmission
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateUnicoreJobSubmissionDetails(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = updateUnicoreJobSubmissionDetails_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "updateUnicoreJobSubmissionDetails failed: unknown result");

  def addLocalDataMovementDetails(self, computeResourceId, priorityOrder, localDataMovement):
    """
    Add a Local data movement details to a compute resource
     App catalog will return a dataMovementInterfaceId which will be added to the dataMovementInterfaces.

    @param computeResourceId
      The identifier of the compute resource to which JobSubmission protocol to be added

    @param priorityOrder
      Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.

    @param localDataMovement
      The LOCALDataMovement object to be added to the resource.

    @return status
      Returns the unique job submission id.


    Parameters:
     - computeResourceId
     - priorityOrder
     - localDataMovement
    """
    self.send_addLocalDataMovementDetails(computeResourceId, priorityOrder, localDataMovement)
    return self.recv_addLocalDataMovementDetails()

  def send_addLocalDataMovementDetails(self, computeResourceId, priorityOrder, localDataMovement):
    self._oprot.writeMessageBegin('addLocalDataMovementDetails', TMessageType.CALL, self._seqid)
    args = addLocalDataMovementDetails_args()
    args.computeResourceId = computeResourceId
    args.priorityOrder = priorityOrder
    args.localDataMovement = localDataMovement
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addLocalDataMovementDetails(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = addLocalDataMovementDetails_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "addLocalDataMovementDetails failed: unknown result");

  def updateLocalDataMovementDetails(self, dataMovementInterfaceId, localDataMovement):
    """
    Update the given Local data movement details

    @param dataMovementInterfaceId
      The identifier of the data movement Interface to be updated.

    @param localDataMovement
      The LOCALDataMovement object to be updated.

    @return status
      Returns a success/failure of the update.


    Parameters:
     - dataMovementInterfaceId
     - localDataMovement
    """
    self.send_updateLocalDataMovementDetails(dataMovementInterfaceId, localDataMovement)
    return self.recv_updateLocalDataMovementDetails()

  def send_updateLocalDataMovementDetails(self, dataMovementInterfaceId, localDataMovement):
    self._oprot.writeMessageBegin('updateLocalDataMovementDetails', TMessageType.CALL, self._seqid)
    args = updateLocalDataMovementDetails_args()
    args.dataMovementInterfaceId = dataMovementInterfaceId
    args.localDataMovement = localDataMovement
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateLocalDataMovementDetails(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = updateLocalDataMovementDetails_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "updateLocalDataMovementDetails failed: unknown result");

  def getLocalDataMovement(self, dataMovementId):
    """
            * This method returns local datamovement object
            * @param dataMovementId
            *   The identifier of the datamovement Interface to be retrieved.
            *  @return LOCALDataMovement instance
    *

    Parameters:
     - dataMovementId
    """
    self.send_getLocalDataMovement(dataMovementId)
    return self.recv_getLocalDataMovement()

  def send_getLocalDataMovement(self, dataMovementId):
    self._oprot.writeMessageBegin('getLocalDataMovement', TMessageType.CALL, self._seqid)
    args = getLocalDataMovement_args()
    args.dataMovementId = dataMovementId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getLocalDataMovement(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getLocalDataMovement_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getLocalDataMovement failed: unknown result");

  def addSCPDataMovementDetails(self, computeResourceId, priorityOrder, scpDataMovement):
    """
    Add a SCP data movement details to a compute resource
     App catalog will return a dataMovementInterfaceId which will be added to the dataMovementInterfaces.

    @param computeResourceId
      The identifier of the compute resource to which JobSubmission protocol to be added

    @param priorityOrder
      Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.

    @param scpDataMovement
      The SCPDataMovement object to be added to the resource.

    @return status
      Returns the unique job submission id.


    Parameters:
     - computeResourceId
     - priorityOrder
     - scpDataMovement
    """
    self.send_addSCPDataMovementDetails(computeResourceId, priorityOrder, scpDataMovement)
    return self.recv_addSCPDataMovementDetails()

  def send_addSCPDataMovementDetails(self, computeResourceId, priorityOrder, scpDataMovement):
    self._oprot.writeMessageBegin('addSCPDataMovementDetails', TMessageType.CALL, self._seqid)
    args = addSCPDataMovementDetails_args()
    args.computeResourceId = computeResourceId
    args.priorityOrder = priorityOrder
    args.scpDataMovement = scpDataMovement
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addSCPDataMovementDetails(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = addSCPDataMovementDetails_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "addSCPDataMovementDetails failed: unknown result");

  def updateSCPDataMovementDetails(self, dataMovementInterfaceId, scpDataMovement):
    """
    Update the given scp data movement details
     App catalog will return a dataMovementInterfaceId which will be added to the dataMovementInterfaces.

    @param dataMovementInterfaceId
      The identifier of the data movement Interface to be updated.

    @param scpDataMovement
      The SCPDataMovement object to be updated.

    @return status
      Returns a success/failure of the update.


    Parameters:
     - dataMovementInterfaceId
     - scpDataMovement
    """
    self.send_updateSCPDataMovementDetails(dataMovementInterfaceId, scpDataMovement)
    return self.recv_updateSCPDataMovementDetails()

  def send_updateSCPDataMovementDetails(self, dataMovementInterfaceId, scpDataMovement):
    self._oprot.writeMessageBegin('updateSCPDataMovementDetails', TMessageType.CALL, self._seqid)
    args = updateSCPDataMovementDetails_args()
    args.dataMovementInterfaceId = dataMovementInterfaceId
    args.scpDataMovement = scpDataMovement
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateSCPDataMovementDetails(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = updateSCPDataMovementDetails_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "updateSCPDataMovementDetails failed: unknown result");

  def getSCPDataMovement(self, dataMovementId):
    """
      * This method returns SCP datamovement object
      * @param dataMovementId
         *   The identifier of the datamovement Interface to be retrieved.
         *  @return SCPDataMovement instance
    *

    Parameters:
     - dataMovementId
    """
    self.send_getSCPDataMovement(dataMovementId)
    return self.recv_getSCPDataMovement()

  def send_getSCPDataMovement(self, dataMovementId):
    self._oprot.writeMessageBegin('getSCPDataMovement', TMessageType.CALL, self._seqid)
    args = getSCPDataMovement_args()
    args.dataMovementId = dataMovementId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getSCPDataMovement(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getSCPDataMovement_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getSCPDataMovement failed: unknown result");

  def addUnicoreDataMovementDetails(self, computeResourceId, priorityOrder, unicoreDataMovement):
    """
    Parameters:
     - computeResourceId
     - priorityOrder
     - unicoreDataMovement
    """
    self.send_addUnicoreDataMovementDetails(computeResourceId, priorityOrder, unicoreDataMovement)
    return self.recv_addUnicoreDataMovementDetails()

  def send_addUnicoreDataMovementDetails(self, computeResourceId, priorityOrder, unicoreDataMovement):
    self._oprot.writeMessageBegin('addUnicoreDataMovementDetails', TMessageType.CALL, self._seqid)
    args = addUnicoreDataMovementDetails_args()
    args.computeResourceId = computeResourceId
    args.priorityOrder = priorityOrder
    args.unicoreDataMovement = unicoreDataMovement
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addUnicoreDataMovementDetails(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = addUnicoreDataMovementDetails_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "addUnicoreDataMovementDetails failed: unknown result");

  def updateUnicoreDataMovementDetails(self, dataMovementInterfaceId, unicoreDataMovement):
    """
    Parameters:
     - dataMovementInterfaceId
     - unicoreDataMovement
    """
    self.send_updateUnicoreDataMovementDetails(dataMovementInterfaceId, unicoreDataMovement)
    return self.recv_updateUnicoreDataMovementDetails()

  def send_updateUnicoreDataMovementDetails(self, dataMovementInterfaceId, unicoreDataMovement):
    self._oprot.writeMessageBegin('updateUnicoreDataMovementDetails', TMessageType.CALL, self._seqid)
    args = updateUnicoreDataMovementDetails_args()
    args.dataMovementInterfaceId = dataMovementInterfaceId
    args.unicoreDataMovement = unicoreDataMovement
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateUnicoreDataMovementDetails(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = updateUnicoreDataMovementDetails_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "updateUnicoreDataMovementDetails failed: unknown result");

  def getUnicoreDataMovement(self, dataMovementId):
    """
    Parameters:
     - dataMovementId
    """
    self.send_getUnicoreDataMovement(dataMovementId)
    return self.recv_getUnicoreDataMovement()

  def send_getUnicoreDataMovement(self, dataMovementId):
    self._oprot.writeMessageBegin('getUnicoreDataMovement', TMessageType.CALL, self._seqid)
    args = getUnicoreDataMovement_args()
    args.dataMovementId = dataMovementId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getUnicoreDataMovement(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getUnicoreDataMovement_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getUnicoreDataMovement failed: unknown result");

  def addGridFTPDataMovementDetails(self, computeResourceId, priorityOrder, gridFTPDataMovement):
    """
    Add a GridFTP data movement details to a compute resource
     App catalog will return a dataMovementInterfaceId which will be added to the dataMovementInterfaces.

    @param computeResourceId
      The identifier of the compute resource to which JobSubmission protocol to be added

    @param priorityOrder
      Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.

    @param gridFTPDataMovement
      The GridFTPDataMovement object to be added to the resource.

    @return status
      Returns the unique job submission id.


    Parameters:
     - computeResourceId
     - priorityOrder
     - gridFTPDataMovement
    """
    self.send_addGridFTPDataMovementDetails(computeResourceId, priorityOrder, gridFTPDataMovement)
    return self.recv_addGridFTPDataMovementDetails()

  def send_addGridFTPDataMovementDetails(self, computeResourceId, priorityOrder, gridFTPDataMovement):
    self._oprot.writeMessageBegin('addGridFTPDataMovementDetails', TMessageType.CALL, self._seqid)
    args = addGridFTPDataMovementDetails_args()
    args.computeResourceId = computeResourceId
    args.priorityOrder = priorityOrder
    args.gridFTPDataMovement = gridFTPDataMovement
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addGridFTPDataMovementDetails(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = addGridFTPDataMovementDetails_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "addGridFTPDataMovementDetails failed: unknown result");

  def updateGridFTPDataMovementDetails(self, dataMovementInterfaceId, gridFTPDataMovement):
    """
    Update the given GridFTP data movement details to a compute resource
     App catalog will return a dataMovementInterfaceId which will be added to the dataMovementInterfaces.

    @param dataMovementInterfaceId
      The identifier of the data movement Interface to be updated.

    @param gridFTPDataMovement
      The GridFTPDataMovement object to be updated.

    @return status
      Returns a success/failure of the updation.


    Parameters:
     - dataMovementInterfaceId
     - gridFTPDataMovement
    """
    self.send_updateGridFTPDataMovementDetails(dataMovementInterfaceId, gridFTPDataMovement)
    return self.recv_updateGridFTPDataMovementDetails()

  def send_updateGridFTPDataMovementDetails(self, dataMovementInterfaceId, gridFTPDataMovement):
    self._oprot.writeMessageBegin('updateGridFTPDataMovementDetails', TMessageType.CALL, self._seqid)
    args = updateGridFTPDataMovementDetails_args()
    args.dataMovementInterfaceId = dataMovementInterfaceId
    args.gridFTPDataMovement = gridFTPDataMovement
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateGridFTPDataMovementDetails(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = updateGridFTPDataMovementDetails_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "updateGridFTPDataMovementDetails failed: unknown result");

  def getGridFTPDataMovement(self, dataMovementId):
    """
      * This method returns GridFTP datamovement object
      * @param dataMovementId
         *   The identifier of the datamovement Interface to be retrieved.
      *  @return GridFTPDataMovement instance
    *

    Parameters:
     - dataMovementId
    """
    self.send_getGridFTPDataMovement(dataMovementId)
    return self.recv_getGridFTPDataMovement()

  def send_getGridFTPDataMovement(self, dataMovementId):
    self._oprot.writeMessageBegin('getGridFTPDataMovement', TMessageType.CALL, self._seqid)
    args = getGridFTPDataMovement_args()
    args.dataMovementId = dataMovementId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getGridFTPDataMovement(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getGridFTPDataMovement_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getGridFTPDataMovement failed: unknown result");

  def changeJobSubmissionPriority(self, jobSubmissionInterfaceId, newPriorityOrder):
    """
    Change the priority of a given job submisison interface

    @param jobSubmissionInterfaceId
      The identifier of the JobSubmission Interface to be changed

    @param priorityOrder
      The new priority of the job manager interface.

    @return status
      Returns a success/failure of the change.


    Parameters:
     - jobSubmissionInterfaceId
     - newPriorityOrder
    """
    self.send_changeJobSubmissionPriority(jobSubmissionInterfaceId, newPriorityOrder)
    return self.recv_changeJobSubmissionPriority()

  def send_changeJobSubmissionPriority(self, jobSubmissionInterfaceId, newPriorityOrder):
    self._oprot.writeMessageBegin('changeJobSubmissionPriority', TMessageType.CALL, self._seqid)
    args = changeJobSubmissionPriority_args()
    args.jobSubmissionInterfaceId = jobSubmissionInterfaceId
    args.newPriorityOrder = newPriorityOrder
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_changeJobSubmissionPriority(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = changeJobSubmissionPriority_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "changeJobSubmissionPriority failed: unknown result");

  def changeDataMovementPriority(self, dataMovementInterfaceId, newPriorityOrder):
    """
    Change the priority of a given data movement interface

    @param dataMovementInterfaceId
      The identifier of the DataMovement Interface to be changed

    @param priorityOrder
      The new priority of the data movement interface.

    @return status
      Returns a success/failure of the change.


    Parameters:
     - dataMovementInterfaceId
     - newPriorityOrder
    """
    self.send_changeDataMovementPriority(dataMovementInterfaceId, newPriorityOrder)
    return self.recv_changeDataMovementPriority()

  def send_changeDataMovementPriority(self, dataMovementInterfaceId, newPriorityOrder):
    self._oprot.writeMessageBegin('changeDataMovementPriority', TMessageType.CALL, self._seqid)
    args = changeDataMovementPriority_args()
    args.dataMovementInterfaceId = dataMovementInterfaceId
    args.newPriorityOrder = newPriorityOrder
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_changeDataMovementPriority(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = changeDataMovementPriority_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "changeDataMovementPriority failed: unknown result");

  def changeJobSubmissionPriorities(self, jobSubmissionPriorityMap):
    """
    Change the priorities of a given set of job submission interfaces

    @param jobSubmissionPriorityMap
      A Map of identifiers of the JobSubmission Interfaces and thier associated priorities to be set.

    @return status
      Returns a success/failure of the changes.


    Parameters:
     - jobSubmissionPriorityMap
    """
    self.send_changeJobSubmissionPriorities(jobSubmissionPriorityMap)
    return self.recv_changeJobSubmissionPriorities()

  def send_changeJobSubmissionPriorities(self, jobSubmissionPriorityMap):
    self._oprot.writeMessageBegin('changeJobSubmissionPriorities', TMessageType.CALL, self._seqid)
    args = changeJobSubmissionPriorities_args()
    args.jobSubmissionPriorityMap = jobSubmissionPriorityMap
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_changeJobSubmissionPriorities(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = changeJobSubmissionPriorities_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "changeJobSubmissionPriorities failed: unknown result");

  def changeDataMovementPriorities(self, dataMovementPriorityMap):
    """
    Change the priorities of a given set of data movement interfaces

    @param dataMovementPriorityMap
      A Map of identifiers of the DataMovement Interfaces and thier associated priorities to be set.

    @return status
      Returns a success/failure of the changes.


    Parameters:
     - dataMovementPriorityMap
    """
    self.send_changeDataMovementPriorities(dataMovementPriorityMap)
    return self.recv_changeDataMovementPriorities()

  def send_changeDataMovementPriorities(self, dataMovementPriorityMap):
    self._oprot.writeMessageBegin('changeDataMovementPriorities', TMessageType.CALL, self._seqid)
    args = changeDataMovementPriorities_args()
    args.dataMovementPriorityMap = dataMovementPriorityMap
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_changeDataMovementPriorities(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = changeDataMovementPriorities_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "changeDataMovementPriorities failed: unknown result");

  def deleteJobSubmissionInterface(self, computeResourceId, jobSubmissionInterfaceId):
    """
    Delete a given job submisison interface

    @param jobSubmissionInterfaceId
      The identifier of the JobSubmission Interface to be changed

    @return status
      Returns a success/failure of the deletion.


    Parameters:
     - computeResourceId
     - jobSubmissionInterfaceId
    """
    self.send_deleteJobSubmissionInterface(computeResourceId, jobSubmissionInterfaceId)
    return self.recv_deleteJobSubmissionInterface()

  def send_deleteJobSubmissionInterface(self, computeResourceId, jobSubmissionInterfaceId):
    self._oprot.writeMessageBegin('deleteJobSubmissionInterface', TMessageType.CALL, self._seqid)
    args = deleteJobSubmissionInterface_args()
    args.computeResourceId = computeResourceId
    args.jobSubmissionInterfaceId = jobSubmissionInterfaceId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_deleteJobSubmissionInterface(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = deleteJobSubmissionInterface_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "deleteJobSubmissionInterface failed: unknown result");

  def deleteDataMovementInterface(self, computeResourceId, dataMovementInterfaceId):
    """
    Delete a given data movement interface

    @param dataMovementInterfaceId
      The identifier of the DataMovement Interface to be changed

    @return status
      Returns a success/failure of the deletion.


    Parameters:
     - computeResourceId
     - dataMovementInterfaceId
    """
    self.send_deleteDataMovementInterface(computeResourceId, dataMovementInterfaceId)
    return self.recv_deleteDataMovementInterface()

  def send_deleteDataMovementInterface(self, computeResourceId, dataMovementInterfaceId):
    self._oprot.writeMessageBegin('deleteDataMovementInterface', TMessageType.CALL, self._seqid)
    args = deleteDataMovementInterface_args()
    args.computeResourceId = computeResourceId
    args.dataMovementInterfaceId = dataMovementInterfaceId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_deleteDataMovementInterface(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = deleteDataMovementInterface_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "deleteDataMovementInterface failed: unknown result");

  def registerResourceJobManager(self, resourceJobManager):
    """
    Parameters:
     - resourceJobManager
    """
    self.send_registerResourceJobManager(resourceJobManager)
    return self.recv_registerResourceJobManager()

  def send_registerResourceJobManager(self, resourceJobManager):
    self._oprot.writeMessageBegin('registerResourceJobManager', TMessageType.CALL, self._seqid)
    args = registerResourceJobManager_args()
    args.resourceJobManager = resourceJobManager
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_registerResourceJobManager(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = registerResourceJobManager_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "registerResourceJobManager failed: unknown result");

  def updateResourceJobManager(self, resourceJobManagerId, updatedResourceJobManager):
    """
    Parameters:
     - resourceJobManagerId
     - updatedResourceJobManager
    """
    self.send_updateResourceJobManager(resourceJobManagerId, updatedResourceJobManager)
    return self.recv_updateResourceJobManager()

  def send_updateResourceJobManager(self, resourceJobManagerId, updatedResourceJobManager):
    self._oprot.writeMessageBegin('updateResourceJobManager', TMessageType.CALL, self._seqid)
    args = updateResourceJobManager_args()
    args.resourceJobManagerId = resourceJobManagerId
    args.updatedResourceJobManager = updatedResourceJobManager
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateResourceJobManager(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = updateResourceJobManager_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "updateResourceJobManager failed: unknown result");

  def getResourceJobManager(self, resourceJobManagerId):
    """
    Parameters:
     - resourceJobManagerId
    """
    self.send_getResourceJobManager(resourceJobManagerId)
    return self.recv_getResourceJobManager()

  def send_getResourceJobManager(self, resourceJobManagerId):
    self._oprot.writeMessageBegin('getResourceJobManager', TMessageType.CALL, self._seqid)
    args = getResourceJobManager_args()
    args.resourceJobManagerId = resourceJobManagerId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getResourceJobManager(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getResourceJobManager_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getResourceJobManager failed: unknown result");

  def deleteResourceJobManager(self, resourceJobManagerId):
    """
    Parameters:
     - resourceJobManagerId
    """
    self.send_deleteResourceJobManager(resourceJobManagerId)
    return self.recv_deleteResourceJobManager()

  def send_deleteResourceJobManager(self, resourceJobManagerId):
    self._oprot.writeMessageBegin('deleteResourceJobManager', TMessageType.CALL, self._seqid)
    args = deleteResourceJobManager_args()
    args.resourceJobManagerId = resourceJobManagerId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_deleteResourceJobManager(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = deleteResourceJobManager_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "deleteResourceJobManager failed: unknown result");

  def deleteBatchQueue(self, computeResourceId, queueName):
    """
    Parameters:
     - computeResourceId
     - queueName
    """
    self.send_deleteBatchQueue(computeResourceId, queueName)
    return self.recv_deleteBatchQueue()

  def send_deleteBatchQueue(self, computeResourceId, queueName):
    self._oprot.writeMessageBegin('deleteBatchQueue', TMessageType.CALL, self._seqid)
    args = deleteBatchQueue_args()
    args.computeResourceId = computeResourceId
    args.queueName = queueName
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_deleteBatchQueue(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = deleteBatchQueue_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "deleteBatchQueue failed: unknown result");

  def registerGatewayResourceProfile(self, gatewayResourceProfile):
    """
    Register a Gateway Resource Profile.

    @param gatewayResourceProfile
       Gateway Resource Profile Object.
       The GatewayID should be obtained from Airavata gateway registration and passed to register a corresponding
         resource profile.

    @return status
      Returns a success/failure of the update.


    Parameters:
     - gatewayResourceProfile
    """
    self.send_registerGatewayResourceProfile(gatewayResourceProfile)
    return self.recv_registerGatewayResourceProfile()

  def send_registerGatewayResourceProfile(self, gatewayResourceProfile):
    self._oprot.writeMessageBegin('registerGatewayResourceProfile', TMessageType.CALL, self._seqid)
    args = registerGatewayResourceProfile_args()
    args.gatewayResourceProfile = gatewayResourceProfile
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_registerGatewayResourceProfile(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = registerGatewayResourceProfile_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "registerGatewayResourceProfile failed: unknown result");

  def getGatewayResourceProfile(self, gatewayID):
    """
    Fetch the given Gateway Resource Profile.

    @param gatewayID
      The identifier for the requested gateway resource

    @return gatewayResourceProfile
       Gateway Resource Profile Object.


    Parameters:
     - gatewayID
    """
    self.send_getGatewayResourceProfile(gatewayID)
    return self.recv_getGatewayResourceProfile()

  def send_getGatewayResourceProfile(self, gatewayID):
    self._oprot.writeMessageBegin('getGatewayResourceProfile', TMessageType.CALL, self._seqid)
    args = getGatewayResourceProfile_args()
    args.gatewayID = gatewayID
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getGatewayResourceProfile(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getGatewayResourceProfile_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getGatewayResourceProfile failed: unknown result");

  def updateGatewayResourceProfile(self, gatewayID, gatewayResourceProfile):
    """
    Update a Gateway Resource Profile.

    @param gatewayID
      The identifier for the requested gateway resource to be updated.

    @param gatewayResourceProfile
       Gateway Resource Profile Object.

    @return status
      Returns a success/failure of the update.


    Parameters:
     - gatewayID
     - gatewayResourceProfile
    """
    self.send_updateGatewayResourceProfile(gatewayID, gatewayResourceProfile)
    return self.recv_updateGatewayResourceProfile()

  def send_updateGatewayResourceProfile(self, gatewayID, gatewayResourceProfile):
    self._oprot.writeMessageBegin('updateGatewayResourceProfile', TMessageType.CALL, self._seqid)
    args = updateGatewayResourceProfile_args()
    args.gatewayID = gatewayID
    args.gatewayResourceProfile = gatewayResourceProfile
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateGatewayResourceProfile(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = updateGatewayResourceProfile_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "updateGatewayResourceProfile failed: unknown result");

  def deleteGatewayResourceProfile(self, gatewayID):
    """
    Delete the given Gateway Resource Profile.

    @param gatewayID
      The identifier for the requested gateway resource to be deleted.

    @return status
      Returns a success/failure of the deletion.


    Parameters:
     - gatewayID
    """
    self.send_deleteGatewayResourceProfile(gatewayID)
    return self.recv_deleteGatewayResourceProfile()

  def send_deleteGatewayResourceProfile(self, gatewayID):
    self._oprot.writeMessageBegin('deleteGatewayResourceProfile', TMessageType.CALL, self._seqid)
    args = deleteGatewayResourceProfile_args()
    args.gatewayID = gatewayID
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_deleteGatewayResourceProfile(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = deleteGatewayResourceProfile_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "deleteGatewayResourceProfile failed: unknown result");

  def addGatewayComputeResourcePreference(self, gatewayID, computeResourceId, computeResourcePreference):
    """
    Add a Compute Resource Preference to a registered gateway profile.

    @param gatewayID
      The identifier for the gateway profile to be added.

    @param computeResourceId
      Preferences related to a particular compute resource

    @param computeResourcePreference
      The ComputeResourcePreference object to be added to the resource profile.

    @return status
      Returns a success/failure of the addition. If a profile already exists, this operation will fail.
       Instead an update should be used.


    Parameters:
     - gatewayID
     - computeResourceId
     - computeResourcePreference
    """
    self.send_addGatewayComputeResourcePreference(gatewayID, computeResourceId, computeResourcePreference)
    return self.recv_addGatewayComputeResourcePreference()

  def send_addGatewayComputeResourcePreference(self, gatewayID, computeResourceId, computeResourcePreference):
    self._oprot.writeMessageBegin('addGatewayComputeResourcePreference', TMessageType.CALL, self._seqid)
    args = addGatewayComputeResourcePreference_args()
    args.gatewayID = gatewayID
    args.computeResourceId = computeResourceId
    args.computeResourcePreference = computeResourcePreference
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addGatewayComputeResourcePreference(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = addGatewayComputeResourcePreference_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "addGatewayComputeResourcePreference failed: unknown result");

  def getGatewayComputeResourcePreference(self, gatewayID, computeResourceId):
    """
    Fetch a Compute Resource Preference of a registered gateway profile.

    @param gatewayID
      The identifier for the gateway profile to be requested

    @param computeResourceId
      Preferences related to a particular compute resource

    @return computeResourcePreference
      Returns the ComputeResourcePreference object.


    Parameters:
     - gatewayID
     - computeResourceId
    """
    self.send_getGatewayComputeResourcePreference(gatewayID, computeResourceId)
    return self.recv_getGatewayComputeResourcePreference()

  def send_getGatewayComputeResourcePreference(self, gatewayID, computeResourceId):
    self._oprot.writeMessageBegin('getGatewayComputeResourcePreference', TMessageType.CALL, self._seqid)
    args = getGatewayComputeResourcePreference_args()
    args.gatewayID = gatewayID
    args.computeResourceId = computeResourceId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getGatewayComputeResourcePreference(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getGatewayComputeResourcePreference_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getGatewayComputeResourcePreference failed: unknown result");

  def getAllGatewayComputeResourcePreferences(self, gatewayID):
    """
    Fetch all Compute Resource Preferences of a registered gateway profile.

    @param gatewayID
      The identifier for the gateway profile to be requested

    @return computeResourcePreference
      Returns the ComputeResourcePreference object.


    Parameters:
     - gatewayID
    """
    self.send_getAllGatewayComputeResourcePreferences(gatewayID)
    return self.recv_getAllGatewayComputeResourcePreferences()

  def send_getAllGatewayComputeResourcePreferences(self, gatewayID):
    self._oprot.writeMessageBegin('getAllGatewayComputeResourcePreferences', TMessageType.CALL, self._seqid)
    args = getAllGatewayComputeResourcePreferences_args()
    args.gatewayID = gatewayID
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getAllGatewayComputeResourcePreferences(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getAllGatewayComputeResourcePreferences_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getAllGatewayComputeResourcePreferences failed: unknown result");

  def getAllGatewayComputeResources(self):
    """
    Fetch all gateway profiles registered

    """
    self.send_getAllGatewayComputeResources()
    return self.recv_getAllGatewayComputeResources()

  def send_getAllGatewayComputeResources(self):
    self._oprot.writeMessageBegin('getAllGatewayComputeResources', TMessageType.CALL, self._seqid)
    args = getAllGatewayComputeResources_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getAllGatewayComputeResources(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getAllGatewayComputeResources_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getAllGatewayComputeResources failed: unknown result");

  def updateGatewayComputeResourcePreference(self, gatewayID, computeResourceId, computeResourcePreference):
    """
    Update a Compute Resource Preference to a registered gateway profile.

    @param gatewayID
      The identifier for the gateway profile to be updated.

    @param computeResourceId
      Preferences related to a particular compute resource

    @param computeResourcePreference
      The ComputeResourcePreference object to be updated to the resource profile.

    @return status
      Returns a success/failure of the updation.


    Parameters:
     - gatewayID
     - computeResourceId
     - computeResourcePreference
    """
    self.send_updateGatewayComputeResourcePreference(gatewayID, computeResourceId, computeResourcePreference)
    return self.recv_updateGatewayComputeResourcePreference()

  def send_updateGatewayComputeResourcePreference(self, gatewayID, computeResourceId, computeResourcePreference):
    self._oprot.writeMessageBegin('updateGatewayComputeResourcePreference', TMessageType.CALL, self._seqid)
    args = updateGatewayComputeResourcePreference_args()
    args.gatewayID = gatewayID
    args.computeResourceId = computeResourceId
    args.computeResourcePreference = computeResourcePreference
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateGatewayComputeResourcePreference(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = updateGatewayComputeResourcePreference_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "updateGatewayComputeResourcePreference failed: unknown result");

  def deleteGatewayComputeResourcePreference(self, gatewayID, computeResourceId):
    """
    Delete the Compute Resource Preference of a registered gateway profile.

    @param gatewayID
      The identifier for the gateway profile to be deleted.

    @param computeResourceId
      Preferences related to a particular compute resource

    @return status
      Returns a success/failure of the deletion.


    Parameters:
     - gatewayID
     - computeResourceId
    """
    self.send_deleteGatewayComputeResourcePreference(gatewayID, computeResourceId)
    return self.recv_deleteGatewayComputeResourcePreference()

  def send_deleteGatewayComputeResourcePreference(self, gatewayID, computeResourceId):
    self._oprot.writeMessageBegin('deleteGatewayComputeResourcePreference', TMessageType.CALL, self._seqid)
    args = deleteGatewayComputeResourcePreference_args()
    args.gatewayID = gatewayID
    args.computeResourceId = computeResourceId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_deleteGatewayComputeResourcePreference(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = deleteGatewayComputeResourcePreference_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "deleteGatewayComputeResourcePreference failed: unknown result");

  def getAllWorkflows(self, gatewayId):
    """
    Parameters:
     - gatewayId
    """
    self.send_getAllWorkflows(gatewayId)
    return self.recv_getAllWorkflows()

  def send_getAllWorkflows(self, gatewayId):
    self._oprot.writeMessageBegin('getAllWorkflows', TMessageType.CALL, self._seqid)
    args = getAllWorkflows_args()
    args.gatewayId = gatewayId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getAllWorkflows(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getAllWorkflows_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getAllWorkflows failed: unknown result");

  def getWorkflow(self, workflowTemplateId):
    """
    Parameters:
     - workflowTemplateId
    """
    self.send_getWorkflow(workflowTemplateId)
    return self.recv_getWorkflow()

  def send_getWorkflow(self, workflowTemplateId):
    self._oprot.writeMessageBegin('getWorkflow', TMessageType.CALL, self._seqid)
    args = getWorkflow_args()
    args.workflowTemplateId = workflowTemplateId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getWorkflow(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getWorkflow_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getWorkflow failed: unknown result");

  def deleteWorkflow(self, workflowTemplateId):
    """
    Parameters:
     - workflowTemplateId
    """
    self.send_deleteWorkflow(workflowTemplateId)
    self.recv_deleteWorkflow()

  def send_deleteWorkflow(self, workflowTemplateId):
    self._oprot.writeMessageBegin('deleteWorkflow', TMessageType.CALL, self._seqid)
    args = deleteWorkflow_args()
    args.workflowTemplateId = workflowTemplateId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_deleteWorkflow(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = deleteWorkflow_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    return

  def registerWorkflow(self, gatewayId, workflow):
    """
    Parameters:
     - gatewayId
     - workflow
    """
    self.send_registerWorkflow(gatewayId, workflow)
    return self.recv_registerWorkflow()

  def send_registerWorkflow(self, gatewayId, workflow):
    self._oprot.writeMessageBegin('registerWorkflow', TMessageType.CALL, self._seqid)
    args = registerWorkflow_args()
    args.gatewayId = gatewayId
    args.workflow = workflow
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_registerWorkflow(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = registerWorkflow_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "registerWorkflow failed: unknown result");

  def updateWorkflow(self, workflowTemplateId, workflow):
    """
    Parameters:
     - workflowTemplateId
     - workflow
    """
    self.send_updateWorkflow(workflowTemplateId, workflow)
    self.recv_updateWorkflow()

  def send_updateWorkflow(self, workflowTemplateId, workflow):
    self._oprot.writeMessageBegin('updateWorkflow', TMessageType.CALL, self._seqid)
    args = updateWorkflow_args()
    args.workflowTemplateId = workflowTemplateId
    args.workflow = workflow
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateWorkflow(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = updateWorkflow_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    return

  def getWorkflowTemplateId(self, workflowName):
    """
    Parameters:
     - workflowName
    """
    self.send_getWorkflowTemplateId(workflowName)
    return self.recv_getWorkflowTemplateId()

  def send_getWorkflowTemplateId(self, workflowName):
    self._oprot.writeMessageBegin('getWorkflowTemplateId', TMessageType.CALL, self._seqid)
    args = getWorkflowTemplateId_args()
    args.workflowName = workflowName
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getWorkflowTemplateId(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getWorkflowTemplateId_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getWorkflowTemplateId failed: unknown result");

  def isWorkflowExistWithName(self, workflowName):
    """
    Parameters:
     - workflowName
    """
    self.send_isWorkflowExistWithName(workflowName)
    return self.recv_isWorkflowExistWithName()

  def send_isWorkflowExistWithName(self, workflowName):
    self._oprot.writeMessageBegin('isWorkflowExistWithName', TMessageType.CALL, self._seqid)
    args = isWorkflowExistWithName_args()
    args.workflowName = workflowName
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_isWorkflowExistWithName(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = isWorkflowExistWithName_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ire is not None:
      raise result.ire
    if result.ace is not None:
      raise result.ace
    if result.ase is not None:
      raise result.ase
    raise TApplicationException(TApplicationException.MISSING_RESULT, "isWorkflowExistWithName failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["getAPIVersion"] = Processor.process_getAPIVersion
    self._processMap["addGateway"] = Processor.process_addGateway
    self._processMap["updateGateway"] = Processor.process_updateGateway
    self._processMap["getGateway"] = Processor.process_getGateway
    self._processMap["deleteGateway"] = Processor.process_deleteGateway
    self._processMap["getAllGateways"] = Processor.process_getAllGateways
    self._processMap["isGatewayExist"] = Processor.process_isGatewayExist
    self._processMap["generateAndRegisterSSHKeys"] = Processor.process_generateAndRegisterSSHKeys
    self._processMap["getSSHPubKey"] = Processor.process_getSSHPubKey
    self._processMap["getAllUserSSHPubKeys"] = Processor.process_getAllUserSSHPubKeys
    self._processMap["createProject"] = Processor.process_createProject
    self._processMap["updateProject"] = Processor.process_updateProject
    self._processMap["getProject"] = Processor.process_getProject
    self._processMap["deleteProject"] = Processor.process_deleteProject
    self._processMap["getAllUserProjects"] = Processor.process_getAllUserProjects
    self._processMap["getAllUserProjectsWithPagination"] = Processor.process_getAllUserProjectsWithPagination
    self._processMap["searchProjectsByProjectName"] = Processor.process_searchProjectsByProjectName
    self._processMap["searchProjectsByProjectNameWithPagination"] = Processor.process_searchProjectsByProjectNameWithPagination
    self._processMap["searchProjectsByProjectDesc"] = Processor.process_searchProjectsByProjectDesc
    self._processMap["searchProjectsByProjectDescWithPagination"] = Processor.process_searchProjectsByProjectDescWithPagination
    self._processMap["searchExperimentsByName"] = Processor.process_searchExperimentsByName
    self._processMap["searchExperimentsByNameWithPagination"] = Processor.process_searchExperimentsByNameWithPagination
    self._processMap["searchExperimentsByDesc"] = Processor.process_searchExperimentsByDesc
    self._processMap["searchExperimentsByDescWithPagination"] = Processor.process_searchExperimentsByDescWithPagination
    self._processMap["searchExperimentsByApplication"] = Processor.process_searchExperimentsByApplication
    self._processMap["searchExperimentsByApplicationWithPagination"] = Processor.process_searchExperimentsByApplicationWithPagination
    self._processMap["searchExperimentsByStatus"] = Processor.process_searchExperimentsByStatus
    self._processMap["searchExperimentsByStatusWithPagination"] = Processor.process_searchExperimentsByStatusWithPagination
    self._processMap["searchExperimentsByCreationTime"] = Processor.process_searchExperimentsByCreationTime
    self._processMap["searchExperimentsByCreationTimeWithPagination"] = Processor.process_searchExperimentsByCreationTimeWithPagination
    self._processMap["searchExperiments"] = Processor.process_searchExperiments
    self._processMap["getExperimentStatistics"] = Processor.process_getExperimentStatistics
    self._processMap["getAllExperimentsInProject"] = Processor.process_getAllExperimentsInProject
    self._processMap["getAllExperimentsInProjectWithPagination"] = Processor.process_getAllExperimentsInProjectWithPagination
    self._processMap["getAllUserExperiments"] = Processor.process_getAllUserExperiments
    self._processMap["getAllUserExperimentsWithPagination"] = Processor.process_getAllUserExperimentsWithPagination
    self._processMap["createExperiment"] = Processor.process_createExperiment
    self._processMap["getExperiment"] = Processor.process_getExperiment
    self._processMap["updateExperiment"] = Processor.process_updateExperiment
    self._processMap["updateExperimentConfiguration"] = Processor.process_updateExperimentConfiguration
    self._processMap["updateResourceScheduleing"] = Processor.process_updateResourceScheduleing
    self._processMap["validateExperiment"] = Processor.process_validateExperiment
    self._processMap["launchExperiment"] = Processor.process_launchExperiment
    self._processMap["getExperimentStatus"] = Processor.process_getExperimentStatus
    self._processMap["getExperimentOutputs"] = Processor.process_getExperimentOutputs
    self._processMap["getIntermediateOutputs"] = Processor.process_getIntermediateOutputs
    self._processMap["getJobStatuses"] = Processor.process_getJobStatuses
    self._processMap["getJobDetails"] = Processor.process_getJobDetails
    self._processMap["getDataTransferDetails"] = Processor.process_getDataTransferDetails
    self._processMap["cloneExperiment"] = Processor.process_cloneExperiment
    self._processMap["terminateExperiment"] = Processor.process_terminateExperiment
    self._processMap["registerApplicationModule"] = Processor.process_registerApplicationModule
    self._processMap["getApplicationModule"] = Processor.process_getApplicationModule
    self._processMap["updateApplicationModule"] = Processor.process_updateApplicationModule
    self._processMap["getAllAppModules"] = Processor.process_getAllAppModules
    self._processMap["deleteApplicationModule"] = Processor.process_deleteApplicationModule
    self._processMap["registerApplicationDeployment"] = Processor.process_registerApplicationDeployment
    self._processMap["getApplicationDeployment"] = Processor.process_getApplicationDeployment
    self._processMap["updateApplicationDeployment"] = Processor.process_updateApplicationDeployment
    self._processMap["deleteApplicationDeployment"] = Processor.process_deleteApplicationDeployment
    self._processMap["getAllApplicationDeployments"] = Processor.process_getAllApplicationDeployments
    self._processMap["getAppModuleDeployedResources"] = Processor.process_getAppModuleDeployedResources
    self._processMap["registerApplicationInterface"] = Processor.process_registerApplicationInterface
    self._processMap["getApplicationInterface"] = Processor.process_getApplicationInterface
    self._processMap["updateApplicationInterface"] = Processor.process_updateApplicationInterface
    self._processMap["deleteApplicationInterface"] = Processor.process_deleteApplicationInterface
    self._processMap["getAllApplicationInterfaceNames"] = Processor.process_getAllApplicationInterfaceNames
    self._processMap["getAllApplicationInterfaces"] = Processor.process_getAllApplicationInterfaces
    self._processMap["getApplicationInputs"] = Processor.process_getApplicationInputs
    self._processMap["getApplicationOutputs"] = Processor.process_getApplicationOutputs
    self._processMap["getAvailableAppInterfaceComputeResources"] = Processor.process_getAvailableAppInterfaceComputeResources
    self._processMap["registerComputeResource"] = Processor.process_registerComputeResource
    self._processMap["getComputeResource"] = Processor.process_getComputeResource
    self._processMap["getAllComputeResourceNames"] = Processor.process_getAllComputeResourceNames
    self._processMap["updateComputeResource"] = Processor.process_updateComputeResource
    self._processMap["deleteComputeResource"] = Processor.process_deleteComputeResource
    self._processMap["addLocalSubmissionDetails"] = Processor.process_addLocalSubmissionDetails
    self._processMap["updateLocalSubmissionDetails"] = Processor.process_updateLocalSubmissionDetails
    self._processMap["getLocalJobSubmission"] = Processor.process_getLocalJobSubmission
    self._processMap["addSSHJobSubmissionDetails"] = Processor.process_addSSHJobSubmissionDetails
    self._processMap["getSSHJobSubmission"] = Processor.process_getSSHJobSubmission
    self._processMap["addUNICOREJobSubmissionDetails"] = Processor.process_addUNICOREJobSubmissionDetails
    self._processMap["getUnicoreJobSubmission"] = Processor.process_getUnicoreJobSubmission
    self._processMap["addCloudJobSubmissionDetails"] = Processor.process_addCloudJobSubmissionDetails
    self._processMap["getCloudJobSubmission"] = Processor.process_getCloudJobSubmission
    self._processMap["updateSSHJobSubmissionDetails"] = Processor.process_updateSSHJobSubmissionDetails
    self._processMap["updateCloudJobSubmissionDetails"] = Processor.process_updateCloudJobSubmissionDetails
    self._processMap["updateUnicoreJobSubmissionDetails"] = Processor.process_updateUnicoreJobSubmissionDetails
    self._processMap["addLocalDataMovementDetails"] = Processor.process_addLocalDataMovementDetails
    self._processMap["updateLocalDataMovementDetails"] = Processor.process_updateLocalDataMovementDetails
    self._processMap["getLocalDataMovement"] = Processor.process_getLocalDataMovement
    self._processMap["addSCPDataMovementDetails"] = Processor.process_addSCPDataMovementDetails
    self._processMap["updateSCPDataMovementDetails"] = Processor.process_updateSCPDataMovementDetails
    self._processMap["getSCPDataMovement"] = Processor.process_getSCPDataMovement
    self._processMap["addUnicoreDataMovementDetails"] = Processor.process_addUnicoreDataMovementDetails
    self._processMap["updateUnicoreDataMovementDetails"] = Processor.process_updateUnicoreDataMovementDetails
    self._processMap["getUnicoreDataMovement"] = Processor.process_getUnicoreDataMovement
    self._processMap["addGridFTPDataMovementDetails"] = Processor.process_addGridFTPDataMovementDetails
    self._processMap["updateGridFTPDataMovementDetails"] = Processor.process_updateGridFTPDataMovementDetails
    self._processMap["getGridFTPDataMovement"] = Processor.process_getGridFTPDataMovement
    self._processMap["changeJobSubmissionPriority"] = Processor.process_changeJobSubmissionPriority
    self._processMap["changeDataMovementPriority"] = Processor.process_changeDataMovementPriority
    self._processMap["changeJobSubmissionPriorities"] = Processor.process_changeJobSubmissionPriorities
    self._processMap["changeDataMovementPriorities"] = Processor.process_changeDataMovementPriorities
    self._processMap["deleteJobSubmissionInterface"] = Processor.process_deleteJobSubmissionInterface
    self._processMap["deleteDataMovementInterface"] = Processor.process_deleteDataMovementInterface
    self._processMap["registerResourceJobManager"] = Processor.process_registerResourceJobManager
    self._processMap["updateResourceJobManager"] = Processor.process_updateResourceJobManager
    self._processMap["getResourceJobManager"] = Processor.process_getResourceJobManager
    self._processMap["deleteResourceJobManager"] = Processor.process_deleteResourceJobManager
    self._processMap["deleteBatchQueue"] = Processor.process_deleteBatchQueue
    self._processMap["registerGatewayResourceProfile"] = Processor.process_registerGatewayResourceProfile
    self._processMap["getGatewayResourceProfile"] = Processor.process_getGatewayResourceProfile
    self._processMap["updateGatewayResourceProfile"] = Processor.process_updateGatewayResourceProfile
    self._processMap["deleteGatewayResourceProfile"] = Processor.process_deleteGatewayResourceProfile
    self._processMap["addGatewayComputeResourcePreference"] = Processor.process_addGatewayComputeResourcePreference
    self._processMap["getGatewayComputeResourcePreference"] = Processor.process_getGatewayComputeResourcePreference
    self._processMap["getAllGatewayComputeResourcePreferences"] = Processor.process_getAllGatewayComputeResourcePreferences
    self._processMap["getAllGatewayComputeResources"] = Processor.process_getAllGatewayComputeResources
    self._processMap["updateGatewayComputeResourcePreference"] = Processor.process_updateGatewayComputeResourcePreference
    self._processMap["deleteGatewayComputeResourcePreference"] = Processor.process_deleteGatewayComputeResourcePreference
    self._processMap["getAllWorkflows"] = Processor.process_getAllWorkflows
    self._processMap["getWorkflow"] = Processor.process_getWorkflow
    self._processMap["deleteWorkflow"] = Processor.process_deleteWorkflow
    self._processMap["registerWorkflow"] = Processor.process_registerWorkflow
    self._processMap["updateWorkflow"] = Processor.process_updateWorkflow
    self._processMap["getWorkflowTemplateId"] = Processor.process_getWorkflowTemplateId
    self._processMap["isWorkflowExistWithName"] = Processor.process_isWorkflowExistWithName

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_getAPIVersion(self, seqid, iprot, oprot):
    args = getAPIVersion_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getAPIVersion_result()
    try:
      result.success = self._handler.getAPIVersion(args.authzToken)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    except apache.airavata.api.error.ttypes.AuthorizationException, ae:
      result.ae = ae
    oprot.writeMessageBegin("getAPIVersion", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_addGateway(self, seqid, iprot, oprot):
    args = addGateway_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = addGateway_result()
    try:
      result.success = self._handler.addGateway(args.gateway)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("addGateway", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateGateway(self, seqid, iprot, oprot):
    args = updateGateway_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateGateway_result()
    try:
      self._handler.updateGateway(args.gatewayId, args.updatedGateway)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("updateGateway", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getGateway(self, seqid, iprot, oprot):
    args = getGateway_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getGateway_result()
    try:
      result.success = self._handler.getGateway(args.gatewayId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getGateway", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_deleteGateway(self, seqid, iprot, oprot):
    args = deleteGateway_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = deleteGateway_result()
    try:
      result.success = self._handler.deleteGateway(args.gatewayId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("deleteGateway", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getAllGateways(self, seqid, iprot, oprot):
    args = getAllGateways_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getAllGateways_result()
    try:
      result.success = self._handler.getAllGateways()
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getAllGateways", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_isGatewayExist(self, seqid, iprot, oprot):
    args = isGatewayExist_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = isGatewayExist_result()
    try:
      result.success = self._handler.isGatewayExist(args.gatewayId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("isGatewayExist", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_generateAndRegisterSSHKeys(self, seqid, iprot, oprot):
    args = generateAndRegisterSSHKeys_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = generateAndRegisterSSHKeys_result()
    try:
      result.success = self._handler.generateAndRegisterSSHKeys(args.gatewayId, args.userName)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("generateAndRegisterSSHKeys", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getSSHPubKey(self, seqid, iprot, oprot):
    args = getSSHPubKey_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getSSHPubKey_result()
    try:
      result.success = self._handler.getSSHPubKey(args.airavataCredStoreToken)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getSSHPubKey", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getAllUserSSHPubKeys(self, seqid, iprot, oprot):
    args = getAllUserSSHPubKeys_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getAllUserSSHPubKeys_result()
    try:
      result.success = self._handler.getAllUserSSHPubKeys(args.userName)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getAllUserSSHPubKeys", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_createProject(self, seqid, iprot, oprot):
    args = createProject_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = createProject_result()
    try:
      result.success = self._handler.createProject(args.gatewayId, args.project)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("createProject", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateProject(self, seqid, iprot, oprot):
    args = updateProject_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateProject_result()
    try:
      self._handler.updateProject(args.projectId, args.updatedProject)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    except apache.airavata.api.error.ttypes.ProjectNotFoundException, pnfe:
      result.pnfe = pnfe
    oprot.writeMessageBegin("updateProject", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getProject(self, seqid, iprot, oprot):
    args = getProject_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getProject_result()
    try:
      result.success = self._handler.getProject(args.projectId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    except apache.airavata.api.error.ttypes.ProjectNotFoundException, pnfe:
      result.pnfe = pnfe
    oprot.writeMessageBegin("getProject", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_deleteProject(self, seqid, iprot, oprot):
    args = deleteProject_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = deleteProject_result()
    try:
      result.success = self._handler.deleteProject(args.projectId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    except apache.airavata.api.error.ttypes.ProjectNotFoundException, pnfe:
      result.pnfe = pnfe
    oprot.writeMessageBegin("deleteProject", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getAllUserProjects(self, seqid, iprot, oprot):
    args = getAllUserProjects_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getAllUserProjects_result()
    try:
      result.success = self._handler.getAllUserProjects(args.gatewayId, args.userName)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getAllUserProjects", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getAllUserProjectsWithPagination(self, seqid, iprot, oprot):
    args = getAllUserProjectsWithPagination_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getAllUserProjectsWithPagination_result()
    try:
      result.success = self._handler.getAllUserProjectsWithPagination(args.gatewayId, args.userName, args.limit, args.offset)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getAllUserProjectsWithPagination", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_searchProjectsByProjectName(self, seqid, iprot, oprot):
    args = searchProjectsByProjectName_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = searchProjectsByProjectName_result()
    try:
      result.success = self._handler.searchProjectsByProjectName(args.gatewayId, args.userName, args.projectName)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("searchProjectsByProjectName", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_searchProjectsByProjectNameWithPagination(self, seqid, iprot, oprot):
    args = searchProjectsByProjectNameWithPagination_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = searchProjectsByProjectNameWithPagination_result()
    try:
      result.success = self._handler.searchProjectsByProjectNameWithPagination(args.gatewayId, args.userName, args.projectName, args.limit, args.offset)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("searchProjectsByProjectNameWithPagination", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_searchProjectsByProjectDesc(self, seqid, iprot, oprot):
    args = searchProjectsByProjectDesc_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = searchProjectsByProjectDesc_result()
    try:
      result.success = self._handler.searchProjectsByProjectDesc(args.gatewayId, args.userName, args.description)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("searchProjectsByProjectDesc", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_searchProjectsByProjectDescWithPagination(self, seqid, iprot, oprot):
    args = searchProjectsByProjectDescWithPagination_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = searchProjectsByProjectDescWithPagination_result()
    try:
      result.success = self._handler.searchProjectsByProjectDescWithPagination(args.gatewayId, args.userName, args.description, args.limit, args.offset)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("searchProjectsByProjectDescWithPagination", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_searchExperimentsByName(self, seqid, iprot, oprot):
    args = searchExperimentsByName_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = searchExperimentsByName_result()
    try:
      result.success = self._handler.searchExperimentsByName(args.gatewayId, args.userName, args.expName)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("searchExperimentsByName", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_searchExperimentsByNameWithPagination(self, seqid, iprot, oprot):
    args = searchExperimentsByNameWithPagination_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = searchExperimentsByNameWithPagination_result()
    try:
      result.success = self._handler.searchExperimentsByNameWithPagination(args.gatewayId, args.userName, args.expName, args.limit, args.offset)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("searchExperimentsByNameWithPagination", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_searchExperimentsByDesc(self, seqid, iprot, oprot):
    args = searchExperimentsByDesc_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = searchExperimentsByDesc_result()
    try:
      result.success = self._handler.searchExperimentsByDesc(args.gatewayId, args.userName, args.description)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("searchExperimentsByDesc", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_searchExperimentsByDescWithPagination(self, seqid, iprot, oprot):
    args = searchExperimentsByDescWithPagination_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = searchExperimentsByDescWithPagination_result()
    try:
      result.success = self._handler.searchExperimentsByDescWithPagination(args.gatewayId, args.userName, args.description, args.limit, args.offset)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("searchExperimentsByDescWithPagination", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_searchExperimentsByApplication(self, seqid, iprot, oprot):
    args = searchExperimentsByApplication_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = searchExperimentsByApplication_result()
    try:
      result.success = self._handler.searchExperimentsByApplication(args.gatewayId, args.userName, args.applicationId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("searchExperimentsByApplication", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_searchExperimentsByApplicationWithPagination(self, seqid, iprot, oprot):
    args = searchExperimentsByApplicationWithPagination_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = searchExperimentsByApplicationWithPagination_result()
    try:
      result.success = self._handler.searchExperimentsByApplicationWithPagination(args.gatewayId, args.userName, args.applicationId, args.limit, args.offset)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("searchExperimentsByApplicationWithPagination", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_searchExperimentsByStatus(self, seqid, iprot, oprot):
    args = searchExperimentsByStatus_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = searchExperimentsByStatus_result()
    try:
      result.success = self._handler.searchExperimentsByStatus(args.gatewayId, args.userName, args.experimentState)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("searchExperimentsByStatus", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_searchExperimentsByStatusWithPagination(self, seqid, iprot, oprot):
    args = searchExperimentsByStatusWithPagination_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = searchExperimentsByStatusWithPagination_result()
    try:
      result.success = self._handler.searchExperimentsByStatusWithPagination(args.gatewayId, args.userName, args.experimentState, args.limit, args.offset)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("searchExperimentsByStatusWithPagination", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_searchExperimentsByCreationTime(self, seqid, iprot, oprot):
    args = searchExperimentsByCreationTime_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = searchExperimentsByCreationTime_result()
    try:
      result.success = self._handler.searchExperimentsByCreationTime(args.gatewayId, args.userName, args.fromTime, args.toTime)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("searchExperimentsByCreationTime", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_searchExperimentsByCreationTimeWithPagination(self, seqid, iprot, oprot):
    args = searchExperimentsByCreationTimeWithPagination_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = searchExperimentsByCreationTimeWithPagination_result()
    try:
      result.success = self._handler.searchExperimentsByCreationTimeWithPagination(args.gatewayId, args.userName, args.fromTime, args.toTime, args.limit, args.offset)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("searchExperimentsByCreationTimeWithPagination", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_searchExperiments(self, seqid, iprot, oprot):
    args = searchExperiments_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = searchExperiments_result()
    try:
      result.success = self._handler.searchExperiments(args.gatewayId, args.userName, args.filters, args.limit, args.offset)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("searchExperiments", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getExperimentStatistics(self, seqid, iprot, oprot):
    args = getExperimentStatistics_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getExperimentStatistics_result()
    try:
      result.success = self._handler.getExperimentStatistics(args.gatewayId, args.fromTime, args.toTime)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getExperimentStatistics", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getAllExperimentsInProject(self, seqid, iprot, oprot):
    args = getAllExperimentsInProject_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getAllExperimentsInProject_result()
    try:
      result.success = self._handler.getAllExperimentsInProject(args.projectId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    except apache.airavata.api.error.ttypes.ProjectNotFoundException, pnfe:
      result.pnfe = pnfe
    oprot.writeMessageBegin("getAllExperimentsInProject", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getAllExperimentsInProjectWithPagination(self, seqid, iprot, oprot):
    args = getAllExperimentsInProjectWithPagination_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getAllExperimentsInProjectWithPagination_result()
    try:
      result.success = self._handler.getAllExperimentsInProjectWithPagination(args.projectId, args.limit, args.offset)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    except apache.airavata.api.error.ttypes.ProjectNotFoundException, pnfe:
      result.pnfe = pnfe
    oprot.writeMessageBegin("getAllExperimentsInProjectWithPagination", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getAllUserExperiments(self, seqid, iprot, oprot):
    args = getAllUserExperiments_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getAllUserExperiments_result()
    try:
      result.success = self._handler.getAllUserExperiments(args.gatewayId, args.userName)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getAllUserExperiments", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getAllUserExperimentsWithPagination(self, seqid, iprot, oprot):
    args = getAllUserExperimentsWithPagination_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getAllUserExperimentsWithPagination_result()
    try:
      result.success = self._handler.getAllUserExperimentsWithPagination(args.gatewayId, args.userName, args.limit, args.offset)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getAllUserExperimentsWithPagination", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_createExperiment(self, seqid, iprot, oprot):
    args = createExperiment_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = createExperiment_result()
    try:
      result.success = self._handler.createExperiment(args.gatewayId, args.experiment)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("createExperiment", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getExperiment(self, seqid, iprot, oprot):
    args = getExperiment_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getExperiment_result()
    try:
      result.success = self._handler.getExperiment(args.airavataExperimentId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.ExperimentNotFoundException, enf:
      result.enf = enf
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getExperiment", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateExperiment(self, seqid, iprot, oprot):
    args = updateExperiment_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateExperiment_result()
    try:
      self._handler.updateExperiment(args.airavataExperimentId, args.experiment)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.ExperimentNotFoundException, enf:
      result.enf = enf
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("updateExperiment", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateExperimentConfiguration(self, seqid, iprot, oprot):
    args = updateExperimentConfiguration_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateExperimentConfiguration_result()
    self._handler.updateExperimentConfiguration(args.airavataExperimentId, args.userConfiguration)
    oprot.writeMessageBegin("updateExperimentConfiguration", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateResourceScheduleing(self, seqid, iprot, oprot):
    args = updateResourceScheduleing_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateResourceScheduleing_result()
    self._handler.updateResourceScheduleing(args.airavataExperimentId, args.resourceScheduling)
    oprot.writeMessageBegin("updateResourceScheduleing", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_validateExperiment(self, seqid, iprot, oprot):
    args = validateExperiment_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = validateExperiment_result()
    try:
      result.success = self._handler.validateExperiment(args.airavataExperimentId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.ExperimentNotFoundException, enf:
      result.enf = enf
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("validateExperiment", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_launchExperiment(self, seqid, iprot, oprot):
    args = launchExperiment_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = launchExperiment_result()
    try:
      self._handler.launchExperiment(args.airavataExperimentId, args.airavataCredStoreToken)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.ExperimentNotFoundException, enf:
      result.enf = enf
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    except apache.airavata.api.error.ttypes.LaunchValidationException, lve:
      result.lve = lve
    oprot.writeMessageBegin("launchExperiment", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getExperimentStatus(self, seqid, iprot, oprot):
    args = getExperimentStatus_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getExperimentStatus_result()
    try:
      result.success = self._handler.getExperimentStatus(args.airavataExperimentId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.ExperimentNotFoundException, enf:
      result.enf = enf
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getExperimentStatus", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getExperimentOutputs(self, seqid, iprot, oprot):
    args = getExperimentOutputs_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getExperimentOutputs_result()
    try:
      result.success = self._handler.getExperimentOutputs(args.airavataExperimentId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.ExperimentNotFoundException, enf:
      result.enf = enf
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getExperimentOutputs", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getIntermediateOutputs(self, seqid, iprot, oprot):
    args = getIntermediateOutputs_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getIntermediateOutputs_result()
    try:
      result.success = self._handler.getIntermediateOutputs(args.airavataExperimentId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.ExperimentNotFoundException, enf:
      result.enf = enf
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getIntermediateOutputs", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getJobStatuses(self, seqid, iprot, oprot):
    args = getJobStatuses_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getJobStatuses_result()
    try:
      result.success = self._handler.getJobStatuses(args.airavataExperimentId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.ExperimentNotFoundException, enf:
      result.enf = enf
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getJobStatuses", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getJobDetails(self, seqid, iprot, oprot):
    args = getJobDetails_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getJobDetails_result()
    try:
      result.success = self._handler.getJobDetails(args.airavataExperimentId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.ExperimentNotFoundException, enf:
      result.enf = enf
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getJobDetails", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getDataTransferDetails(self, seqid, iprot, oprot):
    args = getDataTransferDetails_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getDataTransferDetails_result()
    try:
      result.success = self._handler.getDataTransferDetails(args.airavataExperimentId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.ExperimentNotFoundException, enf:
      result.enf = enf
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getDataTransferDetails", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_cloneExperiment(self, seqid, iprot, oprot):
    args = cloneExperiment_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = cloneExperiment_result()
    try:
      result.success = self._handler.cloneExperiment(args.existingExperimentID, args.newExperimentName)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.ExperimentNotFoundException, enf:
      result.enf = enf
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("cloneExperiment", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_terminateExperiment(self, seqid, iprot, oprot):
    args = terminateExperiment_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = terminateExperiment_result()
    try:
      self._handler.terminateExperiment(args.airavataExperimentId, args.tokenId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.ExperimentNotFoundException, enf:
      result.enf = enf
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("terminateExperiment", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_registerApplicationModule(self, seqid, iprot, oprot):
    args = registerApplicationModule_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = registerApplicationModule_result()
    try:
      result.success = self._handler.registerApplicationModule(args.gatewayId, args.applicationModule)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("registerApplicationModule", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getApplicationModule(self, seqid, iprot, oprot):
    args = getApplicationModule_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getApplicationModule_result()
    try:
      result.success = self._handler.getApplicationModule(args.appModuleId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getApplicationModule", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateApplicationModule(self, seqid, iprot, oprot):
    args = updateApplicationModule_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateApplicationModule_result()
    try:
      result.success = self._handler.updateApplicationModule(args.appModuleId, args.applicationModule)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("updateApplicationModule", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getAllAppModules(self, seqid, iprot, oprot):
    args = getAllAppModules_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getAllAppModules_result()
    try:
      result.success = self._handler.getAllAppModules(args.gatewayId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getAllAppModules", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_deleteApplicationModule(self, seqid, iprot, oprot):
    args = deleteApplicationModule_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = deleteApplicationModule_result()
    try:
      result.success = self._handler.deleteApplicationModule(args.appModuleId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("deleteApplicationModule", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_registerApplicationDeployment(self, seqid, iprot, oprot):
    args = registerApplicationDeployment_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = registerApplicationDeployment_result()
    try:
      result.success = self._handler.registerApplicationDeployment(args.gatewayId, args.applicationDeployment)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("registerApplicationDeployment", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getApplicationDeployment(self, seqid, iprot, oprot):
    args = getApplicationDeployment_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getApplicationDeployment_result()
    try:
      result.success = self._handler.getApplicationDeployment(args.appDeploymentId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getApplicationDeployment", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateApplicationDeployment(self, seqid, iprot, oprot):
    args = updateApplicationDeployment_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateApplicationDeployment_result()
    try:
      result.success = self._handler.updateApplicationDeployment(args.appDeploymentId, args.applicationDeployment)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("updateApplicationDeployment", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_deleteApplicationDeployment(self, seqid, iprot, oprot):
    args = deleteApplicationDeployment_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = deleteApplicationDeployment_result()
    try:
      result.success = self._handler.deleteApplicationDeployment(args.appDeploymentId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("deleteApplicationDeployment", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getAllApplicationDeployments(self, seqid, iprot, oprot):
    args = getAllApplicationDeployments_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getAllApplicationDeployments_result()
    try:
      result.success = self._handler.getAllApplicationDeployments(args.gatewayId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getAllApplicationDeployments", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getAppModuleDeployedResources(self, seqid, iprot, oprot):
    args = getAppModuleDeployedResources_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getAppModuleDeployedResources_result()
    try:
      result.success = self._handler.getAppModuleDeployedResources(args.appModuleId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getAppModuleDeployedResources", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_registerApplicationInterface(self, seqid, iprot, oprot):
    args = registerApplicationInterface_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = registerApplicationInterface_result()
    try:
      result.success = self._handler.registerApplicationInterface(args.gatewayId, args.applicationInterface)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("registerApplicationInterface", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getApplicationInterface(self, seqid, iprot, oprot):
    args = getApplicationInterface_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getApplicationInterface_result()
    try:
      result.success = self._handler.getApplicationInterface(args.appInterfaceId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getApplicationInterface", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateApplicationInterface(self, seqid, iprot, oprot):
    args = updateApplicationInterface_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateApplicationInterface_result()
    try:
      result.success = self._handler.updateApplicationInterface(args.appInterfaceId, args.applicationInterface)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("updateApplicationInterface", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_deleteApplicationInterface(self, seqid, iprot, oprot):
    args = deleteApplicationInterface_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = deleteApplicationInterface_result()
    try:
      result.success = self._handler.deleteApplicationInterface(args.appInterfaceId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("deleteApplicationInterface", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getAllApplicationInterfaceNames(self, seqid, iprot, oprot):
    args = getAllApplicationInterfaceNames_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getAllApplicationInterfaceNames_result()
    try:
      result.success = self._handler.getAllApplicationInterfaceNames(args.gatewayId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getAllApplicationInterfaceNames", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getAllApplicationInterfaces(self, seqid, iprot, oprot):
    args = getAllApplicationInterfaces_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getAllApplicationInterfaces_result()
    try:
      result.success = self._handler.getAllApplicationInterfaces(args.gatewayId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getAllApplicationInterfaces", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getApplicationInputs(self, seqid, iprot, oprot):
    args = getApplicationInputs_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getApplicationInputs_result()
    try:
      result.success = self._handler.getApplicationInputs(args.appInterfaceId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getApplicationInputs", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getApplicationOutputs(self, seqid, iprot, oprot):
    args = getApplicationOutputs_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getApplicationOutputs_result()
    try:
      result.success = self._handler.getApplicationOutputs(args.appInterfaceId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getApplicationOutputs", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getAvailableAppInterfaceComputeResources(self, seqid, iprot, oprot):
    args = getAvailableAppInterfaceComputeResources_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getAvailableAppInterfaceComputeResources_result()
    try:
      result.success = self._handler.getAvailableAppInterfaceComputeResources(args.appInterfaceId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getAvailableAppInterfaceComputeResources", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_registerComputeResource(self, seqid, iprot, oprot):
    args = registerComputeResource_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = registerComputeResource_result()
    try:
      result.success = self._handler.registerComputeResource(args.computeResourceDescription)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("registerComputeResource", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getComputeResource(self, seqid, iprot, oprot):
    args = getComputeResource_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getComputeResource_result()
    try:
      result.success = self._handler.getComputeResource(args.computeResourceId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getComputeResource", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getAllComputeResourceNames(self, seqid, iprot, oprot):
    args = getAllComputeResourceNames_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getAllComputeResourceNames_result()
    try:
      result.success = self._handler.getAllComputeResourceNames()
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getAllComputeResourceNames", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateComputeResource(self, seqid, iprot, oprot):
    args = updateComputeResource_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateComputeResource_result()
    try:
      result.success = self._handler.updateComputeResource(args.computeResourceId, args.computeResourceDescription)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("updateComputeResource", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_deleteComputeResource(self, seqid, iprot, oprot):
    args = deleteComputeResource_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = deleteComputeResource_result()
    try:
      result.success = self._handler.deleteComputeResource(args.computeResourceId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("deleteComputeResource", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_addLocalSubmissionDetails(self, seqid, iprot, oprot):
    args = addLocalSubmissionDetails_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = addLocalSubmissionDetails_result()
    try:
      result.success = self._handler.addLocalSubmissionDetails(args.computeResourceId, args.priorityOrder, args.localSubmission)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("addLocalSubmissionDetails", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateLocalSubmissionDetails(self, seqid, iprot, oprot):
    args = updateLocalSubmissionDetails_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateLocalSubmissionDetails_result()
    try:
      result.success = self._handler.updateLocalSubmissionDetails(args.jobSubmissionInterfaceId, args.localSubmission)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("updateLocalSubmissionDetails", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getLocalJobSubmission(self, seqid, iprot, oprot):
    args = getLocalJobSubmission_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getLocalJobSubmission_result()
    try:
      result.success = self._handler.getLocalJobSubmission(args.jobSubmissionId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getLocalJobSubmission", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_addSSHJobSubmissionDetails(self, seqid, iprot, oprot):
    args = addSSHJobSubmissionDetails_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = addSSHJobSubmissionDetails_result()
    try:
      result.success = self._handler.addSSHJobSubmissionDetails(args.computeResourceId, args.priorityOrder, args.sshJobSubmission)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("addSSHJobSubmissionDetails", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getSSHJobSubmission(self, seqid, iprot, oprot):
    args = getSSHJobSubmission_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getSSHJobSubmission_result()
    try:
      result.success = self._handler.getSSHJobSubmission(args.jobSubmissionId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getSSHJobSubmission", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_addUNICOREJobSubmissionDetails(self, seqid, iprot, oprot):
    args = addUNICOREJobSubmissionDetails_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = addUNICOREJobSubmissionDetails_result()
    try:
      result.success = self._handler.addUNICOREJobSubmissionDetails(args.computeResourceId, args.priorityOrder, args.unicoreJobSubmission)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("addUNICOREJobSubmissionDetails", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getUnicoreJobSubmission(self, seqid, iprot, oprot):
    args = getUnicoreJobSubmission_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getUnicoreJobSubmission_result()
    try:
      result.success = self._handler.getUnicoreJobSubmission(args.jobSubmissionId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getUnicoreJobSubmission", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_addCloudJobSubmissionDetails(self, seqid, iprot, oprot):
    args = addCloudJobSubmissionDetails_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = addCloudJobSubmissionDetails_result()
    try:
      result.success = self._handler.addCloudJobSubmissionDetails(args.computeResourceId, args.priorityOrder, args.cloudSubmission)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("addCloudJobSubmissionDetails", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getCloudJobSubmission(self, seqid, iprot, oprot):
    args = getCloudJobSubmission_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getCloudJobSubmission_result()
    try:
      result.success = self._handler.getCloudJobSubmission(args.jobSubmissionId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getCloudJobSubmission", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateSSHJobSubmissionDetails(self, seqid, iprot, oprot):
    args = updateSSHJobSubmissionDetails_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateSSHJobSubmissionDetails_result()
    try:
      result.success = self._handler.updateSSHJobSubmissionDetails(args.jobSubmissionInterfaceId, args.sshJobSubmission)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("updateSSHJobSubmissionDetails", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateCloudJobSubmissionDetails(self, seqid, iprot, oprot):
    args = updateCloudJobSubmissionDetails_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateCloudJobSubmissionDetails_result()
    try:
      result.success = self._handler.updateCloudJobSubmissionDetails(args.jobSubmissionInterfaceId, args.sshJobSubmission)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("updateCloudJobSubmissionDetails", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateUnicoreJobSubmissionDetails(self, seqid, iprot, oprot):
    args = updateUnicoreJobSubmissionDetails_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateUnicoreJobSubmissionDetails_result()
    try:
      result.success = self._handler.updateUnicoreJobSubmissionDetails(args.jobSubmissionInterfaceId, args.unicoreJobSubmission)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("updateUnicoreJobSubmissionDetails", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_addLocalDataMovementDetails(self, seqid, iprot, oprot):
    args = addLocalDataMovementDetails_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = addLocalDataMovementDetails_result()
    try:
      result.success = self._handler.addLocalDataMovementDetails(args.computeResourceId, args.priorityOrder, args.localDataMovement)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("addLocalDataMovementDetails", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateLocalDataMovementDetails(self, seqid, iprot, oprot):
    args = updateLocalDataMovementDetails_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateLocalDataMovementDetails_result()
    try:
      result.success = self._handler.updateLocalDataMovementDetails(args.dataMovementInterfaceId, args.localDataMovement)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("updateLocalDataMovementDetails", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getLocalDataMovement(self, seqid, iprot, oprot):
    args = getLocalDataMovement_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getLocalDataMovement_result()
    try:
      result.success = self._handler.getLocalDataMovement(args.dataMovementId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getLocalDataMovement", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_addSCPDataMovementDetails(self, seqid, iprot, oprot):
    args = addSCPDataMovementDetails_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = addSCPDataMovementDetails_result()
    try:
      result.success = self._handler.addSCPDataMovementDetails(args.computeResourceId, args.priorityOrder, args.scpDataMovement)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("addSCPDataMovementDetails", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateSCPDataMovementDetails(self, seqid, iprot, oprot):
    args = updateSCPDataMovementDetails_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateSCPDataMovementDetails_result()
    try:
      result.success = self._handler.updateSCPDataMovementDetails(args.dataMovementInterfaceId, args.scpDataMovement)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("updateSCPDataMovementDetails", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getSCPDataMovement(self, seqid, iprot, oprot):
    args = getSCPDataMovement_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getSCPDataMovement_result()
    try:
      result.success = self._handler.getSCPDataMovement(args.dataMovementId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getSCPDataMovement", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_addUnicoreDataMovementDetails(self, seqid, iprot, oprot):
    args = addUnicoreDataMovementDetails_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = addUnicoreDataMovementDetails_result()
    try:
      result.success = self._handler.addUnicoreDataMovementDetails(args.computeResourceId, args.priorityOrder, args.unicoreDataMovement)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("addUnicoreDataMovementDetails", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateUnicoreDataMovementDetails(self, seqid, iprot, oprot):
    args = updateUnicoreDataMovementDetails_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateUnicoreDataMovementDetails_result()
    try:
      result.success = self._handler.updateUnicoreDataMovementDetails(args.dataMovementInterfaceId, args.unicoreDataMovement)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("updateUnicoreDataMovementDetails", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getUnicoreDataMovement(self, seqid, iprot, oprot):
    args = getUnicoreDataMovement_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getUnicoreDataMovement_result()
    try:
      result.success = self._handler.getUnicoreDataMovement(args.dataMovementId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getUnicoreDataMovement", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_addGridFTPDataMovementDetails(self, seqid, iprot, oprot):
    args = addGridFTPDataMovementDetails_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = addGridFTPDataMovementDetails_result()
    try:
      result.success = self._handler.addGridFTPDataMovementDetails(args.computeResourceId, args.priorityOrder, args.gridFTPDataMovement)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("addGridFTPDataMovementDetails", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateGridFTPDataMovementDetails(self, seqid, iprot, oprot):
    args = updateGridFTPDataMovementDetails_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateGridFTPDataMovementDetails_result()
    try:
      result.success = self._handler.updateGridFTPDataMovementDetails(args.dataMovementInterfaceId, args.gridFTPDataMovement)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("updateGridFTPDataMovementDetails", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getGridFTPDataMovement(self, seqid, iprot, oprot):
    args = getGridFTPDataMovement_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getGridFTPDataMovement_result()
    try:
      result.success = self._handler.getGridFTPDataMovement(args.dataMovementId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getGridFTPDataMovement", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_changeJobSubmissionPriority(self, seqid, iprot, oprot):
    args = changeJobSubmissionPriority_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = changeJobSubmissionPriority_result()
    try:
      result.success = self._handler.changeJobSubmissionPriority(args.jobSubmissionInterfaceId, args.newPriorityOrder)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("changeJobSubmissionPriority", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_changeDataMovementPriority(self, seqid, iprot, oprot):
    args = changeDataMovementPriority_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = changeDataMovementPriority_result()
    try:
      result.success = self._handler.changeDataMovementPriority(args.dataMovementInterfaceId, args.newPriorityOrder)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("changeDataMovementPriority", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_changeJobSubmissionPriorities(self, seqid, iprot, oprot):
    args = changeJobSubmissionPriorities_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = changeJobSubmissionPriorities_result()
    try:
      result.success = self._handler.changeJobSubmissionPriorities(args.jobSubmissionPriorityMap)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("changeJobSubmissionPriorities", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_changeDataMovementPriorities(self, seqid, iprot, oprot):
    args = changeDataMovementPriorities_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = changeDataMovementPriorities_result()
    try:
      result.success = self._handler.changeDataMovementPriorities(args.dataMovementPriorityMap)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("changeDataMovementPriorities", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_deleteJobSubmissionInterface(self, seqid, iprot, oprot):
    args = deleteJobSubmissionInterface_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = deleteJobSubmissionInterface_result()
    try:
      result.success = self._handler.deleteJobSubmissionInterface(args.computeResourceId, args.jobSubmissionInterfaceId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("deleteJobSubmissionInterface", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_deleteDataMovementInterface(self, seqid, iprot, oprot):
    args = deleteDataMovementInterface_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = deleteDataMovementInterface_result()
    try:
      result.success = self._handler.deleteDataMovementInterface(args.computeResourceId, args.dataMovementInterfaceId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("deleteDataMovementInterface", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_registerResourceJobManager(self, seqid, iprot, oprot):
    args = registerResourceJobManager_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = registerResourceJobManager_result()
    try:
      result.success = self._handler.registerResourceJobManager(args.resourceJobManager)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("registerResourceJobManager", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateResourceJobManager(self, seqid, iprot, oprot):
    args = updateResourceJobManager_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateResourceJobManager_result()
    try:
      result.success = self._handler.updateResourceJobManager(args.resourceJobManagerId, args.updatedResourceJobManager)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("updateResourceJobManager", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getResourceJobManager(self, seqid, iprot, oprot):
    args = getResourceJobManager_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getResourceJobManager_result()
    try:
      result.success = self._handler.getResourceJobManager(args.resourceJobManagerId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getResourceJobManager", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_deleteResourceJobManager(self, seqid, iprot, oprot):
    args = deleteResourceJobManager_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = deleteResourceJobManager_result()
    try:
      result.success = self._handler.deleteResourceJobManager(args.resourceJobManagerId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("deleteResourceJobManager", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_deleteBatchQueue(self, seqid, iprot, oprot):
    args = deleteBatchQueue_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = deleteBatchQueue_result()
    try:
      result.success = self._handler.deleteBatchQueue(args.computeResourceId, args.queueName)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("deleteBatchQueue", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_registerGatewayResourceProfile(self, seqid, iprot, oprot):
    args = registerGatewayResourceProfile_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = registerGatewayResourceProfile_result()
    try:
      result.success = self._handler.registerGatewayResourceProfile(args.gatewayResourceProfile)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("registerGatewayResourceProfile", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getGatewayResourceProfile(self, seqid, iprot, oprot):
    args = getGatewayResourceProfile_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getGatewayResourceProfile_result()
    try:
      result.success = self._handler.getGatewayResourceProfile(args.gatewayID)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getGatewayResourceProfile", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateGatewayResourceProfile(self, seqid, iprot, oprot):
    args = updateGatewayResourceProfile_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateGatewayResourceProfile_result()
    try:
      result.success = self._handler.updateGatewayResourceProfile(args.gatewayID, args.gatewayResourceProfile)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("updateGatewayResourceProfile", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_deleteGatewayResourceProfile(self, seqid, iprot, oprot):
    args = deleteGatewayResourceProfile_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = deleteGatewayResourceProfile_result()
    try:
      result.success = self._handler.deleteGatewayResourceProfile(args.gatewayID)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("deleteGatewayResourceProfile", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_addGatewayComputeResourcePreference(self, seqid, iprot, oprot):
    args = addGatewayComputeResourcePreference_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = addGatewayComputeResourcePreference_result()
    try:
      result.success = self._handler.addGatewayComputeResourcePreference(args.gatewayID, args.computeResourceId, args.computeResourcePreference)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("addGatewayComputeResourcePreference", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getGatewayComputeResourcePreference(self, seqid, iprot, oprot):
    args = getGatewayComputeResourcePreference_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getGatewayComputeResourcePreference_result()
    try:
      result.success = self._handler.getGatewayComputeResourcePreference(args.gatewayID, args.computeResourceId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getGatewayComputeResourcePreference", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getAllGatewayComputeResourcePreferences(self, seqid, iprot, oprot):
    args = getAllGatewayComputeResourcePreferences_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getAllGatewayComputeResourcePreferences_result()
    try:
      result.success = self._handler.getAllGatewayComputeResourcePreferences(args.gatewayID)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getAllGatewayComputeResourcePreferences", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getAllGatewayComputeResources(self, seqid, iprot, oprot):
    args = getAllGatewayComputeResources_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getAllGatewayComputeResources_result()
    try:
      result.success = self._handler.getAllGatewayComputeResources()
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getAllGatewayComputeResources", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateGatewayComputeResourcePreference(self, seqid, iprot, oprot):
    args = updateGatewayComputeResourcePreference_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateGatewayComputeResourcePreference_result()
    try:
      result.success = self._handler.updateGatewayComputeResourcePreference(args.gatewayID, args.computeResourceId, args.computeResourcePreference)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("updateGatewayComputeResourcePreference", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_deleteGatewayComputeResourcePreference(self, seqid, iprot, oprot):
    args = deleteGatewayComputeResourcePreference_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = deleteGatewayComputeResourcePreference_result()
    try:
      result.success = self._handler.deleteGatewayComputeResourcePreference(args.gatewayID, args.computeResourceId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("deleteGatewayComputeResourcePreference", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getAllWorkflows(self, seqid, iprot, oprot):
    args = getAllWorkflows_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getAllWorkflows_result()
    try:
      result.success = self._handler.getAllWorkflows(args.gatewayId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getAllWorkflows", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getWorkflow(self, seqid, iprot, oprot):
    args = getWorkflow_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getWorkflow_result()
    try:
      result.success = self._handler.getWorkflow(args.workflowTemplateId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getWorkflow", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_deleteWorkflow(self, seqid, iprot, oprot):
    args = deleteWorkflow_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = deleteWorkflow_result()
    try:
      self._handler.deleteWorkflow(args.workflowTemplateId)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("deleteWorkflow", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_registerWorkflow(self, seqid, iprot, oprot):
    args = registerWorkflow_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = registerWorkflow_result()
    try:
      result.success = self._handler.registerWorkflow(args.gatewayId, args.workflow)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("registerWorkflow", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateWorkflow(self, seqid, iprot, oprot):
    args = updateWorkflow_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateWorkflow_result()
    try:
      self._handler.updateWorkflow(args.workflowTemplateId, args.workflow)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("updateWorkflow", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getWorkflowTemplateId(self, seqid, iprot, oprot):
    args = getWorkflowTemplateId_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getWorkflowTemplateId_result()
    try:
      result.success = self._handler.getWorkflowTemplateId(args.workflowName)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("getWorkflowTemplateId", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_isWorkflowExistWithName(self, seqid, iprot, oprot):
    args = isWorkflowExistWithName_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = isWorkflowExistWithName_result()
    try:
      result.success = self._handler.isWorkflowExistWithName(args.workflowName)
    except apache.airavata.api.error.ttypes.InvalidRequestException, ire:
      result.ire = ire
    except apache.airavata.api.error.ttypes.AiravataClientException, ace:
      result.ace = ace
    except apache.airavata.api.error.ttypes.AiravataSystemException, ase:
      result.ase = ase
    oprot.writeMessageBegin("isWorkflowExistWithName", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class getAPIVersion_args:
  """
  Attributes:
   - authzToken
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'authzToken', (apache.airavata.model.security.ttypes.AuthzToken, apache.airavata.model.security.ttypes.AuthzToken.thrift_spec), None, ), # 1
  )

  def __init__(self, authzToken=None,):
    self.authzToken = authzToken

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.authzToken = apache.airavata.model.security.ttypes.AuthzToken()
          self.authzToken.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAPIVersion_args')
    if self.authzToken is not None:
      oprot.writeFieldBegin('authzToken', TType.STRUCT, 1)
      self.authzToken.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.authzToken is None:
      raise TProtocol.TProtocolException(message='Required field authzToken is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.authzToken)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAPIVersion_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
   - ae
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ae', (apache.airavata.api.error.ttypes.AuthorizationException, apache.airavata.api.error.ttypes.AuthorizationException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None, ae=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase
    self.ae = ae

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ae = apache.airavata.api.error.ttypes.AuthorizationException()
          self.ae.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAPIVersion_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    if self.ae is not None:
      oprot.writeFieldBegin('ae', TType.STRUCT, 4)
      self.ae.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    value = (value * 31) ^ hash(self.ae)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addGateway_args:
  """
  Attributes:
   - gateway
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'gateway', (apache.airavata.model.workspace.ttypes.Gateway, apache.airavata.model.workspace.ttypes.Gateway.thrift_spec), None, ), # 1
  )

  def __init__(self, gateway=None,):
    self.gateway = gateway

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.gateway = apache.airavata.model.workspace.ttypes.Gateway()
          self.gateway.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addGateway_args')
    if self.gateway is not None:
      oprot.writeFieldBegin('gateway', TType.STRUCT, 1)
      self.gateway.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gateway is None:
      raise TProtocol.TProtocolException(message='Required field gateway is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gateway)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addGateway_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addGateway_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateGateway_args:
  """
  Attributes:
   - gatewayId
   - updatedGateway
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayId', None, None, ), # 1
    (2, TType.STRUCT, 'updatedGateway', (apache.airavata.model.workspace.ttypes.Gateway, apache.airavata.model.workspace.ttypes.Gateway.thrift_spec), None, ), # 2
  )

  def __init__(self, gatewayId=None, updatedGateway=None,):
    self.gatewayId = gatewayId
    self.updatedGateway = updatedGateway

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.updatedGateway = apache.airavata.model.workspace.ttypes.Gateway()
          self.updatedGateway.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateGateway_args')
    if self.gatewayId is not None:
      oprot.writeFieldBegin('gatewayId', TType.STRING, 1)
      oprot.writeString(self.gatewayId)
      oprot.writeFieldEnd()
    if self.updatedGateway is not None:
      oprot.writeFieldBegin('updatedGateway', TType.STRUCT, 2)
      self.updatedGateway.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayId is None:
      raise TProtocol.TProtocolException(message='Required field gatewayId is unset!')
    if self.updatedGateway is None:
      raise TProtocol.TProtocolException(message='Required field updatedGateway is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayId)
    value = (value * 31) ^ hash(self.updatedGateway)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateGateway_result:
  """
  Attributes:
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, ire=None, ace=None, ase=None,):
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateGateway_result')
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getGateway_args:
  """
  Attributes:
   - gatewayId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayId', None, None, ), # 1
  )

  def __init__(self, gatewayId=None,):
    self.gatewayId = gatewayId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getGateway_args')
    if self.gatewayId is not None:
      oprot.writeFieldBegin('gatewayId', TType.STRING, 1)
      oprot.writeString(self.gatewayId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayId is None:
      raise TProtocol.TProtocolException(message='Required field gatewayId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getGateway_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (apache.airavata.model.workspace.ttypes.Gateway, apache.airavata.model.workspace.ttypes.Gateway.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = apache.airavata.model.workspace.ttypes.Gateway()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getGateway_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteGateway_args:
  """
  Attributes:
   - gatewayId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayId', None, None, ), # 1
  )

  def __init__(self, gatewayId=None,):
    self.gatewayId = gatewayId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteGateway_args')
    if self.gatewayId is not None:
      oprot.writeFieldBegin('gatewayId', TType.STRING, 1)
      oprot.writeString(self.gatewayId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayId is None:
      raise TProtocol.TProtocolException(message='Required field gatewayId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteGateway_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteGateway_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllGateways_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllGateways_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllGateways_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(apache.airavata.model.workspace.ttypes.Gateway, apache.airavata.model.workspace.ttypes.Gateway.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = apache.airavata.model.workspace.ttypes.Gateway()
            _elem5.read(iprot)
            self.success.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllGateways_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter6 in self.success:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class isGatewayExist_args:
  """
  Attributes:
   - gatewayId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayId', None, None, ), # 1
  )

  def __init__(self, gatewayId=None,):
    self.gatewayId = gatewayId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('isGatewayExist_args')
    if self.gatewayId is not None:
      oprot.writeFieldBegin('gatewayId', TType.STRING, 1)
      oprot.writeString(self.gatewayId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayId is None:
      raise TProtocol.TProtocolException(message='Required field gatewayId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class isGatewayExist_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('isGatewayExist_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class generateAndRegisterSSHKeys_args:
  """
  Attributes:
   - gatewayId
   - userName
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayId', None, None, ), # 1
    (2, TType.STRING, 'userName', None, None, ), # 2
  )

  def __init__(self, gatewayId=None, userName=None,):
    self.gatewayId = gatewayId
    self.userName = userName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.userName = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('generateAndRegisterSSHKeys_args')
    if self.gatewayId is not None:
      oprot.writeFieldBegin('gatewayId', TType.STRING, 1)
      oprot.writeString(self.gatewayId)
      oprot.writeFieldEnd()
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 2)
      oprot.writeString(self.userName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayId is None:
      raise TProtocol.TProtocolException(message='Required field gatewayId is unset!')
    if self.userName is None:
      raise TProtocol.TProtocolException(message='Required field userName is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayId)
    value = (value * 31) ^ hash(self.userName)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class generateAndRegisterSSHKeys_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('generateAndRegisterSSHKeys_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSSHPubKey_args:
  """
  Attributes:
   - airavataCredStoreToken
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'airavataCredStoreToken', None, None, ), # 1
  )

  def __init__(self, airavataCredStoreToken=None,):
    self.airavataCredStoreToken = airavataCredStoreToken

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.airavataCredStoreToken = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSSHPubKey_args')
    if self.airavataCredStoreToken is not None:
      oprot.writeFieldBegin('airavataCredStoreToken', TType.STRING, 1)
      oprot.writeString(self.airavataCredStoreToken)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.airavataCredStoreToken is None:
      raise TProtocol.TProtocolException(message='Required field airavataCredStoreToken is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.airavataCredStoreToken)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSSHPubKey_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSSHPubKey_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllUserSSHPubKeys_args:
  """
  Attributes:
   - userName
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'userName', None, None, ), # 1
  )

  def __init__(self, userName=None,):
    self.userName = userName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.userName = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllUserSSHPubKeys_args')
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 1)
      oprot.writeString(self.userName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userName is None:
      raise TProtocol.TProtocolException(message='Required field userName is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.userName)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllUserSSHPubKeys_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype8, _vtype9, _size7 ) = iprot.readMapBegin()
          for _i11 in xrange(_size7):
            _key12 = iprot.readString();
            _val13 = iprot.readString();
            self.success[_key12] = _val13
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllUserSSHPubKeys_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.success))
      for kiter14,viter15 in self.success.items():
        oprot.writeString(kiter14)
        oprot.writeString(viter15)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createProject_args:
  """
  Attributes:
   - gatewayId
   - project
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayId', None, None, ), # 1
    (2, TType.STRUCT, 'project', (apache.airavata.model.workspace.ttypes.Project, apache.airavata.model.workspace.ttypes.Project.thrift_spec), None, ), # 2
  )

  def __init__(self, gatewayId=None, project=None,):
    self.gatewayId = gatewayId
    self.project = project

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.project = apache.airavata.model.workspace.ttypes.Project()
          self.project.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createProject_args')
    if self.gatewayId is not None:
      oprot.writeFieldBegin('gatewayId', TType.STRING, 1)
      oprot.writeString(self.gatewayId)
      oprot.writeFieldEnd()
    if self.project is not None:
      oprot.writeFieldBegin('project', TType.STRUCT, 2)
      self.project.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayId is None:
      raise TProtocol.TProtocolException(message='Required field gatewayId is unset!')
    if self.project is None:
      raise TProtocol.TProtocolException(message='Required field project is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayId)
    value = (value * 31) ^ hash(self.project)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createProject_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createProject_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateProject_args:
  """
  Attributes:
   - projectId
   - updatedProject
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'projectId', None, None, ), # 1
    (2, TType.STRUCT, 'updatedProject', (apache.airavata.model.workspace.ttypes.Project, apache.airavata.model.workspace.ttypes.Project.thrift_spec), None, ), # 2
  )

  def __init__(self, projectId=None, updatedProject=None,):
    self.projectId = projectId
    self.updatedProject = updatedProject

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.projectId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.updatedProject = apache.airavata.model.workspace.ttypes.Project()
          self.updatedProject.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateProject_args')
    if self.projectId is not None:
      oprot.writeFieldBegin('projectId', TType.STRING, 1)
      oprot.writeString(self.projectId)
      oprot.writeFieldEnd()
    if self.updatedProject is not None:
      oprot.writeFieldBegin('updatedProject', TType.STRUCT, 2)
      self.updatedProject.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.projectId is None:
      raise TProtocol.TProtocolException(message='Required field projectId is unset!')
    if self.updatedProject is None:
      raise TProtocol.TProtocolException(message='Required field updatedProject is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.projectId)
    value = (value * 31) ^ hash(self.updatedProject)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateProject_result:
  """
  Attributes:
   - ire
   - ace
   - ase
   - pnfe
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'pnfe', (apache.airavata.api.error.ttypes.ProjectNotFoundException, apache.airavata.api.error.ttypes.ProjectNotFoundException.thrift_spec), None, ), # 4
  )

  def __init__(self, ire=None, ace=None, ase=None, pnfe=None,):
    self.ire = ire
    self.ace = ace
    self.ase = ase
    self.pnfe = pnfe

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.pnfe = apache.airavata.api.error.ttypes.ProjectNotFoundException()
          self.pnfe.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateProject_result')
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    if self.pnfe is not None:
      oprot.writeFieldBegin('pnfe', TType.STRUCT, 4)
      self.pnfe.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    value = (value * 31) ^ hash(self.pnfe)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getProject_args:
  """
  Attributes:
   - projectId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'projectId', None, None, ), # 1
  )

  def __init__(self, projectId=None,):
    self.projectId = projectId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.projectId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getProject_args')
    if self.projectId is not None:
      oprot.writeFieldBegin('projectId', TType.STRING, 1)
      oprot.writeString(self.projectId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.projectId is None:
      raise TProtocol.TProtocolException(message='Required field projectId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.projectId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getProject_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
   - pnfe
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (apache.airavata.model.workspace.ttypes.Project, apache.airavata.model.workspace.ttypes.Project.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'pnfe', (apache.airavata.api.error.ttypes.ProjectNotFoundException, apache.airavata.api.error.ttypes.ProjectNotFoundException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None, pnfe=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase
    self.pnfe = pnfe

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = apache.airavata.model.workspace.ttypes.Project()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.pnfe = apache.airavata.api.error.ttypes.ProjectNotFoundException()
          self.pnfe.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getProject_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    if self.pnfe is not None:
      oprot.writeFieldBegin('pnfe', TType.STRUCT, 4)
      self.pnfe.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    value = (value * 31) ^ hash(self.pnfe)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteProject_args:
  """
  Attributes:
   - projectId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'projectId', None, None, ), # 1
  )

  def __init__(self, projectId=None,):
    self.projectId = projectId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.projectId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteProject_args')
    if self.projectId is not None:
      oprot.writeFieldBegin('projectId', TType.STRING, 1)
      oprot.writeString(self.projectId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.projectId is None:
      raise TProtocol.TProtocolException(message='Required field projectId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.projectId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteProject_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
   - pnfe
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'pnfe', (apache.airavata.api.error.ttypes.ProjectNotFoundException, apache.airavata.api.error.ttypes.ProjectNotFoundException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None, pnfe=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase
    self.pnfe = pnfe

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.pnfe = apache.airavata.api.error.ttypes.ProjectNotFoundException()
          self.pnfe.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteProject_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    if self.pnfe is not None:
      oprot.writeFieldBegin('pnfe', TType.STRUCT, 4)
      self.pnfe.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    value = (value * 31) ^ hash(self.pnfe)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllUserProjects_args:
  """
  Attributes:
   - gatewayId
   - userName
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayId', None, None, ), # 1
    (2, TType.STRING, 'userName', None, None, ), # 2
  )

  def __init__(self, gatewayId=None, userName=None,):
    self.gatewayId = gatewayId
    self.userName = userName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.userName = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllUserProjects_args')
    if self.gatewayId is not None:
      oprot.writeFieldBegin('gatewayId', TType.STRING, 1)
      oprot.writeString(self.gatewayId)
      oprot.writeFieldEnd()
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 2)
      oprot.writeString(self.userName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayId is None:
      raise TProtocol.TProtocolException(message='Required field gatewayId is unset!')
    if self.userName is None:
      raise TProtocol.TProtocolException(message='Required field userName is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayId)
    value = (value * 31) ^ hash(self.userName)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllUserProjects_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(apache.airavata.model.workspace.ttypes.Project, apache.airavata.model.workspace.ttypes.Project.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype19, _size16) = iprot.readListBegin()
          for _i20 in xrange(_size16):
            _elem21 = apache.airavata.model.workspace.ttypes.Project()
            _elem21.read(iprot)
            self.success.append(_elem21)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllUserProjects_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter22 in self.success:
        iter22.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllUserProjectsWithPagination_args:
  """
  Attributes:
   - gatewayId
   - userName
   - limit
   - offset
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayId', None, None, ), # 1
    (2, TType.STRING, 'userName', None, None, ), # 2
    (3, TType.I32, 'limit', None, None, ), # 3
    (4, TType.I32, 'offset', None, None, ), # 4
  )

  def __init__(self, gatewayId=None, userName=None, limit=None, offset=None,):
    self.gatewayId = gatewayId
    self.userName = userName
    self.limit = limit
    self.offset = offset

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.userName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.limit = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.offset = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllUserProjectsWithPagination_args')
    if self.gatewayId is not None:
      oprot.writeFieldBegin('gatewayId', TType.STRING, 1)
      oprot.writeString(self.gatewayId)
      oprot.writeFieldEnd()
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 2)
      oprot.writeString(self.userName)
      oprot.writeFieldEnd()
    if self.limit is not None:
      oprot.writeFieldBegin('limit', TType.I32, 3)
      oprot.writeI32(self.limit)
      oprot.writeFieldEnd()
    if self.offset is not None:
      oprot.writeFieldBegin('offset', TType.I32, 4)
      oprot.writeI32(self.offset)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayId is None:
      raise TProtocol.TProtocolException(message='Required field gatewayId is unset!')
    if self.userName is None:
      raise TProtocol.TProtocolException(message='Required field userName is unset!')
    if self.limit is None:
      raise TProtocol.TProtocolException(message='Required field limit is unset!')
    if self.offset is None:
      raise TProtocol.TProtocolException(message='Required field offset is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayId)
    value = (value * 31) ^ hash(self.userName)
    value = (value * 31) ^ hash(self.limit)
    value = (value * 31) ^ hash(self.offset)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllUserProjectsWithPagination_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(apache.airavata.model.workspace.ttypes.Project, apache.airavata.model.workspace.ttypes.Project.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype26, _size23) = iprot.readListBegin()
          for _i27 in xrange(_size23):
            _elem28 = apache.airavata.model.workspace.ttypes.Project()
            _elem28.read(iprot)
            self.success.append(_elem28)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllUserProjectsWithPagination_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter29 in self.success:
        iter29.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class searchProjectsByProjectName_args:
  """
  Attributes:
   - gatewayId
   - userName
   - projectName
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayId', None, None, ), # 1
    (2, TType.STRING, 'userName', None, None, ), # 2
    (3, TType.STRING, 'projectName', None, None, ), # 3
  )

  def __init__(self, gatewayId=None, userName=None, projectName=None,):
    self.gatewayId = gatewayId
    self.userName = userName
    self.projectName = projectName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.userName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.projectName = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('searchProjectsByProjectName_args')
    if self.gatewayId is not None:
      oprot.writeFieldBegin('gatewayId', TType.STRING, 1)
      oprot.writeString(self.gatewayId)
      oprot.writeFieldEnd()
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 2)
      oprot.writeString(self.userName)
      oprot.writeFieldEnd()
    if self.projectName is not None:
      oprot.writeFieldBegin('projectName', TType.STRING, 3)
      oprot.writeString(self.projectName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayId is None:
      raise TProtocol.TProtocolException(message='Required field gatewayId is unset!')
    if self.userName is None:
      raise TProtocol.TProtocolException(message='Required field userName is unset!')
    if self.projectName is None:
      raise TProtocol.TProtocolException(message='Required field projectName is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayId)
    value = (value * 31) ^ hash(self.userName)
    value = (value * 31) ^ hash(self.projectName)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class searchProjectsByProjectName_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(apache.airavata.model.workspace.ttypes.Project, apache.airavata.model.workspace.ttypes.Project.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype33, _size30) = iprot.readListBegin()
          for _i34 in xrange(_size30):
            _elem35 = apache.airavata.model.workspace.ttypes.Project()
            _elem35.read(iprot)
            self.success.append(_elem35)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('searchProjectsByProjectName_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter36 in self.success:
        iter36.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class searchProjectsByProjectNameWithPagination_args:
  """
  Attributes:
   - gatewayId
   - userName
   - projectName
   - limit
   - offset
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayId', None, None, ), # 1
    (2, TType.STRING, 'userName', None, None, ), # 2
    (3, TType.STRING, 'projectName', None, None, ), # 3
    (4, TType.I32, 'limit', None, None, ), # 4
    (5, TType.I32, 'offset', None, None, ), # 5
  )

  def __init__(self, gatewayId=None, userName=None, projectName=None, limit=None, offset=None,):
    self.gatewayId = gatewayId
    self.userName = userName
    self.projectName = projectName
    self.limit = limit
    self.offset = offset

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.userName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.projectName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.limit = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.offset = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('searchProjectsByProjectNameWithPagination_args')
    if self.gatewayId is not None:
      oprot.writeFieldBegin('gatewayId', TType.STRING, 1)
      oprot.writeString(self.gatewayId)
      oprot.writeFieldEnd()
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 2)
      oprot.writeString(self.userName)
      oprot.writeFieldEnd()
    if self.projectName is not None:
      oprot.writeFieldBegin('projectName', TType.STRING, 3)
      oprot.writeString(self.projectName)
      oprot.writeFieldEnd()
    if self.limit is not None:
      oprot.writeFieldBegin('limit', TType.I32, 4)
      oprot.writeI32(self.limit)
      oprot.writeFieldEnd()
    if self.offset is not None:
      oprot.writeFieldBegin('offset', TType.I32, 5)
      oprot.writeI32(self.offset)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayId is None:
      raise TProtocol.TProtocolException(message='Required field gatewayId is unset!')
    if self.userName is None:
      raise TProtocol.TProtocolException(message='Required field userName is unset!')
    if self.projectName is None:
      raise TProtocol.TProtocolException(message='Required field projectName is unset!')
    if self.limit is None:
      raise TProtocol.TProtocolException(message='Required field limit is unset!')
    if self.offset is None:
      raise TProtocol.TProtocolException(message='Required field offset is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayId)
    value = (value * 31) ^ hash(self.userName)
    value = (value * 31) ^ hash(self.projectName)
    value = (value * 31) ^ hash(self.limit)
    value = (value * 31) ^ hash(self.offset)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class searchProjectsByProjectNameWithPagination_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(apache.airavata.model.workspace.ttypes.Project, apache.airavata.model.workspace.ttypes.Project.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype40, _size37) = iprot.readListBegin()
          for _i41 in xrange(_size37):
            _elem42 = apache.airavata.model.workspace.ttypes.Project()
            _elem42.read(iprot)
            self.success.append(_elem42)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('searchProjectsByProjectNameWithPagination_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter43 in self.success:
        iter43.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class searchProjectsByProjectDesc_args:
  """
  Attributes:
   - gatewayId
   - userName
   - description
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayId', None, None, ), # 1
    (2, TType.STRING, 'userName', None, None, ), # 2
    (3, TType.STRING, 'description', None, None, ), # 3
  )

  def __init__(self, gatewayId=None, userName=None, description=None,):
    self.gatewayId = gatewayId
    self.userName = userName
    self.description = description

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.userName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('searchProjectsByProjectDesc_args')
    if self.gatewayId is not None:
      oprot.writeFieldBegin('gatewayId', TType.STRING, 1)
      oprot.writeString(self.gatewayId)
      oprot.writeFieldEnd()
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 2)
      oprot.writeString(self.userName)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 3)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayId is None:
      raise TProtocol.TProtocolException(message='Required field gatewayId is unset!')
    if self.userName is None:
      raise TProtocol.TProtocolException(message='Required field userName is unset!')
    if self.description is None:
      raise TProtocol.TProtocolException(message='Required field description is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayId)
    value = (value * 31) ^ hash(self.userName)
    value = (value * 31) ^ hash(self.description)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class searchProjectsByProjectDesc_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(apache.airavata.model.workspace.ttypes.Project, apache.airavata.model.workspace.ttypes.Project.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype47, _size44) = iprot.readListBegin()
          for _i48 in xrange(_size44):
            _elem49 = apache.airavata.model.workspace.ttypes.Project()
            _elem49.read(iprot)
            self.success.append(_elem49)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('searchProjectsByProjectDesc_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter50 in self.success:
        iter50.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class searchProjectsByProjectDescWithPagination_args:
  """
  Attributes:
   - gatewayId
   - userName
   - description
   - limit
   - offset
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayId', None, None, ), # 1
    (2, TType.STRING, 'userName', None, None, ), # 2
    (3, TType.STRING, 'description', None, None, ), # 3
    (4, TType.I32, 'limit', None, None, ), # 4
    (5, TType.I32, 'offset', None, None, ), # 5
  )

  def __init__(self, gatewayId=None, userName=None, description=None, limit=None, offset=None,):
    self.gatewayId = gatewayId
    self.userName = userName
    self.description = description
    self.limit = limit
    self.offset = offset

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.userName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.limit = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.offset = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('searchProjectsByProjectDescWithPagination_args')
    if self.gatewayId is not None:
      oprot.writeFieldBegin('gatewayId', TType.STRING, 1)
      oprot.writeString(self.gatewayId)
      oprot.writeFieldEnd()
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 2)
      oprot.writeString(self.userName)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 3)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    if self.limit is not None:
      oprot.writeFieldBegin('limit', TType.I32, 4)
      oprot.writeI32(self.limit)
      oprot.writeFieldEnd()
    if self.offset is not None:
      oprot.writeFieldBegin('offset', TType.I32, 5)
      oprot.writeI32(self.offset)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayId is None:
      raise TProtocol.TProtocolException(message='Required field gatewayId is unset!')
    if self.userName is None:
      raise TProtocol.TProtocolException(message='Required field userName is unset!')
    if self.description is None:
      raise TProtocol.TProtocolException(message='Required field description is unset!')
    if self.limit is None:
      raise TProtocol.TProtocolException(message='Required field limit is unset!')
    if self.offset is None:
      raise TProtocol.TProtocolException(message='Required field offset is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayId)
    value = (value * 31) ^ hash(self.userName)
    value = (value * 31) ^ hash(self.description)
    value = (value * 31) ^ hash(self.limit)
    value = (value * 31) ^ hash(self.offset)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class searchProjectsByProjectDescWithPagination_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(apache.airavata.model.workspace.ttypes.Project, apache.airavata.model.workspace.ttypes.Project.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype54, _size51) = iprot.readListBegin()
          for _i55 in xrange(_size51):
            _elem56 = apache.airavata.model.workspace.ttypes.Project()
            _elem56.read(iprot)
            self.success.append(_elem56)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('searchProjectsByProjectDescWithPagination_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter57 in self.success:
        iter57.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class searchExperimentsByName_args:
  """
  Attributes:
   - gatewayId
   - userName
   - expName
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayId', None, None, ), # 1
    (2, TType.STRING, 'userName', None, None, ), # 2
    (3, TType.STRING, 'expName', None, None, ), # 3
  )

  def __init__(self, gatewayId=None, userName=None, expName=None,):
    self.gatewayId = gatewayId
    self.userName = userName
    self.expName = expName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.userName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.expName = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('searchExperimentsByName_args')
    if self.gatewayId is not None:
      oprot.writeFieldBegin('gatewayId', TType.STRING, 1)
      oprot.writeString(self.gatewayId)
      oprot.writeFieldEnd()
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 2)
      oprot.writeString(self.userName)
      oprot.writeFieldEnd()
    if self.expName is not None:
      oprot.writeFieldBegin('expName', TType.STRING, 3)
      oprot.writeString(self.expName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayId is None:
      raise TProtocol.TProtocolException(message='Required field gatewayId is unset!')
    if self.userName is None:
      raise TProtocol.TProtocolException(message='Required field userName is unset!')
    if self.expName is None:
      raise TProtocol.TProtocolException(message='Required field expName is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayId)
    value = (value * 31) ^ hash(self.userName)
    value = (value * 31) ^ hash(self.expName)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class searchExperimentsByName_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(apache.airavata.model.workspace.experiment.ttypes.ExperimentSummary, apache.airavata.model.workspace.experiment.ttypes.ExperimentSummary.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype61, _size58) = iprot.readListBegin()
          for _i62 in xrange(_size58):
            _elem63 = apache.airavata.model.workspace.experiment.ttypes.ExperimentSummary()
            _elem63.read(iprot)
            self.success.append(_elem63)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('searchExperimentsByName_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter64 in self.success:
        iter64.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class searchExperimentsByNameWithPagination_args:
  """
  Attributes:
   - gatewayId
   - userName
   - expName
   - limit
   - offset
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayId', None, None, ), # 1
    (2, TType.STRING, 'userName', None, None, ), # 2
    (3, TType.STRING, 'expName', None, None, ), # 3
    (4, TType.I32, 'limit', None, None, ), # 4
    (5, TType.I32, 'offset', None, None, ), # 5
  )

  def __init__(self, gatewayId=None, userName=None, expName=None, limit=None, offset=None,):
    self.gatewayId = gatewayId
    self.userName = userName
    self.expName = expName
    self.limit = limit
    self.offset = offset

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.userName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.expName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.limit = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.offset = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('searchExperimentsByNameWithPagination_args')
    if self.gatewayId is not None:
      oprot.writeFieldBegin('gatewayId', TType.STRING, 1)
      oprot.writeString(self.gatewayId)
      oprot.writeFieldEnd()
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 2)
      oprot.writeString(self.userName)
      oprot.writeFieldEnd()
    if self.expName is not None:
      oprot.writeFieldBegin('expName', TType.STRING, 3)
      oprot.writeString(self.expName)
      oprot.writeFieldEnd()
    if self.limit is not None:
      oprot.writeFieldBegin('limit', TType.I32, 4)
      oprot.writeI32(self.limit)
      oprot.writeFieldEnd()
    if self.offset is not None:
      oprot.writeFieldBegin('offset', TType.I32, 5)
      oprot.writeI32(self.offset)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayId is None:
      raise TProtocol.TProtocolException(message='Required field gatewayId is unset!')
    if self.userName is None:
      raise TProtocol.TProtocolException(message='Required field userName is unset!')
    if self.expName is None:
      raise TProtocol.TProtocolException(message='Required field expName is unset!')
    if self.limit is None:
      raise TProtocol.TProtocolException(message='Required field limit is unset!')
    if self.offset is None:
      raise TProtocol.TProtocolException(message='Required field offset is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayId)
    value = (value * 31) ^ hash(self.userName)
    value = (value * 31) ^ hash(self.expName)
    value = (value * 31) ^ hash(self.limit)
    value = (value * 31) ^ hash(self.offset)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class searchExperimentsByNameWithPagination_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(apache.airavata.model.workspace.experiment.ttypes.ExperimentSummary, apache.airavata.model.workspace.experiment.ttypes.ExperimentSummary.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype68, _size65) = iprot.readListBegin()
          for _i69 in xrange(_size65):
            _elem70 = apache.airavata.model.workspace.experiment.ttypes.ExperimentSummary()
            _elem70.read(iprot)
            self.success.append(_elem70)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('searchExperimentsByNameWithPagination_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter71 in self.success:
        iter71.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class searchExperimentsByDesc_args:
  """
  Attributes:
   - gatewayId
   - userName
   - description
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayId', None, None, ), # 1
    (2, TType.STRING, 'userName', None, None, ), # 2
    (3, TType.STRING, 'description', None, None, ), # 3
  )

  def __init__(self, gatewayId=None, userName=None, description=None,):
    self.gatewayId = gatewayId
    self.userName = userName
    self.description = description

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.userName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('searchExperimentsByDesc_args')
    if self.gatewayId is not None:
      oprot.writeFieldBegin('gatewayId', TType.STRING, 1)
      oprot.writeString(self.gatewayId)
      oprot.writeFieldEnd()
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 2)
      oprot.writeString(self.userName)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 3)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayId is None:
      raise TProtocol.TProtocolException(message='Required field gatewayId is unset!')
    if self.userName is None:
      raise TProtocol.TProtocolException(message='Required field userName is unset!')
    if self.description is None:
      raise TProtocol.TProtocolException(message='Required field description is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayId)
    value = (value * 31) ^ hash(self.userName)
    value = (value * 31) ^ hash(self.description)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class searchExperimentsByDesc_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(apache.airavata.model.workspace.experiment.ttypes.ExperimentSummary, apache.airavata.model.workspace.experiment.ttypes.ExperimentSummary.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype75, _size72) = iprot.readListBegin()
          for _i76 in xrange(_size72):
            _elem77 = apache.airavata.model.workspace.experiment.ttypes.ExperimentSummary()
            _elem77.read(iprot)
            self.success.append(_elem77)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('searchExperimentsByDesc_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter78 in self.success:
        iter78.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class searchExperimentsByDescWithPagination_args:
  """
  Attributes:
   - gatewayId
   - userName
   - description
   - limit
   - offset
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayId', None, None, ), # 1
    (2, TType.STRING, 'userName', None, None, ), # 2
    (3, TType.STRING, 'description', None, None, ), # 3
    (4, TType.I32, 'limit', None, None, ), # 4
    (5, TType.I32, 'offset', None, None, ), # 5
  )

  def __init__(self, gatewayId=None, userName=None, description=None, limit=None, offset=None,):
    self.gatewayId = gatewayId
    self.userName = userName
    self.description = description
    self.limit = limit
    self.offset = offset

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.userName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.limit = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.offset = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('searchExperimentsByDescWithPagination_args')
    if self.gatewayId is not None:
      oprot.writeFieldBegin('gatewayId', TType.STRING, 1)
      oprot.writeString(self.gatewayId)
      oprot.writeFieldEnd()
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 2)
      oprot.writeString(self.userName)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 3)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    if self.limit is not None:
      oprot.writeFieldBegin('limit', TType.I32, 4)
      oprot.writeI32(self.limit)
      oprot.writeFieldEnd()
    if self.offset is not None:
      oprot.writeFieldBegin('offset', TType.I32, 5)
      oprot.writeI32(self.offset)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayId is None:
      raise TProtocol.TProtocolException(message='Required field gatewayId is unset!')
    if self.userName is None:
      raise TProtocol.TProtocolException(message='Required field userName is unset!')
    if self.description is None:
      raise TProtocol.TProtocolException(message='Required field description is unset!')
    if self.limit is None:
      raise TProtocol.TProtocolException(message='Required field limit is unset!')
    if self.offset is None:
      raise TProtocol.TProtocolException(message='Required field offset is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayId)
    value = (value * 31) ^ hash(self.userName)
    value = (value * 31) ^ hash(self.description)
    value = (value * 31) ^ hash(self.limit)
    value = (value * 31) ^ hash(self.offset)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class searchExperimentsByDescWithPagination_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(apache.airavata.model.workspace.experiment.ttypes.ExperimentSummary, apache.airavata.model.workspace.experiment.ttypes.ExperimentSummary.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype82, _size79) = iprot.readListBegin()
          for _i83 in xrange(_size79):
            _elem84 = apache.airavata.model.workspace.experiment.ttypes.ExperimentSummary()
            _elem84.read(iprot)
            self.success.append(_elem84)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('searchExperimentsByDescWithPagination_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter85 in self.success:
        iter85.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class searchExperimentsByApplication_args:
  """
  Attributes:
   - gatewayId
   - userName
   - applicationId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayId', None, None, ), # 1
    (2, TType.STRING, 'userName', None, None, ), # 2
    (3, TType.STRING, 'applicationId', None, None, ), # 3
  )

  def __init__(self, gatewayId=None, userName=None, applicationId=None,):
    self.gatewayId = gatewayId
    self.userName = userName
    self.applicationId = applicationId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.userName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.applicationId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('searchExperimentsByApplication_args')
    if self.gatewayId is not None:
      oprot.writeFieldBegin('gatewayId', TType.STRING, 1)
      oprot.writeString(self.gatewayId)
      oprot.writeFieldEnd()
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 2)
      oprot.writeString(self.userName)
      oprot.writeFieldEnd()
    if self.applicationId is not None:
      oprot.writeFieldBegin('applicationId', TType.STRING, 3)
      oprot.writeString(self.applicationId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayId is None:
      raise TProtocol.TProtocolException(message='Required field gatewayId is unset!')
    if self.userName is None:
      raise TProtocol.TProtocolException(message='Required field userName is unset!')
    if self.applicationId is None:
      raise TProtocol.TProtocolException(message='Required field applicationId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayId)
    value = (value * 31) ^ hash(self.userName)
    value = (value * 31) ^ hash(self.applicationId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class searchExperimentsByApplication_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(apache.airavata.model.workspace.experiment.ttypes.ExperimentSummary, apache.airavata.model.workspace.experiment.ttypes.ExperimentSummary.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype89, _size86) = iprot.readListBegin()
          for _i90 in xrange(_size86):
            _elem91 = apache.airavata.model.workspace.experiment.ttypes.ExperimentSummary()
            _elem91.read(iprot)
            self.success.append(_elem91)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('searchExperimentsByApplication_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter92 in self.success:
        iter92.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class searchExperimentsByApplicationWithPagination_args:
  """
  Attributes:
   - gatewayId
   - userName
   - applicationId
   - limit
   - offset
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayId', None, None, ), # 1
    (2, TType.STRING, 'userName', None, None, ), # 2
    (3, TType.STRING, 'applicationId', None, None, ), # 3
    (4, TType.I32, 'limit', None, None, ), # 4
    (5, TType.I32, 'offset', None, None, ), # 5
  )

  def __init__(self, gatewayId=None, userName=None, applicationId=None, limit=None, offset=None,):
    self.gatewayId = gatewayId
    self.userName = userName
    self.applicationId = applicationId
    self.limit = limit
    self.offset = offset

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.userName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.applicationId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.limit = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.offset = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('searchExperimentsByApplicationWithPagination_args')
    if self.gatewayId is not None:
      oprot.writeFieldBegin('gatewayId', TType.STRING, 1)
      oprot.writeString(self.gatewayId)
      oprot.writeFieldEnd()
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 2)
      oprot.writeString(self.userName)
      oprot.writeFieldEnd()
    if self.applicationId is not None:
      oprot.writeFieldBegin('applicationId', TType.STRING, 3)
      oprot.writeString(self.applicationId)
      oprot.writeFieldEnd()
    if self.limit is not None:
      oprot.writeFieldBegin('limit', TType.I32, 4)
      oprot.writeI32(self.limit)
      oprot.writeFieldEnd()
    if self.offset is not None:
      oprot.writeFieldBegin('offset', TType.I32, 5)
      oprot.writeI32(self.offset)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayId is None:
      raise TProtocol.TProtocolException(message='Required field gatewayId is unset!')
    if self.userName is None:
      raise TProtocol.TProtocolException(message='Required field userName is unset!')
    if self.applicationId is None:
      raise TProtocol.TProtocolException(message='Required field applicationId is unset!')
    if self.limit is None:
      raise TProtocol.TProtocolException(message='Required field limit is unset!')
    if self.offset is None:
      raise TProtocol.TProtocolException(message='Required field offset is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayId)
    value = (value * 31) ^ hash(self.userName)
    value = (value * 31) ^ hash(self.applicationId)
    value = (value * 31) ^ hash(self.limit)
    value = (value * 31) ^ hash(self.offset)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class searchExperimentsByApplicationWithPagination_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(apache.airavata.model.workspace.experiment.ttypes.ExperimentSummary, apache.airavata.model.workspace.experiment.ttypes.ExperimentSummary.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype96, _size93) = iprot.readListBegin()
          for _i97 in xrange(_size93):
            _elem98 = apache.airavata.model.workspace.experiment.ttypes.ExperimentSummary()
            _elem98.read(iprot)
            self.success.append(_elem98)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('searchExperimentsByApplicationWithPagination_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter99 in self.success:
        iter99.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class searchExperimentsByStatus_args:
  """
  Attributes:
   - gatewayId
   - userName
   - experimentState
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayId', None, None, ), # 1
    (2, TType.STRING, 'userName', None, None, ), # 2
    (3, TType.I32, 'experimentState', None, None, ), # 3
  )

  def __init__(self, gatewayId=None, userName=None, experimentState=None,):
    self.gatewayId = gatewayId
    self.userName = userName
    self.experimentState = experimentState

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.userName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.experimentState = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('searchExperimentsByStatus_args')
    if self.gatewayId is not None:
      oprot.writeFieldBegin('gatewayId', TType.STRING, 1)
      oprot.writeString(self.gatewayId)
      oprot.writeFieldEnd()
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 2)
      oprot.writeString(self.userName)
      oprot.writeFieldEnd()
    if self.experimentState is not None:
      oprot.writeFieldBegin('experimentState', TType.I32, 3)
      oprot.writeI32(self.experimentState)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayId is None:
      raise TProtocol.TProtocolException(message='Required field gatewayId is unset!')
    if self.userName is None:
      raise TProtocol.TProtocolException(message='Required field userName is unset!')
    if self.experimentState is None:
      raise TProtocol.TProtocolException(message='Required field experimentState is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayId)
    value = (value * 31) ^ hash(self.userName)
    value = (value * 31) ^ hash(self.experimentState)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class searchExperimentsByStatus_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(apache.airavata.model.workspace.experiment.ttypes.ExperimentSummary, apache.airavata.model.workspace.experiment.ttypes.ExperimentSummary.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype103, _size100) = iprot.readListBegin()
          for _i104 in xrange(_size100):
            _elem105 = apache.airavata.model.workspace.experiment.ttypes.ExperimentSummary()
            _elem105.read(iprot)
            self.success.append(_elem105)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('searchExperimentsByStatus_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter106 in self.success:
        iter106.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class searchExperimentsByStatusWithPagination_args:
  """
  Attributes:
   - gatewayId
   - userName
   - experimentState
   - limit
   - offset
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayId', None, None, ), # 1
    (2, TType.STRING, 'userName', None, None, ), # 2
    (3, TType.I32, 'experimentState', None, None, ), # 3
    (4, TType.I32, 'limit', None, None, ), # 4
    (5, TType.I32, 'offset', None, None, ), # 5
  )

  def __init__(self, gatewayId=None, userName=None, experimentState=None, limit=None, offset=None,):
    self.gatewayId = gatewayId
    self.userName = userName
    self.experimentState = experimentState
    self.limit = limit
    self.offset = offset

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.userName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.experimentState = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.limit = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.offset = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('searchExperimentsByStatusWithPagination_args')
    if self.gatewayId is not None:
      oprot.writeFieldBegin('gatewayId', TType.STRING, 1)
      oprot.writeString(self.gatewayId)
      oprot.writeFieldEnd()
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 2)
      oprot.writeString(self.userName)
      oprot.writeFieldEnd()
    if self.experimentState is not None:
      oprot.writeFieldBegin('experimentState', TType.I32, 3)
      oprot.writeI32(self.experimentState)
      oprot.writeFieldEnd()
    if self.limit is not None:
      oprot.writeFieldBegin('limit', TType.I32, 4)
      oprot.writeI32(self.limit)
      oprot.writeFieldEnd()
    if self.offset is not None:
      oprot.writeFieldBegin('offset', TType.I32, 5)
      oprot.writeI32(self.offset)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayId is None:
      raise TProtocol.TProtocolException(message='Required field gatewayId is unset!')
    if self.userName is None:
      raise TProtocol.TProtocolException(message='Required field userName is unset!')
    if self.experimentState is None:
      raise TProtocol.TProtocolException(message='Required field experimentState is unset!')
    if self.limit is None:
      raise TProtocol.TProtocolException(message='Required field limit is unset!')
    if self.offset is None:
      raise TProtocol.TProtocolException(message='Required field offset is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayId)
    value = (value * 31) ^ hash(self.userName)
    value = (value * 31) ^ hash(self.experimentState)
    value = (value * 31) ^ hash(self.limit)
    value = (value * 31) ^ hash(self.offset)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class searchExperimentsByStatusWithPagination_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(apache.airavata.model.workspace.experiment.ttypes.ExperimentSummary, apache.airavata.model.workspace.experiment.ttypes.ExperimentSummary.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype110, _size107) = iprot.readListBegin()
          for _i111 in xrange(_size107):
            _elem112 = apache.airavata.model.workspace.experiment.ttypes.ExperimentSummary()
            _elem112.read(iprot)
            self.success.append(_elem112)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('searchExperimentsByStatusWithPagination_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter113 in self.success:
        iter113.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class searchExperimentsByCreationTime_args:
  """
  Attributes:
   - gatewayId
   - userName
   - fromTime
   - toTime
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayId', None, None, ), # 1
    (2, TType.STRING, 'userName', None, None, ), # 2
    (3, TType.I64, 'fromTime', None, None, ), # 3
    (4, TType.I64, 'toTime', None, None, ), # 4
  )

  def __init__(self, gatewayId=None, userName=None, fromTime=None, toTime=None,):
    self.gatewayId = gatewayId
    self.userName = userName
    self.fromTime = fromTime
    self.toTime = toTime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.userName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.fromTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.toTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('searchExperimentsByCreationTime_args')
    if self.gatewayId is not None:
      oprot.writeFieldBegin('gatewayId', TType.STRING, 1)
      oprot.writeString(self.gatewayId)
      oprot.writeFieldEnd()
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 2)
      oprot.writeString(self.userName)
      oprot.writeFieldEnd()
    if self.fromTime is not None:
      oprot.writeFieldBegin('fromTime', TType.I64, 3)
      oprot.writeI64(self.fromTime)
      oprot.writeFieldEnd()
    if self.toTime is not None:
      oprot.writeFieldBegin('toTime', TType.I64, 4)
      oprot.writeI64(self.toTime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayId is None:
      raise TProtocol.TProtocolException(message='Required field gatewayId is unset!')
    if self.userName is None:
      raise TProtocol.TProtocolException(message='Required field userName is unset!')
    if self.fromTime is None:
      raise TProtocol.TProtocolException(message='Required field fromTime is unset!')
    if self.toTime is None:
      raise TProtocol.TProtocolException(message='Required field toTime is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayId)
    value = (value * 31) ^ hash(self.userName)
    value = (value * 31) ^ hash(self.fromTime)
    value = (value * 31) ^ hash(self.toTime)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class searchExperimentsByCreationTime_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(apache.airavata.model.workspace.experiment.ttypes.ExperimentSummary, apache.airavata.model.workspace.experiment.ttypes.ExperimentSummary.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype117, _size114) = iprot.readListBegin()
          for _i118 in xrange(_size114):
            _elem119 = apache.airavata.model.workspace.experiment.ttypes.ExperimentSummary()
            _elem119.read(iprot)
            self.success.append(_elem119)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('searchExperimentsByCreationTime_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter120 in self.success:
        iter120.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class searchExperimentsByCreationTimeWithPagination_args:
  """
  Attributes:
   - gatewayId
   - userName
   - fromTime
   - toTime
   - limit
   - offset
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayId', None, None, ), # 1
    (2, TType.STRING, 'userName', None, None, ), # 2
    (3, TType.I64, 'fromTime', None, None, ), # 3
    (4, TType.I64, 'toTime', None, None, ), # 4
    (5, TType.I32, 'limit', None, None, ), # 5
    (6, TType.I32, 'offset', None, None, ), # 6
  )

  def __init__(self, gatewayId=None, userName=None, fromTime=None, toTime=None, limit=None, offset=None,):
    self.gatewayId = gatewayId
    self.userName = userName
    self.fromTime = fromTime
    self.toTime = toTime
    self.limit = limit
    self.offset = offset

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.userName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.fromTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.toTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.limit = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.offset = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('searchExperimentsByCreationTimeWithPagination_args')
    if self.gatewayId is not None:
      oprot.writeFieldBegin('gatewayId', TType.STRING, 1)
      oprot.writeString(self.gatewayId)
      oprot.writeFieldEnd()
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 2)
      oprot.writeString(self.userName)
      oprot.writeFieldEnd()
    if self.fromTime is not None:
      oprot.writeFieldBegin('fromTime', TType.I64, 3)
      oprot.writeI64(self.fromTime)
      oprot.writeFieldEnd()
    if self.toTime is not None:
      oprot.writeFieldBegin('toTime', TType.I64, 4)
      oprot.writeI64(self.toTime)
      oprot.writeFieldEnd()
    if self.limit is not None:
      oprot.writeFieldBegin('limit', TType.I32, 5)
      oprot.writeI32(self.limit)
      oprot.writeFieldEnd()
    if self.offset is not None:
      oprot.writeFieldBegin('offset', TType.I32, 6)
      oprot.writeI32(self.offset)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayId is None:
      raise TProtocol.TProtocolException(message='Required field gatewayId is unset!')
    if self.userName is None:
      raise TProtocol.TProtocolException(message='Required field userName is unset!')
    if self.fromTime is None:
      raise TProtocol.TProtocolException(message='Required field fromTime is unset!')
    if self.toTime is None:
      raise TProtocol.TProtocolException(message='Required field toTime is unset!')
    if self.limit is None:
      raise TProtocol.TProtocolException(message='Required field limit is unset!')
    if self.offset is None:
      raise TProtocol.TProtocolException(message='Required field offset is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayId)
    value = (value * 31) ^ hash(self.userName)
    value = (value * 31) ^ hash(self.fromTime)
    value = (value * 31) ^ hash(self.toTime)
    value = (value * 31) ^ hash(self.limit)
    value = (value * 31) ^ hash(self.offset)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class searchExperimentsByCreationTimeWithPagination_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(apache.airavata.model.workspace.experiment.ttypes.ExperimentSummary, apache.airavata.model.workspace.experiment.ttypes.ExperimentSummary.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype124, _size121) = iprot.readListBegin()
          for _i125 in xrange(_size121):
            _elem126 = apache.airavata.model.workspace.experiment.ttypes.ExperimentSummary()
            _elem126.read(iprot)
            self.success.append(_elem126)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('searchExperimentsByCreationTimeWithPagination_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter127 in self.success:
        iter127.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class searchExperiments_args:
  """
  Attributes:
   - gatewayId
   - userName
   - filters
   - limit
   - offset
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayId', None, None, ), # 1
    (2, TType.STRING, 'userName', None, None, ), # 2
    (3, TType.MAP, 'filters', (TType.I32,None,TType.STRING,None), None, ), # 3
    (4, TType.I32, 'limit', None, None, ), # 4
    (5, TType.I32, 'offset', None, None, ), # 5
  )

  def __init__(self, gatewayId=None, userName=None, filters=None, limit=None, offset=None,):
    self.gatewayId = gatewayId
    self.userName = userName
    self.filters = filters
    self.limit = limit
    self.offset = offset

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.userName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.filters = {}
          (_ktype129, _vtype130, _size128 ) = iprot.readMapBegin()
          for _i132 in xrange(_size128):
            _key133 = iprot.readI32();
            _val134 = iprot.readString();
            self.filters[_key133] = _val134
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.limit = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.offset = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('searchExperiments_args')
    if self.gatewayId is not None:
      oprot.writeFieldBegin('gatewayId', TType.STRING, 1)
      oprot.writeString(self.gatewayId)
      oprot.writeFieldEnd()
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 2)
      oprot.writeString(self.userName)
      oprot.writeFieldEnd()
    if self.filters is not None:
      oprot.writeFieldBegin('filters', TType.MAP, 3)
      oprot.writeMapBegin(TType.I32, TType.STRING, len(self.filters))
      for kiter135,viter136 in self.filters.items():
        oprot.writeI32(kiter135)
        oprot.writeString(viter136)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.limit is not None:
      oprot.writeFieldBegin('limit', TType.I32, 4)
      oprot.writeI32(self.limit)
      oprot.writeFieldEnd()
    if self.offset is not None:
      oprot.writeFieldBegin('offset', TType.I32, 5)
      oprot.writeI32(self.offset)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayId is None:
      raise TProtocol.TProtocolException(message='Required field gatewayId is unset!')
    if self.userName is None:
      raise TProtocol.TProtocolException(message='Required field userName is unset!')
    if self.limit is None:
      raise TProtocol.TProtocolException(message='Required field limit is unset!')
    if self.offset is None:
      raise TProtocol.TProtocolException(message='Required field offset is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayId)
    value = (value * 31) ^ hash(self.userName)
    value = (value * 31) ^ hash(self.filters)
    value = (value * 31) ^ hash(self.limit)
    value = (value * 31) ^ hash(self.offset)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class searchExperiments_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(apache.airavata.model.workspace.experiment.ttypes.ExperimentSummary, apache.airavata.model.workspace.experiment.ttypes.ExperimentSummary.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype140, _size137) = iprot.readListBegin()
          for _i141 in xrange(_size137):
            _elem142 = apache.airavata.model.workspace.experiment.ttypes.ExperimentSummary()
            _elem142.read(iprot)
            self.success.append(_elem142)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('searchExperiments_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter143 in self.success:
        iter143.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getExperimentStatistics_args:
  """
  Attributes:
   - gatewayId
   - fromTime
   - toTime
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayId', None, None, ), # 1
    (2, TType.I64, 'fromTime', None, None, ), # 2
    (3, TType.I64, 'toTime', None, None, ), # 3
  )

  def __init__(self, gatewayId=None, fromTime=None, toTime=None,):
    self.gatewayId = gatewayId
    self.fromTime = fromTime
    self.toTime = toTime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.fromTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.toTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getExperimentStatistics_args')
    if self.gatewayId is not None:
      oprot.writeFieldBegin('gatewayId', TType.STRING, 1)
      oprot.writeString(self.gatewayId)
      oprot.writeFieldEnd()
    if self.fromTime is not None:
      oprot.writeFieldBegin('fromTime', TType.I64, 2)
      oprot.writeI64(self.fromTime)
      oprot.writeFieldEnd()
    if self.toTime is not None:
      oprot.writeFieldBegin('toTime', TType.I64, 3)
      oprot.writeI64(self.toTime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayId is None:
      raise TProtocol.TProtocolException(message='Required field gatewayId is unset!')
    if self.fromTime is None:
      raise TProtocol.TProtocolException(message='Required field fromTime is unset!')
    if self.toTime is None:
      raise TProtocol.TProtocolException(message='Required field toTime is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayId)
    value = (value * 31) ^ hash(self.fromTime)
    value = (value * 31) ^ hash(self.toTime)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getExperimentStatistics_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (apache.airavata.model.workspace.experiment.ttypes.ExperimentStatistics, apache.airavata.model.workspace.experiment.ttypes.ExperimentStatistics.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = apache.airavata.model.workspace.experiment.ttypes.ExperimentStatistics()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getExperimentStatistics_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllExperimentsInProject_args:
  """
  Attributes:
   - projectId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'projectId', None, None, ), # 1
  )

  def __init__(self, projectId=None,):
    self.projectId = projectId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.projectId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllExperimentsInProject_args')
    if self.projectId is not None:
      oprot.writeFieldBegin('projectId', TType.STRING, 1)
      oprot.writeString(self.projectId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.projectId is None:
      raise TProtocol.TProtocolException(message='Required field projectId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.projectId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllExperimentsInProject_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
   - pnfe
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(apache.airavata.model.workspace.experiment.ttypes.Experiment, apache.airavata.model.workspace.experiment.ttypes.Experiment.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'pnfe', (apache.airavata.api.error.ttypes.ProjectNotFoundException, apache.airavata.api.error.ttypes.ProjectNotFoundException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None, pnfe=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase
    self.pnfe = pnfe

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype147, _size144) = iprot.readListBegin()
          for _i148 in xrange(_size144):
            _elem149 = apache.airavata.model.workspace.experiment.ttypes.Experiment()
            _elem149.read(iprot)
            self.success.append(_elem149)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.pnfe = apache.airavata.api.error.ttypes.ProjectNotFoundException()
          self.pnfe.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllExperimentsInProject_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter150 in self.success:
        iter150.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    if self.pnfe is not None:
      oprot.writeFieldBegin('pnfe', TType.STRUCT, 4)
      self.pnfe.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    value = (value * 31) ^ hash(self.pnfe)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllExperimentsInProjectWithPagination_args:
  """
  Attributes:
   - projectId
   - limit
   - offset
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'projectId', None, None, ), # 1
    (2, TType.I32, 'limit', None, None, ), # 2
    (3, TType.I32, 'offset', None, None, ), # 3
  )

  def __init__(self, projectId=None, limit=None, offset=None,):
    self.projectId = projectId
    self.limit = limit
    self.offset = offset

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.projectId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.limit = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.offset = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllExperimentsInProjectWithPagination_args')
    if self.projectId is not None:
      oprot.writeFieldBegin('projectId', TType.STRING, 1)
      oprot.writeString(self.projectId)
      oprot.writeFieldEnd()
    if self.limit is not None:
      oprot.writeFieldBegin('limit', TType.I32, 2)
      oprot.writeI32(self.limit)
      oprot.writeFieldEnd()
    if self.offset is not None:
      oprot.writeFieldBegin('offset', TType.I32, 3)
      oprot.writeI32(self.offset)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.projectId is None:
      raise TProtocol.TProtocolException(message='Required field projectId is unset!')
    if self.limit is None:
      raise TProtocol.TProtocolException(message='Required field limit is unset!')
    if self.offset is None:
      raise TProtocol.TProtocolException(message='Required field offset is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.projectId)
    value = (value * 31) ^ hash(self.limit)
    value = (value * 31) ^ hash(self.offset)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllExperimentsInProjectWithPagination_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
   - pnfe
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(apache.airavata.model.workspace.experiment.ttypes.Experiment, apache.airavata.model.workspace.experiment.ttypes.Experiment.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'pnfe', (apache.airavata.api.error.ttypes.ProjectNotFoundException, apache.airavata.api.error.ttypes.ProjectNotFoundException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None, pnfe=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase
    self.pnfe = pnfe

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype154, _size151) = iprot.readListBegin()
          for _i155 in xrange(_size151):
            _elem156 = apache.airavata.model.workspace.experiment.ttypes.Experiment()
            _elem156.read(iprot)
            self.success.append(_elem156)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.pnfe = apache.airavata.api.error.ttypes.ProjectNotFoundException()
          self.pnfe.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllExperimentsInProjectWithPagination_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter157 in self.success:
        iter157.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    if self.pnfe is not None:
      oprot.writeFieldBegin('pnfe', TType.STRUCT, 4)
      self.pnfe.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    value = (value * 31) ^ hash(self.pnfe)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllUserExperiments_args:
  """
  Attributes:
   - gatewayId
   - userName
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayId', None, None, ), # 1
    (2, TType.STRING, 'userName', None, None, ), # 2
  )

  def __init__(self, gatewayId=None, userName=None,):
    self.gatewayId = gatewayId
    self.userName = userName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.userName = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllUserExperiments_args')
    if self.gatewayId is not None:
      oprot.writeFieldBegin('gatewayId', TType.STRING, 1)
      oprot.writeString(self.gatewayId)
      oprot.writeFieldEnd()
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 2)
      oprot.writeString(self.userName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayId is None:
      raise TProtocol.TProtocolException(message='Required field gatewayId is unset!')
    if self.userName is None:
      raise TProtocol.TProtocolException(message='Required field userName is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayId)
    value = (value * 31) ^ hash(self.userName)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllUserExperiments_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(apache.airavata.model.workspace.experiment.ttypes.Experiment, apache.airavata.model.workspace.experiment.ttypes.Experiment.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype161, _size158) = iprot.readListBegin()
          for _i162 in xrange(_size158):
            _elem163 = apache.airavata.model.workspace.experiment.ttypes.Experiment()
            _elem163.read(iprot)
            self.success.append(_elem163)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllUserExperiments_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter164 in self.success:
        iter164.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllUserExperimentsWithPagination_args:
  """
  Attributes:
   - gatewayId
   - userName
   - limit
   - offset
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayId', None, None, ), # 1
    (2, TType.STRING, 'userName', None, None, ), # 2
    (3, TType.I32, 'limit', None, None, ), # 3
    (4, TType.I32, 'offset', None, None, ), # 4
  )

  def __init__(self, gatewayId=None, userName=None, limit=None, offset=None,):
    self.gatewayId = gatewayId
    self.userName = userName
    self.limit = limit
    self.offset = offset

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.userName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.limit = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.offset = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllUserExperimentsWithPagination_args')
    if self.gatewayId is not None:
      oprot.writeFieldBegin('gatewayId', TType.STRING, 1)
      oprot.writeString(self.gatewayId)
      oprot.writeFieldEnd()
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 2)
      oprot.writeString(self.userName)
      oprot.writeFieldEnd()
    if self.limit is not None:
      oprot.writeFieldBegin('limit', TType.I32, 3)
      oprot.writeI32(self.limit)
      oprot.writeFieldEnd()
    if self.offset is not None:
      oprot.writeFieldBegin('offset', TType.I32, 4)
      oprot.writeI32(self.offset)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayId is None:
      raise TProtocol.TProtocolException(message='Required field gatewayId is unset!')
    if self.userName is None:
      raise TProtocol.TProtocolException(message='Required field userName is unset!')
    if self.limit is None:
      raise TProtocol.TProtocolException(message='Required field limit is unset!')
    if self.offset is None:
      raise TProtocol.TProtocolException(message='Required field offset is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayId)
    value = (value * 31) ^ hash(self.userName)
    value = (value * 31) ^ hash(self.limit)
    value = (value * 31) ^ hash(self.offset)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllUserExperimentsWithPagination_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(apache.airavata.model.workspace.experiment.ttypes.Experiment, apache.airavata.model.workspace.experiment.ttypes.Experiment.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype168, _size165) = iprot.readListBegin()
          for _i169 in xrange(_size165):
            _elem170 = apache.airavata.model.workspace.experiment.ttypes.Experiment()
            _elem170.read(iprot)
            self.success.append(_elem170)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllUserExperimentsWithPagination_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter171 in self.success:
        iter171.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createExperiment_args:
  """
  Attributes:
   - gatewayId
   - experiment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayId', None, None, ), # 1
    (2, TType.STRUCT, 'experiment', (apache.airavata.model.workspace.experiment.ttypes.Experiment, apache.airavata.model.workspace.experiment.ttypes.Experiment.thrift_spec), None, ), # 2
  )

  def __init__(self, gatewayId=None, experiment=None,):
    self.gatewayId = gatewayId
    self.experiment = experiment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.experiment = apache.airavata.model.workspace.experiment.ttypes.Experiment()
          self.experiment.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createExperiment_args')
    if self.gatewayId is not None:
      oprot.writeFieldBegin('gatewayId', TType.STRING, 1)
      oprot.writeString(self.gatewayId)
      oprot.writeFieldEnd()
    if self.experiment is not None:
      oprot.writeFieldBegin('experiment', TType.STRUCT, 2)
      self.experiment.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayId is None:
      raise TProtocol.TProtocolException(message='Required field gatewayId is unset!')
    if self.experiment is None:
      raise TProtocol.TProtocolException(message='Required field experiment is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayId)
    value = (value * 31) ^ hash(self.experiment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createExperiment_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createExperiment_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getExperiment_args:
  """
  Attributes:
   - airavataExperimentId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'airavataExperimentId', None, None, ), # 1
  )

  def __init__(self, airavataExperimentId=None,):
    self.airavataExperimentId = airavataExperimentId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.airavataExperimentId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getExperiment_args')
    if self.airavataExperimentId is not None:
      oprot.writeFieldBegin('airavataExperimentId', TType.STRING, 1)
      oprot.writeString(self.airavataExperimentId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.airavataExperimentId is None:
      raise TProtocol.TProtocolException(message='Required field airavataExperimentId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.airavataExperimentId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getExperiment_result:
  """
  Attributes:
   - success
   - ire
   - enf
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (apache.airavata.model.workspace.experiment.ttypes.Experiment, apache.airavata.model.workspace.experiment.ttypes.Experiment.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'enf', (apache.airavata.api.error.ttypes.ExperimentNotFoundException, apache.airavata.api.error.ttypes.ExperimentNotFoundException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, ire=None, enf=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.enf = enf
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = apache.airavata.model.workspace.experiment.ttypes.Experiment()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.enf = apache.airavata.api.error.ttypes.ExperimentNotFoundException()
          self.enf.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getExperiment_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.enf is not None:
      oprot.writeFieldBegin('enf', TType.STRUCT, 2)
      self.enf.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 3)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 4)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.enf)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateExperiment_args:
  """
  Attributes:
   - airavataExperimentId
   - experiment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'airavataExperimentId', None, None, ), # 1
    (2, TType.STRUCT, 'experiment', (apache.airavata.model.workspace.experiment.ttypes.Experiment, apache.airavata.model.workspace.experiment.ttypes.Experiment.thrift_spec), None, ), # 2
  )

  def __init__(self, airavataExperimentId=None, experiment=None,):
    self.airavataExperimentId = airavataExperimentId
    self.experiment = experiment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.airavataExperimentId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.experiment = apache.airavata.model.workspace.experiment.ttypes.Experiment()
          self.experiment.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateExperiment_args')
    if self.airavataExperimentId is not None:
      oprot.writeFieldBegin('airavataExperimentId', TType.STRING, 1)
      oprot.writeString(self.airavataExperimentId)
      oprot.writeFieldEnd()
    if self.experiment is not None:
      oprot.writeFieldBegin('experiment', TType.STRUCT, 2)
      self.experiment.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.airavataExperimentId is None:
      raise TProtocol.TProtocolException(message='Required field airavataExperimentId is unset!')
    if self.experiment is None:
      raise TProtocol.TProtocolException(message='Required field experiment is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.airavataExperimentId)
    value = (value * 31) ^ hash(self.experiment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateExperiment_result:
  """
  Attributes:
   - ire
   - enf
   - ace
   - ase
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'enf', (apache.airavata.api.error.ttypes.ExperimentNotFoundException, apache.airavata.api.error.ttypes.ExperimentNotFoundException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 4
  )

  def __init__(self, ire=None, enf=None, ace=None, ase=None,):
    self.ire = ire
    self.enf = enf
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.enf = apache.airavata.api.error.ttypes.ExperimentNotFoundException()
          self.enf.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateExperiment_result')
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.enf is not None:
      oprot.writeFieldBegin('enf', TType.STRUCT, 2)
      self.enf.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 3)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 4)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.enf)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateExperimentConfiguration_args:
  """
  Attributes:
   - airavataExperimentId
   - userConfiguration
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'airavataExperimentId', None, None, ), # 1
    (2, TType.STRUCT, 'userConfiguration', (apache.airavata.model.workspace.experiment.ttypes.UserConfigurationData, apache.airavata.model.workspace.experiment.ttypes.UserConfigurationData.thrift_spec), None, ), # 2
  )

  def __init__(self, airavataExperimentId=None, userConfiguration=None,):
    self.airavataExperimentId = airavataExperimentId
    self.userConfiguration = userConfiguration

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.airavataExperimentId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.userConfiguration = apache.airavata.model.workspace.experiment.ttypes.UserConfigurationData()
          self.userConfiguration.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateExperimentConfiguration_args')
    if self.airavataExperimentId is not None:
      oprot.writeFieldBegin('airavataExperimentId', TType.STRING, 1)
      oprot.writeString(self.airavataExperimentId)
      oprot.writeFieldEnd()
    if self.userConfiguration is not None:
      oprot.writeFieldBegin('userConfiguration', TType.STRUCT, 2)
      self.userConfiguration.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.airavataExperimentId is None:
      raise TProtocol.TProtocolException(message='Required field airavataExperimentId is unset!')
    if self.userConfiguration is None:
      raise TProtocol.TProtocolException(message='Required field userConfiguration is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.airavataExperimentId)
    value = (value * 31) ^ hash(self.userConfiguration)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateExperimentConfiguration_result:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateExperimentConfiguration_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateResourceScheduleing_args:
  """
  Attributes:
   - airavataExperimentId
   - resourceScheduling
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'airavataExperimentId', None, None, ), # 1
    (2, TType.STRUCT, 'resourceScheduling', (apache.airavata.model.workspace.experiment.ttypes.ComputationalResourceScheduling, apache.airavata.model.workspace.experiment.ttypes.ComputationalResourceScheduling.thrift_spec), None, ), # 2
  )

  def __init__(self, airavataExperimentId=None, resourceScheduling=None,):
    self.airavataExperimentId = airavataExperimentId
    self.resourceScheduling = resourceScheduling

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.airavataExperimentId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.resourceScheduling = apache.airavata.model.workspace.experiment.ttypes.ComputationalResourceScheduling()
          self.resourceScheduling.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateResourceScheduleing_args')
    if self.airavataExperimentId is not None:
      oprot.writeFieldBegin('airavataExperimentId', TType.STRING, 1)
      oprot.writeString(self.airavataExperimentId)
      oprot.writeFieldEnd()
    if self.resourceScheduling is not None:
      oprot.writeFieldBegin('resourceScheduling', TType.STRUCT, 2)
      self.resourceScheduling.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.airavataExperimentId is None:
      raise TProtocol.TProtocolException(message='Required field airavataExperimentId is unset!')
    if self.resourceScheduling is None:
      raise TProtocol.TProtocolException(message='Required field resourceScheduling is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.airavataExperimentId)
    value = (value * 31) ^ hash(self.resourceScheduling)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateResourceScheduleing_result:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateResourceScheduleing_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class validateExperiment_args:
  """
  Attributes:
   - airavataExperimentId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'airavataExperimentId', None, None, ), # 1
  )

  def __init__(self, airavataExperimentId=None,):
    self.airavataExperimentId = airavataExperimentId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.airavataExperimentId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('validateExperiment_args')
    if self.airavataExperimentId is not None:
      oprot.writeFieldBegin('airavataExperimentId', TType.STRING, 1)
      oprot.writeString(self.airavataExperimentId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.airavataExperimentId is None:
      raise TProtocol.TProtocolException(message='Required field airavataExperimentId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.airavataExperimentId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class validateExperiment_result:
  """
  Attributes:
   - success
   - ire
   - enf
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'enf', (apache.airavata.api.error.ttypes.ExperimentNotFoundException, apache.airavata.api.error.ttypes.ExperimentNotFoundException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, ire=None, enf=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.enf = enf
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.enf = apache.airavata.api.error.ttypes.ExperimentNotFoundException()
          self.enf.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('validateExperiment_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.enf is not None:
      oprot.writeFieldBegin('enf', TType.STRUCT, 2)
      self.enf.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 3)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 4)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.enf)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class launchExperiment_args:
  """
  Attributes:
   - airavataExperimentId
   - airavataCredStoreToken
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'airavataExperimentId', None, None, ), # 1
    (2, TType.STRING, 'airavataCredStoreToken', None, None, ), # 2
  )

  def __init__(self, airavataExperimentId=None, airavataCredStoreToken=None,):
    self.airavataExperimentId = airavataExperimentId
    self.airavataCredStoreToken = airavataCredStoreToken

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.airavataExperimentId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.airavataCredStoreToken = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('launchExperiment_args')
    if self.airavataExperimentId is not None:
      oprot.writeFieldBegin('airavataExperimentId', TType.STRING, 1)
      oprot.writeString(self.airavataExperimentId)
      oprot.writeFieldEnd()
    if self.airavataCredStoreToken is not None:
      oprot.writeFieldBegin('airavataCredStoreToken', TType.STRING, 2)
      oprot.writeString(self.airavataCredStoreToken)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.airavataExperimentId is None:
      raise TProtocol.TProtocolException(message='Required field airavataExperimentId is unset!')
    if self.airavataCredStoreToken is None:
      raise TProtocol.TProtocolException(message='Required field airavataCredStoreToken is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.airavataExperimentId)
    value = (value * 31) ^ hash(self.airavataCredStoreToken)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class launchExperiment_result:
  """
  Attributes:
   - ire
   - enf
   - ace
   - ase
   - lve
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'enf', (apache.airavata.api.error.ttypes.ExperimentNotFoundException, apache.airavata.api.error.ttypes.ExperimentNotFoundException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'lve', (apache.airavata.api.error.ttypes.LaunchValidationException, apache.airavata.api.error.ttypes.LaunchValidationException.thrift_spec), None, ), # 5
  )

  def __init__(self, ire=None, enf=None, ace=None, ase=None, lve=None,):
    self.ire = ire
    self.enf = enf
    self.ace = ace
    self.ase = ase
    self.lve = lve

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.enf = apache.airavata.api.error.ttypes.ExperimentNotFoundException()
          self.enf.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.lve = apache.airavata.api.error.ttypes.LaunchValidationException()
          self.lve.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('launchExperiment_result')
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.enf is not None:
      oprot.writeFieldBegin('enf', TType.STRUCT, 2)
      self.enf.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 3)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 4)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    if self.lve is not None:
      oprot.writeFieldBegin('lve', TType.STRUCT, 5)
      self.lve.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.enf)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    value = (value * 31) ^ hash(self.lve)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getExperimentStatus_args:
  """
  Attributes:
   - airavataExperimentId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'airavataExperimentId', None, None, ), # 1
  )

  def __init__(self, airavataExperimentId=None,):
    self.airavataExperimentId = airavataExperimentId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.airavataExperimentId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getExperimentStatus_args')
    if self.airavataExperimentId is not None:
      oprot.writeFieldBegin('airavataExperimentId', TType.STRING, 1)
      oprot.writeString(self.airavataExperimentId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.airavataExperimentId is None:
      raise TProtocol.TProtocolException(message='Required field airavataExperimentId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.airavataExperimentId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getExperimentStatus_result:
  """
  Attributes:
   - success
   - ire
   - enf
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (apache.airavata.model.workspace.experiment.ttypes.ExperimentStatus, apache.airavata.model.workspace.experiment.ttypes.ExperimentStatus.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'enf', (apache.airavata.api.error.ttypes.ExperimentNotFoundException, apache.airavata.api.error.ttypes.ExperimentNotFoundException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, ire=None, enf=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.enf = enf
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = apache.airavata.model.workspace.experiment.ttypes.ExperimentStatus()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.enf = apache.airavata.api.error.ttypes.ExperimentNotFoundException()
          self.enf.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getExperimentStatus_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.enf is not None:
      oprot.writeFieldBegin('enf', TType.STRUCT, 2)
      self.enf.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 3)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 4)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.enf)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getExperimentOutputs_args:
  """
  Attributes:
   - airavataExperimentId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'airavataExperimentId', None, None, ), # 1
  )

  def __init__(self, airavataExperimentId=None,):
    self.airavataExperimentId = airavataExperimentId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.airavataExperimentId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getExperimentOutputs_args')
    if self.airavataExperimentId is not None:
      oprot.writeFieldBegin('airavataExperimentId', TType.STRING, 1)
      oprot.writeString(self.airavataExperimentId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.airavataExperimentId is None:
      raise TProtocol.TProtocolException(message='Required field airavataExperimentId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.airavataExperimentId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getExperimentOutputs_result:
  """
  Attributes:
   - success
   - ire
   - enf
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(apache.airavata.model.appcatalog.appinterface.ttypes.OutputDataObjectType, apache.airavata.model.appcatalog.appinterface.ttypes.OutputDataObjectType.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'enf', (apache.airavata.api.error.ttypes.ExperimentNotFoundException, apache.airavata.api.error.ttypes.ExperimentNotFoundException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, ire=None, enf=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.enf = enf
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype175, _size172) = iprot.readListBegin()
          for _i176 in xrange(_size172):
            _elem177 = apache.airavata.model.appcatalog.appinterface.ttypes.OutputDataObjectType()
            _elem177.read(iprot)
            self.success.append(_elem177)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.enf = apache.airavata.api.error.ttypes.ExperimentNotFoundException()
          self.enf.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getExperimentOutputs_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter178 in self.success:
        iter178.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.enf is not None:
      oprot.writeFieldBegin('enf', TType.STRUCT, 2)
      self.enf.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 3)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 4)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.enf)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getIntermediateOutputs_args:
  """
  Attributes:
   - airavataExperimentId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'airavataExperimentId', None, None, ), # 1
  )

  def __init__(self, airavataExperimentId=None,):
    self.airavataExperimentId = airavataExperimentId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.airavataExperimentId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getIntermediateOutputs_args')
    if self.airavataExperimentId is not None:
      oprot.writeFieldBegin('airavataExperimentId', TType.STRING, 1)
      oprot.writeString(self.airavataExperimentId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.airavataExperimentId is None:
      raise TProtocol.TProtocolException(message='Required field airavataExperimentId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.airavataExperimentId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getIntermediateOutputs_result:
  """
  Attributes:
   - success
   - ire
   - enf
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(apache.airavata.model.appcatalog.appinterface.ttypes.OutputDataObjectType, apache.airavata.model.appcatalog.appinterface.ttypes.OutputDataObjectType.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'enf', (apache.airavata.api.error.ttypes.ExperimentNotFoundException, apache.airavata.api.error.ttypes.ExperimentNotFoundException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, ire=None, enf=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.enf = enf
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype182, _size179) = iprot.readListBegin()
          for _i183 in xrange(_size179):
            _elem184 = apache.airavata.model.appcatalog.appinterface.ttypes.OutputDataObjectType()
            _elem184.read(iprot)
            self.success.append(_elem184)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.enf = apache.airavata.api.error.ttypes.ExperimentNotFoundException()
          self.enf.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getIntermediateOutputs_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter185 in self.success:
        iter185.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.enf is not None:
      oprot.writeFieldBegin('enf', TType.STRUCT, 2)
      self.enf.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 3)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 4)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.enf)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getJobStatuses_args:
  """
  Attributes:
   - airavataExperimentId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'airavataExperimentId', None, None, ), # 1
  )

  def __init__(self, airavataExperimentId=None,):
    self.airavataExperimentId = airavataExperimentId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.airavataExperimentId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getJobStatuses_args')
    if self.airavataExperimentId is not None:
      oprot.writeFieldBegin('airavataExperimentId', TType.STRING, 1)
      oprot.writeString(self.airavataExperimentId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.airavataExperimentId is None:
      raise TProtocol.TProtocolException(message='Required field airavataExperimentId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.airavataExperimentId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getJobStatuses_result:
  """
  Attributes:
   - success
   - ire
   - enf
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.STRUCT,(apache.airavata.model.workspace.experiment.ttypes.JobStatus, apache.airavata.model.workspace.experiment.ttypes.JobStatus.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'enf', (apache.airavata.api.error.ttypes.ExperimentNotFoundException, apache.airavata.api.error.ttypes.ExperimentNotFoundException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, ire=None, enf=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.enf = enf
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype187, _vtype188, _size186 ) = iprot.readMapBegin()
          for _i190 in xrange(_size186):
            _key191 = iprot.readString();
            _val192 = apache.airavata.model.workspace.experiment.ttypes.JobStatus()
            _val192.read(iprot)
            self.success[_key191] = _val192
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.enf = apache.airavata.api.error.ttypes.ExperimentNotFoundException()
          self.enf.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getJobStatuses_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.success))
      for kiter193,viter194 in self.success.items():
        oprot.writeString(kiter193)
        viter194.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.enf is not None:
      oprot.writeFieldBegin('enf', TType.STRUCT, 2)
      self.enf.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 3)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 4)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.enf)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getJobDetails_args:
  """
  Attributes:
   - airavataExperimentId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'airavataExperimentId', None, None, ), # 1
  )

  def __init__(self, airavataExperimentId=None,):
    self.airavataExperimentId = airavataExperimentId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.airavataExperimentId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getJobDetails_args')
    if self.airavataExperimentId is not None:
      oprot.writeFieldBegin('airavataExperimentId', TType.STRING, 1)
      oprot.writeString(self.airavataExperimentId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.airavataExperimentId is None:
      raise TProtocol.TProtocolException(message='Required field airavataExperimentId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.airavataExperimentId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getJobDetails_result:
  """
  Attributes:
   - success
   - ire
   - enf
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(apache.airavata.model.workspace.experiment.ttypes.JobDetails, apache.airavata.model.workspace.experiment.ttypes.JobDetails.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'enf', (apache.airavata.api.error.ttypes.ExperimentNotFoundException, apache.airavata.api.error.ttypes.ExperimentNotFoundException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, ire=None, enf=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.enf = enf
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype198, _size195) = iprot.readListBegin()
          for _i199 in xrange(_size195):
            _elem200 = apache.airavata.model.workspace.experiment.ttypes.JobDetails()
            _elem200.read(iprot)
            self.success.append(_elem200)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.enf = apache.airavata.api.error.ttypes.ExperimentNotFoundException()
          self.enf.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getJobDetails_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter201 in self.success:
        iter201.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.enf is not None:
      oprot.writeFieldBegin('enf', TType.STRUCT, 2)
      self.enf.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 3)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 4)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.enf)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getDataTransferDetails_args:
  """
  Attributes:
   - airavataExperimentId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'airavataExperimentId', None, None, ), # 1
  )

  def __init__(self, airavataExperimentId=None,):
    self.airavataExperimentId = airavataExperimentId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.airavataExperimentId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getDataTransferDetails_args')
    if self.airavataExperimentId is not None:
      oprot.writeFieldBegin('airavataExperimentId', TType.STRING, 1)
      oprot.writeString(self.airavataExperimentId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.airavataExperimentId is None:
      raise TProtocol.TProtocolException(message='Required field airavataExperimentId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.airavataExperimentId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getDataTransferDetails_result:
  """
  Attributes:
   - success
   - ire
   - enf
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(apache.airavata.model.workspace.experiment.ttypes.DataTransferDetails, apache.airavata.model.workspace.experiment.ttypes.DataTransferDetails.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'enf', (apache.airavata.api.error.ttypes.ExperimentNotFoundException, apache.airavata.api.error.ttypes.ExperimentNotFoundException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, ire=None, enf=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.enf = enf
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype205, _size202) = iprot.readListBegin()
          for _i206 in xrange(_size202):
            _elem207 = apache.airavata.model.workspace.experiment.ttypes.DataTransferDetails()
            _elem207.read(iprot)
            self.success.append(_elem207)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.enf = apache.airavata.api.error.ttypes.ExperimentNotFoundException()
          self.enf.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getDataTransferDetails_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter208 in self.success:
        iter208.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.enf is not None:
      oprot.writeFieldBegin('enf', TType.STRUCT, 2)
      self.enf.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 3)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 4)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.enf)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class cloneExperiment_args:
  """
  Attributes:
   - existingExperimentID
   - newExperimentName
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'existingExperimentID', None, None, ), # 1
    (2, TType.STRING, 'newExperimentName', None, None, ), # 2
  )

  def __init__(self, existingExperimentID=None, newExperimentName=None,):
    self.existingExperimentID = existingExperimentID
    self.newExperimentName = newExperimentName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.existingExperimentID = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.newExperimentName = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('cloneExperiment_args')
    if self.existingExperimentID is not None:
      oprot.writeFieldBegin('existingExperimentID', TType.STRING, 1)
      oprot.writeString(self.existingExperimentID)
      oprot.writeFieldEnd()
    if self.newExperimentName is not None:
      oprot.writeFieldBegin('newExperimentName', TType.STRING, 2)
      oprot.writeString(self.newExperimentName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.existingExperimentID)
    value = (value * 31) ^ hash(self.newExperimentName)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class cloneExperiment_result:
  """
  Attributes:
   - success
   - ire
   - enf
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'enf', (apache.airavata.api.error.ttypes.ExperimentNotFoundException, apache.airavata.api.error.ttypes.ExperimentNotFoundException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, ire=None, enf=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.enf = enf
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.enf = apache.airavata.api.error.ttypes.ExperimentNotFoundException()
          self.enf.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('cloneExperiment_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.enf is not None:
      oprot.writeFieldBegin('enf', TType.STRUCT, 2)
      self.enf.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 3)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 4)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.enf)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class terminateExperiment_args:
  """
  Attributes:
   - airavataExperimentId
   - tokenId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'airavataExperimentId', None, None, ), # 1
    (2, TType.STRING, 'tokenId', None, None, ), # 2
  )

  def __init__(self, airavataExperimentId=None, tokenId=None,):
    self.airavataExperimentId = airavataExperimentId
    self.tokenId = tokenId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.airavataExperimentId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.tokenId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('terminateExperiment_args')
    if self.airavataExperimentId is not None:
      oprot.writeFieldBegin('airavataExperimentId', TType.STRING, 1)
      oprot.writeString(self.airavataExperimentId)
      oprot.writeFieldEnd()
    if self.tokenId is not None:
      oprot.writeFieldBegin('tokenId', TType.STRING, 2)
      oprot.writeString(self.tokenId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.airavataExperimentId)
    value = (value * 31) ^ hash(self.tokenId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class terminateExperiment_result:
  """
  Attributes:
   - ire
   - enf
   - ace
   - ase
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'enf', (apache.airavata.api.error.ttypes.ExperimentNotFoundException, apache.airavata.api.error.ttypes.ExperimentNotFoundException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 4
  )

  def __init__(self, ire=None, enf=None, ace=None, ase=None,):
    self.ire = ire
    self.enf = enf
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.enf = apache.airavata.api.error.ttypes.ExperimentNotFoundException()
          self.enf.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('terminateExperiment_result')
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.enf is not None:
      oprot.writeFieldBegin('enf', TType.STRUCT, 2)
      self.enf.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 3)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 4)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.enf)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class registerApplicationModule_args:
  """
  Attributes:
   - gatewayId
   - applicationModule
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayId', None, None, ), # 1
    (2, TType.STRUCT, 'applicationModule', (apache.airavata.model.appcatalog.appdeployment.ttypes.ApplicationModule, apache.airavata.model.appcatalog.appdeployment.ttypes.ApplicationModule.thrift_spec), None, ), # 2
  )

  def __init__(self, gatewayId=None, applicationModule=None,):
    self.gatewayId = gatewayId
    self.applicationModule = applicationModule

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.applicationModule = apache.airavata.model.appcatalog.appdeployment.ttypes.ApplicationModule()
          self.applicationModule.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('registerApplicationModule_args')
    if self.gatewayId is not None:
      oprot.writeFieldBegin('gatewayId', TType.STRING, 1)
      oprot.writeString(self.gatewayId)
      oprot.writeFieldEnd()
    if self.applicationModule is not None:
      oprot.writeFieldBegin('applicationModule', TType.STRUCT, 2)
      self.applicationModule.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayId is None:
      raise TProtocol.TProtocolException(message='Required field gatewayId is unset!')
    if self.applicationModule is None:
      raise TProtocol.TProtocolException(message='Required field applicationModule is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayId)
    value = (value * 31) ^ hash(self.applicationModule)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class registerApplicationModule_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('registerApplicationModule_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getApplicationModule_args:
  """
  Attributes:
   - appModuleId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'appModuleId', None, None, ), # 1
  )

  def __init__(self, appModuleId=None,):
    self.appModuleId = appModuleId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.appModuleId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getApplicationModule_args')
    if self.appModuleId is not None:
      oprot.writeFieldBegin('appModuleId', TType.STRING, 1)
      oprot.writeString(self.appModuleId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.appModuleId is None:
      raise TProtocol.TProtocolException(message='Required field appModuleId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.appModuleId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getApplicationModule_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (apache.airavata.model.appcatalog.appdeployment.ttypes.ApplicationModule, apache.airavata.model.appcatalog.appdeployment.ttypes.ApplicationModule.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = apache.airavata.model.appcatalog.appdeployment.ttypes.ApplicationModule()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getApplicationModule_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateApplicationModule_args:
  """
  Attributes:
   - appModuleId
   - applicationModule
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'appModuleId', None, None, ), # 1
    (2, TType.STRUCT, 'applicationModule', (apache.airavata.model.appcatalog.appdeployment.ttypes.ApplicationModule, apache.airavata.model.appcatalog.appdeployment.ttypes.ApplicationModule.thrift_spec), None, ), # 2
  )

  def __init__(self, appModuleId=None, applicationModule=None,):
    self.appModuleId = appModuleId
    self.applicationModule = applicationModule

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.appModuleId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.applicationModule = apache.airavata.model.appcatalog.appdeployment.ttypes.ApplicationModule()
          self.applicationModule.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateApplicationModule_args')
    if self.appModuleId is not None:
      oprot.writeFieldBegin('appModuleId', TType.STRING, 1)
      oprot.writeString(self.appModuleId)
      oprot.writeFieldEnd()
    if self.applicationModule is not None:
      oprot.writeFieldBegin('applicationModule', TType.STRUCT, 2)
      self.applicationModule.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.appModuleId is None:
      raise TProtocol.TProtocolException(message='Required field appModuleId is unset!')
    if self.applicationModule is None:
      raise TProtocol.TProtocolException(message='Required field applicationModule is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.appModuleId)
    value = (value * 31) ^ hash(self.applicationModule)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateApplicationModule_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateApplicationModule_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllAppModules_args:
  """
  Attributes:
   - gatewayId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayId', None, None, ), # 1
  )

  def __init__(self, gatewayId=None,):
    self.gatewayId = gatewayId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllAppModules_args')
    if self.gatewayId is not None:
      oprot.writeFieldBegin('gatewayId', TType.STRING, 1)
      oprot.writeString(self.gatewayId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayId is None:
      raise TProtocol.TProtocolException(message='Required field gatewayId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllAppModules_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(apache.airavata.model.appcatalog.appdeployment.ttypes.ApplicationModule, apache.airavata.model.appcatalog.appdeployment.ttypes.ApplicationModule.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype212, _size209) = iprot.readListBegin()
          for _i213 in xrange(_size209):
            _elem214 = apache.airavata.model.appcatalog.appdeployment.ttypes.ApplicationModule()
            _elem214.read(iprot)
            self.success.append(_elem214)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllAppModules_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter215 in self.success:
        iter215.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteApplicationModule_args:
  """
  Attributes:
   - appModuleId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'appModuleId', None, None, ), # 1
  )

  def __init__(self, appModuleId=None,):
    self.appModuleId = appModuleId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.appModuleId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteApplicationModule_args')
    if self.appModuleId is not None:
      oprot.writeFieldBegin('appModuleId', TType.STRING, 1)
      oprot.writeString(self.appModuleId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.appModuleId is None:
      raise TProtocol.TProtocolException(message='Required field appModuleId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.appModuleId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteApplicationModule_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteApplicationModule_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class registerApplicationDeployment_args:
  """
  Attributes:
   - gatewayId
   - applicationDeployment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayId', None, None, ), # 1
    (2, TType.STRUCT, 'applicationDeployment', (apache.airavata.model.appcatalog.appdeployment.ttypes.ApplicationDeploymentDescription, apache.airavata.model.appcatalog.appdeployment.ttypes.ApplicationDeploymentDescription.thrift_spec), None, ), # 2
  )

  def __init__(self, gatewayId=None, applicationDeployment=None,):
    self.gatewayId = gatewayId
    self.applicationDeployment = applicationDeployment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.applicationDeployment = apache.airavata.model.appcatalog.appdeployment.ttypes.ApplicationDeploymentDescription()
          self.applicationDeployment.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('registerApplicationDeployment_args')
    if self.gatewayId is not None:
      oprot.writeFieldBegin('gatewayId', TType.STRING, 1)
      oprot.writeString(self.gatewayId)
      oprot.writeFieldEnd()
    if self.applicationDeployment is not None:
      oprot.writeFieldBegin('applicationDeployment', TType.STRUCT, 2)
      self.applicationDeployment.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayId is None:
      raise TProtocol.TProtocolException(message='Required field gatewayId is unset!')
    if self.applicationDeployment is None:
      raise TProtocol.TProtocolException(message='Required field applicationDeployment is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayId)
    value = (value * 31) ^ hash(self.applicationDeployment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class registerApplicationDeployment_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('registerApplicationDeployment_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getApplicationDeployment_args:
  """
  Attributes:
   - appDeploymentId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'appDeploymentId', None, None, ), # 1
  )

  def __init__(self, appDeploymentId=None,):
    self.appDeploymentId = appDeploymentId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.appDeploymentId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getApplicationDeployment_args')
    if self.appDeploymentId is not None:
      oprot.writeFieldBegin('appDeploymentId', TType.STRING, 1)
      oprot.writeString(self.appDeploymentId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.appDeploymentId is None:
      raise TProtocol.TProtocolException(message='Required field appDeploymentId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.appDeploymentId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getApplicationDeployment_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (apache.airavata.model.appcatalog.appdeployment.ttypes.ApplicationDeploymentDescription, apache.airavata.model.appcatalog.appdeployment.ttypes.ApplicationDeploymentDescription.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = apache.airavata.model.appcatalog.appdeployment.ttypes.ApplicationDeploymentDescription()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getApplicationDeployment_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateApplicationDeployment_args:
  """
  Attributes:
   - appDeploymentId
   - applicationDeployment
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'appDeploymentId', None, None, ), # 1
    (2, TType.STRUCT, 'applicationDeployment', (apache.airavata.model.appcatalog.appdeployment.ttypes.ApplicationDeploymentDescription, apache.airavata.model.appcatalog.appdeployment.ttypes.ApplicationDeploymentDescription.thrift_spec), None, ), # 2
  )

  def __init__(self, appDeploymentId=None, applicationDeployment=None,):
    self.appDeploymentId = appDeploymentId
    self.applicationDeployment = applicationDeployment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.appDeploymentId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.applicationDeployment = apache.airavata.model.appcatalog.appdeployment.ttypes.ApplicationDeploymentDescription()
          self.applicationDeployment.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateApplicationDeployment_args')
    if self.appDeploymentId is not None:
      oprot.writeFieldBegin('appDeploymentId', TType.STRING, 1)
      oprot.writeString(self.appDeploymentId)
      oprot.writeFieldEnd()
    if self.applicationDeployment is not None:
      oprot.writeFieldBegin('applicationDeployment', TType.STRUCT, 2)
      self.applicationDeployment.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.appDeploymentId is None:
      raise TProtocol.TProtocolException(message='Required field appDeploymentId is unset!')
    if self.applicationDeployment is None:
      raise TProtocol.TProtocolException(message='Required field applicationDeployment is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.appDeploymentId)
    value = (value * 31) ^ hash(self.applicationDeployment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateApplicationDeployment_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateApplicationDeployment_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteApplicationDeployment_args:
  """
  Attributes:
   - appDeploymentId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'appDeploymentId', None, None, ), # 1
  )

  def __init__(self, appDeploymentId=None,):
    self.appDeploymentId = appDeploymentId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.appDeploymentId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteApplicationDeployment_args')
    if self.appDeploymentId is not None:
      oprot.writeFieldBegin('appDeploymentId', TType.STRING, 1)
      oprot.writeString(self.appDeploymentId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.appDeploymentId is None:
      raise TProtocol.TProtocolException(message='Required field appDeploymentId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.appDeploymentId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteApplicationDeployment_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteApplicationDeployment_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllApplicationDeployments_args:
  """
  Attributes:
   - gatewayId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayId', None, None, ), # 1
  )

  def __init__(self, gatewayId=None,):
    self.gatewayId = gatewayId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllApplicationDeployments_args')
    if self.gatewayId is not None:
      oprot.writeFieldBegin('gatewayId', TType.STRING, 1)
      oprot.writeString(self.gatewayId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayId is None:
      raise TProtocol.TProtocolException(message='Required field gatewayId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllApplicationDeployments_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(apache.airavata.model.appcatalog.appdeployment.ttypes.ApplicationDeploymentDescription, apache.airavata.model.appcatalog.appdeployment.ttypes.ApplicationDeploymentDescription.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype219, _size216) = iprot.readListBegin()
          for _i220 in xrange(_size216):
            _elem221 = apache.airavata.model.appcatalog.appdeployment.ttypes.ApplicationDeploymentDescription()
            _elem221.read(iprot)
            self.success.append(_elem221)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllApplicationDeployments_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter222 in self.success:
        iter222.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAppModuleDeployedResources_args:
  """
  Attributes:
   - appModuleId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'appModuleId', None, None, ), # 1
  )

  def __init__(self, appModuleId=None,):
    self.appModuleId = appModuleId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.appModuleId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAppModuleDeployedResources_args')
    if self.appModuleId is not None:
      oprot.writeFieldBegin('appModuleId', TType.STRING, 1)
      oprot.writeString(self.appModuleId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.appModuleId is None:
      raise TProtocol.TProtocolException(message='Required field appModuleId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.appModuleId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAppModuleDeployedResources_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype226, _size223) = iprot.readListBegin()
          for _i227 in xrange(_size223):
            _elem228 = iprot.readString();
            self.success.append(_elem228)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAppModuleDeployedResources_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRING, len(self.success))
      for iter229 in self.success:
        oprot.writeString(iter229)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class registerApplicationInterface_args:
  """
  Attributes:
   - gatewayId
   - applicationInterface
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayId', None, None, ), # 1
    (2, TType.STRUCT, 'applicationInterface', (apache.airavata.model.appcatalog.appinterface.ttypes.ApplicationInterfaceDescription, apache.airavata.model.appcatalog.appinterface.ttypes.ApplicationInterfaceDescription.thrift_spec), None, ), # 2
  )

  def __init__(self, gatewayId=None, applicationInterface=None,):
    self.gatewayId = gatewayId
    self.applicationInterface = applicationInterface

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.applicationInterface = apache.airavata.model.appcatalog.appinterface.ttypes.ApplicationInterfaceDescription()
          self.applicationInterface.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('registerApplicationInterface_args')
    if self.gatewayId is not None:
      oprot.writeFieldBegin('gatewayId', TType.STRING, 1)
      oprot.writeString(self.gatewayId)
      oprot.writeFieldEnd()
    if self.applicationInterface is not None:
      oprot.writeFieldBegin('applicationInterface', TType.STRUCT, 2)
      self.applicationInterface.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayId is None:
      raise TProtocol.TProtocolException(message='Required field gatewayId is unset!')
    if self.applicationInterface is None:
      raise TProtocol.TProtocolException(message='Required field applicationInterface is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayId)
    value = (value * 31) ^ hash(self.applicationInterface)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class registerApplicationInterface_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('registerApplicationInterface_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getApplicationInterface_args:
  """
  Attributes:
   - appInterfaceId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'appInterfaceId', None, None, ), # 1
  )

  def __init__(self, appInterfaceId=None,):
    self.appInterfaceId = appInterfaceId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.appInterfaceId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getApplicationInterface_args')
    if self.appInterfaceId is not None:
      oprot.writeFieldBegin('appInterfaceId', TType.STRING, 1)
      oprot.writeString(self.appInterfaceId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.appInterfaceId is None:
      raise TProtocol.TProtocolException(message='Required field appInterfaceId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.appInterfaceId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getApplicationInterface_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (apache.airavata.model.appcatalog.appinterface.ttypes.ApplicationInterfaceDescription, apache.airavata.model.appcatalog.appinterface.ttypes.ApplicationInterfaceDescription.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = apache.airavata.model.appcatalog.appinterface.ttypes.ApplicationInterfaceDescription()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getApplicationInterface_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateApplicationInterface_args:
  """
  Attributes:
   - appInterfaceId
   - applicationInterface
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'appInterfaceId', None, None, ), # 1
    (2, TType.STRUCT, 'applicationInterface', (apache.airavata.model.appcatalog.appinterface.ttypes.ApplicationInterfaceDescription, apache.airavata.model.appcatalog.appinterface.ttypes.ApplicationInterfaceDescription.thrift_spec), None, ), # 2
  )

  def __init__(self, appInterfaceId=None, applicationInterface=None,):
    self.appInterfaceId = appInterfaceId
    self.applicationInterface = applicationInterface

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.appInterfaceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.applicationInterface = apache.airavata.model.appcatalog.appinterface.ttypes.ApplicationInterfaceDescription()
          self.applicationInterface.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateApplicationInterface_args')
    if self.appInterfaceId is not None:
      oprot.writeFieldBegin('appInterfaceId', TType.STRING, 1)
      oprot.writeString(self.appInterfaceId)
      oprot.writeFieldEnd()
    if self.applicationInterface is not None:
      oprot.writeFieldBegin('applicationInterface', TType.STRUCT, 2)
      self.applicationInterface.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.appInterfaceId is None:
      raise TProtocol.TProtocolException(message='Required field appInterfaceId is unset!')
    if self.applicationInterface is None:
      raise TProtocol.TProtocolException(message='Required field applicationInterface is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.appInterfaceId)
    value = (value * 31) ^ hash(self.applicationInterface)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateApplicationInterface_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateApplicationInterface_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteApplicationInterface_args:
  """
  Attributes:
   - appInterfaceId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'appInterfaceId', None, None, ), # 1
  )

  def __init__(self, appInterfaceId=None,):
    self.appInterfaceId = appInterfaceId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.appInterfaceId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteApplicationInterface_args')
    if self.appInterfaceId is not None:
      oprot.writeFieldBegin('appInterfaceId', TType.STRING, 1)
      oprot.writeString(self.appInterfaceId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.appInterfaceId is None:
      raise TProtocol.TProtocolException(message='Required field appInterfaceId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.appInterfaceId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteApplicationInterface_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteApplicationInterface_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllApplicationInterfaceNames_args:
  """
  Attributes:
   - gatewayId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayId', None, None, ), # 1
  )

  def __init__(self, gatewayId=None,):
    self.gatewayId = gatewayId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllApplicationInterfaceNames_args')
    if self.gatewayId is not None:
      oprot.writeFieldBegin('gatewayId', TType.STRING, 1)
      oprot.writeString(self.gatewayId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayId is None:
      raise TProtocol.TProtocolException(message='Required field gatewayId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllApplicationInterfaceNames_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype231, _vtype232, _size230 ) = iprot.readMapBegin()
          for _i234 in xrange(_size230):
            _key235 = iprot.readString();
            _val236 = iprot.readString();
            self.success[_key235] = _val236
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllApplicationInterfaceNames_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.success))
      for kiter237,viter238 in self.success.items():
        oprot.writeString(kiter237)
        oprot.writeString(viter238)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllApplicationInterfaces_args:
  """
  Attributes:
   - gatewayId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayId', None, None, ), # 1
  )

  def __init__(self, gatewayId=None,):
    self.gatewayId = gatewayId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllApplicationInterfaces_args')
    if self.gatewayId is not None:
      oprot.writeFieldBegin('gatewayId', TType.STRING, 1)
      oprot.writeString(self.gatewayId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayId is None:
      raise TProtocol.TProtocolException(message='Required field gatewayId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllApplicationInterfaces_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(apache.airavata.model.appcatalog.appinterface.ttypes.ApplicationInterfaceDescription, apache.airavata.model.appcatalog.appinterface.ttypes.ApplicationInterfaceDescription.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype242, _size239) = iprot.readListBegin()
          for _i243 in xrange(_size239):
            _elem244 = apache.airavata.model.appcatalog.appinterface.ttypes.ApplicationInterfaceDescription()
            _elem244.read(iprot)
            self.success.append(_elem244)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllApplicationInterfaces_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter245 in self.success:
        iter245.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getApplicationInputs_args:
  """
  Attributes:
   - appInterfaceId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'appInterfaceId', None, None, ), # 1
  )

  def __init__(self, appInterfaceId=None,):
    self.appInterfaceId = appInterfaceId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.appInterfaceId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getApplicationInputs_args')
    if self.appInterfaceId is not None:
      oprot.writeFieldBegin('appInterfaceId', TType.STRING, 1)
      oprot.writeString(self.appInterfaceId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.appInterfaceId is None:
      raise TProtocol.TProtocolException(message='Required field appInterfaceId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.appInterfaceId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getApplicationInputs_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(apache.airavata.model.appcatalog.appinterface.ttypes.InputDataObjectType, apache.airavata.model.appcatalog.appinterface.ttypes.InputDataObjectType.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype249, _size246) = iprot.readListBegin()
          for _i250 in xrange(_size246):
            _elem251 = apache.airavata.model.appcatalog.appinterface.ttypes.InputDataObjectType()
            _elem251.read(iprot)
            self.success.append(_elem251)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getApplicationInputs_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter252 in self.success:
        iter252.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getApplicationOutputs_args:
  """
  Attributes:
   - appInterfaceId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'appInterfaceId', None, None, ), # 1
  )

  def __init__(self, appInterfaceId=None,):
    self.appInterfaceId = appInterfaceId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.appInterfaceId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getApplicationOutputs_args')
    if self.appInterfaceId is not None:
      oprot.writeFieldBegin('appInterfaceId', TType.STRING, 1)
      oprot.writeString(self.appInterfaceId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.appInterfaceId is None:
      raise TProtocol.TProtocolException(message='Required field appInterfaceId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.appInterfaceId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getApplicationOutputs_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(apache.airavata.model.appcatalog.appinterface.ttypes.OutputDataObjectType, apache.airavata.model.appcatalog.appinterface.ttypes.OutputDataObjectType.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype256, _size253) = iprot.readListBegin()
          for _i257 in xrange(_size253):
            _elem258 = apache.airavata.model.appcatalog.appinterface.ttypes.OutputDataObjectType()
            _elem258.read(iprot)
            self.success.append(_elem258)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getApplicationOutputs_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter259 in self.success:
        iter259.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAvailableAppInterfaceComputeResources_args:
  """
  Attributes:
   - appInterfaceId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'appInterfaceId', None, None, ), # 1
  )

  def __init__(self, appInterfaceId=None,):
    self.appInterfaceId = appInterfaceId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.appInterfaceId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAvailableAppInterfaceComputeResources_args')
    if self.appInterfaceId is not None:
      oprot.writeFieldBegin('appInterfaceId', TType.STRING, 1)
      oprot.writeString(self.appInterfaceId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.appInterfaceId is None:
      raise TProtocol.TProtocolException(message='Required field appInterfaceId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.appInterfaceId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAvailableAppInterfaceComputeResources_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype261, _vtype262, _size260 ) = iprot.readMapBegin()
          for _i264 in xrange(_size260):
            _key265 = iprot.readString();
            _val266 = iprot.readString();
            self.success[_key265] = _val266
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAvailableAppInterfaceComputeResources_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.success))
      for kiter267,viter268 in self.success.items():
        oprot.writeString(kiter267)
        oprot.writeString(viter268)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class registerComputeResource_args:
  """
  Attributes:
   - computeResourceDescription
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'computeResourceDescription', (apache.airavata.model.appcatalog.computeresource.ttypes.ComputeResourceDescription, apache.airavata.model.appcatalog.computeresource.ttypes.ComputeResourceDescription.thrift_spec), None, ), # 1
  )

  def __init__(self, computeResourceDescription=None,):
    self.computeResourceDescription = computeResourceDescription

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.computeResourceDescription = apache.airavata.model.appcatalog.computeresource.ttypes.ComputeResourceDescription()
          self.computeResourceDescription.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('registerComputeResource_args')
    if self.computeResourceDescription is not None:
      oprot.writeFieldBegin('computeResourceDescription', TType.STRUCT, 1)
      self.computeResourceDescription.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.computeResourceDescription is None:
      raise TProtocol.TProtocolException(message='Required field computeResourceDescription is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.computeResourceDescription)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class registerComputeResource_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('registerComputeResource_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getComputeResource_args:
  """
  Attributes:
   - computeResourceId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'computeResourceId', None, None, ), # 1
  )

  def __init__(self, computeResourceId=None,):
    self.computeResourceId = computeResourceId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.computeResourceId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getComputeResource_args')
    if self.computeResourceId is not None:
      oprot.writeFieldBegin('computeResourceId', TType.STRING, 1)
      oprot.writeString(self.computeResourceId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.computeResourceId is None:
      raise TProtocol.TProtocolException(message='Required field computeResourceId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.computeResourceId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getComputeResource_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (apache.airavata.model.appcatalog.computeresource.ttypes.ComputeResourceDescription, apache.airavata.model.appcatalog.computeresource.ttypes.ComputeResourceDescription.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = apache.airavata.model.appcatalog.computeresource.ttypes.ComputeResourceDescription()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getComputeResource_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllComputeResourceNames_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllComputeResourceNames_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllComputeResourceNames_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype270, _vtype271, _size269 ) = iprot.readMapBegin()
          for _i273 in xrange(_size269):
            _key274 = iprot.readString();
            _val275 = iprot.readString();
            self.success[_key274] = _val275
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllComputeResourceNames_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.success))
      for kiter276,viter277 in self.success.items():
        oprot.writeString(kiter276)
        oprot.writeString(viter277)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateComputeResource_args:
  """
  Attributes:
   - computeResourceId
   - computeResourceDescription
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'computeResourceId', None, None, ), # 1
    (2, TType.STRUCT, 'computeResourceDescription', (apache.airavata.model.appcatalog.computeresource.ttypes.ComputeResourceDescription, apache.airavata.model.appcatalog.computeresource.ttypes.ComputeResourceDescription.thrift_spec), None, ), # 2
  )

  def __init__(self, computeResourceId=None, computeResourceDescription=None,):
    self.computeResourceId = computeResourceId
    self.computeResourceDescription = computeResourceDescription

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.computeResourceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.computeResourceDescription = apache.airavata.model.appcatalog.computeresource.ttypes.ComputeResourceDescription()
          self.computeResourceDescription.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateComputeResource_args')
    if self.computeResourceId is not None:
      oprot.writeFieldBegin('computeResourceId', TType.STRING, 1)
      oprot.writeString(self.computeResourceId)
      oprot.writeFieldEnd()
    if self.computeResourceDescription is not None:
      oprot.writeFieldBegin('computeResourceDescription', TType.STRUCT, 2)
      self.computeResourceDescription.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.computeResourceId is None:
      raise TProtocol.TProtocolException(message='Required field computeResourceId is unset!')
    if self.computeResourceDescription is None:
      raise TProtocol.TProtocolException(message='Required field computeResourceDescription is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.computeResourceId)
    value = (value * 31) ^ hash(self.computeResourceDescription)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateComputeResource_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateComputeResource_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteComputeResource_args:
  """
  Attributes:
   - computeResourceId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'computeResourceId', None, None, ), # 1
  )

  def __init__(self, computeResourceId=None,):
    self.computeResourceId = computeResourceId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.computeResourceId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteComputeResource_args')
    if self.computeResourceId is not None:
      oprot.writeFieldBegin('computeResourceId', TType.STRING, 1)
      oprot.writeString(self.computeResourceId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.computeResourceId is None:
      raise TProtocol.TProtocolException(message='Required field computeResourceId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.computeResourceId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteComputeResource_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteComputeResource_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addLocalSubmissionDetails_args:
  """
  Attributes:
   - computeResourceId
   - priorityOrder
   - localSubmission
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'computeResourceId', None, None, ), # 1
    (2, TType.I32, 'priorityOrder', None, None, ), # 2
    (3, TType.STRUCT, 'localSubmission', (apache.airavata.model.appcatalog.computeresource.ttypes.LOCALSubmission, apache.airavata.model.appcatalog.computeresource.ttypes.LOCALSubmission.thrift_spec), None, ), # 3
  )

  def __init__(self, computeResourceId=None, priorityOrder=None, localSubmission=None,):
    self.computeResourceId = computeResourceId
    self.priorityOrder = priorityOrder
    self.localSubmission = localSubmission

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.computeResourceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.priorityOrder = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.localSubmission = apache.airavata.model.appcatalog.computeresource.ttypes.LOCALSubmission()
          self.localSubmission.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addLocalSubmissionDetails_args')
    if self.computeResourceId is not None:
      oprot.writeFieldBegin('computeResourceId', TType.STRING, 1)
      oprot.writeString(self.computeResourceId)
      oprot.writeFieldEnd()
    if self.priorityOrder is not None:
      oprot.writeFieldBegin('priorityOrder', TType.I32, 2)
      oprot.writeI32(self.priorityOrder)
      oprot.writeFieldEnd()
    if self.localSubmission is not None:
      oprot.writeFieldBegin('localSubmission', TType.STRUCT, 3)
      self.localSubmission.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.computeResourceId is None:
      raise TProtocol.TProtocolException(message='Required field computeResourceId is unset!')
    if self.priorityOrder is None:
      raise TProtocol.TProtocolException(message='Required field priorityOrder is unset!')
    if self.localSubmission is None:
      raise TProtocol.TProtocolException(message='Required field localSubmission is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.computeResourceId)
    value = (value * 31) ^ hash(self.priorityOrder)
    value = (value * 31) ^ hash(self.localSubmission)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addLocalSubmissionDetails_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addLocalSubmissionDetails_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateLocalSubmissionDetails_args:
  """
  Attributes:
   - jobSubmissionInterfaceId
   - localSubmission
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'jobSubmissionInterfaceId', None, None, ), # 1
    (2, TType.STRUCT, 'localSubmission', (apache.airavata.model.appcatalog.computeresource.ttypes.LOCALSubmission, apache.airavata.model.appcatalog.computeresource.ttypes.LOCALSubmission.thrift_spec), None, ), # 2
  )

  def __init__(self, jobSubmissionInterfaceId=None, localSubmission=None,):
    self.jobSubmissionInterfaceId = jobSubmissionInterfaceId
    self.localSubmission = localSubmission

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.jobSubmissionInterfaceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.localSubmission = apache.airavata.model.appcatalog.computeresource.ttypes.LOCALSubmission()
          self.localSubmission.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateLocalSubmissionDetails_args')
    if self.jobSubmissionInterfaceId is not None:
      oprot.writeFieldBegin('jobSubmissionInterfaceId', TType.STRING, 1)
      oprot.writeString(self.jobSubmissionInterfaceId)
      oprot.writeFieldEnd()
    if self.localSubmission is not None:
      oprot.writeFieldBegin('localSubmission', TType.STRUCT, 2)
      self.localSubmission.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.jobSubmissionInterfaceId is None:
      raise TProtocol.TProtocolException(message='Required field jobSubmissionInterfaceId is unset!')
    if self.localSubmission is None:
      raise TProtocol.TProtocolException(message='Required field localSubmission is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.jobSubmissionInterfaceId)
    value = (value * 31) ^ hash(self.localSubmission)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateLocalSubmissionDetails_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateLocalSubmissionDetails_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getLocalJobSubmission_args:
  """
  Attributes:
   - jobSubmissionId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'jobSubmissionId', None, None, ), # 1
  )

  def __init__(self, jobSubmissionId=None,):
    self.jobSubmissionId = jobSubmissionId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.jobSubmissionId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getLocalJobSubmission_args')
    if self.jobSubmissionId is not None:
      oprot.writeFieldBegin('jobSubmissionId', TType.STRING, 1)
      oprot.writeString(self.jobSubmissionId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.jobSubmissionId is None:
      raise TProtocol.TProtocolException(message='Required field jobSubmissionId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.jobSubmissionId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getLocalJobSubmission_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (apache.airavata.model.appcatalog.computeresource.ttypes.LOCALSubmission, apache.airavata.model.appcatalog.computeresource.ttypes.LOCALSubmission.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = apache.airavata.model.appcatalog.computeresource.ttypes.LOCALSubmission()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getLocalJobSubmission_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addSSHJobSubmissionDetails_args:
  """
  Attributes:
   - computeResourceId
   - priorityOrder
   - sshJobSubmission
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'computeResourceId', None, None, ), # 1
    (2, TType.I32, 'priorityOrder', None, None, ), # 2
    (3, TType.STRUCT, 'sshJobSubmission', (apache.airavata.model.appcatalog.computeresource.ttypes.SSHJobSubmission, apache.airavata.model.appcatalog.computeresource.ttypes.SSHJobSubmission.thrift_spec), None, ), # 3
  )

  def __init__(self, computeResourceId=None, priorityOrder=None, sshJobSubmission=None,):
    self.computeResourceId = computeResourceId
    self.priorityOrder = priorityOrder
    self.sshJobSubmission = sshJobSubmission

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.computeResourceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.priorityOrder = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.sshJobSubmission = apache.airavata.model.appcatalog.computeresource.ttypes.SSHJobSubmission()
          self.sshJobSubmission.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addSSHJobSubmissionDetails_args')
    if self.computeResourceId is not None:
      oprot.writeFieldBegin('computeResourceId', TType.STRING, 1)
      oprot.writeString(self.computeResourceId)
      oprot.writeFieldEnd()
    if self.priorityOrder is not None:
      oprot.writeFieldBegin('priorityOrder', TType.I32, 2)
      oprot.writeI32(self.priorityOrder)
      oprot.writeFieldEnd()
    if self.sshJobSubmission is not None:
      oprot.writeFieldBegin('sshJobSubmission', TType.STRUCT, 3)
      self.sshJobSubmission.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.computeResourceId is None:
      raise TProtocol.TProtocolException(message='Required field computeResourceId is unset!')
    if self.priorityOrder is None:
      raise TProtocol.TProtocolException(message='Required field priorityOrder is unset!')
    if self.sshJobSubmission is None:
      raise TProtocol.TProtocolException(message='Required field sshJobSubmission is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.computeResourceId)
    value = (value * 31) ^ hash(self.priorityOrder)
    value = (value * 31) ^ hash(self.sshJobSubmission)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addSSHJobSubmissionDetails_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addSSHJobSubmissionDetails_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSSHJobSubmission_args:
  """
  Attributes:
   - jobSubmissionId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'jobSubmissionId', None, None, ), # 1
  )

  def __init__(self, jobSubmissionId=None,):
    self.jobSubmissionId = jobSubmissionId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.jobSubmissionId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSSHJobSubmission_args')
    if self.jobSubmissionId is not None:
      oprot.writeFieldBegin('jobSubmissionId', TType.STRING, 1)
      oprot.writeString(self.jobSubmissionId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.jobSubmissionId is None:
      raise TProtocol.TProtocolException(message='Required field jobSubmissionId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.jobSubmissionId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSSHJobSubmission_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (apache.airavata.model.appcatalog.computeresource.ttypes.SSHJobSubmission, apache.airavata.model.appcatalog.computeresource.ttypes.SSHJobSubmission.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = apache.airavata.model.appcatalog.computeresource.ttypes.SSHJobSubmission()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSSHJobSubmission_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addUNICOREJobSubmissionDetails_args:
  """
  Attributes:
   - computeResourceId
   - priorityOrder
   - unicoreJobSubmission
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'computeResourceId', None, None, ), # 1
    (2, TType.I32, 'priorityOrder', None, None, ), # 2
    (3, TType.STRUCT, 'unicoreJobSubmission', (apache.airavata.model.appcatalog.computeresource.ttypes.UnicoreJobSubmission, apache.airavata.model.appcatalog.computeresource.ttypes.UnicoreJobSubmission.thrift_spec), None, ), # 3
  )

  def __init__(self, computeResourceId=None, priorityOrder=None, unicoreJobSubmission=None,):
    self.computeResourceId = computeResourceId
    self.priorityOrder = priorityOrder
    self.unicoreJobSubmission = unicoreJobSubmission

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.computeResourceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.priorityOrder = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.unicoreJobSubmission = apache.airavata.model.appcatalog.computeresource.ttypes.UnicoreJobSubmission()
          self.unicoreJobSubmission.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addUNICOREJobSubmissionDetails_args')
    if self.computeResourceId is not None:
      oprot.writeFieldBegin('computeResourceId', TType.STRING, 1)
      oprot.writeString(self.computeResourceId)
      oprot.writeFieldEnd()
    if self.priorityOrder is not None:
      oprot.writeFieldBegin('priorityOrder', TType.I32, 2)
      oprot.writeI32(self.priorityOrder)
      oprot.writeFieldEnd()
    if self.unicoreJobSubmission is not None:
      oprot.writeFieldBegin('unicoreJobSubmission', TType.STRUCT, 3)
      self.unicoreJobSubmission.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.computeResourceId is None:
      raise TProtocol.TProtocolException(message='Required field computeResourceId is unset!')
    if self.priorityOrder is None:
      raise TProtocol.TProtocolException(message='Required field priorityOrder is unset!')
    if self.unicoreJobSubmission is None:
      raise TProtocol.TProtocolException(message='Required field unicoreJobSubmission is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.computeResourceId)
    value = (value * 31) ^ hash(self.priorityOrder)
    value = (value * 31) ^ hash(self.unicoreJobSubmission)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addUNICOREJobSubmissionDetails_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addUNICOREJobSubmissionDetails_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getUnicoreJobSubmission_args:
  """
  Attributes:
   - jobSubmissionId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'jobSubmissionId', None, None, ), # 1
  )

  def __init__(self, jobSubmissionId=None,):
    self.jobSubmissionId = jobSubmissionId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.jobSubmissionId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getUnicoreJobSubmission_args')
    if self.jobSubmissionId is not None:
      oprot.writeFieldBegin('jobSubmissionId', TType.STRING, 1)
      oprot.writeString(self.jobSubmissionId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.jobSubmissionId is None:
      raise TProtocol.TProtocolException(message='Required field jobSubmissionId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.jobSubmissionId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getUnicoreJobSubmission_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (apache.airavata.model.appcatalog.computeresource.ttypes.UnicoreJobSubmission, apache.airavata.model.appcatalog.computeresource.ttypes.UnicoreJobSubmission.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = apache.airavata.model.appcatalog.computeresource.ttypes.UnicoreJobSubmission()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getUnicoreJobSubmission_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addCloudJobSubmissionDetails_args:
  """
  Attributes:
   - computeResourceId
   - priorityOrder
   - cloudSubmission
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'computeResourceId', None, None, ), # 1
    (2, TType.I32, 'priorityOrder', None, None, ), # 2
    (3, TType.STRUCT, 'cloudSubmission', (apache.airavata.model.appcatalog.computeresource.ttypes.CloudJobSubmission, apache.airavata.model.appcatalog.computeresource.ttypes.CloudJobSubmission.thrift_spec), None, ), # 3
  )

  def __init__(self, computeResourceId=None, priorityOrder=None, cloudSubmission=None,):
    self.computeResourceId = computeResourceId
    self.priorityOrder = priorityOrder
    self.cloudSubmission = cloudSubmission

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.computeResourceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.priorityOrder = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.cloudSubmission = apache.airavata.model.appcatalog.computeresource.ttypes.CloudJobSubmission()
          self.cloudSubmission.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addCloudJobSubmissionDetails_args')
    if self.computeResourceId is not None:
      oprot.writeFieldBegin('computeResourceId', TType.STRING, 1)
      oprot.writeString(self.computeResourceId)
      oprot.writeFieldEnd()
    if self.priorityOrder is not None:
      oprot.writeFieldBegin('priorityOrder', TType.I32, 2)
      oprot.writeI32(self.priorityOrder)
      oprot.writeFieldEnd()
    if self.cloudSubmission is not None:
      oprot.writeFieldBegin('cloudSubmission', TType.STRUCT, 3)
      self.cloudSubmission.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.computeResourceId is None:
      raise TProtocol.TProtocolException(message='Required field computeResourceId is unset!')
    if self.priorityOrder is None:
      raise TProtocol.TProtocolException(message='Required field priorityOrder is unset!')
    if self.cloudSubmission is None:
      raise TProtocol.TProtocolException(message='Required field cloudSubmission is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.computeResourceId)
    value = (value * 31) ^ hash(self.priorityOrder)
    value = (value * 31) ^ hash(self.cloudSubmission)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addCloudJobSubmissionDetails_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addCloudJobSubmissionDetails_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getCloudJobSubmission_args:
  """
  Attributes:
   - jobSubmissionId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'jobSubmissionId', None, None, ), # 1
  )

  def __init__(self, jobSubmissionId=None,):
    self.jobSubmissionId = jobSubmissionId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.jobSubmissionId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getCloudJobSubmission_args')
    if self.jobSubmissionId is not None:
      oprot.writeFieldBegin('jobSubmissionId', TType.STRING, 1)
      oprot.writeString(self.jobSubmissionId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.jobSubmissionId is None:
      raise TProtocol.TProtocolException(message='Required field jobSubmissionId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.jobSubmissionId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getCloudJobSubmission_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (apache.airavata.model.appcatalog.computeresource.ttypes.CloudJobSubmission, apache.airavata.model.appcatalog.computeresource.ttypes.CloudJobSubmission.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = apache.airavata.model.appcatalog.computeresource.ttypes.CloudJobSubmission()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getCloudJobSubmission_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateSSHJobSubmissionDetails_args:
  """
  Attributes:
   - jobSubmissionInterfaceId
   - sshJobSubmission
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'jobSubmissionInterfaceId', None, None, ), # 1
    (2, TType.STRUCT, 'sshJobSubmission', (apache.airavata.model.appcatalog.computeresource.ttypes.SSHJobSubmission, apache.airavata.model.appcatalog.computeresource.ttypes.SSHJobSubmission.thrift_spec), None, ), # 2
  )

  def __init__(self, jobSubmissionInterfaceId=None, sshJobSubmission=None,):
    self.jobSubmissionInterfaceId = jobSubmissionInterfaceId
    self.sshJobSubmission = sshJobSubmission

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.jobSubmissionInterfaceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.sshJobSubmission = apache.airavata.model.appcatalog.computeresource.ttypes.SSHJobSubmission()
          self.sshJobSubmission.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateSSHJobSubmissionDetails_args')
    if self.jobSubmissionInterfaceId is not None:
      oprot.writeFieldBegin('jobSubmissionInterfaceId', TType.STRING, 1)
      oprot.writeString(self.jobSubmissionInterfaceId)
      oprot.writeFieldEnd()
    if self.sshJobSubmission is not None:
      oprot.writeFieldBegin('sshJobSubmission', TType.STRUCT, 2)
      self.sshJobSubmission.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.jobSubmissionInterfaceId is None:
      raise TProtocol.TProtocolException(message='Required field jobSubmissionInterfaceId is unset!')
    if self.sshJobSubmission is None:
      raise TProtocol.TProtocolException(message='Required field sshJobSubmission is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.jobSubmissionInterfaceId)
    value = (value * 31) ^ hash(self.sshJobSubmission)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateSSHJobSubmissionDetails_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateSSHJobSubmissionDetails_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateCloudJobSubmissionDetails_args:
  """
  Attributes:
   - jobSubmissionInterfaceId
   - sshJobSubmission
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'jobSubmissionInterfaceId', None, None, ), # 1
    (2, TType.STRUCT, 'sshJobSubmission', (apache.airavata.model.appcatalog.computeresource.ttypes.CloudJobSubmission, apache.airavata.model.appcatalog.computeresource.ttypes.CloudJobSubmission.thrift_spec), None, ), # 2
  )

  def __init__(self, jobSubmissionInterfaceId=None, sshJobSubmission=None,):
    self.jobSubmissionInterfaceId = jobSubmissionInterfaceId
    self.sshJobSubmission = sshJobSubmission

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.jobSubmissionInterfaceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.sshJobSubmission = apache.airavata.model.appcatalog.computeresource.ttypes.CloudJobSubmission()
          self.sshJobSubmission.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateCloudJobSubmissionDetails_args')
    if self.jobSubmissionInterfaceId is not None:
      oprot.writeFieldBegin('jobSubmissionInterfaceId', TType.STRING, 1)
      oprot.writeString(self.jobSubmissionInterfaceId)
      oprot.writeFieldEnd()
    if self.sshJobSubmission is not None:
      oprot.writeFieldBegin('sshJobSubmission', TType.STRUCT, 2)
      self.sshJobSubmission.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.jobSubmissionInterfaceId is None:
      raise TProtocol.TProtocolException(message='Required field jobSubmissionInterfaceId is unset!')
    if self.sshJobSubmission is None:
      raise TProtocol.TProtocolException(message='Required field sshJobSubmission is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.jobSubmissionInterfaceId)
    value = (value * 31) ^ hash(self.sshJobSubmission)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateCloudJobSubmissionDetails_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateCloudJobSubmissionDetails_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateUnicoreJobSubmissionDetails_args:
  """
  Attributes:
   - jobSubmissionInterfaceId
   - unicoreJobSubmission
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'jobSubmissionInterfaceId', None, None, ), # 1
    (2, TType.STRUCT, 'unicoreJobSubmission', (apache.airavata.model.appcatalog.computeresource.ttypes.UnicoreJobSubmission, apache.airavata.model.appcatalog.computeresource.ttypes.UnicoreJobSubmission.thrift_spec), None, ), # 2
  )

  def __init__(self, jobSubmissionInterfaceId=None, unicoreJobSubmission=None,):
    self.jobSubmissionInterfaceId = jobSubmissionInterfaceId
    self.unicoreJobSubmission = unicoreJobSubmission

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.jobSubmissionInterfaceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.unicoreJobSubmission = apache.airavata.model.appcatalog.computeresource.ttypes.UnicoreJobSubmission()
          self.unicoreJobSubmission.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateUnicoreJobSubmissionDetails_args')
    if self.jobSubmissionInterfaceId is not None:
      oprot.writeFieldBegin('jobSubmissionInterfaceId', TType.STRING, 1)
      oprot.writeString(self.jobSubmissionInterfaceId)
      oprot.writeFieldEnd()
    if self.unicoreJobSubmission is not None:
      oprot.writeFieldBegin('unicoreJobSubmission', TType.STRUCT, 2)
      self.unicoreJobSubmission.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.jobSubmissionInterfaceId is None:
      raise TProtocol.TProtocolException(message='Required field jobSubmissionInterfaceId is unset!')
    if self.unicoreJobSubmission is None:
      raise TProtocol.TProtocolException(message='Required field unicoreJobSubmission is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.jobSubmissionInterfaceId)
    value = (value * 31) ^ hash(self.unicoreJobSubmission)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateUnicoreJobSubmissionDetails_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateUnicoreJobSubmissionDetails_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addLocalDataMovementDetails_args:
  """
  Attributes:
   - computeResourceId
   - priorityOrder
   - localDataMovement
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'computeResourceId', None, None, ), # 1
    (2, TType.I32, 'priorityOrder', None, None, ), # 2
    (3, TType.STRUCT, 'localDataMovement', (apache.airavata.model.appcatalog.computeresource.ttypes.LOCALDataMovement, apache.airavata.model.appcatalog.computeresource.ttypes.LOCALDataMovement.thrift_spec), None, ), # 3
  )

  def __init__(self, computeResourceId=None, priorityOrder=None, localDataMovement=None,):
    self.computeResourceId = computeResourceId
    self.priorityOrder = priorityOrder
    self.localDataMovement = localDataMovement

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.computeResourceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.priorityOrder = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.localDataMovement = apache.airavata.model.appcatalog.computeresource.ttypes.LOCALDataMovement()
          self.localDataMovement.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addLocalDataMovementDetails_args')
    if self.computeResourceId is not None:
      oprot.writeFieldBegin('computeResourceId', TType.STRING, 1)
      oprot.writeString(self.computeResourceId)
      oprot.writeFieldEnd()
    if self.priorityOrder is not None:
      oprot.writeFieldBegin('priorityOrder', TType.I32, 2)
      oprot.writeI32(self.priorityOrder)
      oprot.writeFieldEnd()
    if self.localDataMovement is not None:
      oprot.writeFieldBegin('localDataMovement', TType.STRUCT, 3)
      self.localDataMovement.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.computeResourceId is None:
      raise TProtocol.TProtocolException(message='Required field computeResourceId is unset!')
    if self.priorityOrder is None:
      raise TProtocol.TProtocolException(message='Required field priorityOrder is unset!')
    if self.localDataMovement is None:
      raise TProtocol.TProtocolException(message='Required field localDataMovement is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.computeResourceId)
    value = (value * 31) ^ hash(self.priorityOrder)
    value = (value * 31) ^ hash(self.localDataMovement)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addLocalDataMovementDetails_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addLocalDataMovementDetails_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateLocalDataMovementDetails_args:
  """
  Attributes:
   - dataMovementInterfaceId
   - localDataMovement
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'dataMovementInterfaceId', None, None, ), # 1
    (2, TType.STRUCT, 'localDataMovement', (apache.airavata.model.appcatalog.computeresource.ttypes.LOCALDataMovement, apache.airavata.model.appcatalog.computeresource.ttypes.LOCALDataMovement.thrift_spec), None, ), # 2
  )

  def __init__(self, dataMovementInterfaceId=None, localDataMovement=None,):
    self.dataMovementInterfaceId = dataMovementInterfaceId
    self.localDataMovement = localDataMovement

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.dataMovementInterfaceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.localDataMovement = apache.airavata.model.appcatalog.computeresource.ttypes.LOCALDataMovement()
          self.localDataMovement.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateLocalDataMovementDetails_args')
    if self.dataMovementInterfaceId is not None:
      oprot.writeFieldBegin('dataMovementInterfaceId', TType.STRING, 1)
      oprot.writeString(self.dataMovementInterfaceId)
      oprot.writeFieldEnd()
    if self.localDataMovement is not None:
      oprot.writeFieldBegin('localDataMovement', TType.STRUCT, 2)
      self.localDataMovement.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.dataMovementInterfaceId is None:
      raise TProtocol.TProtocolException(message='Required field dataMovementInterfaceId is unset!')
    if self.localDataMovement is None:
      raise TProtocol.TProtocolException(message='Required field localDataMovement is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.dataMovementInterfaceId)
    value = (value * 31) ^ hash(self.localDataMovement)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateLocalDataMovementDetails_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateLocalDataMovementDetails_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getLocalDataMovement_args:
  """
  Attributes:
   - dataMovementId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'dataMovementId', None, None, ), # 1
  )

  def __init__(self, dataMovementId=None,):
    self.dataMovementId = dataMovementId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.dataMovementId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getLocalDataMovement_args')
    if self.dataMovementId is not None:
      oprot.writeFieldBegin('dataMovementId', TType.STRING, 1)
      oprot.writeString(self.dataMovementId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.dataMovementId is None:
      raise TProtocol.TProtocolException(message='Required field dataMovementId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.dataMovementId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getLocalDataMovement_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (apache.airavata.model.appcatalog.computeresource.ttypes.LOCALDataMovement, apache.airavata.model.appcatalog.computeresource.ttypes.LOCALDataMovement.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = apache.airavata.model.appcatalog.computeresource.ttypes.LOCALDataMovement()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getLocalDataMovement_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addSCPDataMovementDetails_args:
  """
  Attributes:
   - computeResourceId
   - priorityOrder
   - scpDataMovement
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'computeResourceId', None, None, ), # 1
    (2, TType.I32, 'priorityOrder', None, None, ), # 2
    (3, TType.STRUCT, 'scpDataMovement', (apache.airavata.model.appcatalog.computeresource.ttypes.SCPDataMovement, apache.airavata.model.appcatalog.computeresource.ttypes.SCPDataMovement.thrift_spec), None, ), # 3
  )

  def __init__(self, computeResourceId=None, priorityOrder=None, scpDataMovement=None,):
    self.computeResourceId = computeResourceId
    self.priorityOrder = priorityOrder
    self.scpDataMovement = scpDataMovement

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.computeResourceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.priorityOrder = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.scpDataMovement = apache.airavata.model.appcatalog.computeresource.ttypes.SCPDataMovement()
          self.scpDataMovement.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addSCPDataMovementDetails_args')
    if self.computeResourceId is not None:
      oprot.writeFieldBegin('computeResourceId', TType.STRING, 1)
      oprot.writeString(self.computeResourceId)
      oprot.writeFieldEnd()
    if self.priorityOrder is not None:
      oprot.writeFieldBegin('priorityOrder', TType.I32, 2)
      oprot.writeI32(self.priorityOrder)
      oprot.writeFieldEnd()
    if self.scpDataMovement is not None:
      oprot.writeFieldBegin('scpDataMovement', TType.STRUCT, 3)
      self.scpDataMovement.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.computeResourceId is None:
      raise TProtocol.TProtocolException(message='Required field computeResourceId is unset!')
    if self.priorityOrder is None:
      raise TProtocol.TProtocolException(message='Required field priorityOrder is unset!')
    if self.scpDataMovement is None:
      raise TProtocol.TProtocolException(message='Required field scpDataMovement is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.computeResourceId)
    value = (value * 31) ^ hash(self.priorityOrder)
    value = (value * 31) ^ hash(self.scpDataMovement)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addSCPDataMovementDetails_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addSCPDataMovementDetails_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateSCPDataMovementDetails_args:
  """
  Attributes:
   - dataMovementInterfaceId
   - scpDataMovement
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'dataMovementInterfaceId', None, None, ), # 1
    (2, TType.STRUCT, 'scpDataMovement', (apache.airavata.model.appcatalog.computeresource.ttypes.SCPDataMovement, apache.airavata.model.appcatalog.computeresource.ttypes.SCPDataMovement.thrift_spec), None, ), # 2
  )

  def __init__(self, dataMovementInterfaceId=None, scpDataMovement=None,):
    self.dataMovementInterfaceId = dataMovementInterfaceId
    self.scpDataMovement = scpDataMovement

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.dataMovementInterfaceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.scpDataMovement = apache.airavata.model.appcatalog.computeresource.ttypes.SCPDataMovement()
          self.scpDataMovement.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateSCPDataMovementDetails_args')
    if self.dataMovementInterfaceId is not None:
      oprot.writeFieldBegin('dataMovementInterfaceId', TType.STRING, 1)
      oprot.writeString(self.dataMovementInterfaceId)
      oprot.writeFieldEnd()
    if self.scpDataMovement is not None:
      oprot.writeFieldBegin('scpDataMovement', TType.STRUCT, 2)
      self.scpDataMovement.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.dataMovementInterfaceId is None:
      raise TProtocol.TProtocolException(message='Required field dataMovementInterfaceId is unset!')
    if self.scpDataMovement is None:
      raise TProtocol.TProtocolException(message='Required field scpDataMovement is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.dataMovementInterfaceId)
    value = (value * 31) ^ hash(self.scpDataMovement)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateSCPDataMovementDetails_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateSCPDataMovementDetails_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSCPDataMovement_args:
  """
  Attributes:
   - dataMovementId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'dataMovementId', None, None, ), # 1
  )

  def __init__(self, dataMovementId=None,):
    self.dataMovementId = dataMovementId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.dataMovementId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSCPDataMovement_args')
    if self.dataMovementId is not None:
      oprot.writeFieldBegin('dataMovementId', TType.STRING, 1)
      oprot.writeString(self.dataMovementId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.dataMovementId is None:
      raise TProtocol.TProtocolException(message='Required field dataMovementId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.dataMovementId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSCPDataMovement_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (apache.airavata.model.appcatalog.computeresource.ttypes.SCPDataMovement, apache.airavata.model.appcatalog.computeresource.ttypes.SCPDataMovement.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = apache.airavata.model.appcatalog.computeresource.ttypes.SCPDataMovement()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSCPDataMovement_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addUnicoreDataMovementDetails_args:
  """
  Attributes:
   - computeResourceId
   - priorityOrder
   - unicoreDataMovement
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'computeResourceId', None, None, ), # 1
    (2, TType.I32, 'priorityOrder', None, None, ), # 2
    (3, TType.STRUCT, 'unicoreDataMovement', (apache.airavata.model.appcatalog.computeresource.ttypes.UnicoreDataMovement, apache.airavata.model.appcatalog.computeresource.ttypes.UnicoreDataMovement.thrift_spec), None, ), # 3
  )

  def __init__(self, computeResourceId=None, priorityOrder=None, unicoreDataMovement=None,):
    self.computeResourceId = computeResourceId
    self.priorityOrder = priorityOrder
    self.unicoreDataMovement = unicoreDataMovement

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.computeResourceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.priorityOrder = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.unicoreDataMovement = apache.airavata.model.appcatalog.computeresource.ttypes.UnicoreDataMovement()
          self.unicoreDataMovement.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addUnicoreDataMovementDetails_args')
    if self.computeResourceId is not None:
      oprot.writeFieldBegin('computeResourceId', TType.STRING, 1)
      oprot.writeString(self.computeResourceId)
      oprot.writeFieldEnd()
    if self.priorityOrder is not None:
      oprot.writeFieldBegin('priorityOrder', TType.I32, 2)
      oprot.writeI32(self.priorityOrder)
      oprot.writeFieldEnd()
    if self.unicoreDataMovement is not None:
      oprot.writeFieldBegin('unicoreDataMovement', TType.STRUCT, 3)
      self.unicoreDataMovement.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.computeResourceId is None:
      raise TProtocol.TProtocolException(message='Required field computeResourceId is unset!')
    if self.priorityOrder is None:
      raise TProtocol.TProtocolException(message='Required field priorityOrder is unset!')
    if self.unicoreDataMovement is None:
      raise TProtocol.TProtocolException(message='Required field unicoreDataMovement is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.computeResourceId)
    value = (value * 31) ^ hash(self.priorityOrder)
    value = (value * 31) ^ hash(self.unicoreDataMovement)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addUnicoreDataMovementDetails_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addUnicoreDataMovementDetails_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateUnicoreDataMovementDetails_args:
  """
  Attributes:
   - dataMovementInterfaceId
   - unicoreDataMovement
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'dataMovementInterfaceId', None, None, ), # 1
    (2, TType.STRUCT, 'unicoreDataMovement', (apache.airavata.model.appcatalog.computeresource.ttypes.UnicoreDataMovement, apache.airavata.model.appcatalog.computeresource.ttypes.UnicoreDataMovement.thrift_spec), None, ), # 2
  )

  def __init__(self, dataMovementInterfaceId=None, unicoreDataMovement=None,):
    self.dataMovementInterfaceId = dataMovementInterfaceId
    self.unicoreDataMovement = unicoreDataMovement

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.dataMovementInterfaceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.unicoreDataMovement = apache.airavata.model.appcatalog.computeresource.ttypes.UnicoreDataMovement()
          self.unicoreDataMovement.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateUnicoreDataMovementDetails_args')
    if self.dataMovementInterfaceId is not None:
      oprot.writeFieldBegin('dataMovementInterfaceId', TType.STRING, 1)
      oprot.writeString(self.dataMovementInterfaceId)
      oprot.writeFieldEnd()
    if self.unicoreDataMovement is not None:
      oprot.writeFieldBegin('unicoreDataMovement', TType.STRUCT, 2)
      self.unicoreDataMovement.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.dataMovementInterfaceId is None:
      raise TProtocol.TProtocolException(message='Required field dataMovementInterfaceId is unset!')
    if self.unicoreDataMovement is None:
      raise TProtocol.TProtocolException(message='Required field unicoreDataMovement is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.dataMovementInterfaceId)
    value = (value * 31) ^ hash(self.unicoreDataMovement)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateUnicoreDataMovementDetails_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateUnicoreDataMovementDetails_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getUnicoreDataMovement_args:
  """
  Attributes:
   - dataMovementId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'dataMovementId', None, None, ), # 1
  )

  def __init__(self, dataMovementId=None,):
    self.dataMovementId = dataMovementId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.dataMovementId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getUnicoreDataMovement_args')
    if self.dataMovementId is not None:
      oprot.writeFieldBegin('dataMovementId', TType.STRING, 1)
      oprot.writeString(self.dataMovementId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.dataMovementId is None:
      raise TProtocol.TProtocolException(message='Required field dataMovementId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.dataMovementId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getUnicoreDataMovement_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (apache.airavata.model.appcatalog.computeresource.ttypes.UnicoreDataMovement, apache.airavata.model.appcatalog.computeresource.ttypes.UnicoreDataMovement.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = apache.airavata.model.appcatalog.computeresource.ttypes.UnicoreDataMovement()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getUnicoreDataMovement_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addGridFTPDataMovementDetails_args:
  """
  Attributes:
   - computeResourceId
   - priorityOrder
   - gridFTPDataMovement
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'computeResourceId', None, None, ), # 1
    (2, TType.I32, 'priorityOrder', None, None, ), # 2
    (3, TType.STRUCT, 'gridFTPDataMovement', (apache.airavata.model.appcatalog.computeresource.ttypes.GridFTPDataMovement, apache.airavata.model.appcatalog.computeresource.ttypes.GridFTPDataMovement.thrift_spec), None, ), # 3
  )

  def __init__(self, computeResourceId=None, priorityOrder=None, gridFTPDataMovement=None,):
    self.computeResourceId = computeResourceId
    self.priorityOrder = priorityOrder
    self.gridFTPDataMovement = gridFTPDataMovement

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.computeResourceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.priorityOrder = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.gridFTPDataMovement = apache.airavata.model.appcatalog.computeresource.ttypes.GridFTPDataMovement()
          self.gridFTPDataMovement.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addGridFTPDataMovementDetails_args')
    if self.computeResourceId is not None:
      oprot.writeFieldBegin('computeResourceId', TType.STRING, 1)
      oprot.writeString(self.computeResourceId)
      oprot.writeFieldEnd()
    if self.priorityOrder is not None:
      oprot.writeFieldBegin('priorityOrder', TType.I32, 2)
      oprot.writeI32(self.priorityOrder)
      oprot.writeFieldEnd()
    if self.gridFTPDataMovement is not None:
      oprot.writeFieldBegin('gridFTPDataMovement', TType.STRUCT, 3)
      self.gridFTPDataMovement.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.computeResourceId is None:
      raise TProtocol.TProtocolException(message='Required field computeResourceId is unset!')
    if self.priorityOrder is None:
      raise TProtocol.TProtocolException(message='Required field priorityOrder is unset!')
    if self.gridFTPDataMovement is None:
      raise TProtocol.TProtocolException(message='Required field gridFTPDataMovement is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.computeResourceId)
    value = (value * 31) ^ hash(self.priorityOrder)
    value = (value * 31) ^ hash(self.gridFTPDataMovement)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addGridFTPDataMovementDetails_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addGridFTPDataMovementDetails_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateGridFTPDataMovementDetails_args:
  """
  Attributes:
   - dataMovementInterfaceId
   - gridFTPDataMovement
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'dataMovementInterfaceId', None, None, ), # 1
    (2, TType.STRUCT, 'gridFTPDataMovement', (apache.airavata.model.appcatalog.computeresource.ttypes.GridFTPDataMovement, apache.airavata.model.appcatalog.computeresource.ttypes.GridFTPDataMovement.thrift_spec), None, ), # 2
  )

  def __init__(self, dataMovementInterfaceId=None, gridFTPDataMovement=None,):
    self.dataMovementInterfaceId = dataMovementInterfaceId
    self.gridFTPDataMovement = gridFTPDataMovement

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.dataMovementInterfaceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.gridFTPDataMovement = apache.airavata.model.appcatalog.computeresource.ttypes.GridFTPDataMovement()
          self.gridFTPDataMovement.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateGridFTPDataMovementDetails_args')
    if self.dataMovementInterfaceId is not None:
      oprot.writeFieldBegin('dataMovementInterfaceId', TType.STRING, 1)
      oprot.writeString(self.dataMovementInterfaceId)
      oprot.writeFieldEnd()
    if self.gridFTPDataMovement is not None:
      oprot.writeFieldBegin('gridFTPDataMovement', TType.STRUCT, 2)
      self.gridFTPDataMovement.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.dataMovementInterfaceId is None:
      raise TProtocol.TProtocolException(message='Required field dataMovementInterfaceId is unset!')
    if self.gridFTPDataMovement is None:
      raise TProtocol.TProtocolException(message='Required field gridFTPDataMovement is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.dataMovementInterfaceId)
    value = (value * 31) ^ hash(self.gridFTPDataMovement)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateGridFTPDataMovementDetails_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateGridFTPDataMovementDetails_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getGridFTPDataMovement_args:
  """
  Attributes:
   - dataMovementId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'dataMovementId', None, None, ), # 1
  )

  def __init__(self, dataMovementId=None,):
    self.dataMovementId = dataMovementId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.dataMovementId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getGridFTPDataMovement_args')
    if self.dataMovementId is not None:
      oprot.writeFieldBegin('dataMovementId', TType.STRING, 1)
      oprot.writeString(self.dataMovementId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.dataMovementId is None:
      raise TProtocol.TProtocolException(message='Required field dataMovementId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.dataMovementId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getGridFTPDataMovement_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (apache.airavata.model.appcatalog.computeresource.ttypes.GridFTPDataMovement, apache.airavata.model.appcatalog.computeresource.ttypes.GridFTPDataMovement.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = apache.airavata.model.appcatalog.computeresource.ttypes.GridFTPDataMovement()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getGridFTPDataMovement_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class changeJobSubmissionPriority_args:
  """
  Attributes:
   - jobSubmissionInterfaceId
   - newPriorityOrder
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'jobSubmissionInterfaceId', None, None, ), # 1
    (2, TType.I32, 'newPriorityOrder', None, None, ), # 2
  )

  def __init__(self, jobSubmissionInterfaceId=None, newPriorityOrder=None,):
    self.jobSubmissionInterfaceId = jobSubmissionInterfaceId
    self.newPriorityOrder = newPriorityOrder

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.jobSubmissionInterfaceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.newPriorityOrder = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('changeJobSubmissionPriority_args')
    if self.jobSubmissionInterfaceId is not None:
      oprot.writeFieldBegin('jobSubmissionInterfaceId', TType.STRING, 1)
      oprot.writeString(self.jobSubmissionInterfaceId)
      oprot.writeFieldEnd()
    if self.newPriorityOrder is not None:
      oprot.writeFieldBegin('newPriorityOrder', TType.I32, 2)
      oprot.writeI32(self.newPriorityOrder)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.jobSubmissionInterfaceId is None:
      raise TProtocol.TProtocolException(message='Required field jobSubmissionInterfaceId is unset!')
    if self.newPriorityOrder is None:
      raise TProtocol.TProtocolException(message='Required field newPriorityOrder is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.jobSubmissionInterfaceId)
    value = (value * 31) ^ hash(self.newPriorityOrder)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class changeJobSubmissionPriority_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('changeJobSubmissionPriority_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class changeDataMovementPriority_args:
  """
  Attributes:
   - dataMovementInterfaceId
   - newPriorityOrder
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'dataMovementInterfaceId', None, None, ), # 1
    (2, TType.I32, 'newPriorityOrder', None, None, ), # 2
  )

  def __init__(self, dataMovementInterfaceId=None, newPriorityOrder=None,):
    self.dataMovementInterfaceId = dataMovementInterfaceId
    self.newPriorityOrder = newPriorityOrder

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.dataMovementInterfaceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.newPriorityOrder = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('changeDataMovementPriority_args')
    if self.dataMovementInterfaceId is not None:
      oprot.writeFieldBegin('dataMovementInterfaceId', TType.STRING, 1)
      oprot.writeString(self.dataMovementInterfaceId)
      oprot.writeFieldEnd()
    if self.newPriorityOrder is not None:
      oprot.writeFieldBegin('newPriorityOrder', TType.I32, 2)
      oprot.writeI32(self.newPriorityOrder)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.dataMovementInterfaceId is None:
      raise TProtocol.TProtocolException(message='Required field dataMovementInterfaceId is unset!')
    if self.newPriorityOrder is None:
      raise TProtocol.TProtocolException(message='Required field newPriorityOrder is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.dataMovementInterfaceId)
    value = (value * 31) ^ hash(self.newPriorityOrder)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class changeDataMovementPriority_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('changeDataMovementPriority_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class changeJobSubmissionPriorities_args:
  """
  Attributes:
   - jobSubmissionPriorityMap
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'jobSubmissionPriorityMap', (TType.STRING,None,TType.I32,None), None, ), # 1
  )

  def __init__(self, jobSubmissionPriorityMap=None,):
    self.jobSubmissionPriorityMap = jobSubmissionPriorityMap

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.jobSubmissionPriorityMap = {}
          (_ktype279, _vtype280, _size278 ) = iprot.readMapBegin()
          for _i282 in xrange(_size278):
            _key283 = iprot.readString();
            _val284 = iprot.readI32();
            self.jobSubmissionPriorityMap[_key283] = _val284
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('changeJobSubmissionPriorities_args')
    if self.jobSubmissionPriorityMap is not None:
      oprot.writeFieldBegin('jobSubmissionPriorityMap', TType.MAP, 1)
      oprot.writeMapBegin(TType.STRING, TType.I32, len(self.jobSubmissionPriorityMap))
      for kiter285,viter286 in self.jobSubmissionPriorityMap.items():
        oprot.writeString(kiter285)
        oprot.writeI32(viter286)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.jobSubmissionPriorityMap is None:
      raise TProtocol.TProtocolException(message='Required field jobSubmissionPriorityMap is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.jobSubmissionPriorityMap)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class changeJobSubmissionPriorities_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('changeJobSubmissionPriorities_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class changeDataMovementPriorities_args:
  """
  Attributes:
   - dataMovementPriorityMap
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'dataMovementPriorityMap', (TType.STRING,None,TType.I32,None), None, ), # 1
  )

  def __init__(self, dataMovementPriorityMap=None,):
    self.dataMovementPriorityMap = dataMovementPriorityMap

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.dataMovementPriorityMap = {}
          (_ktype288, _vtype289, _size287 ) = iprot.readMapBegin()
          for _i291 in xrange(_size287):
            _key292 = iprot.readString();
            _val293 = iprot.readI32();
            self.dataMovementPriorityMap[_key292] = _val293
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('changeDataMovementPriorities_args')
    if self.dataMovementPriorityMap is not None:
      oprot.writeFieldBegin('dataMovementPriorityMap', TType.MAP, 1)
      oprot.writeMapBegin(TType.STRING, TType.I32, len(self.dataMovementPriorityMap))
      for kiter294,viter295 in self.dataMovementPriorityMap.items():
        oprot.writeString(kiter294)
        oprot.writeI32(viter295)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.dataMovementPriorityMap is None:
      raise TProtocol.TProtocolException(message='Required field dataMovementPriorityMap is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.dataMovementPriorityMap)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class changeDataMovementPriorities_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('changeDataMovementPriorities_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteJobSubmissionInterface_args:
  """
  Attributes:
   - computeResourceId
   - jobSubmissionInterfaceId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'computeResourceId', None, None, ), # 1
    (2, TType.STRING, 'jobSubmissionInterfaceId', None, None, ), # 2
  )

  def __init__(self, computeResourceId=None, jobSubmissionInterfaceId=None,):
    self.computeResourceId = computeResourceId
    self.jobSubmissionInterfaceId = jobSubmissionInterfaceId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.computeResourceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.jobSubmissionInterfaceId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteJobSubmissionInterface_args')
    if self.computeResourceId is not None:
      oprot.writeFieldBegin('computeResourceId', TType.STRING, 1)
      oprot.writeString(self.computeResourceId)
      oprot.writeFieldEnd()
    if self.jobSubmissionInterfaceId is not None:
      oprot.writeFieldBegin('jobSubmissionInterfaceId', TType.STRING, 2)
      oprot.writeString(self.jobSubmissionInterfaceId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.computeResourceId is None:
      raise TProtocol.TProtocolException(message='Required field computeResourceId is unset!')
    if self.jobSubmissionInterfaceId is None:
      raise TProtocol.TProtocolException(message='Required field jobSubmissionInterfaceId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.computeResourceId)
    value = (value * 31) ^ hash(self.jobSubmissionInterfaceId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteJobSubmissionInterface_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteJobSubmissionInterface_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteDataMovementInterface_args:
  """
  Attributes:
   - computeResourceId
   - dataMovementInterfaceId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'computeResourceId', None, None, ), # 1
    (2, TType.STRING, 'dataMovementInterfaceId', None, None, ), # 2
  )

  def __init__(self, computeResourceId=None, dataMovementInterfaceId=None,):
    self.computeResourceId = computeResourceId
    self.dataMovementInterfaceId = dataMovementInterfaceId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.computeResourceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.dataMovementInterfaceId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteDataMovementInterface_args')
    if self.computeResourceId is not None:
      oprot.writeFieldBegin('computeResourceId', TType.STRING, 1)
      oprot.writeString(self.computeResourceId)
      oprot.writeFieldEnd()
    if self.dataMovementInterfaceId is not None:
      oprot.writeFieldBegin('dataMovementInterfaceId', TType.STRING, 2)
      oprot.writeString(self.dataMovementInterfaceId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.computeResourceId is None:
      raise TProtocol.TProtocolException(message='Required field computeResourceId is unset!')
    if self.dataMovementInterfaceId is None:
      raise TProtocol.TProtocolException(message='Required field dataMovementInterfaceId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.computeResourceId)
    value = (value * 31) ^ hash(self.dataMovementInterfaceId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteDataMovementInterface_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteDataMovementInterface_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class registerResourceJobManager_args:
  """
  Attributes:
   - resourceJobManager
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'resourceJobManager', (apache.airavata.model.appcatalog.computeresource.ttypes.ResourceJobManager, apache.airavata.model.appcatalog.computeresource.ttypes.ResourceJobManager.thrift_spec), None, ), # 1
  )

  def __init__(self, resourceJobManager=None,):
    self.resourceJobManager = resourceJobManager

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.resourceJobManager = apache.airavata.model.appcatalog.computeresource.ttypes.ResourceJobManager()
          self.resourceJobManager.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('registerResourceJobManager_args')
    if self.resourceJobManager is not None:
      oprot.writeFieldBegin('resourceJobManager', TType.STRUCT, 1)
      self.resourceJobManager.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.resourceJobManager is None:
      raise TProtocol.TProtocolException(message='Required field resourceJobManager is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.resourceJobManager)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class registerResourceJobManager_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('registerResourceJobManager_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateResourceJobManager_args:
  """
  Attributes:
   - resourceJobManagerId
   - updatedResourceJobManager
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'resourceJobManagerId', None, None, ), # 1
    (2, TType.STRUCT, 'updatedResourceJobManager', (apache.airavata.model.appcatalog.computeresource.ttypes.ResourceJobManager, apache.airavata.model.appcatalog.computeresource.ttypes.ResourceJobManager.thrift_spec), None, ), # 2
  )

  def __init__(self, resourceJobManagerId=None, updatedResourceJobManager=None,):
    self.resourceJobManagerId = resourceJobManagerId
    self.updatedResourceJobManager = updatedResourceJobManager

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.resourceJobManagerId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.updatedResourceJobManager = apache.airavata.model.appcatalog.computeresource.ttypes.ResourceJobManager()
          self.updatedResourceJobManager.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateResourceJobManager_args')
    if self.resourceJobManagerId is not None:
      oprot.writeFieldBegin('resourceJobManagerId', TType.STRING, 1)
      oprot.writeString(self.resourceJobManagerId)
      oprot.writeFieldEnd()
    if self.updatedResourceJobManager is not None:
      oprot.writeFieldBegin('updatedResourceJobManager', TType.STRUCT, 2)
      self.updatedResourceJobManager.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.resourceJobManagerId is None:
      raise TProtocol.TProtocolException(message='Required field resourceJobManagerId is unset!')
    if self.updatedResourceJobManager is None:
      raise TProtocol.TProtocolException(message='Required field updatedResourceJobManager is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.resourceJobManagerId)
    value = (value * 31) ^ hash(self.updatedResourceJobManager)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateResourceJobManager_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateResourceJobManager_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getResourceJobManager_args:
  """
  Attributes:
   - resourceJobManagerId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'resourceJobManagerId', None, None, ), # 1
  )

  def __init__(self, resourceJobManagerId=None,):
    self.resourceJobManagerId = resourceJobManagerId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.resourceJobManagerId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getResourceJobManager_args')
    if self.resourceJobManagerId is not None:
      oprot.writeFieldBegin('resourceJobManagerId', TType.STRING, 1)
      oprot.writeString(self.resourceJobManagerId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.resourceJobManagerId is None:
      raise TProtocol.TProtocolException(message='Required field resourceJobManagerId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.resourceJobManagerId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getResourceJobManager_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (apache.airavata.model.appcatalog.computeresource.ttypes.ResourceJobManager, apache.airavata.model.appcatalog.computeresource.ttypes.ResourceJobManager.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = apache.airavata.model.appcatalog.computeresource.ttypes.ResourceJobManager()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getResourceJobManager_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteResourceJobManager_args:
  """
  Attributes:
   - resourceJobManagerId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'resourceJobManagerId', None, None, ), # 1
  )

  def __init__(self, resourceJobManagerId=None,):
    self.resourceJobManagerId = resourceJobManagerId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.resourceJobManagerId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteResourceJobManager_args')
    if self.resourceJobManagerId is not None:
      oprot.writeFieldBegin('resourceJobManagerId', TType.STRING, 1)
      oprot.writeString(self.resourceJobManagerId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.resourceJobManagerId is None:
      raise TProtocol.TProtocolException(message='Required field resourceJobManagerId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.resourceJobManagerId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteResourceJobManager_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteResourceJobManager_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteBatchQueue_args:
  """
  Attributes:
   - computeResourceId
   - queueName
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'computeResourceId', None, None, ), # 1
    (2, TType.STRING, 'queueName', None, None, ), # 2
  )

  def __init__(self, computeResourceId=None, queueName=None,):
    self.computeResourceId = computeResourceId
    self.queueName = queueName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.computeResourceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.queueName = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteBatchQueue_args')
    if self.computeResourceId is not None:
      oprot.writeFieldBegin('computeResourceId', TType.STRING, 1)
      oprot.writeString(self.computeResourceId)
      oprot.writeFieldEnd()
    if self.queueName is not None:
      oprot.writeFieldBegin('queueName', TType.STRING, 2)
      oprot.writeString(self.queueName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.computeResourceId is None:
      raise TProtocol.TProtocolException(message='Required field computeResourceId is unset!')
    if self.queueName is None:
      raise TProtocol.TProtocolException(message='Required field queueName is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.computeResourceId)
    value = (value * 31) ^ hash(self.queueName)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteBatchQueue_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteBatchQueue_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class registerGatewayResourceProfile_args:
  """
  Attributes:
   - gatewayResourceProfile
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'gatewayResourceProfile', (apache.airavata.model.appcatalog.gatewayprofile.ttypes.GatewayResourceProfile, apache.airavata.model.appcatalog.gatewayprofile.ttypes.GatewayResourceProfile.thrift_spec), None, ), # 1
  )

  def __init__(self, gatewayResourceProfile=None,):
    self.gatewayResourceProfile = gatewayResourceProfile

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.gatewayResourceProfile = apache.airavata.model.appcatalog.gatewayprofile.ttypes.GatewayResourceProfile()
          self.gatewayResourceProfile.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('registerGatewayResourceProfile_args')
    if self.gatewayResourceProfile is not None:
      oprot.writeFieldBegin('gatewayResourceProfile', TType.STRUCT, 1)
      self.gatewayResourceProfile.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayResourceProfile is None:
      raise TProtocol.TProtocolException(message='Required field gatewayResourceProfile is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayResourceProfile)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class registerGatewayResourceProfile_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('registerGatewayResourceProfile_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getGatewayResourceProfile_args:
  """
  Attributes:
   - gatewayID
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayID', None, None, ), # 1
  )

  def __init__(self, gatewayID=None,):
    self.gatewayID = gatewayID

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayID = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getGatewayResourceProfile_args')
    if self.gatewayID is not None:
      oprot.writeFieldBegin('gatewayID', TType.STRING, 1)
      oprot.writeString(self.gatewayID)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayID is None:
      raise TProtocol.TProtocolException(message='Required field gatewayID is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayID)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getGatewayResourceProfile_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (apache.airavata.model.appcatalog.gatewayprofile.ttypes.GatewayResourceProfile, apache.airavata.model.appcatalog.gatewayprofile.ttypes.GatewayResourceProfile.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = apache.airavata.model.appcatalog.gatewayprofile.ttypes.GatewayResourceProfile()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getGatewayResourceProfile_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateGatewayResourceProfile_args:
  """
  Attributes:
   - gatewayID
   - gatewayResourceProfile
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayID', None, None, ), # 1
    (2, TType.STRUCT, 'gatewayResourceProfile', (apache.airavata.model.appcatalog.gatewayprofile.ttypes.GatewayResourceProfile, apache.airavata.model.appcatalog.gatewayprofile.ttypes.GatewayResourceProfile.thrift_spec), None, ), # 2
  )

  def __init__(self, gatewayID=None, gatewayResourceProfile=None,):
    self.gatewayID = gatewayID
    self.gatewayResourceProfile = gatewayResourceProfile

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayID = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.gatewayResourceProfile = apache.airavata.model.appcatalog.gatewayprofile.ttypes.GatewayResourceProfile()
          self.gatewayResourceProfile.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateGatewayResourceProfile_args')
    if self.gatewayID is not None:
      oprot.writeFieldBegin('gatewayID', TType.STRING, 1)
      oprot.writeString(self.gatewayID)
      oprot.writeFieldEnd()
    if self.gatewayResourceProfile is not None:
      oprot.writeFieldBegin('gatewayResourceProfile', TType.STRUCT, 2)
      self.gatewayResourceProfile.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayID is None:
      raise TProtocol.TProtocolException(message='Required field gatewayID is unset!')
    if self.gatewayResourceProfile is None:
      raise TProtocol.TProtocolException(message='Required field gatewayResourceProfile is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayID)
    value = (value * 31) ^ hash(self.gatewayResourceProfile)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateGatewayResourceProfile_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateGatewayResourceProfile_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteGatewayResourceProfile_args:
  """
  Attributes:
   - gatewayID
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayID', None, None, ), # 1
  )

  def __init__(self, gatewayID=None,):
    self.gatewayID = gatewayID

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayID = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteGatewayResourceProfile_args')
    if self.gatewayID is not None:
      oprot.writeFieldBegin('gatewayID', TType.STRING, 1)
      oprot.writeString(self.gatewayID)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayID is None:
      raise TProtocol.TProtocolException(message='Required field gatewayID is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayID)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteGatewayResourceProfile_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteGatewayResourceProfile_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addGatewayComputeResourcePreference_args:
  """
  Attributes:
   - gatewayID
   - computeResourceId
   - computeResourcePreference
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayID', None, None, ), # 1
    (2, TType.STRING, 'computeResourceId', None, None, ), # 2
    (3, TType.STRUCT, 'computeResourcePreference', (apache.airavata.model.appcatalog.gatewayprofile.ttypes.ComputeResourcePreference, apache.airavata.model.appcatalog.gatewayprofile.ttypes.ComputeResourcePreference.thrift_spec), None, ), # 3
  )

  def __init__(self, gatewayID=None, computeResourceId=None, computeResourcePreference=None,):
    self.gatewayID = gatewayID
    self.computeResourceId = computeResourceId
    self.computeResourcePreference = computeResourcePreference

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayID = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.computeResourceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.computeResourcePreference = apache.airavata.model.appcatalog.gatewayprofile.ttypes.ComputeResourcePreference()
          self.computeResourcePreference.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addGatewayComputeResourcePreference_args')
    if self.gatewayID is not None:
      oprot.writeFieldBegin('gatewayID', TType.STRING, 1)
      oprot.writeString(self.gatewayID)
      oprot.writeFieldEnd()
    if self.computeResourceId is not None:
      oprot.writeFieldBegin('computeResourceId', TType.STRING, 2)
      oprot.writeString(self.computeResourceId)
      oprot.writeFieldEnd()
    if self.computeResourcePreference is not None:
      oprot.writeFieldBegin('computeResourcePreference', TType.STRUCT, 3)
      self.computeResourcePreference.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayID is None:
      raise TProtocol.TProtocolException(message='Required field gatewayID is unset!')
    if self.computeResourceId is None:
      raise TProtocol.TProtocolException(message='Required field computeResourceId is unset!')
    if self.computeResourcePreference is None:
      raise TProtocol.TProtocolException(message='Required field computeResourcePreference is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayID)
    value = (value * 31) ^ hash(self.computeResourceId)
    value = (value * 31) ^ hash(self.computeResourcePreference)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addGatewayComputeResourcePreference_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addGatewayComputeResourcePreference_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getGatewayComputeResourcePreference_args:
  """
  Attributes:
   - gatewayID
   - computeResourceId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayID', None, None, ), # 1
    (2, TType.STRING, 'computeResourceId', None, None, ), # 2
  )

  def __init__(self, gatewayID=None, computeResourceId=None,):
    self.gatewayID = gatewayID
    self.computeResourceId = computeResourceId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayID = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.computeResourceId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getGatewayComputeResourcePreference_args')
    if self.gatewayID is not None:
      oprot.writeFieldBegin('gatewayID', TType.STRING, 1)
      oprot.writeString(self.gatewayID)
      oprot.writeFieldEnd()
    if self.computeResourceId is not None:
      oprot.writeFieldBegin('computeResourceId', TType.STRING, 2)
      oprot.writeString(self.computeResourceId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayID is None:
      raise TProtocol.TProtocolException(message='Required field gatewayID is unset!')
    if self.computeResourceId is None:
      raise TProtocol.TProtocolException(message='Required field computeResourceId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayID)
    value = (value * 31) ^ hash(self.computeResourceId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getGatewayComputeResourcePreference_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (apache.airavata.model.appcatalog.gatewayprofile.ttypes.ComputeResourcePreference, apache.airavata.model.appcatalog.gatewayprofile.ttypes.ComputeResourcePreference.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = apache.airavata.model.appcatalog.gatewayprofile.ttypes.ComputeResourcePreference()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getGatewayComputeResourcePreference_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllGatewayComputeResourcePreferences_args:
  """
  Attributes:
   - gatewayID
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayID', None, None, ), # 1
  )

  def __init__(self, gatewayID=None,):
    self.gatewayID = gatewayID

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayID = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllGatewayComputeResourcePreferences_args')
    if self.gatewayID is not None:
      oprot.writeFieldBegin('gatewayID', TType.STRING, 1)
      oprot.writeString(self.gatewayID)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayID is None:
      raise TProtocol.TProtocolException(message='Required field gatewayID is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayID)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllGatewayComputeResourcePreferences_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(apache.airavata.model.appcatalog.gatewayprofile.ttypes.ComputeResourcePreference, apache.airavata.model.appcatalog.gatewayprofile.ttypes.ComputeResourcePreference.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype299, _size296) = iprot.readListBegin()
          for _i300 in xrange(_size296):
            _elem301 = apache.airavata.model.appcatalog.gatewayprofile.ttypes.ComputeResourcePreference()
            _elem301.read(iprot)
            self.success.append(_elem301)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllGatewayComputeResourcePreferences_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter302 in self.success:
        iter302.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllGatewayComputeResources_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllGatewayComputeResources_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllGatewayComputeResources_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(apache.airavata.model.appcatalog.gatewayprofile.ttypes.GatewayResourceProfile, apache.airavata.model.appcatalog.gatewayprofile.ttypes.GatewayResourceProfile.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype306, _size303) = iprot.readListBegin()
          for _i307 in xrange(_size303):
            _elem308 = apache.airavata.model.appcatalog.gatewayprofile.ttypes.GatewayResourceProfile()
            _elem308.read(iprot)
            self.success.append(_elem308)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllGatewayComputeResources_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter309 in self.success:
        iter309.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateGatewayComputeResourcePreference_args:
  """
  Attributes:
   - gatewayID
   - computeResourceId
   - computeResourcePreference
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayID', None, None, ), # 1
    (2, TType.STRING, 'computeResourceId', None, None, ), # 2
    (3, TType.STRUCT, 'computeResourcePreference', (apache.airavata.model.appcatalog.gatewayprofile.ttypes.ComputeResourcePreference, apache.airavata.model.appcatalog.gatewayprofile.ttypes.ComputeResourcePreference.thrift_spec), None, ), # 3
  )

  def __init__(self, gatewayID=None, computeResourceId=None, computeResourcePreference=None,):
    self.gatewayID = gatewayID
    self.computeResourceId = computeResourceId
    self.computeResourcePreference = computeResourcePreference

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayID = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.computeResourceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.computeResourcePreference = apache.airavata.model.appcatalog.gatewayprofile.ttypes.ComputeResourcePreference()
          self.computeResourcePreference.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateGatewayComputeResourcePreference_args')
    if self.gatewayID is not None:
      oprot.writeFieldBegin('gatewayID', TType.STRING, 1)
      oprot.writeString(self.gatewayID)
      oprot.writeFieldEnd()
    if self.computeResourceId is not None:
      oprot.writeFieldBegin('computeResourceId', TType.STRING, 2)
      oprot.writeString(self.computeResourceId)
      oprot.writeFieldEnd()
    if self.computeResourcePreference is not None:
      oprot.writeFieldBegin('computeResourcePreference', TType.STRUCT, 3)
      self.computeResourcePreference.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayID is None:
      raise TProtocol.TProtocolException(message='Required field gatewayID is unset!')
    if self.computeResourceId is None:
      raise TProtocol.TProtocolException(message='Required field computeResourceId is unset!')
    if self.computeResourcePreference is None:
      raise TProtocol.TProtocolException(message='Required field computeResourcePreference is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayID)
    value = (value * 31) ^ hash(self.computeResourceId)
    value = (value * 31) ^ hash(self.computeResourcePreference)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateGatewayComputeResourcePreference_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateGatewayComputeResourcePreference_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteGatewayComputeResourcePreference_args:
  """
  Attributes:
   - gatewayID
   - computeResourceId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayID', None, None, ), # 1
    (2, TType.STRING, 'computeResourceId', None, None, ), # 2
  )

  def __init__(self, gatewayID=None, computeResourceId=None,):
    self.gatewayID = gatewayID
    self.computeResourceId = computeResourceId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayID = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.computeResourceId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteGatewayComputeResourcePreference_args')
    if self.gatewayID is not None:
      oprot.writeFieldBegin('gatewayID', TType.STRING, 1)
      oprot.writeString(self.gatewayID)
      oprot.writeFieldEnd()
    if self.computeResourceId is not None:
      oprot.writeFieldBegin('computeResourceId', TType.STRING, 2)
      oprot.writeString(self.computeResourceId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayID is None:
      raise TProtocol.TProtocolException(message='Required field gatewayID is unset!')
    if self.computeResourceId is None:
      raise TProtocol.TProtocolException(message='Required field computeResourceId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayID)
    value = (value * 31) ^ hash(self.computeResourceId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteGatewayComputeResourcePreference_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteGatewayComputeResourcePreference_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllWorkflows_args:
  """
  Attributes:
   - gatewayId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayId', None, None, ), # 1
  )

  def __init__(self, gatewayId=None,):
    self.gatewayId = gatewayId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllWorkflows_args')
    if self.gatewayId is not None:
      oprot.writeFieldBegin('gatewayId', TType.STRING, 1)
      oprot.writeString(self.gatewayId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayId is None:
      raise TProtocol.TProtocolException(message='Required field gatewayId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllWorkflows_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype313, _size310) = iprot.readListBegin()
          for _i314 in xrange(_size310):
            _elem315 = iprot.readString();
            self.success.append(_elem315)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllWorkflows_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRING, len(self.success))
      for iter316 in self.success:
        oprot.writeString(iter316)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getWorkflow_args:
  """
  Attributes:
   - workflowTemplateId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'workflowTemplateId', None, None, ), # 1
  )

  def __init__(self, workflowTemplateId=None,):
    self.workflowTemplateId = workflowTemplateId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.workflowTemplateId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getWorkflow_args')
    if self.workflowTemplateId is not None:
      oprot.writeFieldBegin('workflowTemplateId', TType.STRING, 1)
      oprot.writeString(self.workflowTemplateId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.workflowTemplateId is None:
      raise TProtocol.TProtocolException(message='Required field workflowTemplateId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.workflowTemplateId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getWorkflow_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (apache.airavata.model.workflow.ttypes.Workflow, apache.airavata.model.workflow.ttypes.Workflow.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = apache.airavata.model.workflow.ttypes.Workflow()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getWorkflow_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteWorkflow_args:
  """
  Attributes:
   - workflowTemplateId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'workflowTemplateId', None, None, ), # 1
  )

  def __init__(self, workflowTemplateId=None,):
    self.workflowTemplateId = workflowTemplateId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.workflowTemplateId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteWorkflow_args')
    if self.workflowTemplateId is not None:
      oprot.writeFieldBegin('workflowTemplateId', TType.STRING, 1)
      oprot.writeString(self.workflowTemplateId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.workflowTemplateId is None:
      raise TProtocol.TProtocolException(message='Required field workflowTemplateId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.workflowTemplateId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteWorkflow_result:
  """
  Attributes:
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, ire=None, ace=None, ase=None,):
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteWorkflow_result')
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class registerWorkflow_args:
  """
  Attributes:
   - gatewayId
   - workflow
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayId', None, None, ), # 1
    (2, TType.STRUCT, 'workflow', (apache.airavata.model.workflow.ttypes.Workflow, apache.airavata.model.workflow.ttypes.Workflow.thrift_spec), None, ), # 2
  )

  def __init__(self, gatewayId=None, workflow=None,):
    self.gatewayId = gatewayId
    self.workflow = workflow

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.workflow = apache.airavata.model.workflow.ttypes.Workflow()
          self.workflow.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('registerWorkflow_args')
    if self.gatewayId is not None:
      oprot.writeFieldBegin('gatewayId', TType.STRING, 1)
      oprot.writeString(self.gatewayId)
      oprot.writeFieldEnd()
    if self.workflow is not None:
      oprot.writeFieldBegin('workflow', TType.STRUCT, 2)
      self.workflow.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayId is None:
      raise TProtocol.TProtocolException(message='Required field gatewayId is unset!')
    if self.workflow is None:
      raise TProtocol.TProtocolException(message='Required field workflow is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayId)
    value = (value * 31) ^ hash(self.workflow)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class registerWorkflow_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('registerWorkflow_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateWorkflow_args:
  """
  Attributes:
   - workflowTemplateId
   - workflow
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'workflowTemplateId', None, None, ), # 1
    (2, TType.STRUCT, 'workflow', (apache.airavata.model.workflow.ttypes.Workflow, apache.airavata.model.workflow.ttypes.Workflow.thrift_spec), None, ), # 2
  )

  def __init__(self, workflowTemplateId=None, workflow=None,):
    self.workflowTemplateId = workflowTemplateId
    self.workflow = workflow

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.workflowTemplateId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.workflow = apache.airavata.model.workflow.ttypes.Workflow()
          self.workflow.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateWorkflow_args')
    if self.workflowTemplateId is not None:
      oprot.writeFieldBegin('workflowTemplateId', TType.STRING, 1)
      oprot.writeString(self.workflowTemplateId)
      oprot.writeFieldEnd()
    if self.workflow is not None:
      oprot.writeFieldBegin('workflow', TType.STRUCT, 2)
      self.workflow.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.workflowTemplateId is None:
      raise TProtocol.TProtocolException(message='Required field workflowTemplateId is unset!')
    if self.workflow is None:
      raise TProtocol.TProtocolException(message='Required field workflow is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.workflowTemplateId)
    value = (value * 31) ^ hash(self.workflow)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateWorkflow_result:
  """
  Attributes:
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, ire=None, ace=None, ase=None,):
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateWorkflow_result')
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getWorkflowTemplateId_args:
  """
  Attributes:
   - workflowName
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'workflowName', None, None, ), # 1
  )

  def __init__(self, workflowName=None,):
    self.workflowName = workflowName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.workflowName = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getWorkflowTemplateId_args')
    if self.workflowName is not None:
      oprot.writeFieldBegin('workflowName', TType.STRING, 1)
      oprot.writeString(self.workflowName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.workflowName is None:
      raise TProtocol.TProtocolException(message='Required field workflowName is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.workflowName)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getWorkflowTemplateId_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getWorkflowTemplateId_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class isWorkflowExistWithName_args:
  """
  Attributes:
   - workflowName
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'workflowName', None, None, ), # 1
  )

  def __init__(self, workflowName=None,):
    self.workflowName = workflowName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.workflowName = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('isWorkflowExistWithName_args')
    if self.workflowName is not None:
      oprot.writeFieldBegin('workflowName', TType.STRING, 1)
      oprot.writeString(self.workflowName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.workflowName is None:
      raise TProtocol.TProtocolException(message='Required field workflowName is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.workflowName)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class isWorkflowExistWithName_result:
  """
  Attributes:
   - success
   - ire
   - ace
   - ase
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ire', (apache.airavata.api.error.ttypes.InvalidRequestException, apache.airavata.api.error.ttypes.InvalidRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ace', (apache.airavata.api.error.ttypes.AiravataClientException, apache.airavata.api.error.ttypes.AiravataClientException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ase', (apache.airavata.api.error.ttypes.AiravataSystemException, apache.airavata.api.error.ttypes.AiravataSystemException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ire=None, ace=None, ase=None,):
    self.success = success
    self.ire = ire
    self.ace = ace
    self.ase = ase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ire = apache.airavata.api.error.ttypes.InvalidRequestException()
          self.ire.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ace = apache.airavata.api.error.ttypes.AiravataClientException()
          self.ace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ase = apache.airavata.api.error.ttypes.AiravataSystemException()
          self.ase.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('isWorkflowExistWithName_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ire is not None:
      oprot.writeFieldBegin('ire', TType.STRUCT, 1)
      self.ire.write(oprot)
      oprot.writeFieldEnd()
    if self.ace is not None:
      oprot.writeFieldBegin('ace', TType.STRUCT, 2)
      self.ace.write(oprot)
      oprot.writeFieldEnd()
    if self.ase is not None:
      oprot.writeFieldBegin('ase', TType.STRUCT, 3)
      self.ase.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ire)
    value = (value * 31) ^ hash(self.ace)
    value = (value * 31) ^ hash(self.ase)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
