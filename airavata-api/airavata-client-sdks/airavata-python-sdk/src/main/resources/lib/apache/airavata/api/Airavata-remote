#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from apache.airavata.api import Airavata
from apache.airavata.api.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  string getAPIVersion()'
  print '  string addGateway(Gateway gateway)'
  print '  void updateGateway(string gatewayId, Gateway updatedGateway)'
  print '  Gateway getGateway(string gatewayId)'
  print '  bool deleteGateway(string gatewayId)'
  print '   getAllGateways()'
  print '  bool isGatewayExist(string gatewayId)'
  print '  string generateAndRegisterSSHKeys(string gatewayId, string userName)'
  print '  string getSSHPubKey(string airavataCredStoreToken)'
  print '   getAllUserSSHPubKeys(string userName)'
  print '  string createProject(string gatewayId, Project project)'
  print '  void updateProject(string projectId, Project updatedProject)'
  print '  Project getProject(string projectId)'
  print '  bool deleteProject(string projectId)'
  print '   getAllUserProjects(string gatewayId, string userName)'
  print '   getAllUserProjectsWithPagination(string gatewayId, string userName, i32 limit, i32 offset)'
  print '   searchProjectsByProjectName(string gatewayId, string userName, string projectName)'
  print '   searchProjectsByProjectNameWithPagination(string gatewayId, string userName, string projectName, i32 limit, i32 offset)'
  print '   searchProjectsByProjectDesc(string gatewayId, string userName, string description)'
  print '   searchProjectsByProjectDescWithPagination(string gatewayId, string userName, string description, i32 limit, i32 offset)'
  print '   searchExperimentsByName(string gatewayId, string userName, string expName)'
  print '   searchExperimentsByNameWithPagination(string gatewayId, string userName, string expName, i32 limit, i32 offset)'
  print '   searchExperimentsByDesc(string gatewayId, string userName, string description)'
  print '   searchExperimentsByDescWithPagination(string gatewayId, string userName, string description, i32 limit, i32 offset)'
  print '   searchExperimentsByApplication(string gatewayId, string userName, string applicationId)'
  print '   searchExperimentsByApplicationWithPagination(string gatewayId, string userName, string applicationId, i32 limit, i32 offset)'
  print '   searchExperimentsByStatus(string gatewayId, string userName, ExperimentState experimentState)'
  print '   searchExperimentsByStatusWithPagination(string gatewayId, string userName, ExperimentState experimentState, i32 limit, i32 offset)'
  print '   searchExperimentsByCreationTime(string gatewayId, string userName, i64 fromTime, i64 toTime)'
  print '   searchExperimentsByCreationTimeWithPagination(string gatewayId, string userName, i64 fromTime, i64 toTime, i32 limit, i32 offset)'
  print '   getAllExperimentsInProject(string projectId)'
  print '   getAllExperimentsInProjectWithPagination(string projectId, i32 limit, i32 offset)'
  print '   getAllUserExperiments(string gatewayId, string userName)'
  print '   getAllUserExperimentsWithPagination(string gatewayId, string userName, i32 limit, i32 offset)'
  print '  string createExperiment(string gatewayId, Experiment experiment)'
  print '  Experiment getExperiment(string airavataExperimentId)'
  print '  void updateExperiment(string airavataExperimentId, Experiment experiment)'
  print '  void updateExperimentConfiguration(string airavataExperimentId, UserConfigurationData userConfiguration)'
  print '  void updateResourceScheduleing(string airavataExperimentId, ComputationalResourceScheduling resourceScheduling)'
  print '  bool validateExperiment(string airavataExperimentId)'
  print '  void launchExperiment(string airavataExperimentId, string airavataCredStoreToken)'
  print '  ExperimentStatus getExperimentStatus(string airavataExperimentId)'
  print '   getExperimentOutputs(string airavataExperimentId)'
  print '   getIntermediateOutputs(string airavataExperimentId)'
  print '   getJobStatuses(string airavataExperimentId)'
  print '   getJobDetails(string airavataExperimentId)'
  print '   getDataTransferDetails(string airavataExperimentId)'
  print '  string cloneExperiment(string existingExperimentID, string newExperimentName)'
  print '  void terminateExperiment(string airavataExperimentId, string tokenId)'
  print '  string registerApplicationModule(string gatewayId, ApplicationModule applicationModule)'
  print '  ApplicationModule getApplicationModule(string appModuleId)'
  print '  bool updateApplicationModule(string appModuleId, ApplicationModule applicationModule)'
  print '   getAllAppModules(string gatewayId)'
  print '  bool deleteApplicationModule(string appModuleId)'
  print '  string registerApplicationDeployment(string gatewayId, ApplicationDeploymentDescription applicationDeployment)'
  print '  ApplicationDeploymentDescription getApplicationDeployment(string appDeploymentId)'
  print '  bool updateApplicationDeployment(string appDeploymentId, ApplicationDeploymentDescription applicationDeployment)'
  print '  bool deleteApplicationDeployment(string appDeploymentId)'
  print '   getAllApplicationDeployments(string gatewayId)'
  print '   getAppModuleDeployedResources(string appModuleId)'
  print '  string registerApplicationInterface(string gatewayId, ApplicationInterfaceDescription applicationInterface)'
  print '  ApplicationInterfaceDescription getApplicationInterface(string appInterfaceId)'
  print '  bool updateApplicationInterface(string appInterfaceId, ApplicationInterfaceDescription applicationInterface)'
  print '  bool deleteApplicationInterface(string appInterfaceId)'
  print '   getAllApplicationInterfaceNames(string gatewayId)'
  print '   getAllApplicationInterfaces(string gatewayId)'
  print '   getApplicationInputs(string appInterfaceId)'
  print '   getApplicationOutputs(string appInterfaceId)'
  print '   getAvailableAppInterfaceComputeResources(string appInterfaceId)'
  print '  string registerComputeResource(ComputeResourceDescription computeResourceDescription)'
  print '  ComputeResourceDescription getComputeResource(string computeResourceId)'
  print '   getAllComputeResourceNames()'
  print '  bool updateComputeResource(string computeResourceId, ComputeResourceDescription computeResourceDescription)'
  print '  bool deleteComputeResource(string computeResourceId)'
  print '  string addLocalSubmissionDetails(string computeResourceId, i32 priorityOrder, LOCALSubmission localSubmission)'
  print '  bool updateLocalSubmissionDetails(string jobSubmissionInterfaceId, LOCALSubmission localSubmission)'
  print '  LOCALSubmission getLocalJobSubmission(string jobSubmissionId)'
  print '  string addSSHJobSubmissionDetails(string computeResourceId, i32 priorityOrder, SSHJobSubmission sshJobSubmission)'
  print '  SSHJobSubmission getSSHJobSubmission(string jobSubmissionId)'
  print '  string addUNICOREJobSubmissionDetails(string computeResourceId, i32 priorityOrder, UnicoreJobSubmission unicoreJobSubmission)'
  print '  UnicoreJobSubmission getUnicoreJobSubmission(string jobSubmissionId)'
  print '  string addCloudJobSubmissionDetails(string computeResourceId, i32 priorityOrder, CloudJobSubmission cloudSubmission)'
  print '  CloudJobSubmission getCloudJobSubmission(string jobSubmissionId)'
  print '  bool updateSSHJobSubmissionDetails(string jobSubmissionInterfaceId, SSHJobSubmission sshJobSubmission)'
  print '  bool updateCloudJobSubmissionDetails(string jobSubmissionInterfaceId, CloudJobSubmission sshJobSubmission)'
  print '  bool updateUnicoreJobSubmissionDetails(string jobSubmissionInterfaceId, UnicoreJobSubmission unicoreJobSubmission)'
  print '  string addLocalDataMovementDetails(string computeResourceId, i32 priorityOrder, LOCALDataMovement localDataMovement)'
  print '  bool updateLocalDataMovementDetails(string dataMovementInterfaceId, LOCALDataMovement localDataMovement)'
  print '  LOCALDataMovement getLocalDataMovement(string dataMovementId)'
  print '  string addSCPDataMovementDetails(string computeResourceId, i32 priorityOrder, SCPDataMovement scpDataMovement)'
  print '  bool updateSCPDataMovementDetails(string dataMovementInterfaceId, SCPDataMovement scpDataMovement)'
  print '  SCPDataMovement getSCPDataMovement(string dataMovementId)'
  print '  string addUnicoreDataMovementDetails(string computeResourceId, i32 priorityOrder, UnicoreDataMovement unicoreDataMovement)'
  print '  bool updateUnicoreDataMovementDetails(string dataMovementInterfaceId, UnicoreDataMovement unicoreDataMovement)'
  print '  UnicoreDataMovement getUnicoreDataMovement(string dataMovementId)'
  print '  string addGridFTPDataMovementDetails(string computeResourceId, i32 priorityOrder, GridFTPDataMovement gridFTPDataMovement)'
  print '  bool updateGridFTPDataMovementDetails(string dataMovementInterfaceId, GridFTPDataMovement gridFTPDataMovement)'
  print '  GridFTPDataMovement getGridFTPDataMovement(string dataMovementId)'
  print '  bool changeJobSubmissionPriority(string jobSubmissionInterfaceId, i32 newPriorityOrder)'
  print '  bool changeDataMovementPriority(string dataMovementInterfaceId, i32 newPriorityOrder)'
  print '  bool changeJobSubmissionPriorities( jobSubmissionPriorityMap)'
  print '  bool changeDataMovementPriorities( dataMovementPriorityMap)'
  print '  bool deleteJobSubmissionInterface(string computeResourceId, string jobSubmissionInterfaceId)'
  print '  bool deleteDataMovementInterface(string computeResourceId, string dataMovementInterfaceId)'
  print '  string registerResourceJobManager(ResourceJobManager resourceJobManager)'
  print '  bool updateResourceJobManager(string resourceJobManagerId, ResourceJobManager updatedResourceJobManager)'
  print '  ResourceJobManager getResourceJobManager(string resourceJobManagerId)'
  print '  bool deleteResourceJobManager(string resourceJobManagerId)'
  print '  bool deleteBatchQueue(string computeResourceId, string queueName)'
  print '  string registerGatewayResourceProfile(GatewayResourceProfile gatewayResourceProfile)'
  print '  GatewayResourceProfile getGatewayResourceProfile(string gatewayID)'
  print '  bool updateGatewayResourceProfile(string gatewayID, GatewayResourceProfile gatewayResourceProfile)'
  print '  bool deleteGatewayResourceProfile(string gatewayID)'
  print '  bool addGatewayComputeResourcePreference(string gatewayID, string computeResourceId, ComputeResourcePreference computeResourcePreference)'
  print '  ComputeResourcePreference getGatewayComputeResourcePreference(string gatewayID, string computeResourceId)'
  print '   getAllGatewayComputeResourcePreferences(string gatewayID)'
  print '   getAllGatewayComputeResources()'
  print '  bool updateGatewayComputeResourcePreference(string gatewayID, string computeResourceId, ComputeResourcePreference computeResourcePreference)'
  print '  bool deleteGatewayComputeResourcePreference(string gatewayID, string computeResourceId)'
  print '   getAllWorkflows(string gatewayId)'
  print '  Workflow getWorkflow(string workflowTemplateId)'
  print '  void deleteWorkflow(string workflowTemplateId)'
  print '  string registerWorkflow(string gatewayId, Workflow workflow)'
  print '  void updateWorkflow(string workflowTemplateId, Workflow workflow)'
  print '  string getWorkflowTemplateId(string workflowName)'
  print '  bool isWorkflowExistWithName(string workflowName)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = Airavata.Client(protocol)
transport.open()

if cmd == 'getAPIVersion':
  if len(args) != 0:
    print 'getAPIVersion requires 0 args'
    sys.exit(1)
  pp.pprint(client.getAPIVersion())

elif cmd == 'addGateway':
  if len(args) != 1:
    print 'addGateway requires 1 args'
    sys.exit(1)
  pp.pprint(client.addGateway(eval(args[0]),))

elif cmd == 'updateGateway':
  if len(args) != 2:
    print 'updateGateway requires 2 args'
    sys.exit(1)
  pp.pprint(client.updateGateway(args[0],eval(args[1]),))

elif cmd == 'getGateway':
  if len(args) != 1:
    print 'getGateway requires 1 args'
    sys.exit(1)
  pp.pprint(client.getGateway(args[0],))

elif cmd == 'deleteGateway':
  if len(args) != 1:
    print 'deleteGateway requires 1 args'
    sys.exit(1)
  pp.pprint(client.deleteGateway(args[0],))

elif cmd == 'getAllGateways':
  if len(args) != 0:
    print 'getAllGateways requires 0 args'
    sys.exit(1)
  pp.pprint(client.getAllGateways())

elif cmd == 'isGatewayExist':
  if len(args) != 1:
    print 'isGatewayExist requires 1 args'
    sys.exit(1)
  pp.pprint(client.isGatewayExist(args[0],))

elif cmd == 'generateAndRegisterSSHKeys':
  if len(args) != 2:
    print 'generateAndRegisterSSHKeys requires 2 args'
    sys.exit(1)
  pp.pprint(client.generateAndRegisterSSHKeys(args[0],args[1],))

elif cmd == 'getSSHPubKey':
  if len(args) != 1:
    print 'getSSHPubKey requires 1 args'
    sys.exit(1)
  pp.pprint(client.getSSHPubKey(args[0],))

elif cmd == 'getAllUserSSHPubKeys':
  if len(args) != 1:
    print 'getAllUserSSHPubKeys requires 1 args'
    sys.exit(1)
  pp.pprint(client.getAllUserSSHPubKeys(args[0],))

elif cmd == 'createProject':
  if len(args) != 2:
    print 'createProject requires 2 args'
    sys.exit(1)
  pp.pprint(client.createProject(args[0],eval(args[1]),))

elif cmd == 'updateProject':
  if len(args) != 2:
    print 'updateProject requires 2 args'
    sys.exit(1)
  pp.pprint(client.updateProject(args[0],eval(args[1]),))

elif cmd == 'getProject':
  if len(args) != 1:
    print 'getProject requires 1 args'
    sys.exit(1)
  pp.pprint(client.getProject(args[0],))

elif cmd == 'deleteProject':
  if len(args) != 1:
    print 'deleteProject requires 1 args'
    sys.exit(1)
  pp.pprint(client.deleteProject(args[0],))

elif cmd == 'getAllUserProjects':
  if len(args) != 2:
    print 'getAllUserProjects requires 2 args'
    sys.exit(1)
  pp.pprint(client.getAllUserProjects(args[0],args[1],))

elif cmd == 'getAllUserProjectsWithPagination':
  if len(args) != 4:
    print 'getAllUserProjectsWithPagination requires 4 args'
    sys.exit(1)
  pp.pprint(client.getAllUserProjectsWithPagination(args[0],args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'searchProjectsByProjectName':
  if len(args) != 3:
    print 'searchProjectsByProjectName requires 3 args'
    sys.exit(1)
  pp.pprint(client.searchProjectsByProjectName(args[0],args[1],args[2],))

elif cmd == 'searchProjectsByProjectNameWithPagination':
  if len(args) != 5:
    print 'searchProjectsByProjectNameWithPagination requires 5 args'
    sys.exit(1)
  pp.pprint(client.searchProjectsByProjectNameWithPagination(args[0],args[1],args[2],eval(args[3]),eval(args[4]),))

elif cmd == 'searchProjectsByProjectDesc':
  if len(args) != 3:
    print 'searchProjectsByProjectDesc requires 3 args'
    sys.exit(1)
  pp.pprint(client.searchProjectsByProjectDesc(args[0],args[1],args[2],))

elif cmd == 'searchProjectsByProjectDescWithPagination':
  if len(args) != 5:
    print 'searchProjectsByProjectDescWithPagination requires 5 args'
    sys.exit(1)
  pp.pprint(client.searchProjectsByProjectDescWithPagination(args[0],args[1],args[2],eval(args[3]),eval(args[4]),))

elif cmd == 'searchExperimentsByName':
  if len(args) != 3:
    print 'searchExperimentsByName requires 3 args'
    sys.exit(1)
  pp.pprint(client.searchExperimentsByName(args[0],args[1],args[2],))

elif cmd == 'searchExperimentsByNameWithPagination':
  if len(args) != 5:
    print 'searchExperimentsByNameWithPagination requires 5 args'
    sys.exit(1)
  pp.pprint(client.searchExperimentsByNameWithPagination(args[0],args[1],args[2],eval(args[3]),eval(args[4]),))

elif cmd == 'searchExperimentsByDesc':
  if len(args) != 3:
    print 'searchExperimentsByDesc requires 3 args'
    sys.exit(1)
  pp.pprint(client.searchExperimentsByDesc(args[0],args[1],args[2],))

elif cmd == 'searchExperimentsByDescWithPagination':
  if len(args) != 5:
    print 'searchExperimentsByDescWithPagination requires 5 args'
    sys.exit(1)
  pp.pprint(client.searchExperimentsByDescWithPagination(args[0],args[1],args[2],eval(args[3]),eval(args[4]),))

elif cmd == 'searchExperimentsByApplication':
  if len(args) != 3:
    print 'searchExperimentsByApplication requires 3 args'
    sys.exit(1)
  pp.pprint(client.searchExperimentsByApplication(args[0],args[1],args[2],))

elif cmd == 'searchExperimentsByApplicationWithPagination':
  if len(args) != 5:
    print 'searchExperimentsByApplicationWithPagination requires 5 args'
    sys.exit(1)
  pp.pprint(client.searchExperimentsByApplicationWithPagination(args[0],args[1],args[2],eval(args[3]),eval(args[4]),))

elif cmd == 'searchExperimentsByStatus':
  if len(args) != 3:
    print 'searchExperimentsByStatus requires 3 args'
    sys.exit(1)
  pp.pprint(client.searchExperimentsByStatus(args[0],args[1],eval(args[2]),))

elif cmd == 'searchExperimentsByStatusWithPagination':
  if len(args) != 5:
    print 'searchExperimentsByStatusWithPagination requires 5 args'
    sys.exit(1)
  pp.pprint(client.searchExperimentsByStatusWithPagination(args[0],args[1],eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'searchExperimentsByCreationTime':
  if len(args) != 4:
    print 'searchExperimentsByCreationTime requires 4 args'
    sys.exit(1)
  pp.pprint(client.searchExperimentsByCreationTime(args[0],args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'searchExperimentsByCreationTimeWithPagination':
  if len(args) != 6:
    print 'searchExperimentsByCreationTimeWithPagination requires 6 args'
    sys.exit(1)
  pp.pprint(client.searchExperimentsByCreationTimeWithPagination(args[0],args[1],eval(args[2]),eval(args[3]),eval(args[4]),eval(args[5]),))

elif cmd == 'getAllExperimentsInProject':
  if len(args) != 1:
    print 'getAllExperimentsInProject requires 1 args'
    sys.exit(1)
  pp.pprint(client.getAllExperimentsInProject(args[0],))

elif cmd == 'getAllExperimentsInProjectWithPagination':
  if len(args) != 3:
    print 'getAllExperimentsInProjectWithPagination requires 3 args'
    sys.exit(1)
  pp.pprint(client.getAllExperimentsInProjectWithPagination(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'getAllUserExperiments':
  if len(args) != 2:
    print 'getAllUserExperiments requires 2 args'
    sys.exit(1)
  pp.pprint(client.getAllUserExperiments(args[0],args[1],))

elif cmd == 'getAllUserExperimentsWithPagination':
  if len(args) != 4:
    print 'getAllUserExperimentsWithPagination requires 4 args'
    sys.exit(1)
  pp.pprint(client.getAllUserExperimentsWithPagination(args[0],args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'createExperiment':
  if len(args) != 2:
    print 'createExperiment requires 2 args'
    sys.exit(1)
  pp.pprint(client.createExperiment(args[0],eval(args[1]),))

elif cmd == 'getExperiment':
  if len(args) != 1:
    print 'getExperiment requires 1 args'
    sys.exit(1)
  pp.pprint(client.getExperiment(args[0],))

elif cmd == 'updateExperiment':
  if len(args) != 2:
    print 'updateExperiment requires 2 args'
    sys.exit(1)
  pp.pprint(client.updateExperiment(args[0],eval(args[1]),))

elif cmd == 'updateExperimentConfiguration':
  if len(args) != 2:
    print 'updateExperimentConfiguration requires 2 args'
    sys.exit(1)
  pp.pprint(client.updateExperimentConfiguration(args[0],eval(args[1]),))

elif cmd == 'updateResourceScheduleing':
  if len(args) != 2:
    print 'updateResourceScheduleing requires 2 args'
    sys.exit(1)
  pp.pprint(client.updateResourceScheduleing(args[0],eval(args[1]),))

elif cmd == 'validateExperiment':
  if len(args) != 1:
    print 'validateExperiment requires 1 args'
    sys.exit(1)
  pp.pprint(client.validateExperiment(args[0],))

elif cmd == 'launchExperiment':
  if len(args) != 2:
    print 'launchExperiment requires 2 args'
    sys.exit(1)
  pp.pprint(client.launchExperiment(args[0],args[1],))

elif cmd == 'getExperimentStatus':
  if len(args) != 1:
    print 'getExperimentStatus requires 1 args'
    sys.exit(1)
  pp.pprint(client.getExperimentStatus(args[0],))

elif cmd == 'getExperimentOutputs':
  if len(args) != 1:
    print 'getExperimentOutputs requires 1 args'
    sys.exit(1)
  pp.pprint(client.getExperimentOutputs(args[0],))

elif cmd == 'getIntermediateOutputs':
  if len(args) != 1:
    print 'getIntermediateOutputs requires 1 args'
    sys.exit(1)
  pp.pprint(client.getIntermediateOutputs(args[0],))

elif cmd == 'getJobStatuses':
  if len(args) != 1:
    print 'getJobStatuses requires 1 args'
    sys.exit(1)
  pp.pprint(client.getJobStatuses(args[0],))

elif cmd == 'getJobDetails':
  if len(args) != 1:
    print 'getJobDetails requires 1 args'
    sys.exit(1)
  pp.pprint(client.getJobDetails(args[0],))

elif cmd == 'getDataTransferDetails':
  if len(args) != 1:
    print 'getDataTransferDetails requires 1 args'
    sys.exit(1)
  pp.pprint(client.getDataTransferDetails(args[0],))

elif cmd == 'cloneExperiment':
  if len(args) != 2:
    print 'cloneExperiment requires 2 args'
    sys.exit(1)
  pp.pprint(client.cloneExperiment(args[0],args[1],))

elif cmd == 'terminateExperiment':
  if len(args) != 2:
    print 'terminateExperiment requires 2 args'
    sys.exit(1)
  pp.pprint(client.terminateExperiment(args[0],args[1],))

elif cmd == 'registerApplicationModule':
  if len(args) != 2:
    print 'registerApplicationModule requires 2 args'
    sys.exit(1)
  pp.pprint(client.registerApplicationModule(args[0],eval(args[1]),))

elif cmd == 'getApplicationModule':
  if len(args) != 1:
    print 'getApplicationModule requires 1 args'
    sys.exit(1)
  pp.pprint(client.getApplicationModule(args[0],))

elif cmd == 'updateApplicationModule':
  if len(args) != 2:
    print 'updateApplicationModule requires 2 args'
    sys.exit(1)
  pp.pprint(client.updateApplicationModule(args[0],eval(args[1]),))

elif cmd == 'getAllAppModules':
  if len(args) != 1:
    print 'getAllAppModules requires 1 args'
    sys.exit(1)
  pp.pprint(client.getAllAppModules(args[0],))

elif cmd == 'deleteApplicationModule':
  if len(args) != 1:
    print 'deleteApplicationModule requires 1 args'
    sys.exit(1)
  pp.pprint(client.deleteApplicationModule(args[0],))

elif cmd == 'registerApplicationDeployment':
  if len(args) != 2:
    print 'registerApplicationDeployment requires 2 args'
    sys.exit(1)
  pp.pprint(client.registerApplicationDeployment(args[0],eval(args[1]),))

elif cmd == 'getApplicationDeployment':
  if len(args) != 1:
    print 'getApplicationDeployment requires 1 args'
    sys.exit(1)
  pp.pprint(client.getApplicationDeployment(args[0],))

elif cmd == 'updateApplicationDeployment':
  if len(args) != 2:
    print 'updateApplicationDeployment requires 2 args'
    sys.exit(1)
  pp.pprint(client.updateApplicationDeployment(args[0],eval(args[1]),))

elif cmd == 'deleteApplicationDeployment':
  if len(args) != 1:
    print 'deleteApplicationDeployment requires 1 args'
    sys.exit(1)
  pp.pprint(client.deleteApplicationDeployment(args[0],))

elif cmd == 'getAllApplicationDeployments':
  if len(args) != 1:
    print 'getAllApplicationDeployments requires 1 args'
    sys.exit(1)
  pp.pprint(client.getAllApplicationDeployments(args[0],))

elif cmd == 'getAppModuleDeployedResources':
  if len(args) != 1:
    print 'getAppModuleDeployedResources requires 1 args'
    sys.exit(1)
  pp.pprint(client.getAppModuleDeployedResources(args[0],))

elif cmd == 'registerApplicationInterface':
  if len(args) != 2:
    print 'registerApplicationInterface requires 2 args'
    sys.exit(1)
  pp.pprint(client.registerApplicationInterface(args[0],eval(args[1]),))

elif cmd == 'getApplicationInterface':
  if len(args) != 1:
    print 'getApplicationInterface requires 1 args'
    sys.exit(1)
  pp.pprint(client.getApplicationInterface(args[0],))

elif cmd == 'updateApplicationInterface':
  if len(args) != 2:
    print 'updateApplicationInterface requires 2 args'
    sys.exit(1)
  pp.pprint(client.updateApplicationInterface(args[0],eval(args[1]),))

elif cmd == 'deleteApplicationInterface':
  if len(args) != 1:
    print 'deleteApplicationInterface requires 1 args'
    sys.exit(1)
  pp.pprint(client.deleteApplicationInterface(args[0],))

elif cmd == 'getAllApplicationInterfaceNames':
  if len(args) != 1:
    print 'getAllApplicationInterfaceNames requires 1 args'
    sys.exit(1)
  pp.pprint(client.getAllApplicationInterfaceNames(args[0],))

elif cmd == 'getAllApplicationInterfaces':
  if len(args) != 1:
    print 'getAllApplicationInterfaces requires 1 args'
    sys.exit(1)
  pp.pprint(client.getAllApplicationInterfaces(args[0],))

elif cmd == 'getApplicationInputs':
  if len(args) != 1:
    print 'getApplicationInputs requires 1 args'
    sys.exit(1)
  pp.pprint(client.getApplicationInputs(args[0],))

elif cmd == 'getApplicationOutputs':
  if len(args) != 1:
    print 'getApplicationOutputs requires 1 args'
    sys.exit(1)
  pp.pprint(client.getApplicationOutputs(args[0],))

elif cmd == 'getAvailableAppInterfaceComputeResources':
  if len(args) != 1:
    print 'getAvailableAppInterfaceComputeResources requires 1 args'
    sys.exit(1)
  pp.pprint(client.getAvailableAppInterfaceComputeResources(args[0],))

elif cmd == 'registerComputeResource':
  if len(args) != 1:
    print 'registerComputeResource requires 1 args'
    sys.exit(1)
  pp.pprint(client.registerComputeResource(eval(args[0]),))

elif cmd == 'getComputeResource':
  if len(args) != 1:
    print 'getComputeResource requires 1 args'
    sys.exit(1)
  pp.pprint(client.getComputeResource(args[0],))

elif cmd == 'getAllComputeResourceNames':
  if len(args) != 0:
    print 'getAllComputeResourceNames requires 0 args'
    sys.exit(1)
  pp.pprint(client.getAllComputeResourceNames())

elif cmd == 'updateComputeResource':
  if len(args) != 2:
    print 'updateComputeResource requires 2 args'
    sys.exit(1)
  pp.pprint(client.updateComputeResource(args[0],eval(args[1]),))

elif cmd == 'deleteComputeResource':
  if len(args) != 1:
    print 'deleteComputeResource requires 1 args'
    sys.exit(1)
  pp.pprint(client.deleteComputeResource(args[0],))

elif cmd == 'addLocalSubmissionDetails':
  if len(args) != 3:
    print 'addLocalSubmissionDetails requires 3 args'
    sys.exit(1)
  pp.pprint(client.addLocalSubmissionDetails(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'updateLocalSubmissionDetails':
  if len(args) != 2:
    print 'updateLocalSubmissionDetails requires 2 args'
    sys.exit(1)
  pp.pprint(client.updateLocalSubmissionDetails(args[0],eval(args[1]),))

elif cmd == 'getLocalJobSubmission':
  if len(args) != 1:
    print 'getLocalJobSubmission requires 1 args'
    sys.exit(1)
  pp.pprint(client.getLocalJobSubmission(args[0],))

elif cmd == 'addSSHJobSubmissionDetails':
  if len(args) != 3:
    print 'addSSHJobSubmissionDetails requires 3 args'
    sys.exit(1)
  pp.pprint(client.addSSHJobSubmissionDetails(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'getSSHJobSubmission':
  if len(args) != 1:
    print 'getSSHJobSubmission requires 1 args'
    sys.exit(1)
  pp.pprint(client.getSSHJobSubmission(args[0],))

elif cmd == 'addUNICOREJobSubmissionDetails':
  if len(args) != 3:
    print 'addUNICOREJobSubmissionDetails requires 3 args'
    sys.exit(1)
  pp.pprint(client.addUNICOREJobSubmissionDetails(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'getUnicoreJobSubmission':
  if len(args) != 1:
    print 'getUnicoreJobSubmission requires 1 args'
    sys.exit(1)
  pp.pprint(client.getUnicoreJobSubmission(args[0],))

elif cmd == 'addCloudJobSubmissionDetails':
  if len(args) != 3:
    print 'addCloudJobSubmissionDetails requires 3 args'
    sys.exit(1)
  pp.pprint(client.addCloudJobSubmissionDetails(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'getCloudJobSubmission':
  if len(args) != 1:
    print 'getCloudJobSubmission requires 1 args'
    sys.exit(1)
  pp.pprint(client.getCloudJobSubmission(args[0],))

elif cmd == 'updateSSHJobSubmissionDetails':
  if len(args) != 2:
    print 'updateSSHJobSubmissionDetails requires 2 args'
    sys.exit(1)
  pp.pprint(client.updateSSHJobSubmissionDetails(args[0],eval(args[1]),))

elif cmd == 'updateCloudJobSubmissionDetails':
  if len(args) != 2:
    print 'updateCloudJobSubmissionDetails requires 2 args'
    sys.exit(1)
  pp.pprint(client.updateCloudJobSubmissionDetails(args[0],eval(args[1]),))

elif cmd == 'updateUnicoreJobSubmissionDetails':
  if len(args) != 2:
    print 'updateUnicoreJobSubmissionDetails requires 2 args'
    sys.exit(1)
  pp.pprint(client.updateUnicoreJobSubmissionDetails(args[0],eval(args[1]),))

elif cmd == 'addLocalDataMovementDetails':
  if len(args) != 3:
    print 'addLocalDataMovementDetails requires 3 args'
    sys.exit(1)
  pp.pprint(client.addLocalDataMovementDetails(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'updateLocalDataMovementDetails':
  if len(args) != 2:
    print 'updateLocalDataMovementDetails requires 2 args'
    sys.exit(1)
  pp.pprint(client.updateLocalDataMovementDetails(args[0],eval(args[1]),))

elif cmd == 'getLocalDataMovement':
  if len(args) != 1:
    print 'getLocalDataMovement requires 1 args'
    sys.exit(1)
  pp.pprint(client.getLocalDataMovement(args[0],))

elif cmd == 'addSCPDataMovementDetails':
  if len(args) != 3:
    print 'addSCPDataMovementDetails requires 3 args'
    sys.exit(1)
  pp.pprint(client.addSCPDataMovementDetails(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'updateSCPDataMovementDetails':
  if len(args) != 2:
    print 'updateSCPDataMovementDetails requires 2 args'
    sys.exit(1)
  pp.pprint(client.updateSCPDataMovementDetails(args[0],eval(args[1]),))

elif cmd == 'getSCPDataMovement':
  if len(args) != 1:
    print 'getSCPDataMovement requires 1 args'
    sys.exit(1)
  pp.pprint(client.getSCPDataMovement(args[0],))

elif cmd == 'addUnicoreDataMovementDetails':
  if len(args) != 3:
    print 'addUnicoreDataMovementDetails requires 3 args'
    sys.exit(1)
  pp.pprint(client.addUnicoreDataMovementDetails(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'updateUnicoreDataMovementDetails':
  if len(args) != 2:
    print 'updateUnicoreDataMovementDetails requires 2 args'
    sys.exit(1)
  pp.pprint(client.updateUnicoreDataMovementDetails(args[0],eval(args[1]),))

elif cmd == 'getUnicoreDataMovement':
  if len(args) != 1:
    print 'getUnicoreDataMovement requires 1 args'
    sys.exit(1)
  pp.pprint(client.getUnicoreDataMovement(args[0],))

elif cmd == 'addGridFTPDataMovementDetails':
  if len(args) != 3:
    print 'addGridFTPDataMovementDetails requires 3 args'
    sys.exit(1)
  pp.pprint(client.addGridFTPDataMovementDetails(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'updateGridFTPDataMovementDetails':
  if len(args) != 2:
    print 'updateGridFTPDataMovementDetails requires 2 args'
    sys.exit(1)
  pp.pprint(client.updateGridFTPDataMovementDetails(args[0],eval(args[1]),))

elif cmd == 'getGridFTPDataMovement':
  if len(args) != 1:
    print 'getGridFTPDataMovement requires 1 args'
    sys.exit(1)
  pp.pprint(client.getGridFTPDataMovement(args[0],))

elif cmd == 'changeJobSubmissionPriority':
  if len(args) != 2:
    print 'changeJobSubmissionPriority requires 2 args'
    sys.exit(1)
  pp.pprint(client.changeJobSubmissionPriority(args[0],eval(args[1]),))

elif cmd == 'changeDataMovementPriority':
  if len(args) != 2:
    print 'changeDataMovementPriority requires 2 args'
    sys.exit(1)
  pp.pprint(client.changeDataMovementPriority(args[0],eval(args[1]),))

elif cmd == 'changeJobSubmissionPriorities':
  if len(args) != 1:
    print 'changeJobSubmissionPriorities requires 1 args'
    sys.exit(1)
  pp.pprint(client.changeJobSubmissionPriorities(eval(args[0]),))

elif cmd == 'changeDataMovementPriorities':
  if len(args) != 1:
    print 'changeDataMovementPriorities requires 1 args'
    sys.exit(1)
  pp.pprint(client.changeDataMovementPriorities(eval(args[0]),))

elif cmd == 'deleteJobSubmissionInterface':
  if len(args) != 2:
    print 'deleteJobSubmissionInterface requires 2 args'
    sys.exit(1)
  pp.pprint(client.deleteJobSubmissionInterface(args[0],args[1],))

elif cmd == 'deleteDataMovementInterface':
  if len(args) != 2:
    print 'deleteDataMovementInterface requires 2 args'
    sys.exit(1)
  pp.pprint(client.deleteDataMovementInterface(args[0],args[1],))

elif cmd == 'registerResourceJobManager':
  if len(args) != 1:
    print 'registerResourceJobManager requires 1 args'
    sys.exit(1)
  pp.pprint(client.registerResourceJobManager(eval(args[0]),))

elif cmd == 'updateResourceJobManager':
  if len(args) != 2:
    print 'updateResourceJobManager requires 2 args'
    sys.exit(1)
  pp.pprint(client.updateResourceJobManager(args[0],eval(args[1]),))

elif cmd == 'getResourceJobManager':
  if len(args) != 1:
    print 'getResourceJobManager requires 1 args'
    sys.exit(1)
  pp.pprint(client.getResourceJobManager(args[0],))

elif cmd == 'deleteResourceJobManager':
  if len(args) != 1:
    print 'deleteResourceJobManager requires 1 args'
    sys.exit(1)
  pp.pprint(client.deleteResourceJobManager(args[0],))

elif cmd == 'deleteBatchQueue':
  if len(args) != 2:
    print 'deleteBatchQueue requires 2 args'
    sys.exit(1)
  pp.pprint(client.deleteBatchQueue(args[0],args[1],))

elif cmd == 'registerGatewayResourceProfile':
  if len(args) != 1:
    print 'registerGatewayResourceProfile requires 1 args'
    sys.exit(1)
  pp.pprint(client.registerGatewayResourceProfile(eval(args[0]),))

elif cmd == 'getGatewayResourceProfile':
  if len(args) != 1:
    print 'getGatewayResourceProfile requires 1 args'
    sys.exit(1)
  pp.pprint(client.getGatewayResourceProfile(args[0],))

elif cmd == 'updateGatewayResourceProfile':
  if len(args) != 2:
    print 'updateGatewayResourceProfile requires 2 args'
    sys.exit(1)
  pp.pprint(client.updateGatewayResourceProfile(args[0],eval(args[1]),))

elif cmd == 'deleteGatewayResourceProfile':
  if len(args) != 1:
    print 'deleteGatewayResourceProfile requires 1 args'
    sys.exit(1)
  pp.pprint(client.deleteGatewayResourceProfile(args[0],))

elif cmd == 'addGatewayComputeResourcePreference':
  if len(args) != 3:
    print 'addGatewayComputeResourcePreference requires 3 args'
    sys.exit(1)
  pp.pprint(client.addGatewayComputeResourcePreference(args[0],args[1],eval(args[2]),))

elif cmd == 'getGatewayComputeResourcePreference':
  if len(args) != 2:
    print 'getGatewayComputeResourcePreference requires 2 args'
    sys.exit(1)
  pp.pprint(client.getGatewayComputeResourcePreference(args[0],args[1],))

elif cmd == 'getAllGatewayComputeResourcePreferences':
  if len(args) != 1:
    print 'getAllGatewayComputeResourcePreferences requires 1 args'
    sys.exit(1)
  pp.pprint(client.getAllGatewayComputeResourcePreferences(args[0],))

elif cmd == 'getAllGatewayComputeResources':
  if len(args) != 0:
    print 'getAllGatewayComputeResources requires 0 args'
    sys.exit(1)
  pp.pprint(client.getAllGatewayComputeResources())

elif cmd == 'updateGatewayComputeResourcePreference':
  if len(args) != 3:
    print 'updateGatewayComputeResourcePreference requires 3 args'
    sys.exit(1)
  pp.pprint(client.updateGatewayComputeResourcePreference(args[0],args[1],eval(args[2]),))

elif cmd == 'deleteGatewayComputeResourcePreference':
  if len(args) != 2:
    print 'deleteGatewayComputeResourcePreference requires 2 args'
    sys.exit(1)
  pp.pprint(client.deleteGatewayComputeResourcePreference(args[0],args[1],))

elif cmd == 'getAllWorkflows':
  if len(args) != 1:
    print 'getAllWorkflows requires 1 args'
    sys.exit(1)
  pp.pprint(client.getAllWorkflows(args[0],))

elif cmd == 'getWorkflow':
  if len(args) != 1:
    print 'getWorkflow requires 1 args'
    sys.exit(1)
  pp.pprint(client.getWorkflow(args[0],))

elif cmd == 'deleteWorkflow':
  if len(args) != 1:
    print 'deleteWorkflow requires 1 args'
    sys.exit(1)
  pp.pprint(client.deleteWorkflow(args[0],))

elif cmd == 'registerWorkflow':
  if len(args) != 2:
    print 'registerWorkflow requires 2 args'
    sys.exit(1)
  pp.pprint(client.registerWorkflow(args[0],eval(args[1]),))

elif cmd == 'updateWorkflow':
  if len(args) != 2:
    print 'updateWorkflow requires 2 args'
    sys.exit(1)
  pp.pprint(client.updateWorkflow(args[0],eval(args[1]),))

elif cmd == 'getWorkflowTemplateId':
  if len(args) != 1:
    print 'getWorkflowTemplateId requires 1 args'
    sys.exit(1)
  pp.pprint(client.getWorkflowTemplateId(args[0],))

elif cmd == 'isWorkflowExistWithName':
  if len(args) != 1:
    print 'isWorkflowExistWithName requires 1 args'
    sys.exit(1)
  pp.pprint(client.isWorkflowExistWithName(args[0],))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
