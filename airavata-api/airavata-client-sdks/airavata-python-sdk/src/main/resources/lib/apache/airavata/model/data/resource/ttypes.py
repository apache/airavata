#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class DataResourceModel:
  """
  Attributes:
   - resourceId
   - resourceName
   - resourceDescription
   - resourceSize
   - creationTime
   - lastModifiedTime
   - replicaLocations
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'resourceId', None, None, ), # 1
    (2, TType.STRING, 'resourceName', None, None, ), # 2
    (3, TType.STRING, 'resourceDescription', None, None, ), # 3
    (4, TType.I32, 'resourceSize', None, None, ), # 4
    (5, TType.I64, 'creationTime', None, None, ), # 5
    (6, TType.I64, 'lastModifiedTime', None, None, ), # 6
    (7, TType.LIST, 'replicaLocations', (TType.STRUCT,(DataReplicaLocationModel, DataReplicaLocationModel.thrift_spec)), None, ), # 7
  )

  def __init__(self, resourceId=None, resourceName=None, resourceDescription=None, resourceSize=None, creationTime=None, lastModifiedTime=None, replicaLocations=None,):
    self.resourceId = resourceId
    self.resourceName = resourceName
    self.resourceDescription = resourceDescription
    self.resourceSize = resourceSize
    self.creationTime = creationTime
    self.lastModifiedTime = lastModifiedTime
    self.replicaLocations = replicaLocations

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.resourceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.resourceName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.resourceDescription = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.resourceSize = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.creationTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.lastModifiedTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.replicaLocations = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = DataReplicaLocationModel()
            _elem5.read(iprot)
            self.replicaLocations.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DataResourceModel')
    if self.resourceId is not None:
      oprot.writeFieldBegin('resourceId', TType.STRING, 1)
      oprot.writeString(self.resourceId)
      oprot.writeFieldEnd()
    if self.resourceName is not None:
      oprot.writeFieldBegin('resourceName', TType.STRING, 2)
      oprot.writeString(self.resourceName)
      oprot.writeFieldEnd()
    if self.resourceDescription is not None:
      oprot.writeFieldBegin('resourceDescription', TType.STRING, 3)
      oprot.writeString(self.resourceDescription)
      oprot.writeFieldEnd()
    if self.resourceSize is not None:
      oprot.writeFieldBegin('resourceSize', TType.I32, 4)
      oprot.writeI32(self.resourceSize)
      oprot.writeFieldEnd()
    if self.creationTime is not None:
      oprot.writeFieldBegin('creationTime', TType.I64, 5)
      oprot.writeI64(self.creationTime)
      oprot.writeFieldEnd()
    if self.lastModifiedTime is not None:
      oprot.writeFieldBegin('lastModifiedTime', TType.I64, 6)
      oprot.writeI64(self.lastModifiedTime)
      oprot.writeFieldEnd()
    if self.replicaLocations is not None:
      oprot.writeFieldBegin('replicaLocations', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.replicaLocations))
      for iter6 in self.replicaLocations:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.resourceId)
    value = (value * 31) ^ hash(self.resourceName)
    value = (value * 31) ^ hash(self.resourceDescription)
    value = (value * 31) ^ hash(self.resourceSize)
    value = (value * 31) ^ hash(self.creationTime)
    value = (value * 31) ^ hash(self.lastModifiedTime)
    value = (value * 31) ^ hash(self.replicaLocations)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DataReplicaLocationModel:
  """
  Attributes:
   - replicaId
   - resourceId
   - replicaName
   - replicaDescription
   - creationTime
   - lastModifiedTime
   - dataLocations
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'replicaId', None, None, ), # 1
    (2, TType.STRING, 'resourceId', None, None, ), # 2
    (3, TType.STRING, 'replicaName', None, None, ), # 3
    (4, TType.STRING, 'replicaDescription', None, None, ), # 4
    (5, TType.I64, 'creationTime', None, None, ), # 5
    (6, TType.I64, 'lastModifiedTime', None, None, ), # 6
    (7, TType.LIST, 'dataLocations', (TType.STRING,None), None, ), # 7
  )

  def __init__(self, replicaId=None, resourceId=None, replicaName=None, replicaDescription=None, creationTime=None, lastModifiedTime=None, dataLocations=None,):
    self.replicaId = replicaId
    self.resourceId = resourceId
    self.replicaName = replicaName
    self.replicaDescription = replicaDescription
    self.creationTime = creationTime
    self.lastModifiedTime = lastModifiedTime
    self.dataLocations = dataLocations

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.replicaId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.resourceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.replicaName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.replicaDescription = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.creationTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.lastModifiedTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.dataLocations = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readString();
            self.dataLocations.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DataReplicaLocationModel')
    if self.replicaId is not None:
      oprot.writeFieldBegin('replicaId', TType.STRING, 1)
      oprot.writeString(self.replicaId)
      oprot.writeFieldEnd()
    if self.resourceId is not None:
      oprot.writeFieldBegin('resourceId', TType.STRING, 2)
      oprot.writeString(self.resourceId)
      oprot.writeFieldEnd()
    if self.replicaName is not None:
      oprot.writeFieldBegin('replicaName', TType.STRING, 3)
      oprot.writeString(self.replicaName)
      oprot.writeFieldEnd()
    if self.replicaDescription is not None:
      oprot.writeFieldBegin('replicaDescription', TType.STRING, 4)
      oprot.writeString(self.replicaDescription)
      oprot.writeFieldEnd()
    if self.creationTime is not None:
      oprot.writeFieldBegin('creationTime', TType.I64, 5)
      oprot.writeI64(self.creationTime)
      oprot.writeFieldEnd()
    if self.lastModifiedTime is not None:
      oprot.writeFieldBegin('lastModifiedTime', TType.I64, 6)
      oprot.writeI64(self.lastModifiedTime)
      oprot.writeFieldEnd()
    if self.dataLocations is not None:
      oprot.writeFieldBegin('dataLocations', TType.LIST, 7)
      oprot.writeListBegin(TType.STRING, len(self.dataLocations))
      for iter13 in self.dataLocations:
        oprot.writeString(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.replicaId)
    value = (value * 31) ^ hash(self.resourceId)
    value = (value * 31) ^ hash(self.replicaName)
    value = (value * 31) ^ hash(self.replicaDescription)
    value = (value * 31) ^ hash(self.creationTime)
    value = (value * 31) ^ hash(self.lastModifiedTime)
    value = (value * 31) ^ hash(self.dataLocations)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
