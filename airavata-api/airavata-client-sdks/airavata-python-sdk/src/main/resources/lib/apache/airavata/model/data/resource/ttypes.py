#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class ReplicaLocationCategory:
  GATEWAY_DATA_STORE = 0
  COMPUTE_RESOURCE = 1
  LONG_TERM_STORAGE_RESOURCE = 2
  OTHER = 3

  _VALUES_TO_NAMES = {
    0: "GATEWAY_DATA_STORE",
    1: "COMPUTE_RESOURCE",
    2: "LONG_TERM_STORAGE_RESOURCE",
    3: "OTHER",
  }

  _NAMES_TO_VALUES = {
    "GATEWAY_DATA_STORE": 0,
    "COMPUTE_RESOURCE": 1,
    "LONG_TERM_STORAGE_RESOURCE": 2,
    "OTHER": 3,
  }

class ReplicaPersistentType:
  TRANSIENT = 0
  PERSISTENT = 1

  _VALUES_TO_NAMES = {
    0: "TRANSIENT",
    1: "PERSISTENT",
  }

  _NAMES_TO_VALUES = {
    "TRANSIENT": 0,
    "PERSISTENT": 1,
  }


class DataResourceModel:
  """
  Attributes:
   - resourceId
   - resourceName
   - resourceDescription
   - ownerName
   - resourceSize
   - creationTime
   - lastModifiedTime
   - resourceMetadata
   - dataReplicaLocations
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'resourceId', None, None, ), # 1
    (2, TType.STRING, 'resourceName', None, None, ), # 2
    (3, TType.STRING, 'resourceDescription', None, None, ), # 3
    (4, TType.STRING, 'ownerName', None, None, ), # 4
    (5, TType.I32, 'resourceSize', None, None, ), # 5
    (6, TType.I64, 'creationTime', None, None, ), # 6
    (7, TType.I64, 'lastModifiedTime', None, None, ), # 7
    (8, TType.MAP, 'resourceMetadata', (TType.STRING,None,TType.STRING,None), None, ), # 8
    (9, TType.LIST, 'dataReplicaLocations', (TType.STRUCT,(DataReplicaLocationModel, DataReplicaLocationModel.thrift_spec)), None, ), # 9
  )

  def __init__(self, resourceId=None, resourceName=None, resourceDescription=None, ownerName=None, resourceSize=None, creationTime=None, lastModifiedTime=None, resourceMetadata=None, dataReplicaLocations=None,):
    self.resourceId = resourceId
    self.resourceName = resourceName
    self.resourceDescription = resourceDescription
    self.ownerName = ownerName
    self.resourceSize = resourceSize
    self.creationTime = creationTime
    self.lastModifiedTime = lastModifiedTime
    self.resourceMetadata = resourceMetadata
    self.dataReplicaLocations = dataReplicaLocations

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.resourceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.resourceName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.resourceDescription = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.ownerName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.resourceSize = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.creationTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.lastModifiedTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.MAP:
          self.resourceMetadata = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin()
          for _i4 in xrange(_size0):
            _key5 = iprot.readString();
            _val6 = iprot.readString();
            self.resourceMetadata[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.dataReplicaLocations = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = DataReplicaLocationModel()
            _elem12.read(iprot)
            self.dataReplicaLocations.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DataResourceModel')
    if self.resourceId is not None:
      oprot.writeFieldBegin('resourceId', TType.STRING, 1)
      oprot.writeString(self.resourceId)
      oprot.writeFieldEnd()
    if self.resourceName is not None:
      oprot.writeFieldBegin('resourceName', TType.STRING, 2)
      oprot.writeString(self.resourceName)
      oprot.writeFieldEnd()
    if self.resourceDescription is not None:
      oprot.writeFieldBegin('resourceDescription', TType.STRING, 3)
      oprot.writeString(self.resourceDescription)
      oprot.writeFieldEnd()
    if self.ownerName is not None:
      oprot.writeFieldBegin('ownerName', TType.STRING, 4)
      oprot.writeString(self.ownerName)
      oprot.writeFieldEnd()
    if self.resourceSize is not None:
      oprot.writeFieldBegin('resourceSize', TType.I32, 5)
      oprot.writeI32(self.resourceSize)
      oprot.writeFieldEnd()
    if self.creationTime is not None:
      oprot.writeFieldBegin('creationTime', TType.I64, 6)
      oprot.writeI64(self.creationTime)
      oprot.writeFieldEnd()
    if self.lastModifiedTime is not None:
      oprot.writeFieldBegin('lastModifiedTime', TType.I64, 7)
      oprot.writeI64(self.lastModifiedTime)
      oprot.writeFieldEnd()
    if self.resourceMetadata is not None:
      oprot.writeFieldBegin('resourceMetadata', TType.MAP, 8)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.resourceMetadata))
      for kiter13,viter14 in self.resourceMetadata.items():
        oprot.writeString(kiter13)
        oprot.writeString(viter14)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.dataReplicaLocations is not None:
      oprot.writeFieldBegin('dataReplicaLocations', TType.LIST, 9)
      oprot.writeListBegin(TType.STRUCT, len(self.dataReplicaLocations))
      for iter15 in self.dataReplicaLocations:
        iter15.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.resourceId)
    value = (value * 31) ^ hash(self.resourceName)
    value = (value * 31) ^ hash(self.resourceDescription)
    value = (value * 31) ^ hash(self.ownerName)
    value = (value * 31) ^ hash(self.resourceSize)
    value = (value * 31) ^ hash(self.creationTime)
    value = (value * 31) ^ hash(self.lastModifiedTime)
    value = (value * 31) ^ hash(self.resourceMetadata)
    value = (value * 31) ^ hash(self.dataReplicaLocations)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DataReplicaLocationModel:
  """
  Attributes:
   - replicaId
   - resourceId
   - replicaName
   - replicaDescription
   - creationTime
   - lastModifiedTime
   - replicaLocationCategory
   - replicaPersistentType
   - dataLocations
   - replicaMetadata
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'replicaId', None, None, ), # 1
    (2, TType.STRING, 'resourceId', None, None, ), # 2
    (3, TType.STRING, 'replicaName', None, None, ), # 3
    (4, TType.STRING, 'replicaDescription', None, None, ), # 4
    (5, TType.I64, 'creationTime', None, None, ), # 5
    (6, TType.I64, 'lastModifiedTime', None, None, ), # 6
    (7, TType.I32, 'replicaLocationCategory', None, None, ), # 7
    (8, TType.I32, 'replicaPersistentType', None, None, ), # 8
    (9, TType.LIST, 'dataLocations', (TType.STRING,None), None, ), # 9
    (10, TType.MAP, 'replicaMetadata', (TType.STRING,None,TType.STRING,None), None, ), # 10
  )

  def __init__(self, replicaId=None, resourceId=None, replicaName=None, replicaDescription=None, creationTime=None, lastModifiedTime=None, replicaLocationCategory=None, replicaPersistentType=None, dataLocations=None, replicaMetadata=None,):
    self.replicaId = replicaId
    self.resourceId = resourceId
    self.replicaName = replicaName
    self.replicaDescription = replicaDescription
    self.creationTime = creationTime
    self.lastModifiedTime = lastModifiedTime
    self.replicaLocationCategory = replicaLocationCategory
    self.replicaPersistentType = replicaPersistentType
    self.dataLocations = dataLocations
    self.replicaMetadata = replicaMetadata

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.replicaId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.resourceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.replicaName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.replicaDescription = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.creationTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.lastModifiedTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.replicaLocationCategory = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.replicaPersistentType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.dataLocations = []
          (_etype19, _size16) = iprot.readListBegin()
          for _i20 in xrange(_size16):
            _elem21 = iprot.readString();
            self.dataLocations.append(_elem21)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.MAP:
          self.replicaMetadata = {}
          (_ktype23, _vtype24, _size22 ) = iprot.readMapBegin()
          for _i26 in xrange(_size22):
            _key27 = iprot.readString();
            _val28 = iprot.readString();
            self.replicaMetadata[_key27] = _val28
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DataReplicaLocationModel')
    if self.replicaId is not None:
      oprot.writeFieldBegin('replicaId', TType.STRING, 1)
      oprot.writeString(self.replicaId)
      oprot.writeFieldEnd()
    if self.resourceId is not None:
      oprot.writeFieldBegin('resourceId', TType.STRING, 2)
      oprot.writeString(self.resourceId)
      oprot.writeFieldEnd()
    if self.replicaName is not None:
      oprot.writeFieldBegin('replicaName', TType.STRING, 3)
      oprot.writeString(self.replicaName)
      oprot.writeFieldEnd()
    if self.replicaDescription is not None:
      oprot.writeFieldBegin('replicaDescription', TType.STRING, 4)
      oprot.writeString(self.replicaDescription)
      oprot.writeFieldEnd()
    if self.creationTime is not None:
      oprot.writeFieldBegin('creationTime', TType.I64, 5)
      oprot.writeI64(self.creationTime)
      oprot.writeFieldEnd()
    if self.lastModifiedTime is not None:
      oprot.writeFieldBegin('lastModifiedTime', TType.I64, 6)
      oprot.writeI64(self.lastModifiedTime)
      oprot.writeFieldEnd()
    if self.replicaLocationCategory is not None:
      oprot.writeFieldBegin('replicaLocationCategory', TType.I32, 7)
      oprot.writeI32(self.replicaLocationCategory)
      oprot.writeFieldEnd()
    if self.replicaPersistentType is not None:
      oprot.writeFieldBegin('replicaPersistentType', TType.I32, 8)
      oprot.writeI32(self.replicaPersistentType)
      oprot.writeFieldEnd()
    if self.dataLocations is not None:
      oprot.writeFieldBegin('dataLocations', TType.LIST, 9)
      oprot.writeListBegin(TType.STRING, len(self.dataLocations))
      for iter29 in self.dataLocations:
        oprot.writeString(iter29)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.replicaMetadata is not None:
      oprot.writeFieldBegin('replicaMetadata', TType.MAP, 10)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.replicaMetadata))
      for kiter30,viter31 in self.replicaMetadata.items():
        oprot.writeString(kiter30)
        oprot.writeString(viter31)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.replicaId)
    value = (value * 31) ^ hash(self.resourceId)
    value = (value * 31) ^ hash(self.replicaName)
    value = (value * 31) ^ hash(self.replicaDescription)
    value = (value * 31) ^ hash(self.creationTime)
    value = (value * 31) ^ hash(self.lastModifiedTime)
    value = (value * 31) ^ hash(self.replicaLocationCategory)
    value = (value * 31) ^ hash(self.replicaPersistentType)
    value = (value * 31) ^ hash(self.dataLocations)
    value = (value * 31) ^ hash(self.replicaMetadata)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
