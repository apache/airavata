#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import apache.airavata.model.commons.ttypes
import apache.airavata.model.data.movement.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class StorageResourceDescription:
  """
  Storage Resource Description

  storageResourceId: Airavata Internal Unique Identifier to distinguish Compute Resource.

  hostName:
    Fully Qualified Host Name.

  storageResourceDescription:
   A user friendly description of the resource.


  DataMovementProtocol:
   Option to specify a prefered data movement mechanism of the available options.



  Attributes:
   - storageResourceId
   - hostName
   - storageResourceDescription
   - enabled
   - dataMovementInterfaces
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'storageResourceId', None, "DO_NOT_SET_AT_CLIENTS", ), # 1
    (2, TType.STRING, 'hostName', None, None, ), # 2
    (3, TType.STRING, 'storageResourceDescription', None, None, ), # 3
    (4, TType.BOOL, 'enabled', None, None, ), # 4
    (5, TType.LIST, 'dataMovementInterfaces', (TType.STRUCT,(apache.airavata.model.data.movement.ttypes.DataMovementInterface, apache.airavata.model.data.movement.ttypes.DataMovementInterface.thrift_spec)), None, ), # 5
  )

  def __init__(self, storageResourceId=thrift_spec[1][4], hostName=None, storageResourceDescription=None, enabled=None, dataMovementInterfaces=None,):
    self.storageResourceId = storageResourceId
    self.hostName = hostName
    self.storageResourceDescription = storageResourceDescription
    self.enabled = enabled
    self.dataMovementInterfaces = dataMovementInterfaces

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.storageResourceId = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.hostName = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.storageResourceDescription = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.enabled = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.dataMovementInterfaces = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = apache.airavata.model.data.movement.ttypes.DataMovementInterface()
            _elem5.read(iprot)
            self.dataMovementInterfaces.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StorageResourceDescription')
    if self.storageResourceId is not None:
      oprot.writeFieldBegin('storageResourceId', TType.STRING, 1)
      oprot.writeString(self.storageResourceId)
      oprot.writeFieldEnd()
    if self.hostName is not None:
      oprot.writeFieldBegin('hostName', TType.STRING, 2)
      oprot.writeString(self.hostName)
      oprot.writeFieldEnd()
    if self.storageResourceDescription is not None:
      oprot.writeFieldBegin('storageResourceDescription', TType.STRING, 3)
      oprot.writeString(self.storageResourceDescription)
      oprot.writeFieldEnd()
    if self.enabled is not None:
      oprot.writeFieldBegin('enabled', TType.BOOL, 4)
      oprot.writeBool(self.enabled)
      oprot.writeFieldEnd()
    if self.dataMovementInterfaces is not None:
      oprot.writeFieldBegin('dataMovementInterfaces', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.dataMovementInterfaces))
      for iter6 in self.dataMovementInterfaces:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.storageResourceId is None:
      raise TProtocol.TProtocolException(message='Required field storageResourceId is unset!')
    if self.hostName is None:
      raise TProtocol.TProtocolException(message='Required field hostName is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.storageResourceId)
    value = (value * 31) ^ hash(self.hostName)
    value = (value * 31) ^ hash(self.storageResourceDescription)
    value = (value * 31) ^ hash(self.enabled)
    value = (value * 31) ^ hash(self.dataMovementInterfaces)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
