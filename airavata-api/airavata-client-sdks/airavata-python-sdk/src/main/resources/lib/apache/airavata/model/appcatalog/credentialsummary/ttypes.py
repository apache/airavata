#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class CredentialSummary:
  """
  Attributes:
   - gatewayId
   - username
   - token
   - publicKey
   - persistedTime
   - description
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gatewayId', None, None, ), # 1
    (2, TType.STRING, 'username', None, None, ), # 2
    (3, TType.STRING, 'token', None, None, ), # 3
    (4, TType.STRING, 'publicKey', None, None, ), # 4
    (5, TType.I64, 'persistedTime', None, None, ), # 5
    (6, TType.STRING, 'description', None, None, ), # 6
  )

  def __init__(self, gatewayId=None, username=None, token=None, publicKey=None, persistedTime=None, description=None,):
    self.gatewayId = gatewayId
    self.username = username
    self.token = token
    self.publicKey = publicKey
    self.persistedTime = persistedTime
    self.description = description

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gatewayId = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.username = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.token = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.publicKey = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.persistedTime = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.description = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CredentialSummary')
    if self.gatewayId is not None:
      oprot.writeFieldBegin('gatewayId', TType.STRING, 1)
      oprot.writeString(self.gatewayId)
      oprot.writeFieldEnd()
    if self.username is not None:
      oprot.writeFieldBegin('username', TType.STRING, 2)
      oprot.writeString(self.username)
      oprot.writeFieldEnd()
    if self.token is not None:
      oprot.writeFieldBegin('token', TType.STRING, 3)
      oprot.writeString(self.token)
      oprot.writeFieldEnd()
    if self.publicKey is not None:
      oprot.writeFieldBegin('publicKey', TType.STRING, 4)
      oprot.writeString(self.publicKey)
      oprot.writeFieldEnd()
    if self.persistedTime is not None:
      oprot.writeFieldBegin('persistedTime', TType.I64, 5)
      oprot.writeI64(self.persistedTime)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 6)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gatewayId is None:
      raise TProtocol.TProtocolException(message='Required field gatewayId is unset!')
    if self.username is None:
      raise TProtocol.TProtocolException(message='Required field username is unset!')
    if self.token is None:
      raise TProtocol.TProtocolException(message='Required field token is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gatewayId)
    value = (value * 31) ^ hash(self.username)
    value = (value * 31) ^ hash(self.token)
    value = (value * 31) ^ hash(self.publicKey)
    value = (value * 31) ^ hash(self.persistedTime)
    value = (value * 31) ^ hash(self.description)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
