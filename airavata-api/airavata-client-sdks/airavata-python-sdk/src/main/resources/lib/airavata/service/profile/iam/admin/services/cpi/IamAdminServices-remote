#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from airavata.service.profile.iam.admin.services.cpi import IamAdminServices
from airavata.service.profile.iam.admin.services.cpi.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  Gateway setUpGateway(AuthzToken authzToken, Gateway gateway)')
    print('  bool isUsernameAvailable(AuthzToken authzToken, string username)')
    print('  bool registerUser(AuthzToken authzToken, string username, string emailAddress, string firstName, string lastName, string newPassword)')
    print('  bool enableUser(AuthzToken authzToken, string username)')
    print('  bool isUserEnabled(AuthzToken authzToken, string username)')
    print('  bool isUserExist(AuthzToken authzToken, string username)')
    print('  UserProfile getUser(AuthzToken authzToken, string username)')
    print('   getUsers(AuthzToken authzToken, i32 offset, i32 limit, string search)')
    print('  bool resetUserPassword(AuthzToken authzToken, string username, string newPassword)')
    print('   findUsers(AuthzToken authzToken, string email, string userId)')
    print('  void updateUserProfile(AuthzToken authzToken, UserProfile userDetails)')
    print('  bool addRoleToUser(AuthzToken authzToken, string username, string roleName)')
    print('  bool removeRoleFromUser(AuthzToken authzToken, string username, string roleName)')
    print('   getUsersWithRole(AuthzToken authzToken, string roleName)')
    print('  string getAPIVersion()')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = IamAdminServices.Client(protocol)
transport.open()

if cmd == 'setUpGateway':
    if len(args) != 2:
        print('setUpGateway requires 2 args')
        sys.exit(1)
    pp.pprint(client.setUpGateway(eval(args[0]), eval(args[1]),))

elif cmd == 'isUsernameAvailable':
    if len(args) != 2:
        print('isUsernameAvailable requires 2 args')
        sys.exit(1)
    pp.pprint(client.isUsernameAvailable(eval(args[0]), args[1],))

elif cmd == 'registerUser':
    if len(args) != 6:
        print('registerUser requires 6 args')
        sys.exit(1)
    pp.pprint(client.registerUser(eval(args[0]), args[1], args[2], args[3], args[4], args[5],))

elif cmd == 'enableUser':
    if len(args) != 2:
        print('enableUser requires 2 args')
        sys.exit(1)
    pp.pprint(client.enableUser(eval(args[0]), args[1],))

elif cmd == 'isUserEnabled':
    if len(args) != 2:
        print('isUserEnabled requires 2 args')
        sys.exit(1)
    pp.pprint(client.isUserEnabled(eval(args[0]), args[1],))

elif cmd == 'isUserExist':
    if len(args) != 2:
        print('isUserExist requires 2 args')
        sys.exit(1)
    pp.pprint(client.isUserExist(eval(args[0]), args[1],))

elif cmd == 'getUser':
    if len(args) != 2:
        print('getUser requires 2 args')
        sys.exit(1)
    pp.pprint(client.getUser(eval(args[0]), args[1],))

elif cmd == 'getUsers':
    if len(args) != 4:
        print('getUsers requires 4 args')
        sys.exit(1)
    pp.pprint(client.getUsers(eval(args[0]), eval(args[1]), eval(args[2]), args[3],))

elif cmd == 'resetUserPassword':
    if len(args) != 3:
        print('resetUserPassword requires 3 args')
        sys.exit(1)
    pp.pprint(client.resetUserPassword(eval(args[0]), args[1], args[2],))

elif cmd == 'findUsers':
    if len(args) != 3:
        print('findUsers requires 3 args')
        sys.exit(1)
    pp.pprint(client.findUsers(eval(args[0]), args[1], args[2],))

elif cmd == 'updateUserProfile':
    if len(args) != 2:
        print('updateUserProfile requires 2 args')
        sys.exit(1)
    pp.pprint(client.updateUserProfile(eval(args[0]), eval(args[1]),))

elif cmd == 'addRoleToUser':
    if len(args) != 3:
        print('addRoleToUser requires 3 args')
        sys.exit(1)
    pp.pprint(client.addRoleToUser(eval(args[0]), args[1], args[2],))

elif cmd == 'removeRoleFromUser':
    if len(args) != 3:
        print('removeRoleFromUser requires 3 args')
        sys.exit(1)
    pp.pprint(client.removeRoleFromUser(eval(args[0]), args[1], args[2],))

elif cmd == 'getUsersWithRole':
    if len(args) != 2:
        print('getUsersWithRole requires 2 args')
        sys.exit(1)
    pp.pprint(client.getUsersWithRole(eval(args[0]), args[1],))

elif cmd == 'getAPIVersion':
    if len(args) != 0:
        print('getAPIVersion requires 0 args')
        sys.exit(1)
    pp.pprint(client.getAPIVersion())

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
