#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from airavata.service.profile.user.cpi import UserProfileService
from airavata.service.profile.user.cpi.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  string addUserProfile(AuthzToken authzToken, UserProfile userProfile)')
    print('  bool updateUserProfile(AuthzToken authzToken, UserProfile userProfile)')
    print('  UserProfile getUserProfileById(AuthzToken authzToken, string userId, string gatewayId)')
    print('  bool deleteUserProfile(AuthzToken authzToken, string userId, string gatewayId)')
    print('   getAllUserProfilesInGateway(AuthzToken authzToken, string gatewayId, i32 offset, i32 limit)')
    print('  bool doesUserExist(AuthzToken authzToken, string userId, string gatewayId)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = UserProfileService.Client(protocol)
transport.open()

if cmd == 'addUserProfile':
    if len(args) != 2:
        print('addUserProfile requires 2 args')
        sys.exit(1)
    pp.pprint(client.addUserProfile(eval(args[0]), eval(args[1]),))

elif cmd == 'updateUserProfile':
    if len(args) != 2:
        print('updateUserProfile requires 2 args')
        sys.exit(1)
    pp.pprint(client.updateUserProfile(eval(args[0]), eval(args[1]),))

elif cmd == 'getUserProfileById':
    if len(args) != 3:
        print('getUserProfileById requires 3 args')
        sys.exit(1)
    pp.pprint(client.getUserProfileById(eval(args[0]), args[1], args[2],))

elif cmd == 'deleteUserProfile':
    if len(args) != 3:
        print('deleteUserProfile requires 3 args')
        sys.exit(1)
    pp.pprint(client.deleteUserProfile(eval(args[0]), args[1], args[2],))

elif cmd == 'getAllUserProfilesInGateway':
    if len(args) != 4:
        print('getAllUserProfilesInGateway requires 4 args')
        sys.exit(1)
    pp.pprint(client.getAllUserProfilesInGateway(eval(args[0]), args[1], eval(args[2]), eval(args[3]),))

elif cmd == 'doesUserExist':
    if len(args) != 3:
        print('doesUserExist requires 3 args')
        sys.exit(1)
    pp.pprint(client.doesUserExist(eval(args[0]), args[1], args[2],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
