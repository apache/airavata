/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef applicationCatalogDataModel_TYPES_H
#define applicationCatalogDataModel_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




struct ResourceJobManager {
  enum type {
    FORK = 0,
    PBS = 1,
    UGE = 2,
    SLURM = 3
  };
};

extern const std::map<int, const char*> _ResourceJobManager_VALUES_TO_NAMES;

struct JobSubmissionProtocol {
  enum type {
    SSH = 0,
    GRAM = 1,
    UNICORE = 2
  };
};

extern const std::map<int, const char*> _JobSubmissionProtocol_VALUES_TO_NAMES;

struct DataMovementProtocol {
  enum type {
    SCP = 0,
    SFTP = 1,
    GridFTP = 2,
    UNICORE_STORAGE_SERVICE = 3
  };
};

extern const std::map<int, const char*> _DataMovementProtocol_VALUES_TO_NAMES;

struct SecurityProtocol {
  enum type {
    USERNAME_PASSWORD = 0,
    SSH_KEYS = 1,
    GSI = 2,
    KERBEROS = 3,
    OAUTH = 4
  };
};

extern const std::map<int, const char*> _SecurityProtocol_VALUES_TO_NAMES;

typedef struct _SCPDataMovement__isset {
  _SCPDataMovement__isset() : sshPort(true) {}
  bool sshPort;
} _SCPDataMovement__isset;

class SCPDataMovement {
 public:

  static const char* ascii_fingerprint; // = "15D34740303C4E50CFFA807ABA20C3EF";
  static const uint8_t binary_fingerprint[16]; // = {0x15,0xD3,0x47,0x40,0x30,0x3C,0x4E,0x50,0xCF,0xFA,0x80,0x7A,0xBA,0x20,0xC3,0xEF};

  SCPDataMovement() : securityProtocol((SecurityProtocol::type)0), sshPort(22) {
  }

  virtual ~SCPDataMovement() throw() {}

  SecurityProtocol::type securityProtocol;
  int32_t sshPort;

  _SCPDataMovement__isset __isset;

  void __set_securityProtocol(const SecurityProtocol::type val) {
    securityProtocol = val;
  }

  void __set_sshPort(const int32_t val) {
    sshPort = val;
    __isset.sshPort = true;
  }

  bool operator == (const SCPDataMovement & rhs) const
  {
    if (!(securityProtocol == rhs.securityProtocol))
      return false;
    if (__isset.sshPort != rhs.__isset.sshPort)
      return false;
    else if (__isset.sshPort && !(sshPort == rhs.sshPort))
      return false;
    return true;
  }
  bool operator != (const SCPDataMovement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCPDataMovement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SCPDataMovement &a, SCPDataMovement &b);

typedef struct _SSHJobSubmission__isset {
  _SSHJobSubmission__isset() : sshPort(true) {}
  bool sshPort;
} _SSHJobSubmission__isset;

class SSHJobSubmission {
 public:

  static const char* ascii_fingerprint; // = "E65F4B00849C697EF0A023BF341A5599";
  static const uint8_t binary_fingerprint[16]; // = {0xE6,0x5F,0x4B,0x00,0x84,0x9C,0x69,0x7E,0xF0,0xA0,0x23,0xBF,0x34,0x1A,0x55,0x99};

  SSHJobSubmission() : resourceJobManager((ResourceJobManager::type)0), sshPort(22) {
  }

  virtual ~SSHJobSubmission() throw() {}

  ResourceJobManager::type resourceJobManager;
  int32_t sshPort;

  _SSHJobSubmission__isset __isset;

  void __set_resourceJobManager(const ResourceJobManager::type val) {
    resourceJobManager = val;
  }

  void __set_sshPort(const int32_t val) {
    sshPort = val;
    __isset.sshPort = true;
  }

  bool operator == (const SSHJobSubmission & rhs) const
  {
    if (!(resourceJobManager == rhs.resourceJobManager))
      return false;
    if (__isset.sshPort != rhs.__isset.sshPort)
      return false;
    else if (__isset.sshPort && !(sshPort == rhs.sshPort))
      return false;
    return true;
  }
  bool operator != (const SSHJobSubmission &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SSHJobSubmission & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SSHJobSubmission &a, SSHJobSubmission &b);

typedef struct _GlobusJobSubmission__isset {
  _GlobusJobSubmission__isset() : globusGateKeeperEndPoint(false) {}
  bool globusGateKeeperEndPoint;
} _GlobusJobSubmission__isset;

class GlobusJobSubmission {
 public:

  static const char* ascii_fingerprint; // = "19AAB18E981C4EB11AEBB34F40FF0939";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xAA,0xB1,0x8E,0x98,0x1C,0x4E,0xB1,0x1A,0xEB,0xB3,0x4F,0x40,0xFF,0x09,0x39};

  GlobusJobSubmission() : securityProtocol((SecurityProtocol::type)0), resourceJobManager((ResourceJobManager::type)0), globusGateKeeperEndPoint() {
  }

  virtual ~GlobusJobSubmission() throw() {}

  SecurityProtocol::type securityProtocol;
  ResourceJobManager::type resourceJobManager;
  std::string globusGateKeeperEndPoint;

  _GlobusJobSubmission__isset __isset;

  void __set_securityProtocol(const SecurityProtocol::type val) {
    securityProtocol = val;
  }

  void __set_resourceJobManager(const ResourceJobManager::type val) {
    resourceJobManager = val;
  }

  void __set_globusGateKeeperEndPoint(const std::string& val) {
    globusGateKeeperEndPoint = val;
    __isset.globusGateKeeperEndPoint = true;
  }

  bool operator == (const GlobusJobSubmission & rhs) const
  {
    if (!(securityProtocol == rhs.securityProtocol))
      return false;
    if (!(resourceJobManager == rhs.resourceJobManager))
      return false;
    if (__isset.globusGateKeeperEndPoint != rhs.__isset.globusGateKeeperEndPoint)
      return false;
    else if (__isset.globusGateKeeperEndPoint && !(globusGateKeeperEndPoint == rhs.globusGateKeeperEndPoint))
      return false;
    return true;
  }
  bool operator != (const GlobusJobSubmission &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GlobusJobSubmission & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GlobusJobSubmission &a, GlobusJobSubmission &b);

typedef struct _GSISSHJobSubmission__isset {
  _GSISSHJobSubmission__isset() : sshPort(true), exports(false), preJobCommands(false), postJobCommands(false), installedPath(false), monitorMode(false) {}
  bool sshPort;
  bool exports;
  bool preJobCommands;
  bool postJobCommands;
  bool installedPath;
  bool monitorMode;
} _GSISSHJobSubmission__isset;

class GSISSHJobSubmission {
 public:

  static const char* ascii_fingerprint; // = "91E841F79C1FDEC6DD757B48AC5FD97E";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0xE8,0x41,0xF7,0x9C,0x1F,0xDE,0xC6,0xDD,0x75,0x7B,0x48,0xAC,0x5F,0xD9,0x7E};

  GSISSHJobSubmission() : resourceJobManager((ResourceJobManager::type)0), sshPort(22), installedPath(), monitorMode() {
  }

  virtual ~GSISSHJobSubmission() throw() {}

  ResourceJobManager::type resourceJobManager;
  int32_t sshPort;
  std::set<std::string>  exports;
  std::vector<std::string>  preJobCommands;
  std::vector<std::string>  postJobCommands;
  std::string installedPath;
  std::string monitorMode;

  _GSISSHJobSubmission__isset __isset;

  void __set_resourceJobManager(const ResourceJobManager::type val) {
    resourceJobManager = val;
  }

  void __set_sshPort(const int32_t val) {
    sshPort = val;
    __isset.sshPort = true;
  }

  void __set_exports(const std::set<std::string> & val) {
    exports = val;
    __isset.exports = true;
  }

  void __set_preJobCommands(const std::vector<std::string> & val) {
    preJobCommands = val;
    __isset.preJobCommands = true;
  }

  void __set_postJobCommands(const std::vector<std::string> & val) {
    postJobCommands = val;
    __isset.postJobCommands = true;
  }

  void __set_installedPath(const std::string& val) {
    installedPath = val;
    __isset.installedPath = true;
  }

  void __set_monitorMode(const std::string& val) {
    monitorMode = val;
    __isset.monitorMode = true;
  }

  bool operator == (const GSISSHJobSubmission & rhs) const
  {
    if (!(resourceJobManager == rhs.resourceJobManager))
      return false;
    if (__isset.sshPort != rhs.__isset.sshPort)
      return false;
    else if (__isset.sshPort && !(sshPort == rhs.sshPort))
      return false;
    if (__isset.exports != rhs.__isset.exports)
      return false;
    else if (__isset.exports && !(exports == rhs.exports))
      return false;
    if (__isset.preJobCommands != rhs.__isset.preJobCommands)
      return false;
    else if (__isset.preJobCommands && !(preJobCommands == rhs.preJobCommands))
      return false;
    if (__isset.postJobCommands != rhs.__isset.postJobCommands)
      return false;
    else if (__isset.postJobCommands && !(postJobCommands == rhs.postJobCommands))
      return false;
    if (__isset.installedPath != rhs.__isset.installedPath)
      return false;
    else if (__isset.installedPath && !(installedPath == rhs.installedPath))
      return false;
    if (__isset.monitorMode != rhs.__isset.monitorMode)
      return false;
    else if (__isset.monitorMode && !(monitorMode == rhs.monitorMode))
      return false;
    return true;
  }
  bool operator != (const GSISSHJobSubmission &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GSISSHJobSubmission & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GSISSHJobSubmission &a, GSISSHJobSubmission &b);

typedef struct _JobSubmissionProtocols__isset {
  _JobSubmissionProtocols__isset() : preferedJobSubmissionProtocol(false), sshJobSubmissionInfo(false), globusGRAMHost(false), globusGRAMPort(true), unicoreBESEndPoint(false) {}
  bool preferedJobSubmissionProtocol;
  bool sshJobSubmissionInfo;
  bool globusGRAMHost;
  bool globusGRAMPort;
  bool unicoreBESEndPoint;
} _JobSubmissionProtocols__isset;

class JobSubmissionProtocols {
 public:

  static const char* ascii_fingerprint; // = "18B1F54358A01390B5830C26FFD334D4";
  static const uint8_t binary_fingerprint[16]; // = {0x18,0xB1,0xF5,0x43,0x58,0xA0,0x13,0x90,0xB5,0x83,0x0C,0x26,0xFF,0xD3,0x34,0xD4};

  JobSubmissionProtocols() : isEmpty(false), preferedJobSubmissionProtocol((JobSubmissionProtocol::type)0), globusGRAMHost(), globusGRAMPort(2119), unicoreBESEndPoint() {
  }

  virtual ~JobSubmissionProtocols() throw() {}

  bool isEmpty;
  JobSubmissionProtocol::type preferedJobSubmissionProtocol;
  SSHJobSubmission sshJobSubmissionInfo;
  std::string globusGRAMHost;
  int32_t globusGRAMPort;
  std::string unicoreBESEndPoint;

  _JobSubmissionProtocols__isset __isset;

  void __set_isEmpty(const bool val) {
    isEmpty = val;
  }

  void __set_preferedJobSubmissionProtocol(const JobSubmissionProtocol::type val) {
    preferedJobSubmissionProtocol = val;
    __isset.preferedJobSubmissionProtocol = true;
  }

  void __set_sshJobSubmissionInfo(const SSHJobSubmission& val) {
    sshJobSubmissionInfo = val;
    __isset.sshJobSubmissionInfo = true;
  }

  void __set_globusGRAMHost(const std::string& val) {
    globusGRAMHost = val;
    __isset.globusGRAMHost = true;
  }

  void __set_globusGRAMPort(const int32_t val) {
    globusGRAMPort = val;
    __isset.globusGRAMPort = true;
  }

  void __set_unicoreBESEndPoint(const std::string& val) {
    unicoreBESEndPoint = val;
    __isset.unicoreBESEndPoint = true;
  }

  bool operator == (const JobSubmissionProtocols & rhs) const
  {
    if (!(isEmpty == rhs.isEmpty))
      return false;
    if (__isset.preferedJobSubmissionProtocol != rhs.__isset.preferedJobSubmissionProtocol)
      return false;
    else if (__isset.preferedJobSubmissionProtocol && !(preferedJobSubmissionProtocol == rhs.preferedJobSubmissionProtocol))
      return false;
    if (__isset.sshJobSubmissionInfo != rhs.__isset.sshJobSubmissionInfo)
      return false;
    else if (__isset.sshJobSubmissionInfo && !(sshJobSubmissionInfo == rhs.sshJobSubmissionInfo))
      return false;
    if (__isset.globusGRAMHost != rhs.__isset.globusGRAMHost)
      return false;
    else if (__isset.globusGRAMHost && !(globusGRAMHost == rhs.globusGRAMHost))
      return false;
    if (__isset.globusGRAMPort != rhs.__isset.globusGRAMPort)
      return false;
    else if (__isset.globusGRAMPort && !(globusGRAMPort == rhs.globusGRAMPort))
      return false;
    if (__isset.unicoreBESEndPoint != rhs.__isset.unicoreBESEndPoint)
      return false;
    else if (__isset.unicoreBESEndPoint && !(unicoreBESEndPoint == rhs.unicoreBESEndPoint))
      return false;
    return true;
  }
  bool operator != (const JobSubmissionProtocols &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const JobSubmissionProtocols & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(JobSubmissionProtocols &a, JobSubmissionProtocols &b);

typedef struct _ComputeResourceDescription__isset {
  _ComputeResourceDescription__isset() : hostAliases(false), ipAddresses(false), resourceDescription(false), scratchLocation(false), preferredJobSubmissionProtocol(false) {}
  bool hostAliases;
  bool ipAddresses;
  bool resourceDescription;
  bool scratchLocation;
  bool preferredJobSubmissionProtocol;
} _ComputeResourceDescription__isset;

class ComputeResourceDescription {
 public:

  static const char* ascii_fingerprint; // = "BA89EA8A5D740F97C53BA51CA49FEC18";
  static const uint8_t binary_fingerprint[16]; // = {0xBA,0x89,0xEA,0x8A,0x5D,0x74,0x0F,0x97,0xC5,0x3B,0xA5,0x1C,0xA4,0x9F,0xEC,0x18};

  ComputeResourceDescription() : isEmpty(false), resourceId("DO_NOT_SET_AT_CLIENTS"), hostName(), resourceDescription(), scratchLocation(), preferredJobSubmissionProtocol() {
  }

  virtual ~ComputeResourceDescription() throw() {}

  bool isEmpty;
  std::string resourceId;
  std::string hostName;
  std::set<std::string>  hostAliases;
  std::set<std::string>  ipAddresses;
  std::string resourceDescription;
  std::string scratchLocation;
  std::string preferredJobSubmissionProtocol;
  std::map<std::string, JobSubmissionProtocol::type>  jobSubmissionProtocols;
  std::map<std::string, DataMovementProtocol::type>  dataMovementProtocols;

  _ComputeResourceDescription__isset __isset;

  void __set_isEmpty(const bool val) {
    isEmpty = val;
  }

  void __set_resourceId(const std::string& val) {
    resourceId = val;
  }

  void __set_hostName(const std::string& val) {
    hostName = val;
  }

  void __set_hostAliases(const std::set<std::string> & val) {
    hostAliases = val;
    __isset.hostAliases = true;
  }

  void __set_ipAddresses(const std::set<std::string> & val) {
    ipAddresses = val;
    __isset.ipAddresses = true;
  }

  void __set_resourceDescription(const std::string& val) {
    resourceDescription = val;
    __isset.resourceDescription = true;
  }

  void __set_scratchLocation(const std::string& val) {
    scratchLocation = val;
    __isset.scratchLocation = true;
  }

  void __set_preferredJobSubmissionProtocol(const std::string& val) {
    preferredJobSubmissionProtocol = val;
    __isset.preferredJobSubmissionProtocol = true;
  }

  void __set_jobSubmissionProtocols(const std::map<std::string, JobSubmissionProtocol::type> & val) {
    jobSubmissionProtocols = val;
  }

  void __set_dataMovementProtocols(const std::map<std::string, DataMovementProtocol::type> & val) {
    dataMovementProtocols = val;
  }

  bool operator == (const ComputeResourceDescription & rhs) const
  {
    if (!(isEmpty == rhs.isEmpty))
      return false;
    if (!(resourceId == rhs.resourceId))
      return false;
    if (!(hostName == rhs.hostName))
      return false;
    if (__isset.hostAliases != rhs.__isset.hostAliases)
      return false;
    else if (__isset.hostAliases && !(hostAliases == rhs.hostAliases))
      return false;
    if (__isset.ipAddresses != rhs.__isset.ipAddresses)
      return false;
    else if (__isset.ipAddresses && !(ipAddresses == rhs.ipAddresses))
      return false;
    if (__isset.resourceDescription != rhs.__isset.resourceDescription)
      return false;
    else if (__isset.resourceDescription && !(resourceDescription == rhs.resourceDescription))
      return false;
    if (__isset.scratchLocation != rhs.__isset.scratchLocation)
      return false;
    else if (__isset.scratchLocation && !(scratchLocation == rhs.scratchLocation))
      return false;
    if (__isset.preferredJobSubmissionProtocol != rhs.__isset.preferredJobSubmissionProtocol)
      return false;
    else if (__isset.preferredJobSubmissionProtocol && !(preferredJobSubmissionProtocol == rhs.preferredJobSubmissionProtocol))
      return false;
    if (!(jobSubmissionProtocols == rhs.jobSubmissionProtocols))
      return false;
    if (!(dataMovementProtocols == rhs.dataMovementProtocols))
      return false;
    return true;
  }
  bool operator != (const ComputeResourceDescription &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ComputeResourceDescription & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ComputeResourceDescription &a, ComputeResourceDescription &b);

typedef struct _ApplicationDescriptor__isset {
  _ApplicationDescriptor__isset() : applicationDescriptorData(false) {}
  bool applicationDescriptorData;
} _ApplicationDescriptor__isset;

class ApplicationDescriptor {
 public:

  static const char* ascii_fingerprint; // = "5B708A954C550ECA9C1A49D3C5CAFAB9";
  static const uint8_t binary_fingerprint[16]; // = {0x5B,0x70,0x8A,0x95,0x4C,0x55,0x0E,0xCA,0x9C,0x1A,0x49,0xD3,0xC5,0xCA,0xFA,0xB9};

  ApplicationDescriptor() : applicationDescriptorId("DO_NOT_SET_AT_CLIENTS"), applicationDescriptorData() {
  }

  virtual ~ApplicationDescriptor() throw() {}

  std::string applicationDescriptorId;
  std::string applicationDescriptorData;

  _ApplicationDescriptor__isset __isset;

  void __set_applicationDescriptorId(const std::string& val) {
    applicationDescriptorId = val;
  }

  void __set_applicationDescriptorData(const std::string& val) {
    applicationDescriptorData = val;
    __isset.applicationDescriptorData = true;
  }

  bool operator == (const ApplicationDescriptor & rhs) const
  {
    if (!(applicationDescriptorId == rhs.applicationDescriptorId))
      return false;
    if (__isset.applicationDescriptorData != rhs.__isset.applicationDescriptorData)
      return false;
    else if (__isset.applicationDescriptorData && !(applicationDescriptorData == rhs.applicationDescriptorData))
      return false;
    return true;
  }
  bool operator != (const ApplicationDescriptor &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationDescriptor & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ApplicationDescriptor &a, ApplicationDescriptor &b);


class ApplicationDeployment {
 public:

  static const char* ascii_fingerprint; // = "960C379A1227D22F43E92F77C32827B9";
  static const uint8_t binary_fingerprint[16]; // = {0x96,0x0C,0x37,0x9A,0x12,0x27,0xD2,0x2F,0x43,0xE9,0x2F,0x77,0xC3,0x28,0x27,0xB9};

  ApplicationDeployment() : deploymentId("DO_NOT_SET_AT_CLIENTS") {
  }

  virtual ~ApplicationDeployment() throw() {}

  std::string deploymentId;
  ComputeResourceDescription computeResourceDescription;
  ApplicationDescriptor applicationDescriptor;

  void __set_deploymentId(const std::string& val) {
    deploymentId = val;
  }

  void __set_computeResourceDescription(const ComputeResourceDescription& val) {
    computeResourceDescription = val;
  }

  void __set_applicationDescriptor(const ApplicationDescriptor& val) {
    applicationDescriptor = val;
  }

  bool operator == (const ApplicationDeployment & rhs) const
  {
    if (!(deploymentId == rhs.deploymentId))
      return false;
    if (!(computeResourceDescription == rhs.computeResourceDescription))
      return false;
    if (!(applicationDescriptor == rhs.applicationDescriptor))
      return false;
    return true;
  }
  bool operator != (const ApplicationDeployment &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationDeployment & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ApplicationDeployment &a, ApplicationDeployment &b);

typedef struct _ApplicationInterface__isset {
  _ApplicationInterface__isset() : applicationInterfaceData(false), applicationDeployments(false) {}
  bool applicationInterfaceData;
  bool applicationDeployments;
} _ApplicationInterface__isset;

class ApplicationInterface {
 public:

  static const char* ascii_fingerprint; // = "EEF3E81C0A64CA93FD2422A6CF9ABA97";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xF3,0xE8,0x1C,0x0A,0x64,0xCA,0x93,0xFD,0x24,0x22,0xA6,0xCF,0x9A,0xBA,0x97};

  ApplicationInterface() : applicationInterfaceId("DO_NOT_SET_AT_CLIENTS"), applicationInterfaceData() {
  }

  virtual ~ApplicationInterface() throw() {}

  std::string applicationInterfaceId;
  std::string applicationInterfaceData;
  std::vector<ApplicationDeployment>  applicationDeployments;

  _ApplicationInterface__isset __isset;

  void __set_applicationInterfaceId(const std::string& val) {
    applicationInterfaceId = val;
  }

  void __set_applicationInterfaceData(const std::string& val) {
    applicationInterfaceData = val;
    __isset.applicationInterfaceData = true;
  }

  void __set_applicationDeployments(const std::vector<ApplicationDeployment> & val) {
    applicationDeployments = val;
    __isset.applicationDeployments = true;
  }

  bool operator == (const ApplicationInterface & rhs) const
  {
    if (!(applicationInterfaceId == rhs.applicationInterfaceId))
      return false;
    if (__isset.applicationInterfaceData != rhs.__isset.applicationInterfaceData)
      return false;
    else if (__isset.applicationInterfaceData && !(applicationInterfaceData == rhs.applicationInterfaceData))
      return false;
    if (__isset.applicationDeployments != rhs.__isset.applicationDeployments)
      return false;
    else if (__isset.applicationDeployments && !(applicationDeployments == rhs.applicationDeployments))
      return false;
    return true;
  }
  bool operator != (const ApplicationInterface &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationInterface & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ApplicationInterface &a, ApplicationInterface &b);



#endif
