/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Airavata_H
#define Airavata_H

#include <thrift/TDispatchProcessor.h>
#include "airavataAPI_types.h"

namespace airavata { namespace api {

class AiravataIf {
 public:
  virtual ~AiravataIf() {}
  virtual void GetAPIVersion(std::string& _return) = 0;
  virtual void createProject(std::string& _return, const  ::Project& project) = 0;
  virtual void updateProject(const  ::Project& project) = 0;
  virtual void getProject( ::Project& _return, const std::string& projectId) = 0;
  virtual void getAllUserProjects(std::vector< ::Project> & _return, const std::string& userName) = 0;
  virtual void searchProjectsByProjectName(std::vector< ::Project> & _return, const std::string& userName, const std::string& projectName) = 0;
  virtual void searchProjectsByProjectDesc(std::vector< ::Project> & _return, const std::string& userName, const std::string& description) = 0;
  virtual void getAllExperimentsInProject(std::vector< ::Experiment> & _return, const std::string& projectId) = 0;
  virtual void getAllUserExperiments(std::vector< ::Experiment> & _return, const std::string& userName) = 0;
  virtual void createExperiment(std::string& _return, const  ::Experiment& experiment) = 0;
  virtual void getExperiment( ::Experiment& _return, const std::string& airavataExperimentId) = 0;
  virtual void updateExperiment(const std::string& airavataExperimentId, const  ::Experiment& experiment) = 0;
  virtual void updateExperimentConfiguration(const std::string& airavataExperimentId, const  ::UserConfigurationData& userConfiguration) = 0;
  virtual void updateResourceScheduleing(const std::string& airavataExperimentId, const  ::ComputationalResourceScheduling& resourceScheduling) = 0;
  virtual bool validateExperiment(const std::string& airavataExperimentId) = 0;
  virtual void launchExperiment(const std::string& airavataExperimentId, const std::string& airavataCredStoreToken) = 0;
  virtual void getExperimentStatus( ::ExperimentStatus& _return, const std::string& airavataExperimentId) = 0;
  virtual void getExperimentOutputs(std::vector< ::DataObjectType> & _return, const std::string& airavataExperimentId) = 0;
  virtual void getJobStatuses(std::map<std::string,  ::JobStatus> & _return, const std::string& airavataExperimentId) = 0;
  virtual void cloneExperiment(std::string& _return, const std::string& existingExperimentID, const std::string& newExperimentName) = 0;
  virtual void terminateExperiment(const std::string& airavataExperimentId) = 0;
};

class AiravataIfFactory {
 public:
  typedef AiravataIf Handler;

  virtual ~AiravataIfFactory() {}

  virtual AiravataIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AiravataIf* /* handler */) = 0;
};

class AiravataIfSingletonFactory : virtual public AiravataIfFactory {
 public:
  AiravataIfSingletonFactory(const boost::shared_ptr<AiravataIf>& iface) : iface_(iface) {}
  virtual ~AiravataIfSingletonFactory() {}

  virtual AiravataIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AiravataIf* /* handler */) {}

 protected:
  boost::shared_ptr<AiravataIf> iface_;
};

class AiravataNull : virtual public AiravataIf {
 public:
  virtual ~AiravataNull() {}
  void GetAPIVersion(std::string& /* _return */) {
    return;
  }
  void createProject(std::string& /* _return */, const  ::Project& /* project */) {
    return;
  }
  void updateProject(const  ::Project& /* project */) {
    return;
  }
  void getProject( ::Project& /* _return */, const std::string& /* projectId */) {
    return;
  }
  void getAllUserProjects(std::vector< ::Project> & /* _return */, const std::string& /* userName */) {
    return;
  }
  void searchProjectsByProjectName(std::vector< ::Project> & /* _return */, const std::string& /* userName */, const std::string& /* projectName */) {
    return;
  }
  void searchProjectsByProjectDesc(std::vector< ::Project> & /* _return */, const std::string& /* userName */, const std::string& /* description */) {
    return;
  }
  void getAllExperimentsInProject(std::vector< ::Experiment> & /* _return */, const std::string& /* projectId */) {
    return;
  }
  void getAllUserExperiments(std::vector< ::Experiment> & /* _return */, const std::string& /* userName */) {
    return;
  }
  void createExperiment(std::string& /* _return */, const  ::Experiment& /* experiment */) {
    return;
  }
  void getExperiment( ::Experiment& /* _return */, const std::string& /* airavataExperimentId */) {
    return;
  }
  void updateExperiment(const std::string& /* airavataExperimentId */, const  ::Experiment& /* experiment */) {
    return;
  }
  void updateExperimentConfiguration(const std::string& /* airavataExperimentId */, const  ::UserConfigurationData& /* userConfiguration */) {
    return;
  }
  void updateResourceScheduleing(const std::string& /* airavataExperimentId */, const  ::ComputationalResourceScheduling& /* resourceScheduling */) {
    return;
  }
  bool validateExperiment(const std::string& /* airavataExperimentId */) {
    bool _return = false;
    return _return;
  }
  void launchExperiment(const std::string& /* airavataExperimentId */, const std::string& /* airavataCredStoreToken */) {
    return;
  }
  void getExperimentStatus( ::ExperimentStatus& /* _return */, const std::string& /* airavataExperimentId */) {
    return;
  }
  void getExperimentOutputs(std::vector< ::DataObjectType> & /* _return */, const std::string& /* airavataExperimentId */) {
    return;
  }
  void getJobStatuses(std::map<std::string,  ::JobStatus> & /* _return */, const std::string& /* airavataExperimentId */) {
    return;
  }
  void cloneExperiment(std::string& /* _return */, const std::string& /* existingExperimentID */, const std::string& /* newExperimentName */) {
    return;
  }
  void terminateExperiment(const std::string& /* airavataExperimentId */) {
    return;
  }
};


class Airavata_GetAPIVersion_args {
 public:

  Airavata_GetAPIVersion_args() {
  }

  virtual ~Airavata_GetAPIVersion_args() throw() {}


  bool operator == (const Airavata_GetAPIVersion_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Airavata_GetAPIVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_GetAPIVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_GetAPIVersion_pargs {
 public:


  virtual ~Airavata_GetAPIVersion_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_GetAPIVersion_result__isset {
  _Airavata_GetAPIVersion_result__isset() : success(false) {}
  bool success;
} _Airavata_GetAPIVersion_result__isset;

class Airavata_GetAPIVersion_result {
 public:

  Airavata_GetAPIVersion_result() : success() {
  }

  virtual ~Airavata_GetAPIVersion_result() throw() {}

  std::string success;

  _Airavata_GetAPIVersion_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const Airavata_GetAPIVersion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Airavata_GetAPIVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_GetAPIVersion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_GetAPIVersion_presult__isset {
  _Airavata_GetAPIVersion_presult__isset() : success(false) {}
  bool success;
} _Airavata_GetAPIVersion_presult__isset;

class Airavata_GetAPIVersion_presult {
 public:


  virtual ~Airavata_GetAPIVersion_presult() throw() {}

  std::string* success;

  _Airavata_GetAPIVersion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_createProject_args {
 public:

  Airavata_createProject_args() {
  }

  virtual ~Airavata_createProject_args() throw() {}

   ::Project project;

  void __set_project(const  ::Project& val) {
    project = val;
  }

  bool operator == (const Airavata_createProject_args & rhs) const
  {
    if (!(project == rhs.project))
      return false;
    return true;
  }
  bool operator != (const Airavata_createProject_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_createProject_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_createProject_pargs {
 public:


  virtual ~Airavata_createProject_pargs() throw() {}

  const  ::Project* project;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_createProject_result__isset {
  _Airavata_createProject_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_createProject_result__isset;

class Airavata_createProject_result {
 public:

  Airavata_createProject_result() : success() {
  }

  virtual ~Airavata_createProject_result() throw() {}

  std::string success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_createProject_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_createProject_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_createProject_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_createProject_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_createProject_presult__isset {
  _Airavata_createProject_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_createProject_presult__isset;

class Airavata_createProject_presult {
 public:


  virtual ~Airavata_createProject_presult() throw() {}

  std::string* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_createProject_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_updateProject_args {
 public:

  Airavata_updateProject_args() {
  }

  virtual ~Airavata_updateProject_args() throw() {}

   ::Project project;

  void __set_project(const  ::Project& val) {
    project = val;
  }

  bool operator == (const Airavata_updateProject_args & rhs) const
  {
    if (!(project == rhs.project))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateProject_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateProject_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateProject_pargs {
 public:


  virtual ~Airavata_updateProject_pargs() throw() {}

  const  ::Project* project;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateProject_result__isset {
  _Airavata_updateProject_result__isset() : ire(false), ace(false), ase(false) {}
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateProject_result__isset;

class Airavata_updateProject_result {
 public:

  Airavata_updateProject_result() {
  }

  virtual ~Airavata_updateProject_result() throw() {}

   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateProject_result__isset __isset;

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_updateProject_result & rhs) const
  {
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateProject_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateProject_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateProject_presult__isset {
  _Airavata_updateProject_presult__isset() : ire(false), ace(false), ase(false) {}
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateProject_presult__isset;

class Airavata_updateProject_presult {
 public:


  virtual ~Airavata_updateProject_presult() throw() {}

   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateProject_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getProject_args {
 public:

  Airavata_getProject_args() : projectId() {
  }

  virtual ~Airavata_getProject_args() throw() {}

  std::string projectId;

  void __set_projectId(const std::string& val) {
    projectId = val;
  }

  bool operator == (const Airavata_getProject_args & rhs) const
  {
    if (!(projectId == rhs.projectId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getProject_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getProject_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getProject_pargs {
 public:


  virtual ~Airavata_getProject_pargs() throw() {}

  const std::string* projectId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getProject_result__isset {
  _Airavata_getProject_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getProject_result__isset;

class Airavata_getProject_result {
 public:

  Airavata_getProject_result() {
  }

  virtual ~Airavata_getProject_result() throw() {}

   ::Project success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_getProject_result__isset __isset;

  void __set_success(const  ::Project& val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getProject_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getProject_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getProject_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getProject_presult__isset {
  _Airavata_getProject_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getProject_presult__isset;

class Airavata_getProject_presult {
 public:


  virtual ~Airavata_getProject_presult() throw() {}

   ::Project* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_getProject_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getAllUserProjects_args {
 public:

  Airavata_getAllUserProjects_args() : userName() {
  }

  virtual ~Airavata_getAllUserProjects_args() throw() {}

  std::string userName;

  void __set_userName(const std::string& val) {
    userName = val;
  }

  bool operator == (const Airavata_getAllUserProjects_args & rhs) const
  {
    if (!(userName == rhs.userName))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllUserProjects_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllUserProjects_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getAllUserProjects_pargs {
 public:


  virtual ~Airavata_getAllUserProjects_pargs() throw() {}

  const std::string* userName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllUserProjects_result__isset {
  _Airavata_getAllUserProjects_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAllUserProjects_result__isset;

class Airavata_getAllUserProjects_result {
 public:

  Airavata_getAllUserProjects_result() {
  }

  virtual ~Airavata_getAllUserProjects_result() throw() {}

  std::vector< ::Project>  success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAllUserProjects_result__isset __isset;

  void __set_success(const std::vector< ::Project> & val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getAllUserProjects_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllUserProjects_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllUserProjects_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllUserProjects_presult__isset {
  _Airavata_getAllUserProjects_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAllUserProjects_presult__isset;

class Airavata_getAllUserProjects_presult {
 public:


  virtual ~Airavata_getAllUserProjects_presult() throw() {}

  std::vector< ::Project> * success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAllUserProjects_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_searchProjectsByProjectName_args {
 public:

  Airavata_searchProjectsByProjectName_args() : userName(), projectName() {
  }

  virtual ~Airavata_searchProjectsByProjectName_args() throw() {}

  std::string userName;
  std::string projectName;

  void __set_userName(const std::string& val) {
    userName = val;
  }

  void __set_projectName(const std::string& val) {
    projectName = val;
  }

  bool operator == (const Airavata_searchProjectsByProjectName_args & rhs) const
  {
    if (!(userName == rhs.userName))
      return false;
    if (!(projectName == rhs.projectName))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchProjectsByProjectName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchProjectsByProjectName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_searchProjectsByProjectName_pargs {
 public:


  virtual ~Airavata_searchProjectsByProjectName_pargs() throw() {}

  const std::string* userName;
  const std::string* projectName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_searchProjectsByProjectName_result__isset {
  _Airavata_searchProjectsByProjectName_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_searchProjectsByProjectName_result__isset;

class Airavata_searchProjectsByProjectName_result {
 public:

  Airavata_searchProjectsByProjectName_result() {
  }

  virtual ~Airavata_searchProjectsByProjectName_result() throw() {}

  std::vector< ::Project>  success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_searchProjectsByProjectName_result__isset __isset;

  void __set_success(const std::vector< ::Project> & val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_searchProjectsByProjectName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchProjectsByProjectName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchProjectsByProjectName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_searchProjectsByProjectName_presult__isset {
  _Airavata_searchProjectsByProjectName_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_searchProjectsByProjectName_presult__isset;

class Airavata_searchProjectsByProjectName_presult {
 public:


  virtual ~Airavata_searchProjectsByProjectName_presult() throw() {}

  std::vector< ::Project> * success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_searchProjectsByProjectName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_searchProjectsByProjectDesc_args {
 public:

  Airavata_searchProjectsByProjectDesc_args() : userName(), description() {
  }

  virtual ~Airavata_searchProjectsByProjectDesc_args() throw() {}

  std::string userName;
  std::string description;

  void __set_userName(const std::string& val) {
    userName = val;
  }

  void __set_description(const std::string& val) {
    description = val;
  }

  bool operator == (const Airavata_searchProjectsByProjectDesc_args & rhs) const
  {
    if (!(userName == rhs.userName))
      return false;
    if (!(description == rhs.description))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchProjectsByProjectDesc_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchProjectsByProjectDesc_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_searchProjectsByProjectDesc_pargs {
 public:


  virtual ~Airavata_searchProjectsByProjectDesc_pargs() throw() {}

  const std::string* userName;
  const std::string* description;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_searchProjectsByProjectDesc_result__isset {
  _Airavata_searchProjectsByProjectDesc_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_searchProjectsByProjectDesc_result__isset;

class Airavata_searchProjectsByProjectDesc_result {
 public:

  Airavata_searchProjectsByProjectDesc_result() {
  }

  virtual ~Airavata_searchProjectsByProjectDesc_result() throw() {}

  std::vector< ::Project>  success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_searchProjectsByProjectDesc_result__isset __isset;

  void __set_success(const std::vector< ::Project> & val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_searchProjectsByProjectDesc_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchProjectsByProjectDesc_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchProjectsByProjectDesc_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_searchProjectsByProjectDesc_presult__isset {
  _Airavata_searchProjectsByProjectDesc_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_searchProjectsByProjectDesc_presult__isset;

class Airavata_searchProjectsByProjectDesc_presult {
 public:


  virtual ~Airavata_searchProjectsByProjectDesc_presult() throw() {}

  std::vector< ::Project> * success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_searchProjectsByProjectDesc_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getAllExperimentsInProject_args {
 public:

  Airavata_getAllExperimentsInProject_args() : projectId() {
  }

  virtual ~Airavata_getAllExperimentsInProject_args() throw() {}

  std::string projectId;

  void __set_projectId(const std::string& val) {
    projectId = val;
  }

  bool operator == (const Airavata_getAllExperimentsInProject_args & rhs) const
  {
    if (!(projectId == rhs.projectId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllExperimentsInProject_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllExperimentsInProject_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getAllExperimentsInProject_pargs {
 public:


  virtual ~Airavata_getAllExperimentsInProject_pargs() throw() {}

  const std::string* projectId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllExperimentsInProject_result__isset {
  _Airavata_getAllExperimentsInProject_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAllExperimentsInProject_result__isset;

class Airavata_getAllExperimentsInProject_result {
 public:

  Airavata_getAllExperimentsInProject_result() {
  }

  virtual ~Airavata_getAllExperimentsInProject_result() throw() {}

  std::vector< ::Experiment>  success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAllExperimentsInProject_result__isset __isset;

  void __set_success(const std::vector< ::Experiment> & val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getAllExperimentsInProject_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllExperimentsInProject_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllExperimentsInProject_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllExperimentsInProject_presult__isset {
  _Airavata_getAllExperimentsInProject_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAllExperimentsInProject_presult__isset;

class Airavata_getAllExperimentsInProject_presult {
 public:


  virtual ~Airavata_getAllExperimentsInProject_presult() throw() {}

  std::vector< ::Experiment> * success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAllExperimentsInProject_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getAllUserExperiments_args {
 public:

  Airavata_getAllUserExperiments_args() : userName() {
  }

  virtual ~Airavata_getAllUserExperiments_args() throw() {}

  std::string userName;

  void __set_userName(const std::string& val) {
    userName = val;
  }

  bool operator == (const Airavata_getAllUserExperiments_args & rhs) const
  {
    if (!(userName == rhs.userName))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllUserExperiments_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllUserExperiments_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getAllUserExperiments_pargs {
 public:


  virtual ~Airavata_getAllUserExperiments_pargs() throw() {}

  const std::string* userName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllUserExperiments_result__isset {
  _Airavata_getAllUserExperiments_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAllUserExperiments_result__isset;

class Airavata_getAllUserExperiments_result {
 public:

  Airavata_getAllUserExperiments_result() {
  }

  virtual ~Airavata_getAllUserExperiments_result() throw() {}

  std::vector< ::Experiment>  success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAllUserExperiments_result__isset __isset;

  void __set_success(const std::vector< ::Experiment> & val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getAllUserExperiments_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllUserExperiments_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllUserExperiments_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllUserExperiments_presult__isset {
  _Airavata_getAllUserExperiments_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAllUserExperiments_presult__isset;

class Airavata_getAllUserExperiments_presult {
 public:


  virtual ~Airavata_getAllUserExperiments_presult() throw() {}

  std::vector< ::Experiment> * success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAllUserExperiments_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_createExperiment_args {
 public:

  Airavata_createExperiment_args() {
  }

  virtual ~Airavata_createExperiment_args() throw() {}

   ::Experiment experiment;

  void __set_experiment(const  ::Experiment& val) {
    experiment = val;
  }

  bool operator == (const Airavata_createExperiment_args & rhs) const
  {
    if (!(experiment == rhs.experiment))
      return false;
    return true;
  }
  bool operator != (const Airavata_createExperiment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_createExperiment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_createExperiment_pargs {
 public:


  virtual ~Airavata_createExperiment_pargs() throw() {}

  const  ::Experiment* experiment;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_createExperiment_result__isset {
  _Airavata_createExperiment_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_createExperiment_result__isset;

class Airavata_createExperiment_result {
 public:

  Airavata_createExperiment_result() : success() {
  }

  virtual ~Airavata_createExperiment_result() throw() {}

  std::string success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_createExperiment_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_createExperiment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_createExperiment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_createExperiment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_createExperiment_presult__isset {
  _Airavata_createExperiment_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_createExperiment_presult__isset;

class Airavata_createExperiment_presult {
 public:


  virtual ~Airavata_createExperiment_presult() throw() {}

  std::string* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_createExperiment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getExperiment_args {
 public:

  Airavata_getExperiment_args() : airavataExperimentId() {
  }

  virtual ~Airavata_getExperiment_args() throw() {}

  std::string airavataExperimentId;

  void __set_airavataExperimentId(const std::string& val) {
    airavataExperimentId = val;
  }

  bool operator == (const Airavata_getExperiment_args & rhs) const
  {
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getExperiment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getExperiment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getExperiment_pargs {
 public:


  virtual ~Airavata_getExperiment_pargs() throw() {}

  const std::string* airavataExperimentId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getExperiment_result__isset {
  _Airavata_getExperiment_result__isset() : success(false), ire(false), enf(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_getExperiment_result__isset;

class Airavata_getExperiment_result {
 public:

  Airavata_getExperiment_result() {
  }

  virtual ~Airavata_getExperiment_result() throw() {}

   ::Experiment success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::ExperimentNotFoundException enf;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_getExperiment_result__isset __isset;

  void __set_success(const  ::Experiment& val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_enf(const  ::airavata::api::error::ExperimentNotFoundException& val) {
    enf = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getExperiment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(enf == rhs.enf))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getExperiment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getExperiment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getExperiment_presult__isset {
  _Airavata_getExperiment_presult__isset() : success(false), ire(false), enf(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_getExperiment_presult__isset;

class Airavata_getExperiment_presult {
 public:


  virtual ~Airavata_getExperiment_presult() throw() {}

   ::Experiment* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::ExperimentNotFoundException enf;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_getExperiment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_updateExperiment_args {
 public:

  Airavata_updateExperiment_args() : airavataExperimentId() {
  }

  virtual ~Airavata_updateExperiment_args() throw() {}

  std::string airavataExperimentId;
   ::Experiment experiment;

  void __set_airavataExperimentId(const std::string& val) {
    airavataExperimentId = val;
  }

  void __set_experiment(const  ::Experiment& val) {
    experiment = val;
  }

  bool operator == (const Airavata_updateExperiment_args & rhs) const
  {
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    if (!(experiment == rhs.experiment))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateExperiment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateExperiment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateExperiment_pargs {
 public:


  virtual ~Airavata_updateExperiment_pargs() throw() {}

  const std::string* airavataExperimentId;
  const  ::Experiment* experiment;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateExperiment_result__isset {
  _Airavata_updateExperiment_result__isset() : ire(false), enf(false), ace(false), ase(false) {}
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_updateExperiment_result__isset;

class Airavata_updateExperiment_result {
 public:

  Airavata_updateExperiment_result() {
  }

  virtual ~Airavata_updateExperiment_result() throw() {}

   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::ExperimentNotFoundException enf;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateExperiment_result__isset __isset;

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_enf(const  ::airavata::api::error::ExperimentNotFoundException& val) {
    enf = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_updateExperiment_result & rhs) const
  {
    if (!(ire == rhs.ire))
      return false;
    if (!(enf == rhs.enf))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateExperiment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateExperiment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateExperiment_presult__isset {
  _Airavata_updateExperiment_presult__isset() : ire(false), enf(false), ace(false), ase(false) {}
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_updateExperiment_presult__isset;

class Airavata_updateExperiment_presult {
 public:


  virtual ~Airavata_updateExperiment_presult() throw() {}

   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::ExperimentNotFoundException enf;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateExperiment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_updateExperimentConfiguration_args {
 public:

  Airavata_updateExperimentConfiguration_args() : airavataExperimentId() {
  }

  virtual ~Airavata_updateExperimentConfiguration_args() throw() {}

  std::string airavataExperimentId;
   ::UserConfigurationData userConfiguration;

  void __set_airavataExperimentId(const std::string& val) {
    airavataExperimentId = val;
  }

  void __set_userConfiguration(const  ::UserConfigurationData& val) {
    userConfiguration = val;
  }

  bool operator == (const Airavata_updateExperimentConfiguration_args & rhs) const
  {
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    if (!(userConfiguration == rhs.userConfiguration))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateExperimentConfiguration_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateExperimentConfiguration_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateExperimentConfiguration_pargs {
 public:


  virtual ~Airavata_updateExperimentConfiguration_pargs() throw() {}

  const std::string* airavataExperimentId;
  const  ::UserConfigurationData* userConfiguration;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateExperimentConfiguration_result {
 public:

  Airavata_updateExperimentConfiguration_result() {
  }

  virtual ~Airavata_updateExperimentConfiguration_result() throw() {}


  bool operator == (const Airavata_updateExperimentConfiguration_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Airavata_updateExperimentConfiguration_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateExperimentConfiguration_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateExperimentConfiguration_presult {
 public:


  virtual ~Airavata_updateExperimentConfiguration_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_updateResourceScheduleing_args {
 public:

  Airavata_updateResourceScheduleing_args() : airavataExperimentId() {
  }

  virtual ~Airavata_updateResourceScheduleing_args() throw() {}

  std::string airavataExperimentId;
   ::ComputationalResourceScheduling resourceScheduling;

  void __set_airavataExperimentId(const std::string& val) {
    airavataExperimentId = val;
  }

  void __set_resourceScheduling(const  ::ComputationalResourceScheduling& val) {
    resourceScheduling = val;
  }

  bool operator == (const Airavata_updateResourceScheduleing_args & rhs) const
  {
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    if (!(resourceScheduling == rhs.resourceScheduling))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateResourceScheduleing_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateResourceScheduleing_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateResourceScheduleing_pargs {
 public:


  virtual ~Airavata_updateResourceScheduleing_pargs() throw() {}

  const std::string* airavataExperimentId;
  const  ::ComputationalResourceScheduling* resourceScheduling;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateResourceScheduleing_result {
 public:

  Airavata_updateResourceScheduleing_result() {
  }

  virtual ~Airavata_updateResourceScheduleing_result() throw() {}


  bool operator == (const Airavata_updateResourceScheduleing_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Airavata_updateResourceScheduleing_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateResourceScheduleing_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateResourceScheduleing_presult {
 public:


  virtual ~Airavata_updateResourceScheduleing_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_validateExperiment_args {
 public:

  Airavata_validateExperiment_args() : airavataExperimentId() {
  }

  virtual ~Airavata_validateExperiment_args() throw() {}

  std::string airavataExperimentId;

  void __set_airavataExperimentId(const std::string& val) {
    airavataExperimentId = val;
  }

  bool operator == (const Airavata_validateExperiment_args & rhs) const
  {
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    return true;
  }
  bool operator != (const Airavata_validateExperiment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_validateExperiment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_validateExperiment_pargs {
 public:


  virtual ~Airavata_validateExperiment_pargs() throw() {}

  const std::string* airavataExperimentId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_validateExperiment_result__isset {
  _Airavata_validateExperiment_result__isset() : success(false), ire(false), enf(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_validateExperiment_result__isset;

class Airavata_validateExperiment_result {
 public:

  Airavata_validateExperiment_result() : success(0) {
  }

  virtual ~Airavata_validateExperiment_result() throw() {}

  bool success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::ExperimentNotFoundException enf;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_validateExperiment_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_enf(const  ::airavata::api::error::ExperimentNotFoundException& val) {
    enf = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_validateExperiment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(enf == rhs.enf))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_validateExperiment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_validateExperiment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_validateExperiment_presult__isset {
  _Airavata_validateExperiment_presult__isset() : success(false), ire(false), enf(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_validateExperiment_presult__isset;

class Airavata_validateExperiment_presult {
 public:


  virtual ~Airavata_validateExperiment_presult() throw() {}

  bool* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::ExperimentNotFoundException enf;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_validateExperiment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_launchExperiment_args {
 public:

  Airavata_launchExperiment_args() : airavataExperimentId(), airavataCredStoreToken() {
  }

  virtual ~Airavata_launchExperiment_args() throw() {}

  std::string airavataExperimentId;
  std::string airavataCredStoreToken;

  void __set_airavataExperimentId(const std::string& val) {
    airavataExperimentId = val;
  }

  void __set_airavataCredStoreToken(const std::string& val) {
    airavataCredStoreToken = val;
  }

  bool operator == (const Airavata_launchExperiment_args & rhs) const
  {
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    if (!(airavataCredStoreToken == rhs.airavataCredStoreToken))
      return false;
    return true;
  }
  bool operator != (const Airavata_launchExperiment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_launchExperiment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_launchExperiment_pargs {
 public:


  virtual ~Airavata_launchExperiment_pargs() throw() {}

  const std::string* airavataExperimentId;
  const std::string* airavataCredStoreToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_launchExperiment_result__isset {
  _Airavata_launchExperiment_result__isset() : ire(false), enf(false), ace(false), ase(false), lve(false) {}
  bool ire;
  bool enf;
  bool ace;
  bool ase;
  bool lve;
} _Airavata_launchExperiment_result__isset;

class Airavata_launchExperiment_result {
 public:

  Airavata_launchExperiment_result() {
  }

  virtual ~Airavata_launchExperiment_result() throw() {}

   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::ExperimentNotFoundException enf;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;
   ::airavata::api::error::LaunchValidationException lve;

  _Airavata_launchExperiment_result__isset __isset;

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_enf(const  ::airavata::api::error::ExperimentNotFoundException& val) {
    enf = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  void __set_lve(const  ::airavata::api::error::LaunchValidationException& val) {
    lve = val;
  }

  bool operator == (const Airavata_launchExperiment_result & rhs) const
  {
    if (!(ire == rhs.ire))
      return false;
    if (!(enf == rhs.enf))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(lve == rhs.lve))
      return false;
    return true;
  }
  bool operator != (const Airavata_launchExperiment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_launchExperiment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_launchExperiment_presult__isset {
  _Airavata_launchExperiment_presult__isset() : ire(false), enf(false), ace(false), ase(false), lve(false) {}
  bool ire;
  bool enf;
  bool ace;
  bool ase;
  bool lve;
} _Airavata_launchExperiment_presult__isset;

class Airavata_launchExperiment_presult {
 public:


  virtual ~Airavata_launchExperiment_presult() throw() {}

   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::ExperimentNotFoundException enf;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;
   ::airavata::api::error::LaunchValidationException lve;

  _Airavata_launchExperiment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getExperimentStatus_args {
 public:

  Airavata_getExperimentStatus_args() : airavataExperimentId() {
  }

  virtual ~Airavata_getExperimentStatus_args() throw() {}

  std::string airavataExperimentId;

  void __set_airavataExperimentId(const std::string& val) {
    airavataExperimentId = val;
  }

  bool operator == (const Airavata_getExperimentStatus_args & rhs) const
  {
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getExperimentStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getExperimentStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getExperimentStatus_pargs {
 public:


  virtual ~Airavata_getExperimentStatus_pargs() throw() {}

  const std::string* airavataExperimentId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getExperimentStatus_result__isset {
  _Airavata_getExperimentStatus_result__isset() : success(false), ire(false), enf(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_getExperimentStatus_result__isset;

class Airavata_getExperimentStatus_result {
 public:

  Airavata_getExperimentStatus_result() {
  }

  virtual ~Airavata_getExperimentStatus_result() throw() {}

   ::ExperimentStatus success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::ExperimentNotFoundException enf;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_getExperimentStatus_result__isset __isset;

  void __set_success(const  ::ExperimentStatus& val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_enf(const  ::airavata::api::error::ExperimentNotFoundException& val) {
    enf = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getExperimentStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(enf == rhs.enf))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getExperimentStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getExperimentStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getExperimentStatus_presult__isset {
  _Airavata_getExperimentStatus_presult__isset() : success(false), ire(false), enf(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_getExperimentStatus_presult__isset;

class Airavata_getExperimentStatus_presult {
 public:


  virtual ~Airavata_getExperimentStatus_presult() throw() {}

   ::ExperimentStatus* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::ExperimentNotFoundException enf;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_getExperimentStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getExperimentOutputs_args {
 public:

  Airavata_getExperimentOutputs_args() : airavataExperimentId() {
  }

  virtual ~Airavata_getExperimentOutputs_args() throw() {}

  std::string airavataExperimentId;

  void __set_airavataExperimentId(const std::string& val) {
    airavataExperimentId = val;
  }

  bool operator == (const Airavata_getExperimentOutputs_args & rhs) const
  {
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getExperimentOutputs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getExperimentOutputs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getExperimentOutputs_pargs {
 public:


  virtual ~Airavata_getExperimentOutputs_pargs() throw() {}

  const std::string* airavataExperimentId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getExperimentOutputs_result__isset {
  _Airavata_getExperimentOutputs_result__isset() : success(false) {}
  bool success;
} _Airavata_getExperimentOutputs_result__isset;

class Airavata_getExperimentOutputs_result {
 public:

  Airavata_getExperimentOutputs_result() {
  }

  virtual ~Airavata_getExperimentOutputs_result() throw() {}

  std::vector< ::DataObjectType>  success;

  _Airavata_getExperimentOutputs_result__isset __isset;

  void __set_success(const std::vector< ::DataObjectType> & val) {
    success = val;
  }

  bool operator == (const Airavata_getExperimentOutputs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Airavata_getExperimentOutputs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getExperimentOutputs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getExperimentOutputs_presult__isset {
  _Airavata_getExperimentOutputs_presult__isset() : success(false) {}
  bool success;
} _Airavata_getExperimentOutputs_presult__isset;

class Airavata_getExperimentOutputs_presult {
 public:


  virtual ~Airavata_getExperimentOutputs_presult() throw() {}

  std::vector< ::DataObjectType> * success;

  _Airavata_getExperimentOutputs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getJobStatuses_args {
 public:

  Airavata_getJobStatuses_args() : airavataExperimentId() {
  }

  virtual ~Airavata_getJobStatuses_args() throw() {}

  std::string airavataExperimentId;

  void __set_airavataExperimentId(const std::string& val) {
    airavataExperimentId = val;
  }

  bool operator == (const Airavata_getJobStatuses_args & rhs) const
  {
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getJobStatuses_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getJobStatuses_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getJobStatuses_pargs {
 public:


  virtual ~Airavata_getJobStatuses_pargs() throw() {}

  const std::string* airavataExperimentId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getJobStatuses_result__isset {
  _Airavata_getJobStatuses_result__isset() : success(false) {}
  bool success;
} _Airavata_getJobStatuses_result__isset;

class Airavata_getJobStatuses_result {
 public:

  Airavata_getJobStatuses_result() {
  }

  virtual ~Airavata_getJobStatuses_result() throw() {}

  std::map<std::string,  ::JobStatus>  success;

  _Airavata_getJobStatuses_result__isset __isset;

  void __set_success(const std::map<std::string,  ::JobStatus> & val) {
    success = val;
  }

  bool operator == (const Airavata_getJobStatuses_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Airavata_getJobStatuses_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getJobStatuses_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getJobStatuses_presult__isset {
  _Airavata_getJobStatuses_presult__isset() : success(false) {}
  bool success;
} _Airavata_getJobStatuses_presult__isset;

class Airavata_getJobStatuses_presult {
 public:


  virtual ~Airavata_getJobStatuses_presult() throw() {}

  std::map<std::string,  ::JobStatus> * success;

  _Airavata_getJobStatuses_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Airavata_cloneExperiment_args__isset {
  _Airavata_cloneExperiment_args__isset() : existingExperimentID(false), newExperimentName(false) {}
  bool existingExperimentID;
  bool newExperimentName;
} _Airavata_cloneExperiment_args__isset;

class Airavata_cloneExperiment_args {
 public:

  Airavata_cloneExperiment_args() : existingExperimentID(), newExperimentName() {
  }

  virtual ~Airavata_cloneExperiment_args() throw() {}

  std::string existingExperimentID;
  std::string newExperimentName;

  _Airavata_cloneExperiment_args__isset __isset;

  void __set_existingExperimentID(const std::string& val) {
    existingExperimentID = val;
  }

  void __set_newExperimentName(const std::string& val) {
    newExperimentName = val;
  }

  bool operator == (const Airavata_cloneExperiment_args & rhs) const
  {
    if (!(existingExperimentID == rhs.existingExperimentID))
      return false;
    if (!(newExperimentName == rhs.newExperimentName))
      return false;
    return true;
  }
  bool operator != (const Airavata_cloneExperiment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_cloneExperiment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_cloneExperiment_pargs {
 public:


  virtual ~Airavata_cloneExperiment_pargs() throw() {}

  const std::string* existingExperimentID;
  const std::string* newExperimentName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_cloneExperiment_result__isset {
  _Airavata_cloneExperiment_result__isset() : success(false), ire(false), enf(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_cloneExperiment_result__isset;

class Airavata_cloneExperiment_result {
 public:

  Airavata_cloneExperiment_result() : success() {
  }

  virtual ~Airavata_cloneExperiment_result() throw() {}

  std::string success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::ExperimentNotFoundException enf;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_cloneExperiment_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_enf(const  ::airavata::api::error::ExperimentNotFoundException& val) {
    enf = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_cloneExperiment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(enf == rhs.enf))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_cloneExperiment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_cloneExperiment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_cloneExperiment_presult__isset {
  _Airavata_cloneExperiment_presult__isset() : success(false), ire(false), enf(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_cloneExperiment_presult__isset;

class Airavata_cloneExperiment_presult {
 public:


  virtual ~Airavata_cloneExperiment_presult() throw() {}

  std::string* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::ExperimentNotFoundException enf;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_cloneExperiment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Airavata_terminateExperiment_args__isset {
  _Airavata_terminateExperiment_args__isset() : airavataExperimentId(false) {}
  bool airavataExperimentId;
} _Airavata_terminateExperiment_args__isset;

class Airavata_terminateExperiment_args {
 public:

  Airavata_terminateExperiment_args() : airavataExperimentId() {
  }

  virtual ~Airavata_terminateExperiment_args() throw() {}

  std::string airavataExperimentId;

  _Airavata_terminateExperiment_args__isset __isset;

  void __set_airavataExperimentId(const std::string& val) {
    airavataExperimentId = val;
  }

  bool operator == (const Airavata_terminateExperiment_args & rhs) const
  {
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    return true;
  }
  bool operator != (const Airavata_terminateExperiment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_terminateExperiment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_terminateExperiment_pargs {
 public:


  virtual ~Airavata_terminateExperiment_pargs() throw() {}

  const std::string* airavataExperimentId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_terminateExperiment_result__isset {
  _Airavata_terminateExperiment_result__isset() : ire(false), enf(false), ace(false), ase(false) {}
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_terminateExperiment_result__isset;

class Airavata_terminateExperiment_result {
 public:

  Airavata_terminateExperiment_result() {
  }

  virtual ~Airavata_terminateExperiment_result() throw() {}

   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::ExperimentNotFoundException enf;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_terminateExperiment_result__isset __isset;

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_enf(const  ::airavata::api::error::ExperimentNotFoundException& val) {
    enf = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_terminateExperiment_result & rhs) const
  {
    if (!(ire == rhs.ire))
      return false;
    if (!(enf == rhs.enf))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_terminateExperiment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_terminateExperiment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_terminateExperiment_presult__isset {
  _Airavata_terminateExperiment_presult__isset() : ire(false), enf(false), ace(false), ase(false) {}
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_terminateExperiment_presult__isset;

class Airavata_terminateExperiment_presult {
 public:


  virtual ~Airavata_terminateExperiment_presult() throw() {}

   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::ExperimentNotFoundException enf;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_terminateExperiment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AiravataClient : virtual public AiravataIf {
 public:
  AiravataClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  AiravataClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetAPIVersion(std::string& _return);
  void send_GetAPIVersion();
  void recv_GetAPIVersion(std::string& _return);
  void createProject(std::string& _return, const  ::Project& project);
  void send_createProject(const  ::Project& project);
  void recv_createProject(std::string& _return);
  void updateProject(const  ::Project& project);
  void send_updateProject(const  ::Project& project);
  void recv_updateProject();
  void getProject( ::Project& _return, const std::string& projectId);
  void send_getProject(const std::string& projectId);
  void recv_getProject( ::Project& _return);
  void getAllUserProjects(std::vector< ::Project> & _return, const std::string& userName);
  void send_getAllUserProjects(const std::string& userName);
  void recv_getAllUserProjects(std::vector< ::Project> & _return);
  void searchProjectsByProjectName(std::vector< ::Project> & _return, const std::string& userName, const std::string& projectName);
  void send_searchProjectsByProjectName(const std::string& userName, const std::string& projectName);
  void recv_searchProjectsByProjectName(std::vector< ::Project> & _return);
  void searchProjectsByProjectDesc(std::vector< ::Project> & _return, const std::string& userName, const std::string& description);
  void send_searchProjectsByProjectDesc(const std::string& userName, const std::string& description);
  void recv_searchProjectsByProjectDesc(std::vector< ::Project> & _return);
  void getAllExperimentsInProject(std::vector< ::Experiment> & _return, const std::string& projectId);
  void send_getAllExperimentsInProject(const std::string& projectId);
  void recv_getAllExperimentsInProject(std::vector< ::Experiment> & _return);
  void getAllUserExperiments(std::vector< ::Experiment> & _return, const std::string& userName);
  void send_getAllUserExperiments(const std::string& userName);
  void recv_getAllUserExperiments(std::vector< ::Experiment> & _return);
  void createExperiment(std::string& _return, const  ::Experiment& experiment);
  void send_createExperiment(const  ::Experiment& experiment);
  void recv_createExperiment(std::string& _return);
  void getExperiment( ::Experiment& _return, const std::string& airavataExperimentId);
  void send_getExperiment(const std::string& airavataExperimentId);
  void recv_getExperiment( ::Experiment& _return);
  void updateExperiment(const std::string& airavataExperimentId, const  ::Experiment& experiment);
  void send_updateExperiment(const std::string& airavataExperimentId, const  ::Experiment& experiment);
  void recv_updateExperiment();
  void updateExperimentConfiguration(const std::string& airavataExperimentId, const  ::UserConfigurationData& userConfiguration);
  void send_updateExperimentConfiguration(const std::string& airavataExperimentId, const  ::UserConfigurationData& userConfiguration);
  void recv_updateExperimentConfiguration();
  void updateResourceScheduleing(const std::string& airavataExperimentId, const  ::ComputationalResourceScheduling& resourceScheduling);
  void send_updateResourceScheduleing(const std::string& airavataExperimentId, const  ::ComputationalResourceScheduling& resourceScheduling);
  void recv_updateResourceScheduleing();
  bool validateExperiment(const std::string& airavataExperimentId);
  void send_validateExperiment(const std::string& airavataExperimentId);
  bool recv_validateExperiment();
  void launchExperiment(const std::string& airavataExperimentId, const std::string& airavataCredStoreToken);
  void send_launchExperiment(const std::string& airavataExperimentId, const std::string& airavataCredStoreToken);
  void recv_launchExperiment();
  void getExperimentStatus( ::ExperimentStatus& _return, const std::string& airavataExperimentId);
  void send_getExperimentStatus(const std::string& airavataExperimentId);
  void recv_getExperimentStatus( ::ExperimentStatus& _return);
  void getExperimentOutputs(std::vector< ::DataObjectType> & _return, const std::string& airavataExperimentId);
  void send_getExperimentOutputs(const std::string& airavataExperimentId);
  void recv_getExperimentOutputs(std::vector< ::DataObjectType> & _return);
  void getJobStatuses(std::map<std::string,  ::JobStatus> & _return, const std::string& airavataExperimentId);
  void send_getJobStatuses(const std::string& airavataExperimentId);
  void recv_getJobStatuses(std::map<std::string,  ::JobStatus> & _return);
  void cloneExperiment(std::string& _return, const std::string& existingExperimentID, const std::string& newExperimentName);
  void send_cloneExperiment(const std::string& existingExperimentID, const std::string& newExperimentName);
  void recv_cloneExperiment(std::string& _return);
  void terminateExperiment(const std::string& airavataExperimentId);
  void send_terminateExperiment(const std::string& airavataExperimentId);
  void recv_terminateExperiment();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AiravataProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<AiravataIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AiravataProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_GetAPIVersion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createProject(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateProject(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getProject(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllUserProjects(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_searchProjectsByProjectName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_searchProjectsByProjectDesc(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllExperimentsInProject(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllUserExperiments(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createExperiment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getExperiment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateExperiment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateExperimentConfiguration(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateResourceScheduleing(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_validateExperiment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_launchExperiment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getExperimentStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getExperimentOutputs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getJobStatuses(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_cloneExperiment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_terminateExperiment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AiravataProcessor(boost::shared_ptr<AiravataIf> iface) :
    iface_(iface) {
    processMap_["GetAPIVersion"] = &AiravataProcessor::process_GetAPIVersion;
    processMap_["createProject"] = &AiravataProcessor::process_createProject;
    processMap_["updateProject"] = &AiravataProcessor::process_updateProject;
    processMap_["getProject"] = &AiravataProcessor::process_getProject;
    processMap_["getAllUserProjects"] = &AiravataProcessor::process_getAllUserProjects;
    processMap_["searchProjectsByProjectName"] = &AiravataProcessor::process_searchProjectsByProjectName;
    processMap_["searchProjectsByProjectDesc"] = &AiravataProcessor::process_searchProjectsByProjectDesc;
    processMap_["getAllExperimentsInProject"] = &AiravataProcessor::process_getAllExperimentsInProject;
    processMap_["getAllUserExperiments"] = &AiravataProcessor::process_getAllUserExperiments;
    processMap_["createExperiment"] = &AiravataProcessor::process_createExperiment;
    processMap_["getExperiment"] = &AiravataProcessor::process_getExperiment;
    processMap_["updateExperiment"] = &AiravataProcessor::process_updateExperiment;
    processMap_["updateExperimentConfiguration"] = &AiravataProcessor::process_updateExperimentConfiguration;
    processMap_["updateResourceScheduleing"] = &AiravataProcessor::process_updateResourceScheduleing;
    processMap_["validateExperiment"] = &AiravataProcessor::process_validateExperiment;
    processMap_["launchExperiment"] = &AiravataProcessor::process_launchExperiment;
    processMap_["getExperimentStatus"] = &AiravataProcessor::process_getExperimentStatus;
    processMap_["getExperimentOutputs"] = &AiravataProcessor::process_getExperimentOutputs;
    processMap_["getJobStatuses"] = &AiravataProcessor::process_getJobStatuses;
    processMap_["cloneExperiment"] = &AiravataProcessor::process_cloneExperiment;
    processMap_["terminateExperiment"] = &AiravataProcessor::process_terminateExperiment;
  }

  virtual ~AiravataProcessor() {}
};

class AiravataProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AiravataProcessorFactory(const ::boost::shared_ptr< AiravataIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< AiravataIfFactory > handlerFactory_;
};

class AiravataMultiface : virtual public AiravataIf {
 public:
  AiravataMultiface(std::vector<boost::shared_ptr<AiravataIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AiravataMultiface() {}
 protected:
  std::vector<boost::shared_ptr<AiravataIf> > ifaces_;
  AiravataMultiface() {}
  void add(boost::shared_ptr<AiravataIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void GetAPIVersion(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAPIVersion(_return);
    }
    ifaces_[i]->GetAPIVersion(_return);
    return;
  }

  void createProject(std::string& _return, const  ::Project& project) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createProject(_return, project);
    }
    ifaces_[i]->createProject(_return, project);
    return;
  }

  void updateProject(const  ::Project& project) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateProject(project);
    }
    ifaces_[i]->updateProject(project);
  }

  void getProject( ::Project& _return, const std::string& projectId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getProject(_return, projectId);
    }
    ifaces_[i]->getProject(_return, projectId);
    return;
  }

  void getAllUserProjects(std::vector< ::Project> & _return, const std::string& userName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllUserProjects(_return, userName);
    }
    ifaces_[i]->getAllUserProjects(_return, userName);
    return;
  }

  void searchProjectsByProjectName(std::vector< ::Project> & _return, const std::string& userName, const std::string& projectName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->searchProjectsByProjectName(_return, userName, projectName);
    }
    ifaces_[i]->searchProjectsByProjectName(_return, userName, projectName);
    return;
  }

  void searchProjectsByProjectDesc(std::vector< ::Project> & _return, const std::string& userName, const std::string& description) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->searchProjectsByProjectDesc(_return, userName, description);
    }
    ifaces_[i]->searchProjectsByProjectDesc(_return, userName, description);
    return;
  }

  void getAllExperimentsInProject(std::vector< ::Experiment> & _return, const std::string& projectId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllExperimentsInProject(_return, projectId);
    }
    ifaces_[i]->getAllExperimentsInProject(_return, projectId);
    return;
  }

  void getAllUserExperiments(std::vector< ::Experiment> & _return, const std::string& userName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllUserExperiments(_return, userName);
    }
    ifaces_[i]->getAllUserExperiments(_return, userName);
    return;
  }

  void createExperiment(std::string& _return, const  ::Experiment& experiment) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createExperiment(_return, experiment);
    }
    ifaces_[i]->createExperiment(_return, experiment);
    return;
  }

  void getExperiment( ::Experiment& _return, const std::string& airavataExperimentId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getExperiment(_return, airavataExperimentId);
    }
    ifaces_[i]->getExperiment(_return, airavataExperimentId);
    return;
  }

  void updateExperiment(const std::string& airavataExperimentId, const  ::Experiment& experiment) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateExperiment(airavataExperimentId, experiment);
    }
    ifaces_[i]->updateExperiment(airavataExperimentId, experiment);
  }

  void updateExperimentConfiguration(const std::string& airavataExperimentId, const  ::UserConfigurationData& userConfiguration) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateExperimentConfiguration(airavataExperimentId, userConfiguration);
    }
    ifaces_[i]->updateExperimentConfiguration(airavataExperimentId, userConfiguration);
  }

  void updateResourceScheduleing(const std::string& airavataExperimentId, const  ::ComputationalResourceScheduling& resourceScheduling) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateResourceScheduleing(airavataExperimentId, resourceScheduling);
    }
    ifaces_[i]->updateResourceScheduleing(airavataExperimentId, resourceScheduling);
  }

  bool validateExperiment(const std::string& airavataExperimentId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->validateExperiment(airavataExperimentId);
    }
    return ifaces_[i]->validateExperiment(airavataExperimentId);
  }

  void launchExperiment(const std::string& airavataExperimentId, const std::string& airavataCredStoreToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->launchExperiment(airavataExperimentId, airavataCredStoreToken);
    }
    ifaces_[i]->launchExperiment(airavataExperimentId, airavataCredStoreToken);
  }

  void getExperimentStatus( ::ExperimentStatus& _return, const std::string& airavataExperimentId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getExperimentStatus(_return, airavataExperimentId);
    }
    ifaces_[i]->getExperimentStatus(_return, airavataExperimentId);
    return;
  }

  void getExperimentOutputs(std::vector< ::DataObjectType> & _return, const std::string& airavataExperimentId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getExperimentOutputs(_return, airavataExperimentId);
    }
    ifaces_[i]->getExperimentOutputs(_return, airavataExperimentId);
    return;
  }

  void getJobStatuses(std::map<std::string,  ::JobStatus> & _return, const std::string& airavataExperimentId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getJobStatuses(_return, airavataExperimentId);
    }
    ifaces_[i]->getJobStatuses(_return, airavataExperimentId);
    return;
  }

  void cloneExperiment(std::string& _return, const std::string& existingExperimentID, const std::string& newExperimentName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cloneExperiment(_return, existingExperimentID, newExperimentName);
    }
    ifaces_[i]->cloneExperiment(_return, existingExperimentID, newExperimentName);
    return;
  }

  void terminateExperiment(const std::string& airavataExperimentId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->terminateExperiment(airavataExperimentId);
    }
    ifaces_[i]->terminateExperiment(airavataExperimentId);
  }

};

}} // namespace

#endif
