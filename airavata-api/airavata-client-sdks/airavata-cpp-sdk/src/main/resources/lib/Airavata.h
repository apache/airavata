/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Airavata_H
#define Airavata_H

#include <thrift/TDispatchProcessor.h>
#include "airavataAPI_types.h"

namespace airavata { namespace api {

class AiravataIf {
 public:
  virtual ~AiravataIf() {}
  virtual void getAPIVersion(std::string& _return) = 0;
  virtual void createProject(std::string& _return, const  ::Project& project) = 0;
  virtual void updateProject(const std::string& projectId, const  ::Project& updatedProject) = 0;
  virtual void getProject( ::Project& _return, const std::string& projectId) = 0;
  virtual void getAllUserProjects(std::vector< ::Project> & _return, const std::string& userName) = 0;
  virtual void searchProjectsByProjectName(std::vector< ::Project> & _return, const std::string& userName, const std::string& projectName) = 0;
  virtual void searchProjectsByProjectDesc(std::vector< ::Project> & _return, const std::string& userName, const std::string& description) = 0;
  virtual void searchExperimentsByName(std::vector< ::ExperimentSummary> & _return, const std::string& userName, const std::string& expName) = 0;
  virtual void searchExperimentsByDesc(std::vector< ::ExperimentSummary> & _return, const std::string& userName, const std::string& description) = 0;
  virtual void searchExperimentsByApplication(std::vector< ::ExperimentSummary> & _return, const std::string& userName, const std::string& applicationId) = 0;
  virtual void getAllExperimentsInProject(std::vector< ::Experiment> & _return, const std::string& projectId) = 0;
  virtual void getAllUserExperiments(std::vector< ::Experiment> & _return, const std::string& userName) = 0;
  virtual void createExperiment(std::string& _return, const  ::Experiment& experiment) = 0;
  virtual void getExperiment( ::Experiment& _return, const std::string& airavataExperimentId) = 0;
  virtual void updateExperiment(const std::string& airavataExperimentId, const  ::Experiment& experiment) = 0;
  virtual void updateExperimentConfiguration(const std::string& airavataExperimentId, const  ::UserConfigurationData& userConfiguration) = 0;
  virtual void updateResourceScheduleing(const std::string& airavataExperimentId, const  ::ComputationalResourceScheduling& resourceScheduling) = 0;
  virtual bool validateExperiment(const std::string& airavataExperimentId) = 0;
  virtual void launchExperiment(const std::string& airavataExperimentId, const std::string& airavataCredStoreToken) = 0;
  virtual void getExperimentStatus( ::ExperimentStatus& _return, const std::string& airavataExperimentId) = 0;
  virtual void getExperimentOutputs(std::vector< ::DataObjectType> & _return, const std::string& airavataExperimentId) = 0;
  virtual void getJobStatuses(std::map<std::string,  ::JobStatus> & _return, const std::string& airavataExperimentId) = 0;
  virtual void cloneExperiment(std::string& _return, const std::string& existingExperimentID, const std::string& newExperimentName) = 0;
  virtual void terminateExperiment(const std::string& airavataExperimentId) = 0;
  virtual void registerApplicationModule(std::string& _return, const  ::ApplicationModule& applicationModule) = 0;
  virtual void getApplicationModule( ::ApplicationModule& _return, const std::string& appModuleId) = 0;
  virtual bool updateApplicationModule(const std::string& appModuleId, const  ::ApplicationModule& applicationModule) = 0;
  virtual bool deleteApplicationModule(const std::string& appModuleId) = 0;
  virtual void registerApplicationDeployment(std::string& _return, const  ::ApplicationDeploymentDescription& applicationDeployment) = 0;
  virtual void getApplicationDeployment( ::ApplicationDeploymentDescription& _return, const std::string& appDeploymentId) = 0;
  virtual bool updateApplicationDeployment(const std::string& appDeploymentId, const  ::ApplicationDeploymentDescription& applicationDeployment) = 0;
  virtual bool deleteApplicationDeployment(const std::string& appDeploymentId) = 0;
  virtual void getAppModuleDeployedResources(std::vector<std::string> & _return, const std::string& appModuleId) = 0;
  virtual void registerApplicationInterface(std::string& _return, const  ::ApplicationInterfaceDescription& applicationInterface) = 0;
  virtual void getApplicationInterface( ::ApplicationInterfaceDescription& _return, const std::string& appInterfaceId) = 0;
  virtual bool updateApplicationInterface(const std::string& appInterfaceId, const  ::ApplicationInterfaceDescription& applicationInterface) = 0;
  virtual bool deleteApplicationInterface(const std::string& appInterfaceId) = 0;
  virtual void getApplicationInputs(std::vector< ::InputDataObjectType> & _return, const std::string& appInterfaceId) = 0;
  virtual void getApplicationOutputs(std::vector< ::OutputDataObjectType> & _return, const std::string& appInterfaceId) = 0;
  virtual void registerComputeResource(std::string& _return, const  ::ComputeResourceDescription& computeResourceDescription) = 0;
  virtual void getComputeResource( ::ComputeResourceDescription& _return, const std::string& computeResourceId) = 0;
  virtual bool updateComputeResource(const std::string& computeResourceId, const  ::ComputeResourceDescription& computeResourceDescription) = 0;
  virtual bool deleteComputeResource(const std::string& computeResourceId) = 0;
  virtual bool addLocalSubmissionDetails(const std::string& computeResourceId, const int32_t priorityOrder, const  ::LOCALSubmission& localSubmission) = 0;
  virtual bool updateLocalSubmissionDetails(const std::string& jobSubmissionInterfaceId, const  ::LOCALSubmission& localSubmission) = 0;
  virtual bool addSSHJobSubmissionDetails(const std::string& computeResourceId, const int32_t priorityOrder, const  ::SSHJobSubmission& sshJobSubmission) = 0;
  virtual bool updateSSHJobSubmissionDetails(const std::string& jobSubmissionInterfaceId, const  ::SSHJobSubmission& sshJobSubmission) = 0;
  virtual bool addLocalDataMovementDetails(const std::string& computeResourceId, const int32_t priorityOrder, const  ::LOCALDataMovement& localDataMovement) = 0;
  virtual bool updateLocalDataMovementDetails(const std::string& jobSubmissionInterfaceId, const  ::LOCALDataMovement& localDataMovement) = 0;
  virtual bool addSCPDataMovementDetails(const std::string& computeResourceId, const int32_t priorityOrder, const  ::SCPDataMovement& scpDataMovement) = 0;
  virtual bool updateSCPDataMovementDetails(const std::string& jobSubmissionInterfaceId, const  ::SCPDataMovement& scpDataMovement) = 0;
  virtual bool addGridFTPDataMovementDetails(const std::string& computeResourceId, const int32_t priorityOrder, const  ::GridFTPDataMovement& gridFTPDataMovement) = 0;
  virtual bool updateGridFTPDataMovementDetails(const std::string& jobSubmissionInterfaceId, const  ::GridFTPDataMovement& gridFTPDataMovement) = 0;
  virtual bool changeJobSubmissionPriority(const std::string& jobSubmissionInterfaceId, const int32_t newPriorityOrder) = 0;
  virtual bool changeDataMovementPriority(const std::string& dataMovementInterfaceId, const int32_t newPriorityOrder) = 0;
  virtual bool changeJobSubmissionPriorities(const std::map<std::string, int32_t> & jobSubmissionPriorityMap) = 0;
  virtual bool changeDataMovementPriorities(const std::map<std::string, int32_t> & dataMovementPriorityMap) = 0;
  virtual bool deleteJobSubmissionInterface(const std::string& jobSubmissionInterfaceId) = 0;
  virtual bool deleteDataMovementInterface(const std::string& dataMovementInterfaceId) = 0;
  virtual void registerGatewayResourceProfile(std::string& _return, const  ::GatewayResourceProfile& gatewayResourceProfile) = 0;
  virtual void getGatewayResourceProfile( ::GatewayResourceProfile& _return, const std::string& gatewayID) = 0;
  virtual bool updateGatewayResourceProfile(const std::string& gatewayID, const  ::GatewayResourceProfile& gatewayResourceProfile) = 0;
  virtual bool deleteGatewayResourceProfile(const std::string& gatewayID) = 0;
  virtual bool addGatewayComputeResourcePreference(const std::string& gatewayID, const std::string& computeResourceId, const  ::ComputeResourcePreference& computeResourcePreference) = 0;
  virtual void getGatewayComputeResourcePreference( ::ComputeResourcePreference& _return, const std::string& gatewayID, const std::string& computeResourceId) = 0;
  virtual void getAllGatewayComputeResourcePreferences(std::vector< ::ComputeResourcePreference> & _return, const std::string& gatewayID) = 0;
  virtual bool updateGatewayComputeResourcePreference(const std::string& gatewayID, const std::string& computeResourceId, const  ::ComputeResourcePreference& computeResourcePreference) = 0;
  virtual bool deleteGatewayComputeResourcePreference(const std::string& gatewayID, const std::string& computeResourceId) = 0;
};

class AiravataIfFactory {
 public:
  typedef AiravataIf Handler;

  virtual ~AiravataIfFactory() {}

  virtual AiravataIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AiravataIf* /* handler */) = 0;
};

class AiravataIfSingletonFactory : virtual public AiravataIfFactory {
 public:
  AiravataIfSingletonFactory(const boost::shared_ptr<AiravataIf>& iface) : iface_(iface) {}
  virtual ~AiravataIfSingletonFactory() {}

  virtual AiravataIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AiravataIf* /* handler */) {}

 protected:
  boost::shared_ptr<AiravataIf> iface_;
};

class AiravataNull : virtual public AiravataIf {
 public:
  virtual ~AiravataNull() {}
  void getAPIVersion(std::string& /* _return */) {
    return;
  }
  void createProject(std::string& /* _return */, const  ::Project& /* project */) {
    return;
  }
  void updateProject(const std::string& /* projectId */, const  ::Project& /* updatedProject */) {
    return;
  }
  void getProject( ::Project& /* _return */, const std::string& /* projectId */) {
    return;
  }
  void getAllUserProjects(std::vector< ::Project> & /* _return */, const std::string& /* userName */) {
    return;
  }
  void searchProjectsByProjectName(std::vector< ::Project> & /* _return */, const std::string& /* userName */, const std::string& /* projectName */) {
    return;
  }
  void searchProjectsByProjectDesc(std::vector< ::Project> & /* _return */, const std::string& /* userName */, const std::string& /* description */) {
    return;
  }
  void searchExperimentsByName(std::vector< ::ExperimentSummary> & /* _return */, const std::string& /* userName */, const std::string& /* expName */) {
    return;
  }
  void searchExperimentsByDesc(std::vector< ::ExperimentSummary> & /* _return */, const std::string& /* userName */, const std::string& /* description */) {
    return;
  }
  void searchExperimentsByApplication(std::vector< ::ExperimentSummary> & /* _return */, const std::string& /* userName */, const std::string& /* applicationId */) {
    return;
  }
  void getAllExperimentsInProject(std::vector< ::Experiment> & /* _return */, const std::string& /* projectId */) {
    return;
  }
  void getAllUserExperiments(std::vector< ::Experiment> & /* _return */, const std::string& /* userName */) {
    return;
  }
  void createExperiment(std::string& /* _return */, const  ::Experiment& /* experiment */) {
    return;
  }
  void getExperiment( ::Experiment& /* _return */, const std::string& /* airavataExperimentId */) {
    return;
  }
  void updateExperiment(const std::string& /* airavataExperimentId */, const  ::Experiment& /* experiment */) {
    return;
  }
  void updateExperimentConfiguration(const std::string& /* airavataExperimentId */, const  ::UserConfigurationData& /* userConfiguration */) {
    return;
  }
  void updateResourceScheduleing(const std::string& /* airavataExperimentId */, const  ::ComputationalResourceScheduling& /* resourceScheduling */) {
    return;
  }
  bool validateExperiment(const std::string& /* airavataExperimentId */) {
    bool _return = false;
    return _return;
  }
  void launchExperiment(const std::string& /* airavataExperimentId */, const std::string& /* airavataCredStoreToken */) {
    return;
  }
  void getExperimentStatus( ::ExperimentStatus& /* _return */, const std::string& /* airavataExperimentId */) {
    return;
  }
  void getExperimentOutputs(std::vector< ::DataObjectType> & /* _return */, const std::string& /* airavataExperimentId */) {
    return;
  }
  void getJobStatuses(std::map<std::string,  ::JobStatus> & /* _return */, const std::string& /* airavataExperimentId */) {
    return;
  }
  void cloneExperiment(std::string& /* _return */, const std::string& /* existingExperimentID */, const std::string& /* newExperimentName */) {
    return;
  }
  void terminateExperiment(const std::string& /* airavataExperimentId */) {
    return;
  }
  void registerApplicationModule(std::string& /* _return */, const  ::ApplicationModule& /* applicationModule */) {
    return;
  }
  void getApplicationModule( ::ApplicationModule& /* _return */, const std::string& /* appModuleId */) {
    return;
  }
  bool updateApplicationModule(const std::string& /* appModuleId */, const  ::ApplicationModule& /* applicationModule */) {
    bool _return = false;
    return _return;
  }
  bool deleteApplicationModule(const std::string& /* appModuleId */) {
    bool _return = false;
    return _return;
  }
  void registerApplicationDeployment(std::string& /* _return */, const  ::ApplicationDeploymentDescription& /* applicationDeployment */) {
    return;
  }
  void getApplicationDeployment( ::ApplicationDeploymentDescription& /* _return */, const std::string& /* appDeploymentId */) {
    return;
  }
  bool updateApplicationDeployment(const std::string& /* appDeploymentId */, const  ::ApplicationDeploymentDescription& /* applicationDeployment */) {
    bool _return = false;
    return _return;
  }
  bool deleteApplicationDeployment(const std::string& /* appDeploymentId */) {
    bool _return = false;
    return _return;
  }
  void getAppModuleDeployedResources(std::vector<std::string> & /* _return */, const std::string& /* appModuleId */) {
    return;
  }
  void registerApplicationInterface(std::string& /* _return */, const  ::ApplicationInterfaceDescription& /* applicationInterface */) {
    return;
  }
  void getApplicationInterface( ::ApplicationInterfaceDescription& /* _return */, const std::string& /* appInterfaceId */) {
    return;
  }
  bool updateApplicationInterface(const std::string& /* appInterfaceId */, const  ::ApplicationInterfaceDescription& /* applicationInterface */) {
    bool _return = false;
    return _return;
  }
  bool deleteApplicationInterface(const std::string& /* appInterfaceId */) {
    bool _return = false;
    return _return;
  }
  void getApplicationInputs(std::vector< ::InputDataObjectType> & /* _return */, const std::string& /* appInterfaceId */) {
    return;
  }
  void getApplicationOutputs(std::vector< ::OutputDataObjectType> & /* _return */, const std::string& /* appInterfaceId */) {
    return;
  }
  void registerComputeResource(std::string& /* _return */, const  ::ComputeResourceDescription& /* computeResourceDescription */) {
    return;
  }
  void getComputeResource( ::ComputeResourceDescription& /* _return */, const std::string& /* computeResourceId */) {
    return;
  }
  bool updateComputeResource(const std::string& /* computeResourceId */, const  ::ComputeResourceDescription& /* computeResourceDescription */) {
    bool _return = false;
    return _return;
  }
  bool deleteComputeResource(const std::string& /* computeResourceId */) {
    bool _return = false;
    return _return;
  }
  bool addLocalSubmissionDetails(const std::string& /* computeResourceId */, const int32_t /* priorityOrder */, const  ::LOCALSubmission& /* localSubmission */) {
    bool _return = false;
    return _return;
  }
  bool updateLocalSubmissionDetails(const std::string& /* jobSubmissionInterfaceId */, const  ::LOCALSubmission& /* localSubmission */) {
    bool _return = false;
    return _return;
  }
  bool addSSHJobSubmissionDetails(const std::string& /* computeResourceId */, const int32_t /* priorityOrder */, const  ::SSHJobSubmission& /* sshJobSubmission */) {
    bool _return = false;
    return _return;
  }
  bool updateSSHJobSubmissionDetails(const std::string& /* jobSubmissionInterfaceId */, const  ::SSHJobSubmission& /* sshJobSubmission */) {
    bool _return = false;
    return _return;
  }
  bool addLocalDataMovementDetails(const std::string& /* computeResourceId */, const int32_t /* priorityOrder */, const  ::LOCALDataMovement& /* localDataMovement */) {
    bool _return = false;
    return _return;
  }
  bool updateLocalDataMovementDetails(const std::string& /* jobSubmissionInterfaceId */, const  ::LOCALDataMovement& /* localDataMovement */) {
    bool _return = false;
    return _return;
  }
  bool addSCPDataMovementDetails(const std::string& /* computeResourceId */, const int32_t /* priorityOrder */, const  ::SCPDataMovement& /* scpDataMovement */) {
    bool _return = false;
    return _return;
  }
  bool updateSCPDataMovementDetails(const std::string& /* jobSubmissionInterfaceId */, const  ::SCPDataMovement& /* scpDataMovement */) {
    bool _return = false;
    return _return;
  }
  bool addGridFTPDataMovementDetails(const std::string& /* computeResourceId */, const int32_t /* priorityOrder */, const  ::GridFTPDataMovement& /* gridFTPDataMovement */) {
    bool _return = false;
    return _return;
  }
  bool updateGridFTPDataMovementDetails(const std::string& /* jobSubmissionInterfaceId */, const  ::GridFTPDataMovement& /* gridFTPDataMovement */) {
    bool _return = false;
    return _return;
  }
  bool changeJobSubmissionPriority(const std::string& /* jobSubmissionInterfaceId */, const int32_t /* newPriorityOrder */) {
    bool _return = false;
    return _return;
  }
  bool changeDataMovementPriority(const std::string& /* dataMovementInterfaceId */, const int32_t /* newPriorityOrder */) {
    bool _return = false;
    return _return;
  }
  bool changeJobSubmissionPriorities(const std::map<std::string, int32_t> & /* jobSubmissionPriorityMap */) {
    bool _return = false;
    return _return;
  }
  bool changeDataMovementPriorities(const std::map<std::string, int32_t> & /* dataMovementPriorityMap */) {
    bool _return = false;
    return _return;
  }
  bool deleteJobSubmissionInterface(const std::string& /* jobSubmissionInterfaceId */) {
    bool _return = false;
    return _return;
  }
  bool deleteDataMovementInterface(const std::string& /* dataMovementInterfaceId */) {
    bool _return = false;
    return _return;
  }
  void registerGatewayResourceProfile(std::string& /* _return */, const  ::GatewayResourceProfile& /* gatewayResourceProfile */) {
    return;
  }
  void getGatewayResourceProfile( ::GatewayResourceProfile& /* _return */, const std::string& /* gatewayID */) {
    return;
  }
  bool updateGatewayResourceProfile(const std::string& /* gatewayID */, const  ::GatewayResourceProfile& /* gatewayResourceProfile */) {
    bool _return = false;
    return _return;
  }
  bool deleteGatewayResourceProfile(const std::string& /* gatewayID */) {
    bool _return = false;
    return _return;
  }
  bool addGatewayComputeResourcePreference(const std::string& /* gatewayID */, const std::string& /* computeResourceId */, const  ::ComputeResourcePreference& /* computeResourcePreference */) {
    bool _return = false;
    return _return;
  }
  void getGatewayComputeResourcePreference( ::ComputeResourcePreference& /* _return */, const std::string& /* gatewayID */, const std::string& /* computeResourceId */) {
    return;
  }
  void getAllGatewayComputeResourcePreferences(std::vector< ::ComputeResourcePreference> & /* _return */, const std::string& /* gatewayID */) {
    return;
  }
  bool updateGatewayComputeResourcePreference(const std::string& /* gatewayID */, const std::string& /* computeResourceId */, const  ::ComputeResourcePreference& /* computeResourcePreference */) {
    bool _return = false;
    return _return;
  }
  bool deleteGatewayComputeResourcePreference(const std::string& /* gatewayID */, const std::string& /* computeResourceId */) {
    bool _return = false;
    return _return;
  }
};


class Airavata_getAPIVersion_args {
 public:

  Airavata_getAPIVersion_args() {
  }

  virtual ~Airavata_getAPIVersion_args() throw() {}


  bool operator == (const Airavata_getAPIVersion_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Airavata_getAPIVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAPIVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getAPIVersion_pargs {
 public:


  virtual ~Airavata_getAPIVersion_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAPIVersion_result__isset {
  _Airavata_getAPIVersion_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAPIVersion_result__isset;

class Airavata_getAPIVersion_result {
 public:

  Airavata_getAPIVersion_result() : success() {
  }

  virtual ~Airavata_getAPIVersion_result() throw() {}

  std::string success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAPIVersion_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getAPIVersion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAPIVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAPIVersion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAPIVersion_presult__isset {
  _Airavata_getAPIVersion_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAPIVersion_presult__isset;

class Airavata_getAPIVersion_presult {
 public:


  virtual ~Airavata_getAPIVersion_presult() throw() {}

  std::string* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAPIVersion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_createProject_args {
 public:

  Airavata_createProject_args() {
  }

  virtual ~Airavata_createProject_args() throw() {}

   ::Project project;

  void __set_project(const  ::Project& val) {
    project = val;
  }

  bool operator == (const Airavata_createProject_args & rhs) const
  {
    if (!(project == rhs.project))
      return false;
    return true;
  }
  bool operator != (const Airavata_createProject_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_createProject_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_createProject_pargs {
 public:


  virtual ~Airavata_createProject_pargs() throw() {}

  const  ::Project* project;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_createProject_result__isset {
  _Airavata_createProject_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_createProject_result__isset;

class Airavata_createProject_result {
 public:

  Airavata_createProject_result() : success() {
  }

  virtual ~Airavata_createProject_result() throw() {}

  std::string success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_createProject_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_createProject_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_createProject_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_createProject_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_createProject_presult__isset {
  _Airavata_createProject_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_createProject_presult__isset;

class Airavata_createProject_presult {
 public:


  virtual ~Airavata_createProject_presult() throw() {}

  std::string* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_createProject_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_updateProject_args {
 public:

  Airavata_updateProject_args() : projectId() {
  }

  virtual ~Airavata_updateProject_args() throw() {}

  std::string projectId;
   ::Project updatedProject;

  void __set_projectId(const std::string& val) {
    projectId = val;
  }

  void __set_updatedProject(const  ::Project& val) {
    updatedProject = val;
  }

  bool operator == (const Airavata_updateProject_args & rhs) const
  {
    if (!(projectId == rhs.projectId))
      return false;
    if (!(updatedProject == rhs.updatedProject))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateProject_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateProject_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateProject_pargs {
 public:


  virtual ~Airavata_updateProject_pargs() throw() {}

  const std::string* projectId;
  const  ::Project* updatedProject;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateProject_result__isset {
  _Airavata_updateProject_result__isset() : ire(false), ace(false), ase(false), pnfe(false) {}
  bool ire;
  bool ace;
  bool ase;
  bool pnfe;
} _Airavata_updateProject_result__isset;

class Airavata_updateProject_result {
 public:

  Airavata_updateProject_result() {
  }

  virtual ~Airavata_updateProject_result() throw() {}

   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;
   ::airavata::api::error::ProjectNotFoundException pnfe;

  _Airavata_updateProject_result__isset __isset;

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  void __set_pnfe(const  ::airavata::api::error::ProjectNotFoundException& val) {
    pnfe = val;
  }

  bool operator == (const Airavata_updateProject_result & rhs) const
  {
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(pnfe == rhs.pnfe))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateProject_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateProject_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateProject_presult__isset {
  _Airavata_updateProject_presult__isset() : ire(false), ace(false), ase(false), pnfe(false) {}
  bool ire;
  bool ace;
  bool ase;
  bool pnfe;
} _Airavata_updateProject_presult__isset;

class Airavata_updateProject_presult {
 public:


  virtual ~Airavata_updateProject_presult() throw() {}

   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;
   ::airavata::api::error::ProjectNotFoundException pnfe;

  _Airavata_updateProject_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getProject_args {
 public:

  Airavata_getProject_args() : projectId() {
  }

  virtual ~Airavata_getProject_args() throw() {}

  std::string projectId;

  void __set_projectId(const std::string& val) {
    projectId = val;
  }

  bool operator == (const Airavata_getProject_args & rhs) const
  {
    if (!(projectId == rhs.projectId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getProject_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getProject_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getProject_pargs {
 public:


  virtual ~Airavata_getProject_pargs() throw() {}

  const std::string* projectId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getProject_result__isset {
  _Airavata_getProject_result__isset() : success(false), ire(false), ace(false), ase(false), pnfe(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
  bool pnfe;
} _Airavata_getProject_result__isset;

class Airavata_getProject_result {
 public:

  Airavata_getProject_result() {
  }

  virtual ~Airavata_getProject_result() throw() {}

   ::Project success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;
   ::airavata::api::error::ProjectNotFoundException pnfe;

  _Airavata_getProject_result__isset __isset;

  void __set_success(const  ::Project& val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  void __set_pnfe(const  ::airavata::api::error::ProjectNotFoundException& val) {
    pnfe = val;
  }

  bool operator == (const Airavata_getProject_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(pnfe == rhs.pnfe))
      return false;
    return true;
  }
  bool operator != (const Airavata_getProject_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getProject_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getProject_presult__isset {
  _Airavata_getProject_presult__isset() : success(false), ire(false), ace(false), ase(false), pnfe(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
  bool pnfe;
} _Airavata_getProject_presult__isset;

class Airavata_getProject_presult {
 public:


  virtual ~Airavata_getProject_presult() throw() {}

   ::Project* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;
   ::airavata::api::error::ProjectNotFoundException pnfe;

  _Airavata_getProject_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getAllUserProjects_args {
 public:

  Airavata_getAllUserProjects_args() : userName() {
  }

  virtual ~Airavata_getAllUserProjects_args() throw() {}

  std::string userName;

  void __set_userName(const std::string& val) {
    userName = val;
  }

  bool operator == (const Airavata_getAllUserProjects_args & rhs) const
  {
    if (!(userName == rhs.userName))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllUserProjects_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllUserProjects_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getAllUserProjects_pargs {
 public:


  virtual ~Airavata_getAllUserProjects_pargs() throw() {}

  const std::string* userName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllUserProjects_result__isset {
  _Airavata_getAllUserProjects_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAllUserProjects_result__isset;

class Airavata_getAllUserProjects_result {
 public:

  Airavata_getAllUserProjects_result() {
  }

  virtual ~Airavata_getAllUserProjects_result() throw() {}

  std::vector< ::Project>  success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAllUserProjects_result__isset __isset;

  void __set_success(const std::vector< ::Project> & val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getAllUserProjects_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllUserProjects_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllUserProjects_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllUserProjects_presult__isset {
  _Airavata_getAllUserProjects_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAllUserProjects_presult__isset;

class Airavata_getAllUserProjects_presult {
 public:


  virtual ~Airavata_getAllUserProjects_presult() throw() {}

  std::vector< ::Project> * success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAllUserProjects_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_searchProjectsByProjectName_args {
 public:

  Airavata_searchProjectsByProjectName_args() : userName(), projectName() {
  }

  virtual ~Airavata_searchProjectsByProjectName_args() throw() {}

  std::string userName;
  std::string projectName;

  void __set_userName(const std::string& val) {
    userName = val;
  }

  void __set_projectName(const std::string& val) {
    projectName = val;
  }

  bool operator == (const Airavata_searchProjectsByProjectName_args & rhs) const
  {
    if (!(userName == rhs.userName))
      return false;
    if (!(projectName == rhs.projectName))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchProjectsByProjectName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchProjectsByProjectName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_searchProjectsByProjectName_pargs {
 public:


  virtual ~Airavata_searchProjectsByProjectName_pargs() throw() {}

  const std::string* userName;
  const std::string* projectName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_searchProjectsByProjectName_result__isset {
  _Airavata_searchProjectsByProjectName_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_searchProjectsByProjectName_result__isset;

class Airavata_searchProjectsByProjectName_result {
 public:

  Airavata_searchProjectsByProjectName_result() {
  }

  virtual ~Airavata_searchProjectsByProjectName_result() throw() {}

  std::vector< ::Project>  success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_searchProjectsByProjectName_result__isset __isset;

  void __set_success(const std::vector< ::Project> & val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_searchProjectsByProjectName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchProjectsByProjectName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchProjectsByProjectName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_searchProjectsByProjectName_presult__isset {
  _Airavata_searchProjectsByProjectName_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_searchProjectsByProjectName_presult__isset;

class Airavata_searchProjectsByProjectName_presult {
 public:


  virtual ~Airavata_searchProjectsByProjectName_presult() throw() {}

  std::vector< ::Project> * success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_searchProjectsByProjectName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_searchProjectsByProjectDesc_args {
 public:

  Airavata_searchProjectsByProjectDesc_args() : userName(), description() {
  }

  virtual ~Airavata_searchProjectsByProjectDesc_args() throw() {}

  std::string userName;
  std::string description;

  void __set_userName(const std::string& val) {
    userName = val;
  }

  void __set_description(const std::string& val) {
    description = val;
  }

  bool operator == (const Airavata_searchProjectsByProjectDesc_args & rhs) const
  {
    if (!(userName == rhs.userName))
      return false;
    if (!(description == rhs.description))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchProjectsByProjectDesc_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchProjectsByProjectDesc_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_searchProjectsByProjectDesc_pargs {
 public:


  virtual ~Airavata_searchProjectsByProjectDesc_pargs() throw() {}

  const std::string* userName;
  const std::string* description;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_searchProjectsByProjectDesc_result__isset {
  _Airavata_searchProjectsByProjectDesc_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_searchProjectsByProjectDesc_result__isset;

class Airavata_searchProjectsByProjectDesc_result {
 public:

  Airavata_searchProjectsByProjectDesc_result() {
  }

  virtual ~Airavata_searchProjectsByProjectDesc_result() throw() {}

  std::vector< ::Project>  success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_searchProjectsByProjectDesc_result__isset __isset;

  void __set_success(const std::vector< ::Project> & val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_searchProjectsByProjectDesc_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchProjectsByProjectDesc_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchProjectsByProjectDesc_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_searchProjectsByProjectDesc_presult__isset {
  _Airavata_searchProjectsByProjectDesc_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_searchProjectsByProjectDesc_presult__isset;

class Airavata_searchProjectsByProjectDesc_presult {
 public:


  virtual ~Airavata_searchProjectsByProjectDesc_presult() throw() {}

  std::vector< ::Project> * success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_searchProjectsByProjectDesc_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_searchExperimentsByName_args {
 public:

  Airavata_searchExperimentsByName_args() : userName(), expName() {
  }

  virtual ~Airavata_searchExperimentsByName_args() throw() {}

  std::string userName;
  std::string expName;

  void __set_userName(const std::string& val) {
    userName = val;
  }

  void __set_expName(const std::string& val) {
    expName = val;
  }

  bool operator == (const Airavata_searchExperimentsByName_args & rhs) const
  {
    if (!(userName == rhs.userName))
      return false;
    if (!(expName == rhs.expName))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchExperimentsByName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchExperimentsByName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_searchExperimentsByName_pargs {
 public:


  virtual ~Airavata_searchExperimentsByName_pargs() throw() {}

  const std::string* userName;
  const std::string* expName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_searchExperimentsByName_result__isset {
  _Airavata_searchExperimentsByName_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_searchExperimentsByName_result__isset;

class Airavata_searchExperimentsByName_result {
 public:

  Airavata_searchExperimentsByName_result() {
  }

  virtual ~Airavata_searchExperimentsByName_result() throw() {}

  std::vector< ::ExperimentSummary>  success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_searchExperimentsByName_result__isset __isset;

  void __set_success(const std::vector< ::ExperimentSummary> & val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_searchExperimentsByName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchExperimentsByName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchExperimentsByName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_searchExperimentsByName_presult__isset {
  _Airavata_searchExperimentsByName_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_searchExperimentsByName_presult__isset;

class Airavata_searchExperimentsByName_presult {
 public:


  virtual ~Airavata_searchExperimentsByName_presult() throw() {}

  std::vector< ::ExperimentSummary> * success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_searchExperimentsByName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_searchExperimentsByDesc_args {
 public:

  Airavata_searchExperimentsByDesc_args() : userName(), description() {
  }

  virtual ~Airavata_searchExperimentsByDesc_args() throw() {}

  std::string userName;
  std::string description;

  void __set_userName(const std::string& val) {
    userName = val;
  }

  void __set_description(const std::string& val) {
    description = val;
  }

  bool operator == (const Airavata_searchExperimentsByDesc_args & rhs) const
  {
    if (!(userName == rhs.userName))
      return false;
    if (!(description == rhs.description))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchExperimentsByDesc_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchExperimentsByDesc_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_searchExperimentsByDesc_pargs {
 public:


  virtual ~Airavata_searchExperimentsByDesc_pargs() throw() {}

  const std::string* userName;
  const std::string* description;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_searchExperimentsByDesc_result__isset {
  _Airavata_searchExperimentsByDesc_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_searchExperimentsByDesc_result__isset;

class Airavata_searchExperimentsByDesc_result {
 public:

  Airavata_searchExperimentsByDesc_result() {
  }

  virtual ~Airavata_searchExperimentsByDesc_result() throw() {}

  std::vector< ::ExperimentSummary>  success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_searchExperimentsByDesc_result__isset __isset;

  void __set_success(const std::vector< ::ExperimentSummary> & val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_searchExperimentsByDesc_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchExperimentsByDesc_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchExperimentsByDesc_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_searchExperimentsByDesc_presult__isset {
  _Airavata_searchExperimentsByDesc_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_searchExperimentsByDesc_presult__isset;

class Airavata_searchExperimentsByDesc_presult {
 public:


  virtual ~Airavata_searchExperimentsByDesc_presult() throw() {}

  std::vector< ::ExperimentSummary> * success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_searchExperimentsByDesc_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_searchExperimentsByApplication_args {
 public:

  Airavata_searchExperimentsByApplication_args() : userName(), applicationId() {
  }

  virtual ~Airavata_searchExperimentsByApplication_args() throw() {}

  std::string userName;
  std::string applicationId;

  void __set_userName(const std::string& val) {
    userName = val;
  }

  void __set_applicationId(const std::string& val) {
    applicationId = val;
  }

  bool operator == (const Airavata_searchExperimentsByApplication_args & rhs) const
  {
    if (!(userName == rhs.userName))
      return false;
    if (!(applicationId == rhs.applicationId))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchExperimentsByApplication_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchExperimentsByApplication_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_searchExperimentsByApplication_pargs {
 public:


  virtual ~Airavata_searchExperimentsByApplication_pargs() throw() {}

  const std::string* userName;
  const std::string* applicationId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_searchExperimentsByApplication_result__isset {
  _Airavata_searchExperimentsByApplication_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_searchExperimentsByApplication_result__isset;

class Airavata_searchExperimentsByApplication_result {
 public:

  Airavata_searchExperimentsByApplication_result() {
  }

  virtual ~Airavata_searchExperimentsByApplication_result() throw() {}

  std::vector< ::ExperimentSummary>  success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_searchExperimentsByApplication_result__isset __isset;

  void __set_success(const std::vector< ::ExperimentSummary> & val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_searchExperimentsByApplication_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchExperimentsByApplication_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchExperimentsByApplication_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_searchExperimentsByApplication_presult__isset {
  _Airavata_searchExperimentsByApplication_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_searchExperimentsByApplication_presult__isset;

class Airavata_searchExperimentsByApplication_presult {
 public:


  virtual ~Airavata_searchExperimentsByApplication_presult() throw() {}

  std::vector< ::ExperimentSummary> * success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_searchExperimentsByApplication_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getAllExperimentsInProject_args {
 public:

  Airavata_getAllExperimentsInProject_args() : projectId() {
  }

  virtual ~Airavata_getAllExperimentsInProject_args() throw() {}

  std::string projectId;

  void __set_projectId(const std::string& val) {
    projectId = val;
  }

  bool operator == (const Airavata_getAllExperimentsInProject_args & rhs) const
  {
    if (!(projectId == rhs.projectId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllExperimentsInProject_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllExperimentsInProject_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getAllExperimentsInProject_pargs {
 public:


  virtual ~Airavata_getAllExperimentsInProject_pargs() throw() {}

  const std::string* projectId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllExperimentsInProject_result__isset {
  _Airavata_getAllExperimentsInProject_result__isset() : success(false), ire(false), ace(false), ase(false), pnfe(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
  bool pnfe;
} _Airavata_getAllExperimentsInProject_result__isset;

class Airavata_getAllExperimentsInProject_result {
 public:

  Airavata_getAllExperimentsInProject_result() {
  }

  virtual ~Airavata_getAllExperimentsInProject_result() throw() {}

  std::vector< ::Experiment>  success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;
   ::airavata::api::error::ProjectNotFoundException pnfe;

  _Airavata_getAllExperimentsInProject_result__isset __isset;

  void __set_success(const std::vector< ::Experiment> & val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  void __set_pnfe(const  ::airavata::api::error::ProjectNotFoundException& val) {
    pnfe = val;
  }

  bool operator == (const Airavata_getAllExperimentsInProject_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(pnfe == rhs.pnfe))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllExperimentsInProject_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllExperimentsInProject_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllExperimentsInProject_presult__isset {
  _Airavata_getAllExperimentsInProject_presult__isset() : success(false), ire(false), ace(false), ase(false), pnfe(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
  bool pnfe;
} _Airavata_getAllExperimentsInProject_presult__isset;

class Airavata_getAllExperimentsInProject_presult {
 public:


  virtual ~Airavata_getAllExperimentsInProject_presult() throw() {}

  std::vector< ::Experiment> * success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;
   ::airavata::api::error::ProjectNotFoundException pnfe;

  _Airavata_getAllExperimentsInProject_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getAllUserExperiments_args {
 public:

  Airavata_getAllUserExperiments_args() : userName() {
  }

  virtual ~Airavata_getAllUserExperiments_args() throw() {}

  std::string userName;

  void __set_userName(const std::string& val) {
    userName = val;
  }

  bool operator == (const Airavata_getAllUserExperiments_args & rhs) const
  {
    if (!(userName == rhs.userName))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllUserExperiments_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllUserExperiments_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getAllUserExperiments_pargs {
 public:


  virtual ~Airavata_getAllUserExperiments_pargs() throw() {}

  const std::string* userName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllUserExperiments_result__isset {
  _Airavata_getAllUserExperiments_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAllUserExperiments_result__isset;

class Airavata_getAllUserExperiments_result {
 public:

  Airavata_getAllUserExperiments_result() {
  }

  virtual ~Airavata_getAllUserExperiments_result() throw() {}

  std::vector< ::Experiment>  success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAllUserExperiments_result__isset __isset;

  void __set_success(const std::vector< ::Experiment> & val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getAllUserExperiments_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllUserExperiments_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllUserExperiments_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllUserExperiments_presult__isset {
  _Airavata_getAllUserExperiments_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAllUserExperiments_presult__isset;

class Airavata_getAllUserExperiments_presult {
 public:


  virtual ~Airavata_getAllUserExperiments_presult() throw() {}

  std::vector< ::Experiment> * success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAllUserExperiments_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_createExperiment_args {
 public:

  Airavata_createExperiment_args() {
  }

  virtual ~Airavata_createExperiment_args() throw() {}

   ::Experiment experiment;

  void __set_experiment(const  ::Experiment& val) {
    experiment = val;
  }

  bool operator == (const Airavata_createExperiment_args & rhs) const
  {
    if (!(experiment == rhs.experiment))
      return false;
    return true;
  }
  bool operator != (const Airavata_createExperiment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_createExperiment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_createExperiment_pargs {
 public:


  virtual ~Airavata_createExperiment_pargs() throw() {}

  const  ::Experiment* experiment;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_createExperiment_result__isset {
  _Airavata_createExperiment_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_createExperiment_result__isset;

class Airavata_createExperiment_result {
 public:

  Airavata_createExperiment_result() : success() {
  }

  virtual ~Airavata_createExperiment_result() throw() {}

  std::string success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_createExperiment_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_createExperiment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_createExperiment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_createExperiment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_createExperiment_presult__isset {
  _Airavata_createExperiment_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_createExperiment_presult__isset;

class Airavata_createExperiment_presult {
 public:


  virtual ~Airavata_createExperiment_presult() throw() {}

  std::string* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_createExperiment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getExperiment_args {
 public:

  Airavata_getExperiment_args() : airavataExperimentId() {
  }

  virtual ~Airavata_getExperiment_args() throw() {}

  std::string airavataExperimentId;

  void __set_airavataExperimentId(const std::string& val) {
    airavataExperimentId = val;
  }

  bool operator == (const Airavata_getExperiment_args & rhs) const
  {
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getExperiment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getExperiment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getExperiment_pargs {
 public:


  virtual ~Airavata_getExperiment_pargs() throw() {}

  const std::string* airavataExperimentId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getExperiment_result__isset {
  _Airavata_getExperiment_result__isset() : success(false), ire(false), enf(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_getExperiment_result__isset;

class Airavata_getExperiment_result {
 public:

  Airavata_getExperiment_result() {
  }

  virtual ~Airavata_getExperiment_result() throw() {}

   ::Experiment success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::ExperimentNotFoundException enf;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_getExperiment_result__isset __isset;

  void __set_success(const  ::Experiment& val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_enf(const  ::airavata::api::error::ExperimentNotFoundException& val) {
    enf = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getExperiment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(enf == rhs.enf))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getExperiment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getExperiment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getExperiment_presult__isset {
  _Airavata_getExperiment_presult__isset() : success(false), ire(false), enf(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_getExperiment_presult__isset;

class Airavata_getExperiment_presult {
 public:


  virtual ~Airavata_getExperiment_presult() throw() {}

   ::Experiment* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::ExperimentNotFoundException enf;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_getExperiment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_updateExperiment_args {
 public:

  Airavata_updateExperiment_args() : airavataExperimentId() {
  }

  virtual ~Airavata_updateExperiment_args() throw() {}

  std::string airavataExperimentId;
   ::Experiment experiment;

  void __set_airavataExperimentId(const std::string& val) {
    airavataExperimentId = val;
  }

  void __set_experiment(const  ::Experiment& val) {
    experiment = val;
  }

  bool operator == (const Airavata_updateExperiment_args & rhs) const
  {
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    if (!(experiment == rhs.experiment))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateExperiment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateExperiment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateExperiment_pargs {
 public:


  virtual ~Airavata_updateExperiment_pargs() throw() {}

  const std::string* airavataExperimentId;
  const  ::Experiment* experiment;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateExperiment_result__isset {
  _Airavata_updateExperiment_result__isset() : ire(false), enf(false), ace(false), ase(false) {}
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_updateExperiment_result__isset;

class Airavata_updateExperiment_result {
 public:

  Airavata_updateExperiment_result() {
  }

  virtual ~Airavata_updateExperiment_result() throw() {}

   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::ExperimentNotFoundException enf;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateExperiment_result__isset __isset;

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_enf(const  ::airavata::api::error::ExperimentNotFoundException& val) {
    enf = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_updateExperiment_result & rhs) const
  {
    if (!(ire == rhs.ire))
      return false;
    if (!(enf == rhs.enf))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateExperiment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateExperiment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateExperiment_presult__isset {
  _Airavata_updateExperiment_presult__isset() : ire(false), enf(false), ace(false), ase(false) {}
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_updateExperiment_presult__isset;

class Airavata_updateExperiment_presult {
 public:


  virtual ~Airavata_updateExperiment_presult() throw() {}

   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::ExperimentNotFoundException enf;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateExperiment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_updateExperimentConfiguration_args {
 public:

  Airavata_updateExperimentConfiguration_args() : airavataExperimentId() {
  }

  virtual ~Airavata_updateExperimentConfiguration_args() throw() {}

  std::string airavataExperimentId;
   ::UserConfigurationData userConfiguration;

  void __set_airavataExperimentId(const std::string& val) {
    airavataExperimentId = val;
  }

  void __set_userConfiguration(const  ::UserConfigurationData& val) {
    userConfiguration = val;
  }

  bool operator == (const Airavata_updateExperimentConfiguration_args & rhs) const
  {
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    if (!(userConfiguration == rhs.userConfiguration))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateExperimentConfiguration_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateExperimentConfiguration_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateExperimentConfiguration_pargs {
 public:


  virtual ~Airavata_updateExperimentConfiguration_pargs() throw() {}

  const std::string* airavataExperimentId;
  const  ::UserConfigurationData* userConfiguration;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateExperimentConfiguration_result {
 public:

  Airavata_updateExperimentConfiguration_result() {
  }

  virtual ~Airavata_updateExperimentConfiguration_result() throw() {}


  bool operator == (const Airavata_updateExperimentConfiguration_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Airavata_updateExperimentConfiguration_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateExperimentConfiguration_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateExperimentConfiguration_presult {
 public:


  virtual ~Airavata_updateExperimentConfiguration_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_updateResourceScheduleing_args {
 public:

  Airavata_updateResourceScheduleing_args() : airavataExperimentId() {
  }

  virtual ~Airavata_updateResourceScheduleing_args() throw() {}

  std::string airavataExperimentId;
   ::ComputationalResourceScheduling resourceScheduling;

  void __set_airavataExperimentId(const std::string& val) {
    airavataExperimentId = val;
  }

  void __set_resourceScheduling(const  ::ComputationalResourceScheduling& val) {
    resourceScheduling = val;
  }

  bool operator == (const Airavata_updateResourceScheduleing_args & rhs) const
  {
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    if (!(resourceScheduling == rhs.resourceScheduling))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateResourceScheduleing_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateResourceScheduleing_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateResourceScheduleing_pargs {
 public:


  virtual ~Airavata_updateResourceScheduleing_pargs() throw() {}

  const std::string* airavataExperimentId;
  const  ::ComputationalResourceScheduling* resourceScheduling;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateResourceScheduleing_result {
 public:

  Airavata_updateResourceScheduleing_result() {
  }

  virtual ~Airavata_updateResourceScheduleing_result() throw() {}


  bool operator == (const Airavata_updateResourceScheduleing_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Airavata_updateResourceScheduleing_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateResourceScheduleing_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateResourceScheduleing_presult {
 public:


  virtual ~Airavata_updateResourceScheduleing_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_validateExperiment_args {
 public:

  Airavata_validateExperiment_args() : airavataExperimentId() {
  }

  virtual ~Airavata_validateExperiment_args() throw() {}

  std::string airavataExperimentId;

  void __set_airavataExperimentId(const std::string& val) {
    airavataExperimentId = val;
  }

  bool operator == (const Airavata_validateExperiment_args & rhs) const
  {
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    return true;
  }
  bool operator != (const Airavata_validateExperiment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_validateExperiment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_validateExperiment_pargs {
 public:


  virtual ~Airavata_validateExperiment_pargs() throw() {}

  const std::string* airavataExperimentId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_validateExperiment_result__isset {
  _Airavata_validateExperiment_result__isset() : success(false), ire(false), enf(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_validateExperiment_result__isset;

class Airavata_validateExperiment_result {
 public:

  Airavata_validateExperiment_result() : success(0) {
  }

  virtual ~Airavata_validateExperiment_result() throw() {}

  bool success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::ExperimentNotFoundException enf;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_validateExperiment_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_enf(const  ::airavata::api::error::ExperimentNotFoundException& val) {
    enf = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_validateExperiment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(enf == rhs.enf))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_validateExperiment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_validateExperiment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_validateExperiment_presult__isset {
  _Airavata_validateExperiment_presult__isset() : success(false), ire(false), enf(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_validateExperiment_presult__isset;

class Airavata_validateExperiment_presult {
 public:


  virtual ~Airavata_validateExperiment_presult() throw() {}

  bool* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::ExperimentNotFoundException enf;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_validateExperiment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_launchExperiment_args {
 public:

  Airavata_launchExperiment_args() : airavataExperimentId(), airavataCredStoreToken() {
  }

  virtual ~Airavata_launchExperiment_args() throw() {}

  std::string airavataExperimentId;
  std::string airavataCredStoreToken;

  void __set_airavataExperimentId(const std::string& val) {
    airavataExperimentId = val;
  }

  void __set_airavataCredStoreToken(const std::string& val) {
    airavataCredStoreToken = val;
  }

  bool operator == (const Airavata_launchExperiment_args & rhs) const
  {
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    if (!(airavataCredStoreToken == rhs.airavataCredStoreToken))
      return false;
    return true;
  }
  bool operator != (const Airavata_launchExperiment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_launchExperiment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_launchExperiment_pargs {
 public:


  virtual ~Airavata_launchExperiment_pargs() throw() {}

  const std::string* airavataExperimentId;
  const std::string* airavataCredStoreToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_launchExperiment_result__isset {
  _Airavata_launchExperiment_result__isset() : ire(false), enf(false), ace(false), ase(false), lve(false) {}
  bool ire;
  bool enf;
  bool ace;
  bool ase;
  bool lve;
} _Airavata_launchExperiment_result__isset;

class Airavata_launchExperiment_result {
 public:

  Airavata_launchExperiment_result() {
  }

  virtual ~Airavata_launchExperiment_result() throw() {}

   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::ExperimentNotFoundException enf;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;
   ::airavata::api::error::LaunchValidationException lve;

  _Airavata_launchExperiment_result__isset __isset;

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_enf(const  ::airavata::api::error::ExperimentNotFoundException& val) {
    enf = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  void __set_lve(const  ::airavata::api::error::LaunchValidationException& val) {
    lve = val;
  }

  bool operator == (const Airavata_launchExperiment_result & rhs) const
  {
    if (!(ire == rhs.ire))
      return false;
    if (!(enf == rhs.enf))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(lve == rhs.lve))
      return false;
    return true;
  }
  bool operator != (const Airavata_launchExperiment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_launchExperiment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_launchExperiment_presult__isset {
  _Airavata_launchExperiment_presult__isset() : ire(false), enf(false), ace(false), ase(false), lve(false) {}
  bool ire;
  bool enf;
  bool ace;
  bool ase;
  bool lve;
} _Airavata_launchExperiment_presult__isset;

class Airavata_launchExperiment_presult {
 public:


  virtual ~Airavata_launchExperiment_presult() throw() {}

   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::ExperimentNotFoundException enf;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;
   ::airavata::api::error::LaunchValidationException lve;

  _Airavata_launchExperiment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getExperimentStatus_args {
 public:

  Airavata_getExperimentStatus_args() : airavataExperimentId() {
  }

  virtual ~Airavata_getExperimentStatus_args() throw() {}

  std::string airavataExperimentId;

  void __set_airavataExperimentId(const std::string& val) {
    airavataExperimentId = val;
  }

  bool operator == (const Airavata_getExperimentStatus_args & rhs) const
  {
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getExperimentStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getExperimentStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getExperimentStatus_pargs {
 public:


  virtual ~Airavata_getExperimentStatus_pargs() throw() {}

  const std::string* airavataExperimentId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getExperimentStatus_result__isset {
  _Airavata_getExperimentStatus_result__isset() : success(false), ire(false), enf(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_getExperimentStatus_result__isset;

class Airavata_getExperimentStatus_result {
 public:

  Airavata_getExperimentStatus_result() {
  }

  virtual ~Airavata_getExperimentStatus_result() throw() {}

   ::ExperimentStatus success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::ExperimentNotFoundException enf;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_getExperimentStatus_result__isset __isset;

  void __set_success(const  ::ExperimentStatus& val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_enf(const  ::airavata::api::error::ExperimentNotFoundException& val) {
    enf = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getExperimentStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(enf == rhs.enf))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getExperimentStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getExperimentStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getExperimentStatus_presult__isset {
  _Airavata_getExperimentStatus_presult__isset() : success(false), ire(false), enf(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_getExperimentStatus_presult__isset;

class Airavata_getExperimentStatus_presult {
 public:


  virtual ~Airavata_getExperimentStatus_presult() throw() {}

   ::ExperimentStatus* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::ExperimentNotFoundException enf;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_getExperimentStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getExperimentOutputs_args {
 public:

  Airavata_getExperimentOutputs_args() : airavataExperimentId() {
  }

  virtual ~Airavata_getExperimentOutputs_args() throw() {}

  std::string airavataExperimentId;

  void __set_airavataExperimentId(const std::string& val) {
    airavataExperimentId = val;
  }

  bool operator == (const Airavata_getExperimentOutputs_args & rhs) const
  {
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getExperimentOutputs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getExperimentOutputs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getExperimentOutputs_pargs {
 public:


  virtual ~Airavata_getExperimentOutputs_pargs() throw() {}

  const std::string* airavataExperimentId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getExperimentOutputs_result__isset {
  _Airavata_getExperimentOutputs_result__isset() : success(false) {}
  bool success;
} _Airavata_getExperimentOutputs_result__isset;

class Airavata_getExperimentOutputs_result {
 public:

  Airavata_getExperimentOutputs_result() {
  }

  virtual ~Airavata_getExperimentOutputs_result() throw() {}

  std::vector< ::DataObjectType>  success;

  _Airavata_getExperimentOutputs_result__isset __isset;

  void __set_success(const std::vector< ::DataObjectType> & val) {
    success = val;
  }

  bool operator == (const Airavata_getExperimentOutputs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Airavata_getExperimentOutputs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getExperimentOutputs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getExperimentOutputs_presult__isset {
  _Airavata_getExperimentOutputs_presult__isset() : success(false) {}
  bool success;
} _Airavata_getExperimentOutputs_presult__isset;

class Airavata_getExperimentOutputs_presult {
 public:


  virtual ~Airavata_getExperimentOutputs_presult() throw() {}

  std::vector< ::DataObjectType> * success;

  _Airavata_getExperimentOutputs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getJobStatuses_args {
 public:

  Airavata_getJobStatuses_args() : airavataExperimentId() {
  }

  virtual ~Airavata_getJobStatuses_args() throw() {}

  std::string airavataExperimentId;

  void __set_airavataExperimentId(const std::string& val) {
    airavataExperimentId = val;
  }

  bool operator == (const Airavata_getJobStatuses_args & rhs) const
  {
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getJobStatuses_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getJobStatuses_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getJobStatuses_pargs {
 public:


  virtual ~Airavata_getJobStatuses_pargs() throw() {}

  const std::string* airavataExperimentId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getJobStatuses_result__isset {
  _Airavata_getJobStatuses_result__isset() : success(false) {}
  bool success;
} _Airavata_getJobStatuses_result__isset;

class Airavata_getJobStatuses_result {
 public:

  Airavata_getJobStatuses_result() {
  }

  virtual ~Airavata_getJobStatuses_result() throw() {}

  std::map<std::string,  ::JobStatus>  success;

  _Airavata_getJobStatuses_result__isset __isset;

  void __set_success(const std::map<std::string,  ::JobStatus> & val) {
    success = val;
  }

  bool operator == (const Airavata_getJobStatuses_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Airavata_getJobStatuses_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getJobStatuses_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getJobStatuses_presult__isset {
  _Airavata_getJobStatuses_presult__isset() : success(false) {}
  bool success;
} _Airavata_getJobStatuses_presult__isset;

class Airavata_getJobStatuses_presult {
 public:


  virtual ~Airavata_getJobStatuses_presult() throw() {}

  std::map<std::string,  ::JobStatus> * success;

  _Airavata_getJobStatuses_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Airavata_cloneExperiment_args__isset {
  _Airavata_cloneExperiment_args__isset() : existingExperimentID(false), newExperimentName(false) {}
  bool existingExperimentID;
  bool newExperimentName;
} _Airavata_cloneExperiment_args__isset;

class Airavata_cloneExperiment_args {
 public:

  Airavata_cloneExperiment_args() : existingExperimentID(), newExperimentName() {
  }

  virtual ~Airavata_cloneExperiment_args() throw() {}

  std::string existingExperimentID;
  std::string newExperimentName;

  _Airavata_cloneExperiment_args__isset __isset;

  void __set_existingExperimentID(const std::string& val) {
    existingExperimentID = val;
  }

  void __set_newExperimentName(const std::string& val) {
    newExperimentName = val;
  }

  bool operator == (const Airavata_cloneExperiment_args & rhs) const
  {
    if (!(existingExperimentID == rhs.existingExperimentID))
      return false;
    if (!(newExperimentName == rhs.newExperimentName))
      return false;
    return true;
  }
  bool operator != (const Airavata_cloneExperiment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_cloneExperiment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_cloneExperiment_pargs {
 public:


  virtual ~Airavata_cloneExperiment_pargs() throw() {}

  const std::string* existingExperimentID;
  const std::string* newExperimentName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_cloneExperiment_result__isset {
  _Airavata_cloneExperiment_result__isset() : success(false), ire(false), enf(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_cloneExperiment_result__isset;

class Airavata_cloneExperiment_result {
 public:

  Airavata_cloneExperiment_result() : success() {
  }

  virtual ~Airavata_cloneExperiment_result() throw() {}

  std::string success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::ExperimentNotFoundException enf;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_cloneExperiment_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_enf(const  ::airavata::api::error::ExperimentNotFoundException& val) {
    enf = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_cloneExperiment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(enf == rhs.enf))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_cloneExperiment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_cloneExperiment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_cloneExperiment_presult__isset {
  _Airavata_cloneExperiment_presult__isset() : success(false), ire(false), enf(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_cloneExperiment_presult__isset;

class Airavata_cloneExperiment_presult {
 public:


  virtual ~Airavata_cloneExperiment_presult() throw() {}

  std::string* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::ExperimentNotFoundException enf;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_cloneExperiment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Airavata_terminateExperiment_args__isset {
  _Airavata_terminateExperiment_args__isset() : airavataExperimentId(false) {}
  bool airavataExperimentId;
} _Airavata_terminateExperiment_args__isset;

class Airavata_terminateExperiment_args {
 public:

  Airavata_terminateExperiment_args() : airavataExperimentId() {
  }

  virtual ~Airavata_terminateExperiment_args() throw() {}

  std::string airavataExperimentId;

  _Airavata_terminateExperiment_args__isset __isset;

  void __set_airavataExperimentId(const std::string& val) {
    airavataExperimentId = val;
  }

  bool operator == (const Airavata_terminateExperiment_args & rhs) const
  {
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    return true;
  }
  bool operator != (const Airavata_terminateExperiment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_terminateExperiment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_terminateExperiment_pargs {
 public:


  virtual ~Airavata_terminateExperiment_pargs() throw() {}

  const std::string* airavataExperimentId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_terminateExperiment_result__isset {
  _Airavata_terminateExperiment_result__isset() : ire(false), enf(false), ace(false), ase(false) {}
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_terminateExperiment_result__isset;

class Airavata_terminateExperiment_result {
 public:

  Airavata_terminateExperiment_result() {
  }

  virtual ~Airavata_terminateExperiment_result() throw() {}

   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::ExperimentNotFoundException enf;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_terminateExperiment_result__isset __isset;

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_enf(const  ::airavata::api::error::ExperimentNotFoundException& val) {
    enf = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_terminateExperiment_result & rhs) const
  {
    if (!(ire == rhs.ire))
      return false;
    if (!(enf == rhs.enf))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_terminateExperiment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_terminateExperiment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_terminateExperiment_presult__isset {
  _Airavata_terminateExperiment_presult__isset() : ire(false), enf(false), ace(false), ase(false) {}
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_terminateExperiment_presult__isset;

class Airavata_terminateExperiment_presult {
 public:


  virtual ~Airavata_terminateExperiment_presult() throw() {}

   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::ExperimentNotFoundException enf;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_terminateExperiment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_registerApplicationModule_args {
 public:

  Airavata_registerApplicationModule_args() {
  }

  virtual ~Airavata_registerApplicationModule_args() throw() {}

   ::ApplicationModule applicationModule;

  void __set_applicationModule(const  ::ApplicationModule& val) {
    applicationModule = val;
  }

  bool operator == (const Airavata_registerApplicationModule_args & rhs) const
  {
    if (!(applicationModule == rhs.applicationModule))
      return false;
    return true;
  }
  bool operator != (const Airavata_registerApplicationModule_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_registerApplicationModule_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_registerApplicationModule_pargs {
 public:


  virtual ~Airavata_registerApplicationModule_pargs() throw() {}

  const  ::ApplicationModule* applicationModule;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_registerApplicationModule_result__isset {
  _Airavata_registerApplicationModule_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_registerApplicationModule_result__isset;

class Airavata_registerApplicationModule_result {
 public:

  Airavata_registerApplicationModule_result() : success() {
  }

  virtual ~Airavata_registerApplicationModule_result() throw() {}

  std::string success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_registerApplicationModule_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_registerApplicationModule_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_registerApplicationModule_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_registerApplicationModule_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_registerApplicationModule_presult__isset {
  _Airavata_registerApplicationModule_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_registerApplicationModule_presult__isset;

class Airavata_registerApplicationModule_presult {
 public:


  virtual ~Airavata_registerApplicationModule_presult() throw() {}

  std::string* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_registerApplicationModule_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getApplicationModule_args {
 public:

  Airavata_getApplicationModule_args() : appModuleId() {
  }

  virtual ~Airavata_getApplicationModule_args() throw() {}

  std::string appModuleId;

  void __set_appModuleId(const std::string& val) {
    appModuleId = val;
  }

  bool operator == (const Airavata_getApplicationModule_args & rhs) const
  {
    if (!(appModuleId == rhs.appModuleId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getApplicationModule_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getApplicationModule_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getApplicationModule_pargs {
 public:


  virtual ~Airavata_getApplicationModule_pargs() throw() {}

  const std::string* appModuleId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getApplicationModule_result__isset {
  _Airavata_getApplicationModule_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getApplicationModule_result__isset;

class Airavata_getApplicationModule_result {
 public:

  Airavata_getApplicationModule_result() {
  }

  virtual ~Airavata_getApplicationModule_result() throw() {}

   ::ApplicationModule success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_getApplicationModule_result__isset __isset;

  void __set_success(const  ::ApplicationModule& val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getApplicationModule_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getApplicationModule_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getApplicationModule_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getApplicationModule_presult__isset {
  _Airavata_getApplicationModule_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getApplicationModule_presult__isset;

class Airavata_getApplicationModule_presult {
 public:


  virtual ~Airavata_getApplicationModule_presult() throw() {}

   ::ApplicationModule* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_getApplicationModule_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_updateApplicationModule_args {
 public:

  Airavata_updateApplicationModule_args() : appModuleId() {
  }

  virtual ~Airavata_updateApplicationModule_args() throw() {}

  std::string appModuleId;
   ::ApplicationModule applicationModule;

  void __set_appModuleId(const std::string& val) {
    appModuleId = val;
  }

  void __set_applicationModule(const  ::ApplicationModule& val) {
    applicationModule = val;
  }

  bool operator == (const Airavata_updateApplicationModule_args & rhs) const
  {
    if (!(appModuleId == rhs.appModuleId))
      return false;
    if (!(applicationModule == rhs.applicationModule))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateApplicationModule_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateApplicationModule_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateApplicationModule_pargs {
 public:


  virtual ~Airavata_updateApplicationModule_pargs() throw() {}

  const std::string* appModuleId;
  const  ::ApplicationModule* applicationModule;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateApplicationModule_result__isset {
  _Airavata_updateApplicationModule_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateApplicationModule_result__isset;

class Airavata_updateApplicationModule_result {
 public:

  Airavata_updateApplicationModule_result() : success(0) {
  }

  virtual ~Airavata_updateApplicationModule_result() throw() {}

  bool success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateApplicationModule_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_updateApplicationModule_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateApplicationModule_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateApplicationModule_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateApplicationModule_presult__isset {
  _Airavata_updateApplicationModule_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateApplicationModule_presult__isset;

class Airavata_updateApplicationModule_presult {
 public:


  virtual ~Airavata_updateApplicationModule_presult() throw() {}

  bool* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateApplicationModule_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_deleteApplicationModule_args {
 public:

  Airavata_deleteApplicationModule_args() : appModuleId() {
  }

  virtual ~Airavata_deleteApplicationModule_args() throw() {}

  std::string appModuleId;

  void __set_appModuleId(const std::string& val) {
    appModuleId = val;
  }

  bool operator == (const Airavata_deleteApplicationModule_args & rhs) const
  {
    if (!(appModuleId == rhs.appModuleId))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteApplicationModule_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteApplicationModule_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_deleteApplicationModule_pargs {
 public:


  virtual ~Airavata_deleteApplicationModule_pargs() throw() {}

  const std::string* appModuleId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_deleteApplicationModule_result__isset {
  _Airavata_deleteApplicationModule_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_deleteApplicationModule_result__isset;

class Airavata_deleteApplicationModule_result {
 public:

  Airavata_deleteApplicationModule_result() : success(0) {
  }

  virtual ~Airavata_deleteApplicationModule_result() throw() {}

  bool success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_deleteApplicationModule_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_deleteApplicationModule_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteApplicationModule_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteApplicationModule_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_deleteApplicationModule_presult__isset {
  _Airavata_deleteApplicationModule_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_deleteApplicationModule_presult__isset;

class Airavata_deleteApplicationModule_presult {
 public:


  virtual ~Airavata_deleteApplicationModule_presult() throw() {}

  bool* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_deleteApplicationModule_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_registerApplicationDeployment_args {
 public:

  Airavata_registerApplicationDeployment_args() {
  }

  virtual ~Airavata_registerApplicationDeployment_args() throw() {}

   ::ApplicationDeploymentDescription applicationDeployment;

  void __set_applicationDeployment(const  ::ApplicationDeploymentDescription& val) {
    applicationDeployment = val;
  }

  bool operator == (const Airavata_registerApplicationDeployment_args & rhs) const
  {
    if (!(applicationDeployment == rhs.applicationDeployment))
      return false;
    return true;
  }
  bool operator != (const Airavata_registerApplicationDeployment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_registerApplicationDeployment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_registerApplicationDeployment_pargs {
 public:


  virtual ~Airavata_registerApplicationDeployment_pargs() throw() {}

  const  ::ApplicationDeploymentDescription* applicationDeployment;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_registerApplicationDeployment_result__isset {
  _Airavata_registerApplicationDeployment_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_registerApplicationDeployment_result__isset;

class Airavata_registerApplicationDeployment_result {
 public:

  Airavata_registerApplicationDeployment_result() : success() {
  }

  virtual ~Airavata_registerApplicationDeployment_result() throw() {}

  std::string success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_registerApplicationDeployment_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_registerApplicationDeployment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_registerApplicationDeployment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_registerApplicationDeployment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_registerApplicationDeployment_presult__isset {
  _Airavata_registerApplicationDeployment_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_registerApplicationDeployment_presult__isset;

class Airavata_registerApplicationDeployment_presult {
 public:


  virtual ~Airavata_registerApplicationDeployment_presult() throw() {}

  std::string* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_registerApplicationDeployment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getApplicationDeployment_args {
 public:

  Airavata_getApplicationDeployment_args() : appDeploymentId() {
  }

  virtual ~Airavata_getApplicationDeployment_args() throw() {}

  std::string appDeploymentId;

  void __set_appDeploymentId(const std::string& val) {
    appDeploymentId = val;
  }

  bool operator == (const Airavata_getApplicationDeployment_args & rhs) const
  {
    if (!(appDeploymentId == rhs.appDeploymentId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getApplicationDeployment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getApplicationDeployment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getApplicationDeployment_pargs {
 public:


  virtual ~Airavata_getApplicationDeployment_pargs() throw() {}

  const std::string* appDeploymentId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getApplicationDeployment_result__isset {
  _Airavata_getApplicationDeployment_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getApplicationDeployment_result__isset;

class Airavata_getApplicationDeployment_result {
 public:

  Airavata_getApplicationDeployment_result() {
  }

  virtual ~Airavata_getApplicationDeployment_result() throw() {}

   ::ApplicationDeploymentDescription success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_getApplicationDeployment_result__isset __isset;

  void __set_success(const  ::ApplicationDeploymentDescription& val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getApplicationDeployment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getApplicationDeployment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getApplicationDeployment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getApplicationDeployment_presult__isset {
  _Airavata_getApplicationDeployment_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getApplicationDeployment_presult__isset;

class Airavata_getApplicationDeployment_presult {
 public:


  virtual ~Airavata_getApplicationDeployment_presult() throw() {}

   ::ApplicationDeploymentDescription* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_getApplicationDeployment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_updateApplicationDeployment_args {
 public:

  Airavata_updateApplicationDeployment_args() : appDeploymentId() {
  }

  virtual ~Airavata_updateApplicationDeployment_args() throw() {}

  std::string appDeploymentId;
   ::ApplicationDeploymentDescription applicationDeployment;

  void __set_appDeploymentId(const std::string& val) {
    appDeploymentId = val;
  }

  void __set_applicationDeployment(const  ::ApplicationDeploymentDescription& val) {
    applicationDeployment = val;
  }

  bool operator == (const Airavata_updateApplicationDeployment_args & rhs) const
  {
    if (!(appDeploymentId == rhs.appDeploymentId))
      return false;
    if (!(applicationDeployment == rhs.applicationDeployment))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateApplicationDeployment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateApplicationDeployment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateApplicationDeployment_pargs {
 public:


  virtual ~Airavata_updateApplicationDeployment_pargs() throw() {}

  const std::string* appDeploymentId;
  const  ::ApplicationDeploymentDescription* applicationDeployment;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateApplicationDeployment_result__isset {
  _Airavata_updateApplicationDeployment_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateApplicationDeployment_result__isset;

class Airavata_updateApplicationDeployment_result {
 public:

  Airavata_updateApplicationDeployment_result() : success(0) {
  }

  virtual ~Airavata_updateApplicationDeployment_result() throw() {}

  bool success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateApplicationDeployment_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_updateApplicationDeployment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateApplicationDeployment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateApplicationDeployment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateApplicationDeployment_presult__isset {
  _Airavata_updateApplicationDeployment_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateApplicationDeployment_presult__isset;

class Airavata_updateApplicationDeployment_presult {
 public:


  virtual ~Airavata_updateApplicationDeployment_presult() throw() {}

  bool* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateApplicationDeployment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_deleteApplicationDeployment_args {
 public:

  Airavata_deleteApplicationDeployment_args() : appDeploymentId() {
  }

  virtual ~Airavata_deleteApplicationDeployment_args() throw() {}

  std::string appDeploymentId;

  void __set_appDeploymentId(const std::string& val) {
    appDeploymentId = val;
  }

  bool operator == (const Airavata_deleteApplicationDeployment_args & rhs) const
  {
    if (!(appDeploymentId == rhs.appDeploymentId))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteApplicationDeployment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteApplicationDeployment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_deleteApplicationDeployment_pargs {
 public:


  virtual ~Airavata_deleteApplicationDeployment_pargs() throw() {}

  const std::string* appDeploymentId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_deleteApplicationDeployment_result__isset {
  _Airavata_deleteApplicationDeployment_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_deleteApplicationDeployment_result__isset;

class Airavata_deleteApplicationDeployment_result {
 public:

  Airavata_deleteApplicationDeployment_result() : success(0) {
  }

  virtual ~Airavata_deleteApplicationDeployment_result() throw() {}

  bool success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_deleteApplicationDeployment_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_deleteApplicationDeployment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteApplicationDeployment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteApplicationDeployment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_deleteApplicationDeployment_presult__isset {
  _Airavata_deleteApplicationDeployment_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_deleteApplicationDeployment_presult__isset;

class Airavata_deleteApplicationDeployment_presult {
 public:


  virtual ~Airavata_deleteApplicationDeployment_presult() throw() {}

  bool* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_deleteApplicationDeployment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getAppModuleDeployedResources_args {
 public:

  Airavata_getAppModuleDeployedResources_args() : appModuleId() {
  }

  virtual ~Airavata_getAppModuleDeployedResources_args() throw() {}

  std::string appModuleId;

  void __set_appModuleId(const std::string& val) {
    appModuleId = val;
  }

  bool operator == (const Airavata_getAppModuleDeployedResources_args & rhs) const
  {
    if (!(appModuleId == rhs.appModuleId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAppModuleDeployedResources_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAppModuleDeployedResources_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getAppModuleDeployedResources_pargs {
 public:


  virtual ~Airavata_getAppModuleDeployedResources_pargs() throw() {}

  const std::string* appModuleId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAppModuleDeployedResources_result__isset {
  _Airavata_getAppModuleDeployedResources_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAppModuleDeployedResources_result__isset;

class Airavata_getAppModuleDeployedResources_result {
 public:

  Airavata_getAppModuleDeployedResources_result() {
  }

  virtual ~Airavata_getAppModuleDeployedResources_result() throw() {}

  std::vector<std::string>  success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAppModuleDeployedResources_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getAppModuleDeployedResources_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAppModuleDeployedResources_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAppModuleDeployedResources_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAppModuleDeployedResources_presult__isset {
  _Airavata_getAppModuleDeployedResources_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAppModuleDeployedResources_presult__isset;

class Airavata_getAppModuleDeployedResources_presult {
 public:


  virtual ~Airavata_getAppModuleDeployedResources_presult() throw() {}

  std::vector<std::string> * success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAppModuleDeployedResources_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_registerApplicationInterface_args {
 public:

  Airavata_registerApplicationInterface_args() {
  }

  virtual ~Airavata_registerApplicationInterface_args() throw() {}

   ::ApplicationInterfaceDescription applicationInterface;

  void __set_applicationInterface(const  ::ApplicationInterfaceDescription& val) {
    applicationInterface = val;
  }

  bool operator == (const Airavata_registerApplicationInterface_args & rhs) const
  {
    if (!(applicationInterface == rhs.applicationInterface))
      return false;
    return true;
  }
  bool operator != (const Airavata_registerApplicationInterface_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_registerApplicationInterface_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_registerApplicationInterface_pargs {
 public:


  virtual ~Airavata_registerApplicationInterface_pargs() throw() {}

  const  ::ApplicationInterfaceDescription* applicationInterface;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_registerApplicationInterface_result__isset {
  _Airavata_registerApplicationInterface_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_registerApplicationInterface_result__isset;

class Airavata_registerApplicationInterface_result {
 public:

  Airavata_registerApplicationInterface_result() : success() {
  }

  virtual ~Airavata_registerApplicationInterface_result() throw() {}

  std::string success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_registerApplicationInterface_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_registerApplicationInterface_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_registerApplicationInterface_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_registerApplicationInterface_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_registerApplicationInterface_presult__isset {
  _Airavata_registerApplicationInterface_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_registerApplicationInterface_presult__isset;

class Airavata_registerApplicationInterface_presult {
 public:


  virtual ~Airavata_registerApplicationInterface_presult() throw() {}

  std::string* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_registerApplicationInterface_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getApplicationInterface_args {
 public:

  Airavata_getApplicationInterface_args() : appInterfaceId() {
  }

  virtual ~Airavata_getApplicationInterface_args() throw() {}

  std::string appInterfaceId;

  void __set_appInterfaceId(const std::string& val) {
    appInterfaceId = val;
  }

  bool operator == (const Airavata_getApplicationInterface_args & rhs) const
  {
    if (!(appInterfaceId == rhs.appInterfaceId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getApplicationInterface_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getApplicationInterface_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getApplicationInterface_pargs {
 public:


  virtual ~Airavata_getApplicationInterface_pargs() throw() {}

  const std::string* appInterfaceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getApplicationInterface_result__isset {
  _Airavata_getApplicationInterface_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getApplicationInterface_result__isset;

class Airavata_getApplicationInterface_result {
 public:

  Airavata_getApplicationInterface_result() {
  }

  virtual ~Airavata_getApplicationInterface_result() throw() {}

   ::ApplicationInterfaceDescription success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_getApplicationInterface_result__isset __isset;

  void __set_success(const  ::ApplicationInterfaceDescription& val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getApplicationInterface_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getApplicationInterface_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getApplicationInterface_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getApplicationInterface_presult__isset {
  _Airavata_getApplicationInterface_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getApplicationInterface_presult__isset;

class Airavata_getApplicationInterface_presult {
 public:


  virtual ~Airavata_getApplicationInterface_presult() throw() {}

   ::ApplicationInterfaceDescription* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_getApplicationInterface_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_updateApplicationInterface_args {
 public:

  Airavata_updateApplicationInterface_args() : appInterfaceId() {
  }

  virtual ~Airavata_updateApplicationInterface_args() throw() {}

  std::string appInterfaceId;
   ::ApplicationInterfaceDescription applicationInterface;

  void __set_appInterfaceId(const std::string& val) {
    appInterfaceId = val;
  }

  void __set_applicationInterface(const  ::ApplicationInterfaceDescription& val) {
    applicationInterface = val;
  }

  bool operator == (const Airavata_updateApplicationInterface_args & rhs) const
  {
    if (!(appInterfaceId == rhs.appInterfaceId))
      return false;
    if (!(applicationInterface == rhs.applicationInterface))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateApplicationInterface_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateApplicationInterface_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateApplicationInterface_pargs {
 public:


  virtual ~Airavata_updateApplicationInterface_pargs() throw() {}

  const std::string* appInterfaceId;
  const  ::ApplicationInterfaceDescription* applicationInterface;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateApplicationInterface_result__isset {
  _Airavata_updateApplicationInterface_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateApplicationInterface_result__isset;

class Airavata_updateApplicationInterface_result {
 public:

  Airavata_updateApplicationInterface_result() : success(0) {
  }

  virtual ~Airavata_updateApplicationInterface_result() throw() {}

  bool success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateApplicationInterface_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_updateApplicationInterface_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateApplicationInterface_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateApplicationInterface_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateApplicationInterface_presult__isset {
  _Airavata_updateApplicationInterface_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateApplicationInterface_presult__isset;

class Airavata_updateApplicationInterface_presult {
 public:


  virtual ~Airavata_updateApplicationInterface_presult() throw() {}

  bool* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateApplicationInterface_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_deleteApplicationInterface_args {
 public:

  Airavata_deleteApplicationInterface_args() : appInterfaceId() {
  }

  virtual ~Airavata_deleteApplicationInterface_args() throw() {}

  std::string appInterfaceId;

  void __set_appInterfaceId(const std::string& val) {
    appInterfaceId = val;
  }

  bool operator == (const Airavata_deleteApplicationInterface_args & rhs) const
  {
    if (!(appInterfaceId == rhs.appInterfaceId))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteApplicationInterface_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteApplicationInterface_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_deleteApplicationInterface_pargs {
 public:


  virtual ~Airavata_deleteApplicationInterface_pargs() throw() {}

  const std::string* appInterfaceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_deleteApplicationInterface_result__isset {
  _Airavata_deleteApplicationInterface_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_deleteApplicationInterface_result__isset;

class Airavata_deleteApplicationInterface_result {
 public:

  Airavata_deleteApplicationInterface_result() : success(0) {
  }

  virtual ~Airavata_deleteApplicationInterface_result() throw() {}

  bool success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_deleteApplicationInterface_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_deleteApplicationInterface_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteApplicationInterface_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteApplicationInterface_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_deleteApplicationInterface_presult__isset {
  _Airavata_deleteApplicationInterface_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_deleteApplicationInterface_presult__isset;

class Airavata_deleteApplicationInterface_presult {
 public:


  virtual ~Airavata_deleteApplicationInterface_presult() throw() {}

  bool* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_deleteApplicationInterface_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getApplicationInputs_args {
 public:

  Airavata_getApplicationInputs_args() : appInterfaceId() {
  }

  virtual ~Airavata_getApplicationInputs_args() throw() {}

  std::string appInterfaceId;

  void __set_appInterfaceId(const std::string& val) {
    appInterfaceId = val;
  }

  bool operator == (const Airavata_getApplicationInputs_args & rhs) const
  {
    if (!(appInterfaceId == rhs.appInterfaceId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getApplicationInputs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getApplicationInputs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getApplicationInputs_pargs {
 public:


  virtual ~Airavata_getApplicationInputs_pargs() throw() {}

  const std::string* appInterfaceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getApplicationInputs_result__isset {
  _Airavata_getApplicationInputs_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getApplicationInputs_result__isset;

class Airavata_getApplicationInputs_result {
 public:

  Airavata_getApplicationInputs_result() {
  }

  virtual ~Airavata_getApplicationInputs_result() throw() {}

  std::vector< ::InputDataObjectType>  success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_getApplicationInputs_result__isset __isset;

  void __set_success(const std::vector< ::InputDataObjectType> & val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getApplicationInputs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getApplicationInputs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getApplicationInputs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getApplicationInputs_presult__isset {
  _Airavata_getApplicationInputs_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getApplicationInputs_presult__isset;

class Airavata_getApplicationInputs_presult {
 public:


  virtual ~Airavata_getApplicationInputs_presult() throw() {}

  std::vector< ::InputDataObjectType> * success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_getApplicationInputs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getApplicationOutputs_args {
 public:

  Airavata_getApplicationOutputs_args() : appInterfaceId() {
  }

  virtual ~Airavata_getApplicationOutputs_args() throw() {}

  std::string appInterfaceId;

  void __set_appInterfaceId(const std::string& val) {
    appInterfaceId = val;
  }

  bool operator == (const Airavata_getApplicationOutputs_args & rhs) const
  {
    if (!(appInterfaceId == rhs.appInterfaceId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getApplicationOutputs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getApplicationOutputs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getApplicationOutputs_pargs {
 public:


  virtual ~Airavata_getApplicationOutputs_pargs() throw() {}

  const std::string* appInterfaceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getApplicationOutputs_result__isset {
  _Airavata_getApplicationOutputs_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getApplicationOutputs_result__isset;

class Airavata_getApplicationOutputs_result {
 public:

  Airavata_getApplicationOutputs_result() {
  }

  virtual ~Airavata_getApplicationOutputs_result() throw() {}

  std::vector< ::OutputDataObjectType>  success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_getApplicationOutputs_result__isset __isset;

  void __set_success(const std::vector< ::OutputDataObjectType> & val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getApplicationOutputs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getApplicationOutputs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getApplicationOutputs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getApplicationOutputs_presult__isset {
  _Airavata_getApplicationOutputs_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getApplicationOutputs_presult__isset;

class Airavata_getApplicationOutputs_presult {
 public:


  virtual ~Airavata_getApplicationOutputs_presult() throw() {}

  std::vector< ::OutputDataObjectType> * success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_getApplicationOutputs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_registerComputeResource_args {
 public:

  Airavata_registerComputeResource_args() {
  }

  virtual ~Airavata_registerComputeResource_args() throw() {}

   ::ComputeResourceDescription computeResourceDescription;

  void __set_computeResourceDescription(const  ::ComputeResourceDescription& val) {
    computeResourceDescription = val;
  }

  bool operator == (const Airavata_registerComputeResource_args & rhs) const
  {
    if (!(computeResourceDescription == rhs.computeResourceDescription))
      return false;
    return true;
  }
  bool operator != (const Airavata_registerComputeResource_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_registerComputeResource_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_registerComputeResource_pargs {
 public:


  virtual ~Airavata_registerComputeResource_pargs() throw() {}

  const  ::ComputeResourceDescription* computeResourceDescription;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_registerComputeResource_result__isset {
  _Airavata_registerComputeResource_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_registerComputeResource_result__isset;

class Airavata_registerComputeResource_result {
 public:

  Airavata_registerComputeResource_result() : success() {
  }

  virtual ~Airavata_registerComputeResource_result() throw() {}

  std::string success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_registerComputeResource_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_registerComputeResource_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_registerComputeResource_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_registerComputeResource_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_registerComputeResource_presult__isset {
  _Airavata_registerComputeResource_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_registerComputeResource_presult__isset;

class Airavata_registerComputeResource_presult {
 public:


  virtual ~Airavata_registerComputeResource_presult() throw() {}

  std::string* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_registerComputeResource_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getComputeResource_args {
 public:

  Airavata_getComputeResource_args() : computeResourceId() {
  }

  virtual ~Airavata_getComputeResource_args() throw() {}

  std::string computeResourceId;

  void __set_computeResourceId(const std::string& val) {
    computeResourceId = val;
  }

  bool operator == (const Airavata_getComputeResource_args & rhs) const
  {
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getComputeResource_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getComputeResource_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getComputeResource_pargs {
 public:


  virtual ~Airavata_getComputeResource_pargs() throw() {}

  const std::string* computeResourceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getComputeResource_result__isset {
  _Airavata_getComputeResource_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getComputeResource_result__isset;

class Airavata_getComputeResource_result {
 public:

  Airavata_getComputeResource_result() {
  }

  virtual ~Airavata_getComputeResource_result() throw() {}

   ::ComputeResourceDescription success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_getComputeResource_result__isset __isset;

  void __set_success(const  ::ComputeResourceDescription& val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getComputeResource_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getComputeResource_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getComputeResource_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getComputeResource_presult__isset {
  _Airavata_getComputeResource_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getComputeResource_presult__isset;

class Airavata_getComputeResource_presult {
 public:


  virtual ~Airavata_getComputeResource_presult() throw() {}

   ::ComputeResourceDescription* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_getComputeResource_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_updateComputeResource_args {
 public:

  Airavata_updateComputeResource_args() : computeResourceId() {
  }

  virtual ~Airavata_updateComputeResource_args() throw() {}

  std::string computeResourceId;
   ::ComputeResourceDescription computeResourceDescription;

  void __set_computeResourceId(const std::string& val) {
    computeResourceId = val;
  }

  void __set_computeResourceDescription(const  ::ComputeResourceDescription& val) {
    computeResourceDescription = val;
  }

  bool operator == (const Airavata_updateComputeResource_args & rhs) const
  {
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    if (!(computeResourceDescription == rhs.computeResourceDescription))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateComputeResource_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateComputeResource_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateComputeResource_pargs {
 public:


  virtual ~Airavata_updateComputeResource_pargs() throw() {}

  const std::string* computeResourceId;
  const  ::ComputeResourceDescription* computeResourceDescription;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateComputeResource_result__isset {
  _Airavata_updateComputeResource_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateComputeResource_result__isset;

class Airavata_updateComputeResource_result {
 public:

  Airavata_updateComputeResource_result() : success(0) {
  }

  virtual ~Airavata_updateComputeResource_result() throw() {}

  bool success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateComputeResource_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_updateComputeResource_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateComputeResource_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateComputeResource_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateComputeResource_presult__isset {
  _Airavata_updateComputeResource_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateComputeResource_presult__isset;

class Airavata_updateComputeResource_presult {
 public:


  virtual ~Airavata_updateComputeResource_presult() throw() {}

  bool* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateComputeResource_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_deleteComputeResource_args {
 public:

  Airavata_deleteComputeResource_args() : computeResourceId() {
  }

  virtual ~Airavata_deleteComputeResource_args() throw() {}

  std::string computeResourceId;

  void __set_computeResourceId(const std::string& val) {
    computeResourceId = val;
  }

  bool operator == (const Airavata_deleteComputeResource_args & rhs) const
  {
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteComputeResource_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteComputeResource_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_deleteComputeResource_pargs {
 public:


  virtual ~Airavata_deleteComputeResource_pargs() throw() {}

  const std::string* computeResourceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_deleteComputeResource_result__isset {
  _Airavata_deleteComputeResource_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_deleteComputeResource_result__isset;

class Airavata_deleteComputeResource_result {
 public:

  Airavata_deleteComputeResource_result() : success(0) {
  }

  virtual ~Airavata_deleteComputeResource_result() throw() {}

  bool success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_deleteComputeResource_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_deleteComputeResource_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteComputeResource_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteComputeResource_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_deleteComputeResource_presult__isset {
  _Airavata_deleteComputeResource_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_deleteComputeResource_presult__isset;

class Airavata_deleteComputeResource_presult {
 public:


  virtual ~Airavata_deleteComputeResource_presult() throw() {}

  bool* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_deleteComputeResource_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_addLocalSubmissionDetails_args {
 public:

  Airavata_addLocalSubmissionDetails_args() : computeResourceId(), priorityOrder(0) {
  }

  virtual ~Airavata_addLocalSubmissionDetails_args() throw() {}

  std::string computeResourceId;
  int32_t priorityOrder;
   ::LOCALSubmission localSubmission;

  void __set_computeResourceId(const std::string& val) {
    computeResourceId = val;
  }

  void __set_priorityOrder(const int32_t val) {
    priorityOrder = val;
  }

  void __set_localSubmission(const  ::LOCALSubmission& val) {
    localSubmission = val;
  }

  bool operator == (const Airavata_addLocalSubmissionDetails_args & rhs) const
  {
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    if (!(priorityOrder == rhs.priorityOrder))
      return false;
    if (!(localSubmission == rhs.localSubmission))
      return false;
    return true;
  }
  bool operator != (const Airavata_addLocalSubmissionDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addLocalSubmissionDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_addLocalSubmissionDetails_pargs {
 public:


  virtual ~Airavata_addLocalSubmissionDetails_pargs() throw() {}

  const std::string* computeResourceId;
  const int32_t* priorityOrder;
  const  ::LOCALSubmission* localSubmission;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_addLocalSubmissionDetails_result__isset {
  _Airavata_addLocalSubmissionDetails_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_addLocalSubmissionDetails_result__isset;

class Airavata_addLocalSubmissionDetails_result {
 public:

  Airavata_addLocalSubmissionDetails_result() : success(0) {
  }

  virtual ~Airavata_addLocalSubmissionDetails_result() throw() {}

  bool success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_addLocalSubmissionDetails_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_addLocalSubmissionDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_addLocalSubmissionDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addLocalSubmissionDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_addLocalSubmissionDetails_presult__isset {
  _Airavata_addLocalSubmissionDetails_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_addLocalSubmissionDetails_presult__isset;

class Airavata_addLocalSubmissionDetails_presult {
 public:


  virtual ~Airavata_addLocalSubmissionDetails_presult() throw() {}

  bool* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_addLocalSubmissionDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_updateLocalSubmissionDetails_args {
 public:

  Airavata_updateLocalSubmissionDetails_args() : jobSubmissionInterfaceId() {
  }

  virtual ~Airavata_updateLocalSubmissionDetails_args() throw() {}

  std::string jobSubmissionInterfaceId;
   ::LOCALSubmission localSubmission;

  void __set_jobSubmissionInterfaceId(const std::string& val) {
    jobSubmissionInterfaceId = val;
  }

  void __set_localSubmission(const  ::LOCALSubmission& val) {
    localSubmission = val;
  }

  bool operator == (const Airavata_updateLocalSubmissionDetails_args & rhs) const
  {
    if (!(jobSubmissionInterfaceId == rhs.jobSubmissionInterfaceId))
      return false;
    if (!(localSubmission == rhs.localSubmission))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateLocalSubmissionDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateLocalSubmissionDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateLocalSubmissionDetails_pargs {
 public:


  virtual ~Airavata_updateLocalSubmissionDetails_pargs() throw() {}

  const std::string* jobSubmissionInterfaceId;
  const  ::LOCALSubmission* localSubmission;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateLocalSubmissionDetails_result__isset {
  _Airavata_updateLocalSubmissionDetails_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateLocalSubmissionDetails_result__isset;

class Airavata_updateLocalSubmissionDetails_result {
 public:

  Airavata_updateLocalSubmissionDetails_result() : success(0) {
  }

  virtual ~Airavata_updateLocalSubmissionDetails_result() throw() {}

  bool success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateLocalSubmissionDetails_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_updateLocalSubmissionDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateLocalSubmissionDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateLocalSubmissionDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateLocalSubmissionDetails_presult__isset {
  _Airavata_updateLocalSubmissionDetails_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateLocalSubmissionDetails_presult__isset;

class Airavata_updateLocalSubmissionDetails_presult {
 public:


  virtual ~Airavata_updateLocalSubmissionDetails_presult() throw() {}

  bool* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateLocalSubmissionDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_addSSHJobSubmissionDetails_args {
 public:

  Airavata_addSSHJobSubmissionDetails_args() : computeResourceId(), priorityOrder(0) {
  }

  virtual ~Airavata_addSSHJobSubmissionDetails_args() throw() {}

  std::string computeResourceId;
  int32_t priorityOrder;
   ::SSHJobSubmission sshJobSubmission;

  void __set_computeResourceId(const std::string& val) {
    computeResourceId = val;
  }

  void __set_priorityOrder(const int32_t val) {
    priorityOrder = val;
  }

  void __set_sshJobSubmission(const  ::SSHJobSubmission& val) {
    sshJobSubmission = val;
  }

  bool operator == (const Airavata_addSSHJobSubmissionDetails_args & rhs) const
  {
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    if (!(priorityOrder == rhs.priorityOrder))
      return false;
    if (!(sshJobSubmission == rhs.sshJobSubmission))
      return false;
    return true;
  }
  bool operator != (const Airavata_addSSHJobSubmissionDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addSSHJobSubmissionDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_addSSHJobSubmissionDetails_pargs {
 public:


  virtual ~Airavata_addSSHJobSubmissionDetails_pargs() throw() {}

  const std::string* computeResourceId;
  const int32_t* priorityOrder;
  const  ::SSHJobSubmission* sshJobSubmission;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_addSSHJobSubmissionDetails_result__isset {
  _Airavata_addSSHJobSubmissionDetails_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_addSSHJobSubmissionDetails_result__isset;

class Airavata_addSSHJobSubmissionDetails_result {
 public:

  Airavata_addSSHJobSubmissionDetails_result() : success(0) {
  }

  virtual ~Airavata_addSSHJobSubmissionDetails_result() throw() {}

  bool success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_addSSHJobSubmissionDetails_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_addSSHJobSubmissionDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_addSSHJobSubmissionDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addSSHJobSubmissionDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_addSSHJobSubmissionDetails_presult__isset {
  _Airavata_addSSHJobSubmissionDetails_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_addSSHJobSubmissionDetails_presult__isset;

class Airavata_addSSHJobSubmissionDetails_presult {
 public:


  virtual ~Airavata_addSSHJobSubmissionDetails_presult() throw() {}

  bool* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_addSSHJobSubmissionDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_updateSSHJobSubmissionDetails_args {
 public:

  Airavata_updateSSHJobSubmissionDetails_args() : jobSubmissionInterfaceId() {
  }

  virtual ~Airavata_updateSSHJobSubmissionDetails_args() throw() {}

  std::string jobSubmissionInterfaceId;
   ::SSHJobSubmission sshJobSubmission;

  void __set_jobSubmissionInterfaceId(const std::string& val) {
    jobSubmissionInterfaceId = val;
  }

  void __set_sshJobSubmission(const  ::SSHJobSubmission& val) {
    sshJobSubmission = val;
  }

  bool operator == (const Airavata_updateSSHJobSubmissionDetails_args & rhs) const
  {
    if (!(jobSubmissionInterfaceId == rhs.jobSubmissionInterfaceId))
      return false;
    if (!(sshJobSubmission == rhs.sshJobSubmission))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateSSHJobSubmissionDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateSSHJobSubmissionDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateSSHJobSubmissionDetails_pargs {
 public:


  virtual ~Airavata_updateSSHJobSubmissionDetails_pargs() throw() {}

  const std::string* jobSubmissionInterfaceId;
  const  ::SSHJobSubmission* sshJobSubmission;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateSSHJobSubmissionDetails_result__isset {
  _Airavata_updateSSHJobSubmissionDetails_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateSSHJobSubmissionDetails_result__isset;

class Airavata_updateSSHJobSubmissionDetails_result {
 public:

  Airavata_updateSSHJobSubmissionDetails_result() : success(0) {
  }

  virtual ~Airavata_updateSSHJobSubmissionDetails_result() throw() {}

  bool success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateSSHJobSubmissionDetails_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_updateSSHJobSubmissionDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateSSHJobSubmissionDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateSSHJobSubmissionDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateSSHJobSubmissionDetails_presult__isset {
  _Airavata_updateSSHJobSubmissionDetails_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateSSHJobSubmissionDetails_presult__isset;

class Airavata_updateSSHJobSubmissionDetails_presult {
 public:


  virtual ~Airavata_updateSSHJobSubmissionDetails_presult() throw() {}

  bool* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateSSHJobSubmissionDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_addLocalDataMovementDetails_args {
 public:

  Airavata_addLocalDataMovementDetails_args() : computeResourceId(), priorityOrder(0) {
  }

  virtual ~Airavata_addLocalDataMovementDetails_args() throw() {}

  std::string computeResourceId;
  int32_t priorityOrder;
   ::LOCALDataMovement localDataMovement;

  void __set_computeResourceId(const std::string& val) {
    computeResourceId = val;
  }

  void __set_priorityOrder(const int32_t val) {
    priorityOrder = val;
  }

  void __set_localDataMovement(const  ::LOCALDataMovement& val) {
    localDataMovement = val;
  }

  bool operator == (const Airavata_addLocalDataMovementDetails_args & rhs) const
  {
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    if (!(priorityOrder == rhs.priorityOrder))
      return false;
    if (!(localDataMovement == rhs.localDataMovement))
      return false;
    return true;
  }
  bool operator != (const Airavata_addLocalDataMovementDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addLocalDataMovementDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_addLocalDataMovementDetails_pargs {
 public:


  virtual ~Airavata_addLocalDataMovementDetails_pargs() throw() {}

  const std::string* computeResourceId;
  const int32_t* priorityOrder;
  const  ::LOCALDataMovement* localDataMovement;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_addLocalDataMovementDetails_result__isset {
  _Airavata_addLocalDataMovementDetails_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_addLocalDataMovementDetails_result__isset;

class Airavata_addLocalDataMovementDetails_result {
 public:

  Airavata_addLocalDataMovementDetails_result() : success(0) {
  }

  virtual ~Airavata_addLocalDataMovementDetails_result() throw() {}

  bool success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_addLocalDataMovementDetails_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_addLocalDataMovementDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_addLocalDataMovementDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addLocalDataMovementDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_addLocalDataMovementDetails_presult__isset {
  _Airavata_addLocalDataMovementDetails_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_addLocalDataMovementDetails_presult__isset;

class Airavata_addLocalDataMovementDetails_presult {
 public:


  virtual ~Airavata_addLocalDataMovementDetails_presult() throw() {}

  bool* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_addLocalDataMovementDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_updateLocalDataMovementDetails_args {
 public:

  Airavata_updateLocalDataMovementDetails_args() : jobSubmissionInterfaceId() {
  }

  virtual ~Airavata_updateLocalDataMovementDetails_args() throw() {}

  std::string jobSubmissionInterfaceId;
   ::LOCALDataMovement localDataMovement;

  void __set_jobSubmissionInterfaceId(const std::string& val) {
    jobSubmissionInterfaceId = val;
  }

  void __set_localDataMovement(const  ::LOCALDataMovement& val) {
    localDataMovement = val;
  }

  bool operator == (const Airavata_updateLocalDataMovementDetails_args & rhs) const
  {
    if (!(jobSubmissionInterfaceId == rhs.jobSubmissionInterfaceId))
      return false;
    if (!(localDataMovement == rhs.localDataMovement))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateLocalDataMovementDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateLocalDataMovementDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateLocalDataMovementDetails_pargs {
 public:


  virtual ~Airavata_updateLocalDataMovementDetails_pargs() throw() {}

  const std::string* jobSubmissionInterfaceId;
  const  ::LOCALDataMovement* localDataMovement;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateLocalDataMovementDetails_result__isset {
  _Airavata_updateLocalDataMovementDetails_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateLocalDataMovementDetails_result__isset;

class Airavata_updateLocalDataMovementDetails_result {
 public:

  Airavata_updateLocalDataMovementDetails_result() : success(0) {
  }

  virtual ~Airavata_updateLocalDataMovementDetails_result() throw() {}

  bool success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateLocalDataMovementDetails_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_updateLocalDataMovementDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateLocalDataMovementDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateLocalDataMovementDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateLocalDataMovementDetails_presult__isset {
  _Airavata_updateLocalDataMovementDetails_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateLocalDataMovementDetails_presult__isset;

class Airavata_updateLocalDataMovementDetails_presult {
 public:


  virtual ~Airavata_updateLocalDataMovementDetails_presult() throw() {}

  bool* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateLocalDataMovementDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_addSCPDataMovementDetails_args {
 public:

  Airavata_addSCPDataMovementDetails_args() : computeResourceId(), priorityOrder(0) {
  }

  virtual ~Airavata_addSCPDataMovementDetails_args() throw() {}

  std::string computeResourceId;
  int32_t priorityOrder;
   ::SCPDataMovement scpDataMovement;

  void __set_computeResourceId(const std::string& val) {
    computeResourceId = val;
  }

  void __set_priorityOrder(const int32_t val) {
    priorityOrder = val;
  }

  void __set_scpDataMovement(const  ::SCPDataMovement& val) {
    scpDataMovement = val;
  }

  bool operator == (const Airavata_addSCPDataMovementDetails_args & rhs) const
  {
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    if (!(priorityOrder == rhs.priorityOrder))
      return false;
    if (!(scpDataMovement == rhs.scpDataMovement))
      return false;
    return true;
  }
  bool operator != (const Airavata_addSCPDataMovementDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addSCPDataMovementDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_addSCPDataMovementDetails_pargs {
 public:


  virtual ~Airavata_addSCPDataMovementDetails_pargs() throw() {}

  const std::string* computeResourceId;
  const int32_t* priorityOrder;
  const  ::SCPDataMovement* scpDataMovement;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_addSCPDataMovementDetails_result__isset {
  _Airavata_addSCPDataMovementDetails_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_addSCPDataMovementDetails_result__isset;

class Airavata_addSCPDataMovementDetails_result {
 public:

  Airavata_addSCPDataMovementDetails_result() : success(0) {
  }

  virtual ~Airavata_addSCPDataMovementDetails_result() throw() {}

  bool success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_addSCPDataMovementDetails_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_addSCPDataMovementDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_addSCPDataMovementDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addSCPDataMovementDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_addSCPDataMovementDetails_presult__isset {
  _Airavata_addSCPDataMovementDetails_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_addSCPDataMovementDetails_presult__isset;

class Airavata_addSCPDataMovementDetails_presult {
 public:


  virtual ~Airavata_addSCPDataMovementDetails_presult() throw() {}

  bool* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_addSCPDataMovementDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_updateSCPDataMovementDetails_args {
 public:

  Airavata_updateSCPDataMovementDetails_args() : jobSubmissionInterfaceId() {
  }

  virtual ~Airavata_updateSCPDataMovementDetails_args() throw() {}

  std::string jobSubmissionInterfaceId;
   ::SCPDataMovement scpDataMovement;

  void __set_jobSubmissionInterfaceId(const std::string& val) {
    jobSubmissionInterfaceId = val;
  }

  void __set_scpDataMovement(const  ::SCPDataMovement& val) {
    scpDataMovement = val;
  }

  bool operator == (const Airavata_updateSCPDataMovementDetails_args & rhs) const
  {
    if (!(jobSubmissionInterfaceId == rhs.jobSubmissionInterfaceId))
      return false;
    if (!(scpDataMovement == rhs.scpDataMovement))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateSCPDataMovementDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateSCPDataMovementDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateSCPDataMovementDetails_pargs {
 public:


  virtual ~Airavata_updateSCPDataMovementDetails_pargs() throw() {}

  const std::string* jobSubmissionInterfaceId;
  const  ::SCPDataMovement* scpDataMovement;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateSCPDataMovementDetails_result__isset {
  _Airavata_updateSCPDataMovementDetails_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateSCPDataMovementDetails_result__isset;

class Airavata_updateSCPDataMovementDetails_result {
 public:

  Airavata_updateSCPDataMovementDetails_result() : success(0) {
  }

  virtual ~Airavata_updateSCPDataMovementDetails_result() throw() {}

  bool success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateSCPDataMovementDetails_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_updateSCPDataMovementDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateSCPDataMovementDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateSCPDataMovementDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateSCPDataMovementDetails_presult__isset {
  _Airavata_updateSCPDataMovementDetails_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateSCPDataMovementDetails_presult__isset;

class Airavata_updateSCPDataMovementDetails_presult {
 public:


  virtual ~Airavata_updateSCPDataMovementDetails_presult() throw() {}

  bool* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateSCPDataMovementDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_addGridFTPDataMovementDetails_args {
 public:

  Airavata_addGridFTPDataMovementDetails_args() : computeResourceId(), priorityOrder(0) {
  }

  virtual ~Airavata_addGridFTPDataMovementDetails_args() throw() {}

  std::string computeResourceId;
  int32_t priorityOrder;
   ::GridFTPDataMovement gridFTPDataMovement;

  void __set_computeResourceId(const std::string& val) {
    computeResourceId = val;
  }

  void __set_priorityOrder(const int32_t val) {
    priorityOrder = val;
  }

  void __set_gridFTPDataMovement(const  ::GridFTPDataMovement& val) {
    gridFTPDataMovement = val;
  }

  bool operator == (const Airavata_addGridFTPDataMovementDetails_args & rhs) const
  {
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    if (!(priorityOrder == rhs.priorityOrder))
      return false;
    if (!(gridFTPDataMovement == rhs.gridFTPDataMovement))
      return false;
    return true;
  }
  bool operator != (const Airavata_addGridFTPDataMovementDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addGridFTPDataMovementDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_addGridFTPDataMovementDetails_pargs {
 public:


  virtual ~Airavata_addGridFTPDataMovementDetails_pargs() throw() {}

  const std::string* computeResourceId;
  const int32_t* priorityOrder;
  const  ::GridFTPDataMovement* gridFTPDataMovement;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_addGridFTPDataMovementDetails_result__isset {
  _Airavata_addGridFTPDataMovementDetails_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_addGridFTPDataMovementDetails_result__isset;

class Airavata_addGridFTPDataMovementDetails_result {
 public:

  Airavata_addGridFTPDataMovementDetails_result() : success(0) {
  }

  virtual ~Airavata_addGridFTPDataMovementDetails_result() throw() {}

  bool success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_addGridFTPDataMovementDetails_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_addGridFTPDataMovementDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_addGridFTPDataMovementDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addGridFTPDataMovementDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_addGridFTPDataMovementDetails_presult__isset {
  _Airavata_addGridFTPDataMovementDetails_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_addGridFTPDataMovementDetails_presult__isset;

class Airavata_addGridFTPDataMovementDetails_presult {
 public:


  virtual ~Airavata_addGridFTPDataMovementDetails_presult() throw() {}

  bool* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_addGridFTPDataMovementDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_updateGridFTPDataMovementDetails_args {
 public:

  Airavata_updateGridFTPDataMovementDetails_args() : jobSubmissionInterfaceId() {
  }

  virtual ~Airavata_updateGridFTPDataMovementDetails_args() throw() {}

  std::string jobSubmissionInterfaceId;
   ::GridFTPDataMovement gridFTPDataMovement;

  void __set_jobSubmissionInterfaceId(const std::string& val) {
    jobSubmissionInterfaceId = val;
  }

  void __set_gridFTPDataMovement(const  ::GridFTPDataMovement& val) {
    gridFTPDataMovement = val;
  }

  bool operator == (const Airavata_updateGridFTPDataMovementDetails_args & rhs) const
  {
    if (!(jobSubmissionInterfaceId == rhs.jobSubmissionInterfaceId))
      return false;
    if (!(gridFTPDataMovement == rhs.gridFTPDataMovement))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateGridFTPDataMovementDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateGridFTPDataMovementDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateGridFTPDataMovementDetails_pargs {
 public:


  virtual ~Airavata_updateGridFTPDataMovementDetails_pargs() throw() {}

  const std::string* jobSubmissionInterfaceId;
  const  ::GridFTPDataMovement* gridFTPDataMovement;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateGridFTPDataMovementDetails_result__isset {
  _Airavata_updateGridFTPDataMovementDetails_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateGridFTPDataMovementDetails_result__isset;

class Airavata_updateGridFTPDataMovementDetails_result {
 public:

  Airavata_updateGridFTPDataMovementDetails_result() : success(0) {
  }

  virtual ~Airavata_updateGridFTPDataMovementDetails_result() throw() {}

  bool success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateGridFTPDataMovementDetails_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_updateGridFTPDataMovementDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateGridFTPDataMovementDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateGridFTPDataMovementDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateGridFTPDataMovementDetails_presult__isset {
  _Airavata_updateGridFTPDataMovementDetails_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateGridFTPDataMovementDetails_presult__isset;

class Airavata_updateGridFTPDataMovementDetails_presult {
 public:


  virtual ~Airavata_updateGridFTPDataMovementDetails_presult() throw() {}

  bool* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateGridFTPDataMovementDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_changeJobSubmissionPriority_args {
 public:

  Airavata_changeJobSubmissionPriority_args() : jobSubmissionInterfaceId(), newPriorityOrder(0) {
  }

  virtual ~Airavata_changeJobSubmissionPriority_args() throw() {}

  std::string jobSubmissionInterfaceId;
  int32_t newPriorityOrder;

  void __set_jobSubmissionInterfaceId(const std::string& val) {
    jobSubmissionInterfaceId = val;
  }

  void __set_newPriorityOrder(const int32_t val) {
    newPriorityOrder = val;
  }

  bool operator == (const Airavata_changeJobSubmissionPriority_args & rhs) const
  {
    if (!(jobSubmissionInterfaceId == rhs.jobSubmissionInterfaceId))
      return false;
    if (!(newPriorityOrder == rhs.newPriorityOrder))
      return false;
    return true;
  }
  bool operator != (const Airavata_changeJobSubmissionPriority_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_changeJobSubmissionPriority_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_changeJobSubmissionPriority_pargs {
 public:


  virtual ~Airavata_changeJobSubmissionPriority_pargs() throw() {}

  const std::string* jobSubmissionInterfaceId;
  const int32_t* newPriorityOrder;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_changeJobSubmissionPriority_result__isset {
  _Airavata_changeJobSubmissionPriority_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_changeJobSubmissionPriority_result__isset;

class Airavata_changeJobSubmissionPriority_result {
 public:

  Airavata_changeJobSubmissionPriority_result() : success(0) {
  }

  virtual ~Airavata_changeJobSubmissionPriority_result() throw() {}

  bool success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_changeJobSubmissionPriority_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_changeJobSubmissionPriority_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_changeJobSubmissionPriority_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_changeJobSubmissionPriority_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_changeJobSubmissionPriority_presult__isset {
  _Airavata_changeJobSubmissionPriority_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_changeJobSubmissionPriority_presult__isset;

class Airavata_changeJobSubmissionPriority_presult {
 public:


  virtual ~Airavata_changeJobSubmissionPriority_presult() throw() {}

  bool* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_changeJobSubmissionPriority_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_changeDataMovementPriority_args {
 public:

  Airavata_changeDataMovementPriority_args() : dataMovementInterfaceId(), newPriorityOrder(0) {
  }

  virtual ~Airavata_changeDataMovementPriority_args() throw() {}

  std::string dataMovementInterfaceId;
  int32_t newPriorityOrder;

  void __set_dataMovementInterfaceId(const std::string& val) {
    dataMovementInterfaceId = val;
  }

  void __set_newPriorityOrder(const int32_t val) {
    newPriorityOrder = val;
  }

  bool operator == (const Airavata_changeDataMovementPriority_args & rhs) const
  {
    if (!(dataMovementInterfaceId == rhs.dataMovementInterfaceId))
      return false;
    if (!(newPriorityOrder == rhs.newPriorityOrder))
      return false;
    return true;
  }
  bool operator != (const Airavata_changeDataMovementPriority_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_changeDataMovementPriority_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_changeDataMovementPriority_pargs {
 public:


  virtual ~Airavata_changeDataMovementPriority_pargs() throw() {}

  const std::string* dataMovementInterfaceId;
  const int32_t* newPriorityOrder;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_changeDataMovementPriority_result__isset {
  _Airavata_changeDataMovementPriority_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_changeDataMovementPriority_result__isset;

class Airavata_changeDataMovementPriority_result {
 public:

  Airavata_changeDataMovementPriority_result() : success(0) {
  }

  virtual ~Airavata_changeDataMovementPriority_result() throw() {}

  bool success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_changeDataMovementPriority_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_changeDataMovementPriority_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_changeDataMovementPriority_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_changeDataMovementPriority_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_changeDataMovementPriority_presult__isset {
  _Airavata_changeDataMovementPriority_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_changeDataMovementPriority_presult__isset;

class Airavata_changeDataMovementPriority_presult {
 public:


  virtual ~Airavata_changeDataMovementPriority_presult() throw() {}

  bool* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_changeDataMovementPriority_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_changeJobSubmissionPriorities_args {
 public:

  Airavata_changeJobSubmissionPriorities_args() {
  }

  virtual ~Airavata_changeJobSubmissionPriorities_args() throw() {}

  std::map<std::string, int32_t>  jobSubmissionPriorityMap;

  void __set_jobSubmissionPriorityMap(const std::map<std::string, int32_t> & val) {
    jobSubmissionPriorityMap = val;
  }

  bool operator == (const Airavata_changeJobSubmissionPriorities_args & rhs) const
  {
    if (!(jobSubmissionPriorityMap == rhs.jobSubmissionPriorityMap))
      return false;
    return true;
  }
  bool operator != (const Airavata_changeJobSubmissionPriorities_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_changeJobSubmissionPriorities_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_changeJobSubmissionPriorities_pargs {
 public:


  virtual ~Airavata_changeJobSubmissionPriorities_pargs() throw() {}

  const std::map<std::string, int32_t> * jobSubmissionPriorityMap;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_changeJobSubmissionPriorities_result__isset {
  _Airavata_changeJobSubmissionPriorities_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_changeJobSubmissionPriorities_result__isset;

class Airavata_changeJobSubmissionPriorities_result {
 public:

  Airavata_changeJobSubmissionPriorities_result() : success(0) {
  }

  virtual ~Airavata_changeJobSubmissionPriorities_result() throw() {}

  bool success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_changeJobSubmissionPriorities_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_changeJobSubmissionPriorities_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_changeJobSubmissionPriorities_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_changeJobSubmissionPriorities_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_changeJobSubmissionPriorities_presult__isset {
  _Airavata_changeJobSubmissionPriorities_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_changeJobSubmissionPriorities_presult__isset;

class Airavata_changeJobSubmissionPriorities_presult {
 public:


  virtual ~Airavata_changeJobSubmissionPriorities_presult() throw() {}

  bool* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_changeJobSubmissionPriorities_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_changeDataMovementPriorities_args {
 public:

  Airavata_changeDataMovementPriorities_args() {
  }

  virtual ~Airavata_changeDataMovementPriorities_args() throw() {}

  std::map<std::string, int32_t>  dataMovementPriorityMap;

  void __set_dataMovementPriorityMap(const std::map<std::string, int32_t> & val) {
    dataMovementPriorityMap = val;
  }

  bool operator == (const Airavata_changeDataMovementPriorities_args & rhs) const
  {
    if (!(dataMovementPriorityMap == rhs.dataMovementPriorityMap))
      return false;
    return true;
  }
  bool operator != (const Airavata_changeDataMovementPriorities_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_changeDataMovementPriorities_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_changeDataMovementPriorities_pargs {
 public:


  virtual ~Airavata_changeDataMovementPriorities_pargs() throw() {}

  const std::map<std::string, int32_t> * dataMovementPriorityMap;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_changeDataMovementPriorities_result__isset {
  _Airavata_changeDataMovementPriorities_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_changeDataMovementPriorities_result__isset;

class Airavata_changeDataMovementPriorities_result {
 public:

  Airavata_changeDataMovementPriorities_result() : success(0) {
  }

  virtual ~Airavata_changeDataMovementPriorities_result() throw() {}

  bool success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_changeDataMovementPriorities_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_changeDataMovementPriorities_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_changeDataMovementPriorities_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_changeDataMovementPriorities_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_changeDataMovementPriorities_presult__isset {
  _Airavata_changeDataMovementPriorities_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_changeDataMovementPriorities_presult__isset;

class Airavata_changeDataMovementPriorities_presult {
 public:


  virtual ~Airavata_changeDataMovementPriorities_presult() throw() {}

  bool* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_changeDataMovementPriorities_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_deleteJobSubmissionInterface_args {
 public:

  Airavata_deleteJobSubmissionInterface_args() : jobSubmissionInterfaceId() {
  }

  virtual ~Airavata_deleteJobSubmissionInterface_args() throw() {}

  std::string jobSubmissionInterfaceId;

  void __set_jobSubmissionInterfaceId(const std::string& val) {
    jobSubmissionInterfaceId = val;
  }

  bool operator == (const Airavata_deleteJobSubmissionInterface_args & rhs) const
  {
    if (!(jobSubmissionInterfaceId == rhs.jobSubmissionInterfaceId))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteJobSubmissionInterface_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteJobSubmissionInterface_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_deleteJobSubmissionInterface_pargs {
 public:


  virtual ~Airavata_deleteJobSubmissionInterface_pargs() throw() {}

  const std::string* jobSubmissionInterfaceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_deleteJobSubmissionInterface_result__isset {
  _Airavata_deleteJobSubmissionInterface_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_deleteJobSubmissionInterface_result__isset;

class Airavata_deleteJobSubmissionInterface_result {
 public:

  Airavata_deleteJobSubmissionInterface_result() : success(0) {
  }

  virtual ~Airavata_deleteJobSubmissionInterface_result() throw() {}

  bool success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_deleteJobSubmissionInterface_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_deleteJobSubmissionInterface_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteJobSubmissionInterface_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteJobSubmissionInterface_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_deleteJobSubmissionInterface_presult__isset {
  _Airavata_deleteJobSubmissionInterface_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_deleteJobSubmissionInterface_presult__isset;

class Airavata_deleteJobSubmissionInterface_presult {
 public:


  virtual ~Airavata_deleteJobSubmissionInterface_presult() throw() {}

  bool* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_deleteJobSubmissionInterface_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_deleteDataMovementInterface_args {
 public:

  Airavata_deleteDataMovementInterface_args() : dataMovementInterfaceId() {
  }

  virtual ~Airavata_deleteDataMovementInterface_args() throw() {}

  std::string dataMovementInterfaceId;

  void __set_dataMovementInterfaceId(const std::string& val) {
    dataMovementInterfaceId = val;
  }

  bool operator == (const Airavata_deleteDataMovementInterface_args & rhs) const
  {
    if (!(dataMovementInterfaceId == rhs.dataMovementInterfaceId))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteDataMovementInterface_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteDataMovementInterface_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_deleteDataMovementInterface_pargs {
 public:


  virtual ~Airavata_deleteDataMovementInterface_pargs() throw() {}

  const std::string* dataMovementInterfaceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_deleteDataMovementInterface_result__isset {
  _Airavata_deleteDataMovementInterface_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_deleteDataMovementInterface_result__isset;

class Airavata_deleteDataMovementInterface_result {
 public:

  Airavata_deleteDataMovementInterface_result() : success(0) {
  }

  virtual ~Airavata_deleteDataMovementInterface_result() throw() {}

  bool success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_deleteDataMovementInterface_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_deleteDataMovementInterface_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteDataMovementInterface_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteDataMovementInterface_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_deleteDataMovementInterface_presult__isset {
  _Airavata_deleteDataMovementInterface_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_deleteDataMovementInterface_presult__isset;

class Airavata_deleteDataMovementInterface_presult {
 public:


  virtual ~Airavata_deleteDataMovementInterface_presult() throw() {}

  bool* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_deleteDataMovementInterface_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_registerGatewayResourceProfile_args {
 public:

  Airavata_registerGatewayResourceProfile_args() {
  }

  virtual ~Airavata_registerGatewayResourceProfile_args() throw() {}

   ::GatewayResourceProfile gatewayResourceProfile;

  void __set_gatewayResourceProfile(const  ::GatewayResourceProfile& val) {
    gatewayResourceProfile = val;
  }

  bool operator == (const Airavata_registerGatewayResourceProfile_args & rhs) const
  {
    if (!(gatewayResourceProfile == rhs.gatewayResourceProfile))
      return false;
    return true;
  }
  bool operator != (const Airavata_registerGatewayResourceProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_registerGatewayResourceProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_registerGatewayResourceProfile_pargs {
 public:


  virtual ~Airavata_registerGatewayResourceProfile_pargs() throw() {}

  const  ::GatewayResourceProfile* gatewayResourceProfile;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_registerGatewayResourceProfile_result__isset {
  _Airavata_registerGatewayResourceProfile_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_registerGatewayResourceProfile_result__isset;

class Airavata_registerGatewayResourceProfile_result {
 public:

  Airavata_registerGatewayResourceProfile_result() : success() {
  }

  virtual ~Airavata_registerGatewayResourceProfile_result() throw() {}

  std::string success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_registerGatewayResourceProfile_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_registerGatewayResourceProfile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_registerGatewayResourceProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_registerGatewayResourceProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_registerGatewayResourceProfile_presult__isset {
  _Airavata_registerGatewayResourceProfile_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_registerGatewayResourceProfile_presult__isset;

class Airavata_registerGatewayResourceProfile_presult {
 public:


  virtual ~Airavata_registerGatewayResourceProfile_presult() throw() {}

  std::string* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_registerGatewayResourceProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getGatewayResourceProfile_args {
 public:

  Airavata_getGatewayResourceProfile_args() : gatewayID() {
  }

  virtual ~Airavata_getGatewayResourceProfile_args() throw() {}

  std::string gatewayID;

  void __set_gatewayID(const std::string& val) {
    gatewayID = val;
  }

  bool operator == (const Airavata_getGatewayResourceProfile_args & rhs) const
  {
    if (!(gatewayID == rhs.gatewayID))
      return false;
    return true;
  }
  bool operator != (const Airavata_getGatewayResourceProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getGatewayResourceProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getGatewayResourceProfile_pargs {
 public:


  virtual ~Airavata_getGatewayResourceProfile_pargs() throw() {}

  const std::string* gatewayID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getGatewayResourceProfile_result__isset {
  _Airavata_getGatewayResourceProfile_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getGatewayResourceProfile_result__isset;

class Airavata_getGatewayResourceProfile_result {
 public:

  Airavata_getGatewayResourceProfile_result() {
  }

  virtual ~Airavata_getGatewayResourceProfile_result() throw() {}

   ::GatewayResourceProfile success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_getGatewayResourceProfile_result__isset __isset;

  void __set_success(const  ::GatewayResourceProfile& val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getGatewayResourceProfile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getGatewayResourceProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getGatewayResourceProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getGatewayResourceProfile_presult__isset {
  _Airavata_getGatewayResourceProfile_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getGatewayResourceProfile_presult__isset;

class Airavata_getGatewayResourceProfile_presult {
 public:


  virtual ~Airavata_getGatewayResourceProfile_presult() throw() {}

   ::GatewayResourceProfile* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_getGatewayResourceProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_updateGatewayResourceProfile_args {
 public:

  Airavata_updateGatewayResourceProfile_args() : gatewayID() {
  }

  virtual ~Airavata_updateGatewayResourceProfile_args() throw() {}

  std::string gatewayID;
   ::GatewayResourceProfile gatewayResourceProfile;

  void __set_gatewayID(const std::string& val) {
    gatewayID = val;
  }

  void __set_gatewayResourceProfile(const  ::GatewayResourceProfile& val) {
    gatewayResourceProfile = val;
  }

  bool operator == (const Airavata_updateGatewayResourceProfile_args & rhs) const
  {
    if (!(gatewayID == rhs.gatewayID))
      return false;
    if (!(gatewayResourceProfile == rhs.gatewayResourceProfile))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateGatewayResourceProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateGatewayResourceProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateGatewayResourceProfile_pargs {
 public:


  virtual ~Airavata_updateGatewayResourceProfile_pargs() throw() {}

  const std::string* gatewayID;
  const  ::GatewayResourceProfile* gatewayResourceProfile;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateGatewayResourceProfile_result__isset {
  _Airavata_updateGatewayResourceProfile_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateGatewayResourceProfile_result__isset;

class Airavata_updateGatewayResourceProfile_result {
 public:

  Airavata_updateGatewayResourceProfile_result() : success(0) {
  }

  virtual ~Airavata_updateGatewayResourceProfile_result() throw() {}

  bool success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateGatewayResourceProfile_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_updateGatewayResourceProfile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateGatewayResourceProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateGatewayResourceProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateGatewayResourceProfile_presult__isset {
  _Airavata_updateGatewayResourceProfile_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateGatewayResourceProfile_presult__isset;

class Airavata_updateGatewayResourceProfile_presult {
 public:


  virtual ~Airavata_updateGatewayResourceProfile_presult() throw() {}

  bool* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateGatewayResourceProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_deleteGatewayResourceProfile_args {
 public:

  Airavata_deleteGatewayResourceProfile_args() : gatewayID() {
  }

  virtual ~Airavata_deleteGatewayResourceProfile_args() throw() {}

  std::string gatewayID;

  void __set_gatewayID(const std::string& val) {
    gatewayID = val;
  }

  bool operator == (const Airavata_deleteGatewayResourceProfile_args & rhs) const
  {
    if (!(gatewayID == rhs.gatewayID))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteGatewayResourceProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteGatewayResourceProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_deleteGatewayResourceProfile_pargs {
 public:


  virtual ~Airavata_deleteGatewayResourceProfile_pargs() throw() {}

  const std::string* gatewayID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_deleteGatewayResourceProfile_result__isset {
  _Airavata_deleteGatewayResourceProfile_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_deleteGatewayResourceProfile_result__isset;

class Airavata_deleteGatewayResourceProfile_result {
 public:

  Airavata_deleteGatewayResourceProfile_result() : success(0) {
  }

  virtual ~Airavata_deleteGatewayResourceProfile_result() throw() {}

  bool success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_deleteGatewayResourceProfile_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_deleteGatewayResourceProfile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteGatewayResourceProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteGatewayResourceProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_deleteGatewayResourceProfile_presult__isset {
  _Airavata_deleteGatewayResourceProfile_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_deleteGatewayResourceProfile_presult__isset;

class Airavata_deleteGatewayResourceProfile_presult {
 public:


  virtual ~Airavata_deleteGatewayResourceProfile_presult() throw() {}

  bool* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_deleteGatewayResourceProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_addGatewayComputeResourcePreference_args {
 public:

  Airavata_addGatewayComputeResourcePreference_args() : gatewayID(), computeResourceId() {
  }

  virtual ~Airavata_addGatewayComputeResourcePreference_args() throw() {}

  std::string gatewayID;
  std::string computeResourceId;
   ::ComputeResourcePreference computeResourcePreference;

  void __set_gatewayID(const std::string& val) {
    gatewayID = val;
  }

  void __set_computeResourceId(const std::string& val) {
    computeResourceId = val;
  }

  void __set_computeResourcePreference(const  ::ComputeResourcePreference& val) {
    computeResourcePreference = val;
  }

  bool operator == (const Airavata_addGatewayComputeResourcePreference_args & rhs) const
  {
    if (!(gatewayID == rhs.gatewayID))
      return false;
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    if (!(computeResourcePreference == rhs.computeResourcePreference))
      return false;
    return true;
  }
  bool operator != (const Airavata_addGatewayComputeResourcePreference_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addGatewayComputeResourcePreference_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_addGatewayComputeResourcePreference_pargs {
 public:


  virtual ~Airavata_addGatewayComputeResourcePreference_pargs() throw() {}

  const std::string* gatewayID;
  const std::string* computeResourceId;
  const  ::ComputeResourcePreference* computeResourcePreference;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_addGatewayComputeResourcePreference_result__isset {
  _Airavata_addGatewayComputeResourcePreference_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_addGatewayComputeResourcePreference_result__isset;

class Airavata_addGatewayComputeResourcePreference_result {
 public:

  Airavata_addGatewayComputeResourcePreference_result() : success(0) {
  }

  virtual ~Airavata_addGatewayComputeResourcePreference_result() throw() {}

  bool success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_addGatewayComputeResourcePreference_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_addGatewayComputeResourcePreference_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_addGatewayComputeResourcePreference_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addGatewayComputeResourcePreference_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_addGatewayComputeResourcePreference_presult__isset {
  _Airavata_addGatewayComputeResourcePreference_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_addGatewayComputeResourcePreference_presult__isset;

class Airavata_addGatewayComputeResourcePreference_presult {
 public:


  virtual ~Airavata_addGatewayComputeResourcePreference_presult() throw() {}

  bool* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_addGatewayComputeResourcePreference_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getGatewayComputeResourcePreference_args {
 public:

  Airavata_getGatewayComputeResourcePreference_args() : gatewayID(), computeResourceId() {
  }

  virtual ~Airavata_getGatewayComputeResourcePreference_args() throw() {}

  std::string gatewayID;
  std::string computeResourceId;

  void __set_gatewayID(const std::string& val) {
    gatewayID = val;
  }

  void __set_computeResourceId(const std::string& val) {
    computeResourceId = val;
  }

  bool operator == (const Airavata_getGatewayComputeResourcePreference_args & rhs) const
  {
    if (!(gatewayID == rhs.gatewayID))
      return false;
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getGatewayComputeResourcePreference_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getGatewayComputeResourcePreference_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getGatewayComputeResourcePreference_pargs {
 public:


  virtual ~Airavata_getGatewayComputeResourcePreference_pargs() throw() {}

  const std::string* gatewayID;
  const std::string* computeResourceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getGatewayComputeResourcePreference_result__isset {
  _Airavata_getGatewayComputeResourcePreference_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getGatewayComputeResourcePreference_result__isset;

class Airavata_getGatewayComputeResourcePreference_result {
 public:

  Airavata_getGatewayComputeResourcePreference_result() {
  }

  virtual ~Airavata_getGatewayComputeResourcePreference_result() throw() {}

   ::ComputeResourcePreference success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_getGatewayComputeResourcePreference_result__isset __isset;

  void __set_success(const  ::ComputeResourcePreference& val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getGatewayComputeResourcePreference_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getGatewayComputeResourcePreference_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getGatewayComputeResourcePreference_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getGatewayComputeResourcePreference_presult__isset {
  _Airavata_getGatewayComputeResourcePreference_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getGatewayComputeResourcePreference_presult__isset;

class Airavata_getGatewayComputeResourcePreference_presult {
 public:


  virtual ~Airavata_getGatewayComputeResourcePreference_presult() throw() {}

   ::ComputeResourcePreference* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_getGatewayComputeResourcePreference_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getAllGatewayComputeResourcePreferences_args {
 public:

  Airavata_getAllGatewayComputeResourcePreferences_args() : gatewayID() {
  }

  virtual ~Airavata_getAllGatewayComputeResourcePreferences_args() throw() {}

  std::string gatewayID;

  void __set_gatewayID(const std::string& val) {
    gatewayID = val;
  }

  bool operator == (const Airavata_getAllGatewayComputeResourcePreferences_args & rhs) const
  {
    if (!(gatewayID == rhs.gatewayID))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllGatewayComputeResourcePreferences_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllGatewayComputeResourcePreferences_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getAllGatewayComputeResourcePreferences_pargs {
 public:


  virtual ~Airavata_getAllGatewayComputeResourcePreferences_pargs() throw() {}

  const std::string* gatewayID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllGatewayComputeResourcePreferences_result__isset {
  _Airavata_getAllGatewayComputeResourcePreferences_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAllGatewayComputeResourcePreferences_result__isset;

class Airavata_getAllGatewayComputeResourcePreferences_result {
 public:

  Airavata_getAllGatewayComputeResourcePreferences_result() {
  }

  virtual ~Airavata_getAllGatewayComputeResourcePreferences_result() throw() {}

  std::vector< ::ComputeResourcePreference>  success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAllGatewayComputeResourcePreferences_result__isset __isset;

  void __set_success(const std::vector< ::ComputeResourcePreference> & val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getAllGatewayComputeResourcePreferences_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllGatewayComputeResourcePreferences_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllGatewayComputeResourcePreferences_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllGatewayComputeResourcePreferences_presult__isset {
  _Airavata_getAllGatewayComputeResourcePreferences_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAllGatewayComputeResourcePreferences_presult__isset;

class Airavata_getAllGatewayComputeResourcePreferences_presult {
 public:


  virtual ~Airavata_getAllGatewayComputeResourcePreferences_presult() throw() {}

  std::vector< ::ComputeResourcePreference> * success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAllGatewayComputeResourcePreferences_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_updateGatewayComputeResourcePreference_args {
 public:

  Airavata_updateGatewayComputeResourcePreference_args() : gatewayID(), computeResourceId() {
  }

  virtual ~Airavata_updateGatewayComputeResourcePreference_args() throw() {}

  std::string gatewayID;
  std::string computeResourceId;
   ::ComputeResourcePreference computeResourcePreference;

  void __set_gatewayID(const std::string& val) {
    gatewayID = val;
  }

  void __set_computeResourceId(const std::string& val) {
    computeResourceId = val;
  }

  void __set_computeResourcePreference(const  ::ComputeResourcePreference& val) {
    computeResourcePreference = val;
  }

  bool operator == (const Airavata_updateGatewayComputeResourcePreference_args & rhs) const
  {
    if (!(gatewayID == rhs.gatewayID))
      return false;
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    if (!(computeResourcePreference == rhs.computeResourcePreference))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateGatewayComputeResourcePreference_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateGatewayComputeResourcePreference_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateGatewayComputeResourcePreference_pargs {
 public:


  virtual ~Airavata_updateGatewayComputeResourcePreference_pargs() throw() {}

  const std::string* gatewayID;
  const std::string* computeResourceId;
  const  ::ComputeResourcePreference* computeResourcePreference;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateGatewayComputeResourcePreference_result__isset {
  _Airavata_updateGatewayComputeResourcePreference_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateGatewayComputeResourcePreference_result__isset;

class Airavata_updateGatewayComputeResourcePreference_result {
 public:

  Airavata_updateGatewayComputeResourcePreference_result() : success(0) {
  }

  virtual ~Airavata_updateGatewayComputeResourcePreference_result() throw() {}

  bool success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateGatewayComputeResourcePreference_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_updateGatewayComputeResourcePreference_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateGatewayComputeResourcePreference_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateGatewayComputeResourcePreference_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateGatewayComputeResourcePreference_presult__isset {
  _Airavata_updateGatewayComputeResourcePreference_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateGatewayComputeResourcePreference_presult__isset;

class Airavata_updateGatewayComputeResourcePreference_presult {
 public:


  virtual ~Airavata_updateGatewayComputeResourcePreference_presult() throw() {}

  bool* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateGatewayComputeResourcePreference_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_deleteGatewayComputeResourcePreference_args {
 public:

  Airavata_deleteGatewayComputeResourcePreference_args() : gatewayID(), computeResourceId() {
  }

  virtual ~Airavata_deleteGatewayComputeResourcePreference_args() throw() {}

  std::string gatewayID;
  std::string computeResourceId;

  void __set_gatewayID(const std::string& val) {
    gatewayID = val;
  }

  void __set_computeResourceId(const std::string& val) {
    computeResourceId = val;
  }

  bool operator == (const Airavata_deleteGatewayComputeResourcePreference_args & rhs) const
  {
    if (!(gatewayID == rhs.gatewayID))
      return false;
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteGatewayComputeResourcePreference_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteGatewayComputeResourcePreference_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_deleteGatewayComputeResourcePreference_pargs {
 public:


  virtual ~Airavata_deleteGatewayComputeResourcePreference_pargs() throw() {}

  const std::string* gatewayID;
  const std::string* computeResourceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_deleteGatewayComputeResourcePreference_result__isset {
  _Airavata_deleteGatewayComputeResourcePreference_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_deleteGatewayComputeResourcePreference_result__isset;

class Airavata_deleteGatewayComputeResourcePreference_result {
 public:

  Airavata_deleteGatewayComputeResourcePreference_result() : success(0) {
  }

  virtual ~Airavata_deleteGatewayComputeResourcePreference_result() throw() {}

  bool success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_deleteGatewayComputeResourcePreference_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_deleteGatewayComputeResourcePreference_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteGatewayComputeResourcePreference_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteGatewayComputeResourcePreference_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_deleteGatewayComputeResourcePreference_presult__isset {
  _Airavata_deleteGatewayComputeResourcePreference_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_deleteGatewayComputeResourcePreference_presult__isset;

class Airavata_deleteGatewayComputeResourcePreference_presult {
 public:


  virtual ~Airavata_deleteGatewayComputeResourcePreference_presult() throw() {}

  bool* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _Airavata_deleteGatewayComputeResourcePreference_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AiravataClient : virtual public AiravataIf {
 public:
  AiravataClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  AiravataClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getAPIVersion(std::string& _return);
  void send_getAPIVersion();
  void recv_getAPIVersion(std::string& _return);
  void createProject(std::string& _return, const  ::Project& project);
  void send_createProject(const  ::Project& project);
  void recv_createProject(std::string& _return);
  void updateProject(const std::string& projectId, const  ::Project& updatedProject);
  void send_updateProject(const std::string& projectId, const  ::Project& updatedProject);
  void recv_updateProject();
  void getProject( ::Project& _return, const std::string& projectId);
  void send_getProject(const std::string& projectId);
  void recv_getProject( ::Project& _return);
  void getAllUserProjects(std::vector< ::Project> & _return, const std::string& userName);
  void send_getAllUserProjects(const std::string& userName);
  void recv_getAllUserProjects(std::vector< ::Project> & _return);
  void searchProjectsByProjectName(std::vector< ::Project> & _return, const std::string& userName, const std::string& projectName);
  void send_searchProjectsByProjectName(const std::string& userName, const std::string& projectName);
  void recv_searchProjectsByProjectName(std::vector< ::Project> & _return);
  void searchProjectsByProjectDesc(std::vector< ::Project> & _return, const std::string& userName, const std::string& description);
  void send_searchProjectsByProjectDesc(const std::string& userName, const std::string& description);
  void recv_searchProjectsByProjectDesc(std::vector< ::Project> & _return);
  void searchExperimentsByName(std::vector< ::ExperimentSummary> & _return, const std::string& userName, const std::string& expName);
  void send_searchExperimentsByName(const std::string& userName, const std::string& expName);
  void recv_searchExperimentsByName(std::vector< ::ExperimentSummary> & _return);
  void searchExperimentsByDesc(std::vector< ::ExperimentSummary> & _return, const std::string& userName, const std::string& description);
  void send_searchExperimentsByDesc(const std::string& userName, const std::string& description);
  void recv_searchExperimentsByDesc(std::vector< ::ExperimentSummary> & _return);
  void searchExperimentsByApplication(std::vector< ::ExperimentSummary> & _return, const std::string& userName, const std::string& applicationId);
  void send_searchExperimentsByApplication(const std::string& userName, const std::string& applicationId);
  void recv_searchExperimentsByApplication(std::vector< ::ExperimentSummary> & _return);
  void getAllExperimentsInProject(std::vector< ::Experiment> & _return, const std::string& projectId);
  void send_getAllExperimentsInProject(const std::string& projectId);
  void recv_getAllExperimentsInProject(std::vector< ::Experiment> & _return);
  void getAllUserExperiments(std::vector< ::Experiment> & _return, const std::string& userName);
  void send_getAllUserExperiments(const std::string& userName);
  void recv_getAllUserExperiments(std::vector< ::Experiment> & _return);
  void createExperiment(std::string& _return, const  ::Experiment& experiment);
  void send_createExperiment(const  ::Experiment& experiment);
  void recv_createExperiment(std::string& _return);
  void getExperiment( ::Experiment& _return, const std::string& airavataExperimentId);
  void send_getExperiment(const std::string& airavataExperimentId);
  void recv_getExperiment( ::Experiment& _return);
  void updateExperiment(const std::string& airavataExperimentId, const  ::Experiment& experiment);
  void send_updateExperiment(const std::string& airavataExperimentId, const  ::Experiment& experiment);
  void recv_updateExperiment();
  void updateExperimentConfiguration(const std::string& airavataExperimentId, const  ::UserConfigurationData& userConfiguration);
  void send_updateExperimentConfiguration(const std::string& airavataExperimentId, const  ::UserConfigurationData& userConfiguration);
  void recv_updateExperimentConfiguration();
  void updateResourceScheduleing(const std::string& airavataExperimentId, const  ::ComputationalResourceScheduling& resourceScheduling);
  void send_updateResourceScheduleing(const std::string& airavataExperimentId, const  ::ComputationalResourceScheduling& resourceScheduling);
  void recv_updateResourceScheduleing();
  bool validateExperiment(const std::string& airavataExperimentId);
  void send_validateExperiment(const std::string& airavataExperimentId);
  bool recv_validateExperiment();
  void launchExperiment(const std::string& airavataExperimentId, const std::string& airavataCredStoreToken);
  void send_launchExperiment(const std::string& airavataExperimentId, const std::string& airavataCredStoreToken);
  void recv_launchExperiment();
  void getExperimentStatus( ::ExperimentStatus& _return, const std::string& airavataExperimentId);
  void send_getExperimentStatus(const std::string& airavataExperimentId);
  void recv_getExperimentStatus( ::ExperimentStatus& _return);
  void getExperimentOutputs(std::vector< ::DataObjectType> & _return, const std::string& airavataExperimentId);
  void send_getExperimentOutputs(const std::string& airavataExperimentId);
  void recv_getExperimentOutputs(std::vector< ::DataObjectType> & _return);
  void getJobStatuses(std::map<std::string,  ::JobStatus> & _return, const std::string& airavataExperimentId);
  void send_getJobStatuses(const std::string& airavataExperimentId);
  void recv_getJobStatuses(std::map<std::string,  ::JobStatus> & _return);
  void cloneExperiment(std::string& _return, const std::string& existingExperimentID, const std::string& newExperimentName);
  void send_cloneExperiment(const std::string& existingExperimentID, const std::string& newExperimentName);
  void recv_cloneExperiment(std::string& _return);
  void terminateExperiment(const std::string& airavataExperimentId);
  void send_terminateExperiment(const std::string& airavataExperimentId);
  void recv_terminateExperiment();
  void registerApplicationModule(std::string& _return, const  ::ApplicationModule& applicationModule);
  void send_registerApplicationModule(const  ::ApplicationModule& applicationModule);
  void recv_registerApplicationModule(std::string& _return);
  void getApplicationModule( ::ApplicationModule& _return, const std::string& appModuleId);
  void send_getApplicationModule(const std::string& appModuleId);
  void recv_getApplicationModule( ::ApplicationModule& _return);
  bool updateApplicationModule(const std::string& appModuleId, const  ::ApplicationModule& applicationModule);
  void send_updateApplicationModule(const std::string& appModuleId, const  ::ApplicationModule& applicationModule);
  bool recv_updateApplicationModule();
  bool deleteApplicationModule(const std::string& appModuleId);
  void send_deleteApplicationModule(const std::string& appModuleId);
  bool recv_deleteApplicationModule();
  void registerApplicationDeployment(std::string& _return, const  ::ApplicationDeploymentDescription& applicationDeployment);
  void send_registerApplicationDeployment(const  ::ApplicationDeploymentDescription& applicationDeployment);
  void recv_registerApplicationDeployment(std::string& _return);
  void getApplicationDeployment( ::ApplicationDeploymentDescription& _return, const std::string& appDeploymentId);
  void send_getApplicationDeployment(const std::string& appDeploymentId);
  void recv_getApplicationDeployment( ::ApplicationDeploymentDescription& _return);
  bool updateApplicationDeployment(const std::string& appDeploymentId, const  ::ApplicationDeploymentDescription& applicationDeployment);
  void send_updateApplicationDeployment(const std::string& appDeploymentId, const  ::ApplicationDeploymentDescription& applicationDeployment);
  bool recv_updateApplicationDeployment();
  bool deleteApplicationDeployment(const std::string& appDeploymentId);
  void send_deleteApplicationDeployment(const std::string& appDeploymentId);
  bool recv_deleteApplicationDeployment();
  void getAppModuleDeployedResources(std::vector<std::string> & _return, const std::string& appModuleId);
  void send_getAppModuleDeployedResources(const std::string& appModuleId);
  void recv_getAppModuleDeployedResources(std::vector<std::string> & _return);
  void registerApplicationInterface(std::string& _return, const  ::ApplicationInterfaceDescription& applicationInterface);
  void send_registerApplicationInterface(const  ::ApplicationInterfaceDescription& applicationInterface);
  void recv_registerApplicationInterface(std::string& _return);
  void getApplicationInterface( ::ApplicationInterfaceDescription& _return, const std::string& appInterfaceId);
  void send_getApplicationInterface(const std::string& appInterfaceId);
  void recv_getApplicationInterface( ::ApplicationInterfaceDescription& _return);
  bool updateApplicationInterface(const std::string& appInterfaceId, const  ::ApplicationInterfaceDescription& applicationInterface);
  void send_updateApplicationInterface(const std::string& appInterfaceId, const  ::ApplicationInterfaceDescription& applicationInterface);
  bool recv_updateApplicationInterface();
  bool deleteApplicationInterface(const std::string& appInterfaceId);
  void send_deleteApplicationInterface(const std::string& appInterfaceId);
  bool recv_deleteApplicationInterface();
  void getApplicationInputs(std::vector< ::InputDataObjectType> & _return, const std::string& appInterfaceId);
  void send_getApplicationInputs(const std::string& appInterfaceId);
  void recv_getApplicationInputs(std::vector< ::InputDataObjectType> & _return);
  void getApplicationOutputs(std::vector< ::OutputDataObjectType> & _return, const std::string& appInterfaceId);
  void send_getApplicationOutputs(const std::string& appInterfaceId);
  void recv_getApplicationOutputs(std::vector< ::OutputDataObjectType> & _return);
  void registerComputeResource(std::string& _return, const  ::ComputeResourceDescription& computeResourceDescription);
  void send_registerComputeResource(const  ::ComputeResourceDescription& computeResourceDescription);
  void recv_registerComputeResource(std::string& _return);
  void getComputeResource( ::ComputeResourceDescription& _return, const std::string& computeResourceId);
  void send_getComputeResource(const std::string& computeResourceId);
  void recv_getComputeResource( ::ComputeResourceDescription& _return);
  bool updateComputeResource(const std::string& computeResourceId, const  ::ComputeResourceDescription& computeResourceDescription);
  void send_updateComputeResource(const std::string& computeResourceId, const  ::ComputeResourceDescription& computeResourceDescription);
  bool recv_updateComputeResource();
  bool deleteComputeResource(const std::string& computeResourceId);
  void send_deleteComputeResource(const std::string& computeResourceId);
  bool recv_deleteComputeResource();
  bool addLocalSubmissionDetails(const std::string& computeResourceId, const int32_t priorityOrder, const  ::LOCALSubmission& localSubmission);
  void send_addLocalSubmissionDetails(const std::string& computeResourceId, const int32_t priorityOrder, const  ::LOCALSubmission& localSubmission);
  bool recv_addLocalSubmissionDetails();
  bool updateLocalSubmissionDetails(const std::string& jobSubmissionInterfaceId, const  ::LOCALSubmission& localSubmission);
  void send_updateLocalSubmissionDetails(const std::string& jobSubmissionInterfaceId, const  ::LOCALSubmission& localSubmission);
  bool recv_updateLocalSubmissionDetails();
  bool addSSHJobSubmissionDetails(const std::string& computeResourceId, const int32_t priorityOrder, const  ::SSHJobSubmission& sshJobSubmission);
  void send_addSSHJobSubmissionDetails(const std::string& computeResourceId, const int32_t priorityOrder, const  ::SSHJobSubmission& sshJobSubmission);
  bool recv_addSSHJobSubmissionDetails();
  bool updateSSHJobSubmissionDetails(const std::string& jobSubmissionInterfaceId, const  ::SSHJobSubmission& sshJobSubmission);
  void send_updateSSHJobSubmissionDetails(const std::string& jobSubmissionInterfaceId, const  ::SSHJobSubmission& sshJobSubmission);
  bool recv_updateSSHJobSubmissionDetails();
  bool addLocalDataMovementDetails(const std::string& computeResourceId, const int32_t priorityOrder, const  ::LOCALDataMovement& localDataMovement);
  void send_addLocalDataMovementDetails(const std::string& computeResourceId, const int32_t priorityOrder, const  ::LOCALDataMovement& localDataMovement);
  bool recv_addLocalDataMovementDetails();
  bool updateLocalDataMovementDetails(const std::string& jobSubmissionInterfaceId, const  ::LOCALDataMovement& localDataMovement);
  void send_updateLocalDataMovementDetails(const std::string& jobSubmissionInterfaceId, const  ::LOCALDataMovement& localDataMovement);
  bool recv_updateLocalDataMovementDetails();
  bool addSCPDataMovementDetails(const std::string& computeResourceId, const int32_t priorityOrder, const  ::SCPDataMovement& scpDataMovement);
  void send_addSCPDataMovementDetails(const std::string& computeResourceId, const int32_t priorityOrder, const  ::SCPDataMovement& scpDataMovement);
  bool recv_addSCPDataMovementDetails();
  bool updateSCPDataMovementDetails(const std::string& jobSubmissionInterfaceId, const  ::SCPDataMovement& scpDataMovement);
  void send_updateSCPDataMovementDetails(const std::string& jobSubmissionInterfaceId, const  ::SCPDataMovement& scpDataMovement);
  bool recv_updateSCPDataMovementDetails();
  bool addGridFTPDataMovementDetails(const std::string& computeResourceId, const int32_t priorityOrder, const  ::GridFTPDataMovement& gridFTPDataMovement);
  void send_addGridFTPDataMovementDetails(const std::string& computeResourceId, const int32_t priorityOrder, const  ::GridFTPDataMovement& gridFTPDataMovement);
  bool recv_addGridFTPDataMovementDetails();
  bool updateGridFTPDataMovementDetails(const std::string& jobSubmissionInterfaceId, const  ::GridFTPDataMovement& gridFTPDataMovement);
  void send_updateGridFTPDataMovementDetails(const std::string& jobSubmissionInterfaceId, const  ::GridFTPDataMovement& gridFTPDataMovement);
  bool recv_updateGridFTPDataMovementDetails();
  bool changeJobSubmissionPriority(const std::string& jobSubmissionInterfaceId, const int32_t newPriorityOrder);
  void send_changeJobSubmissionPriority(const std::string& jobSubmissionInterfaceId, const int32_t newPriorityOrder);
  bool recv_changeJobSubmissionPriority();
  bool changeDataMovementPriority(const std::string& dataMovementInterfaceId, const int32_t newPriorityOrder);
  void send_changeDataMovementPriority(const std::string& dataMovementInterfaceId, const int32_t newPriorityOrder);
  bool recv_changeDataMovementPriority();
  bool changeJobSubmissionPriorities(const std::map<std::string, int32_t> & jobSubmissionPriorityMap);
  void send_changeJobSubmissionPriorities(const std::map<std::string, int32_t> & jobSubmissionPriorityMap);
  bool recv_changeJobSubmissionPriorities();
  bool changeDataMovementPriorities(const std::map<std::string, int32_t> & dataMovementPriorityMap);
  void send_changeDataMovementPriorities(const std::map<std::string, int32_t> & dataMovementPriorityMap);
  bool recv_changeDataMovementPriorities();
  bool deleteJobSubmissionInterface(const std::string& jobSubmissionInterfaceId);
  void send_deleteJobSubmissionInterface(const std::string& jobSubmissionInterfaceId);
  bool recv_deleteJobSubmissionInterface();
  bool deleteDataMovementInterface(const std::string& dataMovementInterfaceId);
  void send_deleteDataMovementInterface(const std::string& dataMovementInterfaceId);
  bool recv_deleteDataMovementInterface();
  void registerGatewayResourceProfile(std::string& _return, const  ::GatewayResourceProfile& gatewayResourceProfile);
  void send_registerGatewayResourceProfile(const  ::GatewayResourceProfile& gatewayResourceProfile);
  void recv_registerGatewayResourceProfile(std::string& _return);
  void getGatewayResourceProfile( ::GatewayResourceProfile& _return, const std::string& gatewayID);
  void send_getGatewayResourceProfile(const std::string& gatewayID);
  void recv_getGatewayResourceProfile( ::GatewayResourceProfile& _return);
  bool updateGatewayResourceProfile(const std::string& gatewayID, const  ::GatewayResourceProfile& gatewayResourceProfile);
  void send_updateGatewayResourceProfile(const std::string& gatewayID, const  ::GatewayResourceProfile& gatewayResourceProfile);
  bool recv_updateGatewayResourceProfile();
  bool deleteGatewayResourceProfile(const std::string& gatewayID);
  void send_deleteGatewayResourceProfile(const std::string& gatewayID);
  bool recv_deleteGatewayResourceProfile();
  bool addGatewayComputeResourcePreference(const std::string& gatewayID, const std::string& computeResourceId, const  ::ComputeResourcePreference& computeResourcePreference);
  void send_addGatewayComputeResourcePreference(const std::string& gatewayID, const std::string& computeResourceId, const  ::ComputeResourcePreference& computeResourcePreference);
  bool recv_addGatewayComputeResourcePreference();
  void getGatewayComputeResourcePreference( ::ComputeResourcePreference& _return, const std::string& gatewayID, const std::string& computeResourceId);
  void send_getGatewayComputeResourcePreference(const std::string& gatewayID, const std::string& computeResourceId);
  void recv_getGatewayComputeResourcePreference( ::ComputeResourcePreference& _return);
  void getAllGatewayComputeResourcePreferences(std::vector< ::ComputeResourcePreference> & _return, const std::string& gatewayID);
  void send_getAllGatewayComputeResourcePreferences(const std::string& gatewayID);
  void recv_getAllGatewayComputeResourcePreferences(std::vector< ::ComputeResourcePreference> & _return);
  bool updateGatewayComputeResourcePreference(const std::string& gatewayID, const std::string& computeResourceId, const  ::ComputeResourcePreference& computeResourcePreference);
  void send_updateGatewayComputeResourcePreference(const std::string& gatewayID, const std::string& computeResourceId, const  ::ComputeResourcePreference& computeResourcePreference);
  bool recv_updateGatewayComputeResourcePreference();
  bool deleteGatewayComputeResourcePreference(const std::string& gatewayID, const std::string& computeResourceId);
  void send_deleteGatewayComputeResourcePreference(const std::string& gatewayID, const std::string& computeResourceId);
  bool recv_deleteGatewayComputeResourcePreference();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AiravataProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<AiravataIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AiravataProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getAPIVersion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createProject(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateProject(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getProject(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllUserProjects(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_searchProjectsByProjectName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_searchProjectsByProjectDesc(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_searchExperimentsByName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_searchExperimentsByDesc(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_searchExperimentsByApplication(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllExperimentsInProject(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllUserExperiments(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createExperiment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getExperiment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateExperiment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateExperimentConfiguration(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateResourceScheduleing(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_validateExperiment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_launchExperiment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getExperimentStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getExperimentOutputs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getJobStatuses(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_cloneExperiment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_terminateExperiment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerApplicationModule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getApplicationModule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateApplicationModule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteApplicationModule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerApplicationDeployment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getApplicationDeployment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateApplicationDeployment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteApplicationDeployment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAppModuleDeployedResources(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerApplicationInterface(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getApplicationInterface(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateApplicationInterface(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteApplicationInterface(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getApplicationInputs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getApplicationOutputs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerComputeResource(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getComputeResource(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateComputeResource(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteComputeResource(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addLocalSubmissionDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateLocalSubmissionDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addSSHJobSubmissionDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateSSHJobSubmissionDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addLocalDataMovementDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateLocalDataMovementDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addSCPDataMovementDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateSCPDataMovementDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addGridFTPDataMovementDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateGridFTPDataMovementDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_changeJobSubmissionPriority(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_changeDataMovementPriority(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_changeJobSubmissionPriorities(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_changeDataMovementPriorities(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteJobSubmissionInterface(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteDataMovementInterface(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerGatewayResourceProfile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getGatewayResourceProfile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateGatewayResourceProfile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteGatewayResourceProfile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addGatewayComputeResourcePreference(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getGatewayComputeResourcePreference(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllGatewayComputeResourcePreferences(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateGatewayComputeResourcePreference(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteGatewayComputeResourcePreference(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AiravataProcessor(boost::shared_ptr<AiravataIf> iface) :
    iface_(iface) {
    processMap_["getAPIVersion"] = &AiravataProcessor::process_getAPIVersion;
    processMap_["createProject"] = &AiravataProcessor::process_createProject;
    processMap_["updateProject"] = &AiravataProcessor::process_updateProject;
    processMap_["getProject"] = &AiravataProcessor::process_getProject;
    processMap_["getAllUserProjects"] = &AiravataProcessor::process_getAllUserProjects;
    processMap_["searchProjectsByProjectName"] = &AiravataProcessor::process_searchProjectsByProjectName;
    processMap_["searchProjectsByProjectDesc"] = &AiravataProcessor::process_searchProjectsByProjectDesc;
    processMap_["searchExperimentsByName"] = &AiravataProcessor::process_searchExperimentsByName;
    processMap_["searchExperimentsByDesc"] = &AiravataProcessor::process_searchExperimentsByDesc;
    processMap_["searchExperimentsByApplication"] = &AiravataProcessor::process_searchExperimentsByApplication;
    processMap_["getAllExperimentsInProject"] = &AiravataProcessor::process_getAllExperimentsInProject;
    processMap_["getAllUserExperiments"] = &AiravataProcessor::process_getAllUserExperiments;
    processMap_["createExperiment"] = &AiravataProcessor::process_createExperiment;
    processMap_["getExperiment"] = &AiravataProcessor::process_getExperiment;
    processMap_["updateExperiment"] = &AiravataProcessor::process_updateExperiment;
    processMap_["updateExperimentConfiguration"] = &AiravataProcessor::process_updateExperimentConfiguration;
    processMap_["updateResourceScheduleing"] = &AiravataProcessor::process_updateResourceScheduleing;
    processMap_["validateExperiment"] = &AiravataProcessor::process_validateExperiment;
    processMap_["launchExperiment"] = &AiravataProcessor::process_launchExperiment;
    processMap_["getExperimentStatus"] = &AiravataProcessor::process_getExperimentStatus;
    processMap_["getExperimentOutputs"] = &AiravataProcessor::process_getExperimentOutputs;
    processMap_["getJobStatuses"] = &AiravataProcessor::process_getJobStatuses;
    processMap_["cloneExperiment"] = &AiravataProcessor::process_cloneExperiment;
    processMap_["terminateExperiment"] = &AiravataProcessor::process_terminateExperiment;
    processMap_["registerApplicationModule"] = &AiravataProcessor::process_registerApplicationModule;
    processMap_["getApplicationModule"] = &AiravataProcessor::process_getApplicationModule;
    processMap_["updateApplicationModule"] = &AiravataProcessor::process_updateApplicationModule;
    processMap_["deleteApplicationModule"] = &AiravataProcessor::process_deleteApplicationModule;
    processMap_["registerApplicationDeployment"] = &AiravataProcessor::process_registerApplicationDeployment;
    processMap_["getApplicationDeployment"] = &AiravataProcessor::process_getApplicationDeployment;
    processMap_["updateApplicationDeployment"] = &AiravataProcessor::process_updateApplicationDeployment;
    processMap_["deleteApplicationDeployment"] = &AiravataProcessor::process_deleteApplicationDeployment;
    processMap_["getAppModuleDeployedResources"] = &AiravataProcessor::process_getAppModuleDeployedResources;
    processMap_["registerApplicationInterface"] = &AiravataProcessor::process_registerApplicationInterface;
    processMap_["getApplicationInterface"] = &AiravataProcessor::process_getApplicationInterface;
    processMap_["updateApplicationInterface"] = &AiravataProcessor::process_updateApplicationInterface;
    processMap_["deleteApplicationInterface"] = &AiravataProcessor::process_deleteApplicationInterface;
    processMap_["getApplicationInputs"] = &AiravataProcessor::process_getApplicationInputs;
    processMap_["getApplicationOutputs"] = &AiravataProcessor::process_getApplicationOutputs;
    processMap_["registerComputeResource"] = &AiravataProcessor::process_registerComputeResource;
    processMap_["getComputeResource"] = &AiravataProcessor::process_getComputeResource;
    processMap_["updateComputeResource"] = &AiravataProcessor::process_updateComputeResource;
    processMap_["deleteComputeResource"] = &AiravataProcessor::process_deleteComputeResource;
    processMap_["addLocalSubmissionDetails"] = &AiravataProcessor::process_addLocalSubmissionDetails;
    processMap_["updateLocalSubmissionDetails"] = &AiravataProcessor::process_updateLocalSubmissionDetails;
    processMap_["addSSHJobSubmissionDetails"] = &AiravataProcessor::process_addSSHJobSubmissionDetails;
    processMap_["updateSSHJobSubmissionDetails"] = &AiravataProcessor::process_updateSSHJobSubmissionDetails;
    processMap_["addLocalDataMovementDetails"] = &AiravataProcessor::process_addLocalDataMovementDetails;
    processMap_["updateLocalDataMovementDetails"] = &AiravataProcessor::process_updateLocalDataMovementDetails;
    processMap_["addSCPDataMovementDetails"] = &AiravataProcessor::process_addSCPDataMovementDetails;
    processMap_["updateSCPDataMovementDetails"] = &AiravataProcessor::process_updateSCPDataMovementDetails;
    processMap_["addGridFTPDataMovementDetails"] = &AiravataProcessor::process_addGridFTPDataMovementDetails;
    processMap_["updateGridFTPDataMovementDetails"] = &AiravataProcessor::process_updateGridFTPDataMovementDetails;
    processMap_["changeJobSubmissionPriority"] = &AiravataProcessor::process_changeJobSubmissionPriority;
    processMap_["changeDataMovementPriority"] = &AiravataProcessor::process_changeDataMovementPriority;
    processMap_["changeJobSubmissionPriorities"] = &AiravataProcessor::process_changeJobSubmissionPriorities;
    processMap_["changeDataMovementPriorities"] = &AiravataProcessor::process_changeDataMovementPriorities;
    processMap_["deleteJobSubmissionInterface"] = &AiravataProcessor::process_deleteJobSubmissionInterface;
    processMap_["deleteDataMovementInterface"] = &AiravataProcessor::process_deleteDataMovementInterface;
    processMap_["registerGatewayResourceProfile"] = &AiravataProcessor::process_registerGatewayResourceProfile;
    processMap_["getGatewayResourceProfile"] = &AiravataProcessor::process_getGatewayResourceProfile;
    processMap_["updateGatewayResourceProfile"] = &AiravataProcessor::process_updateGatewayResourceProfile;
    processMap_["deleteGatewayResourceProfile"] = &AiravataProcessor::process_deleteGatewayResourceProfile;
    processMap_["addGatewayComputeResourcePreference"] = &AiravataProcessor::process_addGatewayComputeResourcePreference;
    processMap_["getGatewayComputeResourcePreference"] = &AiravataProcessor::process_getGatewayComputeResourcePreference;
    processMap_["getAllGatewayComputeResourcePreferences"] = &AiravataProcessor::process_getAllGatewayComputeResourcePreferences;
    processMap_["updateGatewayComputeResourcePreference"] = &AiravataProcessor::process_updateGatewayComputeResourcePreference;
    processMap_["deleteGatewayComputeResourcePreference"] = &AiravataProcessor::process_deleteGatewayComputeResourcePreference;
  }

  virtual ~AiravataProcessor() {}
};

class AiravataProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AiravataProcessorFactory(const ::boost::shared_ptr< AiravataIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< AiravataIfFactory > handlerFactory_;
};

class AiravataMultiface : virtual public AiravataIf {
 public:
  AiravataMultiface(std::vector<boost::shared_ptr<AiravataIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AiravataMultiface() {}
 protected:
  std::vector<boost::shared_ptr<AiravataIf> > ifaces_;
  AiravataMultiface() {}
  void add(boost::shared_ptr<AiravataIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getAPIVersion(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAPIVersion(_return);
    }
    ifaces_[i]->getAPIVersion(_return);
    return;
  }

  void createProject(std::string& _return, const  ::Project& project) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createProject(_return, project);
    }
    ifaces_[i]->createProject(_return, project);
    return;
  }

  void updateProject(const std::string& projectId, const  ::Project& updatedProject) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateProject(projectId, updatedProject);
    }
    ifaces_[i]->updateProject(projectId, updatedProject);
  }

  void getProject( ::Project& _return, const std::string& projectId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getProject(_return, projectId);
    }
    ifaces_[i]->getProject(_return, projectId);
    return;
  }

  void getAllUserProjects(std::vector< ::Project> & _return, const std::string& userName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllUserProjects(_return, userName);
    }
    ifaces_[i]->getAllUserProjects(_return, userName);
    return;
  }

  void searchProjectsByProjectName(std::vector< ::Project> & _return, const std::string& userName, const std::string& projectName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->searchProjectsByProjectName(_return, userName, projectName);
    }
    ifaces_[i]->searchProjectsByProjectName(_return, userName, projectName);
    return;
  }

  void searchProjectsByProjectDesc(std::vector< ::Project> & _return, const std::string& userName, const std::string& description) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->searchProjectsByProjectDesc(_return, userName, description);
    }
    ifaces_[i]->searchProjectsByProjectDesc(_return, userName, description);
    return;
  }

  void searchExperimentsByName(std::vector< ::ExperimentSummary> & _return, const std::string& userName, const std::string& expName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->searchExperimentsByName(_return, userName, expName);
    }
    ifaces_[i]->searchExperimentsByName(_return, userName, expName);
    return;
  }

  void searchExperimentsByDesc(std::vector< ::ExperimentSummary> & _return, const std::string& userName, const std::string& description) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->searchExperimentsByDesc(_return, userName, description);
    }
    ifaces_[i]->searchExperimentsByDesc(_return, userName, description);
    return;
  }

  void searchExperimentsByApplication(std::vector< ::ExperimentSummary> & _return, const std::string& userName, const std::string& applicationId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->searchExperimentsByApplication(_return, userName, applicationId);
    }
    ifaces_[i]->searchExperimentsByApplication(_return, userName, applicationId);
    return;
  }

  void getAllExperimentsInProject(std::vector< ::Experiment> & _return, const std::string& projectId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllExperimentsInProject(_return, projectId);
    }
    ifaces_[i]->getAllExperimentsInProject(_return, projectId);
    return;
  }

  void getAllUserExperiments(std::vector< ::Experiment> & _return, const std::string& userName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllUserExperiments(_return, userName);
    }
    ifaces_[i]->getAllUserExperiments(_return, userName);
    return;
  }

  void createExperiment(std::string& _return, const  ::Experiment& experiment) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createExperiment(_return, experiment);
    }
    ifaces_[i]->createExperiment(_return, experiment);
    return;
  }

  void getExperiment( ::Experiment& _return, const std::string& airavataExperimentId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getExperiment(_return, airavataExperimentId);
    }
    ifaces_[i]->getExperiment(_return, airavataExperimentId);
    return;
  }

  void updateExperiment(const std::string& airavataExperimentId, const  ::Experiment& experiment) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateExperiment(airavataExperimentId, experiment);
    }
    ifaces_[i]->updateExperiment(airavataExperimentId, experiment);
  }

  void updateExperimentConfiguration(const std::string& airavataExperimentId, const  ::UserConfigurationData& userConfiguration) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateExperimentConfiguration(airavataExperimentId, userConfiguration);
    }
    ifaces_[i]->updateExperimentConfiguration(airavataExperimentId, userConfiguration);
  }

  void updateResourceScheduleing(const std::string& airavataExperimentId, const  ::ComputationalResourceScheduling& resourceScheduling) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateResourceScheduleing(airavataExperimentId, resourceScheduling);
    }
    ifaces_[i]->updateResourceScheduleing(airavataExperimentId, resourceScheduling);
  }

  bool validateExperiment(const std::string& airavataExperimentId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->validateExperiment(airavataExperimentId);
    }
    return ifaces_[i]->validateExperiment(airavataExperimentId);
  }

  void launchExperiment(const std::string& airavataExperimentId, const std::string& airavataCredStoreToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->launchExperiment(airavataExperimentId, airavataCredStoreToken);
    }
    ifaces_[i]->launchExperiment(airavataExperimentId, airavataCredStoreToken);
  }

  void getExperimentStatus( ::ExperimentStatus& _return, const std::string& airavataExperimentId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getExperimentStatus(_return, airavataExperimentId);
    }
    ifaces_[i]->getExperimentStatus(_return, airavataExperimentId);
    return;
  }

  void getExperimentOutputs(std::vector< ::DataObjectType> & _return, const std::string& airavataExperimentId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getExperimentOutputs(_return, airavataExperimentId);
    }
    ifaces_[i]->getExperimentOutputs(_return, airavataExperimentId);
    return;
  }

  void getJobStatuses(std::map<std::string,  ::JobStatus> & _return, const std::string& airavataExperimentId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getJobStatuses(_return, airavataExperimentId);
    }
    ifaces_[i]->getJobStatuses(_return, airavataExperimentId);
    return;
  }

  void cloneExperiment(std::string& _return, const std::string& existingExperimentID, const std::string& newExperimentName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cloneExperiment(_return, existingExperimentID, newExperimentName);
    }
    ifaces_[i]->cloneExperiment(_return, existingExperimentID, newExperimentName);
    return;
  }

  void terminateExperiment(const std::string& airavataExperimentId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->terminateExperiment(airavataExperimentId);
    }
    ifaces_[i]->terminateExperiment(airavataExperimentId);
  }

  void registerApplicationModule(std::string& _return, const  ::ApplicationModule& applicationModule) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerApplicationModule(_return, applicationModule);
    }
    ifaces_[i]->registerApplicationModule(_return, applicationModule);
    return;
  }

  void getApplicationModule( ::ApplicationModule& _return, const std::string& appModuleId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getApplicationModule(_return, appModuleId);
    }
    ifaces_[i]->getApplicationModule(_return, appModuleId);
    return;
  }

  bool updateApplicationModule(const std::string& appModuleId, const  ::ApplicationModule& applicationModule) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateApplicationModule(appModuleId, applicationModule);
    }
    return ifaces_[i]->updateApplicationModule(appModuleId, applicationModule);
  }

  bool deleteApplicationModule(const std::string& appModuleId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteApplicationModule(appModuleId);
    }
    return ifaces_[i]->deleteApplicationModule(appModuleId);
  }

  void registerApplicationDeployment(std::string& _return, const  ::ApplicationDeploymentDescription& applicationDeployment) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerApplicationDeployment(_return, applicationDeployment);
    }
    ifaces_[i]->registerApplicationDeployment(_return, applicationDeployment);
    return;
  }

  void getApplicationDeployment( ::ApplicationDeploymentDescription& _return, const std::string& appDeploymentId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getApplicationDeployment(_return, appDeploymentId);
    }
    ifaces_[i]->getApplicationDeployment(_return, appDeploymentId);
    return;
  }

  bool updateApplicationDeployment(const std::string& appDeploymentId, const  ::ApplicationDeploymentDescription& applicationDeployment) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateApplicationDeployment(appDeploymentId, applicationDeployment);
    }
    return ifaces_[i]->updateApplicationDeployment(appDeploymentId, applicationDeployment);
  }

  bool deleteApplicationDeployment(const std::string& appDeploymentId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteApplicationDeployment(appDeploymentId);
    }
    return ifaces_[i]->deleteApplicationDeployment(appDeploymentId);
  }

  void getAppModuleDeployedResources(std::vector<std::string> & _return, const std::string& appModuleId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAppModuleDeployedResources(_return, appModuleId);
    }
    ifaces_[i]->getAppModuleDeployedResources(_return, appModuleId);
    return;
  }

  void registerApplicationInterface(std::string& _return, const  ::ApplicationInterfaceDescription& applicationInterface) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerApplicationInterface(_return, applicationInterface);
    }
    ifaces_[i]->registerApplicationInterface(_return, applicationInterface);
    return;
  }

  void getApplicationInterface( ::ApplicationInterfaceDescription& _return, const std::string& appInterfaceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getApplicationInterface(_return, appInterfaceId);
    }
    ifaces_[i]->getApplicationInterface(_return, appInterfaceId);
    return;
  }

  bool updateApplicationInterface(const std::string& appInterfaceId, const  ::ApplicationInterfaceDescription& applicationInterface) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateApplicationInterface(appInterfaceId, applicationInterface);
    }
    return ifaces_[i]->updateApplicationInterface(appInterfaceId, applicationInterface);
  }

  bool deleteApplicationInterface(const std::string& appInterfaceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteApplicationInterface(appInterfaceId);
    }
    return ifaces_[i]->deleteApplicationInterface(appInterfaceId);
  }

  void getApplicationInputs(std::vector< ::InputDataObjectType> & _return, const std::string& appInterfaceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getApplicationInputs(_return, appInterfaceId);
    }
    ifaces_[i]->getApplicationInputs(_return, appInterfaceId);
    return;
  }

  void getApplicationOutputs(std::vector< ::OutputDataObjectType> & _return, const std::string& appInterfaceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getApplicationOutputs(_return, appInterfaceId);
    }
    ifaces_[i]->getApplicationOutputs(_return, appInterfaceId);
    return;
  }

  void registerComputeResource(std::string& _return, const  ::ComputeResourceDescription& computeResourceDescription) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerComputeResource(_return, computeResourceDescription);
    }
    ifaces_[i]->registerComputeResource(_return, computeResourceDescription);
    return;
  }

  void getComputeResource( ::ComputeResourceDescription& _return, const std::string& computeResourceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getComputeResource(_return, computeResourceId);
    }
    ifaces_[i]->getComputeResource(_return, computeResourceId);
    return;
  }

  bool updateComputeResource(const std::string& computeResourceId, const  ::ComputeResourceDescription& computeResourceDescription) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateComputeResource(computeResourceId, computeResourceDescription);
    }
    return ifaces_[i]->updateComputeResource(computeResourceId, computeResourceDescription);
  }

  bool deleteComputeResource(const std::string& computeResourceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteComputeResource(computeResourceId);
    }
    return ifaces_[i]->deleteComputeResource(computeResourceId);
  }

  bool addLocalSubmissionDetails(const std::string& computeResourceId, const int32_t priorityOrder, const  ::LOCALSubmission& localSubmission) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addLocalSubmissionDetails(computeResourceId, priorityOrder, localSubmission);
    }
    return ifaces_[i]->addLocalSubmissionDetails(computeResourceId, priorityOrder, localSubmission);
  }

  bool updateLocalSubmissionDetails(const std::string& jobSubmissionInterfaceId, const  ::LOCALSubmission& localSubmission) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateLocalSubmissionDetails(jobSubmissionInterfaceId, localSubmission);
    }
    return ifaces_[i]->updateLocalSubmissionDetails(jobSubmissionInterfaceId, localSubmission);
  }

  bool addSSHJobSubmissionDetails(const std::string& computeResourceId, const int32_t priorityOrder, const  ::SSHJobSubmission& sshJobSubmission) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addSSHJobSubmissionDetails(computeResourceId, priorityOrder, sshJobSubmission);
    }
    return ifaces_[i]->addSSHJobSubmissionDetails(computeResourceId, priorityOrder, sshJobSubmission);
  }

  bool updateSSHJobSubmissionDetails(const std::string& jobSubmissionInterfaceId, const  ::SSHJobSubmission& sshJobSubmission) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateSSHJobSubmissionDetails(jobSubmissionInterfaceId, sshJobSubmission);
    }
    return ifaces_[i]->updateSSHJobSubmissionDetails(jobSubmissionInterfaceId, sshJobSubmission);
  }

  bool addLocalDataMovementDetails(const std::string& computeResourceId, const int32_t priorityOrder, const  ::LOCALDataMovement& localDataMovement) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addLocalDataMovementDetails(computeResourceId, priorityOrder, localDataMovement);
    }
    return ifaces_[i]->addLocalDataMovementDetails(computeResourceId, priorityOrder, localDataMovement);
  }

  bool updateLocalDataMovementDetails(const std::string& jobSubmissionInterfaceId, const  ::LOCALDataMovement& localDataMovement) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateLocalDataMovementDetails(jobSubmissionInterfaceId, localDataMovement);
    }
    return ifaces_[i]->updateLocalDataMovementDetails(jobSubmissionInterfaceId, localDataMovement);
  }

  bool addSCPDataMovementDetails(const std::string& computeResourceId, const int32_t priorityOrder, const  ::SCPDataMovement& scpDataMovement) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addSCPDataMovementDetails(computeResourceId, priorityOrder, scpDataMovement);
    }
    return ifaces_[i]->addSCPDataMovementDetails(computeResourceId, priorityOrder, scpDataMovement);
  }

  bool updateSCPDataMovementDetails(const std::string& jobSubmissionInterfaceId, const  ::SCPDataMovement& scpDataMovement) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateSCPDataMovementDetails(jobSubmissionInterfaceId, scpDataMovement);
    }
    return ifaces_[i]->updateSCPDataMovementDetails(jobSubmissionInterfaceId, scpDataMovement);
  }

  bool addGridFTPDataMovementDetails(const std::string& computeResourceId, const int32_t priorityOrder, const  ::GridFTPDataMovement& gridFTPDataMovement) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addGridFTPDataMovementDetails(computeResourceId, priorityOrder, gridFTPDataMovement);
    }
    return ifaces_[i]->addGridFTPDataMovementDetails(computeResourceId, priorityOrder, gridFTPDataMovement);
  }

  bool updateGridFTPDataMovementDetails(const std::string& jobSubmissionInterfaceId, const  ::GridFTPDataMovement& gridFTPDataMovement) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateGridFTPDataMovementDetails(jobSubmissionInterfaceId, gridFTPDataMovement);
    }
    return ifaces_[i]->updateGridFTPDataMovementDetails(jobSubmissionInterfaceId, gridFTPDataMovement);
  }

  bool changeJobSubmissionPriority(const std::string& jobSubmissionInterfaceId, const int32_t newPriorityOrder) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->changeJobSubmissionPriority(jobSubmissionInterfaceId, newPriorityOrder);
    }
    return ifaces_[i]->changeJobSubmissionPriority(jobSubmissionInterfaceId, newPriorityOrder);
  }

  bool changeDataMovementPriority(const std::string& dataMovementInterfaceId, const int32_t newPriorityOrder) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->changeDataMovementPriority(dataMovementInterfaceId, newPriorityOrder);
    }
    return ifaces_[i]->changeDataMovementPriority(dataMovementInterfaceId, newPriorityOrder);
  }

  bool changeJobSubmissionPriorities(const std::map<std::string, int32_t> & jobSubmissionPriorityMap) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->changeJobSubmissionPriorities(jobSubmissionPriorityMap);
    }
    return ifaces_[i]->changeJobSubmissionPriorities(jobSubmissionPriorityMap);
  }

  bool changeDataMovementPriorities(const std::map<std::string, int32_t> & dataMovementPriorityMap) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->changeDataMovementPriorities(dataMovementPriorityMap);
    }
    return ifaces_[i]->changeDataMovementPriorities(dataMovementPriorityMap);
  }

  bool deleteJobSubmissionInterface(const std::string& jobSubmissionInterfaceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteJobSubmissionInterface(jobSubmissionInterfaceId);
    }
    return ifaces_[i]->deleteJobSubmissionInterface(jobSubmissionInterfaceId);
  }

  bool deleteDataMovementInterface(const std::string& dataMovementInterfaceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteDataMovementInterface(dataMovementInterfaceId);
    }
    return ifaces_[i]->deleteDataMovementInterface(dataMovementInterfaceId);
  }

  void registerGatewayResourceProfile(std::string& _return, const  ::GatewayResourceProfile& gatewayResourceProfile) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerGatewayResourceProfile(_return, gatewayResourceProfile);
    }
    ifaces_[i]->registerGatewayResourceProfile(_return, gatewayResourceProfile);
    return;
  }

  void getGatewayResourceProfile( ::GatewayResourceProfile& _return, const std::string& gatewayID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getGatewayResourceProfile(_return, gatewayID);
    }
    ifaces_[i]->getGatewayResourceProfile(_return, gatewayID);
    return;
  }

  bool updateGatewayResourceProfile(const std::string& gatewayID, const  ::GatewayResourceProfile& gatewayResourceProfile) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateGatewayResourceProfile(gatewayID, gatewayResourceProfile);
    }
    return ifaces_[i]->updateGatewayResourceProfile(gatewayID, gatewayResourceProfile);
  }

  bool deleteGatewayResourceProfile(const std::string& gatewayID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteGatewayResourceProfile(gatewayID);
    }
    return ifaces_[i]->deleteGatewayResourceProfile(gatewayID);
  }

  bool addGatewayComputeResourcePreference(const std::string& gatewayID, const std::string& computeResourceId, const  ::ComputeResourcePreference& computeResourcePreference) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addGatewayComputeResourcePreference(gatewayID, computeResourceId, computeResourcePreference);
    }
    return ifaces_[i]->addGatewayComputeResourcePreference(gatewayID, computeResourceId, computeResourcePreference);
  }

  void getGatewayComputeResourcePreference( ::ComputeResourcePreference& _return, const std::string& gatewayID, const std::string& computeResourceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getGatewayComputeResourcePreference(_return, gatewayID, computeResourceId);
    }
    ifaces_[i]->getGatewayComputeResourcePreference(_return, gatewayID, computeResourceId);
    return;
  }

  void getAllGatewayComputeResourcePreferences(std::vector< ::ComputeResourcePreference> & _return, const std::string& gatewayID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllGatewayComputeResourcePreferences(_return, gatewayID);
    }
    ifaces_[i]->getAllGatewayComputeResourcePreferences(_return, gatewayID);
    return;
  }

  bool updateGatewayComputeResourcePreference(const std::string& gatewayID, const std::string& computeResourceId, const  ::ComputeResourcePreference& computeResourcePreference) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateGatewayComputeResourcePreference(gatewayID, computeResourceId, computeResourcePreference);
    }
    return ifaces_[i]->updateGatewayComputeResourcePreference(gatewayID, computeResourceId, computeResourcePreference);
  }

  bool deleteGatewayComputeResourcePreference(const std::string& gatewayID, const std::string& computeResourceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteGatewayComputeResourcePreference(gatewayID, computeResourceId);
    }
    return ifaces_[i]->deleteGatewayComputeResourcePreference(gatewayID, computeResourceId);
  }

};

}} // namespace

#endif
