/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "process_model_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace apache { namespace airavata { namespace model { namespace process {


ProcessWorkflow::~ProcessWorkflow() throw() {
}


void ProcessWorkflow::__set_processId(const std::string& val) {
  this->processId = val;
}

void ProcessWorkflow::__set_workflowId(const std::string& val) {
  this->workflowId = val;
}

void ProcessWorkflow::__set_creationTime(const int64_t val) {
  this->creationTime = val;
__isset.creationTime = true;
}

void ProcessWorkflow::__set_type(const std::string& val) {
  this->type = val;
__isset.type = true;
}

uint32_t ProcessWorkflow::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_processId = false;
  bool isset_workflowId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->processId);
          isset_processId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->workflowId);
          isset_workflowId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->creationTime);
          this->__isset.creationTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_processId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_workflowId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ProcessWorkflow::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ProcessWorkflow");

  xfer += oprot->writeFieldBegin("processId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->processId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("workflowId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->workflowId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.creationTime) {
    xfer += oprot->writeFieldBegin("creationTime", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->creationTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.type) {
    xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->type);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProcessWorkflow &a, ProcessWorkflow &b) {
  using ::std::swap;
  swap(a.processId, b.processId);
  swap(a.workflowId, b.workflowId);
  swap(a.creationTime, b.creationTime);
  swap(a.type, b.type);
  swap(a.__isset, b.__isset);
}

ProcessWorkflow::ProcessWorkflow(const ProcessWorkflow& other0) {
  processId = other0.processId;
  workflowId = other0.workflowId;
  creationTime = other0.creationTime;
  type = other0.type;
  __isset = other0.__isset;
}
ProcessWorkflow& ProcessWorkflow::operator=(const ProcessWorkflow& other1) {
  processId = other1.processId;
  workflowId = other1.workflowId;
  creationTime = other1.creationTime;
  type = other1.type;
  __isset = other1.__isset;
  return *this;
}
void ProcessWorkflow::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ProcessWorkflow(";
  out << "processId=" << to_string(processId);
  out << ", " << "workflowId=" << to_string(workflowId);
  out << ", " << "creationTime="; (__isset.creationTime ? (out << to_string(creationTime)) : (out << "<null>"));
  out << ", " << "type="; (__isset.type ? (out << to_string(type)) : (out << "<null>"));
  out << ")";
}


ProcessModel::~ProcessModel() throw() {
}


void ProcessModel::__set_processId(const std::string& val) {
  this->processId = val;
}

void ProcessModel::__set_experimentId(const std::string& val) {
  this->experimentId = val;
}

void ProcessModel::__set_creationTime(const int64_t val) {
  this->creationTime = val;
__isset.creationTime = true;
}

void ProcessModel::__set_lastUpdateTime(const int64_t val) {
  this->lastUpdateTime = val;
__isset.lastUpdateTime = true;
}

void ProcessModel::__set_processStatuses(const std::vector< ::apache::airavata::model::status::ProcessStatus> & val) {
  this->processStatuses = val;
__isset.processStatuses = true;
}

void ProcessModel::__set_processDetail(const std::string& val) {
  this->processDetail = val;
__isset.processDetail = true;
}

void ProcessModel::__set_applicationInterfaceId(const std::string& val) {
  this->applicationInterfaceId = val;
__isset.applicationInterfaceId = true;
}

void ProcessModel::__set_applicationDeploymentId(const std::string& val) {
  this->applicationDeploymentId = val;
__isset.applicationDeploymentId = true;
}

void ProcessModel::__set_computeResourceId(const std::string& val) {
  this->computeResourceId = val;
__isset.computeResourceId = true;
}

void ProcessModel::__set_processInputs(const std::vector< ::apache::airavata::model::application::io::InputDataObjectType> & val) {
  this->processInputs = val;
__isset.processInputs = true;
}

void ProcessModel::__set_processOutputs(const std::vector< ::apache::airavata::model::application::io::OutputDataObjectType> & val) {
  this->processOutputs = val;
__isset.processOutputs = true;
}

void ProcessModel::__set_processResourceSchedule(const  ::apache::airavata::model::scheduling::ComputationalResourceSchedulingModel& val) {
  this->processResourceSchedule = val;
__isset.processResourceSchedule = true;
}

void ProcessModel::__set_tasks(const std::vector< ::apache::airavata::model::task::TaskModel> & val) {
  this->tasks = val;
__isset.tasks = true;
}

void ProcessModel::__set_taskDag(const std::string& val) {
  this->taskDag = val;
__isset.taskDag = true;
}

void ProcessModel::__set_processErrors(const std::vector< ::apache::airavata::model::commons::ErrorModel> & val) {
  this->processErrors = val;
__isset.processErrors = true;
}

void ProcessModel::__set_gatewayExecutionId(const std::string& val) {
  this->gatewayExecutionId = val;
__isset.gatewayExecutionId = true;
}

void ProcessModel::__set_enableEmailNotification(const bool val) {
  this->enableEmailNotification = val;
__isset.enableEmailNotification = true;
}

void ProcessModel::__set_emailAddresses(const std::vector<std::string> & val) {
  this->emailAddresses = val;
__isset.emailAddresses = true;
}

void ProcessModel::__set_storageResourceId(const std::string& val) {
  this->storageResourceId = val;
__isset.storageResourceId = true;
}

void ProcessModel::__set_userDn(const std::string& val) {
  this->userDn = val;
__isset.userDn = true;
}

void ProcessModel::__set_generateCert(const bool val) {
  this->generateCert = val;
__isset.generateCert = true;
}

void ProcessModel::__set_experimentDataDir(const std::string& val) {
  this->experimentDataDir = val;
__isset.experimentDataDir = true;
}

void ProcessModel::__set_userName(const std::string& val) {
  this->userName = val;
__isset.userName = true;
}

void ProcessModel::__set_useUserCRPref(const bool val) {
  this->useUserCRPref = val;
__isset.useUserCRPref = true;
}

void ProcessModel::__set_groupResourceProfileId(const std::string& val) {
  this->groupResourceProfileId = val;
__isset.groupResourceProfileId = true;
}

void ProcessModel::__set_processWorkflows(const std::vector<ProcessWorkflow> & val) {
  this->processWorkflows = val;
__isset.processWorkflows = true;
}

uint32_t ProcessModel::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_processId = false;
  bool isset_experimentId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->processId);
          isset_processId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->experimentId);
          isset_experimentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->creationTime);
          this->__isset.creationTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastUpdateTime);
          this->__isset.lastUpdateTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->processStatuses.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _etype5;
            xfer += iprot->readListBegin(_etype5, _size2);
            this->processStatuses.resize(_size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              xfer += this->processStatuses[_i6].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.processStatuses = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->processDetail);
          this->__isset.processDetail = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationInterfaceId);
          this->__isset.applicationInterfaceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationDeploymentId);
          this->__isset.applicationDeploymentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->computeResourceId);
          this->__isset.computeResourceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->processInputs.clear();
            uint32_t _size7;
            ::apache::thrift::protocol::TType _etype10;
            xfer += iprot->readListBegin(_etype10, _size7);
            this->processInputs.resize(_size7);
            uint32_t _i11;
            for (_i11 = 0; _i11 < _size7; ++_i11)
            {
              xfer += this->processInputs[_i11].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.processInputs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->processOutputs.clear();
            uint32_t _size12;
            ::apache::thrift::protocol::TType _etype15;
            xfer += iprot->readListBegin(_etype15, _size12);
            this->processOutputs.resize(_size12);
            uint32_t _i16;
            for (_i16 = 0; _i16 < _size12; ++_i16)
            {
              xfer += this->processOutputs[_i16].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.processOutputs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->processResourceSchedule.read(iprot);
          this->__isset.processResourceSchedule = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tasks.clear();
            uint32_t _size17;
            ::apache::thrift::protocol::TType _etype20;
            xfer += iprot->readListBegin(_etype20, _size17);
            this->tasks.resize(_size17);
            uint32_t _i21;
            for (_i21 = 0; _i21 < _size17; ++_i21)
            {
              xfer += this->tasks[_i21].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.tasks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->taskDag);
          this->__isset.taskDag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->processErrors.clear();
            uint32_t _size22;
            ::apache::thrift::protocol::TType _etype25;
            xfer += iprot->readListBegin(_etype25, _size22);
            this->processErrors.resize(_size22);
            uint32_t _i26;
            for (_i26 = 0; _i26 < _size22; ++_i26)
            {
              xfer += this->processErrors[_i26].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.processErrors = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gatewayExecutionId);
          this->__isset.gatewayExecutionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enableEmailNotification);
          this->__isset.enableEmailNotification = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->emailAddresses.clear();
            uint32_t _size27;
            ::apache::thrift::protocol::TType _etype30;
            xfer += iprot->readListBegin(_etype30, _size27);
            this->emailAddresses.resize(_size27);
            uint32_t _i31;
            for (_i31 = 0; _i31 < _size27; ++_i31)
            {
              xfer += iprot->readString(this->emailAddresses[_i31]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.emailAddresses = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->storageResourceId);
          this->__isset.storageResourceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userDn);
          this->__isset.userDn = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->generateCert);
          this->__isset.generateCert = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->experimentDataDir);
          this->__isset.experimentDataDir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userName);
          this->__isset.userName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->useUserCRPref);
          this->__isset.useUserCRPref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->groupResourceProfileId);
          this->__isset.groupResourceProfileId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->processWorkflows.clear();
            uint32_t _size32;
            ::apache::thrift::protocol::TType _etype35;
            xfer += iprot->readListBegin(_etype35, _size32);
            this->processWorkflows.resize(_size32);
            uint32_t _i36;
            for (_i36 = 0; _i36 < _size32; ++_i36)
            {
              xfer += this->processWorkflows[_i36].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.processWorkflows = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_processId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_experimentId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ProcessModel::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ProcessModel");

  xfer += oprot->writeFieldBegin("processId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->processId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("experimentId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->experimentId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.creationTime) {
    xfer += oprot->writeFieldBegin("creationTime", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->creationTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lastUpdateTime) {
    xfer += oprot->writeFieldBegin("lastUpdateTime", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->lastUpdateTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.processStatuses) {
    xfer += oprot->writeFieldBegin("processStatuses", ::apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->processStatuses.size()));
      std::vector< ::apache::airavata::model::status::ProcessStatus> ::const_iterator _iter37;
      for (_iter37 = this->processStatuses.begin(); _iter37 != this->processStatuses.end(); ++_iter37)
      {
        xfer += (*_iter37).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.processDetail) {
    xfer += oprot->writeFieldBegin("processDetail", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->processDetail);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.applicationInterfaceId) {
    xfer += oprot->writeFieldBegin("applicationInterfaceId", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->applicationInterfaceId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.applicationDeploymentId) {
    xfer += oprot->writeFieldBegin("applicationDeploymentId", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->applicationDeploymentId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.computeResourceId) {
    xfer += oprot->writeFieldBegin("computeResourceId", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->computeResourceId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.processInputs) {
    xfer += oprot->writeFieldBegin("processInputs", ::apache::thrift::protocol::T_LIST, 10);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->processInputs.size()));
      std::vector< ::apache::airavata::model::application::io::InputDataObjectType> ::const_iterator _iter38;
      for (_iter38 = this->processInputs.begin(); _iter38 != this->processInputs.end(); ++_iter38)
      {
        xfer += (*_iter38).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.processOutputs) {
    xfer += oprot->writeFieldBegin("processOutputs", ::apache::thrift::protocol::T_LIST, 11);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->processOutputs.size()));
      std::vector< ::apache::airavata::model::application::io::OutputDataObjectType> ::const_iterator _iter39;
      for (_iter39 = this->processOutputs.begin(); _iter39 != this->processOutputs.end(); ++_iter39)
      {
        xfer += (*_iter39).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.processResourceSchedule) {
    xfer += oprot->writeFieldBegin("processResourceSchedule", ::apache::thrift::protocol::T_STRUCT, 12);
    xfer += this->processResourceSchedule.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tasks) {
    xfer += oprot->writeFieldBegin("tasks", ::apache::thrift::protocol::T_LIST, 13);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->tasks.size()));
      std::vector< ::apache::airavata::model::task::TaskModel> ::const_iterator _iter40;
      for (_iter40 = this->tasks.begin(); _iter40 != this->tasks.end(); ++_iter40)
      {
        xfer += (*_iter40).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.taskDag) {
    xfer += oprot->writeFieldBegin("taskDag", ::apache::thrift::protocol::T_STRING, 14);
    xfer += oprot->writeString(this->taskDag);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.processErrors) {
    xfer += oprot->writeFieldBegin("processErrors", ::apache::thrift::protocol::T_LIST, 15);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->processErrors.size()));
      std::vector< ::apache::airavata::model::commons::ErrorModel> ::const_iterator _iter41;
      for (_iter41 = this->processErrors.begin(); _iter41 != this->processErrors.end(); ++_iter41)
      {
        xfer += (*_iter41).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.gatewayExecutionId) {
    xfer += oprot->writeFieldBegin("gatewayExecutionId", ::apache::thrift::protocol::T_STRING, 16);
    xfer += oprot->writeString(this->gatewayExecutionId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.enableEmailNotification) {
    xfer += oprot->writeFieldBegin("enableEmailNotification", ::apache::thrift::protocol::T_BOOL, 17);
    xfer += oprot->writeBool(this->enableEmailNotification);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.emailAddresses) {
    xfer += oprot->writeFieldBegin("emailAddresses", ::apache::thrift::protocol::T_LIST, 18);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->emailAddresses.size()));
      std::vector<std::string> ::const_iterator _iter42;
      for (_iter42 = this->emailAddresses.begin(); _iter42 != this->emailAddresses.end(); ++_iter42)
      {
        xfer += oprot->writeString((*_iter42));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.storageResourceId) {
    xfer += oprot->writeFieldBegin("storageResourceId", ::apache::thrift::protocol::T_STRING, 19);
    xfer += oprot->writeString(this->storageResourceId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.userDn) {
    xfer += oprot->writeFieldBegin("userDn", ::apache::thrift::protocol::T_STRING, 20);
    xfer += oprot->writeString(this->userDn);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.generateCert) {
    xfer += oprot->writeFieldBegin("generateCert", ::apache::thrift::protocol::T_BOOL, 21);
    xfer += oprot->writeBool(this->generateCert);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.experimentDataDir) {
    xfer += oprot->writeFieldBegin("experimentDataDir", ::apache::thrift::protocol::T_STRING, 22);
    xfer += oprot->writeString(this->experimentDataDir);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.userName) {
    xfer += oprot->writeFieldBegin("userName", ::apache::thrift::protocol::T_STRING, 23);
    xfer += oprot->writeString(this->userName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.useUserCRPref) {
    xfer += oprot->writeFieldBegin("useUserCRPref", ::apache::thrift::protocol::T_BOOL, 24);
    xfer += oprot->writeBool(this->useUserCRPref);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.groupResourceProfileId) {
    xfer += oprot->writeFieldBegin("groupResourceProfileId", ::apache::thrift::protocol::T_STRING, 25);
    xfer += oprot->writeString(this->groupResourceProfileId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.processWorkflows) {
    xfer += oprot->writeFieldBegin("processWorkflows", ::apache::thrift::protocol::T_LIST, 26);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->processWorkflows.size()));
      std::vector<ProcessWorkflow> ::const_iterator _iter43;
      for (_iter43 = this->processWorkflows.begin(); _iter43 != this->processWorkflows.end(); ++_iter43)
      {
        xfer += (*_iter43).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProcessModel &a, ProcessModel &b) {
  using ::std::swap;
  swap(a.processId, b.processId);
  swap(a.experimentId, b.experimentId);
  swap(a.creationTime, b.creationTime);
  swap(a.lastUpdateTime, b.lastUpdateTime);
  swap(a.processStatuses, b.processStatuses);
  swap(a.processDetail, b.processDetail);
  swap(a.applicationInterfaceId, b.applicationInterfaceId);
  swap(a.applicationDeploymentId, b.applicationDeploymentId);
  swap(a.computeResourceId, b.computeResourceId);
  swap(a.processInputs, b.processInputs);
  swap(a.processOutputs, b.processOutputs);
  swap(a.processResourceSchedule, b.processResourceSchedule);
  swap(a.tasks, b.tasks);
  swap(a.taskDag, b.taskDag);
  swap(a.processErrors, b.processErrors);
  swap(a.gatewayExecutionId, b.gatewayExecutionId);
  swap(a.enableEmailNotification, b.enableEmailNotification);
  swap(a.emailAddresses, b.emailAddresses);
  swap(a.storageResourceId, b.storageResourceId);
  swap(a.userDn, b.userDn);
  swap(a.generateCert, b.generateCert);
  swap(a.experimentDataDir, b.experimentDataDir);
  swap(a.userName, b.userName);
  swap(a.useUserCRPref, b.useUserCRPref);
  swap(a.groupResourceProfileId, b.groupResourceProfileId);
  swap(a.processWorkflows, b.processWorkflows);
  swap(a.__isset, b.__isset);
}

ProcessModel::ProcessModel(const ProcessModel& other44) {
  processId = other44.processId;
  experimentId = other44.experimentId;
  creationTime = other44.creationTime;
  lastUpdateTime = other44.lastUpdateTime;
  processStatuses = other44.processStatuses;
  processDetail = other44.processDetail;
  applicationInterfaceId = other44.applicationInterfaceId;
  applicationDeploymentId = other44.applicationDeploymentId;
  computeResourceId = other44.computeResourceId;
  processInputs = other44.processInputs;
  processOutputs = other44.processOutputs;
  processResourceSchedule = other44.processResourceSchedule;
  tasks = other44.tasks;
  taskDag = other44.taskDag;
  processErrors = other44.processErrors;
  gatewayExecutionId = other44.gatewayExecutionId;
  enableEmailNotification = other44.enableEmailNotification;
  emailAddresses = other44.emailAddresses;
  storageResourceId = other44.storageResourceId;
  userDn = other44.userDn;
  generateCert = other44.generateCert;
  experimentDataDir = other44.experimentDataDir;
  userName = other44.userName;
  useUserCRPref = other44.useUserCRPref;
  groupResourceProfileId = other44.groupResourceProfileId;
  processWorkflows = other44.processWorkflows;
  __isset = other44.__isset;
}
ProcessModel& ProcessModel::operator=(const ProcessModel& other45) {
  processId = other45.processId;
  experimentId = other45.experimentId;
  creationTime = other45.creationTime;
  lastUpdateTime = other45.lastUpdateTime;
  processStatuses = other45.processStatuses;
  processDetail = other45.processDetail;
  applicationInterfaceId = other45.applicationInterfaceId;
  applicationDeploymentId = other45.applicationDeploymentId;
  computeResourceId = other45.computeResourceId;
  processInputs = other45.processInputs;
  processOutputs = other45.processOutputs;
  processResourceSchedule = other45.processResourceSchedule;
  tasks = other45.tasks;
  taskDag = other45.taskDag;
  processErrors = other45.processErrors;
  gatewayExecutionId = other45.gatewayExecutionId;
  enableEmailNotification = other45.enableEmailNotification;
  emailAddresses = other45.emailAddresses;
  storageResourceId = other45.storageResourceId;
  userDn = other45.userDn;
  generateCert = other45.generateCert;
  experimentDataDir = other45.experimentDataDir;
  userName = other45.userName;
  useUserCRPref = other45.useUserCRPref;
  groupResourceProfileId = other45.groupResourceProfileId;
  processWorkflows = other45.processWorkflows;
  __isset = other45.__isset;
  return *this;
}
void ProcessModel::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ProcessModel(";
  out << "processId=" << to_string(processId);
  out << ", " << "experimentId=" << to_string(experimentId);
  out << ", " << "creationTime="; (__isset.creationTime ? (out << to_string(creationTime)) : (out << "<null>"));
  out << ", " << "lastUpdateTime="; (__isset.lastUpdateTime ? (out << to_string(lastUpdateTime)) : (out << "<null>"));
  out << ", " << "processStatuses="; (__isset.processStatuses ? (out << to_string(processStatuses)) : (out << "<null>"));
  out << ", " << "processDetail="; (__isset.processDetail ? (out << to_string(processDetail)) : (out << "<null>"));
  out << ", " << "applicationInterfaceId="; (__isset.applicationInterfaceId ? (out << to_string(applicationInterfaceId)) : (out << "<null>"));
  out << ", " << "applicationDeploymentId="; (__isset.applicationDeploymentId ? (out << to_string(applicationDeploymentId)) : (out << "<null>"));
  out << ", " << "computeResourceId="; (__isset.computeResourceId ? (out << to_string(computeResourceId)) : (out << "<null>"));
  out << ", " << "processInputs="; (__isset.processInputs ? (out << to_string(processInputs)) : (out << "<null>"));
  out << ", " << "processOutputs="; (__isset.processOutputs ? (out << to_string(processOutputs)) : (out << "<null>"));
  out << ", " << "processResourceSchedule="; (__isset.processResourceSchedule ? (out << to_string(processResourceSchedule)) : (out << "<null>"));
  out << ", " << "tasks="; (__isset.tasks ? (out << to_string(tasks)) : (out << "<null>"));
  out << ", " << "taskDag="; (__isset.taskDag ? (out << to_string(taskDag)) : (out << "<null>"));
  out << ", " << "processErrors="; (__isset.processErrors ? (out << to_string(processErrors)) : (out << "<null>"));
  out << ", " << "gatewayExecutionId="; (__isset.gatewayExecutionId ? (out << to_string(gatewayExecutionId)) : (out << "<null>"));
  out << ", " << "enableEmailNotification="; (__isset.enableEmailNotification ? (out << to_string(enableEmailNotification)) : (out << "<null>"));
  out << ", " << "emailAddresses="; (__isset.emailAddresses ? (out << to_string(emailAddresses)) : (out << "<null>"));
  out << ", " << "storageResourceId="; (__isset.storageResourceId ? (out << to_string(storageResourceId)) : (out << "<null>"));
  out << ", " << "userDn="; (__isset.userDn ? (out << to_string(userDn)) : (out << "<null>"));
  out << ", " << "generateCert="; (__isset.generateCert ? (out << to_string(generateCert)) : (out << "<null>"));
  out << ", " << "experimentDataDir="; (__isset.experimentDataDir ? (out << to_string(experimentDataDir)) : (out << "<null>"));
  out << ", " << "userName="; (__isset.userName ? (out << to_string(userName)) : (out << "<null>"));
  out << ", " << "useUserCRPref="; (__isset.useUserCRPref ? (out << to_string(useUserCRPref)) : (out << "<null>"));
  out << ", " << "groupResourceProfileId="; (__isset.groupResourceProfileId ? (out << to_string(groupResourceProfileId)) : (out << "<null>"));
  out << ", " << "processWorkflows="; (__isset.processWorkflows ? (out << to_string(processWorkflows)) : (out << "<null>"));
  out << ")";
}

}}}} // namespace
