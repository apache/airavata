/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "application_deployment_model_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace apache { namespace airavata { namespace model { namespace appcatalog { namespace appdeployment {

int _kApplicationParallelismTypeValues[] = {
  ApplicationParallelismType::SERIAL,
  ApplicationParallelismType::MPI,
  ApplicationParallelismType::OPENMP,
  ApplicationParallelismType::OPENMP_MPI,
  ApplicationParallelismType::CCM,
  ApplicationParallelismType::CRAY_MPI
};
const char* _kApplicationParallelismTypeNames[] = {
  "SERIAL",
  "MPI",
  "OPENMP",
  "OPENMP_MPI",
  "CCM",
  "CRAY_MPI"
};
const std::map<int, const char*> _ApplicationParallelismType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kApplicationParallelismTypeValues, _kApplicationParallelismTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


SetEnvPaths::~SetEnvPaths() throw() {
}


void SetEnvPaths::__set_name(const std::string& val) {
  this->name = val;
}

void SetEnvPaths::__set_value(const std::string& val) {
  this->value = val;
}

const char* SetEnvPaths::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t SetEnvPaths::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t SetEnvPaths::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name = false;
  bool isset_value = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          isset_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SetEnvPaths::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SetEnvPaths");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(SetEnvPaths &a, SetEnvPaths &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.value, b.value);
}

SetEnvPaths::SetEnvPaths(const SetEnvPaths& other0) {
  name = other0.name;
  value = other0.value;
}
SetEnvPaths& SetEnvPaths::operator=(const SetEnvPaths& other1) {
  name = other1.name;
  value = other1.value;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const SetEnvPaths& obj) {
  using apache::thrift::to_string;
  out << "SetEnvPaths(";
  out << "name=" << to_string(obj.name);
  out << ", " << "value=" << to_string(obj.value);
  out << ")";
  return out;
}


ApplicationModule::~ApplicationModule() throw() {
}


void ApplicationModule::__set_appModuleId(const std::string& val) {
  this->appModuleId = val;
}

void ApplicationModule::__set_appModuleName(const std::string& val) {
  this->appModuleName = val;
}

void ApplicationModule::__set_appModuleVersion(const std::string& val) {
  this->appModuleVersion = val;
__isset.appModuleVersion = true;
}

void ApplicationModule::__set_appModuleDescription(const std::string& val) {
  this->appModuleDescription = val;
__isset.appModuleDescription = true;
}

const char* ApplicationModule::ascii_fingerprint = "FED0FBEAA0C90D1589E8B650561B7675";
const uint8_t ApplicationModule::binary_fingerprint[16] = {0xFE,0xD0,0xFB,0xEA,0xA0,0xC9,0x0D,0x15,0x89,0xE8,0xB6,0x50,0x56,0x1B,0x76,0x75};

uint32_t ApplicationModule::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_appModuleId = false;
  bool isset_appModuleName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->appModuleId);
          isset_appModuleId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->appModuleName);
          isset_appModuleName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->appModuleVersion);
          this->__isset.appModuleVersion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->appModuleDescription);
          this->__isset.appModuleDescription = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_appModuleId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_appModuleName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ApplicationModule::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ApplicationModule");

  xfer += oprot->writeFieldBegin("appModuleId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->appModuleId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("appModuleName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->appModuleName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.appModuleVersion) {
    xfer += oprot->writeFieldBegin("appModuleVersion", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->appModuleVersion);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.appModuleDescription) {
    xfer += oprot->writeFieldBegin("appModuleDescription", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->appModuleDescription);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ApplicationModule &a, ApplicationModule &b) {
  using ::std::swap;
  swap(a.appModuleId, b.appModuleId);
  swap(a.appModuleName, b.appModuleName);
  swap(a.appModuleVersion, b.appModuleVersion);
  swap(a.appModuleDescription, b.appModuleDescription);
  swap(a.__isset, b.__isset);
}

ApplicationModule::ApplicationModule(const ApplicationModule& other2) {
  appModuleId = other2.appModuleId;
  appModuleName = other2.appModuleName;
  appModuleVersion = other2.appModuleVersion;
  appModuleDescription = other2.appModuleDescription;
  __isset = other2.__isset;
}
ApplicationModule& ApplicationModule::operator=(const ApplicationModule& other3) {
  appModuleId = other3.appModuleId;
  appModuleName = other3.appModuleName;
  appModuleVersion = other3.appModuleVersion;
  appModuleDescription = other3.appModuleDescription;
  __isset = other3.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ApplicationModule& obj) {
  using apache::thrift::to_string;
  out << "ApplicationModule(";
  out << "appModuleId=" << to_string(obj.appModuleId);
  out << ", " << "appModuleName=" << to_string(obj.appModuleName);
  out << ", " << "appModuleVersion="; (obj.__isset.appModuleVersion ? (out << to_string(obj.appModuleVersion)) : (out << "<null>"));
  out << ", " << "appModuleDescription="; (obj.__isset.appModuleDescription ? (out << to_string(obj.appModuleDescription)) : (out << "<null>"));
  out << ")";
  return out;
}


ApplicationDeploymentDescription::~ApplicationDeploymentDescription() throw() {
}


void ApplicationDeploymentDescription::__set_appDeploymentId(const std::string& val) {
  this->appDeploymentId = val;
}

void ApplicationDeploymentDescription::__set_appModuleId(const std::string& val) {
  this->appModuleId = val;
}

void ApplicationDeploymentDescription::__set_computeHostId(const std::string& val) {
  this->computeHostId = val;
}

void ApplicationDeploymentDescription::__set_executablePath(const std::string& val) {
  this->executablePath = val;
}

void ApplicationDeploymentDescription::__set_parallelism(const ApplicationParallelismType::type val) {
  this->parallelism = val;
}

void ApplicationDeploymentDescription::__set_appDeploymentDescription(const std::string& val) {
  this->appDeploymentDescription = val;
__isset.appDeploymentDescription = true;
}

void ApplicationDeploymentDescription::__set_moduleLoadCmds(const std::vector<std::string> & val) {
  this->moduleLoadCmds = val;
__isset.moduleLoadCmds = true;
}

void ApplicationDeploymentDescription::__set_libPrependPaths(const std::vector<SetEnvPaths> & val) {
  this->libPrependPaths = val;
__isset.libPrependPaths = true;
}

void ApplicationDeploymentDescription::__set_libAppendPaths(const std::vector<SetEnvPaths> & val) {
  this->libAppendPaths = val;
__isset.libAppendPaths = true;
}

void ApplicationDeploymentDescription::__set_setEnvironment(const std::vector<SetEnvPaths> & val) {
  this->setEnvironment = val;
__isset.setEnvironment = true;
}

void ApplicationDeploymentDescription::__set_preJobCommands(const std::vector<std::string> & val) {
  this->preJobCommands = val;
__isset.preJobCommands = true;
}

void ApplicationDeploymentDescription::__set_postJobCommands(const std::vector<std::string> & val) {
  this->postJobCommands = val;
__isset.postJobCommands = true;
}

const char* ApplicationDeploymentDescription::ascii_fingerprint = "3B2F93AE9F0E6A621AF867419ADD9E5A";
const uint8_t ApplicationDeploymentDescription::binary_fingerprint[16] = {0x3B,0x2F,0x93,0xAE,0x9F,0x0E,0x6A,0x62,0x1A,0xF8,0x67,0x41,0x9A,0xDD,0x9E,0x5A};

uint32_t ApplicationDeploymentDescription::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_appDeploymentId = false;
  bool isset_appModuleId = false;
  bool isset_computeHostId = false;
  bool isset_executablePath = false;
  bool isset_parallelism = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->appDeploymentId);
          isset_appDeploymentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->appModuleId);
          isset_appModuleId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->computeHostId);
          isset_computeHostId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->executablePath);
          isset_executablePath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast4;
          xfer += iprot->readI32(ecast4);
          this->parallelism = (ApplicationParallelismType::type)ecast4;
          isset_parallelism = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->appDeploymentDescription);
          this->__isset.appDeploymentDescription = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->moduleLoadCmds.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            xfer += iprot->readListBegin(_etype8, _size5);
            this->moduleLoadCmds.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += iprot->readString(this->moduleLoadCmds[_i9]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.moduleLoadCmds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->libPrependPaths.clear();
            uint32_t _size10;
            ::apache::thrift::protocol::TType _etype13;
            xfer += iprot->readListBegin(_etype13, _size10);
            this->libPrependPaths.resize(_size10);
            uint32_t _i14;
            for (_i14 = 0; _i14 < _size10; ++_i14)
            {
              xfer += this->libPrependPaths[_i14].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.libPrependPaths = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->libAppendPaths.clear();
            uint32_t _size15;
            ::apache::thrift::protocol::TType _etype18;
            xfer += iprot->readListBegin(_etype18, _size15);
            this->libAppendPaths.resize(_size15);
            uint32_t _i19;
            for (_i19 = 0; _i19 < _size15; ++_i19)
            {
              xfer += this->libAppendPaths[_i19].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.libAppendPaths = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->setEnvironment.clear();
            uint32_t _size20;
            ::apache::thrift::protocol::TType _etype23;
            xfer += iprot->readListBegin(_etype23, _size20);
            this->setEnvironment.resize(_size20);
            uint32_t _i24;
            for (_i24 = 0; _i24 < _size20; ++_i24)
            {
              xfer += this->setEnvironment[_i24].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.setEnvironment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->preJobCommands.clear();
            uint32_t _size25;
            ::apache::thrift::protocol::TType _etype28;
            xfer += iprot->readListBegin(_etype28, _size25);
            this->preJobCommands.resize(_size25);
            uint32_t _i29;
            for (_i29 = 0; _i29 < _size25; ++_i29)
            {
              xfer += iprot->readString(this->preJobCommands[_i29]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.preJobCommands = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->postJobCommands.clear();
            uint32_t _size30;
            ::apache::thrift::protocol::TType _etype33;
            xfer += iprot->readListBegin(_etype33, _size30);
            this->postJobCommands.resize(_size30);
            uint32_t _i34;
            for (_i34 = 0; _i34 < _size30; ++_i34)
            {
              xfer += iprot->readString(this->postJobCommands[_i34]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.postJobCommands = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_appDeploymentId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_appModuleId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_computeHostId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_executablePath)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_parallelism)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ApplicationDeploymentDescription::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ApplicationDeploymentDescription");

  xfer += oprot->writeFieldBegin("appDeploymentId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->appDeploymentId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("appModuleId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->appModuleId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("computeHostId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->computeHostId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("executablePath", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->executablePath);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parallelism", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->parallelism);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.appDeploymentDescription) {
    xfer += oprot->writeFieldBegin("appDeploymentDescription", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->appDeploymentDescription);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.moduleLoadCmds) {
    xfer += oprot->writeFieldBegin("moduleLoadCmds", ::apache::thrift::protocol::T_LIST, 7);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->moduleLoadCmds.size()));
      std::vector<std::string> ::const_iterator _iter35;
      for (_iter35 = this->moduleLoadCmds.begin(); _iter35 != this->moduleLoadCmds.end(); ++_iter35)
      {
        xfer += oprot->writeString((*_iter35));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.libPrependPaths) {
    xfer += oprot->writeFieldBegin("libPrependPaths", ::apache::thrift::protocol::T_LIST, 8);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->libPrependPaths.size()));
      std::vector<SetEnvPaths> ::const_iterator _iter36;
      for (_iter36 = this->libPrependPaths.begin(); _iter36 != this->libPrependPaths.end(); ++_iter36)
      {
        xfer += (*_iter36).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.libAppendPaths) {
    xfer += oprot->writeFieldBegin("libAppendPaths", ::apache::thrift::protocol::T_LIST, 9);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->libAppendPaths.size()));
      std::vector<SetEnvPaths> ::const_iterator _iter37;
      for (_iter37 = this->libAppendPaths.begin(); _iter37 != this->libAppendPaths.end(); ++_iter37)
      {
        xfer += (*_iter37).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.setEnvironment) {
    xfer += oprot->writeFieldBegin("setEnvironment", ::apache::thrift::protocol::T_LIST, 10);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->setEnvironment.size()));
      std::vector<SetEnvPaths> ::const_iterator _iter38;
      for (_iter38 = this->setEnvironment.begin(); _iter38 != this->setEnvironment.end(); ++_iter38)
      {
        xfer += (*_iter38).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.preJobCommands) {
    xfer += oprot->writeFieldBegin("preJobCommands", ::apache::thrift::protocol::T_LIST, 11);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->preJobCommands.size()));
      std::vector<std::string> ::const_iterator _iter39;
      for (_iter39 = this->preJobCommands.begin(); _iter39 != this->preJobCommands.end(); ++_iter39)
      {
        xfer += oprot->writeString((*_iter39));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.postJobCommands) {
    xfer += oprot->writeFieldBegin("postJobCommands", ::apache::thrift::protocol::T_LIST, 12);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->postJobCommands.size()));
      std::vector<std::string> ::const_iterator _iter40;
      for (_iter40 = this->postJobCommands.begin(); _iter40 != this->postJobCommands.end(); ++_iter40)
      {
        xfer += oprot->writeString((*_iter40));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ApplicationDeploymentDescription &a, ApplicationDeploymentDescription &b) {
  using ::std::swap;
  swap(a.appDeploymentId, b.appDeploymentId);
  swap(a.appModuleId, b.appModuleId);
  swap(a.computeHostId, b.computeHostId);
  swap(a.executablePath, b.executablePath);
  swap(a.parallelism, b.parallelism);
  swap(a.appDeploymentDescription, b.appDeploymentDescription);
  swap(a.moduleLoadCmds, b.moduleLoadCmds);
  swap(a.libPrependPaths, b.libPrependPaths);
  swap(a.libAppendPaths, b.libAppendPaths);
  swap(a.setEnvironment, b.setEnvironment);
  swap(a.preJobCommands, b.preJobCommands);
  swap(a.postJobCommands, b.postJobCommands);
  swap(a.__isset, b.__isset);
}

ApplicationDeploymentDescription::ApplicationDeploymentDescription(const ApplicationDeploymentDescription& other41) {
  appDeploymentId = other41.appDeploymentId;
  appModuleId = other41.appModuleId;
  computeHostId = other41.computeHostId;
  executablePath = other41.executablePath;
  parallelism = other41.parallelism;
  appDeploymentDescription = other41.appDeploymentDescription;
  moduleLoadCmds = other41.moduleLoadCmds;
  libPrependPaths = other41.libPrependPaths;
  libAppendPaths = other41.libAppendPaths;
  setEnvironment = other41.setEnvironment;
  preJobCommands = other41.preJobCommands;
  postJobCommands = other41.postJobCommands;
  __isset = other41.__isset;
}
ApplicationDeploymentDescription& ApplicationDeploymentDescription::operator=(const ApplicationDeploymentDescription& other42) {
  appDeploymentId = other42.appDeploymentId;
  appModuleId = other42.appModuleId;
  computeHostId = other42.computeHostId;
  executablePath = other42.executablePath;
  parallelism = other42.parallelism;
  appDeploymentDescription = other42.appDeploymentDescription;
  moduleLoadCmds = other42.moduleLoadCmds;
  libPrependPaths = other42.libPrependPaths;
  libAppendPaths = other42.libAppendPaths;
  setEnvironment = other42.setEnvironment;
  preJobCommands = other42.preJobCommands;
  postJobCommands = other42.postJobCommands;
  __isset = other42.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ApplicationDeploymentDescription& obj) {
  using apache::thrift::to_string;
  out << "ApplicationDeploymentDescription(";
  out << "appDeploymentId=" << to_string(obj.appDeploymentId);
  out << ", " << "appModuleId=" << to_string(obj.appModuleId);
  out << ", " << "computeHostId=" << to_string(obj.computeHostId);
  out << ", " << "executablePath=" << to_string(obj.executablePath);
  out << ", " << "parallelism=" << to_string(obj.parallelism);
  out << ", " << "appDeploymentDescription="; (obj.__isset.appDeploymentDescription ? (out << to_string(obj.appDeploymentDescription)) : (out << "<null>"));
  out << ", " << "moduleLoadCmds="; (obj.__isset.moduleLoadCmds ? (out << to_string(obj.moduleLoadCmds)) : (out << "<null>"));
  out << ", " << "libPrependPaths="; (obj.__isset.libPrependPaths ? (out << to_string(obj.libPrependPaths)) : (out << "<null>"));
  out << ", " << "libAppendPaths="; (obj.__isset.libAppendPaths ? (out << to_string(obj.libAppendPaths)) : (out << "<null>"));
  out << ", " << "setEnvironment="; (obj.__isset.setEnvironment ? (out << to_string(obj.setEnvironment)) : (out << "<null>"));
  out << ", " << "preJobCommands="; (obj.__isset.preJobCommands ? (out << to_string(obj.preJobCommands)) : (out << "<null>"));
  out << ", " << "postJobCommands="; (obj.__isset.postJobCommands ? (out << to_string(obj.postJobCommands)) : (out << "<null>"));
  out << ")";
  return out;
}

}}}}} // namespace
