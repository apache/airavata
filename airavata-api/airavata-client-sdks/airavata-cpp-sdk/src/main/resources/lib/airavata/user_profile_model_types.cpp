/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "user_profile_model_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace apache { namespace airavata { namespace model { namespace user {

int _kStatusValues[] = {
  Status::ACTIVE,
  Status::CONFIRMED,
  Status::APPROVED,
  Status::DELETED,
  Status::DUPLICATE,
  Status::GRACE_PERIOD,
  Status::INVITED,
  Status::DENIED,
  Status::PENDING,
  Status::PENDING_APPROVAL,
  Status::PENDING_CONFIRMATION,
  Status::SUSPENDED,
  Status::DECLINED,
  Status::EXPIRED
};
const char* _kStatusNames[] = {
  "ACTIVE",
  "CONFIRMED",
  "APPROVED",
  "DELETED",
  "DUPLICATE",
  "GRACE_PERIOD",
  "INVITED",
  "DENIED",
  "PENDING",
  "PENDING_APPROVAL",
  "PENDING_CONFIRMATION",
  "SUSPENDED",
  "DECLINED",
  "EXPIRED"
};
const std::map<int, const char*> _Status_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(14, _kStatusValues, _kStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kUSCitizenshipValues[] = {
  USCitizenship::US_CITIZEN,
  USCitizenship::US_PERMANENT_RESIDENT,
  USCitizenship::OTHER_NON_US_CITIZEN
};
const char* _kUSCitizenshipNames[] = {
  "US_CITIZEN",
  "US_PERMANENT_RESIDENT",
  "OTHER_NON_US_CITIZEN"
};
const std::map<int, const char*> _USCitizenship_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kUSCitizenshipValues, _kUSCitizenshipNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kethnicityValues[] = {
  ethnicity::HISPANIC_LATINO,
  ethnicity::NOT_HISPANIC_LATINO
};
const char* _kethnicityNames[] = {
  "HISPANIC_LATINO",
  "NOT_HISPANIC_LATINO"
};
const std::map<int, const char*> _ethnicity_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kethnicityValues, _kethnicityNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kraceValues[] = {
  race::ASIAN,
  race::AMERICAN_INDIAN_OR_ALASKAN_NATIVE,
  race::BLACK_OR_AFRICAN_AMERICAN,
  race::NATIVE_HAWAIIAN_OR_PACIFIC_ISLANDER,
  race::WHITE
};
const char* _kraceNames[] = {
  "ASIAN",
  "AMERICAN_INDIAN_OR_ALASKAN_NATIVE",
  "BLACK_OR_AFRICAN_AMERICAN",
  "NATIVE_HAWAIIAN_OR_PACIFIC_ISLANDER",
  "WHITE"
};
const std::map<int, const char*> _race_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kraceValues, _kraceNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kdisabilityValues[] = {
  disability::HEARING_IMAPAIRED,
  disability::VISUAL_IMPAIRED,
  disability::MOBILITY_OR_ORTHOPEDIC_IMPAIRMENT,
  disability::OTHER_IMPAIRMENT
};
const char* _kdisabilityNames[] = {
  "HEARING_IMAPAIRED",
  "VISUAL_IMPAIRED",
  "MOBILITY_OR_ORTHOPEDIC_IMPAIRMENT",
  "OTHER_IMPAIRMENT"
};
const std::map<int, const char*> _disability_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kdisabilityValues, _kdisabilityNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


NSFDemographics::~NSFDemographics() throw() {
}


void NSFDemographics::__set_airavataInternalUserId(const std::string& val) {
  this->airavataInternalUserId = val;
}

void NSFDemographics::__set_gender(const std::string& val) {
  this->gender = val;
__isset.gender = true;
}

void NSFDemographics::__set_usCitizenship(const USCitizenship::type val) {
  this->usCitizenship = val;
__isset.usCitizenship = true;
}

void NSFDemographics::__set_ethnicities(const std::vector<ethnicity::type> & val) {
  this->ethnicities = val;
__isset.ethnicities = true;
}

void NSFDemographics::__set_races(const std::vector<race::type> & val) {
  this->races = val;
__isset.races = true;
}

void NSFDemographics::__set_disabilities(const std::vector<disability::type> & val) {
  this->disabilities = val;
__isset.disabilities = true;
}

uint32_t NSFDemographics::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_airavataInternalUserId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->airavataInternalUserId);
          isset_airavataInternalUserId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gender);
          this->__isset.gender = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->usCitizenship = (USCitizenship::type)ecast0;
          this->__isset.usCitizenship = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ethnicities.clear();
            uint32_t _size1;
            ::apache::thrift::protocol::TType _etype4;
            xfer += iprot->readListBegin(_etype4, _size1);
            this->ethnicities.resize(_size1);
            uint32_t _i5;
            for (_i5 = 0; _i5 < _size1; ++_i5)
            {
              int32_t ecast6;
              xfer += iprot->readI32(ecast6);
              this->ethnicities[_i5] = (ethnicity::type)ecast6;
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ethnicities = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->races.clear();
            uint32_t _size7;
            ::apache::thrift::protocol::TType _etype10;
            xfer += iprot->readListBegin(_etype10, _size7);
            this->races.resize(_size7);
            uint32_t _i11;
            for (_i11 = 0; _i11 < _size7; ++_i11)
            {
              int32_t ecast12;
              xfer += iprot->readI32(ecast12);
              this->races[_i11] = (race::type)ecast12;
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.races = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->disabilities.clear();
            uint32_t _size13;
            ::apache::thrift::protocol::TType _etype16;
            xfer += iprot->readListBegin(_etype16, _size13);
            this->disabilities.resize(_size13);
            uint32_t _i17;
            for (_i17 = 0; _i17 < _size13; ++_i17)
            {
              int32_t ecast18;
              xfer += iprot->readI32(ecast18);
              this->disabilities[_i17] = (disability::type)ecast18;
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.disabilities = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_airavataInternalUserId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t NSFDemographics::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NSFDemographics");

  xfer += oprot->writeFieldBegin("airavataInternalUserId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->airavataInternalUserId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.gender) {
    xfer += oprot->writeFieldBegin("gender", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->gender);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.usCitizenship) {
    xfer += oprot->writeFieldBegin("usCitizenship", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32((int32_t)this->usCitizenship);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ethnicities) {
    xfer += oprot->writeFieldBegin("ethnicities", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->ethnicities.size()));
      std::vector<ethnicity::type> ::const_iterator _iter19;
      for (_iter19 = this->ethnicities.begin(); _iter19 != this->ethnicities.end(); ++_iter19)
      {
        xfer += oprot->writeI32((int32_t)(*_iter19));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.races) {
    xfer += oprot->writeFieldBegin("races", ::apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->races.size()));
      std::vector<race::type> ::const_iterator _iter20;
      for (_iter20 = this->races.begin(); _iter20 != this->races.end(); ++_iter20)
      {
        xfer += oprot->writeI32((int32_t)(*_iter20));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.disabilities) {
    xfer += oprot->writeFieldBegin("disabilities", ::apache::thrift::protocol::T_LIST, 6);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->disabilities.size()));
      std::vector<disability::type> ::const_iterator _iter21;
      for (_iter21 = this->disabilities.begin(); _iter21 != this->disabilities.end(); ++_iter21)
      {
        xfer += oprot->writeI32((int32_t)(*_iter21));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NSFDemographics &a, NSFDemographics &b) {
  using ::std::swap;
  swap(a.airavataInternalUserId, b.airavataInternalUserId);
  swap(a.gender, b.gender);
  swap(a.usCitizenship, b.usCitizenship);
  swap(a.ethnicities, b.ethnicities);
  swap(a.races, b.races);
  swap(a.disabilities, b.disabilities);
  swap(a.__isset, b.__isset);
}

NSFDemographics::NSFDemographics(const NSFDemographics& other22) {
  airavataInternalUserId = other22.airavataInternalUserId;
  gender = other22.gender;
  usCitizenship = other22.usCitizenship;
  ethnicities = other22.ethnicities;
  races = other22.races;
  disabilities = other22.disabilities;
  __isset = other22.__isset;
}
NSFDemographics& NSFDemographics::operator=(const NSFDemographics& other23) {
  airavataInternalUserId = other23.airavataInternalUserId;
  gender = other23.gender;
  usCitizenship = other23.usCitizenship;
  ethnicities = other23.ethnicities;
  races = other23.races;
  disabilities = other23.disabilities;
  __isset = other23.__isset;
  return *this;
}
void NSFDemographics::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NSFDemographics(";
  out << "airavataInternalUserId=" << to_string(airavataInternalUserId);
  out << ", " << "gender="; (__isset.gender ? (out << to_string(gender)) : (out << "<null>"));
  out << ", " << "usCitizenship="; (__isset.usCitizenship ? (out << to_string(usCitizenship)) : (out << "<null>"));
  out << ", " << "ethnicities="; (__isset.ethnicities ? (out << to_string(ethnicities)) : (out << "<null>"));
  out << ", " << "races="; (__isset.races ? (out << to_string(races)) : (out << "<null>"));
  out << ", " << "disabilities="; (__isset.disabilities ? (out << to_string(disabilities)) : (out << "<null>"));
  out << ")";
}


CustomDashboard::~CustomDashboard() throw() {
}


void CustomDashboard::__set_airavataInternalUserId(const std::string& val) {
  this->airavataInternalUserId = val;
}

void CustomDashboard::__set_experimentId(const std::string& val) {
  this->experimentId = val;
__isset.experimentId = true;
}

void CustomDashboard::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

void CustomDashboard::__set_description(const std::string& val) {
  this->description = val;
__isset.description = true;
}

void CustomDashboard::__set_project(const std::string& val) {
  this->project = val;
__isset.project = true;
}

void CustomDashboard::__set_owner(const std::string& val) {
  this->owner = val;
__isset.owner = true;
}

void CustomDashboard::__set_application(const std::string& val) {
  this->application = val;
__isset.application = true;
}

void CustomDashboard::__set_computeResource(const std::string& val) {
  this->computeResource = val;
__isset.computeResource = true;
}

void CustomDashboard::__set_jobName(const std::string& val) {
  this->jobName = val;
__isset.jobName = true;
}

void CustomDashboard::__set_jobId(const std::string& val) {
  this->jobId = val;
__isset.jobId = true;
}

void CustomDashboard::__set_jobStatus(const std::string& val) {
  this->jobStatus = val;
__isset.jobStatus = true;
}

void CustomDashboard::__set_jobCreationTime(const std::string& val) {
  this->jobCreationTime = val;
__isset.jobCreationTime = true;
}

void CustomDashboard::__set_notificationsTo(const std::string& val) {
  this->notificationsTo = val;
__isset.notificationsTo = true;
}

void CustomDashboard::__set_workingDir(const std::string& val) {
  this->workingDir = val;
__isset.workingDir = true;
}

void CustomDashboard::__set_jobDescription(const std::string& val) {
  this->jobDescription = val;
__isset.jobDescription = true;
}

void CustomDashboard::__set_creationTime(const std::string& val) {
  this->creationTime = val;
__isset.creationTime = true;
}

void CustomDashboard::__set_lastModifiedTime(const std::string& val) {
  this->lastModifiedTime = val;
__isset.lastModifiedTime = true;
}

void CustomDashboard::__set_wallTime(const std::string& val) {
  this->wallTime = val;
__isset.wallTime = true;
}

void CustomDashboard::__set_cpuCount(const std::string& val) {
  this->cpuCount = val;
__isset.cpuCount = true;
}

void CustomDashboard::__set_nodeCount(const std::string& val) {
  this->nodeCount = val;
__isset.nodeCount = true;
}

void CustomDashboard::__set_queue(const std::string& val) {
  this->queue = val;
__isset.queue = true;
}

void CustomDashboard::__set_inputs(const std::string& val) {
  this->inputs = val;
__isset.inputs = true;
}

void CustomDashboard::__set_outputs(const std::string& val) {
  this->outputs = val;
__isset.outputs = true;
}

void CustomDashboard::__set_storageDir(const std::string& val) {
  this->storageDir = val;
__isset.storageDir = true;
}

void CustomDashboard::__set_errors(const std::string& val) {
  this->errors = val;
__isset.errors = true;
}

uint32_t CustomDashboard::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_airavataInternalUserId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->airavataInternalUserId);
          isset_airavataInternalUserId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->experimentId);
          this->__isset.experimentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->project);
          this->__isset.project = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->owner);
          this->__isset.owner = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->application);
          this->__isset.application = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->computeResource);
          this->__isset.computeResource = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jobName);
          this->__isset.jobName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jobId);
          this->__isset.jobId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jobStatus);
          this->__isset.jobStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jobCreationTime);
          this->__isset.jobCreationTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->notificationsTo);
          this->__isset.notificationsTo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->workingDir);
          this->__isset.workingDir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jobDescription);
          this->__isset.jobDescription = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->creationTime);
          this->__isset.creationTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lastModifiedTime);
          this->__isset.lastModifiedTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->wallTime);
          this->__isset.wallTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cpuCount);
          this->__isset.cpuCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nodeCount);
          this->__isset.nodeCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queue);
          this->__isset.queue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->inputs);
          this->__isset.inputs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->outputs);
          this->__isset.outputs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->storageDir);
          this->__isset.storageDir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errors);
          this->__isset.errors = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_airavataInternalUserId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CustomDashboard::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CustomDashboard");

  xfer += oprot->writeFieldBegin("airavataInternalUserId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->airavataInternalUserId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.experimentId) {
    xfer += oprot->writeFieldBegin("experimentId", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->experimentId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.description) {
    xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->description);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.project) {
    xfer += oprot->writeFieldBegin("project", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->project);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.owner) {
    xfer += oprot->writeFieldBegin("owner", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->owner);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.application) {
    xfer += oprot->writeFieldBegin("application", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->application);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.computeResource) {
    xfer += oprot->writeFieldBegin("computeResource", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->computeResource);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.jobName) {
    xfer += oprot->writeFieldBegin("jobName", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->jobName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.jobId) {
    xfer += oprot->writeFieldBegin("jobId", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->jobId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.jobStatus) {
    xfer += oprot->writeFieldBegin("jobStatus", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->jobStatus);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.jobCreationTime) {
    xfer += oprot->writeFieldBegin("jobCreationTime", ::apache::thrift::protocol::T_STRING, 12);
    xfer += oprot->writeString(this->jobCreationTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.notificationsTo) {
    xfer += oprot->writeFieldBegin("notificationsTo", ::apache::thrift::protocol::T_STRING, 13);
    xfer += oprot->writeString(this->notificationsTo);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.workingDir) {
    xfer += oprot->writeFieldBegin("workingDir", ::apache::thrift::protocol::T_STRING, 14);
    xfer += oprot->writeString(this->workingDir);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.jobDescription) {
    xfer += oprot->writeFieldBegin("jobDescription", ::apache::thrift::protocol::T_STRING, 15);
    xfer += oprot->writeString(this->jobDescription);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.creationTime) {
    xfer += oprot->writeFieldBegin("creationTime", ::apache::thrift::protocol::T_STRING, 16);
    xfer += oprot->writeString(this->creationTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lastModifiedTime) {
    xfer += oprot->writeFieldBegin("lastModifiedTime", ::apache::thrift::protocol::T_STRING, 17);
    xfer += oprot->writeString(this->lastModifiedTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.wallTime) {
    xfer += oprot->writeFieldBegin("wallTime", ::apache::thrift::protocol::T_STRING, 18);
    xfer += oprot->writeString(this->wallTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cpuCount) {
    xfer += oprot->writeFieldBegin("cpuCount", ::apache::thrift::protocol::T_STRING, 19);
    xfer += oprot->writeString(this->cpuCount);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.nodeCount) {
    xfer += oprot->writeFieldBegin("nodeCount", ::apache::thrift::protocol::T_STRING, 20);
    xfer += oprot->writeString(this->nodeCount);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.queue) {
    xfer += oprot->writeFieldBegin("queue", ::apache::thrift::protocol::T_STRING, 21);
    xfer += oprot->writeString(this->queue);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.inputs) {
    xfer += oprot->writeFieldBegin("inputs", ::apache::thrift::protocol::T_STRING, 22);
    xfer += oprot->writeString(this->inputs);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.outputs) {
    xfer += oprot->writeFieldBegin("outputs", ::apache::thrift::protocol::T_STRING, 23);
    xfer += oprot->writeString(this->outputs);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.storageDir) {
    xfer += oprot->writeFieldBegin("storageDir", ::apache::thrift::protocol::T_STRING, 24);
    xfer += oprot->writeString(this->storageDir);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.errors) {
    xfer += oprot->writeFieldBegin("errors", ::apache::thrift::protocol::T_STRING, 25);
    xfer += oprot->writeString(this->errors);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CustomDashboard &a, CustomDashboard &b) {
  using ::std::swap;
  swap(a.airavataInternalUserId, b.airavataInternalUserId);
  swap(a.experimentId, b.experimentId);
  swap(a.name, b.name);
  swap(a.description, b.description);
  swap(a.project, b.project);
  swap(a.owner, b.owner);
  swap(a.application, b.application);
  swap(a.computeResource, b.computeResource);
  swap(a.jobName, b.jobName);
  swap(a.jobId, b.jobId);
  swap(a.jobStatus, b.jobStatus);
  swap(a.jobCreationTime, b.jobCreationTime);
  swap(a.notificationsTo, b.notificationsTo);
  swap(a.workingDir, b.workingDir);
  swap(a.jobDescription, b.jobDescription);
  swap(a.creationTime, b.creationTime);
  swap(a.lastModifiedTime, b.lastModifiedTime);
  swap(a.wallTime, b.wallTime);
  swap(a.cpuCount, b.cpuCount);
  swap(a.nodeCount, b.nodeCount);
  swap(a.queue, b.queue);
  swap(a.inputs, b.inputs);
  swap(a.outputs, b.outputs);
  swap(a.storageDir, b.storageDir);
  swap(a.errors, b.errors);
  swap(a.__isset, b.__isset);
}

CustomDashboard::CustomDashboard(const CustomDashboard& other24) {
  airavataInternalUserId = other24.airavataInternalUserId;
  experimentId = other24.experimentId;
  name = other24.name;
  description = other24.description;
  project = other24.project;
  owner = other24.owner;
  application = other24.application;
  computeResource = other24.computeResource;
  jobName = other24.jobName;
  jobId = other24.jobId;
  jobStatus = other24.jobStatus;
  jobCreationTime = other24.jobCreationTime;
  notificationsTo = other24.notificationsTo;
  workingDir = other24.workingDir;
  jobDescription = other24.jobDescription;
  creationTime = other24.creationTime;
  lastModifiedTime = other24.lastModifiedTime;
  wallTime = other24.wallTime;
  cpuCount = other24.cpuCount;
  nodeCount = other24.nodeCount;
  queue = other24.queue;
  inputs = other24.inputs;
  outputs = other24.outputs;
  storageDir = other24.storageDir;
  errors = other24.errors;
  __isset = other24.__isset;
}
CustomDashboard& CustomDashboard::operator=(const CustomDashboard& other25) {
  airavataInternalUserId = other25.airavataInternalUserId;
  experimentId = other25.experimentId;
  name = other25.name;
  description = other25.description;
  project = other25.project;
  owner = other25.owner;
  application = other25.application;
  computeResource = other25.computeResource;
  jobName = other25.jobName;
  jobId = other25.jobId;
  jobStatus = other25.jobStatus;
  jobCreationTime = other25.jobCreationTime;
  notificationsTo = other25.notificationsTo;
  workingDir = other25.workingDir;
  jobDescription = other25.jobDescription;
  creationTime = other25.creationTime;
  lastModifiedTime = other25.lastModifiedTime;
  wallTime = other25.wallTime;
  cpuCount = other25.cpuCount;
  nodeCount = other25.nodeCount;
  queue = other25.queue;
  inputs = other25.inputs;
  outputs = other25.outputs;
  storageDir = other25.storageDir;
  errors = other25.errors;
  __isset = other25.__isset;
  return *this;
}
void CustomDashboard::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CustomDashboard(";
  out << "airavataInternalUserId=" << to_string(airavataInternalUserId);
  out << ", " << "experimentId="; (__isset.experimentId ? (out << to_string(experimentId)) : (out << "<null>"));
  out << ", " << "name="; (__isset.name ? (out << to_string(name)) : (out << "<null>"));
  out << ", " << "description="; (__isset.description ? (out << to_string(description)) : (out << "<null>"));
  out << ", " << "project="; (__isset.project ? (out << to_string(project)) : (out << "<null>"));
  out << ", " << "owner="; (__isset.owner ? (out << to_string(owner)) : (out << "<null>"));
  out << ", " << "application="; (__isset.application ? (out << to_string(application)) : (out << "<null>"));
  out << ", " << "computeResource="; (__isset.computeResource ? (out << to_string(computeResource)) : (out << "<null>"));
  out << ", " << "jobName="; (__isset.jobName ? (out << to_string(jobName)) : (out << "<null>"));
  out << ", " << "jobId="; (__isset.jobId ? (out << to_string(jobId)) : (out << "<null>"));
  out << ", " << "jobStatus="; (__isset.jobStatus ? (out << to_string(jobStatus)) : (out << "<null>"));
  out << ", " << "jobCreationTime="; (__isset.jobCreationTime ? (out << to_string(jobCreationTime)) : (out << "<null>"));
  out << ", " << "notificationsTo="; (__isset.notificationsTo ? (out << to_string(notificationsTo)) : (out << "<null>"));
  out << ", " << "workingDir="; (__isset.workingDir ? (out << to_string(workingDir)) : (out << "<null>"));
  out << ", " << "jobDescription="; (__isset.jobDescription ? (out << to_string(jobDescription)) : (out << "<null>"));
  out << ", " << "creationTime="; (__isset.creationTime ? (out << to_string(creationTime)) : (out << "<null>"));
  out << ", " << "lastModifiedTime="; (__isset.lastModifiedTime ? (out << to_string(lastModifiedTime)) : (out << "<null>"));
  out << ", " << "wallTime="; (__isset.wallTime ? (out << to_string(wallTime)) : (out << "<null>"));
  out << ", " << "cpuCount="; (__isset.cpuCount ? (out << to_string(cpuCount)) : (out << "<null>"));
  out << ", " << "nodeCount="; (__isset.nodeCount ? (out << to_string(nodeCount)) : (out << "<null>"));
  out << ", " << "queue="; (__isset.queue ? (out << to_string(queue)) : (out << "<null>"));
  out << ", " << "inputs="; (__isset.inputs ? (out << to_string(inputs)) : (out << "<null>"));
  out << ", " << "outputs="; (__isset.outputs ? (out << to_string(outputs)) : (out << "<null>"));
  out << ", " << "storageDir="; (__isset.storageDir ? (out << to_string(storageDir)) : (out << "<null>"));
  out << ", " << "errors="; (__isset.errors ? (out << to_string(errors)) : (out << "<null>"));
  out << ")";
}


UserProfile::~UserProfile() throw() {
}


void UserProfile::__set_userModelVersion(const std::string& val) {
  this->userModelVersion = val;
}

void UserProfile::__set_airavataInternalUserId(const std::string& val) {
  this->airavataInternalUserId = val;
}

void UserProfile::__set_userId(const std::string& val) {
  this->userId = val;
}

void UserProfile::__set_gatewayId(const std::string& val) {
  this->gatewayId = val;
}

void UserProfile::__set_emails(const std::vector<std::string> & val) {
  this->emails = val;
}

void UserProfile::__set_firstName(const std::string& val) {
  this->firstName = val;
}

void UserProfile::__set_lastName(const std::string& val) {
  this->lastName = val;
}

void UserProfile::__set_middleName(const std::string& val) {
  this->middleName = val;
__isset.middleName = true;
}

void UserProfile::__set_namePrefix(const std::string& val) {
  this->namePrefix = val;
__isset.namePrefix = true;
}

void UserProfile::__set_nameSuffix(const std::string& val) {
  this->nameSuffix = val;
__isset.nameSuffix = true;
}

void UserProfile::__set_orcidId(const std::string& val) {
  this->orcidId = val;
__isset.orcidId = true;
}

void UserProfile::__set_phones(const std::vector<std::string> & val) {
  this->phones = val;
__isset.phones = true;
}

void UserProfile::__set_country(const std::string& val) {
  this->country = val;
__isset.country = true;
}

void UserProfile::__set_nationality(const std::vector<std::string> & val) {
  this->nationality = val;
__isset.nationality = true;
}

void UserProfile::__set_homeOrganization(const std::string& val) {
  this->homeOrganization = val;
__isset.homeOrganization = true;
}

void UserProfile::__set_orginationAffiliation(const std::string& val) {
  this->orginationAffiliation = val;
__isset.orginationAffiliation = true;
}

void UserProfile::__set_creationTime(const int64_t val) {
  this->creationTime = val;
}

void UserProfile::__set_lastAccessTime(const int64_t val) {
  this->lastAccessTime = val;
}

void UserProfile::__set_validUntil(const int64_t val) {
  this->validUntil = val;
}

void UserProfile::__set_State(const Status::type val) {
  this->State = val;
}

void UserProfile::__set_comments(const std::string& val) {
  this->comments = val;
__isset.comments = true;
}

void UserProfile::__set_labeledURI(const std::vector<std::string> & val) {
  this->labeledURI = val;
__isset.labeledURI = true;
}

void UserProfile::__set_gpgKey(const std::string& val) {
  this->gpgKey = val;
__isset.gpgKey = true;
}

void UserProfile::__set_timeZone(const std::string& val) {
  this->timeZone = val;
__isset.timeZone = true;
}

void UserProfile::__set_nsfDemographics(const NSFDemographics& val) {
  this->nsfDemographics = val;
__isset.nsfDemographics = true;
}

void UserProfile::__set_customDashboard(const CustomDashboard& val) {
  this->customDashboard = val;
__isset.customDashboard = true;
}

uint32_t UserProfile::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_userModelVersion = false;
  bool isset_airavataInternalUserId = false;
  bool isset_userId = false;
  bool isset_gatewayId = false;
  bool isset_emails = false;
  bool isset_firstName = false;
  bool isset_lastName = false;
  bool isset_creationTime = false;
  bool isset_lastAccessTime = false;
  bool isset_validUntil = false;
  bool isset_State = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userModelVersion);
          isset_userModelVersion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->airavataInternalUserId);
          isset_airavataInternalUserId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userId);
          isset_userId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gatewayId);
          isset_gatewayId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->emails.clear();
            uint32_t _size26;
            ::apache::thrift::protocol::TType _etype29;
            xfer += iprot->readListBegin(_etype29, _size26);
            this->emails.resize(_size26);
            uint32_t _i30;
            for (_i30 = 0; _i30 < _size26; ++_i30)
            {
              xfer += iprot->readString(this->emails[_i30]);
            }
            xfer += iprot->readListEnd();
          }
          isset_emails = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->firstName);
          isset_firstName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lastName);
          isset_lastName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->middleName);
          this->__isset.middleName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->namePrefix);
          this->__isset.namePrefix = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nameSuffix);
          this->__isset.nameSuffix = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->orcidId);
          this->__isset.orcidId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->phones.clear();
            uint32_t _size31;
            ::apache::thrift::protocol::TType _etype34;
            xfer += iprot->readListBegin(_etype34, _size31);
            this->phones.resize(_size31);
            uint32_t _i35;
            for (_i35 = 0; _i35 < _size31; ++_i35)
            {
              xfer += iprot->readString(this->phones[_i35]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.phones = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->country);
          this->__isset.country = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->nationality.clear();
            uint32_t _size36;
            ::apache::thrift::protocol::TType _etype39;
            xfer += iprot->readListBegin(_etype39, _size36);
            this->nationality.resize(_size36);
            uint32_t _i40;
            for (_i40 = 0; _i40 < _size36; ++_i40)
            {
              xfer += iprot->readString(this->nationality[_i40]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.nationality = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->homeOrganization);
          this->__isset.homeOrganization = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->orginationAffiliation);
          this->__isset.orginationAffiliation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->creationTime);
          isset_creationTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastAccessTime);
          isset_lastAccessTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->validUntil);
          isset_validUntil = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast41;
          xfer += iprot->readI32(ecast41);
          this->State = (Status::type)ecast41;
          isset_State = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comments);
          this->__isset.comments = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->labeledURI.clear();
            uint32_t _size42;
            ::apache::thrift::protocol::TType _etype45;
            xfer += iprot->readListBegin(_etype45, _size42);
            this->labeledURI.resize(_size42);
            uint32_t _i46;
            for (_i46 = 0; _i46 < _size42; ++_i46)
            {
              xfer += iprot->readString(this->labeledURI[_i46]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.labeledURI = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gpgKey);
          this->__isset.gpgKey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->timeZone);
          this->__isset.timeZone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->nsfDemographics.read(iprot);
          this->__isset.nsfDemographics = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->customDashboard.read(iprot);
          this->__isset.customDashboard = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_userModelVersion)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_airavataInternalUserId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_userId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_gatewayId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_emails)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_firstName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_lastName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_creationTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_lastAccessTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_validUntil)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_State)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t UserProfile::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UserProfile");

  xfer += oprot->writeFieldBegin("userModelVersion", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->userModelVersion);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("airavataInternalUserId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->airavataInternalUserId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->userId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gatewayId", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->gatewayId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("emails", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->emails.size()));
    std::vector<std::string> ::const_iterator _iter47;
    for (_iter47 = this->emails.begin(); _iter47 != this->emails.end(); ++_iter47)
    {
      xfer += oprot->writeString((*_iter47));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("firstName", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->firstName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastName", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->lastName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.middleName) {
    xfer += oprot->writeFieldBegin("middleName", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->middleName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.namePrefix) {
    xfer += oprot->writeFieldBegin("namePrefix", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->namePrefix);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.nameSuffix) {
    xfer += oprot->writeFieldBegin("nameSuffix", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->nameSuffix);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.orcidId) {
    xfer += oprot->writeFieldBegin("orcidId", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->orcidId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.phones) {
    xfer += oprot->writeFieldBegin("phones", ::apache::thrift::protocol::T_LIST, 12);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->phones.size()));
      std::vector<std::string> ::const_iterator _iter48;
      for (_iter48 = this->phones.begin(); _iter48 != this->phones.end(); ++_iter48)
      {
        xfer += oprot->writeString((*_iter48));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.country) {
    xfer += oprot->writeFieldBegin("country", ::apache::thrift::protocol::T_STRING, 13);
    xfer += oprot->writeString(this->country);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.nationality) {
    xfer += oprot->writeFieldBegin("nationality", ::apache::thrift::protocol::T_LIST, 14);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->nationality.size()));
      std::vector<std::string> ::const_iterator _iter49;
      for (_iter49 = this->nationality.begin(); _iter49 != this->nationality.end(); ++_iter49)
      {
        xfer += oprot->writeString((*_iter49));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.homeOrganization) {
    xfer += oprot->writeFieldBegin("homeOrganization", ::apache::thrift::protocol::T_STRING, 15);
    xfer += oprot->writeString(this->homeOrganization);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.orginationAffiliation) {
    xfer += oprot->writeFieldBegin("orginationAffiliation", ::apache::thrift::protocol::T_STRING, 16);
    xfer += oprot->writeString(this->orginationAffiliation);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("creationTime", ::apache::thrift::protocol::T_I64, 17);
  xfer += oprot->writeI64(this->creationTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastAccessTime", ::apache::thrift::protocol::T_I64, 18);
  xfer += oprot->writeI64(this->lastAccessTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("validUntil", ::apache::thrift::protocol::T_I64, 19);
  xfer += oprot->writeI64(this->validUntil);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("State", ::apache::thrift::protocol::T_I32, 20);
  xfer += oprot->writeI32((int32_t)this->State);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.comments) {
    xfer += oprot->writeFieldBegin("comments", ::apache::thrift::protocol::T_STRING, 21);
    xfer += oprot->writeString(this->comments);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.labeledURI) {
    xfer += oprot->writeFieldBegin("labeledURI", ::apache::thrift::protocol::T_LIST, 22);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->labeledURI.size()));
      std::vector<std::string> ::const_iterator _iter50;
      for (_iter50 = this->labeledURI.begin(); _iter50 != this->labeledURI.end(); ++_iter50)
      {
        xfer += oprot->writeString((*_iter50));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.gpgKey) {
    xfer += oprot->writeFieldBegin("gpgKey", ::apache::thrift::protocol::T_STRING, 23);
    xfer += oprot->writeString(this->gpgKey);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.timeZone) {
    xfer += oprot->writeFieldBegin("timeZone", ::apache::thrift::protocol::T_STRING, 24);
    xfer += oprot->writeString(this->timeZone);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.nsfDemographics) {
    xfer += oprot->writeFieldBegin("nsfDemographics", ::apache::thrift::protocol::T_STRUCT, 25);
    xfer += this->nsfDemographics.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.customDashboard) {
    xfer += oprot->writeFieldBegin("customDashboard", ::apache::thrift::protocol::T_STRUCT, 26);
    xfer += this->customDashboard.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UserProfile &a, UserProfile &b) {
  using ::std::swap;
  swap(a.userModelVersion, b.userModelVersion);
  swap(a.airavataInternalUserId, b.airavataInternalUserId);
  swap(a.userId, b.userId);
  swap(a.gatewayId, b.gatewayId);
  swap(a.emails, b.emails);
  swap(a.firstName, b.firstName);
  swap(a.lastName, b.lastName);
  swap(a.middleName, b.middleName);
  swap(a.namePrefix, b.namePrefix);
  swap(a.nameSuffix, b.nameSuffix);
  swap(a.orcidId, b.orcidId);
  swap(a.phones, b.phones);
  swap(a.country, b.country);
  swap(a.nationality, b.nationality);
  swap(a.homeOrganization, b.homeOrganization);
  swap(a.orginationAffiliation, b.orginationAffiliation);
  swap(a.creationTime, b.creationTime);
  swap(a.lastAccessTime, b.lastAccessTime);
  swap(a.validUntil, b.validUntil);
  swap(a.State, b.State);
  swap(a.comments, b.comments);
  swap(a.labeledURI, b.labeledURI);
  swap(a.gpgKey, b.gpgKey);
  swap(a.timeZone, b.timeZone);
  swap(a.nsfDemographics, b.nsfDemographics);
  swap(a.customDashboard, b.customDashboard);
  swap(a.__isset, b.__isset);
}

UserProfile::UserProfile(const UserProfile& other51) {
  userModelVersion = other51.userModelVersion;
  airavataInternalUserId = other51.airavataInternalUserId;
  userId = other51.userId;
  gatewayId = other51.gatewayId;
  emails = other51.emails;
  firstName = other51.firstName;
  lastName = other51.lastName;
  middleName = other51.middleName;
  namePrefix = other51.namePrefix;
  nameSuffix = other51.nameSuffix;
  orcidId = other51.orcidId;
  phones = other51.phones;
  country = other51.country;
  nationality = other51.nationality;
  homeOrganization = other51.homeOrganization;
  orginationAffiliation = other51.orginationAffiliation;
  creationTime = other51.creationTime;
  lastAccessTime = other51.lastAccessTime;
  validUntil = other51.validUntil;
  State = other51.State;
  comments = other51.comments;
  labeledURI = other51.labeledURI;
  gpgKey = other51.gpgKey;
  timeZone = other51.timeZone;
  nsfDemographics = other51.nsfDemographics;
  customDashboard = other51.customDashboard;
  __isset = other51.__isset;
}
UserProfile& UserProfile::operator=(const UserProfile& other52) {
  userModelVersion = other52.userModelVersion;
  airavataInternalUserId = other52.airavataInternalUserId;
  userId = other52.userId;
  gatewayId = other52.gatewayId;
  emails = other52.emails;
  firstName = other52.firstName;
  lastName = other52.lastName;
  middleName = other52.middleName;
  namePrefix = other52.namePrefix;
  nameSuffix = other52.nameSuffix;
  orcidId = other52.orcidId;
  phones = other52.phones;
  country = other52.country;
  nationality = other52.nationality;
  homeOrganization = other52.homeOrganization;
  orginationAffiliation = other52.orginationAffiliation;
  creationTime = other52.creationTime;
  lastAccessTime = other52.lastAccessTime;
  validUntil = other52.validUntil;
  State = other52.State;
  comments = other52.comments;
  labeledURI = other52.labeledURI;
  gpgKey = other52.gpgKey;
  timeZone = other52.timeZone;
  nsfDemographics = other52.nsfDemographics;
  customDashboard = other52.customDashboard;
  __isset = other52.__isset;
  return *this;
}
void UserProfile::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UserProfile(";
  out << "userModelVersion=" << to_string(userModelVersion);
  out << ", " << "airavataInternalUserId=" << to_string(airavataInternalUserId);
  out << ", " << "userId=" << to_string(userId);
  out << ", " << "gatewayId=" << to_string(gatewayId);
  out << ", " << "emails=" << to_string(emails);
  out << ", " << "firstName=" << to_string(firstName);
  out << ", " << "lastName=" << to_string(lastName);
  out << ", " << "middleName="; (__isset.middleName ? (out << to_string(middleName)) : (out << "<null>"));
  out << ", " << "namePrefix="; (__isset.namePrefix ? (out << to_string(namePrefix)) : (out << "<null>"));
  out << ", " << "nameSuffix="; (__isset.nameSuffix ? (out << to_string(nameSuffix)) : (out << "<null>"));
  out << ", " << "orcidId="; (__isset.orcidId ? (out << to_string(orcidId)) : (out << "<null>"));
  out << ", " << "phones="; (__isset.phones ? (out << to_string(phones)) : (out << "<null>"));
  out << ", " << "country="; (__isset.country ? (out << to_string(country)) : (out << "<null>"));
  out << ", " << "nationality="; (__isset.nationality ? (out << to_string(nationality)) : (out << "<null>"));
  out << ", " << "homeOrganization="; (__isset.homeOrganization ? (out << to_string(homeOrganization)) : (out << "<null>"));
  out << ", " << "orginationAffiliation="; (__isset.orginationAffiliation ? (out << to_string(orginationAffiliation)) : (out << "<null>"));
  out << ", " << "creationTime=" << to_string(creationTime);
  out << ", " << "lastAccessTime=" << to_string(lastAccessTime);
  out << ", " << "validUntil=" << to_string(validUntil);
  out << ", " << "State=" << to_string(State);
  out << ", " << "comments="; (__isset.comments ? (out << to_string(comments)) : (out << "<null>"));
  out << ", " << "labeledURI="; (__isset.labeledURI ? (out << to_string(labeledURI)) : (out << "<null>"));
  out << ", " << "gpgKey="; (__isset.gpgKey ? (out << to_string(gpgKey)) : (out << "<null>"));
  out << ", " << "timeZone="; (__isset.timeZone ? (out << to_string(timeZone)) : (out << "<null>"));
  out << ", " << "nsfDemographics="; (__isset.nsfDemographics ? (out << to_string(nsfDemographics)) : (out << "<null>"));
  out << ", " << "customDashboard="; (__isset.customDashboard ? (out << to_string(customDashboard)) : (out << "<null>"));
  out << ")";
}

}}}} // namespace
