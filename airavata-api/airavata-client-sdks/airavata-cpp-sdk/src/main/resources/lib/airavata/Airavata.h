/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Airavata_H
#define Airavata_H

#include <thrift/TDispatchProcessor.h>
#include "airavataAPI_types.h"

namespace apache { namespace airavata { namespace api {

class AiravataIf {
 public:
  virtual ~AiravataIf() {}
  virtual void getAPIVersion(std::string& _return) = 0;
  virtual void addGateway(std::string& _return, const  ::apache::airavata::model::workspace::Gateway& gateway) = 0;
  virtual void updateGateway(const std::string& gatewayId, const  ::apache::airavata::model::workspace::Gateway& updatedGateway) = 0;
  virtual void getGateway( ::apache::airavata::model::workspace::Gateway& _return, const std::string& gatewayId) = 0;
  virtual bool deleteGateway(const std::string& gatewayId) = 0;
  virtual void getAllGateways(std::vector< ::apache::airavata::model::workspace::Gateway> & _return) = 0;
  virtual bool isGatewayExist(const std::string& gatewayId) = 0;
  virtual void generateAndRegisterSSHKeys(std::string& _return, const std::string& gatewayId, const std::string& userName) = 0;
  virtual void getSSHPubKey(std::string& _return, const std::string& airavataCredStoreToken) = 0;
  virtual void getAllUserSSHPubKeys(std::map<std::string, std::string> & _return, const std::string& userName) = 0;
  virtual void createProject(std::string& _return, const std::string& gatewayId, const  ::apache::airavata::model::workspace::Project& project) = 0;
  virtual void updateProject(const std::string& projectId, const  ::apache::airavata::model::workspace::Project& updatedProject) = 0;
  virtual void getProject( ::apache::airavata::model::workspace::Project& _return, const std::string& projectId) = 0;
  virtual bool deleteProject(const std::string& projectId) = 0;
  virtual void getAllUserProjects(std::vector< ::apache::airavata::model::workspace::Project> & _return, const std::string& gatewayId, const std::string& userName) = 0;
  virtual void getAllUserProjectsWithPagination(std::vector< ::apache::airavata::model::workspace::Project> & _return, const std::string& gatewayId, const std::string& userName, const int32_t limit, const int32_t offset) = 0;
  virtual void searchProjectsByProjectName(std::vector< ::apache::airavata::model::workspace::Project> & _return, const std::string& gatewayId, const std::string& userName, const std::string& projectName) = 0;
  virtual void searchProjectsByProjectNameWithPagination(std::vector< ::apache::airavata::model::workspace::Project> & _return, const std::string& gatewayId, const std::string& userName, const std::string& projectName, const int32_t limit, const int32_t offset) = 0;
  virtual void searchProjectsByProjectDesc(std::vector< ::apache::airavata::model::workspace::Project> & _return, const std::string& gatewayId, const std::string& userName, const std::string& description) = 0;
  virtual void searchProjectsByProjectDescWithPagination(std::vector< ::apache::airavata::model::workspace::Project> & _return, const std::string& gatewayId, const std::string& userName, const std::string& description, const int32_t limit, const int32_t offset) = 0;
  virtual void searchExperimentsByName(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & _return, const std::string& gatewayId, const std::string& userName, const std::string& expName) = 0;
  virtual void searchExperimentsByNameWithPagination(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & _return, const std::string& gatewayId, const std::string& userName, const std::string& expName, const int32_t limit, const int32_t offset) = 0;
  virtual void searchExperimentsByDesc(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & _return, const std::string& gatewayId, const std::string& userName, const std::string& description) = 0;
  virtual void searchExperimentsByDescWithPagination(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & _return, const std::string& gatewayId, const std::string& userName, const std::string& description, const int32_t limit, const int32_t offset) = 0;
  virtual void searchExperimentsByApplication(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & _return, const std::string& gatewayId, const std::string& userName, const std::string& applicationId) = 0;
  virtual void searchExperimentsByApplicationWithPagination(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & _return, const std::string& gatewayId, const std::string& userName, const std::string& applicationId, const int32_t limit, const int32_t offset) = 0;
  virtual void searchExperimentsByStatus(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & _return, const std::string& gatewayId, const std::string& userName, const  ::apache::airavata::model::workspace::experiment::ExperimentState::type experimentState) = 0;
  virtual void searchExperimentsByStatusWithPagination(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & _return, const std::string& gatewayId, const std::string& userName, const  ::apache::airavata::model::workspace::experiment::ExperimentState::type experimentState, const int32_t limit, const int32_t offset) = 0;
  virtual void searchExperimentsByCreationTime(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & _return, const std::string& gatewayId, const std::string& userName, const int64_t fromTime, const int64_t toTime) = 0;
  virtual void searchExperimentsByCreationTimeWithPagination(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & _return, const std::string& gatewayId, const std::string& userName, const int64_t fromTime, const int64_t toTime, const int32_t limit, const int32_t offset) = 0;
  virtual void getAllExperimentsInProject(std::vector< ::apache::airavata::model::workspace::experiment::Experiment> & _return, const std::string& projectId) = 0;
  virtual void getAllExperimentsInProjectWithPagination(std::vector< ::apache::airavata::model::workspace::experiment::Experiment> & _return, const std::string& projectId, const int32_t limit, const int32_t offset) = 0;
  virtual void getAllUserExperiments(std::vector< ::apache::airavata::model::workspace::experiment::Experiment> & _return, const std::string& gatewayId, const std::string& userName) = 0;
  virtual void getAllUserExperimentsWithPagination(std::vector< ::apache::airavata::model::workspace::experiment::Experiment> & _return, const std::string& gatewayId, const std::string& userName, const int32_t limit, const int32_t offset) = 0;
  virtual void createExperiment(std::string& _return, const std::string& gatewayId, const  ::apache::airavata::model::workspace::experiment::Experiment& experiment) = 0;
  virtual void getExperiment( ::apache::airavata::model::workspace::experiment::Experiment& _return, const std::string& airavataExperimentId) = 0;
  virtual void updateExperiment(const std::string& airavataExperimentId, const  ::apache::airavata::model::workspace::experiment::Experiment& experiment) = 0;
  virtual void updateExperimentConfiguration(const std::string& airavataExperimentId, const  ::apache::airavata::model::workspace::experiment::UserConfigurationData& userConfiguration) = 0;
  virtual void updateResourceScheduleing(const std::string& airavataExperimentId, const  ::apache::airavata::model::workspace::experiment::ComputationalResourceScheduling& resourceScheduling) = 0;
  virtual bool validateExperiment(const std::string& airavataExperimentId) = 0;
  virtual void launchExperiment(const std::string& airavataExperimentId, const std::string& airavataCredStoreToken) = 0;
  virtual void getExperimentStatus( ::apache::airavata::model::workspace::experiment::ExperimentStatus& _return, const std::string& airavataExperimentId) = 0;
  virtual void getExperimentOutputs(std::vector< ::apache::airavata::model::appcatalog::appinterface::OutputDataObjectType> & _return, const std::string& airavataExperimentId) = 0;
  virtual void getIntermediateOutputs(std::vector< ::apache::airavata::model::appcatalog::appinterface::OutputDataObjectType> & _return, const std::string& airavataExperimentId) = 0;
  virtual void getJobStatuses(std::map<std::string,  ::apache::airavata::model::workspace::experiment::JobStatus> & _return, const std::string& airavataExperimentId) = 0;
  virtual void getJobDetails(std::vector< ::apache::airavata::model::workspace::experiment::JobDetails> & _return, const std::string& airavataExperimentId) = 0;
  virtual void getDataTransferDetails(std::vector< ::apache::airavata::model::workspace::experiment::DataTransferDetails> & _return, const std::string& airavataExperimentId) = 0;
  virtual void cloneExperiment(std::string& _return, const std::string& existingExperimentID, const std::string& newExperimentName) = 0;
  virtual void terminateExperiment(const std::string& airavataExperimentId, const std::string& tokenId) = 0;
  virtual void registerApplicationModule(std::string& _return, const std::string& gatewayId, const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule& applicationModule) = 0;
  virtual void getApplicationModule( ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule& _return, const std::string& appModuleId) = 0;
  virtual bool updateApplicationModule(const std::string& appModuleId, const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule& applicationModule) = 0;
  virtual void getAllAppModules(std::vector< ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule> & _return, const std::string& gatewayId) = 0;
  virtual bool deleteApplicationModule(const std::string& appModuleId) = 0;
  virtual void registerApplicationDeployment(std::string& _return, const std::string& gatewayId, const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription& applicationDeployment) = 0;
  virtual void getApplicationDeployment( ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription& _return, const std::string& appDeploymentId) = 0;
  virtual bool updateApplicationDeployment(const std::string& appDeploymentId, const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription& applicationDeployment) = 0;
  virtual bool deleteApplicationDeployment(const std::string& appDeploymentId) = 0;
  virtual void getAllApplicationDeployments(std::vector< ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription> & _return, const std::string& gatewayId) = 0;
  virtual void getAppModuleDeployedResources(std::vector<std::string> & _return, const std::string& appModuleId) = 0;
  virtual void registerApplicationInterface(std::string& _return, const std::string& gatewayId, const  ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription& applicationInterface) = 0;
  virtual void getApplicationInterface( ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription& _return, const std::string& appInterfaceId) = 0;
  virtual bool updateApplicationInterface(const std::string& appInterfaceId, const  ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription& applicationInterface) = 0;
  virtual bool deleteApplicationInterface(const std::string& appInterfaceId) = 0;
  virtual void getAllApplicationInterfaceNames(std::map<std::string, std::string> & _return, const std::string& gatewayId) = 0;
  virtual void getAllApplicationInterfaces(std::vector< ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription> & _return, const std::string& gatewayId) = 0;
  virtual void getApplicationInputs(std::vector< ::apache::airavata::model::appcatalog::appinterface::InputDataObjectType> & _return, const std::string& appInterfaceId) = 0;
  virtual void getApplicationOutputs(std::vector< ::apache::airavata::model::appcatalog::appinterface::OutputDataObjectType> & _return, const std::string& appInterfaceId) = 0;
  virtual void getAvailableAppInterfaceComputeResources(std::map<std::string, std::string> & _return, const std::string& appInterfaceId) = 0;
  virtual void registerComputeResource(std::string& _return, const  ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription& computeResourceDescription) = 0;
  virtual void getComputeResource( ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription& _return, const std::string& computeResourceId) = 0;
  virtual void getAllComputeResourceNames(std::map<std::string, std::string> & _return) = 0;
  virtual bool updateComputeResource(const std::string& computeResourceId, const  ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription& computeResourceDescription) = 0;
  virtual bool deleteComputeResource(const std::string& computeResourceId) = 0;
  virtual void addLocalSubmissionDetails(std::string& _return, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission& localSubmission) = 0;
  virtual bool updateLocalSubmissionDetails(const std::string& jobSubmissionInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission& localSubmission) = 0;
  virtual void getLocalJobSubmission( ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission& _return, const std::string& jobSubmissionId) = 0;
  virtual void addSSHJobSubmissionDetails(std::string& _return, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission& sshJobSubmission) = 0;
  virtual void getSSHJobSubmission( ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission& _return, const std::string& jobSubmissionId) = 0;
  virtual void addUNICOREJobSubmissionDetails(std::string& _return, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission& unicoreJobSubmission) = 0;
  virtual void getUnicoreJobSubmission( ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission& _return, const std::string& jobSubmissionId) = 0;
  virtual void addCloudJobSubmissionDetails(std::string& _return, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission& cloudSubmission) = 0;
  virtual void getCloudJobSubmission( ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission& _return, const std::string& jobSubmissionId) = 0;
  virtual bool updateSSHJobSubmissionDetails(const std::string& jobSubmissionInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission& sshJobSubmission) = 0;
  virtual bool updateCloudJobSubmissionDetails(const std::string& jobSubmissionInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission& sshJobSubmission) = 0;
  virtual bool updateUnicoreJobSubmissionDetails(const std::string& jobSubmissionInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission& unicoreJobSubmission) = 0;
  virtual void addLocalDataMovementDetails(std::string& _return, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement& localDataMovement) = 0;
  virtual bool updateLocalDataMovementDetails(const std::string& dataMovementInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement& localDataMovement) = 0;
  virtual void getLocalDataMovement( ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement& _return, const std::string& dataMovementId) = 0;
  virtual void addSCPDataMovementDetails(std::string& _return, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement& scpDataMovement) = 0;
  virtual bool updateSCPDataMovementDetails(const std::string& dataMovementInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement& scpDataMovement) = 0;
  virtual void getSCPDataMovement( ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement& _return, const std::string& dataMovementId) = 0;
  virtual void addUnicoreDataMovementDetails(std::string& _return, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement& unicoreDataMovement) = 0;
  virtual bool updateUnicoreDataMovementDetails(const std::string& dataMovementInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement& unicoreDataMovement) = 0;
  virtual void getUnicoreDataMovement( ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement& _return, const std::string& dataMovementId) = 0;
  virtual void addGridFTPDataMovementDetails(std::string& _return, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement& gridFTPDataMovement) = 0;
  virtual bool updateGridFTPDataMovementDetails(const std::string& dataMovementInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement& gridFTPDataMovement) = 0;
  virtual void getGridFTPDataMovement( ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement& _return, const std::string& dataMovementId) = 0;
  virtual bool changeJobSubmissionPriority(const std::string& jobSubmissionInterfaceId, const int32_t newPriorityOrder) = 0;
  virtual bool changeDataMovementPriority(const std::string& dataMovementInterfaceId, const int32_t newPriorityOrder) = 0;
  virtual bool changeJobSubmissionPriorities(const std::map<std::string, int32_t> & jobSubmissionPriorityMap) = 0;
  virtual bool changeDataMovementPriorities(const std::map<std::string, int32_t> & dataMovementPriorityMap) = 0;
  virtual bool deleteJobSubmissionInterface(const std::string& computeResourceId, const std::string& jobSubmissionInterfaceId) = 0;
  virtual bool deleteDataMovementInterface(const std::string& computeResourceId, const std::string& dataMovementInterfaceId) = 0;
  virtual void registerResourceJobManager(std::string& _return, const  ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager& resourceJobManager) = 0;
  virtual bool updateResourceJobManager(const std::string& resourceJobManagerId, const  ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager& updatedResourceJobManager) = 0;
  virtual void getResourceJobManager( ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager& _return, const std::string& resourceJobManagerId) = 0;
  virtual bool deleteResourceJobManager(const std::string& resourceJobManagerId) = 0;
  virtual bool deleteBatchQueue(const std::string& computeResourceId, const std::string& queueName) = 0;
  virtual void registerGatewayResourceProfile(std::string& _return, const  ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile& gatewayResourceProfile) = 0;
  virtual void getGatewayResourceProfile( ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile& _return, const std::string& gatewayID) = 0;
  virtual bool updateGatewayResourceProfile(const std::string& gatewayID, const  ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile& gatewayResourceProfile) = 0;
  virtual bool deleteGatewayResourceProfile(const std::string& gatewayID) = 0;
  virtual bool addGatewayComputeResourcePreference(const std::string& gatewayID, const std::string& computeResourceId, const  ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference& computeResourcePreference) = 0;
  virtual void getGatewayComputeResourcePreference( ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference& _return, const std::string& gatewayID, const std::string& computeResourceId) = 0;
  virtual void getAllGatewayComputeResourcePreferences(std::vector< ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference> & _return, const std::string& gatewayID) = 0;
  virtual void getAllGatewayComputeResources(std::vector< ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile> & _return) = 0;
  virtual bool updateGatewayComputeResourcePreference(const std::string& gatewayID, const std::string& computeResourceId, const  ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference& computeResourcePreference) = 0;
  virtual bool deleteGatewayComputeResourcePreference(const std::string& gatewayID, const std::string& computeResourceId) = 0;
  virtual void getAllWorkflows(std::vector<std::string> & _return, const std::string& gatewayId) = 0;
  virtual void getWorkflow( ::Workflow& _return, const std::string& workflowTemplateId) = 0;
  virtual void deleteWorkflow(const std::string& workflowTemplateId) = 0;
  virtual void registerWorkflow(std::string& _return, const std::string& gatewayId, const  ::Workflow& workflow) = 0;
  virtual void updateWorkflow(const std::string& workflowTemplateId, const  ::Workflow& workflow) = 0;
  virtual void getWorkflowTemplateId(std::string& _return, const std::string& workflowName) = 0;
  virtual bool isWorkflowExistWithName(const std::string& workflowName) = 0;
};

class AiravataIfFactory {
 public:
  typedef AiravataIf Handler;

  virtual ~AiravataIfFactory() {}

  virtual AiravataIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AiravataIf* /* handler */) = 0;
};

class AiravataIfSingletonFactory : virtual public AiravataIfFactory {
 public:
  AiravataIfSingletonFactory(const boost::shared_ptr<AiravataIf>& iface) : iface_(iface) {}
  virtual ~AiravataIfSingletonFactory() {}

  virtual AiravataIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AiravataIf* /* handler */) {}

 protected:
  boost::shared_ptr<AiravataIf> iface_;
};

class AiravataNull : virtual public AiravataIf {
 public:
  virtual ~AiravataNull() {}
  void getAPIVersion(std::string& /* _return */) {
    return;
  }
  void addGateway(std::string& /* _return */, const  ::apache::airavata::model::workspace::Gateway& /* gateway */) {
    return;
  }
  void updateGateway(const std::string& /* gatewayId */, const  ::apache::airavata::model::workspace::Gateway& /* updatedGateway */) {
    return;
  }
  void getGateway( ::apache::airavata::model::workspace::Gateway& /* _return */, const std::string& /* gatewayId */) {
    return;
  }
  bool deleteGateway(const std::string& /* gatewayId */) {
    bool _return = false;
    return _return;
  }
  void getAllGateways(std::vector< ::apache::airavata::model::workspace::Gateway> & /* _return */) {
    return;
  }
  bool isGatewayExist(const std::string& /* gatewayId */) {
    bool _return = false;
    return _return;
  }
  void generateAndRegisterSSHKeys(std::string& /* _return */, const std::string& /* gatewayId */, const std::string& /* userName */) {
    return;
  }
  void getSSHPubKey(std::string& /* _return */, const std::string& /* airavataCredStoreToken */) {
    return;
  }
  void getAllUserSSHPubKeys(std::map<std::string, std::string> & /* _return */, const std::string& /* userName */) {
    return;
  }
  void createProject(std::string& /* _return */, const std::string& /* gatewayId */, const  ::apache::airavata::model::workspace::Project& /* project */) {
    return;
  }
  void updateProject(const std::string& /* projectId */, const  ::apache::airavata::model::workspace::Project& /* updatedProject */) {
    return;
  }
  void getProject( ::apache::airavata::model::workspace::Project& /* _return */, const std::string& /* projectId */) {
    return;
  }
  bool deleteProject(const std::string& /* projectId */) {
    bool _return = false;
    return _return;
  }
  void getAllUserProjects(std::vector< ::apache::airavata::model::workspace::Project> & /* _return */, const std::string& /* gatewayId */, const std::string& /* userName */) {
    return;
  }
  void getAllUserProjectsWithPagination(std::vector< ::apache::airavata::model::workspace::Project> & /* _return */, const std::string& /* gatewayId */, const std::string& /* userName */, const int32_t /* limit */, const int32_t /* offset */) {
    return;
  }
  void searchProjectsByProjectName(std::vector< ::apache::airavata::model::workspace::Project> & /* _return */, const std::string& /* gatewayId */, const std::string& /* userName */, const std::string& /* projectName */) {
    return;
  }
  void searchProjectsByProjectNameWithPagination(std::vector< ::apache::airavata::model::workspace::Project> & /* _return */, const std::string& /* gatewayId */, const std::string& /* userName */, const std::string& /* projectName */, const int32_t /* limit */, const int32_t /* offset */) {
    return;
  }
  void searchProjectsByProjectDesc(std::vector< ::apache::airavata::model::workspace::Project> & /* _return */, const std::string& /* gatewayId */, const std::string& /* userName */, const std::string& /* description */) {
    return;
  }
  void searchProjectsByProjectDescWithPagination(std::vector< ::apache::airavata::model::workspace::Project> & /* _return */, const std::string& /* gatewayId */, const std::string& /* userName */, const std::string& /* description */, const int32_t /* limit */, const int32_t /* offset */) {
    return;
  }
  void searchExperimentsByName(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & /* _return */, const std::string& /* gatewayId */, const std::string& /* userName */, const std::string& /* expName */) {
    return;
  }
  void searchExperimentsByNameWithPagination(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & /* _return */, const std::string& /* gatewayId */, const std::string& /* userName */, const std::string& /* expName */, const int32_t /* limit */, const int32_t /* offset */) {
    return;
  }
  void searchExperimentsByDesc(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & /* _return */, const std::string& /* gatewayId */, const std::string& /* userName */, const std::string& /* description */) {
    return;
  }
  void searchExperimentsByDescWithPagination(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & /* _return */, const std::string& /* gatewayId */, const std::string& /* userName */, const std::string& /* description */, const int32_t /* limit */, const int32_t /* offset */) {
    return;
  }
  void searchExperimentsByApplication(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & /* _return */, const std::string& /* gatewayId */, const std::string& /* userName */, const std::string& /* applicationId */) {
    return;
  }
  void searchExperimentsByApplicationWithPagination(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & /* _return */, const std::string& /* gatewayId */, const std::string& /* userName */, const std::string& /* applicationId */, const int32_t /* limit */, const int32_t /* offset */) {
    return;
  }
  void searchExperimentsByStatus(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & /* _return */, const std::string& /* gatewayId */, const std::string& /* userName */, const  ::apache::airavata::model::workspace::experiment::ExperimentState::type /* experimentState */) {
    return;
  }
  void searchExperimentsByStatusWithPagination(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & /* _return */, const std::string& /* gatewayId */, const std::string& /* userName */, const  ::apache::airavata::model::workspace::experiment::ExperimentState::type /* experimentState */, const int32_t /* limit */, const int32_t /* offset */) {
    return;
  }
  void searchExperimentsByCreationTime(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & /* _return */, const std::string& /* gatewayId */, const std::string& /* userName */, const int64_t /* fromTime */, const int64_t /* toTime */) {
    return;
  }
  void searchExperimentsByCreationTimeWithPagination(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & /* _return */, const std::string& /* gatewayId */, const std::string& /* userName */, const int64_t /* fromTime */, const int64_t /* toTime */, const int32_t /* limit */, const int32_t /* offset */) {
    return;
  }
  void getAllExperimentsInProject(std::vector< ::apache::airavata::model::workspace::experiment::Experiment> & /* _return */, const std::string& /* projectId */) {
    return;
  }
  void getAllExperimentsInProjectWithPagination(std::vector< ::apache::airavata::model::workspace::experiment::Experiment> & /* _return */, const std::string& /* projectId */, const int32_t /* limit */, const int32_t /* offset */) {
    return;
  }
  void getAllUserExperiments(std::vector< ::apache::airavata::model::workspace::experiment::Experiment> & /* _return */, const std::string& /* gatewayId */, const std::string& /* userName */) {
    return;
  }
  void getAllUserExperimentsWithPagination(std::vector< ::apache::airavata::model::workspace::experiment::Experiment> & /* _return */, const std::string& /* gatewayId */, const std::string& /* userName */, const int32_t /* limit */, const int32_t /* offset */) {
    return;
  }
  void createExperiment(std::string& /* _return */, const std::string& /* gatewayId */, const  ::apache::airavata::model::workspace::experiment::Experiment& /* experiment */) {
    return;
  }
  void getExperiment( ::apache::airavata::model::workspace::experiment::Experiment& /* _return */, const std::string& /* airavataExperimentId */) {
    return;
  }
  void updateExperiment(const std::string& /* airavataExperimentId */, const  ::apache::airavata::model::workspace::experiment::Experiment& /* experiment */) {
    return;
  }
  void updateExperimentConfiguration(const std::string& /* airavataExperimentId */, const  ::apache::airavata::model::workspace::experiment::UserConfigurationData& /* userConfiguration */) {
    return;
  }
  void updateResourceScheduleing(const std::string& /* airavataExperimentId */, const  ::apache::airavata::model::workspace::experiment::ComputationalResourceScheduling& /* resourceScheduling */) {
    return;
  }
  bool validateExperiment(const std::string& /* airavataExperimentId */) {
    bool _return = false;
    return _return;
  }
  void launchExperiment(const std::string& /* airavataExperimentId */, const std::string& /* airavataCredStoreToken */) {
    return;
  }
  void getExperimentStatus( ::apache::airavata::model::workspace::experiment::ExperimentStatus& /* _return */, const std::string& /* airavataExperimentId */) {
    return;
  }
  void getExperimentOutputs(std::vector< ::apache::airavata::model::appcatalog::appinterface::OutputDataObjectType> & /* _return */, const std::string& /* airavataExperimentId */) {
    return;
  }
  void getIntermediateOutputs(std::vector< ::apache::airavata::model::appcatalog::appinterface::OutputDataObjectType> & /* _return */, const std::string& /* airavataExperimentId */) {
    return;
  }
  void getJobStatuses(std::map<std::string,  ::apache::airavata::model::workspace::experiment::JobStatus> & /* _return */, const std::string& /* airavataExperimentId */) {
    return;
  }
  void getJobDetails(std::vector< ::apache::airavata::model::workspace::experiment::JobDetails> & /* _return */, const std::string& /* airavataExperimentId */) {
    return;
  }
  void getDataTransferDetails(std::vector< ::apache::airavata::model::workspace::experiment::DataTransferDetails> & /* _return */, const std::string& /* airavataExperimentId */) {
    return;
  }
  void cloneExperiment(std::string& /* _return */, const std::string& /* existingExperimentID */, const std::string& /* newExperimentName */) {
    return;
  }
  void terminateExperiment(const std::string& /* airavataExperimentId */, const std::string& /* tokenId */) {
    return;
  }
  void registerApplicationModule(std::string& /* _return */, const std::string& /* gatewayId */, const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule& /* applicationModule */) {
    return;
  }
  void getApplicationModule( ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule& /* _return */, const std::string& /* appModuleId */) {
    return;
  }
  bool updateApplicationModule(const std::string& /* appModuleId */, const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule& /* applicationModule */) {
    bool _return = false;
    return _return;
  }
  void getAllAppModules(std::vector< ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule> & /* _return */, const std::string& /* gatewayId */) {
    return;
  }
  bool deleteApplicationModule(const std::string& /* appModuleId */) {
    bool _return = false;
    return _return;
  }
  void registerApplicationDeployment(std::string& /* _return */, const std::string& /* gatewayId */, const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription& /* applicationDeployment */) {
    return;
  }
  void getApplicationDeployment( ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription& /* _return */, const std::string& /* appDeploymentId */) {
    return;
  }
  bool updateApplicationDeployment(const std::string& /* appDeploymentId */, const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription& /* applicationDeployment */) {
    bool _return = false;
    return _return;
  }
  bool deleteApplicationDeployment(const std::string& /* appDeploymentId */) {
    bool _return = false;
    return _return;
  }
  void getAllApplicationDeployments(std::vector< ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription> & /* _return */, const std::string& /* gatewayId */) {
    return;
  }
  void getAppModuleDeployedResources(std::vector<std::string> & /* _return */, const std::string& /* appModuleId */) {
    return;
  }
  void registerApplicationInterface(std::string& /* _return */, const std::string& /* gatewayId */, const  ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription& /* applicationInterface */) {
    return;
  }
  void getApplicationInterface( ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription& /* _return */, const std::string& /* appInterfaceId */) {
    return;
  }
  bool updateApplicationInterface(const std::string& /* appInterfaceId */, const  ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription& /* applicationInterface */) {
    bool _return = false;
    return _return;
  }
  bool deleteApplicationInterface(const std::string& /* appInterfaceId */) {
    bool _return = false;
    return _return;
  }
  void getAllApplicationInterfaceNames(std::map<std::string, std::string> & /* _return */, const std::string& /* gatewayId */) {
    return;
  }
  void getAllApplicationInterfaces(std::vector< ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription> & /* _return */, const std::string& /* gatewayId */) {
    return;
  }
  void getApplicationInputs(std::vector< ::apache::airavata::model::appcatalog::appinterface::InputDataObjectType> & /* _return */, const std::string& /* appInterfaceId */) {
    return;
  }
  void getApplicationOutputs(std::vector< ::apache::airavata::model::appcatalog::appinterface::OutputDataObjectType> & /* _return */, const std::string& /* appInterfaceId */) {
    return;
  }
  void getAvailableAppInterfaceComputeResources(std::map<std::string, std::string> & /* _return */, const std::string& /* appInterfaceId */) {
    return;
  }
  void registerComputeResource(std::string& /* _return */, const  ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription& /* computeResourceDescription */) {
    return;
  }
  void getComputeResource( ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription& /* _return */, const std::string& /* computeResourceId */) {
    return;
  }
  void getAllComputeResourceNames(std::map<std::string, std::string> & /* _return */) {
    return;
  }
  bool updateComputeResource(const std::string& /* computeResourceId */, const  ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription& /* computeResourceDescription */) {
    bool _return = false;
    return _return;
  }
  bool deleteComputeResource(const std::string& /* computeResourceId */) {
    bool _return = false;
    return _return;
  }
  void addLocalSubmissionDetails(std::string& /* _return */, const std::string& /* computeResourceId */, const int32_t /* priorityOrder */, const  ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission& /* localSubmission */) {
    return;
  }
  bool updateLocalSubmissionDetails(const std::string& /* jobSubmissionInterfaceId */, const  ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission& /* localSubmission */) {
    bool _return = false;
    return _return;
  }
  void getLocalJobSubmission( ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission& /* _return */, const std::string& /* jobSubmissionId */) {
    return;
  }
  void addSSHJobSubmissionDetails(std::string& /* _return */, const std::string& /* computeResourceId */, const int32_t /* priorityOrder */, const  ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission& /* sshJobSubmission */) {
    return;
  }
  void getSSHJobSubmission( ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission& /* _return */, const std::string& /* jobSubmissionId */) {
    return;
  }
  void addUNICOREJobSubmissionDetails(std::string& /* _return */, const std::string& /* computeResourceId */, const int32_t /* priorityOrder */, const  ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission& /* unicoreJobSubmission */) {
    return;
  }
  void getUnicoreJobSubmission( ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission& /* _return */, const std::string& /* jobSubmissionId */) {
    return;
  }
  void addCloudJobSubmissionDetails(std::string& /* _return */, const std::string& /* computeResourceId */, const int32_t /* priorityOrder */, const  ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission& /* cloudSubmission */) {
    return;
  }
  void getCloudJobSubmission( ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission& /* _return */, const std::string& /* jobSubmissionId */) {
    return;
  }
  bool updateSSHJobSubmissionDetails(const std::string& /* jobSubmissionInterfaceId */, const  ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission& /* sshJobSubmission */) {
    bool _return = false;
    return _return;
  }
  bool updateCloudJobSubmissionDetails(const std::string& /* jobSubmissionInterfaceId */, const  ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission& /* sshJobSubmission */) {
    bool _return = false;
    return _return;
  }
  bool updateUnicoreJobSubmissionDetails(const std::string& /* jobSubmissionInterfaceId */, const  ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission& /* unicoreJobSubmission */) {
    bool _return = false;
    return _return;
  }
  void addLocalDataMovementDetails(std::string& /* _return */, const std::string& /* computeResourceId */, const int32_t /* priorityOrder */, const  ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement& /* localDataMovement */) {
    return;
  }
  bool updateLocalDataMovementDetails(const std::string& /* dataMovementInterfaceId */, const  ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement& /* localDataMovement */) {
    bool _return = false;
    return _return;
  }
  void getLocalDataMovement( ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement& /* _return */, const std::string& /* dataMovementId */) {
    return;
  }
  void addSCPDataMovementDetails(std::string& /* _return */, const std::string& /* computeResourceId */, const int32_t /* priorityOrder */, const  ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement& /* scpDataMovement */) {
    return;
  }
  bool updateSCPDataMovementDetails(const std::string& /* dataMovementInterfaceId */, const  ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement& /* scpDataMovement */) {
    bool _return = false;
    return _return;
  }
  void getSCPDataMovement( ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement& /* _return */, const std::string& /* dataMovementId */) {
    return;
  }
  void addUnicoreDataMovementDetails(std::string& /* _return */, const std::string& /* computeResourceId */, const int32_t /* priorityOrder */, const  ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement& /* unicoreDataMovement */) {
    return;
  }
  bool updateUnicoreDataMovementDetails(const std::string& /* dataMovementInterfaceId */, const  ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement& /* unicoreDataMovement */) {
    bool _return = false;
    return _return;
  }
  void getUnicoreDataMovement( ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement& /* _return */, const std::string& /* dataMovementId */) {
    return;
  }
  void addGridFTPDataMovementDetails(std::string& /* _return */, const std::string& /* computeResourceId */, const int32_t /* priorityOrder */, const  ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement& /* gridFTPDataMovement */) {
    return;
  }
  bool updateGridFTPDataMovementDetails(const std::string& /* dataMovementInterfaceId */, const  ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement& /* gridFTPDataMovement */) {
    bool _return = false;
    return _return;
  }
  void getGridFTPDataMovement( ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement& /* _return */, const std::string& /* dataMovementId */) {
    return;
  }
  bool changeJobSubmissionPriority(const std::string& /* jobSubmissionInterfaceId */, const int32_t /* newPriorityOrder */) {
    bool _return = false;
    return _return;
  }
  bool changeDataMovementPriority(const std::string& /* dataMovementInterfaceId */, const int32_t /* newPriorityOrder */) {
    bool _return = false;
    return _return;
  }
  bool changeJobSubmissionPriorities(const std::map<std::string, int32_t> & /* jobSubmissionPriorityMap */) {
    bool _return = false;
    return _return;
  }
  bool changeDataMovementPriorities(const std::map<std::string, int32_t> & /* dataMovementPriorityMap */) {
    bool _return = false;
    return _return;
  }
  bool deleteJobSubmissionInterface(const std::string& /* computeResourceId */, const std::string& /* jobSubmissionInterfaceId */) {
    bool _return = false;
    return _return;
  }
  bool deleteDataMovementInterface(const std::string& /* computeResourceId */, const std::string& /* dataMovementInterfaceId */) {
    bool _return = false;
    return _return;
  }
  void registerResourceJobManager(std::string& /* _return */, const  ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager& /* resourceJobManager */) {
    return;
  }
  bool updateResourceJobManager(const std::string& /* resourceJobManagerId */, const  ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager& /* updatedResourceJobManager */) {
    bool _return = false;
    return _return;
  }
  void getResourceJobManager( ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager& /* _return */, const std::string& /* resourceJobManagerId */) {
    return;
  }
  bool deleteResourceJobManager(const std::string& /* resourceJobManagerId */) {
    bool _return = false;
    return _return;
  }
  bool deleteBatchQueue(const std::string& /* computeResourceId */, const std::string& /* queueName */) {
    bool _return = false;
    return _return;
  }
  void registerGatewayResourceProfile(std::string& /* _return */, const  ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile& /* gatewayResourceProfile */) {
    return;
  }
  void getGatewayResourceProfile( ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile& /* _return */, const std::string& /* gatewayID */) {
    return;
  }
  bool updateGatewayResourceProfile(const std::string& /* gatewayID */, const  ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile& /* gatewayResourceProfile */) {
    bool _return = false;
    return _return;
  }
  bool deleteGatewayResourceProfile(const std::string& /* gatewayID */) {
    bool _return = false;
    return _return;
  }
  bool addGatewayComputeResourcePreference(const std::string& /* gatewayID */, const std::string& /* computeResourceId */, const  ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference& /* computeResourcePreference */) {
    bool _return = false;
    return _return;
  }
  void getGatewayComputeResourcePreference( ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference& /* _return */, const std::string& /* gatewayID */, const std::string& /* computeResourceId */) {
    return;
  }
  void getAllGatewayComputeResourcePreferences(std::vector< ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference> & /* _return */, const std::string& /* gatewayID */) {
    return;
  }
  void getAllGatewayComputeResources(std::vector< ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile> & /* _return */) {
    return;
  }
  bool updateGatewayComputeResourcePreference(const std::string& /* gatewayID */, const std::string& /* computeResourceId */, const  ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference& /* computeResourcePreference */) {
    bool _return = false;
    return _return;
  }
  bool deleteGatewayComputeResourcePreference(const std::string& /* gatewayID */, const std::string& /* computeResourceId */) {
    bool _return = false;
    return _return;
  }
  void getAllWorkflows(std::vector<std::string> & /* _return */, const std::string& /* gatewayId */) {
    return;
  }
  void getWorkflow( ::Workflow& /* _return */, const std::string& /* workflowTemplateId */) {
    return;
  }
  void deleteWorkflow(const std::string& /* workflowTemplateId */) {
    return;
  }
  void registerWorkflow(std::string& /* _return */, const std::string& /* gatewayId */, const  ::Workflow& /* workflow */) {
    return;
  }
  void updateWorkflow(const std::string& /* workflowTemplateId */, const  ::Workflow& /* workflow */) {
    return;
  }
  void getWorkflowTemplateId(std::string& /* _return */, const std::string& /* workflowName */) {
    return;
  }
  bool isWorkflowExistWithName(const std::string& /* workflowName */) {
    bool _return = false;
    return _return;
  }
};


class Airavata_getAPIVersion_args {
 public:

  Airavata_getAPIVersion_args() {
  }

  virtual ~Airavata_getAPIVersion_args() throw() {}


  bool operator == (const Airavata_getAPIVersion_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Airavata_getAPIVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAPIVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getAPIVersion_pargs {
 public:


  virtual ~Airavata_getAPIVersion_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAPIVersion_result__isset {
  _Airavata_getAPIVersion_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAPIVersion_result__isset;

class Airavata_getAPIVersion_result {
 public:

  Airavata_getAPIVersion_result() : success() {
  }

  virtual ~Airavata_getAPIVersion_result() throw() {}

  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAPIVersion_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getAPIVersion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAPIVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAPIVersion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAPIVersion_presult__isset {
  _Airavata_getAPIVersion_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAPIVersion_presult__isset;

class Airavata_getAPIVersion_presult {
 public:


  virtual ~Airavata_getAPIVersion_presult() throw() {}

  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAPIVersion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_addGateway_args {
 public:

  Airavata_addGateway_args() {
  }

  virtual ~Airavata_addGateway_args() throw() {}

   ::apache::airavata::model::workspace::Gateway gateway;

  void __set_gateway(const  ::apache::airavata::model::workspace::Gateway& val) {
    gateway = val;
  }

  bool operator == (const Airavata_addGateway_args & rhs) const
  {
    if (!(gateway == rhs.gateway))
      return false;
    return true;
  }
  bool operator != (const Airavata_addGateway_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addGateway_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_addGateway_pargs {
 public:


  virtual ~Airavata_addGateway_pargs() throw() {}

  const  ::apache::airavata::model::workspace::Gateway* gateway;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_addGateway_result__isset {
  _Airavata_addGateway_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_addGateway_result__isset;

class Airavata_addGateway_result {
 public:

  Airavata_addGateway_result() : success() {
  }

  virtual ~Airavata_addGateway_result() throw() {}

  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_addGateway_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_addGateway_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_addGateway_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addGateway_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_addGateway_presult__isset {
  _Airavata_addGateway_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_addGateway_presult__isset;

class Airavata_addGateway_presult {
 public:


  virtual ~Airavata_addGateway_presult() throw() {}

  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_addGateway_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_updateGateway_args {
 public:

  Airavata_updateGateway_args() : gatewayId() {
  }

  virtual ~Airavata_updateGateway_args() throw() {}

  std::string gatewayId;
   ::apache::airavata::model::workspace::Gateway updatedGateway;

  void __set_gatewayId(const std::string& val) {
    gatewayId = val;
  }

  void __set_updatedGateway(const  ::apache::airavata::model::workspace::Gateway& val) {
    updatedGateway = val;
  }

  bool operator == (const Airavata_updateGateway_args & rhs) const
  {
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(updatedGateway == rhs.updatedGateway))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateGateway_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateGateway_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateGateway_pargs {
 public:


  virtual ~Airavata_updateGateway_pargs() throw() {}

  const std::string* gatewayId;
  const  ::apache::airavata::model::workspace::Gateway* updatedGateway;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateGateway_result__isset {
  _Airavata_updateGateway_result__isset() : ire(false), ace(false), ase(false) {}
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateGateway_result__isset;

class Airavata_updateGateway_result {
 public:

  Airavata_updateGateway_result() {
  }

  virtual ~Airavata_updateGateway_result() throw() {}

   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateGateway_result__isset __isset;

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_updateGateway_result & rhs) const
  {
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateGateway_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateGateway_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateGateway_presult__isset {
  _Airavata_updateGateway_presult__isset() : ire(false), ace(false), ase(false) {}
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateGateway_presult__isset;

class Airavata_updateGateway_presult {
 public:


  virtual ~Airavata_updateGateway_presult() throw() {}

   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateGateway_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getGateway_args {
 public:

  Airavata_getGateway_args() : gatewayId() {
  }

  virtual ~Airavata_getGateway_args() throw() {}

  std::string gatewayId;

  void __set_gatewayId(const std::string& val) {
    gatewayId = val;
  }

  bool operator == (const Airavata_getGateway_args & rhs) const
  {
    if (!(gatewayId == rhs.gatewayId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getGateway_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getGateway_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getGateway_pargs {
 public:


  virtual ~Airavata_getGateway_pargs() throw() {}

  const std::string* gatewayId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getGateway_result__isset {
  _Airavata_getGateway_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getGateway_result__isset;

class Airavata_getGateway_result {
 public:

  Airavata_getGateway_result() {
  }

  virtual ~Airavata_getGateway_result() throw() {}

   ::apache::airavata::model::workspace::Gateway success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getGateway_result__isset __isset;

  void __set_success(const  ::apache::airavata::model::workspace::Gateway& val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getGateway_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getGateway_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getGateway_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getGateway_presult__isset {
  _Airavata_getGateway_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getGateway_presult__isset;

class Airavata_getGateway_presult {
 public:


  virtual ~Airavata_getGateway_presult() throw() {}

   ::apache::airavata::model::workspace::Gateway* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getGateway_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_deleteGateway_args {
 public:

  Airavata_deleteGateway_args() : gatewayId() {
  }

  virtual ~Airavata_deleteGateway_args() throw() {}

  std::string gatewayId;

  void __set_gatewayId(const std::string& val) {
    gatewayId = val;
  }

  bool operator == (const Airavata_deleteGateway_args & rhs) const
  {
    if (!(gatewayId == rhs.gatewayId))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteGateway_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteGateway_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_deleteGateway_pargs {
 public:


  virtual ~Airavata_deleteGateway_pargs() throw() {}

  const std::string* gatewayId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_deleteGateway_result__isset {
  _Airavata_deleteGateway_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_deleteGateway_result__isset;

class Airavata_deleteGateway_result {
 public:

  Airavata_deleteGateway_result() : success(0) {
  }

  virtual ~Airavata_deleteGateway_result() throw() {}

  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_deleteGateway_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_deleteGateway_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteGateway_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteGateway_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_deleteGateway_presult__isset {
  _Airavata_deleteGateway_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_deleteGateway_presult__isset;

class Airavata_deleteGateway_presult {
 public:


  virtual ~Airavata_deleteGateway_presult() throw() {}

  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_deleteGateway_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getAllGateways_args {
 public:

  Airavata_getAllGateways_args() {
  }

  virtual ~Airavata_getAllGateways_args() throw() {}


  bool operator == (const Airavata_getAllGateways_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Airavata_getAllGateways_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllGateways_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getAllGateways_pargs {
 public:


  virtual ~Airavata_getAllGateways_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllGateways_result__isset {
  _Airavata_getAllGateways_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAllGateways_result__isset;

class Airavata_getAllGateways_result {
 public:

  Airavata_getAllGateways_result() {
  }

  virtual ~Airavata_getAllGateways_result() throw() {}

  std::vector< ::apache::airavata::model::workspace::Gateway>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAllGateways_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::workspace::Gateway> & val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getAllGateways_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllGateways_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllGateways_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllGateways_presult__isset {
  _Airavata_getAllGateways_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAllGateways_presult__isset;

class Airavata_getAllGateways_presult {
 public:


  virtual ~Airavata_getAllGateways_presult() throw() {}

  std::vector< ::apache::airavata::model::workspace::Gateway> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAllGateways_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_isGatewayExist_args {
 public:

  Airavata_isGatewayExist_args() : gatewayId() {
  }

  virtual ~Airavata_isGatewayExist_args() throw() {}

  std::string gatewayId;

  void __set_gatewayId(const std::string& val) {
    gatewayId = val;
  }

  bool operator == (const Airavata_isGatewayExist_args & rhs) const
  {
    if (!(gatewayId == rhs.gatewayId))
      return false;
    return true;
  }
  bool operator != (const Airavata_isGatewayExist_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_isGatewayExist_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_isGatewayExist_pargs {
 public:


  virtual ~Airavata_isGatewayExist_pargs() throw() {}

  const std::string* gatewayId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_isGatewayExist_result__isset {
  _Airavata_isGatewayExist_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_isGatewayExist_result__isset;

class Airavata_isGatewayExist_result {
 public:

  Airavata_isGatewayExist_result() : success(0) {
  }

  virtual ~Airavata_isGatewayExist_result() throw() {}

  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_isGatewayExist_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_isGatewayExist_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_isGatewayExist_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_isGatewayExist_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_isGatewayExist_presult__isset {
  _Airavata_isGatewayExist_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_isGatewayExist_presult__isset;

class Airavata_isGatewayExist_presult {
 public:


  virtual ~Airavata_isGatewayExist_presult() throw() {}

  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_isGatewayExist_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_generateAndRegisterSSHKeys_args {
 public:

  Airavata_generateAndRegisterSSHKeys_args() : gatewayId(), userName() {
  }

  virtual ~Airavata_generateAndRegisterSSHKeys_args() throw() {}

  std::string gatewayId;
  std::string userName;

  void __set_gatewayId(const std::string& val) {
    gatewayId = val;
  }

  void __set_userName(const std::string& val) {
    userName = val;
  }

  bool operator == (const Airavata_generateAndRegisterSSHKeys_args & rhs) const
  {
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(userName == rhs.userName))
      return false;
    return true;
  }
  bool operator != (const Airavata_generateAndRegisterSSHKeys_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_generateAndRegisterSSHKeys_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_generateAndRegisterSSHKeys_pargs {
 public:


  virtual ~Airavata_generateAndRegisterSSHKeys_pargs() throw() {}

  const std::string* gatewayId;
  const std::string* userName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_generateAndRegisterSSHKeys_result__isset {
  _Airavata_generateAndRegisterSSHKeys_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_generateAndRegisterSSHKeys_result__isset;

class Airavata_generateAndRegisterSSHKeys_result {
 public:

  Airavata_generateAndRegisterSSHKeys_result() : success() {
  }

  virtual ~Airavata_generateAndRegisterSSHKeys_result() throw() {}

  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_generateAndRegisterSSHKeys_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_generateAndRegisterSSHKeys_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_generateAndRegisterSSHKeys_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_generateAndRegisterSSHKeys_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_generateAndRegisterSSHKeys_presult__isset {
  _Airavata_generateAndRegisterSSHKeys_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_generateAndRegisterSSHKeys_presult__isset;

class Airavata_generateAndRegisterSSHKeys_presult {
 public:


  virtual ~Airavata_generateAndRegisterSSHKeys_presult() throw() {}

  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_generateAndRegisterSSHKeys_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getSSHPubKey_args {
 public:

  Airavata_getSSHPubKey_args() : airavataCredStoreToken() {
  }

  virtual ~Airavata_getSSHPubKey_args() throw() {}

  std::string airavataCredStoreToken;

  void __set_airavataCredStoreToken(const std::string& val) {
    airavataCredStoreToken = val;
  }

  bool operator == (const Airavata_getSSHPubKey_args & rhs) const
  {
    if (!(airavataCredStoreToken == rhs.airavataCredStoreToken))
      return false;
    return true;
  }
  bool operator != (const Airavata_getSSHPubKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getSSHPubKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getSSHPubKey_pargs {
 public:


  virtual ~Airavata_getSSHPubKey_pargs() throw() {}

  const std::string* airavataCredStoreToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getSSHPubKey_result__isset {
  _Airavata_getSSHPubKey_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getSSHPubKey_result__isset;

class Airavata_getSSHPubKey_result {
 public:

  Airavata_getSSHPubKey_result() : success() {
  }

  virtual ~Airavata_getSSHPubKey_result() throw() {}

  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getSSHPubKey_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getSSHPubKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getSSHPubKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getSSHPubKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getSSHPubKey_presult__isset {
  _Airavata_getSSHPubKey_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getSSHPubKey_presult__isset;

class Airavata_getSSHPubKey_presult {
 public:


  virtual ~Airavata_getSSHPubKey_presult() throw() {}

  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getSSHPubKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getAllUserSSHPubKeys_args {
 public:

  Airavata_getAllUserSSHPubKeys_args() : userName() {
  }

  virtual ~Airavata_getAllUserSSHPubKeys_args() throw() {}

  std::string userName;

  void __set_userName(const std::string& val) {
    userName = val;
  }

  bool operator == (const Airavata_getAllUserSSHPubKeys_args & rhs) const
  {
    if (!(userName == rhs.userName))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllUserSSHPubKeys_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllUserSSHPubKeys_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getAllUserSSHPubKeys_pargs {
 public:


  virtual ~Airavata_getAllUserSSHPubKeys_pargs() throw() {}

  const std::string* userName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllUserSSHPubKeys_result__isset {
  _Airavata_getAllUserSSHPubKeys_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAllUserSSHPubKeys_result__isset;

class Airavata_getAllUserSSHPubKeys_result {
 public:

  Airavata_getAllUserSSHPubKeys_result() {
  }

  virtual ~Airavata_getAllUserSSHPubKeys_result() throw() {}

  std::map<std::string, std::string>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAllUserSSHPubKeys_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getAllUserSSHPubKeys_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllUserSSHPubKeys_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllUserSSHPubKeys_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllUserSSHPubKeys_presult__isset {
  _Airavata_getAllUserSSHPubKeys_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAllUserSSHPubKeys_presult__isset;

class Airavata_getAllUserSSHPubKeys_presult {
 public:


  virtual ~Airavata_getAllUserSSHPubKeys_presult() throw() {}

  std::map<std::string, std::string> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAllUserSSHPubKeys_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_createProject_args {
 public:

  Airavata_createProject_args() : gatewayId() {
  }

  virtual ~Airavata_createProject_args() throw() {}

  std::string gatewayId;
   ::apache::airavata::model::workspace::Project project;

  void __set_gatewayId(const std::string& val) {
    gatewayId = val;
  }

  void __set_project(const  ::apache::airavata::model::workspace::Project& val) {
    project = val;
  }

  bool operator == (const Airavata_createProject_args & rhs) const
  {
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(project == rhs.project))
      return false;
    return true;
  }
  bool operator != (const Airavata_createProject_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_createProject_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_createProject_pargs {
 public:


  virtual ~Airavata_createProject_pargs() throw() {}

  const std::string* gatewayId;
  const  ::apache::airavata::model::workspace::Project* project;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_createProject_result__isset {
  _Airavata_createProject_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_createProject_result__isset;

class Airavata_createProject_result {
 public:

  Airavata_createProject_result() : success() {
  }

  virtual ~Airavata_createProject_result() throw() {}

  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_createProject_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_createProject_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_createProject_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_createProject_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_createProject_presult__isset {
  _Airavata_createProject_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_createProject_presult__isset;

class Airavata_createProject_presult {
 public:


  virtual ~Airavata_createProject_presult() throw() {}

  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_createProject_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_updateProject_args {
 public:

  Airavata_updateProject_args() : projectId() {
  }

  virtual ~Airavata_updateProject_args() throw() {}

  std::string projectId;
   ::apache::airavata::model::workspace::Project updatedProject;

  void __set_projectId(const std::string& val) {
    projectId = val;
  }

  void __set_updatedProject(const  ::apache::airavata::model::workspace::Project& val) {
    updatedProject = val;
  }

  bool operator == (const Airavata_updateProject_args & rhs) const
  {
    if (!(projectId == rhs.projectId))
      return false;
    if (!(updatedProject == rhs.updatedProject))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateProject_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateProject_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateProject_pargs {
 public:


  virtual ~Airavata_updateProject_pargs() throw() {}

  const std::string* projectId;
  const  ::apache::airavata::model::workspace::Project* updatedProject;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateProject_result__isset {
  _Airavata_updateProject_result__isset() : ire(false), ace(false), ase(false), pnfe(false) {}
  bool ire;
  bool ace;
  bool ase;
  bool pnfe;
} _Airavata_updateProject_result__isset;

class Airavata_updateProject_result {
 public:

  Airavata_updateProject_result() {
  }

  virtual ~Airavata_updateProject_result() throw() {}

   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::ProjectNotFoundException pnfe;

  _Airavata_updateProject_result__isset __isset;

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  void __set_pnfe(const  ::apache::airavata::api::error::ProjectNotFoundException& val) {
    pnfe = val;
  }

  bool operator == (const Airavata_updateProject_result & rhs) const
  {
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(pnfe == rhs.pnfe))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateProject_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateProject_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateProject_presult__isset {
  _Airavata_updateProject_presult__isset() : ire(false), ace(false), ase(false), pnfe(false) {}
  bool ire;
  bool ace;
  bool ase;
  bool pnfe;
} _Airavata_updateProject_presult__isset;

class Airavata_updateProject_presult {
 public:


  virtual ~Airavata_updateProject_presult() throw() {}

   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::ProjectNotFoundException pnfe;

  _Airavata_updateProject_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getProject_args {
 public:

  Airavata_getProject_args() : projectId() {
  }

  virtual ~Airavata_getProject_args() throw() {}

  std::string projectId;

  void __set_projectId(const std::string& val) {
    projectId = val;
  }

  bool operator == (const Airavata_getProject_args & rhs) const
  {
    if (!(projectId == rhs.projectId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getProject_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getProject_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getProject_pargs {
 public:


  virtual ~Airavata_getProject_pargs() throw() {}

  const std::string* projectId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getProject_result__isset {
  _Airavata_getProject_result__isset() : success(false), ire(false), ace(false), ase(false), pnfe(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
  bool pnfe;
} _Airavata_getProject_result__isset;

class Airavata_getProject_result {
 public:

  Airavata_getProject_result() {
  }

  virtual ~Airavata_getProject_result() throw() {}

   ::apache::airavata::model::workspace::Project success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::ProjectNotFoundException pnfe;

  _Airavata_getProject_result__isset __isset;

  void __set_success(const  ::apache::airavata::model::workspace::Project& val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  void __set_pnfe(const  ::apache::airavata::api::error::ProjectNotFoundException& val) {
    pnfe = val;
  }

  bool operator == (const Airavata_getProject_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(pnfe == rhs.pnfe))
      return false;
    return true;
  }
  bool operator != (const Airavata_getProject_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getProject_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getProject_presult__isset {
  _Airavata_getProject_presult__isset() : success(false), ire(false), ace(false), ase(false), pnfe(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
  bool pnfe;
} _Airavata_getProject_presult__isset;

class Airavata_getProject_presult {
 public:


  virtual ~Airavata_getProject_presult() throw() {}

   ::apache::airavata::model::workspace::Project* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::ProjectNotFoundException pnfe;

  _Airavata_getProject_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_deleteProject_args {
 public:

  Airavata_deleteProject_args() : projectId() {
  }

  virtual ~Airavata_deleteProject_args() throw() {}

  std::string projectId;

  void __set_projectId(const std::string& val) {
    projectId = val;
  }

  bool operator == (const Airavata_deleteProject_args & rhs) const
  {
    if (!(projectId == rhs.projectId))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteProject_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteProject_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_deleteProject_pargs {
 public:


  virtual ~Airavata_deleteProject_pargs() throw() {}

  const std::string* projectId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_deleteProject_result__isset {
  _Airavata_deleteProject_result__isset() : success(false), ire(false), ace(false), ase(false), pnfe(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
  bool pnfe;
} _Airavata_deleteProject_result__isset;

class Airavata_deleteProject_result {
 public:

  Airavata_deleteProject_result() : success(0) {
  }

  virtual ~Airavata_deleteProject_result() throw() {}

  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::ProjectNotFoundException pnfe;

  _Airavata_deleteProject_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  void __set_pnfe(const  ::apache::airavata::api::error::ProjectNotFoundException& val) {
    pnfe = val;
  }

  bool operator == (const Airavata_deleteProject_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(pnfe == rhs.pnfe))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteProject_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteProject_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_deleteProject_presult__isset {
  _Airavata_deleteProject_presult__isset() : success(false), ire(false), ace(false), ase(false), pnfe(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
  bool pnfe;
} _Airavata_deleteProject_presult__isset;

class Airavata_deleteProject_presult {
 public:


  virtual ~Airavata_deleteProject_presult() throw() {}

  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::ProjectNotFoundException pnfe;

  _Airavata_deleteProject_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getAllUserProjects_args {
 public:

  Airavata_getAllUserProjects_args() : gatewayId(), userName() {
  }

  virtual ~Airavata_getAllUserProjects_args() throw() {}

  std::string gatewayId;
  std::string userName;

  void __set_gatewayId(const std::string& val) {
    gatewayId = val;
  }

  void __set_userName(const std::string& val) {
    userName = val;
  }

  bool operator == (const Airavata_getAllUserProjects_args & rhs) const
  {
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(userName == rhs.userName))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllUserProjects_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllUserProjects_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getAllUserProjects_pargs {
 public:


  virtual ~Airavata_getAllUserProjects_pargs() throw() {}

  const std::string* gatewayId;
  const std::string* userName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllUserProjects_result__isset {
  _Airavata_getAllUserProjects_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAllUserProjects_result__isset;

class Airavata_getAllUserProjects_result {
 public:

  Airavata_getAllUserProjects_result() {
  }

  virtual ~Airavata_getAllUserProjects_result() throw() {}

  std::vector< ::apache::airavata::model::workspace::Project>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAllUserProjects_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::workspace::Project> & val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getAllUserProjects_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllUserProjects_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllUserProjects_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllUserProjects_presult__isset {
  _Airavata_getAllUserProjects_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAllUserProjects_presult__isset;

class Airavata_getAllUserProjects_presult {
 public:


  virtual ~Airavata_getAllUserProjects_presult() throw() {}

  std::vector< ::apache::airavata::model::workspace::Project> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAllUserProjects_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getAllUserProjectsWithPagination_args {
 public:

  Airavata_getAllUserProjectsWithPagination_args() : gatewayId(), userName(), limit(0), offset(0) {
  }

  virtual ~Airavata_getAllUserProjectsWithPagination_args() throw() {}

  std::string gatewayId;
  std::string userName;
  int32_t limit;
  int32_t offset;

  void __set_gatewayId(const std::string& val) {
    gatewayId = val;
  }

  void __set_userName(const std::string& val) {
    userName = val;
  }

  void __set_limit(const int32_t val) {
    limit = val;
  }

  void __set_offset(const int32_t val) {
    offset = val;
  }

  bool operator == (const Airavata_getAllUserProjectsWithPagination_args & rhs) const
  {
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(userName == rhs.userName))
      return false;
    if (!(limit == rhs.limit))
      return false;
    if (!(offset == rhs.offset))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllUserProjectsWithPagination_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllUserProjectsWithPagination_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getAllUserProjectsWithPagination_pargs {
 public:


  virtual ~Airavata_getAllUserProjectsWithPagination_pargs() throw() {}

  const std::string* gatewayId;
  const std::string* userName;
  const int32_t* limit;
  const int32_t* offset;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllUserProjectsWithPagination_result__isset {
  _Airavata_getAllUserProjectsWithPagination_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAllUserProjectsWithPagination_result__isset;

class Airavata_getAllUserProjectsWithPagination_result {
 public:

  Airavata_getAllUserProjectsWithPagination_result() {
  }

  virtual ~Airavata_getAllUserProjectsWithPagination_result() throw() {}

  std::vector< ::apache::airavata::model::workspace::Project>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAllUserProjectsWithPagination_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::workspace::Project> & val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getAllUserProjectsWithPagination_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllUserProjectsWithPagination_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllUserProjectsWithPagination_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllUserProjectsWithPagination_presult__isset {
  _Airavata_getAllUserProjectsWithPagination_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAllUserProjectsWithPagination_presult__isset;

class Airavata_getAllUserProjectsWithPagination_presult {
 public:


  virtual ~Airavata_getAllUserProjectsWithPagination_presult() throw() {}

  std::vector< ::apache::airavata::model::workspace::Project> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAllUserProjectsWithPagination_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_searchProjectsByProjectName_args {
 public:

  Airavata_searchProjectsByProjectName_args() : gatewayId(), userName(), projectName() {
  }

  virtual ~Airavata_searchProjectsByProjectName_args() throw() {}

  std::string gatewayId;
  std::string userName;
  std::string projectName;

  void __set_gatewayId(const std::string& val) {
    gatewayId = val;
  }

  void __set_userName(const std::string& val) {
    userName = val;
  }

  void __set_projectName(const std::string& val) {
    projectName = val;
  }

  bool operator == (const Airavata_searchProjectsByProjectName_args & rhs) const
  {
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(userName == rhs.userName))
      return false;
    if (!(projectName == rhs.projectName))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchProjectsByProjectName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchProjectsByProjectName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_searchProjectsByProjectName_pargs {
 public:


  virtual ~Airavata_searchProjectsByProjectName_pargs() throw() {}

  const std::string* gatewayId;
  const std::string* userName;
  const std::string* projectName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_searchProjectsByProjectName_result__isset {
  _Airavata_searchProjectsByProjectName_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_searchProjectsByProjectName_result__isset;

class Airavata_searchProjectsByProjectName_result {
 public:

  Airavata_searchProjectsByProjectName_result() {
  }

  virtual ~Airavata_searchProjectsByProjectName_result() throw() {}

  std::vector< ::apache::airavata::model::workspace::Project>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_searchProjectsByProjectName_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::workspace::Project> & val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_searchProjectsByProjectName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchProjectsByProjectName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchProjectsByProjectName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_searchProjectsByProjectName_presult__isset {
  _Airavata_searchProjectsByProjectName_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_searchProjectsByProjectName_presult__isset;

class Airavata_searchProjectsByProjectName_presult {
 public:


  virtual ~Airavata_searchProjectsByProjectName_presult() throw() {}

  std::vector< ::apache::airavata::model::workspace::Project> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_searchProjectsByProjectName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_searchProjectsByProjectNameWithPagination_args {
 public:

  Airavata_searchProjectsByProjectNameWithPagination_args() : gatewayId(), userName(), projectName(), limit(0), offset(0) {
  }

  virtual ~Airavata_searchProjectsByProjectNameWithPagination_args() throw() {}

  std::string gatewayId;
  std::string userName;
  std::string projectName;
  int32_t limit;
  int32_t offset;

  void __set_gatewayId(const std::string& val) {
    gatewayId = val;
  }

  void __set_userName(const std::string& val) {
    userName = val;
  }

  void __set_projectName(const std::string& val) {
    projectName = val;
  }

  void __set_limit(const int32_t val) {
    limit = val;
  }

  void __set_offset(const int32_t val) {
    offset = val;
  }

  bool operator == (const Airavata_searchProjectsByProjectNameWithPagination_args & rhs) const
  {
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(userName == rhs.userName))
      return false;
    if (!(projectName == rhs.projectName))
      return false;
    if (!(limit == rhs.limit))
      return false;
    if (!(offset == rhs.offset))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchProjectsByProjectNameWithPagination_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchProjectsByProjectNameWithPagination_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_searchProjectsByProjectNameWithPagination_pargs {
 public:


  virtual ~Airavata_searchProjectsByProjectNameWithPagination_pargs() throw() {}

  const std::string* gatewayId;
  const std::string* userName;
  const std::string* projectName;
  const int32_t* limit;
  const int32_t* offset;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_searchProjectsByProjectNameWithPagination_result__isset {
  _Airavata_searchProjectsByProjectNameWithPagination_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_searchProjectsByProjectNameWithPagination_result__isset;

class Airavata_searchProjectsByProjectNameWithPagination_result {
 public:

  Airavata_searchProjectsByProjectNameWithPagination_result() {
  }

  virtual ~Airavata_searchProjectsByProjectNameWithPagination_result() throw() {}

  std::vector< ::apache::airavata::model::workspace::Project>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_searchProjectsByProjectNameWithPagination_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::workspace::Project> & val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_searchProjectsByProjectNameWithPagination_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchProjectsByProjectNameWithPagination_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchProjectsByProjectNameWithPagination_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_searchProjectsByProjectNameWithPagination_presult__isset {
  _Airavata_searchProjectsByProjectNameWithPagination_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_searchProjectsByProjectNameWithPagination_presult__isset;

class Airavata_searchProjectsByProjectNameWithPagination_presult {
 public:


  virtual ~Airavata_searchProjectsByProjectNameWithPagination_presult() throw() {}

  std::vector< ::apache::airavata::model::workspace::Project> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_searchProjectsByProjectNameWithPagination_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_searchProjectsByProjectDesc_args {
 public:

  Airavata_searchProjectsByProjectDesc_args() : gatewayId(), userName(), description() {
  }

  virtual ~Airavata_searchProjectsByProjectDesc_args() throw() {}

  std::string gatewayId;
  std::string userName;
  std::string description;

  void __set_gatewayId(const std::string& val) {
    gatewayId = val;
  }

  void __set_userName(const std::string& val) {
    userName = val;
  }

  void __set_description(const std::string& val) {
    description = val;
  }

  bool operator == (const Airavata_searchProjectsByProjectDesc_args & rhs) const
  {
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(userName == rhs.userName))
      return false;
    if (!(description == rhs.description))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchProjectsByProjectDesc_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchProjectsByProjectDesc_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_searchProjectsByProjectDesc_pargs {
 public:


  virtual ~Airavata_searchProjectsByProjectDesc_pargs() throw() {}

  const std::string* gatewayId;
  const std::string* userName;
  const std::string* description;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_searchProjectsByProjectDesc_result__isset {
  _Airavata_searchProjectsByProjectDesc_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_searchProjectsByProjectDesc_result__isset;

class Airavata_searchProjectsByProjectDesc_result {
 public:

  Airavata_searchProjectsByProjectDesc_result() {
  }

  virtual ~Airavata_searchProjectsByProjectDesc_result() throw() {}

  std::vector< ::apache::airavata::model::workspace::Project>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_searchProjectsByProjectDesc_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::workspace::Project> & val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_searchProjectsByProjectDesc_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchProjectsByProjectDesc_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchProjectsByProjectDesc_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_searchProjectsByProjectDesc_presult__isset {
  _Airavata_searchProjectsByProjectDesc_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_searchProjectsByProjectDesc_presult__isset;

class Airavata_searchProjectsByProjectDesc_presult {
 public:


  virtual ~Airavata_searchProjectsByProjectDesc_presult() throw() {}

  std::vector< ::apache::airavata::model::workspace::Project> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_searchProjectsByProjectDesc_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_searchProjectsByProjectDescWithPagination_args {
 public:

  Airavata_searchProjectsByProjectDescWithPagination_args() : gatewayId(), userName(), description(), limit(0), offset(0) {
  }

  virtual ~Airavata_searchProjectsByProjectDescWithPagination_args() throw() {}

  std::string gatewayId;
  std::string userName;
  std::string description;
  int32_t limit;
  int32_t offset;

  void __set_gatewayId(const std::string& val) {
    gatewayId = val;
  }

  void __set_userName(const std::string& val) {
    userName = val;
  }

  void __set_description(const std::string& val) {
    description = val;
  }

  void __set_limit(const int32_t val) {
    limit = val;
  }

  void __set_offset(const int32_t val) {
    offset = val;
  }

  bool operator == (const Airavata_searchProjectsByProjectDescWithPagination_args & rhs) const
  {
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(userName == rhs.userName))
      return false;
    if (!(description == rhs.description))
      return false;
    if (!(limit == rhs.limit))
      return false;
    if (!(offset == rhs.offset))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchProjectsByProjectDescWithPagination_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchProjectsByProjectDescWithPagination_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_searchProjectsByProjectDescWithPagination_pargs {
 public:


  virtual ~Airavata_searchProjectsByProjectDescWithPagination_pargs() throw() {}

  const std::string* gatewayId;
  const std::string* userName;
  const std::string* description;
  const int32_t* limit;
  const int32_t* offset;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_searchProjectsByProjectDescWithPagination_result__isset {
  _Airavata_searchProjectsByProjectDescWithPagination_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_searchProjectsByProjectDescWithPagination_result__isset;

class Airavata_searchProjectsByProjectDescWithPagination_result {
 public:

  Airavata_searchProjectsByProjectDescWithPagination_result() {
  }

  virtual ~Airavata_searchProjectsByProjectDescWithPagination_result() throw() {}

  std::vector< ::apache::airavata::model::workspace::Project>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_searchProjectsByProjectDescWithPagination_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::workspace::Project> & val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_searchProjectsByProjectDescWithPagination_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchProjectsByProjectDescWithPagination_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchProjectsByProjectDescWithPagination_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_searchProjectsByProjectDescWithPagination_presult__isset {
  _Airavata_searchProjectsByProjectDescWithPagination_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_searchProjectsByProjectDescWithPagination_presult__isset;

class Airavata_searchProjectsByProjectDescWithPagination_presult {
 public:


  virtual ~Airavata_searchProjectsByProjectDescWithPagination_presult() throw() {}

  std::vector< ::apache::airavata::model::workspace::Project> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_searchProjectsByProjectDescWithPagination_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_searchExperimentsByName_args {
 public:

  Airavata_searchExperimentsByName_args() : gatewayId(), userName(), expName() {
  }

  virtual ~Airavata_searchExperimentsByName_args() throw() {}

  std::string gatewayId;
  std::string userName;
  std::string expName;

  void __set_gatewayId(const std::string& val) {
    gatewayId = val;
  }

  void __set_userName(const std::string& val) {
    userName = val;
  }

  void __set_expName(const std::string& val) {
    expName = val;
  }

  bool operator == (const Airavata_searchExperimentsByName_args & rhs) const
  {
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(userName == rhs.userName))
      return false;
    if (!(expName == rhs.expName))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchExperimentsByName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchExperimentsByName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_searchExperimentsByName_pargs {
 public:


  virtual ~Airavata_searchExperimentsByName_pargs() throw() {}

  const std::string* gatewayId;
  const std::string* userName;
  const std::string* expName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_searchExperimentsByName_result__isset {
  _Airavata_searchExperimentsByName_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_searchExperimentsByName_result__isset;

class Airavata_searchExperimentsByName_result {
 public:

  Airavata_searchExperimentsByName_result() {
  }

  virtual ~Airavata_searchExperimentsByName_result() throw() {}

  std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_searchExperimentsByName_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_searchExperimentsByName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchExperimentsByName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchExperimentsByName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_searchExperimentsByName_presult__isset {
  _Airavata_searchExperimentsByName_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_searchExperimentsByName_presult__isset;

class Airavata_searchExperimentsByName_presult {
 public:


  virtual ~Airavata_searchExperimentsByName_presult() throw() {}

  std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_searchExperimentsByName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_searchExperimentsByNameWithPagination_args {
 public:

  Airavata_searchExperimentsByNameWithPagination_args() : gatewayId(), userName(), expName(), limit(0), offset(0) {
  }

  virtual ~Airavata_searchExperimentsByNameWithPagination_args() throw() {}

  std::string gatewayId;
  std::string userName;
  std::string expName;
  int32_t limit;
  int32_t offset;

  void __set_gatewayId(const std::string& val) {
    gatewayId = val;
  }

  void __set_userName(const std::string& val) {
    userName = val;
  }

  void __set_expName(const std::string& val) {
    expName = val;
  }

  void __set_limit(const int32_t val) {
    limit = val;
  }

  void __set_offset(const int32_t val) {
    offset = val;
  }

  bool operator == (const Airavata_searchExperimentsByNameWithPagination_args & rhs) const
  {
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(userName == rhs.userName))
      return false;
    if (!(expName == rhs.expName))
      return false;
    if (!(limit == rhs.limit))
      return false;
    if (!(offset == rhs.offset))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchExperimentsByNameWithPagination_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchExperimentsByNameWithPagination_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_searchExperimentsByNameWithPagination_pargs {
 public:


  virtual ~Airavata_searchExperimentsByNameWithPagination_pargs() throw() {}

  const std::string* gatewayId;
  const std::string* userName;
  const std::string* expName;
  const int32_t* limit;
  const int32_t* offset;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_searchExperimentsByNameWithPagination_result__isset {
  _Airavata_searchExperimentsByNameWithPagination_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_searchExperimentsByNameWithPagination_result__isset;

class Airavata_searchExperimentsByNameWithPagination_result {
 public:

  Airavata_searchExperimentsByNameWithPagination_result() {
  }

  virtual ~Airavata_searchExperimentsByNameWithPagination_result() throw() {}

  std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_searchExperimentsByNameWithPagination_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_searchExperimentsByNameWithPagination_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchExperimentsByNameWithPagination_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchExperimentsByNameWithPagination_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_searchExperimentsByNameWithPagination_presult__isset {
  _Airavata_searchExperimentsByNameWithPagination_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_searchExperimentsByNameWithPagination_presult__isset;

class Airavata_searchExperimentsByNameWithPagination_presult {
 public:


  virtual ~Airavata_searchExperimentsByNameWithPagination_presult() throw() {}

  std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_searchExperimentsByNameWithPagination_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_searchExperimentsByDesc_args {
 public:

  Airavata_searchExperimentsByDesc_args() : gatewayId(), userName(), description() {
  }

  virtual ~Airavata_searchExperimentsByDesc_args() throw() {}

  std::string gatewayId;
  std::string userName;
  std::string description;

  void __set_gatewayId(const std::string& val) {
    gatewayId = val;
  }

  void __set_userName(const std::string& val) {
    userName = val;
  }

  void __set_description(const std::string& val) {
    description = val;
  }

  bool operator == (const Airavata_searchExperimentsByDesc_args & rhs) const
  {
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(userName == rhs.userName))
      return false;
    if (!(description == rhs.description))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchExperimentsByDesc_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchExperimentsByDesc_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_searchExperimentsByDesc_pargs {
 public:


  virtual ~Airavata_searchExperimentsByDesc_pargs() throw() {}

  const std::string* gatewayId;
  const std::string* userName;
  const std::string* description;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_searchExperimentsByDesc_result__isset {
  _Airavata_searchExperimentsByDesc_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_searchExperimentsByDesc_result__isset;

class Airavata_searchExperimentsByDesc_result {
 public:

  Airavata_searchExperimentsByDesc_result() {
  }

  virtual ~Airavata_searchExperimentsByDesc_result() throw() {}

  std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_searchExperimentsByDesc_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_searchExperimentsByDesc_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchExperimentsByDesc_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchExperimentsByDesc_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_searchExperimentsByDesc_presult__isset {
  _Airavata_searchExperimentsByDesc_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_searchExperimentsByDesc_presult__isset;

class Airavata_searchExperimentsByDesc_presult {
 public:


  virtual ~Airavata_searchExperimentsByDesc_presult() throw() {}

  std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_searchExperimentsByDesc_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_searchExperimentsByDescWithPagination_args {
 public:

  Airavata_searchExperimentsByDescWithPagination_args() : gatewayId(), userName(), description(), limit(0), offset(0) {
  }

  virtual ~Airavata_searchExperimentsByDescWithPagination_args() throw() {}

  std::string gatewayId;
  std::string userName;
  std::string description;
  int32_t limit;
  int32_t offset;

  void __set_gatewayId(const std::string& val) {
    gatewayId = val;
  }

  void __set_userName(const std::string& val) {
    userName = val;
  }

  void __set_description(const std::string& val) {
    description = val;
  }

  void __set_limit(const int32_t val) {
    limit = val;
  }

  void __set_offset(const int32_t val) {
    offset = val;
  }

  bool operator == (const Airavata_searchExperimentsByDescWithPagination_args & rhs) const
  {
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(userName == rhs.userName))
      return false;
    if (!(description == rhs.description))
      return false;
    if (!(limit == rhs.limit))
      return false;
    if (!(offset == rhs.offset))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchExperimentsByDescWithPagination_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchExperimentsByDescWithPagination_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_searchExperimentsByDescWithPagination_pargs {
 public:


  virtual ~Airavata_searchExperimentsByDescWithPagination_pargs() throw() {}

  const std::string* gatewayId;
  const std::string* userName;
  const std::string* description;
  const int32_t* limit;
  const int32_t* offset;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_searchExperimentsByDescWithPagination_result__isset {
  _Airavata_searchExperimentsByDescWithPagination_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_searchExperimentsByDescWithPagination_result__isset;

class Airavata_searchExperimentsByDescWithPagination_result {
 public:

  Airavata_searchExperimentsByDescWithPagination_result() {
  }

  virtual ~Airavata_searchExperimentsByDescWithPagination_result() throw() {}

  std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_searchExperimentsByDescWithPagination_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_searchExperimentsByDescWithPagination_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchExperimentsByDescWithPagination_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchExperimentsByDescWithPagination_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_searchExperimentsByDescWithPagination_presult__isset {
  _Airavata_searchExperimentsByDescWithPagination_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_searchExperimentsByDescWithPagination_presult__isset;

class Airavata_searchExperimentsByDescWithPagination_presult {
 public:


  virtual ~Airavata_searchExperimentsByDescWithPagination_presult() throw() {}

  std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_searchExperimentsByDescWithPagination_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_searchExperimentsByApplication_args {
 public:

  Airavata_searchExperimentsByApplication_args() : gatewayId(), userName(), applicationId() {
  }

  virtual ~Airavata_searchExperimentsByApplication_args() throw() {}

  std::string gatewayId;
  std::string userName;
  std::string applicationId;

  void __set_gatewayId(const std::string& val) {
    gatewayId = val;
  }

  void __set_userName(const std::string& val) {
    userName = val;
  }

  void __set_applicationId(const std::string& val) {
    applicationId = val;
  }

  bool operator == (const Airavata_searchExperimentsByApplication_args & rhs) const
  {
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(userName == rhs.userName))
      return false;
    if (!(applicationId == rhs.applicationId))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchExperimentsByApplication_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchExperimentsByApplication_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_searchExperimentsByApplication_pargs {
 public:


  virtual ~Airavata_searchExperimentsByApplication_pargs() throw() {}

  const std::string* gatewayId;
  const std::string* userName;
  const std::string* applicationId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_searchExperimentsByApplication_result__isset {
  _Airavata_searchExperimentsByApplication_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_searchExperimentsByApplication_result__isset;

class Airavata_searchExperimentsByApplication_result {
 public:

  Airavata_searchExperimentsByApplication_result() {
  }

  virtual ~Airavata_searchExperimentsByApplication_result() throw() {}

  std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_searchExperimentsByApplication_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_searchExperimentsByApplication_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchExperimentsByApplication_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchExperimentsByApplication_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_searchExperimentsByApplication_presult__isset {
  _Airavata_searchExperimentsByApplication_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_searchExperimentsByApplication_presult__isset;

class Airavata_searchExperimentsByApplication_presult {
 public:


  virtual ~Airavata_searchExperimentsByApplication_presult() throw() {}

  std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_searchExperimentsByApplication_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_searchExperimentsByApplicationWithPagination_args {
 public:

  Airavata_searchExperimentsByApplicationWithPagination_args() : gatewayId(), userName(), applicationId(), limit(0), offset(0) {
  }

  virtual ~Airavata_searchExperimentsByApplicationWithPagination_args() throw() {}

  std::string gatewayId;
  std::string userName;
  std::string applicationId;
  int32_t limit;
  int32_t offset;

  void __set_gatewayId(const std::string& val) {
    gatewayId = val;
  }

  void __set_userName(const std::string& val) {
    userName = val;
  }

  void __set_applicationId(const std::string& val) {
    applicationId = val;
  }

  void __set_limit(const int32_t val) {
    limit = val;
  }

  void __set_offset(const int32_t val) {
    offset = val;
  }

  bool operator == (const Airavata_searchExperimentsByApplicationWithPagination_args & rhs) const
  {
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(userName == rhs.userName))
      return false;
    if (!(applicationId == rhs.applicationId))
      return false;
    if (!(limit == rhs.limit))
      return false;
    if (!(offset == rhs.offset))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchExperimentsByApplicationWithPagination_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchExperimentsByApplicationWithPagination_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_searchExperimentsByApplicationWithPagination_pargs {
 public:


  virtual ~Airavata_searchExperimentsByApplicationWithPagination_pargs() throw() {}

  const std::string* gatewayId;
  const std::string* userName;
  const std::string* applicationId;
  const int32_t* limit;
  const int32_t* offset;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_searchExperimentsByApplicationWithPagination_result__isset {
  _Airavata_searchExperimentsByApplicationWithPagination_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_searchExperimentsByApplicationWithPagination_result__isset;

class Airavata_searchExperimentsByApplicationWithPagination_result {
 public:

  Airavata_searchExperimentsByApplicationWithPagination_result() {
  }

  virtual ~Airavata_searchExperimentsByApplicationWithPagination_result() throw() {}

  std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_searchExperimentsByApplicationWithPagination_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_searchExperimentsByApplicationWithPagination_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchExperimentsByApplicationWithPagination_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchExperimentsByApplicationWithPagination_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_searchExperimentsByApplicationWithPagination_presult__isset {
  _Airavata_searchExperimentsByApplicationWithPagination_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_searchExperimentsByApplicationWithPagination_presult__isset;

class Airavata_searchExperimentsByApplicationWithPagination_presult {
 public:


  virtual ~Airavata_searchExperimentsByApplicationWithPagination_presult() throw() {}

  std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_searchExperimentsByApplicationWithPagination_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_searchExperimentsByStatus_args {
 public:

  Airavata_searchExperimentsByStatus_args() : gatewayId(), userName(), experimentState(( ::apache::airavata::model::workspace::experiment::ExperimentState::type)0) {
  }

  virtual ~Airavata_searchExperimentsByStatus_args() throw() {}

  std::string gatewayId;
  std::string userName;
   ::apache::airavata::model::workspace::experiment::ExperimentState::type experimentState;

  void __set_gatewayId(const std::string& val) {
    gatewayId = val;
  }

  void __set_userName(const std::string& val) {
    userName = val;
  }

  void __set_experimentState(const  ::apache::airavata::model::workspace::experiment::ExperimentState::type val) {
    experimentState = val;
  }

  bool operator == (const Airavata_searchExperimentsByStatus_args & rhs) const
  {
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(userName == rhs.userName))
      return false;
    if (!(experimentState == rhs.experimentState))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchExperimentsByStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchExperimentsByStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_searchExperimentsByStatus_pargs {
 public:


  virtual ~Airavata_searchExperimentsByStatus_pargs() throw() {}

  const std::string* gatewayId;
  const std::string* userName;
  const  ::apache::airavata::model::workspace::experiment::ExperimentState::type* experimentState;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_searchExperimentsByStatus_result__isset {
  _Airavata_searchExperimentsByStatus_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_searchExperimentsByStatus_result__isset;

class Airavata_searchExperimentsByStatus_result {
 public:

  Airavata_searchExperimentsByStatus_result() {
  }

  virtual ~Airavata_searchExperimentsByStatus_result() throw() {}

  std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_searchExperimentsByStatus_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_searchExperimentsByStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchExperimentsByStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchExperimentsByStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_searchExperimentsByStatus_presult__isset {
  _Airavata_searchExperimentsByStatus_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_searchExperimentsByStatus_presult__isset;

class Airavata_searchExperimentsByStatus_presult {
 public:


  virtual ~Airavata_searchExperimentsByStatus_presult() throw() {}

  std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_searchExperimentsByStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_searchExperimentsByStatusWithPagination_args {
 public:

  Airavata_searchExperimentsByStatusWithPagination_args() : gatewayId(), userName(), experimentState(( ::apache::airavata::model::workspace::experiment::ExperimentState::type)0), limit(0), offset(0) {
  }

  virtual ~Airavata_searchExperimentsByStatusWithPagination_args() throw() {}

  std::string gatewayId;
  std::string userName;
   ::apache::airavata::model::workspace::experiment::ExperimentState::type experimentState;
  int32_t limit;
  int32_t offset;

  void __set_gatewayId(const std::string& val) {
    gatewayId = val;
  }

  void __set_userName(const std::string& val) {
    userName = val;
  }

  void __set_experimentState(const  ::apache::airavata::model::workspace::experiment::ExperimentState::type val) {
    experimentState = val;
  }

  void __set_limit(const int32_t val) {
    limit = val;
  }

  void __set_offset(const int32_t val) {
    offset = val;
  }

  bool operator == (const Airavata_searchExperimentsByStatusWithPagination_args & rhs) const
  {
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(userName == rhs.userName))
      return false;
    if (!(experimentState == rhs.experimentState))
      return false;
    if (!(limit == rhs.limit))
      return false;
    if (!(offset == rhs.offset))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchExperimentsByStatusWithPagination_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchExperimentsByStatusWithPagination_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_searchExperimentsByStatusWithPagination_pargs {
 public:


  virtual ~Airavata_searchExperimentsByStatusWithPagination_pargs() throw() {}

  const std::string* gatewayId;
  const std::string* userName;
  const  ::apache::airavata::model::workspace::experiment::ExperimentState::type* experimentState;
  const int32_t* limit;
  const int32_t* offset;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_searchExperimentsByStatusWithPagination_result__isset {
  _Airavata_searchExperimentsByStatusWithPagination_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_searchExperimentsByStatusWithPagination_result__isset;

class Airavata_searchExperimentsByStatusWithPagination_result {
 public:

  Airavata_searchExperimentsByStatusWithPagination_result() {
  }

  virtual ~Airavata_searchExperimentsByStatusWithPagination_result() throw() {}

  std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_searchExperimentsByStatusWithPagination_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_searchExperimentsByStatusWithPagination_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchExperimentsByStatusWithPagination_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchExperimentsByStatusWithPagination_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_searchExperimentsByStatusWithPagination_presult__isset {
  _Airavata_searchExperimentsByStatusWithPagination_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_searchExperimentsByStatusWithPagination_presult__isset;

class Airavata_searchExperimentsByStatusWithPagination_presult {
 public:


  virtual ~Airavata_searchExperimentsByStatusWithPagination_presult() throw() {}

  std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_searchExperimentsByStatusWithPagination_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_searchExperimentsByCreationTime_args {
 public:

  Airavata_searchExperimentsByCreationTime_args() : gatewayId(), userName(), fromTime(0), toTime(0) {
  }

  virtual ~Airavata_searchExperimentsByCreationTime_args() throw() {}

  std::string gatewayId;
  std::string userName;
  int64_t fromTime;
  int64_t toTime;

  void __set_gatewayId(const std::string& val) {
    gatewayId = val;
  }

  void __set_userName(const std::string& val) {
    userName = val;
  }

  void __set_fromTime(const int64_t val) {
    fromTime = val;
  }

  void __set_toTime(const int64_t val) {
    toTime = val;
  }

  bool operator == (const Airavata_searchExperimentsByCreationTime_args & rhs) const
  {
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(userName == rhs.userName))
      return false;
    if (!(fromTime == rhs.fromTime))
      return false;
    if (!(toTime == rhs.toTime))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchExperimentsByCreationTime_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchExperimentsByCreationTime_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_searchExperimentsByCreationTime_pargs {
 public:


  virtual ~Airavata_searchExperimentsByCreationTime_pargs() throw() {}

  const std::string* gatewayId;
  const std::string* userName;
  const int64_t* fromTime;
  const int64_t* toTime;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_searchExperimentsByCreationTime_result__isset {
  _Airavata_searchExperimentsByCreationTime_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_searchExperimentsByCreationTime_result__isset;

class Airavata_searchExperimentsByCreationTime_result {
 public:

  Airavata_searchExperimentsByCreationTime_result() {
  }

  virtual ~Airavata_searchExperimentsByCreationTime_result() throw() {}

  std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_searchExperimentsByCreationTime_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_searchExperimentsByCreationTime_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchExperimentsByCreationTime_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchExperimentsByCreationTime_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_searchExperimentsByCreationTime_presult__isset {
  _Airavata_searchExperimentsByCreationTime_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_searchExperimentsByCreationTime_presult__isset;

class Airavata_searchExperimentsByCreationTime_presult {
 public:


  virtual ~Airavata_searchExperimentsByCreationTime_presult() throw() {}

  std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_searchExperimentsByCreationTime_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_searchExperimentsByCreationTimeWithPagination_args {
 public:

  Airavata_searchExperimentsByCreationTimeWithPagination_args() : gatewayId(), userName(), fromTime(0), toTime(0), limit(0), offset(0) {
  }

  virtual ~Airavata_searchExperimentsByCreationTimeWithPagination_args() throw() {}

  std::string gatewayId;
  std::string userName;
  int64_t fromTime;
  int64_t toTime;
  int32_t limit;
  int32_t offset;

  void __set_gatewayId(const std::string& val) {
    gatewayId = val;
  }

  void __set_userName(const std::string& val) {
    userName = val;
  }

  void __set_fromTime(const int64_t val) {
    fromTime = val;
  }

  void __set_toTime(const int64_t val) {
    toTime = val;
  }

  void __set_limit(const int32_t val) {
    limit = val;
  }

  void __set_offset(const int32_t val) {
    offset = val;
  }

  bool operator == (const Airavata_searchExperimentsByCreationTimeWithPagination_args & rhs) const
  {
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(userName == rhs.userName))
      return false;
    if (!(fromTime == rhs.fromTime))
      return false;
    if (!(toTime == rhs.toTime))
      return false;
    if (!(limit == rhs.limit))
      return false;
    if (!(offset == rhs.offset))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchExperimentsByCreationTimeWithPagination_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchExperimentsByCreationTimeWithPagination_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_searchExperimentsByCreationTimeWithPagination_pargs {
 public:


  virtual ~Airavata_searchExperimentsByCreationTimeWithPagination_pargs() throw() {}

  const std::string* gatewayId;
  const std::string* userName;
  const int64_t* fromTime;
  const int64_t* toTime;
  const int32_t* limit;
  const int32_t* offset;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_searchExperimentsByCreationTimeWithPagination_result__isset {
  _Airavata_searchExperimentsByCreationTimeWithPagination_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_searchExperimentsByCreationTimeWithPagination_result__isset;

class Airavata_searchExperimentsByCreationTimeWithPagination_result {
 public:

  Airavata_searchExperimentsByCreationTimeWithPagination_result() {
  }

  virtual ~Airavata_searchExperimentsByCreationTimeWithPagination_result() throw() {}

  std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_searchExperimentsByCreationTimeWithPagination_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_searchExperimentsByCreationTimeWithPagination_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchExperimentsByCreationTimeWithPagination_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchExperimentsByCreationTimeWithPagination_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_searchExperimentsByCreationTimeWithPagination_presult__isset {
  _Airavata_searchExperimentsByCreationTimeWithPagination_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_searchExperimentsByCreationTimeWithPagination_presult__isset;

class Airavata_searchExperimentsByCreationTimeWithPagination_presult {
 public:


  virtual ~Airavata_searchExperimentsByCreationTimeWithPagination_presult() throw() {}

  std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_searchExperimentsByCreationTimeWithPagination_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getAllExperimentsInProject_args {
 public:

  Airavata_getAllExperimentsInProject_args() : projectId() {
  }

  virtual ~Airavata_getAllExperimentsInProject_args() throw() {}

  std::string projectId;

  void __set_projectId(const std::string& val) {
    projectId = val;
  }

  bool operator == (const Airavata_getAllExperimentsInProject_args & rhs) const
  {
    if (!(projectId == rhs.projectId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllExperimentsInProject_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllExperimentsInProject_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getAllExperimentsInProject_pargs {
 public:


  virtual ~Airavata_getAllExperimentsInProject_pargs() throw() {}

  const std::string* projectId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllExperimentsInProject_result__isset {
  _Airavata_getAllExperimentsInProject_result__isset() : success(false), ire(false), ace(false), ase(false), pnfe(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
  bool pnfe;
} _Airavata_getAllExperimentsInProject_result__isset;

class Airavata_getAllExperimentsInProject_result {
 public:

  Airavata_getAllExperimentsInProject_result() {
  }

  virtual ~Airavata_getAllExperimentsInProject_result() throw() {}

  std::vector< ::apache::airavata::model::workspace::experiment::Experiment>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::ProjectNotFoundException pnfe;

  _Airavata_getAllExperimentsInProject_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::workspace::experiment::Experiment> & val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  void __set_pnfe(const  ::apache::airavata::api::error::ProjectNotFoundException& val) {
    pnfe = val;
  }

  bool operator == (const Airavata_getAllExperimentsInProject_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(pnfe == rhs.pnfe))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllExperimentsInProject_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllExperimentsInProject_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllExperimentsInProject_presult__isset {
  _Airavata_getAllExperimentsInProject_presult__isset() : success(false), ire(false), ace(false), ase(false), pnfe(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
  bool pnfe;
} _Airavata_getAllExperimentsInProject_presult__isset;

class Airavata_getAllExperimentsInProject_presult {
 public:


  virtual ~Airavata_getAllExperimentsInProject_presult() throw() {}

  std::vector< ::apache::airavata::model::workspace::experiment::Experiment> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::ProjectNotFoundException pnfe;

  _Airavata_getAllExperimentsInProject_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getAllExperimentsInProjectWithPagination_args {
 public:

  Airavata_getAllExperimentsInProjectWithPagination_args() : projectId(), limit(0), offset(0) {
  }

  virtual ~Airavata_getAllExperimentsInProjectWithPagination_args() throw() {}

  std::string projectId;
  int32_t limit;
  int32_t offset;

  void __set_projectId(const std::string& val) {
    projectId = val;
  }

  void __set_limit(const int32_t val) {
    limit = val;
  }

  void __set_offset(const int32_t val) {
    offset = val;
  }

  bool operator == (const Airavata_getAllExperimentsInProjectWithPagination_args & rhs) const
  {
    if (!(projectId == rhs.projectId))
      return false;
    if (!(limit == rhs.limit))
      return false;
    if (!(offset == rhs.offset))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllExperimentsInProjectWithPagination_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllExperimentsInProjectWithPagination_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getAllExperimentsInProjectWithPagination_pargs {
 public:


  virtual ~Airavata_getAllExperimentsInProjectWithPagination_pargs() throw() {}

  const std::string* projectId;
  const int32_t* limit;
  const int32_t* offset;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllExperimentsInProjectWithPagination_result__isset {
  _Airavata_getAllExperimentsInProjectWithPagination_result__isset() : success(false), ire(false), ace(false), ase(false), pnfe(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
  bool pnfe;
} _Airavata_getAllExperimentsInProjectWithPagination_result__isset;

class Airavata_getAllExperimentsInProjectWithPagination_result {
 public:

  Airavata_getAllExperimentsInProjectWithPagination_result() {
  }

  virtual ~Airavata_getAllExperimentsInProjectWithPagination_result() throw() {}

  std::vector< ::apache::airavata::model::workspace::experiment::Experiment>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::ProjectNotFoundException pnfe;

  _Airavata_getAllExperimentsInProjectWithPagination_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::workspace::experiment::Experiment> & val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  void __set_pnfe(const  ::apache::airavata::api::error::ProjectNotFoundException& val) {
    pnfe = val;
  }

  bool operator == (const Airavata_getAllExperimentsInProjectWithPagination_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(pnfe == rhs.pnfe))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllExperimentsInProjectWithPagination_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllExperimentsInProjectWithPagination_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllExperimentsInProjectWithPagination_presult__isset {
  _Airavata_getAllExperimentsInProjectWithPagination_presult__isset() : success(false), ire(false), ace(false), ase(false), pnfe(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
  bool pnfe;
} _Airavata_getAllExperimentsInProjectWithPagination_presult__isset;

class Airavata_getAllExperimentsInProjectWithPagination_presult {
 public:


  virtual ~Airavata_getAllExperimentsInProjectWithPagination_presult() throw() {}

  std::vector< ::apache::airavata::model::workspace::experiment::Experiment> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::ProjectNotFoundException pnfe;

  _Airavata_getAllExperimentsInProjectWithPagination_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getAllUserExperiments_args {
 public:

  Airavata_getAllUserExperiments_args() : gatewayId(), userName() {
  }

  virtual ~Airavata_getAllUserExperiments_args() throw() {}

  std::string gatewayId;
  std::string userName;

  void __set_gatewayId(const std::string& val) {
    gatewayId = val;
  }

  void __set_userName(const std::string& val) {
    userName = val;
  }

  bool operator == (const Airavata_getAllUserExperiments_args & rhs) const
  {
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(userName == rhs.userName))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllUserExperiments_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllUserExperiments_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getAllUserExperiments_pargs {
 public:


  virtual ~Airavata_getAllUserExperiments_pargs() throw() {}

  const std::string* gatewayId;
  const std::string* userName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllUserExperiments_result__isset {
  _Airavata_getAllUserExperiments_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAllUserExperiments_result__isset;

class Airavata_getAllUserExperiments_result {
 public:

  Airavata_getAllUserExperiments_result() {
  }

  virtual ~Airavata_getAllUserExperiments_result() throw() {}

  std::vector< ::apache::airavata::model::workspace::experiment::Experiment>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAllUserExperiments_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::workspace::experiment::Experiment> & val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getAllUserExperiments_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllUserExperiments_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllUserExperiments_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllUserExperiments_presult__isset {
  _Airavata_getAllUserExperiments_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAllUserExperiments_presult__isset;

class Airavata_getAllUserExperiments_presult {
 public:


  virtual ~Airavata_getAllUserExperiments_presult() throw() {}

  std::vector< ::apache::airavata::model::workspace::experiment::Experiment> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAllUserExperiments_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getAllUserExperimentsWithPagination_args {
 public:

  Airavata_getAllUserExperimentsWithPagination_args() : gatewayId(), userName(), limit(0), offset(0) {
  }

  virtual ~Airavata_getAllUserExperimentsWithPagination_args() throw() {}

  std::string gatewayId;
  std::string userName;
  int32_t limit;
  int32_t offset;

  void __set_gatewayId(const std::string& val) {
    gatewayId = val;
  }

  void __set_userName(const std::string& val) {
    userName = val;
  }

  void __set_limit(const int32_t val) {
    limit = val;
  }

  void __set_offset(const int32_t val) {
    offset = val;
  }

  bool operator == (const Airavata_getAllUserExperimentsWithPagination_args & rhs) const
  {
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(userName == rhs.userName))
      return false;
    if (!(limit == rhs.limit))
      return false;
    if (!(offset == rhs.offset))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllUserExperimentsWithPagination_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllUserExperimentsWithPagination_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getAllUserExperimentsWithPagination_pargs {
 public:


  virtual ~Airavata_getAllUserExperimentsWithPagination_pargs() throw() {}

  const std::string* gatewayId;
  const std::string* userName;
  const int32_t* limit;
  const int32_t* offset;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllUserExperimentsWithPagination_result__isset {
  _Airavata_getAllUserExperimentsWithPagination_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAllUserExperimentsWithPagination_result__isset;

class Airavata_getAllUserExperimentsWithPagination_result {
 public:

  Airavata_getAllUserExperimentsWithPagination_result() {
  }

  virtual ~Airavata_getAllUserExperimentsWithPagination_result() throw() {}

  std::vector< ::apache::airavata::model::workspace::experiment::Experiment>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAllUserExperimentsWithPagination_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::workspace::experiment::Experiment> & val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getAllUserExperimentsWithPagination_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllUserExperimentsWithPagination_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllUserExperimentsWithPagination_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllUserExperimentsWithPagination_presult__isset {
  _Airavata_getAllUserExperimentsWithPagination_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAllUserExperimentsWithPagination_presult__isset;

class Airavata_getAllUserExperimentsWithPagination_presult {
 public:


  virtual ~Airavata_getAllUserExperimentsWithPagination_presult() throw() {}

  std::vector< ::apache::airavata::model::workspace::experiment::Experiment> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAllUserExperimentsWithPagination_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_createExperiment_args {
 public:

  Airavata_createExperiment_args() : gatewayId() {
  }

  virtual ~Airavata_createExperiment_args() throw() {}

  std::string gatewayId;
   ::apache::airavata::model::workspace::experiment::Experiment experiment;

  void __set_gatewayId(const std::string& val) {
    gatewayId = val;
  }

  void __set_experiment(const  ::apache::airavata::model::workspace::experiment::Experiment& val) {
    experiment = val;
  }

  bool operator == (const Airavata_createExperiment_args & rhs) const
  {
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(experiment == rhs.experiment))
      return false;
    return true;
  }
  bool operator != (const Airavata_createExperiment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_createExperiment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_createExperiment_pargs {
 public:


  virtual ~Airavata_createExperiment_pargs() throw() {}

  const std::string* gatewayId;
  const  ::apache::airavata::model::workspace::experiment::Experiment* experiment;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_createExperiment_result__isset {
  _Airavata_createExperiment_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_createExperiment_result__isset;

class Airavata_createExperiment_result {
 public:

  Airavata_createExperiment_result() : success() {
  }

  virtual ~Airavata_createExperiment_result() throw() {}

  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_createExperiment_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_createExperiment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_createExperiment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_createExperiment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_createExperiment_presult__isset {
  _Airavata_createExperiment_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_createExperiment_presult__isset;

class Airavata_createExperiment_presult {
 public:


  virtual ~Airavata_createExperiment_presult() throw() {}

  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_createExperiment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getExperiment_args {
 public:

  Airavata_getExperiment_args() : airavataExperimentId() {
  }

  virtual ~Airavata_getExperiment_args() throw() {}

  std::string airavataExperimentId;

  void __set_airavataExperimentId(const std::string& val) {
    airavataExperimentId = val;
  }

  bool operator == (const Airavata_getExperiment_args & rhs) const
  {
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getExperiment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getExperiment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getExperiment_pargs {
 public:


  virtual ~Airavata_getExperiment_pargs() throw() {}

  const std::string* airavataExperimentId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getExperiment_result__isset {
  _Airavata_getExperiment_result__isset() : success(false), ire(false), enf(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_getExperiment_result__isset;

class Airavata_getExperiment_result {
 public:

  Airavata_getExperiment_result() {
  }

  virtual ~Airavata_getExperiment_result() throw() {}

   ::apache::airavata::model::workspace::experiment::Experiment success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getExperiment_result__isset __isset;

  void __set_success(const  ::apache::airavata::model::workspace::experiment::Experiment& val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_enf(const  ::apache::airavata::api::error::ExperimentNotFoundException& val) {
    enf = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getExperiment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(enf == rhs.enf))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getExperiment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getExperiment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getExperiment_presult__isset {
  _Airavata_getExperiment_presult__isset() : success(false), ire(false), enf(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_getExperiment_presult__isset;

class Airavata_getExperiment_presult {
 public:


  virtual ~Airavata_getExperiment_presult() throw() {}

   ::apache::airavata::model::workspace::experiment::Experiment* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getExperiment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_updateExperiment_args {
 public:

  Airavata_updateExperiment_args() : airavataExperimentId() {
  }

  virtual ~Airavata_updateExperiment_args() throw() {}

  std::string airavataExperimentId;
   ::apache::airavata::model::workspace::experiment::Experiment experiment;

  void __set_airavataExperimentId(const std::string& val) {
    airavataExperimentId = val;
  }

  void __set_experiment(const  ::apache::airavata::model::workspace::experiment::Experiment& val) {
    experiment = val;
  }

  bool operator == (const Airavata_updateExperiment_args & rhs) const
  {
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    if (!(experiment == rhs.experiment))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateExperiment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateExperiment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateExperiment_pargs {
 public:


  virtual ~Airavata_updateExperiment_pargs() throw() {}

  const std::string* airavataExperimentId;
  const  ::apache::airavata::model::workspace::experiment::Experiment* experiment;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateExperiment_result__isset {
  _Airavata_updateExperiment_result__isset() : ire(false), enf(false), ace(false), ase(false) {}
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_updateExperiment_result__isset;

class Airavata_updateExperiment_result {
 public:

  Airavata_updateExperiment_result() {
  }

  virtual ~Airavata_updateExperiment_result() throw() {}

   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateExperiment_result__isset __isset;

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_enf(const  ::apache::airavata::api::error::ExperimentNotFoundException& val) {
    enf = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_updateExperiment_result & rhs) const
  {
    if (!(ire == rhs.ire))
      return false;
    if (!(enf == rhs.enf))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateExperiment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateExperiment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateExperiment_presult__isset {
  _Airavata_updateExperiment_presult__isset() : ire(false), enf(false), ace(false), ase(false) {}
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_updateExperiment_presult__isset;

class Airavata_updateExperiment_presult {
 public:


  virtual ~Airavata_updateExperiment_presult() throw() {}

   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateExperiment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_updateExperimentConfiguration_args {
 public:

  Airavata_updateExperimentConfiguration_args() : airavataExperimentId() {
  }

  virtual ~Airavata_updateExperimentConfiguration_args() throw() {}

  std::string airavataExperimentId;
   ::apache::airavata::model::workspace::experiment::UserConfigurationData userConfiguration;

  void __set_airavataExperimentId(const std::string& val) {
    airavataExperimentId = val;
  }

  void __set_userConfiguration(const  ::apache::airavata::model::workspace::experiment::UserConfigurationData& val) {
    userConfiguration = val;
  }

  bool operator == (const Airavata_updateExperimentConfiguration_args & rhs) const
  {
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    if (!(userConfiguration == rhs.userConfiguration))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateExperimentConfiguration_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateExperimentConfiguration_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateExperimentConfiguration_pargs {
 public:


  virtual ~Airavata_updateExperimentConfiguration_pargs() throw() {}

  const std::string* airavataExperimentId;
  const  ::apache::airavata::model::workspace::experiment::UserConfigurationData* userConfiguration;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateExperimentConfiguration_result {
 public:

  Airavata_updateExperimentConfiguration_result() {
  }

  virtual ~Airavata_updateExperimentConfiguration_result() throw() {}


  bool operator == (const Airavata_updateExperimentConfiguration_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Airavata_updateExperimentConfiguration_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateExperimentConfiguration_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateExperimentConfiguration_presult {
 public:


  virtual ~Airavata_updateExperimentConfiguration_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_updateResourceScheduleing_args {
 public:

  Airavata_updateResourceScheduleing_args() : airavataExperimentId() {
  }

  virtual ~Airavata_updateResourceScheduleing_args() throw() {}

  std::string airavataExperimentId;
   ::apache::airavata::model::workspace::experiment::ComputationalResourceScheduling resourceScheduling;

  void __set_airavataExperimentId(const std::string& val) {
    airavataExperimentId = val;
  }

  void __set_resourceScheduling(const  ::apache::airavata::model::workspace::experiment::ComputationalResourceScheduling& val) {
    resourceScheduling = val;
  }

  bool operator == (const Airavata_updateResourceScheduleing_args & rhs) const
  {
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    if (!(resourceScheduling == rhs.resourceScheduling))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateResourceScheduleing_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateResourceScheduleing_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateResourceScheduleing_pargs {
 public:


  virtual ~Airavata_updateResourceScheduleing_pargs() throw() {}

  const std::string* airavataExperimentId;
  const  ::apache::airavata::model::workspace::experiment::ComputationalResourceScheduling* resourceScheduling;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateResourceScheduleing_result {
 public:

  Airavata_updateResourceScheduleing_result() {
  }

  virtual ~Airavata_updateResourceScheduleing_result() throw() {}


  bool operator == (const Airavata_updateResourceScheduleing_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Airavata_updateResourceScheduleing_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateResourceScheduleing_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateResourceScheduleing_presult {
 public:


  virtual ~Airavata_updateResourceScheduleing_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_validateExperiment_args {
 public:

  Airavata_validateExperiment_args() : airavataExperimentId() {
  }

  virtual ~Airavata_validateExperiment_args() throw() {}

  std::string airavataExperimentId;

  void __set_airavataExperimentId(const std::string& val) {
    airavataExperimentId = val;
  }

  bool operator == (const Airavata_validateExperiment_args & rhs) const
  {
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    return true;
  }
  bool operator != (const Airavata_validateExperiment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_validateExperiment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_validateExperiment_pargs {
 public:


  virtual ~Airavata_validateExperiment_pargs() throw() {}

  const std::string* airavataExperimentId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_validateExperiment_result__isset {
  _Airavata_validateExperiment_result__isset() : success(false), ire(false), enf(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_validateExperiment_result__isset;

class Airavata_validateExperiment_result {
 public:

  Airavata_validateExperiment_result() : success(0) {
  }

  virtual ~Airavata_validateExperiment_result() throw() {}

  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_validateExperiment_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_enf(const  ::apache::airavata::api::error::ExperimentNotFoundException& val) {
    enf = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_validateExperiment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(enf == rhs.enf))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_validateExperiment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_validateExperiment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_validateExperiment_presult__isset {
  _Airavata_validateExperiment_presult__isset() : success(false), ire(false), enf(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_validateExperiment_presult__isset;

class Airavata_validateExperiment_presult {
 public:


  virtual ~Airavata_validateExperiment_presult() throw() {}

  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_validateExperiment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_launchExperiment_args {
 public:

  Airavata_launchExperiment_args() : airavataExperimentId(), airavataCredStoreToken() {
  }

  virtual ~Airavata_launchExperiment_args() throw() {}

  std::string airavataExperimentId;
  std::string airavataCredStoreToken;

  void __set_airavataExperimentId(const std::string& val) {
    airavataExperimentId = val;
  }

  void __set_airavataCredStoreToken(const std::string& val) {
    airavataCredStoreToken = val;
  }

  bool operator == (const Airavata_launchExperiment_args & rhs) const
  {
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    if (!(airavataCredStoreToken == rhs.airavataCredStoreToken))
      return false;
    return true;
  }
  bool operator != (const Airavata_launchExperiment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_launchExperiment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_launchExperiment_pargs {
 public:


  virtual ~Airavata_launchExperiment_pargs() throw() {}

  const std::string* airavataExperimentId;
  const std::string* airavataCredStoreToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_launchExperiment_result__isset {
  _Airavata_launchExperiment_result__isset() : ire(false), enf(false), ace(false), ase(false), lve(false) {}
  bool ire;
  bool enf;
  bool ace;
  bool ase;
  bool lve;
} _Airavata_launchExperiment_result__isset;

class Airavata_launchExperiment_result {
 public:

  Airavata_launchExperiment_result() {
  }

  virtual ~Airavata_launchExperiment_result() throw() {}

   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::LaunchValidationException lve;

  _Airavata_launchExperiment_result__isset __isset;

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_enf(const  ::apache::airavata::api::error::ExperimentNotFoundException& val) {
    enf = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  void __set_lve(const  ::apache::airavata::api::error::LaunchValidationException& val) {
    lve = val;
  }

  bool operator == (const Airavata_launchExperiment_result & rhs) const
  {
    if (!(ire == rhs.ire))
      return false;
    if (!(enf == rhs.enf))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(lve == rhs.lve))
      return false;
    return true;
  }
  bool operator != (const Airavata_launchExperiment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_launchExperiment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_launchExperiment_presult__isset {
  _Airavata_launchExperiment_presult__isset() : ire(false), enf(false), ace(false), ase(false), lve(false) {}
  bool ire;
  bool enf;
  bool ace;
  bool ase;
  bool lve;
} _Airavata_launchExperiment_presult__isset;

class Airavata_launchExperiment_presult {
 public:


  virtual ~Airavata_launchExperiment_presult() throw() {}

   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::LaunchValidationException lve;

  _Airavata_launchExperiment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getExperimentStatus_args {
 public:

  Airavata_getExperimentStatus_args() : airavataExperimentId() {
  }

  virtual ~Airavata_getExperimentStatus_args() throw() {}

  std::string airavataExperimentId;

  void __set_airavataExperimentId(const std::string& val) {
    airavataExperimentId = val;
  }

  bool operator == (const Airavata_getExperimentStatus_args & rhs) const
  {
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getExperimentStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getExperimentStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getExperimentStatus_pargs {
 public:


  virtual ~Airavata_getExperimentStatus_pargs() throw() {}

  const std::string* airavataExperimentId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getExperimentStatus_result__isset {
  _Airavata_getExperimentStatus_result__isset() : success(false), ire(false), enf(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_getExperimentStatus_result__isset;

class Airavata_getExperimentStatus_result {
 public:

  Airavata_getExperimentStatus_result() {
  }

  virtual ~Airavata_getExperimentStatus_result() throw() {}

   ::apache::airavata::model::workspace::experiment::ExperimentStatus success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getExperimentStatus_result__isset __isset;

  void __set_success(const  ::apache::airavata::model::workspace::experiment::ExperimentStatus& val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_enf(const  ::apache::airavata::api::error::ExperimentNotFoundException& val) {
    enf = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getExperimentStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(enf == rhs.enf))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getExperimentStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getExperimentStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getExperimentStatus_presult__isset {
  _Airavata_getExperimentStatus_presult__isset() : success(false), ire(false), enf(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_getExperimentStatus_presult__isset;

class Airavata_getExperimentStatus_presult {
 public:


  virtual ~Airavata_getExperimentStatus_presult() throw() {}

   ::apache::airavata::model::workspace::experiment::ExperimentStatus* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getExperimentStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getExperimentOutputs_args {
 public:

  Airavata_getExperimentOutputs_args() : airavataExperimentId() {
  }

  virtual ~Airavata_getExperimentOutputs_args() throw() {}

  std::string airavataExperimentId;

  void __set_airavataExperimentId(const std::string& val) {
    airavataExperimentId = val;
  }

  bool operator == (const Airavata_getExperimentOutputs_args & rhs) const
  {
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getExperimentOutputs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getExperimentOutputs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getExperimentOutputs_pargs {
 public:


  virtual ~Airavata_getExperimentOutputs_pargs() throw() {}

  const std::string* airavataExperimentId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getExperimentOutputs_result__isset {
  _Airavata_getExperimentOutputs_result__isset() : success(false), ire(false), enf(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_getExperimentOutputs_result__isset;

class Airavata_getExperimentOutputs_result {
 public:

  Airavata_getExperimentOutputs_result() {
  }

  virtual ~Airavata_getExperimentOutputs_result() throw() {}

  std::vector< ::apache::airavata::model::appcatalog::appinterface::OutputDataObjectType>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getExperimentOutputs_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::appcatalog::appinterface::OutputDataObjectType> & val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_enf(const  ::apache::airavata::api::error::ExperimentNotFoundException& val) {
    enf = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getExperimentOutputs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(enf == rhs.enf))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getExperimentOutputs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getExperimentOutputs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getExperimentOutputs_presult__isset {
  _Airavata_getExperimentOutputs_presult__isset() : success(false), ire(false), enf(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_getExperimentOutputs_presult__isset;

class Airavata_getExperimentOutputs_presult {
 public:


  virtual ~Airavata_getExperimentOutputs_presult() throw() {}

  std::vector< ::apache::airavata::model::appcatalog::appinterface::OutputDataObjectType> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getExperimentOutputs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getIntermediateOutputs_args {
 public:

  Airavata_getIntermediateOutputs_args() : airavataExperimentId() {
  }

  virtual ~Airavata_getIntermediateOutputs_args() throw() {}

  std::string airavataExperimentId;

  void __set_airavataExperimentId(const std::string& val) {
    airavataExperimentId = val;
  }

  bool operator == (const Airavata_getIntermediateOutputs_args & rhs) const
  {
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getIntermediateOutputs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getIntermediateOutputs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getIntermediateOutputs_pargs {
 public:


  virtual ~Airavata_getIntermediateOutputs_pargs() throw() {}

  const std::string* airavataExperimentId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getIntermediateOutputs_result__isset {
  _Airavata_getIntermediateOutputs_result__isset() : success(false), ire(false), enf(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_getIntermediateOutputs_result__isset;

class Airavata_getIntermediateOutputs_result {
 public:

  Airavata_getIntermediateOutputs_result() {
  }

  virtual ~Airavata_getIntermediateOutputs_result() throw() {}

  std::vector< ::apache::airavata::model::appcatalog::appinterface::OutputDataObjectType>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getIntermediateOutputs_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::appcatalog::appinterface::OutputDataObjectType> & val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_enf(const  ::apache::airavata::api::error::ExperimentNotFoundException& val) {
    enf = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getIntermediateOutputs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(enf == rhs.enf))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getIntermediateOutputs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getIntermediateOutputs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getIntermediateOutputs_presult__isset {
  _Airavata_getIntermediateOutputs_presult__isset() : success(false), ire(false), enf(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_getIntermediateOutputs_presult__isset;

class Airavata_getIntermediateOutputs_presult {
 public:


  virtual ~Airavata_getIntermediateOutputs_presult() throw() {}

  std::vector< ::apache::airavata::model::appcatalog::appinterface::OutputDataObjectType> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getIntermediateOutputs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getJobStatuses_args {
 public:

  Airavata_getJobStatuses_args() : airavataExperimentId() {
  }

  virtual ~Airavata_getJobStatuses_args() throw() {}

  std::string airavataExperimentId;

  void __set_airavataExperimentId(const std::string& val) {
    airavataExperimentId = val;
  }

  bool operator == (const Airavata_getJobStatuses_args & rhs) const
  {
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getJobStatuses_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getJobStatuses_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getJobStatuses_pargs {
 public:


  virtual ~Airavata_getJobStatuses_pargs() throw() {}

  const std::string* airavataExperimentId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getJobStatuses_result__isset {
  _Airavata_getJobStatuses_result__isset() : success(false), ire(false), enf(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_getJobStatuses_result__isset;

class Airavata_getJobStatuses_result {
 public:

  Airavata_getJobStatuses_result() {
  }

  virtual ~Airavata_getJobStatuses_result() throw() {}

  std::map<std::string,  ::apache::airavata::model::workspace::experiment::JobStatus>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getJobStatuses_result__isset __isset;

  void __set_success(const std::map<std::string,  ::apache::airavata::model::workspace::experiment::JobStatus> & val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_enf(const  ::apache::airavata::api::error::ExperimentNotFoundException& val) {
    enf = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getJobStatuses_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(enf == rhs.enf))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getJobStatuses_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getJobStatuses_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getJobStatuses_presult__isset {
  _Airavata_getJobStatuses_presult__isset() : success(false), ire(false), enf(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_getJobStatuses_presult__isset;

class Airavata_getJobStatuses_presult {
 public:


  virtual ~Airavata_getJobStatuses_presult() throw() {}

  std::map<std::string,  ::apache::airavata::model::workspace::experiment::JobStatus> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getJobStatuses_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getJobDetails_args {
 public:

  Airavata_getJobDetails_args() : airavataExperimentId() {
  }

  virtual ~Airavata_getJobDetails_args() throw() {}

  std::string airavataExperimentId;

  void __set_airavataExperimentId(const std::string& val) {
    airavataExperimentId = val;
  }

  bool operator == (const Airavata_getJobDetails_args & rhs) const
  {
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getJobDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getJobDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getJobDetails_pargs {
 public:


  virtual ~Airavata_getJobDetails_pargs() throw() {}

  const std::string* airavataExperimentId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getJobDetails_result__isset {
  _Airavata_getJobDetails_result__isset() : success(false), ire(false), enf(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_getJobDetails_result__isset;

class Airavata_getJobDetails_result {
 public:

  Airavata_getJobDetails_result() {
  }

  virtual ~Airavata_getJobDetails_result() throw() {}

  std::vector< ::apache::airavata::model::workspace::experiment::JobDetails>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getJobDetails_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::workspace::experiment::JobDetails> & val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_enf(const  ::apache::airavata::api::error::ExperimentNotFoundException& val) {
    enf = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getJobDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(enf == rhs.enf))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getJobDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getJobDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getJobDetails_presult__isset {
  _Airavata_getJobDetails_presult__isset() : success(false), ire(false), enf(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_getJobDetails_presult__isset;

class Airavata_getJobDetails_presult {
 public:


  virtual ~Airavata_getJobDetails_presult() throw() {}

  std::vector< ::apache::airavata::model::workspace::experiment::JobDetails> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getJobDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getDataTransferDetails_args {
 public:

  Airavata_getDataTransferDetails_args() : airavataExperimentId() {
  }

  virtual ~Airavata_getDataTransferDetails_args() throw() {}

  std::string airavataExperimentId;

  void __set_airavataExperimentId(const std::string& val) {
    airavataExperimentId = val;
  }

  bool operator == (const Airavata_getDataTransferDetails_args & rhs) const
  {
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getDataTransferDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getDataTransferDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getDataTransferDetails_pargs {
 public:


  virtual ~Airavata_getDataTransferDetails_pargs() throw() {}

  const std::string* airavataExperimentId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getDataTransferDetails_result__isset {
  _Airavata_getDataTransferDetails_result__isset() : success(false), ire(false), enf(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_getDataTransferDetails_result__isset;

class Airavata_getDataTransferDetails_result {
 public:

  Airavata_getDataTransferDetails_result() {
  }

  virtual ~Airavata_getDataTransferDetails_result() throw() {}

  std::vector< ::apache::airavata::model::workspace::experiment::DataTransferDetails>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getDataTransferDetails_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::workspace::experiment::DataTransferDetails> & val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_enf(const  ::apache::airavata::api::error::ExperimentNotFoundException& val) {
    enf = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getDataTransferDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(enf == rhs.enf))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getDataTransferDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getDataTransferDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getDataTransferDetails_presult__isset {
  _Airavata_getDataTransferDetails_presult__isset() : success(false), ire(false), enf(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_getDataTransferDetails_presult__isset;

class Airavata_getDataTransferDetails_presult {
 public:


  virtual ~Airavata_getDataTransferDetails_presult() throw() {}

  std::vector< ::apache::airavata::model::workspace::experiment::DataTransferDetails> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getDataTransferDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Airavata_cloneExperiment_args__isset {
  _Airavata_cloneExperiment_args__isset() : existingExperimentID(false), newExperimentName(false) {}
  bool existingExperimentID;
  bool newExperimentName;
} _Airavata_cloneExperiment_args__isset;

class Airavata_cloneExperiment_args {
 public:

  Airavata_cloneExperiment_args() : existingExperimentID(), newExperimentName() {
  }

  virtual ~Airavata_cloneExperiment_args() throw() {}

  std::string existingExperimentID;
  std::string newExperimentName;

  _Airavata_cloneExperiment_args__isset __isset;

  void __set_existingExperimentID(const std::string& val) {
    existingExperimentID = val;
  }

  void __set_newExperimentName(const std::string& val) {
    newExperimentName = val;
  }

  bool operator == (const Airavata_cloneExperiment_args & rhs) const
  {
    if (!(existingExperimentID == rhs.existingExperimentID))
      return false;
    if (!(newExperimentName == rhs.newExperimentName))
      return false;
    return true;
  }
  bool operator != (const Airavata_cloneExperiment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_cloneExperiment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_cloneExperiment_pargs {
 public:


  virtual ~Airavata_cloneExperiment_pargs() throw() {}

  const std::string* existingExperimentID;
  const std::string* newExperimentName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_cloneExperiment_result__isset {
  _Airavata_cloneExperiment_result__isset() : success(false), ire(false), enf(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_cloneExperiment_result__isset;

class Airavata_cloneExperiment_result {
 public:

  Airavata_cloneExperiment_result() : success() {
  }

  virtual ~Airavata_cloneExperiment_result() throw() {}

  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_cloneExperiment_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_enf(const  ::apache::airavata::api::error::ExperimentNotFoundException& val) {
    enf = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_cloneExperiment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(enf == rhs.enf))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_cloneExperiment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_cloneExperiment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_cloneExperiment_presult__isset {
  _Airavata_cloneExperiment_presult__isset() : success(false), ire(false), enf(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_cloneExperiment_presult__isset;

class Airavata_cloneExperiment_presult {
 public:


  virtual ~Airavata_cloneExperiment_presult() throw() {}

  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_cloneExperiment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Airavata_terminateExperiment_args__isset {
  _Airavata_terminateExperiment_args__isset() : airavataExperimentId(false), tokenId(false) {}
  bool airavataExperimentId;
  bool tokenId;
} _Airavata_terminateExperiment_args__isset;

class Airavata_terminateExperiment_args {
 public:

  Airavata_terminateExperiment_args() : airavataExperimentId(), tokenId() {
  }

  virtual ~Airavata_terminateExperiment_args() throw() {}

  std::string airavataExperimentId;
  std::string tokenId;

  _Airavata_terminateExperiment_args__isset __isset;

  void __set_airavataExperimentId(const std::string& val) {
    airavataExperimentId = val;
  }

  void __set_tokenId(const std::string& val) {
    tokenId = val;
  }

  bool operator == (const Airavata_terminateExperiment_args & rhs) const
  {
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    if (!(tokenId == rhs.tokenId))
      return false;
    return true;
  }
  bool operator != (const Airavata_terminateExperiment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_terminateExperiment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_terminateExperiment_pargs {
 public:


  virtual ~Airavata_terminateExperiment_pargs() throw() {}

  const std::string* airavataExperimentId;
  const std::string* tokenId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_terminateExperiment_result__isset {
  _Airavata_terminateExperiment_result__isset() : ire(false), enf(false), ace(false), ase(false) {}
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_terminateExperiment_result__isset;

class Airavata_terminateExperiment_result {
 public:

  Airavata_terminateExperiment_result() {
  }

  virtual ~Airavata_terminateExperiment_result() throw() {}

   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_terminateExperiment_result__isset __isset;

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_enf(const  ::apache::airavata::api::error::ExperimentNotFoundException& val) {
    enf = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_terminateExperiment_result & rhs) const
  {
    if (!(ire == rhs.ire))
      return false;
    if (!(enf == rhs.enf))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_terminateExperiment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_terminateExperiment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_terminateExperiment_presult__isset {
  _Airavata_terminateExperiment_presult__isset() : ire(false), enf(false), ace(false), ase(false) {}
  bool ire;
  bool enf;
  bool ace;
  bool ase;
} _Airavata_terminateExperiment_presult__isset;

class Airavata_terminateExperiment_presult {
 public:


  virtual ~Airavata_terminateExperiment_presult() throw() {}

   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_terminateExperiment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_registerApplicationModule_args {
 public:

  Airavata_registerApplicationModule_args() : gatewayId() {
  }

  virtual ~Airavata_registerApplicationModule_args() throw() {}

  std::string gatewayId;
   ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule applicationModule;

  void __set_gatewayId(const std::string& val) {
    gatewayId = val;
  }

  void __set_applicationModule(const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule& val) {
    applicationModule = val;
  }

  bool operator == (const Airavata_registerApplicationModule_args & rhs) const
  {
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(applicationModule == rhs.applicationModule))
      return false;
    return true;
  }
  bool operator != (const Airavata_registerApplicationModule_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_registerApplicationModule_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_registerApplicationModule_pargs {
 public:


  virtual ~Airavata_registerApplicationModule_pargs() throw() {}

  const std::string* gatewayId;
  const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule* applicationModule;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_registerApplicationModule_result__isset {
  _Airavata_registerApplicationModule_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_registerApplicationModule_result__isset;

class Airavata_registerApplicationModule_result {
 public:

  Airavata_registerApplicationModule_result() : success() {
  }

  virtual ~Airavata_registerApplicationModule_result() throw() {}

  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_registerApplicationModule_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_registerApplicationModule_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_registerApplicationModule_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_registerApplicationModule_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_registerApplicationModule_presult__isset {
  _Airavata_registerApplicationModule_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_registerApplicationModule_presult__isset;

class Airavata_registerApplicationModule_presult {
 public:


  virtual ~Airavata_registerApplicationModule_presult() throw() {}

  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_registerApplicationModule_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getApplicationModule_args {
 public:

  Airavata_getApplicationModule_args() : appModuleId() {
  }

  virtual ~Airavata_getApplicationModule_args() throw() {}

  std::string appModuleId;

  void __set_appModuleId(const std::string& val) {
    appModuleId = val;
  }

  bool operator == (const Airavata_getApplicationModule_args & rhs) const
  {
    if (!(appModuleId == rhs.appModuleId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getApplicationModule_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getApplicationModule_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getApplicationModule_pargs {
 public:


  virtual ~Airavata_getApplicationModule_pargs() throw() {}

  const std::string* appModuleId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getApplicationModule_result__isset {
  _Airavata_getApplicationModule_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getApplicationModule_result__isset;

class Airavata_getApplicationModule_result {
 public:

  Airavata_getApplicationModule_result() {
  }

  virtual ~Airavata_getApplicationModule_result() throw() {}

   ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getApplicationModule_result__isset __isset;

  void __set_success(const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule& val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getApplicationModule_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getApplicationModule_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getApplicationModule_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getApplicationModule_presult__isset {
  _Airavata_getApplicationModule_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getApplicationModule_presult__isset;

class Airavata_getApplicationModule_presult {
 public:


  virtual ~Airavata_getApplicationModule_presult() throw() {}

   ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getApplicationModule_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_updateApplicationModule_args {
 public:

  Airavata_updateApplicationModule_args() : appModuleId() {
  }

  virtual ~Airavata_updateApplicationModule_args() throw() {}

  std::string appModuleId;
   ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule applicationModule;

  void __set_appModuleId(const std::string& val) {
    appModuleId = val;
  }

  void __set_applicationModule(const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule& val) {
    applicationModule = val;
  }

  bool operator == (const Airavata_updateApplicationModule_args & rhs) const
  {
    if (!(appModuleId == rhs.appModuleId))
      return false;
    if (!(applicationModule == rhs.applicationModule))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateApplicationModule_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateApplicationModule_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateApplicationModule_pargs {
 public:


  virtual ~Airavata_updateApplicationModule_pargs() throw() {}

  const std::string* appModuleId;
  const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule* applicationModule;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateApplicationModule_result__isset {
  _Airavata_updateApplicationModule_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateApplicationModule_result__isset;

class Airavata_updateApplicationModule_result {
 public:

  Airavata_updateApplicationModule_result() : success(0) {
  }

  virtual ~Airavata_updateApplicationModule_result() throw() {}

  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateApplicationModule_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_updateApplicationModule_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateApplicationModule_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateApplicationModule_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateApplicationModule_presult__isset {
  _Airavata_updateApplicationModule_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateApplicationModule_presult__isset;

class Airavata_updateApplicationModule_presult {
 public:


  virtual ~Airavata_updateApplicationModule_presult() throw() {}

  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateApplicationModule_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getAllAppModules_args {
 public:

  Airavata_getAllAppModules_args() : gatewayId() {
  }

  virtual ~Airavata_getAllAppModules_args() throw() {}

  std::string gatewayId;

  void __set_gatewayId(const std::string& val) {
    gatewayId = val;
  }

  bool operator == (const Airavata_getAllAppModules_args & rhs) const
  {
    if (!(gatewayId == rhs.gatewayId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllAppModules_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllAppModules_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getAllAppModules_pargs {
 public:


  virtual ~Airavata_getAllAppModules_pargs() throw() {}

  const std::string* gatewayId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllAppModules_result__isset {
  _Airavata_getAllAppModules_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAllAppModules_result__isset;

class Airavata_getAllAppModules_result {
 public:

  Airavata_getAllAppModules_result() {
  }

  virtual ~Airavata_getAllAppModules_result() throw() {}

  std::vector< ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAllAppModules_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule> & val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getAllAppModules_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllAppModules_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllAppModules_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllAppModules_presult__isset {
  _Airavata_getAllAppModules_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAllAppModules_presult__isset;

class Airavata_getAllAppModules_presult {
 public:


  virtual ~Airavata_getAllAppModules_presult() throw() {}

  std::vector< ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAllAppModules_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_deleteApplicationModule_args {
 public:

  Airavata_deleteApplicationModule_args() : appModuleId() {
  }

  virtual ~Airavata_deleteApplicationModule_args() throw() {}

  std::string appModuleId;

  void __set_appModuleId(const std::string& val) {
    appModuleId = val;
  }

  bool operator == (const Airavata_deleteApplicationModule_args & rhs) const
  {
    if (!(appModuleId == rhs.appModuleId))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteApplicationModule_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteApplicationModule_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_deleteApplicationModule_pargs {
 public:


  virtual ~Airavata_deleteApplicationModule_pargs() throw() {}

  const std::string* appModuleId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_deleteApplicationModule_result__isset {
  _Airavata_deleteApplicationModule_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_deleteApplicationModule_result__isset;

class Airavata_deleteApplicationModule_result {
 public:

  Airavata_deleteApplicationModule_result() : success(0) {
  }

  virtual ~Airavata_deleteApplicationModule_result() throw() {}

  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_deleteApplicationModule_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_deleteApplicationModule_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteApplicationModule_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteApplicationModule_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_deleteApplicationModule_presult__isset {
  _Airavata_deleteApplicationModule_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_deleteApplicationModule_presult__isset;

class Airavata_deleteApplicationModule_presult {
 public:


  virtual ~Airavata_deleteApplicationModule_presult() throw() {}

  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_deleteApplicationModule_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_registerApplicationDeployment_args {
 public:

  Airavata_registerApplicationDeployment_args() : gatewayId() {
  }

  virtual ~Airavata_registerApplicationDeployment_args() throw() {}

  std::string gatewayId;
   ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription applicationDeployment;

  void __set_gatewayId(const std::string& val) {
    gatewayId = val;
  }

  void __set_applicationDeployment(const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription& val) {
    applicationDeployment = val;
  }

  bool operator == (const Airavata_registerApplicationDeployment_args & rhs) const
  {
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(applicationDeployment == rhs.applicationDeployment))
      return false;
    return true;
  }
  bool operator != (const Airavata_registerApplicationDeployment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_registerApplicationDeployment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_registerApplicationDeployment_pargs {
 public:


  virtual ~Airavata_registerApplicationDeployment_pargs() throw() {}

  const std::string* gatewayId;
  const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription* applicationDeployment;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_registerApplicationDeployment_result__isset {
  _Airavata_registerApplicationDeployment_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_registerApplicationDeployment_result__isset;

class Airavata_registerApplicationDeployment_result {
 public:

  Airavata_registerApplicationDeployment_result() : success() {
  }

  virtual ~Airavata_registerApplicationDeployment_result() throw() {}

  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_registerApplicationDeployment_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_registerApplicationDeployment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_registerApplicationDeployment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_registerApplicationDeployment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_registerApplicationDeployment_presult__isset {
  _Airavata_registerApplicationDeployment_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_registerApplicationDeployment_presult__isset;

class Airavata_registerApplicationDeployment_presult {
 public:


  virtual ~Airavata_registerApplicationDeployment_presult() throw() {}

  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_registerApplicationDeployment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getApplicationDeployment_args {
 public:

  Airavata_getApplicationDeployment_args() : appDeploymentId() {
  }

  virtual ~Airavata_getApplicationDeployment_args() throw() {}

  std::string appDeploymentId;

  void __set_appDeploymentId(const std::string& val) {
    appDeploymentId = val;
  }

  bool operator == (const Airavata_getApplicationDeployment_args & rhs) const
  {
    if (!(appDeploymentId == rhs.appDeploymentId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getApplicationDeployment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getApplicationDeployment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getApplicationDeployment_pargs {
 public:


  virtual ~Airavata_getApplicationDeployment_pargs() throw() {}

  const std::string* appDeploymentId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getApplicationDeployment_result__isset {
  _Airavata_getApplicationDeployment_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getApplicationDeployment_result__isset;

class Airavata_getApplicationDeployment_result {
 public:

  Airavata_getApplicationDeployment_result() {
  }

  virtual ~Airavata_getApplicationDeployment_result() throw() {}

   ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getApplicationDeployment_result__isset __isset;

  void __set_success(const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription& val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getApplicationDeployment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getApplicationDeployment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getApplicationDeployment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getApplicationDeployment_presult__isset {
  _Airavata_getApplicationDeployment_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getApplicationDeployment_presult__isset;

class Airavata_getApplicationDeployment_presult {
 public:


  virtual ~Airavata_getApplicationDeployment_presult() throw() {}

   ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getApplicationDeployment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_updateApplicationDeployment_args {
 public:

  Airavata_updateApplicationDeployment_args() : appDeploymentId() {
  }

  virtual ~Airavata_updateApplicationDeployment_args() throw() {}

  std::string appDeploymentId;
   ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription applicationDeployment;

  void __set_appDeploymentId(const std::string& val) {
    appDeploymentId = val;
  }

  void __set_applicationDeployment(const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription& val) {
    applicationDeployment = val;
  }

  bool operator == (const Airavata_updateApplicationDeployment_args & rhs) const
  {
    if (!(appDeploymentId == rhs.appDeploymentId))
      return false;
    if (!(applicationDeployment == rhs.applicationDeployment))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateApplicationDeployment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateApplicationDeployment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateApplicationDeployment_pargs {
 public:


  virtual ~Airavata_updateApplicationDeployment_pargs() throw() {}

  const std::string* appDeploymentId;
  const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription* applicationDeployment;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateApplicationDeployment_result__isset {
  _Airavata_updateApplicationDeployment_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateApplicationDeployment_result__isset;

class Airavata_updateApplicationDeployment_result {
 public:

  Airavata_updateApplicationDeployment_result() : success(0) {
  }

  virtual ~Airavata_updateApplicationDeployment_result() throw() {}

  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateApplicationDeployment_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_updateApplicationDeployment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateApplicationDeployment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateApplicationDeployment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateApplicationDeployment_presult__isset {
  _Airavata_updateApplicationDeployment_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateApplicationDeployment_presult__isset;

class Airavata_updateApplicationDeployment_presult {
 public:


  virtual ~Airavata_updateApplicationDeployment_presult() throw() {}

  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateApplicationDeployment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_deleteApplicationDeployment_args {
 public:

  Airavata_deleteApplicationDeployment_args() : appDeploymentId() {
  }

  virtual ~Airavata_deleteApplicationDeployment_args() throw() {}

  std::string appDeploymentId;

  void __set_appDeploymentId(const std::string& val) {
    appDeploymentId = val;
  }

  bool operator == (const Airavata_deleteApplicationDeployment_args & rhs) const
  {
    if (!(appDeploymentId == rhs.appDeploymentId))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteApplicationDeployment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteApplicationDeployment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_deleteApplicationDeployment_pargs {
 public:


  virtual ~Airavata_deleteApplicationDeployment_pargs() throw() {}

  const std::string* appDeploymentId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_deleteApplicationDeployment_result__isset {
  _Airavata_deleteApplicationDeployment_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_deleteApplicationDeployment_result__isset;

class Airavata_deleteApplicationDeployment_result {
 public:

  Airavata_deleteApplicationDeployment_result() : success(0) {
  }

  virtual ~Airavata_deleteApplicationDeployment_result() throw() {}

  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_deleteApplicationDeployment_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_deleteApplicationDeployment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteApplicationDeployment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteApplicationDeployment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_deleteApplicationDeployment_presult__isset {
  _Airavata_deleteApplicationDeployment_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_deleteApplicationDeployment_presult__isset;

class Airavata_deleteApplicationDeployment_presult {
 public:


  virtual ~Airavata_deleteApplicationDeployment_presult() throw() {}

  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_deleteApplicationDeployment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getAllApplicationDeployments_args {
 public:

  Airavata_getAllApplicationDeployments_args() : gatewayId() {
  }

  virtual ~Airavata_getAllApplicationDeployments_args() throw() {}

  std::string gatewayId;

  void __set_gatewayId(const std::string& val) {
    gatewayId = val;
  }

  bool operator == (const Airavata_getAllApplicationDeployments_args & rhs) const
  {
    if (!(gatewayId == rhs.gatewayId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllApplicationDeployments_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllApplicationDeployments_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getAllApplicationDeployments_pargs {
 public:


  virtual ~Airavata_getAllApplicationDeployments_pargs() throw() {}

  const std::string* gatewayId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllApplicationDeployments_result__isset {
  _Airavata_getAllApplicationDeployments_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAllApplicationDeployments_result__isset;

class Airavata_getAllApplicationDeployments_result {
 public:

  Airavata_getAllApplicationDeployments_result() {
  }

  virtual ~Airavata_getAllApplicationDeployments_result() throw() {}

  std::vector< ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAllApplicationDeployments_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription> & val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getAllApplicationDeployments_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllApplicationDeployments_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllApplicationDeployments_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllApplicationDeployments_presult__isset {
  _Airavata_getAllApplicationDeployments_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAllApplicationDeployments_presult__isset;

class Airavata_getAllApplicationDeployments_presult {
 public:


  virtual ~Airavata_getAllApplicationDeployments_presult() throw() {}

  std::vector< ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAllApplicationDeployments_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getAppModuleDeployedResources_args {
 public:

  Airavata_getAppModuleDeployedResources_args() : appModuleId() {
  }

  virtual ~Airavata_getAppModuleDeployedResources_args() throw() {}

  std::string appModuleId;

  void __set_appModuleId(const std::string& val) {
    appModuleId = val;
  }

  bool operator == (const Airavata_getAppModuleDeployedResources_args & rhs) const
  {
    if (!(appModuleId == rhs.appModuleId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAppModuleDeployedResources_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAppModuleDeployedResources_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getAppModuleDeployedResources_pargs {
 public:


  virtual ~Airavata_getAppModuleDeployedResources_pargs() throw() {}

  const std::string* appModuleId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAppModuleDeployedResources_result__isset {
  _Airavata_getAppModuleDeployedResources_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAppModuleDeployedResources_result__isset;

class Airavata_getAppModuleDeployedResources_result {
 public:

  Airavata_getAppModuleDeployedResources_result() {
  }

  virtual ~Airavata_getAppModuleDeployedResources_result() throw() {}

  std::vector<std::string>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAppModuleDeployedResources_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getAppModuleDeployedResources_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAppModuleDeployedResources_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAppModuleDeployedResources_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAppModuleDeployedResources_presult__isset {
  _Airavata_getAppModuleDeployedResources_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAppModuleDeployedResources_presult__isset;

class Airavata_getAppModuleDeployedResources_presult {
 public:


  virtual ~Airavata_getAppModuleDeployedResources_presult() throw() {}

  std::vector<std::string> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAppModuleDeployedResources_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_registerApplicationInterface_args {
 public:

  Airavata_registerApplicationInterface_args() : gatewayId() {
  }

  virtual ~Airavata_registerApplicationInterface_args() throw() {}

  std::string gatewayId;
   ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription applicationInterface;

  void __set_gatewayId(const std::string& val) {
    gatewayId = val;
  }

  void __set_applicationInterface(const  ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription& val) {
    applicationInterface = val;
  }

  bool operator == (const Airavata_registerApplicationInterface_args & rhs) const
  {
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(applicationInterface == rhs.applicationInterface))
      return false;
    return true;
  }
  bool operator != (const Airavata_registerApplicationInterface_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_registerApplicationInterface_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_registerApplicationInterface_pargs {
 public:


  virtual ~Airavata_registerApplicationInterface_pargs() throw() {}

  const std::string* gatewayId;
  const  ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription* applicationInterface;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_registerApplicationInterface_result__isset {
  _Airavata_registerApplicationInterface_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_registerApplicationInterface_result__isset;

class Airavata_registerApplicationInterface_result {
 public:

  Airavata_registerApplicationInterface_result() : success() {
  }

  virtual ~Airavata_registerApplicationInterface_result() throw() {}

  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_registerApplicationInterface_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_registerApplicationInterface_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_registerApplicationInterface_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_registerApplicationInterface_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_registerApplicationInterface_presult__isset {
  _Airavata_registerApplicationInterface_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_registerApplicationInterface_presult__isset;

class Airavata_registerApplicationInterface_presult {
 public:


  virtual ~Airavata_registerApplicationInterface_presult() throw() {}

  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_registerApplicationInterface_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getApplicationInterface_args {
 public:

  Airavata_getApplicationInterface_args() : appInterfaceId() {
  }

  virtual ~Airavata_getApplicationInterface_args() throw() {}

  std::string appInterfaceId;

  void __set_appInterfaceId(const std::string& val) {
    appInterfaceId = val;
  }

  bool operator == (const Airavata_getApplicationInterface_args & rhs) const
  {
    if (!(appInterfaceId == rhs.appInterfaceId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getApplicationInterface_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getApplicationInterface_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getApplicationInterface_pargs {
 public:


  virtual ~Airavata_getApplicationInterface_pargs() throw() {}

  const std::string* appInterfaceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getApplicationInterface_result__isset {
  _Airavata_getApplicationInterface_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getApplicationInterface_result__isset;

class Airavata_getApplicationInterface_result {
 public:

  Airavata_getApplicationInterface_result() {
  }

  virtual ~Airavata_getApplicationInterface_result() throw() {}

   ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getApplicationInterface_result__isset __isset;

  void __set_success(const  ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription& val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getApplicationInterface_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getApplicationInterface_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getApplicationInterface_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getApplicationInterface_presult__isset {
  _Airavata_getApplicationInterface_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getApplicationInterface_presult__isset;

class Airavata_getApplicationInterface_presult {
 public:


  virtual ~Airavata_getApplicationInterface_presult() throw() {}

   ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getApplicationInterface_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_updateApplicationInterface_args {
 public:

  Airavata_updateApplicationInterface_args() : appInterfaceId() {
  }

  virtual ~Airavata_updateApplicationInterface_args() throw() {}

  std::string appInterfaceId;
   ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription applicationInterface;

  void __set_appInterfaceId(const std::string& val) {
    appInterfaceId = val;
  }

  void __set_applicationInterface(const  ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription& val) {
    applicationInterface = val;
  }

  bool operator == (const Airavata_updateApplicationInterface_args & rhs) const
  {
    if (!(appInterfaceId == rhs.appInterfaceId))
      return false;
    if (!(applicationInterface == rhs.applicationInterface))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateApplicationInterface_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateApplicationInterface_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateApplicationInterface_pargs {
 public:


  virtual ~Airavata_updateApplicationInterface_pargs() throw() {}

  const std::string* appInterfaceId;
  const  ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription* applicationInterface;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateApplicationInterface_result__isset {
  _Airavata_updateApplicationInterface_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateApplicationInterface_result__isset;

class Airavata_updateApplicationInterface_result {
 public:

  Airavata_updateApplicationInterface_result() : success(0) {
  }

  virtual ~Airavata_updateApplicationInterface_result() throw() {}

  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateApplicationInterface_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_updateApplicationInterface_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateApplicationInterface_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateApplicationInterface_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateApplicationInterface_presult__isset {
  _Airavata_updateApplicationInterface_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateApplicationInterface_presult__isset;

class Airavata_updateApplicationInterface_presult {
 public:


  virtual ~Airavata_updateApplicationInterface_presult() throw() {}

  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateApplicationInterface_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_deleteApplicationInterface_args {
 public:

  Airavata_deleteApplicationInterface_args() : appInterfaceId() {
  }

  virtual ~Airavata_deleteApplicationInterface_args() throw() {}

  std::string appInterfaceId;

  void __set_appInterfaceId(const std::string& val) {
    appInterfaceId = val;
  }

  bool operator == (const Airavata_deleteApplicationInterface_args & rhs) const
  {
    if (!(appInterfaceId == rhs.appInterfaceId))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteApplicationInterface_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteApplicationInterface_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_deleteApplicationInterface_pargs {
 public:


  virtual ~Airavata_deleteApplicationInterface_pargs() throw() {}

  const std::string* appInterfaceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_deleteApplicationInterface_result__isset {
  _Airavata_deleteApplicationInterface_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_deleteApplicationInterface_result__isset;

class Airavata_deleteApplicationInterface_result {
 public:

  Airavata_deleteApplicationInterface_result() : success(0) {
  }

  virtual ~Airavata_deleteApplicationInterface_result() throw() {}

  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_deleteApplicationInterface_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_deleteApplicationInterface_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteApplicationInterface_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteApplicationInterface_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_deleteApplicationInterface_presult__isset {
  _Airavata_deleteApplicationInterface_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_deleteApplicationInterface_presult__isset;

class Airavata_deleteApplicationInterface_presult {
 public:


  virtual ~Airavata_deleteApplicationInterface_presult() throw() {}

  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_deleteApplicationInterface_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getAllApplicationInterfaceNames_args {
 public:

  Airavata_getAllApplicationInterfaceNames_args() : gatewayId() {
  }

  virtual ~Airavata_getAllApplicationInterfaceNames_args() throw() {}

  std::string gatewayId;

  void __set_gatewayId(const std::string& val) {
    gatewayId = val;
  }

  bool operator == (const Airavata_getAllApplicationInterfaceNames_args & rhs) const
  {
    if (!(gatewayId == rhs.gatewayId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllApplicationInterfaceNames_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllApplicationInterfaceNames_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getAllApplicationInterfaceNames_pargs {
 public:


  virtual ~Airavata_getAllApplicationInterfaceNames_pargs() throw() {}

  const std::string* gatewayId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllApplicationInterfaceNames_result__isset {
  _Airavata_getAllApplicationInterfaceNames_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAllApplicationInterfaceNames_result__isset;

class Airavata_getAllApplicationInterfaceNames_result {
 public:

  Airavata_getAllApplicationInterfaceNames_result() {
  }

  virtual ~Airavata_getAllApplicationInterfaceNames_result() throw() {}

  std::map<std::string, std::string>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAllApplicationInterfaceNames_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getAllApplicationInterfaceNames_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllApplicationInterfaceNames_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllApplicationInterfaceNames_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllApplicationInterfaceNames_presult__isset {
  _Airavata_getAllApplicationInterfaceNames_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAllApplicationInterfaceNames_presult__isset;

class Airavata_getAllApplicationInterfaceNames_presult {
 public:


  virtual ~Airavata_getAllApplicationInterfaceNames_presult() throw() {}

  std::map<std::string, std::string> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAllApplicationInterfaceNames_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getAllApplicationInterfaces_args {
 public:

  Airavata_getAllApplicationInterfaces_args() : gatewayId() {
  }

  virtual ~Airavata_getAllApplicationInterfaces_args() throw() {}

  std::string gatewayId;

  void __set_gatewayId(const std::string& val) {
    gatewayId = val;
  }

  bool operator == (const Airavata_getAllApplicationInterfaces_args & rhs) const
  {
    if (!(gatewayId == rhs.gatewayId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllApplicationInterfaces_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllApplicationInterfaces_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getAllApplicationInterfaces_pargs {
 public:


  virtual ~Airavata_getAllApplicationInterfaces_pargs() throw() {}

  const std::string* gatewayId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllApplicationInterfaces_result__isset {
  _Airavata_getAllApplicationInterfaces_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAllApplicationInterfaces_result__isset;

class Airavata_getAllApplicationInterfaces_result {
 public:

  Airavata_getAllApplicationInterfaces_result() {
  }

  virtual ~Airavata_getAllApplicationInterfaces_result() throw() {}

  std::vector< ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAllApplicationInterfaces_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription> & val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getAllApplicationInterfaces_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllApplicationInterfaces_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllApplicationInterfaces_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllApplicationInterfaces_presult__isset {
  _Airavata_getAllApplicationInterfaces_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAllApplicationInterfaces_presult__isset;

class Airavata_getAllApplicationInterfaces_presult {
 public:


  virtual ~Airavata_getAllApplicationInterfaces_presult() throw() {}

  std::vector< ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAllApplicationInterfaces_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getApplicationInputs_args {
 public:

  Airavata_getApplicationInputs_args() : appInterfaceId() {
  }

  virtual ~Airavata_getApplicationInputs_args() throw() {}

  std::string appInterfaceId;

  void __set_appInterfaceId(const std::string& val) {
    appInterfaceId = val;
  }

  bool operator == (const Airavata_getApplicationInputs_args & rhs) const
  {
    if (!(appInterfaceId == rhs.appInterfaceId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getApplicationInputs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getApplicationInputs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getApplicationInputs_pargs {
 public:


  virtual ~Airavata_getApplicationInputs_pargs() throw() {}

  const std::string* appInterfaceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getApplicationInputs_result__isset {
  _Airavata_getApplicationInputs_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getApplicationInputs_result__isset;

class Airavata_getApplicationInputs_result {
 public:

  Airavata_getApplicationInputs_result() {
  }

  virtual ~Airavata_getApplicationInputs_result() throw() {}

  std::vector< ::apache::airavata::model::appcatalog::appinterface::InputDataObjectType>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getApplicationInputs_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::appcatalog::appinterface::InputDataObjectType> & val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getApplicationInputs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getApplicationInputs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getApplicationInputs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getApplicationInputs_presult__isset {
  _Airavata_getApplicationInputs_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getApplicationInputs_presult__isset;

class Airavata_getApplicationInputs_presult {
 public:


  virtual ~Airavata_getApplicationInputs_presult() throw() {}

  std::vector< ::apache::airavata::model::appcatalog::appinterface::InputDataObjectType> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getApplicationInputs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getApplicationOutputs_args {
 public:

  Airavata_getApplicationOutputs_args() : appInterfaceId() {
  }

  virtual ~Airavata_getApplicationOutputs_args() throw() {}

  std::string appInterfaceId;

  void __set_appInterfaceId(const std::string& val) {
    appInterfaceId = val;
  }

  bool operator == (const Airavata_getApplicationOutputs_args & rhs) const
  {
    if (!(appInterfaceId == rhs.appInterfaceId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getApplicationOutputs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getApplicationOutputs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getApplicationOutputs_pargs {
 public:


  virtual ~Airavata_getApplicationOutputs_pargs() throw() {}

  const std::string* appInterfaceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getApplicationOutputs_result__isset {
  _Airavata_getApplicationOutputs_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getApplicationOutputs_result__isset;

class Airavata_getApplicationOutputs_result {
 public:

  Airavata_getApplicationOutputs_result() {
  }

  virtual ~Airavata_getApplicationOutputs_result() throw() {}

  std::vector< ::apache::airavata::model::appcatalog::appinterface::OutputDataObjectType>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getApplicationOutputs_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::appcatalog::appinterface::OutputDataObjectType> & val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getApplicationOutputs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getApplicationOutputs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getApplicationOutputs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getApplicationOutputs_presult__isset {
  _Airavata_getApplicationOutputs_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getApplicationOutputs_presult__isset;

class Airavata_getApplicationOutputs_presult {
 public:


  virtual ~Airavata_getApplicationOutputs_presult() throw() {}

  std::vector< ::apache::airavata::model::appcatalog::appinterface::OutputDataObjectType> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getApplicationOutputs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getAvailableAppInterfaceComputeResources_args {
 public:

  Airavata_getAvailableAppInterfaceComputeResources_args() : appInterfaceId() {
  }

  virtual ~Airavata_getAvailableAppInterfaceComputeResources_args() throw() {}

  std::string appInterfaceId;

  void __set_appInterfaceId(const std::string& val) {
    appInterfaceId = val;
  }

  bool operator == (const Airavata_getAvailableAppInterfaceComputeResources_args & rhs) const
  {
    if (!(appInterfaceId == rhs.appInterfaceId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAvailableAppInterfaceComputeResources_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAvailableAppInterfaceComputeResources_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getAvailableAppInterfaceComputeResources_pargs {
 public:


  virtual ~Airavata_getAvailableAppInterfaceComputeResources_pargs() throw() {}

  const std::string* appInterfaceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAvailableAppInterfaceComputeResources_result__isset {
  _Airavata_getAvailableAppInterfaceComputeResources_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAvailableAppInterfaceComputeResources_result__isset;

class Airavata_getAvailableAppInterfaceComputeResources_result {
 public:

  Airavata_getAvailableAppInterfaceComputeResources_result() {
  }

  virtual ~Airavata_getAvailableAppInterfaceComputeResources_result() throw() {}

  std::map<std::string, std::string>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAvailableAppInterfaceComputeResources_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getAvailableAppInterfaceComputeResources_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAvailableAppInterfaceComputeResources_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAvailableAppInterfaceComputeResources_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAvailableAppInterfaceComputeResources_presult__isset {
  _Airavata_getAvailableAppInterfaceComputeResources_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAvailableAppInterfaceComputeResources_presult__isset;

class Airavata_getAvailableAppInterfaceComputeResources_presult {
 public:


  virtual ~Airavata_getAvailableAppInterfaceComputeResources_presult() throw() {}

  std::map<std::string, std::string> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAvailableAppInterfaceComputeResources_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_registerComputeResource_args {
 public:

  Airavata_registerComputeResource_args() {
  }

  virtual ~Airavata_registerComputeResource_args() throw() {}

   ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription computeResourceDescription;

  void __set_computeResourceDescription(const  ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription& val) {
    computeResourceDescription = val;
  }

  bool operator == (const Airavata_registerComputeResource_args & rhs) const
  {
    if (!(computeResourceDescription == rhs.computeResourceDescription))
      return false;
    return true;
  }
  bool operator != (const Airavata_registerComputeResource_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_registerComputeResource_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_registerComputeResource_pargs {
 public:


  virtual ~Airavata_registerComputeResource_pargs() throw() {}

  const  ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription* computeResourceDescription;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_registerComputeResource_result__isset {
  _Airavata_registerComputeResource_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_registerComputeResource_result__isset;

class Airavata_registerComputeResource_result {
 public:

  Airavata_registerComputeResource_result() : success() {
  }

  virtual ~Airavata_registerComputeResource_result() throw() {}

  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_registerComputeResource_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_registerComputeResource_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_registerComputeResource_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_registerComputeResource_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_registerComputeResource_presult__isset {
  _Airavata_registerComputeResource_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_registerComputeResource_presult__isset;

class Airavata_registerComputeResource_presult {
 public:


  virtual ~Airavata_registerComputeResource_presult() throw() {}

  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_registerComputeResource_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getComputeResource_args {
 public:

  Airavata_getComputeResource_args() : computeResourceId() {
  }

  virtual ~Airavata_getComputeResource_args() throw() {}

  std::string computeResourceId;

  void __set_computeResourceId(const std::string& val) {
    computeResourceId = val;
  }

  bool operator == (const Airavata_getComputeResource_args & rhs) const
  {
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getComputeResource_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getComputeResource_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getComputeResource_pargs {
 public:


  virtual ~Airavata_getComputeResource_pargs() throw() {}

  const std::string* computeResourceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getComputeResource_result__isset {
  _Airavata_getComputeResource_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getComputeResource_result__isset;

class Airavata_getComputeResource_result {
 public:

  Airavata_getComputeResource_result() {
  }

  virtual ~Airavata_getComputeResource_result() throw() {}

   ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getComputeResource_result__isset __isset;

  void __set_success(const  ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription& val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getComputeResource_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getComputeResource_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getComputeResource_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getComputeResource_presult__isset {
  _Airavata_getComputeResource_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getComputeResource_presult__isset;

class Airavata_getComputeResource_presult {
 public:


  virtual ~Airavata_getComputeResource_presult() throw() {}

   ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getComputeResource_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getAllComputeResourceNames_args {
 public:

  Airavata_getAllComputeResourceNames_args() {
  }

  virtual ~Airavata_getAllComputeResourceNames_args() throw() {}


  bool operator == (const Airavata_getAllComputeResourceNames_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Airavata_getAllComputeResourceNames_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllComputeResourceNames_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getAllComputeResourceNames_pargs {
 public:


  virtual ~Airavata_getAllComputeResourceNames_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllComputeResourceNames_result__isset {
  _Airavata_getAllComputeResourceNames_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAllComputeResourceNames_result__isset;

class Airavata_getAllComputeResourceNames_result {
 public:

  Airavata_getAllComputeResourceNames_result() {
  }

  virtual ~Airavata_getAllComputeResourceNames_result() throw() {}

  std::map<std::string, std::string>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAllComputeResourceNames_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getAllComputeResourceNames_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllComputeResourceNames_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllComputeResourceNames_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllComputeResourceNames_presult__isset {
  _Airavata_getAllComputeResourceNames_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAllComputeResourceNames_presult__isset;

class Airavata_getAllComputeResourceNames_presult {
 public:


  virtual ~Airavata_getAllComputeResourceNames_presult() throw() {}

  std::map<std::string, std::string> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAllComputeResourceNames_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_updateComputeResource_args {
 public:

  Airavata_updateComputeResource_args() : computeResourceId() {
  }

  virtual ~Airavata_updateComputeResource_args() throw() {}

  std::string computeResourceId;
   ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription computeResourceDescription;

  void __set_computeResourceId(const std::string& val) {
    computeResourceId = val;
  }

  void __set_computeResourceDescription(const  ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription& val) {
    computeResourceDescription = val;
  }

  bool operator == (const Airavata_updateComputeResource_args & rhs) const
  {
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    if (!(computeResourceDescription == rhs.computeResourceDescription))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateComputeResource_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateComputeResource_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateComputeResource_pargs {
 public:


  virtual ~Airavata_updateComputeResource_pargs() throw() {}

  const std::string* computeResourceId;
  const  ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription* computeResourceDescription;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateComputeResource_result__isset {
  _Airavata_updateComputeResource_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateComputeResource_result__isset;

class Airavata_updateComputeResource_result {
 public:

  Airavata_updateComputeResource_result() : success(0) {
  }

  virtual ~Airavata_updateComputeResource_result() throw() {}

  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateComputeResource_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_updateComputeResource_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateComputeResource_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateComputeResource_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateComputeResource_presult__isset {
  _Airavata_updateComputeResource_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateComputeResource_presult__isset;

class Airavata_updateComputeResource_presult {
 public:


  virtual ~Airavata_updateComputeResource_presult() throw() {}

  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateComputeResource_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_deleteComputeResource_args {
 public:

  Airavata_deleteComputeResource_args() : computeResourceId() {
  }

  virtual ~Airavata_deleteComputeResource_args() throw() {}

  std::string computeResourceId;

  void __set_computeResourceId(const std::string& val) {
    computeResourceId = val;
  }

  bool operator == (const Airavata_deleteComputeResource_args & rhs) const
  {
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteComputeResource_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteComputeResource_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_deleteComputeResource_pargs {
 public:


  virtual ~Airavata_deleteComputeResource_pargs() throw() {}

  const std::string* computeResourceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_deleteComputeResource_result__isset {
  _Airavata_deleteComputeResource_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_deleteComputeResource_result__isset;

class Airavata_deleteComputeResource_result {
 public:

  Airavata_deleteComputeResource_result() : success(0) {
  }

  virtual ~Airavata_deleteComputeResource_result() throw() {}

  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_deleteComputeResource_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_deleteComputeResource_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteComputeResource_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteComputeResource_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_deleteComputeResource_presult__isset {
  _Airavata_deleteComputeResource_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_deleteComputeResource_presult__isset;

class Airavata_deleteComputeResource_presult {
 public:


  virtual ~Airavata_deleteComputeResource_presult() throw() {}

  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_deleteComputeResource_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_addLocalSubmissionDetails_args {
 public:

  Airavata_addLocalSubmissionDetails_args() : computeResourceId(), priorityOrder(0) {
  }

  virtual ~Airavata_addLocalSubmissionDetails_args() throw() {}

  std::string computeResourceId;
  int32_t priorityOrder;
   ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission localSubmission;

  void __set_computeResourceId(const std::string& val) {
    computeResourceId = val;
  }

  void __set_priorityOrder(const int32_t val) {
    priorityOrder = val;
  }

  void __set_localSubmission(const  ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission& val) {
    localSubmission = val;
  }

  bool operator == (const Airavata_addLocalSubmissionDetails_args & rhs) const
  {
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    if (!(priorityOrder == rhs.priorityOrder))
      return false;
    if (!(localSubmission == rhs.localSubmission))
      return false;
    return true;
  }
  bool operator != (const Airavata_addLocalSubmissionDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addLocalSubmissionDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_addLocalSubmissionDetails_pargs {
 public:


  virtual ~Airavata_addLocalSubmissionDetails_pargs() throw() {}

  const std::string* computeResourceId;
  const int32_t* priorityOrder;
  const  ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission* localSubmission;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_addLocalSubmissionDetails_result__isset {
  _Airavata_addLocalSubmissionDetails_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_addLocalSubmissionDetails_result__isset;

class Airavata_addLocalSubmissionDetails_result {
 public:

  Airavata_addLocalSubmissionDetails_result() : success() {
  }

  virtual ~Airavata_addLocalSubmissionDetails_result() throw() {}

  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_addLocalSubmissionDetails_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_addLocalSubmissionDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_addLocalSubmissionDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addLocalSubmissionDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_addLocalSubmissionDetails_presult__isset {
  _Airavata_addLocalSubmissionDetails_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_addLocalSubmissionDetails_presult__isset;

class Airavata_addLocalSubmissionDetails_presult {
 public:


  virtual ~Airavata_addLocalSubmissionDetails_presult() throw() {}

  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_addLocalSubmissionDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_updateLocalSubmissionDetails_args {
 public:

  Airavata_updateLocalSubmissionDetails_args() : jobSubmissionInterfaceId() {
  }

  virtual ~Airavata_updateLocalSubmissionDetails_args() throw() {}

  std::string jobSubmissionInterfaceId;
   ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission localSubmission;

  void __set_jobSubmissionInterfaceId(const std::string& val) {
    jobSubmissionInterfaceId = val;
  }

  void __set_localSubmission(const  ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission& val) {
    localSubmission = val;
  }

  bool operator == (const Airavata_updateLocalSubmissionDetails_args & rhs) const
  {
    if (!(jobSubmissionInterfaceId == rhs.jobSubmissionInterfaceId))
      return false;
    if (!(localSubmission == rhs.localSubmission))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateLocalSubmissionDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateLocalSubmissionDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateLocalSubmissionDetails_pargs {
 public:


  virtual ~Airavata_updateLocalSubmissionDetails_pargs() throw() {}

  const std::string* jobSubmissionInterfaceId;
  const  ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission* localSubmission;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateLocalSubmissionDetails_result__isset {
  _Airavata_updateLocalSubmissionDetails_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateLocalSubmissionDetails_result__isset;

class Airavata_updateLocalSubmissionDetails_result {
 public:

  Airavata_updateLocalSubmissionDetails_result() : success(0) {
  }

  virtual ~Airavata_updateLocalSubmissionDetails_result() throw() {}

  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateLocalSubmissionDetails_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_updateLocalSubmissionDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateLocalSubmissionDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateLocalSubmissionDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateLocalSubmissionDetails_presult__isset {
  _Airavata_updateLocalSubmissionDetails_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateLocalSubmissionDetails_presult__isset;

class Airavata_updateLocalSubmissionDetails_presult {
 public:


  virtual ~Airavata_updateLocalSubmissionDetails_presult() throw() {}

  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateLocalSubmissionDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getLocalJobSubmission_args {
 public:

  Airavata_getLocalJobSubmission_args() : jobSubmissionId() {
  }

  virtual ~Airavata_getLocalJobSubmission_args() throw() {}

  std::string jobSubmissionId;

  void __set_jobSubmissionId(const std::string& val) {
    jobSubmissionId = val;
  }

  bool operator == (const Airavata_getLocalJobSubmission_args & rhs) const
  {
    if (!(jobSubmissionId == rhs.jobSubmissionId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getLocalJobSubmission_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getLocalJobSubmission_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getLocalJobSubmission_pargs {
 public:


  virtual ~Airavata_getLocalJobSubmission_pargs() throw() {}

  const std::string* jobSubmissionId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getLocalJobSubmission_result__isset {
  _Airavata_getLocalJobSubmission_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getLocalJobSubmission_result__isset;

class Airavata_getLocalJobSubmission_result {
 public:

  Airavata_getLocalJobSubmission_result() {
  }

  virtual ~Airavata_getLocalJobSubmission_result() throw() {}

   ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getLocalJobSubmission_result__isset __isset;

  void __set_success(const  ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission& val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getLocalJobSubmission_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getLocalJobSubmission_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getLocalJobSubmission_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getLocalJobSubmission_presult__isset {
  _Airavata_getLocalJobSubmission_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getLocalJobSubmission_presult__isset;

class Airavata_getLocalJobSubmission_presult {
 public:


  virtual ~Airavata_getLocalJobSubmission_presult() throw() {}

   ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getLocalJobSubmission_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_addSSHJobSubmissionDetails_args {
 public:

  Airavata_addSSHJobSubmissionDetails_args() : computeResourceId(), priorityOrder(0) {
  }

  virtual ~Airavata_addSSHJobSubmissionDetails_args() throw() {}

  std::string computeResourceId;
  int32_t priorityOrder;
   ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission sshJobSubmission;

  void __set_computeResourceId(const std::string& val) {
    computeResourceId = val;
  }

  void __set_priorityOrder(const int32_t val) {
    priorityOrder = val;
  }

  void __set_sshJobSubmission(const  ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission& val) {
    sshJobSubmission = val;
  }

  bool operator == (const Airavata_addSSHJobSubmissionDetails_args & rhs) const
  {
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    if (!(priorityOrder == rhs.priorityOrder))
      return false;
    if (!(sshJobSubmission == rhs.sshJobSubmission))
      return false;
    return true;
  }
  bool operator != (const Airavata_addSSHJobSubmissionDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addSSHJobSubmissionDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_addSSHJobSubmissionDetails_pargs {
 public:


  virtual ~Airavata_addSSHJobSubmissionDetails_pargs() throw() {}

  const std::string* computeResourceId;
  const int32_t* priorityOrder;
  const  ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission* sshJobSubmission;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_addSSHJobSubmissionDetails_result__isset {
  _Airavata_addSSHJobSubmissionDetails_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_addSSHJobSubmissionDetails_result__isset;

class Airavata_addSSHJobSubmissionDetails_result {
 public:

  Airavata_addSSHJobSubmissionDetails_result() : success() {
  }

  virtual ~Airavata_addSSHJobSubmissionDetails_result() throw() {}

  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_addSSHJobSubmissionDetails_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_addSSHJobSubmissionDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_addSSHJobSubmissionDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addSSHJobSubmissionDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_addSSHJobSubmissionDetails_presult__isset {
  _Airavata_addSSHJobSubmissionDetails_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_addSSHJobSubmissionDetails_presult__isset;

class Airavata_addSSHJobSubmissionDetails_presult {
 public:


  virtual ~Airavata_addSSHJobSubmissionDetails_presult() throw() {}

  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_addSSHJobSubmissionDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getSSHJobSubmission_args {
 public:

  Airavata_getSSHJobSubmission_args() : jobSubmissionId() {
  }

  virtual ~Airavata_getSSHJobSubmission_args() throw() {}

  std::string jobSubmissionId;

  void __set_jobSubmissionId(const std::string& val) {
    jobSubmissionId = val;
  }

  bool operator == (const Airavata_getSSHJobSubmission_args & rhs) const
  {
    if (!(jobSubmissionId == rhs.jobSubmissionId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getSSHJobSubmission_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getSSHJobSubmission_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getSSHJobSubmission_pargs {
 public:


  virtual ~Airavata_getSSHJobSubmission_pargs() throw() {}

  const std::string* jobSubmissionId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getSSHJobSubmission_result__isset {
  _Airavata_getSSHJobSubmission_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getSSHJobSubmission_result__isset;

class Airavata_getSSHJobSubmission_result {
 public:

  Airavata_getSSHJobSubmission_result() {
  }

  virtual ~Airavata_getSSHJobSubmission_result() throw() {}

   ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getSSHJobSubmission_result__isset __isset;

  void __set_success(const  ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission& val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getSSHJobSubmission_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getSSHJobSubmission_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getSSHJobSubmission_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getSSHJobSubmission_presult__isset {
  _Airavata_getSSHJobSubmission_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getSSHJobSubmission_presult__isset;

class Airavata_getSSHJobSubmission_presult {
 public:


  virtual ~Airavata_getSSHJobSubmission_presult() throw() {}

   ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getSSHJobSubmission_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_addUNICOREJobSubmissionDetails_args {
 public:

  Airavata_addUNICOREJobSubmissionDetails_args() : computeResourceId(), priorityOrder(0) {
  }

  virtual ~Airavata_addUNICOREJobSubmissionDetails_args() throw() {}

  std::string computeResourceId;
  int32_t priorityOrder;
   ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission unicoreJobSubmission;

  void __set_computeResourceId(const std::string& val) {
    computeResourceId = val;
  }

  void __set_priorityOrder(const int32_t val) {
    priorityOrder = val;
  }

  void __set_unicoreJobSubmission(const  ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission& val) {
    unicoreJobSubmission = val;
  }

  bool operator == (const Airavata_addUNICOREJobSubmissionDetails_args & rhs) const
  {
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    if (!(priorityOrder == rhs.priorityOrder))
      return false;
    if (!(unicoreJobSubmission == rhs.unicoreJobSubmission))
      return false;
    return true;
  }
  bool operator != (const Airavata_addUNICOREJobSubmissionDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addUNICOREJobSubmissionDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_addUNICOREJobSubmissionDetails_pargs {
 public:


  virtual ~Airavata_addUNICOREJobSubmissionDetails_pargs() throw() {}

  const std::string* computeResourceId;
  const int32_t* priorityOrder;
  const  ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission* unicoreJobSubmission;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_addUNICOREJobSubmissionDetails_result__isset {
  _Airavata_addUNICOREJobSubmissionDetails_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_addUNICOREJobSubmissionDetails_result__isset;

class Airavata_addUNICOREJobSubmissionDetails_result {
 public:

  Airavata_addUNICOREJobSubmissionDetails_result() : success() {
  }

  virtual ~Airavata_addUNICOREJobSubmissionDetails_result() throw() {}

  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_addUNICOREJobSubmissionDetails_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_addUNICOREJobSubmissionDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_addUNICOREJobSubmissionDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addUNICOREJobSubmissionDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_addUNICOREJobSubmissionDetails_presult__isset {
  _Airavata_addUNICOREJobSubmissionDetails_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_addUNICOREJobSubmissionDetails_presult__isset;

class Airavata_addUNICOREJobSubmissionDetails_presult {
 public:


  virtual ~Airavata_addUNICOREJobSubmissionDetails_presult() throw() {}

  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_addUNICOREJobSubmissionDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getUnicoreJobSubmission_args {
 public:

  Airavata_getUnicoreJobSubmission_args() : jobSubmissionId() {
  }

  virtual ~Airavata_getUnicoreJobSubmission_args() throw() {}

  std::string jobSubmissionId;

  void __set_jobSubmissionId(const std::string& val) {
    jobSubmissionId = val;
  }

  bool operator == (const Airavata_getUnicoreJobSubmission_args & rhs) const
  {
    if (!(jobSubmissionId == rhs.jobSubmissionId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getUnicoreJobSubmission_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getUnicoreJobSubmission_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getUnicoreJobSubmission_pargs {
 public:


  virtual ~Airavata_getUnicoreJobSubmission_pargs() throw() {}

  const std::string* jobSubmissionId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getUnicoreJobSubmission_result__isset {
  _Airavata_getUnicoreJobSubmission_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getUnicoreJobSubmission_result__isset;

class Airavata_getUnicoreJobSubmission_result {
 public:

  Airavata_getUnicoreJobSubmission_result() {
  }

  virtual ~Airavata_getUnicoreJobSubmission_result() throw() {}

   ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getUnicoreJobSubmission_result__isset __isset;

  void __set_success(const  ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission& val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getUnicoreJobSubmission_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getUnicoreJobSubmission_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getUnicoreJobSubmission_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getUnicoreJobSubmission_presult__isset {
  _Airavata_getUnicoreJobSubmission_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getUnicoreJobSubmission_presult__isset;

class Airavata_getUnicoreJobSubmission_presult {
 public:


  virtual ~Airavata_getUnicoreJobSubmission_presult() throw() {}

   ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getUnicoreJobSubmission_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_addCloudJobSubmissionDetails_args {
 public:

  Airavata_addCloudJobSubmissionDetails_args() : computeResourceId(), priorityOrder(0) {
  }

  virtual ~Airavata_addCloudJobSubmissionDetails_args() throw() {}

  std::string computeResourceId;
  int32_t priorityOrder;
   ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission cloudSubmission;

  void __set_computeResourceId(const std::string& val) {
    computeResourceId = val;
  }

  void __set_priorityOrder(const int32_t val) {
    priorityOrder = val;
  }

  void __set_cloudSubmission(const  ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission& val) {
    cloudSubmission = val;
  }

  bool operator == (const Airavata_addCloudJobSubmissionDetails_args & rhs) const
  {
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    if (!(priorityOrder == rhs.priorityOrder))
      return false;
    if (!(cloudSubmission == rhs.cloudSubmission))
      return false;
    return true;
  }
  bool operator != (const Airavata_addCloudJobSubmissionDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addCloudJobSubmissionDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_addCloudJobSubmissionDetails_pargs {
 public:


  virtual ~Airavata_addCloudJobSubmissionDetails_pargs() throw() {}

  const std::string* computeResourceId;
  const int32_t* priorityOrder;
  const  ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission* cloudSubmission;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_addCloudJobSubmissionDetails_result__isset {
  _Airavata_addCloudJobSubmissionDetails_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_addCloudJobSubmissionDetails_result__isset;

class Airavata_addCloudJobSubmissionDetails_result {
 public:

  Airavata_addCloudJobSubmissionDetails_result() : success() {
  }

  virtual ~Airavata_addCloudJobSubmissionDetails_result() throw() {}

  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_addCloudJobSubmissionDetails_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_addCloudJobSubmissionDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_addCloudJobSubmissionDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addCloudJobSubmissionDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_addCloudJobSubmissionDetails_presult__isset {
  _Airavata_addCloudJobSubmissionDetails_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_addCloudJobSubmissionDetails_presult__isset;

class Airavata_addCloudJobSubmissionDetails_presult {
 public:


  virtual ~Airavata_addCloudJobSubmissionDetails_presult() throw() {}

  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_addCloudJobSubmissionDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getCloudJobSubmission_args {
 public:

  Airavata_getCloudJobSubmission_args() : jobSubmissionId() {
  }

  virtual ~Airavata_getCloudJobSubmission_args() throw() {}

  std::string jobSubmissionId;

  void __set_jobSubmissionId(const std::string& val) {
    jobSubmissionId = val;
  }

  bool operator == (const Airavata_getCloudJobSubmission_args & rhs) const
  {
    if (!(jobSubmissionId == rhs.jobSubmissionId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getCloudJobSubmission_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getCloudJobSubmission_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getCloudJobSubmission_pargs {
 public:


  virtual ~Airavata_getCloudJobSubmission_pargs() throw() {}

  const std::string* jobSubmissionId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getCloudJobSubmission_result__isset {
  _Airavata_getCloudJobSubmission_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getCloudJobSubmission_result__isset;

class Airavata_getCloudJobSubmission_result {
 public:

  Airavata_getCloudJobSubmission_result() {
  }

  virtual ~Airavata_getCloudJobSubmission_result() throw() {}

   ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getCloudJobSubmission_result__isset __isset;

  void __set_success(const  ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission& val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getCloudJobSubmission_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getCloudJobSubmission_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getCloudJobSubmission_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getCloudJobSubmission_presult__isset {
  _Airavata_getCloudJobSubmission_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getCloudJobSubmission_presult__isset;

class Airavata_getCloudJobSubmission_presult {
 public:


  virtual ~Airavata_getCloudJobSubmission_presult() throw() {}

   ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getCloudJobSubmission_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_updateSSHJobSubmissionDetails_args {
 public:

  Airavata_updateSSHJobSubmissionDetails_args() : jobSubmissionInterfaceId() {
  }

  virtual ~Airavata_updateSSHJobSubmissionDetails_args() throw() {}

  std::string jobSubmissionInterfaceId;
   ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission sshJobSubmission;

  void __set_jobSubmissionInterfaceId(const std::string& val) {
    jobSubmissionInterfaceId = val;
  }

  void __set_sshJobSubmission(const  ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission& val) {
    sshJobSubmission = val;
  }

  bool operator == (const Airavata_updateSSHJobSubmissionDetails_args & rhs) const
  {
    if (!(jobSubmissionInterfaceId == rhs.jobSubmissionInterfaceId))
      return false;
    if (!(sshJobSubmission == rhs.sshJobSubmission))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateSSHJobSubmissionDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateSSHJobSubmissionDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateSSHJobSubmissionDetails_pargs {
 public:


  virtual ~Airavata_updateSSHJobSubmissionDetails_pargs() throw() {}

  const std::string* jobSubmissionInterfaceId;
  const  ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission* sshJobSubmission;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateSSHJobSubmissionDetails_result__isset {
  _Airavata_updateSSHJobSubmissionDetails_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateSSHJobSubmissionDetails_result__isset;

class Airavata_updateSSHJobSubmissionDetails_result {
 public:

  Airavata_updateSSHJobSubmissionDetails_result() : success(0) {
  }

  virtual ~Airavata_updateSSHJobSubmissionDetails_result() throw() {}

  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateSSHJobSubmissionDetails_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_updateSSHJobSubmissionDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateSSHJobSubmissionDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateSSHJobSubmissionDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateSSHJobSubmissionDetails_presult__isset {
  _Airavata_updateSSHJobSubmissionDetails_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateSSHJobSubmissionDetails_presult__isset;

class Airavata_updateSSHJobSubmissionDetails_presult {
 public:


  virtual ~Airavata_updateSSHJobSubmissionDetails_presult() throw() {}

  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateSSHJobSubmissionDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_updateCloudJobSubmissionDetails_args {
 public:

  Airavata_updateCloudJobSubmissionDetails_args() : jobSubmissionInterfaceId() {
  }

  virtual ~Airavata_updateCloudJobSubmissionDetails_args() throw() {}

  std::string jobSubmissionInterfaceId;
   ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission sshJobSubmission;

  void __set_jobSubmissionInterfaceId(const std::string& val) {
    jobSubmissionInterfaceId = val;
  }

  void __set_sshJobSubmission(const  ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission& val) {
    sshJobSubmission = val;
  }

  bool operator == (const Airavata_updateCloudJobSubmissionDetails_args & rhs) const
  {
    if (!(jobSubmissionInterfaceId == rhs.jobSubmissionInterfaceId))
      return false;
    if (!(sshJobSubmission == rhs.sshJobSubmission))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateCloudJobSubmissionDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateCloudJobSubmissionDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateCloudJobSubmissionDetails_pargs {
 public:


  virtual ~Airavata_updateCloudJobSubmissionDetails_pargs() throw() {}

  const std::string* jobSubmissionInterfaceId;
  const  ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission* sshJobSubmission;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateCloudJobSubmissionDetails_result__isset {
  _Airavata_updateCloudJobSubmissionDetails_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateCloudJobSubmissionDetails_result__isset;

class Airavata_updateCloudJobSubmissionDetails_result {
 public:

  Airavata_updateCloudJobSubmissionDetails_result() : success(0) {
  }

  virtual ~Airavata_updateCloudJobSubmissionDetails_result() throw() {}

  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateCloudJobSubmissionDetails_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_updateCloudJobSubmissionDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateCloudJobSubmissionDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateCloudJobSubmissionDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateCloudJobSubmissionDetails_presult__isset {
  _Airavata_updateCloudJobSubmissionDetails_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateCloudJobSubmissionDetails_presult__isset;

class Airavata_updateCloudJobSubmissionDetails_presult {
 public:


  virtual ~Airavata_updateCloudJobSubmissionDetails_presult() throw() {}

  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateCloudJobSubmissionDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_updateUnicoreJobSubmissionDetails_args {
 public:

  Airavata_updateUnicoreJobSubmissionDetails_args() : jobSubmissionInterfaceId() {
  }

  virtual ~Airavata_updateUnicoreJobSubmissionDetails_args() throw() {}

  std::string jobSubmissionInterfaceId;
   ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission unicoreJobSubmission;

  void __set_jobSubmissionInterfaceId(const std::string& val) {
    jobSubmissionInterfaceId = val;
  }

  void __set_unicoreJobSubmission(const  ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission& val) {
    unicoreJobSubmission = val;
  }

  bool operator == (const Airavata_updateUnicoreJobSubmissionDetails_args & rhs) const
  {
    if (!(jobSubmissionInterfaceId == rhs.jobSubmissionInterfaceId))
      return false;
    if (!(unicoreJobSubmission == rhs.unicoreJobSubmission))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateUnicoreJobSubmissionDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateUnicoreJobSubmissionDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateUnicoreJobSubmissionDetails_pargs {
 public:


  virtual ~Airavata_updateUnicoreJobSubmissionDetails_pargs() throw() {}

  const std::string* jobSubmissionInterfaceId;
  const  ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission* unicoreJobSubmission;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateUnicoreJobSubmissionDetails_result__isset {
  _Airavata_updateUnicoreJobSubmissionDetails_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateUnicoreJobSubmissionDetails_result__isset;

class Airavata_updateUnicoreJobSubmissionDetails_result {
 public:

  Airavata_updateUnicoreJobSubmissionDetails_result() : success(0) {
  }

  virtual ~Airavata_updateUnicoreJobSubmissionDetails_result() throw() {}

  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateUnicoreJobSubmissionDetails_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_updateUnicoreJobSubmissionDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateUnicoreJobSubmissionDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateUnicoreJobSubmissionDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateUnicoreJobSubmissionDetails_presult__isset {
  _Airavata_updateUnicoreJobSubmissionDetails_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateUnicoreJobSubmissionDetails_presult__isset;

class Airavata_updateUnicoreJobSubmissionDetails_presult {
 public:


  virtual ~Airavata_updateUnicoreJobSubmissionDetails_presult() throw() {}

  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateUnicoreJobSubmissionDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_addLocalDataMovementDetails_args {
 public:

  Airavata_addLocalDataMovementDetails_args() : computeResourceId(), priorityOrder(0) {
  }

  virtual ~Airavata_addLocalDataMovementDetails_args() throw() {}

  std::string computeResourceId;
  int32_t priorityOrder;
   ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement localDataMovement;

  void __set_computeResourceId(const std::string& val) {
    computeResourceId = val;
  }

  void __set_priorityOrder(const int32_t val) {
    priorityOrder = val;
  }

  void __set_localDataMovement(const  ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement& val) {
    localDataMovement = val;
  }

  bool operator == (const Airavata_addLocalDataMovementDetails_args & rhs) const
  {
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    if (!(priorityOrder == rhs.priorityOrder))
      return false;
    if (!(localDataMovement == rhs.localDataMovement))
      return false;
    return true;
  }
  bool operator != (const Airavata_addLocalDataMovementDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addLocalDataMovementDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_addLocalDataMovementDetails_pargs {
 public:


  virtual ~Airavata_addLocalDataMovementDetails_pargs() throw() {}

  const std::string* computeResourceId;
  const int32_t* priorityOrder;
  const  ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement* localDataMovement;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_addLocalDataMovementDetails_result__isset {
  _Airavata_addLocalDataMovementDetails_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_addLocalDataMovementDetails_result__isset;

class Airavata_addLocalDataMovementDetails_result {
 public:

  Airavata_addLocalDataMovementDetails_result() : success() {
  }

  virtual ~Airavata_addLocalDataMovementDetails_result() throw() {}

  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_addLocalDataMovementDetails_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_addLocalDataMovementDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_addLocalDataMovementDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addLocalDataMovementDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_addLocalDataMovementDetails_presult__isset {
  _Airavata_addLocalDataMovementDetails_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_addLocalDataMovementDetails_presult__isset;

class Airavata_addLocalDataMovementDetails_presult {
 public:


  virtual ~Airavata_addLocalDataMovementDetails_presult() throw() {}

  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_addLocalDataMovementDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_updateLocalDataMovementDetails_args {
 public:

  Airavata_updateLocalDataMovementDetails_args() : dataMovementInterfaceId() {
  }

  virtual ~Airavata_updateLocalDataMovementDetails_args() throw() {}

  std::string dataMovementInterfaceId;
   ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement localDataMovement;

  void __set_dataMovementInterfaceId(const std::string& val) {
    dataMovementInterfaceId = val;
  }

  void __set_localDataMovement(const  ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement& val) {
    localDataMovement = val;
  }

  bool operator == (const Airavata_updateLocalDataMovementDetails_args & rhs) const
  {
    if (!(dataMovementInterfaceId == rhs.dataMovementInterfaceId))
      return false;
    if (!(localDataMovement == rhs.localDataMovement))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateLocalDataMovementDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateLocalDataMovementDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateLocalDataMovementDetails_pargs {
 public:


  virtual ~Airavata_updateLocalDataMovementDetails_pargs() throw() {}

  const std::string* dataMovementInterfaceId;
  const  ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement* localDataMovement;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateLocalDataMovementDetails_result__isset {
  _Airavata_updateLocalDataMovementDetails_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateLocalDataMovementDetails_result__isset;

class Airavata_updateLocalDataMovementDetails_result {
 public:

  Airavata_updateLocalDataMovementDetails_result() : success(0) {
  }

  virtual ~Airavata_updateLocalDataMovementDetails_result() throw() {}

  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateLocalDataMovementDetails_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_updateLocalDataMovementDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateLocalDataMovementDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateLocalDataMovementDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateLocalDataMovementDetails_presult__isset {
  _Airavata_updateLocalDataMovementDetails_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateLocalDataMovementDetails_presult__isset;

class Airavata_updateLocalDataMovementDetails_presult {
 public:


  virtual ~Airavata_updateLocalDataMovementDetails_presult() throw() {}

  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateLocalDataMovementDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getLocalDataMovement_args {
 public:

  Airavata_getLocalDataMovement_args() : dataMovementId() {
  }

  virtual ~Airavata_getLocalDataMovement_args() throw() {}

  std::string dataMovementId;

  void __set_dataMovementId(const std::string& val) {
    dataMovementId = val;
  }

  bool operator == (const Airavata_getLocalDataMovement_args & rhs) const
  {
    if (!(dataMovementId == rhs.dataMovementId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getLocalDataMovement_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getLocalDataMovement_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getLocalDataMovement_pargs {
 public:


  virtual ~Airavata_getLocalDataMovement_pargs() throw() {}

  const std::string* dataMovementId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getLocalDataMovement_result__isset {
  _Airavata_getLocalDataMovement_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getLocalDataMovement_result__isset;

class Airavata_getLocalDataMovement_result {
 public:

  Airavata_getLocalDataMovement_result() {
  }

  virtual ~Airavata_getLocalDataMovement_result() throw() {}

   ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getLocalDataMovement_result__isset __isset;

  void __set_success(const  ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement& val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getLocalDataMovement_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getLocalDataMovement_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getLocalDataMovement_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getLocalDataMovement_presult__isset {
  _Airavata_getLocalDataMovement_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getLocalDataMovement_presult__isset;

class Airavata_getLocalDataMovement_presult {
 public:


  virtual ~Airavata_getLocalDataMovement_presult() throw() {}

   ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getLocalDataMovement_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_addSCPDataMovementDetails_args {
 public:

  Airavata_addSCPDataMovementDetails_args() : computeResourceId(), priorityOrder(0) {
  }

  virtual ~Airavata_addSCPDataMovementDetails_args() throw() {}

  std::string computeResourceId;
  int32_t priorityOrder;
   ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement scpDataMovement;

  void __set_computeResourceId(const std::string& val) {
    computeResourceId = val;
  }

  void __set_priorityOrder(const int32_t val) {
    priorityOrder = val;
  }

  void __set_scpDataMovement(const  ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement& val) {
    scpDataMovement = val;
  }

  bool operator == (const Airavata_addSCPDataMovementDetails_args & rhs) const
  {
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    if (!(priorityOrder == rhs.priorityOrder))
      return false;
    if (!(scpDataMovement == rhs.scpDataMovement))
      return false;
    return true;
  }
  bool operator != (const Airavata_addSCPDataMovementDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addSCPDataMovementDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_addSCPDataMovementDetails_pargs {
 public:


  virtual ~Airavata_addSCPDataMovementDetails_pargs() throw() {}

  const std::string* computeResourceId;
  const int32_t* priorityOrder;
  const  ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement* scpDataMovement;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_addSCPDataMovementDetails_result__isset {
  _Airavata_addSCPDataMovementDetails_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_addSCPDataMovementDetails_result__isset;

class Airavata_addSCPDataMovementDetails_result {
 public:

  Airavata_addSCPDataMovementDetails_result() : success() {
  }

  virtual ~Airavata_addSCPDataMovementDetails_result() throw() {}

  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_addSCPDataMovementDetails_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_addSCPDataMovementDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_addSCPDataMovementDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addSCPDataMovementDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_addSCPDataMovementDetails_presult__isset {
  _Airavata_addSCPDataMovementDetails_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_addSCPDataMovementDetails_presult__isset;

class Airavata_addSCPDataMovementDetails_presult {
 public:


  virtual ~Airavata_addSCPDataMovementDetails_presult() throw() {}

  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_addSCPDataMovementDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_updateSCPDataMovementDetails_args {
 public:

  Airavata_updateSCPDataMovementDetails_args() : dataMovementInterfaceId() {
  }

  virtual ~Airavata_updateSCPDataMovementDetails_args() throw() {}

  std::string dataMovementInterfaceId;
   ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement scpDataMovement;

  void __set_dataMovementInterfaceId(const std::string& val) {
    dataMovementInterfaceId = val;
  }

  void __set_scpDataMovement(const  ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement& val) {
    scpDataMovement = val;
  }

  bool operator == (const Airavata_updateSCPDataMovementDetails_args & rhs) const
  {
    if (!(dataMovementInterfaceId == rhs.dataMovementInterfaceId))
      return false;
    if (!(scpDataMovement == rhs.scpDataMovement))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateSCPDataMovementDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateSCPDataMovementDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateSCPDataMovementDetails_pargs {
 public:


  virtual ~Airavata_updateSCPDataMovementDetails_pargs() throw() {}

  const std::string* dataMovementInterfaceId;
  const  ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement* scpDataMovement;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateSCPDataMovementDetails_result__isset {
  _Airavata_updateSCPDataMovementDetails_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateSCPDataMovementDetails_result__isset;

class Airavata_updateSCPDataMovementDetails_result {
 public:

  Airavata_updateSCPDataMovementDetails_result() : success(0) {
  }

  virtual ~Airavata_updateSCPDataMovementDetails_result() throw() {}

  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateSCPDataMovementDetails_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_updateSCPDataMovementDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateSCPDataMovementDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateSCPDataMovementDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateSCPDataMovementDetails_presult__isset {
  _Airavata_updateSCPDataMovementDetails_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateSCPDataMovementDetails_presult__isset;

class Airavata_updateSCPDataMovementDetails_presult {
 public:


  virtual ~Airavata_updateSCPDataMovementDetails_presult() throw() {}

  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateSCPDataMovementDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getSCPDataMovement_args {
 public:

  Airavata_getSCPDataMovement_args() : dataMovementId() {
  }

  virtual ~Airavata_getSCPDataMovement_args() throw() {}

  std::string dataMovementId;

  void __set_dataMovementId(const std::string& val) {
    dataMovementId = val;
  }

  bool operator == (const Airavata_getSCPDataMovement_args & rhs) const
  {
    if (!(dataMovementId == rhs.dataMovementId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getSCPDataMovement_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getSCPDataMovement_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getSCPDataMovement_pargs {
 public:


  virtual ~Airavata_getSCPDataMovement_pargs() throw() {}

  const std::string* dataMovementId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getSCPDataMovement_result__isset {
  _Airavata_getSCPDataMovement_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getSCPDataMovement_result__isset;

class Airavata_getSCPDataMovement_result {
 public:

  Airavata_getSCPDataMovement_result() {
  }

  virtual ~Airavata_getSCPDataMovement_result() throw() {}

   ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getSCPDataMovement_result__isset __isset;

  void __set_success(const  ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement& val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getSCPDataMovement_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getSCPDataMovement_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getSCPDataMovement_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getSCPDataMovement_presult__isset {
  _Airavata_getSCPDataMovement_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getSCPDataMovement_presult__isset;

class Airavata_getSCPDataMovement_presult {
 public:


  virtual ~Airavata_getSCPDataMovement_presult() throw() {}

   ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getSCPDataMovement_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_addUnicoreDataMovementDetails_args {
 public:

  Airavata_addUnicoreDataMovementDetails_args() : computeResourceId(), priorityOrder(0) {
  }

  virtual ~Airavata_addUnicoreDataMovementDetails_args() throw() {}

  std::string computeResourceId;
  int32_t priorityOrder;
   ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement unicoreDataMovement;

  void __set_computeResourceId(const std::string& val) {
    computeResourceId = val;
  }

  void __set_priorityOrder(const int32_t val) {
    priorityOrder = val;
  }

  void __set_unicoreDataMovement(const  ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement& val) {
    unicoreDataMovement = val;
  }

  bool operator == (const Airavata_addUnicoreDataMovementDetails_args & rhs) const
  {
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    if (!(priorityOrder == rhs.priorityOrder))
      return false;
    if (!(unicoreDataMovement == rhs.unicoreDataMovement))
      return false;
    return true;
  }
  bool operator != (const Airavata_addUnicoreDataMovementDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addUnicoreDataMovementDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_addUnicoreDataMovementDetails_pargs {
 public:


  virtual ~Airavata_addUnicoreDataMovementDetails_pargs() throw() {}

  const std::string* computeResourceId;
  const int32_t* priorityOrder;
  const  ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement* unicoreDataMovement;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_addUnicoreDataMovementDetails_result__isset {
  _Airavata_addUnicoreDataMovementDetails_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_addUnicoreDataMovementDetails_result__isset;

class Airavata_addUnicoreDataMovementDetails_result {
 public:

  Airavata_addUnicoreDataMovementDetails_result() : success() {
  }

  virtual ~Airavata_addUnicoreDataMovementDetails_result() throw() {}

  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_addUnicoreDataMovementDetails_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_addUnicoreDataMovementDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_addUnicoreDataMovementDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addUnicoreDataMovementDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_addUnicoreDataMovementDetails_presult__isset {
  _Airavata_addUnicoreDataMovementDetails_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_addUnicoreDataMovementDetails_presult__isset;

class Airavata_addUnicoreDataMovementDetails_presult {
 public:


  virtual ~Airavata_addUnicoreDataMovementDetails_presult() throw() {}

  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_addUnicoreDataMovementDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_updateUnicoreDataMovementDetails_args {
 public:

  Airavata_updateUnicoreDataMovementDetails_args() : dataMovementInterfaceId() {
  }

  virtual ~Airavata_updateUnicoreDataMovementDetails_args() throw() {}

  std::string dataMovementInterfaceId;
   ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement unicoreDataMovement;

  void __set_dataMovementInterfaceId(const std::string& val) {
    dataMovementInterfaceId = val;
  }

  void __set_unicoreDataMovement(const  ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement& val) {
    unicoreDataMovement = val;
  }

  bool operator == (const Airavata_updateUnicoreDataMovementDetails_args & rhs) const
  {
    if (!(dataMovementInterfaceId == rhs.dataMovementInterfaceId))
      return false;
    if (!(unicoreDataMovement == rhs.unicoreDataMovement))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateUnicoreDataMovementDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateUnicoreDataMovementDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateUnicoreDataMovementDetails_pargs {
 public:


  virtual ~Airavata_updateUnicoreDataMovementDetails_pargs() throw() {}

  const std::string* dataMovementInterfaceId;
  const  ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement* unicoreDataMovement;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateUnicoreDataMovementDetails_result__isset {
  _Airavata_updateUnicoreDataMovementDetails_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateUnicoreDataMovementDetails_result__isset;

class Airavata_updateUnicoreDataMovementDetails_result {
 public:

  Airavata_updateUnicoreDataMovementDetails_result() : success(0) {
  }

  virtual ~Airavata_updateUnicoreDataMovementDetails_result() throw() {}

  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateUnicoreDataMovementDetails_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_updateUnicoreDataMovementDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateUnicoreDataMovementDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateUnicoreDataMovementDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateUnicoreDataMovementDetails_presult__isset {
  _Airavata_updateUnicoreDataMovementDetails_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateUnicoreDataMovementDetails_presult__isset;

class Airavata_updateUnicoreDataMovementDetails_presult {
 public:


  virtual ~Airavata_updateUnicoreDataMovementDetails_presult() throw() {}

  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateUnicoreDataMovementDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getUnicoreDataMovement_args {
 public:

  Airavata_getUnicoreDataMovement_args() : dataMovementId() {
  }

  virtual ~Airavata_getUnicoreDataMovement_args() throw() {}

  std::string dataMovementId;

  void __set_dataMovementId(const std::string& val) {
    dataMovementId = val;
  }

  bool operator == (const Airavata_getUnicoreDataMovement_args & rhs) const
  {
    if (!(dataMovementId == rhs.dataMovementId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getUnicoreDataMovement_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getUnicoreDataMovement_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getUnicoreDataMovement_pargs {
 public:


  virtual ~Airavata_getUnicoreDataMovement_pargs() throw() {}

  const std::string* dataMovementId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getUnicoreDataMovement_result__isset {
  _Airavata_getUnicoreDataMovement_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getUnicoreDataMovement_result__isset;

class Airavata_getUnicoreDataMovement_result {
 public:

  Airavata_getUnicoreDataMovement_result() {
  }

  virtual ~Airavata_getUnicoreDataMovement_result() throw() {}

   ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getUnicoreDataMovement_result__isset __isset;

  void __set_success(const  ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement& val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getUnicoreDataMovement_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getUnicoreDataMovement_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getUnicoreDataMovement_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getUnicoreDataMovement_presult__isset {
  _Airavata_getUnicoreDataMovement_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getUnicoreDataMovement_presult__isset;

class Airavata_getUnicoreDataMovement_presult {
 public:


  virtual ~Airavata_getUnicoreDataMovement_presult() throw() {}

   ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getUnicoreDataMovement_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_addGridFTPDataMovementDetails_args {
 public:

  Airavata_addGridFTPDataMovementDetails_args() : computeResourceId(), priorityOrder(0) {
  }

  virtual ~Airavata_addGridFTPDataMovementDetails_args() throw() {}

  std::string computeResourceId;
  int32_t priorityOrder;
   ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement gridFTPDataMovement;

  void __set_computeResourceId(const std::string& val) {
    computeResourceId = val;
  }

  void __set_priorityOrder(const int32_t val) {
    priorityOrder = val;
  }

  void __set_gridFTPDataMovement(const  ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement& val) {
    gridFTPDataMovement = val;
  }

  bool operator == (const Airavata_addGridFTPDataMovementDetails_args & rhs) const
  {
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    if (!(priorityOrder == rhs.priorityOrder))
      return false;
    if (!(gridFTPDataMovement == rhs.gridFTPDataMovement))
      return false;
    return true;
  }
  bool operator != (const Airavata_addGridFTPDataMovementDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addGridFTPDataMovementDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_addGridFTPDataMovementDetails_pargs {
 public:


  virtual ~Airavata_addGridFTPDataMovementDetails_pargs() throw() {}

  const std::string* computeResourceId;
  const int32_t* priorityOrder;
  const  ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement* gridFTPDataMovement;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_addGridFTPDataMovementDetails_result__isset {
  _Airavata_addGridFTPDataMovementDetails_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_addGridFTPDataMovementDetails_result__isset;

class Airavata_addGridFTPDataMovementDetails_result {
 public:

  Airavata_addGridFTPDataMovementDetails_result() : success() {
  }

  virtual ~Airavata_addGridFTPDataMovementDetails_result() throw() {}

  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_addGridFTPDataMovementDetails_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_addGridFTPDataMovementDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_addGridFTPDataMovementDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addGridFTPDataMovementDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_addGridFTPDataMovementDetails_presult__isset {
  _Airavata_addGridFTPDataMovementDetails_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_addGridFTPDataMovementDetails_presult__isset;

class Airavata_addGridFTPDataMovementDetails_presult {
 public:


  virtual ~Airavata_addGridFTPDataMovementDetails_presult() throw() {}

  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_addGridFTPDataMovementDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_updateGridFTPDataMovementDetails_args {
 public:

  Airavata_updateGridFTPDataMovementDetails_args() : dataMovementInterfaceId() {
  }

  virtual ~Airavata_updateGridFTPDataMovementDetails_args() throw() {}

  std::string dataMovementInterfaceId;
   ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement gridFTPDataMovement;

  void __set_dataMovementInterfaceId(const std::string& val) {
    dataMovementInterfaceId = val;
  }

  void __set_gridFTPDataMovement(const  ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement& val) {
    gridFTPDataMovement = val;
  }

  bool operator == (const Airavata_updateGridFTPDataMovementDetails_args & rhs) const
  {
    if (!(dataMovementInterfaceId == rhs.dataMovementInterfaceId))
      return false;
    if (!(gridFTPDataMovement == rhs.gridFTPDataMovement))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateGridFTPDataMovementDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateGridFTPDataMovementDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateGridFTPDataMovementDetails_pargs {
 public:


  virtual ~Airavata_updateGridFTPDataMovementDetails_pargs() throw() {}

  const std::string* dataMovementInterfaceId;
  const  ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement* gridFTPDataMovement;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateGridFTPDataMovementDetails_result__isset {
  _Airavata_updateGridFTPDataMovementDetails_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateGridFTPDataMovementDetails_result__isset;

class Airavata_updateGridFTPDataMovementDetails_result {
 public:

  Airavata_updateGridFTPDataMovementDetails_result() : success(0) {
  }

  virtual ~Airavata_updateGridFTPDataMovementDetails_result() throw() {}

  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateGridFTPDataMovementDetails_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_updateGridFTPDataMovementDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateGridFTPDataMovementDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateGridFTPDataMovementDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateGridFTPDataMovementDetails_presult__isset {
  _Airavata_updateGridFTPDataMovementDetails_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateGridFTPDataMovementDetails_presult__isset;

class Airavata_updateGridFTPDataMovementDetails_presult {
 public:


  virtual ~Airavata_updateGridFTPDataMovementDetails_presult() throw() {}

  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateGridFTPDataMovementDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getGridFTPDataMovement_args {
 public:

  Airavata_getGridFTPDataMovement_args() : dataMovementId() {
  }

  virtual ~Airavata_getGridFTPDataMovement_args() throw() {}

  std::string dataMovementId;

  void __set_dataMovementId(const std::string& val) {
    dataMovementId = val;
  }

  bool operator == (const Airavata_getGridFTPDataMovement_args & rhs) const
  {
    if (!(dataMovementId == rhs.dataMovementId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getGridFTPDataMovement_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getGridFTPDataMovement_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getGridFTPDataMovement_pargs {
 public:


  virtual ~Airavata_getGridFTPDataMovement_pargs() throw() {}

  const std::string* dataMovementId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getGridFTPDataMovement_result__isset {
  _Airavata_getGridFTPDataMovement_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getGridFTPDataMovement_result__isset;

class Airavata_getGridFTPDataMovement_result {
 public:

  Airavata_getGridFTPDataMovement_result() {
  }

  virtual ~Airavata_getGridFTPDataMovement_result() throw() {}

   ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getGridFTPDataMovement_result__isset __isset;

  void __set_success(const  ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement& val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getGridFTPDataMovement_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getGridFTPDataMovement_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getGridFTPDataMovement_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getGridFTPDataMovement_presult__isset {
  _Airavata_getGridFTPDataMovement_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getGridFTPDataMovement_presult__isset;

class Airavata_getGridFTPDataMovement_presult {
 public:


  virtual ~Airavata_getGridFTPDataMovement_presult() throw() {}

   ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getGridFTPDataMovement_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_changeJobSubmissionPriority_args {
 public:

  Airavata_changeJobSubmissionPriority_args() : jobSubmissionInterfaceId(), newPriorityOrder(0) {
  }

  virtual ~Airavata_changeJobSubmissionPriority_args() throw() {}

  std::string jobSubmissionInterfaceId;
  int32_t newPriorityOrder;

  void __set_jobSubmissionInterfaceId(const std::string& val) {
    jobSubmissionInterfaceId = val;
  }

  void __set_newPriorityOrder(const int32_t val) {
    newPriorityOrder = val;
  }

  bool operator == (const Airavata_changeJobSubmissionPriority_args & rhs) const
  {
    if (!(jobSubmissionInterfaceId == rhs.jobSubmissionInterfaceId))
      return false;
    if (!(newPriorityOrder == rhs.newPriorityOrder))
      return false;
    return true;
  }
  bool operator != (const Airavata_changeJobSubmissionPriority_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_changeJobSubmissionPriority_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_changeJobSubmissionPriority_pargs {
 public:


  virtual ~Airavata_changeJobSubmissionPriority_pargs() throw() {}

  const std::string* jobSubmissionInterfaceId;
  const int32_t* newPriorityOrder;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_changeJobSubmissionPriority_result__isset {
  _Airavata_changeJobSubmissionPriority_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_changeJobSubmissionPriority_result__isset;

class Airavata_changeJobSubmissionPriority_result {
 public:

  Airavata_changeJobSubmissionPriority_result() : success(0) {
  }

  virtual ~Airavata_changeJobSubmissionPriority_result() throw() {}

  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_changeJobSubmissionPriority_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_changeJobSubmissionPriority_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_changeJobSubmissionPriority_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_changeJobSubmissionPriority_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_changeJobSubmissionPriority_presult__isset {
  _Airavata_changeJobSubmissionPriority_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_changeJobSubmissionPriority_presult__isset;

class Airavata_changeJobSubmissionPriority_presult {
 public:


  virtual ~Airavata_changeJobSubmissionPriority_presult() throw() {}

  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_changeJobSubmissionPriority_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_changeDataMovementPriority_args {
 public:

  Airavata_changeDataMovementPriority_args() : dataMovementInterfaceId(), newPriorityOrder(0) {
  }

  virtual ~Airavata_changeDataMovementPriority_args() throw() {}

  std::string dataMovementInterfaceId;
  int32_t newPriorityOrder;

  void __set_dataMovementInterfaceId(const std::string& val) {
    dataMovementInterfaceId = val;
  }

  void __set_newPriorityOrder(const int32_t val) {
    newPriorityOrder = val;
  }

  bool operator == (const Airavata_changeDataMovementPriority_args & rhs) const
  {
    if (!(dataMovementInterfaceId == rhs.dataMovementInterfaceId))
      return false;
    if (!(newPriorityOrder == rhs.newPriorityOrder))
      return false;
    return true;
  }
  bool operator != (const Airavata_changeDataMovementPriority_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_changeDataMovementPriority_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_changeDataMovementPriority_pargs {
 public:


  virtual ~Airavata_changeDataMovementPriority_pargs() throw() {}

  const std::string* dataMovementInterfaceId;
  const int32_t* newPriorityOrder;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_changeDataMovementPriority_result__isset {
  _Airavata_changeDataMovementPriority_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_changeDataMovementPriority_result__isset;

class Airavata_changeDataMovementPriority_result {
 public:

  Airavata_changeDataMovementPriority_result() : success(0) {
  }

  virtual ~Airavata_changeDataMovementPriority_result() throw() {}

  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_changeDataMovementPriority_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_changeDataMovementPriority_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_changeDataMovementPriority_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_changeDataMovementPriority_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_changeDataMovementPriority_presult__isset {
  _Airavata_changeDataMovementPriority_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_changeDataMovementPriority_presult__isset;

class Airavata_changeDataMovementPriority_presult {
 public:


  virtual ~Airavata_changeDataMovementPriority_presult() throw() {}

  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_changeDataMovementPriority_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_changeJobSubmissionPriorities_args {
 public:

  Airavata_changeJobSubmissionPriorities_args() {
  }

  virtual ~Airavata_changeJobSubmissionPriorities_args() throw() {}

  std::map<std::string, int32_t>  jobSubmissionPriorityMap;

  void __set_jobSubmissionPriorityMap(const std::map<std::string, int32_t> & val) {
    jobSubmissionPriorityMap = val;
  }

  bool operator == (const Airavata_changeJobSubmissionPriorities_args & rhs) const
  {
    if (!(jobSubmissionPriorityMap == rhs.jobSubmissionPriorityMap))
      return false;
    return true;
  }
  bool operator != (const Airavata_changeJobSubmissionPriorities_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_changeJobSubmissionPriorities_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_changeJobSubmissionPriorities_pargs {
 public:


  virtual ~Airavata_changeJobSubmissionPriorities_pargs() throw() {}

  const std::map<std::string, int32_t> * jobSubmissionPriorityMap;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_changeJobSubmissionPriorities_result__isset {
  _Airavata_changeJobSubmissionPriorities_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_changeJobSubmissionPriorities_result__isset;

class Airavata_changeJobSubmissionPriorities_result {
 public:

  Airavata_changeJobSubmissionPriorities_result() : success(0) {
  }

  virtual ~Airavata_changeJobSubmissionPriorities_result() throw() {}

  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_changeJobSubmissionPriorities_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_changeJobSubmissionPriorities_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_changeJobSubmissionPriorities_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_changeJobSubmissionPriorities_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_changeJobSubmissionPriorities_presult__isset {
  _Airavata_changeJobSubmissionPriorities_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_changeJobSubmissionPriorities_presult__isset;

class Airavata_changeJobSubmissionPriorities_presult {
 public:


  virtual ~Airavata_changeJobSubmissionPriorities_presult() throw() {}

  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_changeJobSubmissionPriorities_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_changeDataMovementPriorities_args {
 public:

  Airavata_changeDataMovementPriorities_args() {
  }

  virtual ~Airavata_changeDataMovementPriorities_args() throw() {}

  std::map<std::string, int32_t>  dataMovementPriorityMap;

  void __set_dataMovementPriorityMap(const std::map<std::string, int32_t> & val) {
    dataMovementPriorityMap = val;
  }

  bool operator == (const Airavata_changeDataMovementPriorities_args & rhs) const
  {
    if (!(dataMovementPriorityMap == rhs.dataMovementPriorityMap))
      return false;
    return true;
  }
  bool operator != (const Airavata_changeDataMovementPriorities_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_changeDataMovementPriorities_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_changeDataMovementPriorities_pargs {
 public:


  virtual ~Airavata_changeDataMovementPriorities_pargs() throw() {}

  const std::map<std::string, int32_t> * dataMovementPriorityMap;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_changeDataMovementPriorities_result__isset {
  _Airavata_changeDataMovementPriorities_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_changeDataMovementPriorities_result__isset;

class Airavata_changeDataMovementPriorities_result {
 public:

  Airavata_changeDataMovementPriorities_result() : success(0) {
  }

  virtual ~Airavata_changeDataMovementPriorities_result() throw() {}

  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_changeDataMovementPriorities_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_changeDataMovementPriorities_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_changeDataMovementPriorities_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_changeDataMovementPriorities_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_changeDataMovementPriorities_presult__isset {
  _Airavata_changeDataMovementPriorities_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_changeDataMovementPriorities_presult__isset;

class Airavata_changeDataMovementPriorities_presult {
 public:


  virtual ~Airavata_changeDataMovementPriorities_presult() throw() {}

  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_changeDataMovementPriorities_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_deleteJobSubmissionInterface_args {
 public:

  Airavata_deleteJobSubmissionInterface_args() : computeResourceId(), jobSubmissionInterfaceId() {
  }

  virtual ~Airavata_deleteJobSubmissionInterface_args() throw() {}

  std::string computeResourceId;
  std::string jobSubmissionInterfaceId;

  void __set_computeResourceId(const std::string& val) {
    computeResourceId = val;
  }

  void __set_jobSubmissionInterfaceId(const std::string& val) {
    jobSubmissionInterfaceId = val;
  }

  bool operator == (const Airavata_deleteJobSubmissionInterface_args & rhs) const
  {
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    if (!(jobSubmissionInterfaceId == rhs.jobSubmissionInterfaceId))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteJobSubmissionInterface_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteJobSubmissionInterface_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_deleteJobSubmissionInterface_pargs {
 public:


  virtual ~Airavata_deleteJobSubmissionInterface_pargs() throw() {}

  const std::string* computeResourceId;
  const std::string* jobSubmissionInterfaceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_deleteJobSubmissionInterface_result__isset {
  _Airavata_deleteJobSubmissionInterface_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_deleteJobSubmissionInterface_result__isset;

class Airavata_deleteJobSubmissionInterface_result {
 public:

  Airavata_deleteJobSubmissionInterface_result() : success(0) {
  }

  virtual ~Airavata_deleteJobSubmissionInterface_result() throw() {}

  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_deleteJobSubmissionInterface_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_deleteJobSubmissionInterface_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteJobSubmissionInterface_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteJobSubmissionInterface_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_deleteJobSubmissionInterface_presult__isset {
  _Airavata_deleteJobSubmissionInterface_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_deleteJobSubmissionInterface_presult__isset;

class Airavata_deleteJobSubmissionInterface_presult {
 public:


  virtual ~Airavata_deleteJobSubmissionInterface_presult() throw() {}

  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_deleteJobSubmissionInterface_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_deleteDataMovementInterface_args {
 public:

  Airavata_deleteDataMovementInterface_args() : computeResourceId(), dataMovementInterfaceId() {
  }

  virtual ~Airavata_deleteDataMovementInterface_args() throw() {}

  std::string computeResourceId;
  std::string dataMovementInterfaceId;

  void __set_computeResourceId(const std::string& val) {
    computeResourceId = val;
  }

  void __set_dataMovementInterfaceId(const std::string& val) {
    dataMovementInterfaceId = val;
  }

  bool operator == (const Airavata_deleteDataMovementInterface_args & rhs) const
  {
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    if (!(dataMovementInterfaceId == rhs.dataMovementInterfaceId))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteDataMovementInterface_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteDataMovementInterface_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_deleteDataMovementInterface_pargs {
 public:


  virtual ~Airavata_deleteDataMovementInterface_pargs() throw() {}

  const std::string* computeResourceId;
  const std::string* dataMovementInterfaceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_deleteDataMovementInterface_result__isset {
  _Airavata_deleteDataMovementInterface_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_deleteDataMovementInterface_result__isset;

class Airavata_deleteDataMovementInterface_result {
 public:

  Airavata_deleteDataMovementInterface_result() : success(0) {
  }

  virtual ~Airavata_deleteDataMovementInterface_result() throw() {}

  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_deleteDataMovementInterface_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_deleteDataMovementInterface_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteDataMovementInterface_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteDataMovementInterface_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_deleteDataMovementInterface_presult__isset {
  _Airavata_deleteDataMovementInterface_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_deleteDataMovementInterface_presult__isset;

class Airavata_deleteDataMovementInterface_presult {
 public:


  virtual ~Airavata_deleteDataMovementInterface_presult() throw() {}

  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_deleteDataMovementInterface_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_registerResourceJobManager_args {
 public:

  Airavata_registerResourceJobManager_args() {
  }

  virtual ~Airavata_registerResourceJobManager_args() throw() {}

   ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager resourceJobManager;

  void __set_resourceJobManager(const  ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager& val) {
    resourceJobManager = val;
  }

  bool operator == (const Airavata_registerResourceJobManager_args & rhs) const
  {
    if (!(resourceJobManager == rhs.resourceJobManager))
      return false;
    return true;
  }
  bool operator != (const Airavata_registerResourceJobManager_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_registerResourceJobManager_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_registerResourceJobManager_pargs {
 public:


  virtual ~Airavata_registerResourceJobManager_pargs() throw() {}

  const  ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager* resourceJobManager;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_registerResourceJobManager_result__isset {
  _Airavata_registerResourceJobManager_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_registerResourceJobManager_result__isset;

class Airavata_registerResourceJobManager_result {
 public:

  Airavata_registerResourceJobManager_result() : success() {
  }

  virtual ~Airavata_registerResourceJobManager_result() throw() {}

  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_registerResourceJobManager_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_registerResourceJobManager_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_registerResourceJobManager_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_registerResourceJobManager_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_registerResourceJobManager_presult__isset {
  _Airavata_registerResourceJobManager_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_registerResourceJobManager_presult__isset;

class Airavata_registerResourceJobManager_presult {
 public:


  virtual ~Airavata_registerResourceJobManager_presult() throw() {}

  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_registerResourceJobManager_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_updateResourceJobManager_args {
 public:

  Airavata_updateResourceJobManager_args() : resourceJobManagerId() {
  }

  virtual ~Airavata_updateResourceJobManager_args() throw() {}

  std::string resourceJobManagerId;
   ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager updatedResourceJobManager;

  void __set_resourceJobManagerId(const std::string& val) {
    resourceJobManagerId = val;
  }

  void __set_updatedResourceJobManager(const  ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager& val) {
    updatedResourceJobManager = val;
  }

  bool operator == (const Airavata_updateResourceJobManager_args & rhs) const
  {
    if (!(resourceJobManagerId == rhs.resourceJobManagerId))
      return false;
    if (!(updatedResourceJobManager == rhs.updatedResourceJobManager))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateResourceJobManager_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateResourceJobManager_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateResourceJobManager_pargs {
 public:


  virtual ~Airavata_updateResourceJobManager_pargs() throw() {}

  const std::string* resourceJobManagerId;
  const  ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager* updatedResourceJobManager;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateResourceJobManager_result__isset {
  _Airavata_updateResourceJobManager_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateResourceJobManager_result__isset;

class Airavata_updateResourceJobManager_result {
 public:

  Airavata_updateResourceJobManager_result() : success(0) {
  }

  virtual ~Airavata_updateResourceJobManager_result() throw() {}

  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateResourceJobManager_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_updateResourceJobManager_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateResourceJobManager_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateResourceJobManager_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateResourceJobManager_presult__isset {
  _Airavata_updateResourceJobManager_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateResourceJobManager_presult__isset;

class Airavata_updateResourceJobManager_presult {
 public:


  virtual ~Airavata_updateResourceJobManager_presult() throw() {}

  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateResourceJobManager_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getResourceJobManager_args {
 public:

  Airavata_getResourceJobManager_args() : resourceJobManagerId() {
  }

  virtual ~Airavata_getResourceJobManager_args() throw() {}

  std::string resourceJobManagerId;

  void __set_resourceJobManagerId(const std::string& val) {
    resourceJobManagerId = val;
  }

  bool operator == (const Airavata_getResourceJobManager_args & rhs) const
  {
    if (!(resourceJobManagerId == rhs.resourceJobManagerId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getResourceJobManager_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getResourceJobManager_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getResourceJobManager_pargs {
 public:


  virtual ~Airavata_getResourceJobManager_pargs() throw() {}

  const std::string* resourceJobManagerId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getResourceJobManager_result__isset {
  _Airavata_getResourceJobManager_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getResourceJobManager_result__isset;

class Airavata_getResourceJobManager_result {
 public:

  Airavata_getResourceJobManager_result() {
  }

  virtual ~Airavata_getResourceJobManager_result() throw() {}

   ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getResourceJobManager_result__isset __isset;

  void __set_success(const  ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager& val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getResourceJobManager_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getResourceJobManager_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getResourceJobManager_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getResourceJobManager_presult__isset {
  _Airavata_getResourceJobManager_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getResourceJobManager_presult__isset;

class Airavata_getResourceJobManager_presult {
 public:


  virtual ~Airavata_getResourceJobManager_presult() throw() {}

   ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getResourceJobManager_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_deleteResourceJobManager_args {
 public:

  Airavata_deleteResourceJobManager_args() : resourceJobManagerId() {
  }

  virtual ~Airavata_deleteResourceJobManager_args() throw() {}

  std::string resourceJobManagerId;

  void __set_resourceJobManagerId(const std::string& val) {
    resourceJobManagerId = val;
  }

  bool operator == (const Airavata_deleteResourceJobManager_args & rhs) const
  {
    if (!(resourceJobManagerId == rhs.resourceJobManagerId))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteResourceJobManager_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteResourceJobManager_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_deleteResourceJobManager_pargs {
 public:


  virtual ~Airavata_deleteResourceJobManager_pargs() throw() {}

  const std::string* resourceJobManagerId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_deleteResourceJobManager_result__isset {
  _Airavata_deleteResourceJobManager_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_deleteResourceJobManager_result__isset;

class Airavata_deleteResourceJobManager_result {
 public:

  Airavata_deleteResourceJobManager_result() : success(0) {
  }

  virtual ~Airavata_deleteResourceJobManager_result() throw() {}

  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_deleteResourceJobManager_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_deleteResourceJobManager_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteResourceJobManager_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteResourceJobManager_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_deleteResourceJobManager_presult__isset {
  _Airavata_deleteResourceJobManager_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_deleteResourceJobManager_presult__isset;

class Airavata_deleteResourceJobManager_presult {
 public:


  virtual ~Airavata_deleteResourceJobManager_presult() throw() {}

  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_deleteResourceJobManager_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_deleteBatchQueue_args {
 public:

  Airavata_deleteBatchQueue_args() : computeResourceId(), queueName() {
  }

  virtual ~Airavata_deleteBatchQueue_args() throw() {}

  std::string computeResourceId;
  std::string queueName;

  void __set_computeResourceId(const std::string& val) {
    computeResourceId = val;
  }

  void __set_queueName(const std::string& val) {
    queueName = val;
  }

  bool operator == (const Airavata_deleteBatchQueue_args & rhs) const
  {
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    if (!(queueName == rhs.queueName))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteBatchQueue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteBatchQueue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_deleteBatchQueue_pargs {
 public:


  virtual ~Airavata_deleteBatchQueue_pargs() throw() {}

  const std::string* computeResourceId;
  const std::string* queueName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_deleteBatchQueue_result__isset {
  _Airavata_deleteBatchQueue_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_deleteBatchQueue_result__isset;

class Airavata_deleteBatchQueue_result {
 public:

  Airavata_deleteBatchQueue_result() : success(0) {
  }

  virtual ~Airavata_deleteBatchQueue_result() throw() {}

  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_deleteBatchQueue_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_deleteBatchQueue_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteBatchQueue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteBatchQueue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_deleteBatchQueue_presult__isset {
  _Airavata_deleteBatchQueue_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_deleteBatchQueue_presult__isset;

class Airavata_deleteBatchQueue_presult {
 public:


  virtual ~Airavata_deleteBatchQueue_presult() throw() {}

  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_deleteBatchQueue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_registerGatewayResourceProfile_args {
 public:

  Airavata_registerGatewayResourceProfile_args() {
  }

  virtual ~Airavata_registerGatewayResourceProfile_args() throw() {}

   ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile gatewayResourceProfile;

  void __set_gatewayResourceProfile(const  ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile& val) {
    gatewayResourceProfile = val;
  }

  bool operator == (const Airavata_registerGatewayResourceProfile_args & rhs) const
  {
    if (!(gatewayResourceProfile == rhs.gatewayResourceProfile))
      return false;
    return true;
  }
  bool operator != (const Airavata_registerGatewayResourceProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_registerGatewayResourceProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_registerGatewayResourceProfile_pargs {
 public:


  virtual ~Airavata_registerGatewayResourceProfile_pargs() throw() {}

  const  ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile* gatewayResourceProfile;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_registerGatewayResourceProfile_result__isset {
  _Airavata_registerGatewayResourceProfile_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_registerGatewayResourceProfile_result__isset;

class Airavata_registerGatewayResourceProfile_result {
 public:

  Airavata_registerGatewayResourceProfile_result() : success() {
  }

  virtual ~Airavata_registerGatewayResourceProfile_result() throw() {}

  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_registerGatewayResourceProfile_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_registerGatewayResourceProfile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_registerGatewayResourceProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_registerGatewayResourceProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_registerGatewayResourceProfile_presult__isset {
  _Airavata_registerGatewayResourceProfile_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_registerGatewayResourceProfile_presult__isset;

class Airavata_registerGatewayResourceProfile_presult {
 public:


  virtual ~Airavata_registerGatewayResourceProfile_presult() throw() {}

  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_registerGatewayResourceProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getGatewayResourceProfile_args {
 public:

  Airavata_getGatewayResourceProfile_args() : gatewayID() {
  }

  virtual ~Airavata_getGatewayResourceProfile_args() throw() {}

  std::string gatewayID;

  void __set_gatewayID(const std::string& val) {
    gatewayID = val;
  }

  bool operator == (const Airavata_getGatewayResourceProfile_args & rhs) const
  {
    if (!(gatewayID == rhs.gatewayID))
      return false;
    return true;
  }
  bool operator != (const Airavata_getGatewayResourceProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getGatewayResourceProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getGatewayResourceProfile_pargs {
 public:


  virtual ~Airavata_getGatewayResourceProfile_pargs() throw() {}

  const std::string* gatewayID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getGatewayResourceProfile_result__isset {
  _Airavata_getGatewayResourceProfile_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getGatewayResourceProfile_result__isset;

class Airavata_getGatewayResourceProfile_result {
 public:

  Airavata_getGatewayResourceProfile_result() {
  }

  virtual ~Airavata_getGatewayResourceProfile_result() throw() {}

   ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getGatewayResourceProfile_result__isset __isset;

  void __set_success(const  ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile& val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getGatewayResourceProfile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getGatewayResourceProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getGatewayResourceProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getGatewayResourceProfile_presult__isset {
  _Airavata_getGatewayResourceProfile_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getGatewayResourceProfile_presult__isset;

class Airavata_getGatewayResourceProfile_presult {
 public:


  virtual ~Airavata_getGatewayResourceProfile_presult() throw() {}

   ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getGatewayResourceProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_updateGatewayResourceProfile_args {
 public:

  Airavata_updateGatewayResourceProfile_args() : gatewayID() {
  }

  virtual ~Airavata_updateGatewayResourceProfile_args() throw() {}

  std::string gatewayID;
   ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile gatewayResourceProfile;

  void __set_gatewayID(const std::string& val) {
    gatewayID = val;
  }

  void __set_gatewayResourceProfile(const  ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile& val) {
    gatewayResourceProfile = val;
  }

  bool operator == (const Airavata_updateGatewayResourceProfile_args & rhs) const
  {
    if (!(gatewayID == rhs.gatewayID))
      return false;
    if (!(gatewayResourceProfile == rhs.gatewayResourceProfile))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateGatewayResourceProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateGatewayResourceProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateGatewayResourceProfile_pargs {
 public:


  virtual ~Airavata_updateGatewayResourceProfile_pargs() throw() {}

  const std::string* gatewayID;
  const  ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile* gatewayResourceProfile;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateGatewayResourceProfile_result__isset {
  _Airavata_updateGatewayResourceProfile_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateGatewayResourceProfile_result__isset;

class Airavata_updateGatewayResourceProfile_result {
 public:

  Airavata_updateGatewayResourceProfile_result() : success(0) {
  }

  virtual ~Airavata_updateGatewayResourceProfile_result() throw() {}

  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateGatewayResourceProfile_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_updateGatewayResourceProfile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateGatewayResourceProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateGatewayResourceProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateGatewayResourceProfile_presult__isset {
  _Airavata_updateGatewayResourceProfile_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateGatewayResourceProfile_presult__isset;

class Airavata_updateGatewayResourceProfile_presult {
 public:


  virtual ~Airavata_updateGatewayResourceProfile_presult() throw() {}

  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateGatewayResourceProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_deleteGatewayResourceProfile_args {
 public:

  Airavata_deleteGatewayResourceProfile_args() : gatewayID() {
  }

  virtual ~Airavata_deleteGatewayResourceProfile_args() throw() {}

  std::string gatewayID;

  void __set_gatewayID(const std::string& val) {
    gatewayID = val;
  }

  bool operator == (const Airavata_deleteGatewayResourceProfile_args & rhs) const
  {
    if (!(gatewayID == rhs.gatewayID))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteGatewayResourceProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteGatewayResourceProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_deleteGatewayResourceProfile_pargs {
 public:


  virtual ~Airavata_deleteGatewayResourceProfile_pargs() throw() {}

  const std::string* gatewayID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_deleteGatewayResourceProfile_result__isset {
  _Airavata_deleteGatewayResourceProfile_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_deleteGatewayResourceProfile_result__isset;

class Airavata_deleteGatewayResourceProfile_result {
 public:

  Airavata_deleteGatewayResourceProfile_result() : success(0) {
  }

  virtual ~Airavata_deleteGatewayResourceProfile_result() throw() {}

  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_deleteGatewayResourceProfile_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_deleteGatewayResourceProfile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteGatewayResourceProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteGatewayResourceProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_deleteGatewayResourceProfile_presult__isset {
  _Airavata_deleteGatewayResourceProfile_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_deleteGatewayResourceProfile_presult__isset;

class Airavata_deleteGatewayResourceProfile_presult {
 public:


  virtual ~Airavata_deleteGatewayResourceProfile_presult() throw() {}

  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_deleteGatewayResourceProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_addGatewayComputeResourcePreference_args {
 public:

  Airavata_addGatewayComputeResourcePreference_args() : gatewayID(), computeResourceId() {
  }

  virtual ~Airavata_addGatewayComputeResourcePreference_args() throw() {}

  std::string gatewayID;
  std::string computeResourceId;
   ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference computeResourcePreference;

  void __set_gatewayID(const std::string& val) {
    gatewayID = val;
  }

  void __set_computeResourceId(const std::string& val) {
    computeResourceId = val;
  }

  void __set_computeResourcePreference(const  ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference& val) {
    computeResourcePreference = val;
  }

  bool operator == (const Airavata_addGatewayComputeResourcePreference_args & rhs) const
  {
    if (!(gatewayID == rhs.gatewayID))
      return false;
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    if (!(computeResourcePreference == rhs.computeResourcePreference))
      return false;
    return true;
  }
  bool operator != (const Airavata_addGatewayComputeResourcePreference_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addGatewayComputeResourcePreference_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_addGatewayComputeResourcePreference_pargs {
 public:


  virtual ~Airavata_addGatewayComputeResourcePreference_pargs() throw() {}

  const std::string* gatewayID;
  const std::string* computeResourceId;
  const  ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference* computeResourcePreference;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_addGatewayComputeResourcePreference_result__isset {
  _Airavata_addGatewayComputeResourcePreference_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_addGatewayComputeResourcePreference_result__isset;

class Airavata_addGatewayComputeResourcePreference_result {
 public:

  Airavata_addGatewayComputeResourcePreference_result() : success(0) {
  }

  virtual ~Airavata_addGatewayComputeResourcePreference_result() throw() {}

  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_addGatewayComputeResourcePreference_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_addGatewayComputeResourcePreference_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_addGatewayComputeResourcePreference_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addGatewayComputeResourcePreference_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_addGatewayComputeResourcePreference_presult__isset {
  _Airavata_addGatewayComputeResourcePreference_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_addGatewayComputeResourcePreference_presult__isset;

class Airavata_addGatewayComputeResourcePreference_presult {
 public:


  virtual ~Airavata_addGatewayComputeResourcePreference_presult() throw() {}

  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_addGatewayComputeResourcePreference_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getGatewayComputeResourcePreference_args {
 public:

  Airavata_getGatewayComputeResourcePreference_args() : gatewayID(), computeResourceId() {
  }

  virtual ~Airavata_getGatewayComputeResourcePreference_args() throw() {}

  std::string gatewayID;
  std::string computeResourceId;

  void __set_gatewayID(const std::string& val) {
    gatewayID = val;
  }

  void __set_computeResourceId(const std::string& val) {
    computeResourceId = val;
  }

  bool operator == (const Airavata_getGatewayComputeResourcePreference_args & rhs) const
  {
    if (!(gatewayID == rhs.gatewayID))
      return false;
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getGatewayComputeResourcePreference_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getGatewayComputeResourcePreference_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getGatewayComputeResourcePreference_pargs {
 public:


  virtual ~Airavata_getGatewayComputeResourcePreference_pargs() throw() {}

  const std::string* gatewayID;
  const std::string* computeResourceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getGatewayComputeResourcePreference_result__isset {
  _Airavata_getGatewayComputeResourcePreference_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getGatewayComputeResourcePreference_result__isset;

class Airavata_getGatewayComputeResourcePreference_result {
 public:

  Airavata_getGatewayComputeResourcePreference_result() {
  }

  virtual ~Airavata_getGatewayComputeResourcePreference_result() throw() {}

   ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getGatewayComputeResourcePreference_result__isset __isset;

  void __set_success(const  ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference& val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getGatewayComputeResourcePreference_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getGatewayComputeResourcePreference_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getGatewayComputeResourcePreference_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getGatewayComputeResourcePreference_presult__isset {
  _Airavata_getGatewayComputeResourcePreference_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getGatewayComputeResourcePreference_presult__isset;

class Airavata_getGatewayComputeResourcePreference_presult {
 public:


  virtual ~Airavata_getGatewayComputeResourcePreference_presult() throw() {}

   ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getGatewayComputeResourcePreference_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getAllGatewayComputeResourcePreferences_args {
 public:

  Airavata_getAllGatewayComputeResourcePreferences_args() : gatewayID() {
  }

  virtual ~Airavata_getAllGatewayComputeResourcePreferences_args() throw() {}

  std::string gatewayID;

  void __set_gatewayID(const std::string& val) {
    gatewayID = val;
  }

  bool operator == (const Airavata_getAllGatewayComputeResourcePreferences_args & rhs) const
  {
    if (!(gatewayID == rhs.gatewayID))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllGatewayComputeResourcePreferences_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllGatewayComputeResourcePreferences_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getAllGatewayComputeResourcePreferences_pargs {
 public:


  virtual ~Airavata_getAllGatewayComputeResourcePreferences_pargs() throw() {}

  const std::string* gatewayID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllGatewayComputeResourcePreferences_result__isset {
  _Airavata_getAllGatewayComputeResourcePreferences_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAllGatewayComputeResourcePreferences_result__isset;

class Airavata_getAllGatewayComputeResourcePreferences_result {
 public:

  Airavata_getAllGatewayComputeResourcePreferences_result() {
  }

  virtual ~Airavata_getAllGatewayComputeResourcePreferences_result() throw() {}

  std::vector< ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAllGatewayComputeResourcePreferences_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference> & val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getAllGatewayComputeResourcePreferences_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllGatewayComputeResourcePreferences_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllGatewayComputeResourcePreferences_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllGatewayComputeResourcePreferences_presult__isset {
  _Airavata_getAllGatewayComputeResourcePreferences_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAllGatewayComputeResourcePreferences_presult__isset;

class Airavata_getAllGatewayComputeResourcePreferences_presult {
 public:


  virtual ~Airavata_getAllGatewayComputeResourcePreferences_presult() throw() {}

  std::vector< ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAllGatewayComputeResourcePreferences_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getAllGatewayComputeResources_args {
 public:

  Airavata_getAllGatewayComputeResources_args() {
  }

  virtual ~Airavata_getAllGatewayComputeResources_args() throw() {}


  bool operator == (const Airavata_getAllGatewayComputeResources_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Airavata_getAllGatewayComputeResources_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllGatewayComputeResources_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getAllGatewayComputeResources_pargs {
 public:


  virtual ~Airavata_getAllGatewayComputeResources_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllGatewayComputeResources_result__isset {
  _Airavata_getAllGatewayComputeResources_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAllGatewayComputeResources_result__isset;

class Airavata_getAllGatewayComputeResources_result {
 public:

  Airavata_getAllGatewayComputeResources_result() {
  }

  virtual ~Airavata_getAllGatewayComputeResources_result() throw() {}

  std::vector< ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAllGatewayComputeResources_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile> & val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getAllGatewayComputeResources_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllGatewayComputeResources_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllGatewayComputeResources_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllGatewayComputeResources_presult__isset {
  _Airavata_getAllGatewayComputeResources_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAllGatewayComputeResources_presult__isset;

class Airavata_getAllGatewayComputeResources_presult {
 public:


  virtual ~Airavata_getAllGatewayComputeResources_presult() throw() {}

  std::vector< ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAllGatewayComputeResources_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_updateGatewayComputeResourcePreference_args {
 public:

  Airavata_updateGatewayComputeResourcePreference_args() : gatewayID(), computeResourceId() {
  }

  virtual ~Airavata_updateGatewayComputeResourcePreference_args() throw() {}

  std::string gatewayID;
  std::string computeResourceId;
   ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference computeResourcePreference;

  void __set_gatewayID(const std::string& val) {
    gatewayID = val;
  }

  void __set_computeResourceId(const std::string& val) {
    computeResourceId = val;
  }

  void __set_computeResourcePreference(const  ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference& val) {
    computeResourcePreference = val;
  }

  bool operator == (const Airavata_updateGatewayComputeResourcePreference_args & rhs) const
  {
    if (!(gatewayID == rhs.gatewayID))
      return false;
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    if (!(computeResourcePreference == rhs.computeResourcePreference))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateGatewayComputeResourcePreference_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateGatewayComputeResourcePreference_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateGatewayComputeResourcePreference_pargs {
 public:


  virtual ~Airavata_updateGatewayComputeResourcePreference_pargs() throw() {}

  const std::string* gatewayID;
  const std::string* computeResourceId;
  const  ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference* computeResourcePreference;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateGatewayComputeResourcePreference_result__isset {
  _Airavata_updateGatewayComputeResourcePreference_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateGatewayComputeResourcePreference_result__isset;

class Airavata_updateGatewayComputeResourcePreference_result {
 public:

  Airavata_updateGatewayComputeResourcePreference_result() : success(0) {
  }

  virtual ~Airavata_updateGatewayComputeResourcePreference_result() throw() {}

  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateGatewayComputeResourcePreference_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_updateGatewayComputeResourcePreference_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateGatewayComputeResourcePreference_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateGatewayComputeResourcePreference_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateGatewayComputeResourcePreference_presult__isset {
  _Airavata_updateGatewayComputeResourcePreference_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateGatewayComputeResourcePreference_presult__isset;

class Airavata_updateGatewayComputeResourcePreference_presult {
 public:


  virtual ~Airavata_updateGatewayComputeResourcePreference_presult() throw() {}

  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateGatewayComputeResourcePreference_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_deleteGatewayComputeResourcePreference_args {
 public:

  Airavata_deleteGatewayComputeResourcePreference_args() : gatewayID(), computeResourceId() {
  }

  virtual ~Airavata_deleteGatewayComputeResourcePreference_args() throw() {}

  std::string gatewayID;
  std::string computeResourceId;

  void __set_gatewayID(const std::string& val) {
    gatewayID = val;
  }

  void __set_computeResourceId(const std::string& val) {
    computeResourceId = val;
  }

  bool operator == (const Airavata_deleteGatewayComputeResourcePreference_args & rhs) const
  {
    if (!(gatewayID == rhs.gatewayID))
      return false;
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteGatewayComputeResourcePreference_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteGatewayComputeResourcePreference_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_deleteGatewayComputeResourcePreference_pargs {
 public:


  virtual ~Airavata_deleteGatewayComputeResourcePreference_pargs() throw() {}

  const std::string* gatewayID;
  const std::string* computeResourceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_deleteGatewayComputeResourcePreference_result__isset {
  _Airavata_deleteGatewayComputeResourcePreference_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_deleteGatewayComputeResourcePreference_result__isset;

class Airavata_deleteGatewayComputeResourcePreference_result {
 public:

  Airavata_deleteGatewayComputeResourcePreference_result() : success(0) {
  }

  virtual ~Airavata_deleteGatewayComputeResourcePreference_result() throw() {}

  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_deleteGatewayComputeResourcePreference_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_deleteGatewayComputeResourcePreference_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteGatewayComputeResourcePreference_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteGatewayComputeResourcePreference_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_deleteGatewayComputeResourcePreference_presult__isset {
  _Airavata_deleteGatewayComputeResourcePreference_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_deleteGatewayComputeResourcePreference_presult__isset;

class Airavata_deleteGatewayComputeResourcePreference_presult {
 public:


  virtual ~Airavata_deleteGatewayComputeResourcePreference_presult() throw() {}

  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_deleteGatewayComputeResourcePreference_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getAllWorkflows_args {
 public:

  Airavata_getAllWorkflows_args() : gatewayId() {
  }

  virtual ~Airavata_getAllWorkflows_args() throw() {}

  std::string gatewayId;

  void __set_gatewayId(const std::string& val) {
    gatewayId = val;
  }

  bool operator == (const Airavata_getAllWorkflows_args & rhs) const
  {
    if (!(gatewayId == rhs.gatewayId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllWorkflows_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllWorkflows_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getAllWorkflows_pargs {
 public:


  virtual ~Airavata_getAllWorkflows_pargs() throw() {}

  const std::string* gatewayId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllWorkflows_result__isset {
  _Airavata_getAllWorkflows_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAllWorkflows_result__isset;

class Airavata_getAllWorkflows_result {
 public:

  Airavata_getAllWorkflows_result() {
  }

  virtual ~Airavata_getAllWorkflows_result() throw() {}

  std::vector<std::string>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAllWorkflows_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getAllWorkflows_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllWorkflows_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllWorkflows_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getAllWorkflows_presult__isset {
  _Airavata_getAllWorkflows_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getAllWorkflows_presult__isset;

class Airavata_getAllWorkflows_presult {
 public:


  virtual ~Airavata_getAllWorkflows_presult() throw() {}

  std::vector<std::string> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAllWorkflows_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getWorkflow_args {
 public:

  Airavata_getWorkflow_args() : workflowTemplateId() {
  }

  virtual ~Airavata_getWorkflow_args() throw() {}

  std::string workflowTemplateId;

  void __set_workflowTemplateId(const std::string& val) {
    workflowTemplateId = val;
  }

  bool operator == (const Airavata_getWorkflow_args & rhs) const
  {
    if (!(workflowTemplateId == rhs.workflowTemplateId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getWorkflow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getWorkflow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getWorkflow_pargs {
 public:


  virtual ~Airavata_getWorkflow_pargs() throw() {}

  const std::string* workflowTemplateId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getWorkflow_result__isset {
  _Airavata_getWorkflow_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getWorkflow_result__isset;

class Airavata_getWorkflow_result {
 public:

  Airavata_getWorkflow_result() {
  }

  virtual ~Airavata_getWorkflow_result() throw() {}

   ::Workflow success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getWorkflow_result__isset __isset;

  void __set_success(const  ::Workflow& val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getWorkflow_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getWorkflow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getWorkflow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getWorkflow_presult__isset {
  _Airavata_getWorkflow_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getWorkflow_presult__isset;

class Airavata_getWorkflow_presult {
 public:


  virtual ~Airavata_getWorkflow_presult() throw() {}

   ::Workflow* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getWorkflow_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_deleteWorkflow_args {
 public:

  Airavata_deleteWorkflow_args() : workflowTemplateId() {
  }

  virtual ~Airavata_deleteWorkflow_args() throw() {}

  std::string workflowTemplateId;

  void __set_workflowTemplateId(const std::string& val) {
    workflowTemplateId = val;
  }

  bool operator == (const Airavata_deleteWorkflow_args & rhs) const
  {
    if (!(workflowTemplateId == rhs.workflowTemplateId))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteWorkflow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteWorkflow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_deleteWorkflow_pargs {
 public:


  virtual ~Airavata_deleteWorkflow_pargs() throw() {}

  const std::string* workflowTemplateId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_deleteWorkflow_result__isset {
  _Airavata_deleteWorkflow_result__isset() : ire(false), ace(false), ase(false) {}
  bool ire;
  bool ace;
  bool ase;
} _Airavata_deleteWorkflow_result__isset;

class Airavata_deleteWorkflow_result {
 public:

  Airavata_deleteWorkflow_result() {
  }

  virtual ~Airavata_deleteWorkflow_result() throw() {}

   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_deleteWorkflow_result__isset __isset;

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_deleteWorkflow_result & rhs) const
  {
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteWorkflow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteWorkflow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_deleteWorkflow_presult__isset {
  _Airavata_deleteWorkflow_presult__isset() : ire(false), ace(false), ase(false) {}
  bool ire;
  bool ace;
  bool ase;
} _Airavata_deleteWorkflow_presult__isset;

class Airavata_deleteWorkflow_presult {
 public:


  virtual ~Airavata_deleteWorkflow_presult() throw() {}

   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_deleteWorkflow_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_registerWorkflow_args {
 public:

  Airavata_registerWorkflow_args() : gatewayId() {
  }

  virtual ~Airavata_registerWorkflow_args() throw() {}

  std::string gatewayId;
   ::Workflow workflow;

  void __set_gatewayId(const std::string& val) {
    gatewayId = val;
  }

  void __set_workflow(const  ::Workflow& val) {
    workflow = val;
  }

  bool operator == (const Airavata_registerWorkflow_args & rhs) const
  {
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(workflow == rhs.workflow))
      return false;
    return true;
  }
  bool operator != (const Airavata_registerWorkflow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_registerWorkflow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_registerWorkflow_pargs {
 public:


  virtual ~Airavata_registerWorkflow_pargs() throw() {}

  const std::string* gatewayId;
  const  ::Workflow* workflow;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_registerWorkflow_result__isset {
  _Airavata_registerWorkflow_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_registerWorkflow_result__isset;

class Airavata_registerWorkflow_result {
 public:

  Airavata_registerWorkflow_result() : success() {
  }

  virtual ~Airavata_registerWorkflow_result() throw() {}

  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_registerWorkflow_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_registerWorkflow_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_registerWorkflow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_registerWorkflow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_registerWorkflow_presult__isset {
  _Airavata_registerWorkflow_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_registerWorkflow_presult__isset;

class Airavata_registerWorkflow_presult {
 public:


  virtual ~Airavata_registerWorkflow_presult() throw() {}

  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_registerWorkflow_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_updateWorkflow_args {
 public:

  Airavata_updateWorkflow_args() : workflowTemplateId() {
  }

  virtual ~Airavata_updateWorkflow_args() throw() {}

  std::string workflowTemplateId;
   ::Workflow workflow;

  void __set_workflowTemplateId(const std::string& val) {
    workflowTemplateId = val;
  }

  void __set_workflow(const  ::Workflow& val) {
    workflow = val;
  }

  bool operator == (const Airavata_updateWorkflow_args & rhs) const
  {
    if (!(workflowTemplateId == rhs.workflowTemplateId))
      return false;
    if (!(workflow == rhs.workflow))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateWorkflow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateWorkflow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_updateWorkflow_pargs {
 public:


  virtual ~Airavata_updateWorkflow_pargs() throw() {}

  const std::string* workflowTemplateId;
  const  ::Workflow* workflow;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateWorkflow_result__isset {
  _Airavata_updateWorkflow_result__isset() : ire(false), ace(false), ase(false) {}
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateWorkflow_result__isset;

class Airavata_updateWorkflow_result {
 public:

  Airavata_updateWorkflow_result() {
  }

  virtual ~Airavata_updateWorkflow_result() throw() {}

   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateWorkflow_result__isset __isset;

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_updateWorkflow_result & rhs) const
  {
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateWorkflow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateWorkflow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_updateWorkflow_presult__isset {
  _Airavata_updateWorkflow_presult__isset() : ire(false), ace(false), ase(false) {}
  bool ire;
  bool ace;
  bool ase;
} _Airavata_updateWorkflow_presult__isset;

class Airavata_updateWorkflow_presult {
 public:


  virtual ~Airavata_updateWorkflow_presult() throw() {}

   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_updateWorkflow_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_getWorkflowTemplateId_args {
 public:

  Airavata_getWorkflowTemplateId_args() : workflowName() {
  }

  virtual ~Airavata_getWorkflowTemplateId_args() throw() {}

  std::string workflowName;

  void __set_workflowName(const std::string& val) {
    workflowName = val;
  }

  bool operator == (const Airavata_getWorkflowTemplateId_args & rhs) const
  {
    if (!(workflowName == rhs.workflowName))
      return false;
    return true;
  }
  bool operator != (const Airavata_getWorkflowTemplateId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getWorkflowTemplateId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_getWorkflowTemplateId_pargs {
 public:


  virtual ~Airavata_getWorkflowTemplateId_pargs() throw() {}

  const std::string* workflowName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getWorkflowTemplateId_result__isset {
  _Airavata_getWorkflowTemplateId_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getWorkflowTemplateId_result__isset;

class Airavata_getWorkflowTemplateId_result {
 public:

  Airavata_getWorkflowTemplateId_result() : success() {
  }

  virtual ~Airavata_getWorkflowTemplateId_result() throw() {}

  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getWorkflowTemplateId_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_getWorkflowTemplateId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getWorkflowTemplateId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getWorkflowTemplateId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_getWorkflowTemplateId_presult__isset {
  _Airavata_getWorkflowTemplateId_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_getWorkflowTemplateId_presult__isset;

class Airavata_getWorkflowTemplateId_presult {
 public:


  virtual ~Airavata_getWorkflowTemplateId_presult() throw() {}

  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getWorkflowTemplateId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Airavata_isWorkflowExistWithName_args {
 public:

  Airavata_isWorkflowExistWithName_args() : workflowName() {
  }

  virtual ~Airavata_isWorkflowExistWithName_args() throw() {}

  std::string workflowName;

  void __set_workflowName(const std::string& val) {
    workflowName = val;
  }

  bool operator == (const Airavata_isWorkflowExistWithName_args & rhs) const
  {
    if (!(workflowName == rhs.workflowName))
      return false;
    return true;
  }
  bool operator != (const Airavata_isWorkflowExistWithName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_isWorkflowExistWithName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Airavata_isWorkflowExistWithName_pargs {
 public:


  virtual ~Airavata_isWorkflowExistWithName_pargs() throw() {}

  const std::string* workflowName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_isWorkflowExistWithName_result__isset {
  _Airavata_isWorkflowExistWithName_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_isWorkflowExistWithName_result__isset;

class Airavata_isWorkflowExistWithName_result {
 public:

  Airavata_isWorkflowExistWithName_result() : success(0) {
  }

  virtual ~Airavata_isWorkflowExistWithName_result() throw() {}

  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_isWorkflowExistWithName_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const Airavata_isWorkflowExistWithName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_isWorkflowExistWithName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_isWorkflowExistWithName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Airavata_isWorkflowExistWithName_presult__isset {
  _Airavata_isWorkflowExistWithName_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _Airavata_isWorkflowExistWithName_presult__isset;

class Airavata_isWorkflowExistWithName_presult {
 public:


  virtual ~Airavata_isWorkflowExistWithName_presult() throw() {}

  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_isWorkflowExistWithName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AiravataClient : virtual public AiravataIf {
 public:
  AiravataClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  AiravataClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getAPIVersion(std::string& _return);
  void send_getAPIVersion();
  void recv_getAPIVersion(std::string& _return);
  void addGateway(std::string& _return, const  ::apache::airavata::model::workspace::Gateway& gateway);
  void send_addGateway(const  ::apache::airavata::model::workspace::Gateway& gateway);
  void recv_addGateway(std::string& _return);
  void updateGateway(const std::string& gatewayId, const  ::apache::airavata::model::workspace::Gateway& updatedGateway);
  void send_updateGateway(const std::string& gatewayId, const  ::apache::airavata::model::workspace::Gateway& updatedGateway);
  void recv_updateGateway();
  void getGateway( ::apache::airavata::model::workspace::Gateway& _return, const std::string& gatewayId);
  void send_getGateway(const std::string& gatewayId);
  void recv_getGateway( ::apache::airavata::model::workspace::Gateway& _return);
  bool deleteGateway(const std::string& gatewayId);
  void send_deleteGateway(const std::string& gatewayId);
  bool recv_deleteGateway();
  void getAllGateways(std::vector< ::apache::airavata::model::workspace::Gateway> & _return);
  void send_getAllGateways();
  void recv_getAllGateways(std::vector< ::apache::airavata::model::workspace::Gateway> & _return);
  bool isGatewayExist(const std::string& gatewayId);
  void send_isGatewayExist(const std::string& gatewayId);
  bool recv_isGatewayExist();
  void generateAndRegisterSSHKeys(std::string& _return, const std::string& gatewayId, const std::string& userName);
  void send_generateAndRegisterSSHKeys(const std::string& gatewayId, const std::string& userName);
  void recv_generateAndRegisterSSHKeys(std::string& _return);
  void getSSHPubKey(std::string& _return, const std::string& airavataCredStoreToken);
  void send_getSSHPubKey(const std::string& airavataCredStoreToken);
  void recv_getSSHPubKey(std::string& _return);
  void getAllUserSSHPubKeys(std::map<std::string, std::string> & _return, const std::string& userName);
  void send_getAllUserSSHPubKeys(const std::string& userName);
  void recv_getAllUserSSHPubKeys(std::map<std::string, std::string> & _return);
  void createProject(std::string& _return, const std::string& gatewayId, const  ::apache::airavata::model::workspace::Project& project);
  void send_createProject(const std::string& gatewayId, const  ::apache::airavata::model::workspace::Project& project);
  void recv_createProject(std::string& _return);
  void updateProject(const std::string& projectId, const  ::apache::airavata::model::workspace::Project& updatedProject);
  void send_updateProject(const std::string& projectId, const  ::apache::airavata::model::workspace::Project& updatedProject);
  void recv_updateProject();
  void getProject( ::apache::airavata::model::workspace::Project& _return, const std::string& projectId);
  void send_getProject(const std::string& projectId);
  void recv_getProject( ::apache::airavata::model::workspace::Project& _return);
  bool deleteProject(const std::string& projectId);
  void send_deleteProject(const std::string& projectId);
  bool recv_deleteProject();
  void getAllUserProjects(std::vector< ::apache::airavata::model::workspace::Project> & _return, const std::string& gatewayId, const std::string& userName);
  void send_getAllUserProjects(const std::string& gatewayId, const std::string& userName);
  void recv_getAllUserProjects(std::vector< ::apache::airavata::model::workspace::Project> & _return);
  void getAllUserProjectsWithPagination(std::vector< ::apache::airavata::model::workspace::Project> & _return, const std::string& gatewayId, const std::string& userName, const int32_t limit, const int32_t offset);
  void send_getAllUserProjectsWithPagination(const std::string& gatewayId, const std::string& userName, const int32_t limit, const int32_t offset);
  void recv_getAllUserProjectsWithPagination(std::vector< ::apache::airavata::model::workspace::Project> & _return);
  void searchProjectsByProjectName(std::vector< ::apache::airavata::model::workspace::Project> & _return, const std::string& gatewayId, const std::string& userName, const std::string& projectName);
  void send_searchProjectsByProjectName(const std::string& gatewayId, const std::string& userName, const std::string& projectName);
  void recv_searchProjectsByProjectName(std::vector< ::apache::airavata::model::workspace::Project> & _return);
  void searchProjectsByProjectNameWithPagination(std::vector< ::apache::airavata::model::workspace::Project> & _return, const std::string& gatewayId, const std::string& userName, const std::string& projectName, const int32_t limit, const int32_t offset);
  void send_searchProjectsByProjectNameWithPagination(const std::string& gatewayId, const std::string& userName, const std::string& projectName, const int32_t limit, const int32_t offset);
  void recv_searchProjectsByProjectNameWithPagination(std::vector< ::apache::airavata::model::workspace::Project> & _return);
  void searchProjectsByProjectDesc(std::vector< ::apache::airavata::model::workspace::Project> & _return, const std::string& gatewayId, const std::string& userName, const std::string& description);
  void send_searchProjectsByProjectDesc(const std::string& gatewayId, const std::string& userName, const std::string& description);
  void recv_searchProjectsByProjectDesc(std::vector< ::apache::airavata::model::workspace::Project> & _return);
  void searchProjectsByProjectDescWithPagination(std::vector< ::apache::airavata::model::workspace::Project> & _return, const std::string& gatewayId, const std::string& userName, const std::string& description, const int32_t limit, const int32_t offset);
  void send_searchProjectsByProjectDescWithPagination(const std::string& gatewayId, const std::string& userName, const std::string& description, const int32_t limit, const int32_t offset);
  void recv_searchProjectsByProjectDescWithPagination(std::vector< ::apache::airavata::model::workspace::Project> & _return);
  void searchExperimentsByName(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & _return, const std::string& gatewayId, const std::string& userName, const std::string& expName);
  void send_searchExperimentsByName(const std::string& gatewayId, const std::string& userName, const std::string& expName);
  void recv_searchExperimentsByName(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & _return);
  void searchExperimentsByNameWithPagination(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & _return, const std::string& gatewayId, const std::string& userName, const std::string& expName, const int32_t limit, const int32_t offset);
  void send_searchExperimentsByNameWithPagination(const std::string& gatewayId, const std::string& userName, const std::string& expName, const int32_t limit, const int32_t offset);
  void recv_searchExperimentsByNameWithPagination(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & _return);
  void searchExperimentsByDesc(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & _return, const std::string& gatewayId, const std::string& userName, const std::string& description);
  void send_searchExperimentsByDesc(const std::string& gatewayId, const std::string& userName, const std::string& description);
  void recv_searchExperimentsByDesc(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & _return);
  void searchExperimentsByDescWithPagination(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & _return, const std::string& gatewayId, const std::string& userName, const std::string& description, const int32_t limit, const int32_t offset);
  void send_searchExperimentsByDescWithPagination(const std::string& gatewayId, const std::string& userName, const std::string& description, const int32_t limit, const int32_t offset);
  void recv_searchExperimentsByDescWithPagination(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & _return);
  void searchExperimentsByApplication(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & _return, const std::string& gatewayId, const std::string& userName, const std::string& applicationId);
  void send_searchExperimentsByApplication(const std::string& gatewayId, const std::string& userName, const std::string& applicationId);
  void recv_searchExperimentsByApplication(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & _return);
  void searchExperimentsByApplicationWithPagination(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & _return, const std::string& gatewayId, const std::string& userName, const std::string& applicationId, const int32_t limit, const int32_t offset);
  void send_searchExperimentsByApplicationWithPagination(const std::string& gatewayId, const std::string& userName, const std::string& applicationId, const int32_t limit, const int32_t offset);
  void recv_searchExperimentsByApplicationWithPagination(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & _return);
  void searchExperimentsByStatus(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & _return, const std::string& gatewayId, const std::string& userName, const  ::apache::airavata::model::workspace::experiment::ExperimentState::type experimentState);
  void send_searchExperimentsByStatus(const std::string& gatewayId, const std::string& userName, const  ::apache::airavata::model::workspace::experiment::ExperimentState::type experimentState);
  void recv_searchExperimentsByStatus(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & _return);
  void searchExperimentsByStatusWithPagination(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & _return, const std::string& gatewayId, const std::string& userName, const  ::apache::airavata::model::workspace::experiment::ExperimentState::type experimentState, const int32_t limit, const int32_t offset);
  void send_searchExperimentsByStatusWithPagination(const std::string& gatewayId, const std::string& userName, const  ::apache::airavata::model::workspace::experiment::ExperimentState::type experimentState, const int32_t limit, const int32_t offset);
  void recv_searchExperimentsByStatusWithPagination(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & _return);
  void searchExperimentsByCreationTime(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & _return, const std::string& gatewayId, const std::string& userName, const int64_t fromTime, const int64_t toTime);
  void send_searchExperimentsByCreationTime(const std::string& gatewayId, const std::string& userName, const int64_t fromTime, const int64_t toTime);
  void recv_searchExperimentsByCreationTime(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & _return);
  void searchExperimentsByCreationTimeWithPagination(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & _return, const std::string& gatewayId, const std::string& userName, const int64_t fromTime, const int64_t toTime, const int32_t limit, const int32_t offset);
  void send_searchExperimentsByCreationTimeWithPagination(const std::string& gatewayId, const std::string& userName, const int64_t fromTime, const int64_t toTime, const int32_t limit, const int32_t offset);
  void recv_searchExperimentsByCreationTimeWithPagination(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & _return);
  void getAllExperimentsInProject(std::vector< ::apache::airavata::model::workspace::experiment::Experiment> & _return, const std::string& projectId);
  void send_getAllExperimentsInProject(const std::string& projectId);
  void recv_getAllExperimentsInProject(std::vector< ::apache::airavata::model::workspace::experiment::Experiment> & _return);
  void getAllExperimentsInProjectWithPagination(std::vector< ::apache::airavata::model::workspace::experiment::Experiment> & _return, const std::string& projectId, const int32_t limit, const int32_t offset);
  void send_getAllExperimentsInProjectWithPagination(const std::string& projectId, const int32_t limit, const int32_t offset);
  void recv_getAllExperimentsInProjectWithPagination(std::vector< ::apache::airavata::model::workspace::experiment::Experiment> & _return);
  void getAllUserExperiments(std::vector< ::apache::airavata::model::workspace::experiment::Experiment> & _return, const std::string& gatewayId, const std::string& userName);
  void send_getAllUserExperiments(const std::string& gatewayId, const std::string& userName);
  void recv_getAllUserExperiments(std::vector< ::apache::airavata::model::workspace::experiment::Experiment> & _return);
  void getAllUserExperimentsWithPagination(std::vector< ::apache::airavata::model::workspace::experiment::Experiment> & _return, const std::string& gatewayId, const std::string& userName, const int32_t limit, const int32_t offset);
  void send_getAllUserExperimentsWithPagination(const std::string& gatewayId, const std::string& userName, const int32_t limit, const int32_t offset);
  void recv_getAllUserExperimentsWithPagination(std::vector< ::apache::airavata::model::workspace::experiment::Experiment> & _return);
  void createExperiment(std::string& _return, const std::string& gatewayId, const  ::apache::airavata::model::workspace::experiment::Experiment& experiment);
  void send_createExperiment(const std::string& gatewayId, const  ::apache::airavata::model::workspace::experiment::Experiment& experiment);
  void recv_createExperiment(std::string& _return);
  void getExperiment( ::apache::airavata::model::workspace::experiment::Experiment& _return, const std::string& airavataExperimentId);
  void send_getExperiment(const std::string& airavataExperimentId);
  void recv_getExperiment( ::apache::airavata::model::workspace::experiment::Experiment& _return);
  void updateExperiment(const std::string& airavataExperimentId, const  ::apache::airavata::model::workspace::experiment::Experiment& experiment);
  void send_updateExperiment(const std::string& airavataExperimentId, const  ::apache::airavata::model::workspace::experiment::Experiment& experiment);
  void recv_updateExperiment();
  void updateExperimentConfiguration(const std::string& airavataExperimentId, const  ::apache::airavata::model::workspace::experiment::UserConfigurationData& userConfiguration);
  void send_updateExperimentConfiguration(const std::string& airavataExperimentId, const  ::apache::airavata::model::workspace::experiment::UserConfigurationData& userConfiguration);
  void recv_updateExperimentConfiguration();
  void updateResourceScheduleing(const std::string& airavataExperimentId, const  ::apache::airavata::model::workspace::experiment::ComputationalResourceScheduling& resourceScheduling);
  void send_updateResourceScheduleing(const std::string& airavataExperimentId, const  ::apache::airavata::model::workspace::experiment::ComputationalResourceScheduling& resourceScheduling);
  void recv_updateResourceScheduleing();
  bool validateExperiment(const std::string& airavataExperimentId);
  void send_validateExperiment(const std::string& airavataExperimentId);
  bool recv_validateExperiment();
  void launchExperiment(const std::string& airavataExperimentId, const std::string& airavataCredStoreToken);
  void send_launchExperiment(const std::string& airavataExperimentId, const std::string& airavataCredStoreToken);
  void recv_launchExperiment();
  void getExperimentStatus( ::apache::airavata::model::workspace::experiment::ExperimentStatus& _return, const std::string& airavataExperimentId);
  void send_getExperimentStatus(const std::string& airavataExperimentId);
  void recv_getExperimentStatus( ::apache::airavata::model::workspace::experiment::ExperimentStatus& _return);
  void getExperimentOutputs(std::vector< ::apache::airavata::model::appcatalog::appinterface::OutputDataObjectType> & _return, const std::string& airavataExperimentId);
  void send_getExperimentOutputs(const std::string& airavataExperimentId);
  void recv_getExperimentOutputs(std::vector< ::apache::airavata::model::appcatalog::appinterface::OutputDataObjectType> & _return);
  void getIntermediateOutputs(std::vector< ::apache::airavata::model::appcatalog::appinterface::OutputDataObjectType> & _return, const std::string& airavataExperimentId);
  void send_getIntermediateOutputs(const std::string& airavataExperimentId);
  void recv_getIntermediateOutputs(std::vector< ::apache::airavata::model::appcatalog::appinterface::OutputDataObjectType> & _return);
  void getJobStatuses(std::map<std::string,  ::apache::airavata::model::workspace::experiment::JobStatus> & _return, const std::string& airavataExperimentId);
  void send_getJobStatuses(const std::string& airavataExperimentId);
  void recv_getJobStatuses(std::map<std::string,  ::apache::airavata::model::workspace::experiment::JobStatus> & _return);
  void getJobDetails(std::vector< ::apache::airavata::model::workspace::experiment::JobDetails> & _return, const std::string& airavataExperimentId);
  void send_getJobDetails(const std::string& airavataExperimentId);
  void recv_getJobDetails(std::vector< ::apache::airavata::model::workspace::experiment::JobDetails> & _return);
  void getDataTransferDetails(std::vector< ::apache::airavata::model::workspace::experiment::DataTransferDetails> & _return, const std::string& airavataExperimentId);
  void send_getDataTransferDetails(const std::string& airavataExperimentId);
  void recv_getDataTransferDetails(std::vector< ::apache::airavata::model::workspace::experiment::DataTransferDetails> & _return);
  void cloneExperiment(std::string& _return, const std::string& existingExperimentID, const std::string& newExperimentName);
  void send_cloneExperiment(const std::string& existingExperimentID, const std::string& newExperimentName);
  void recv_cloneExperiment(std::string& _return);
  void terminateExperiment(const std::string& airavataExperimentId, const std::string& tokenId);
  void send_terminateExperiment(const std::string& airavataExperimentId, const std::string& tokenId);
  void recv_terminateExperiment();
  void registerApplicationModule(std::string& _return, const std::string& gatewayId, const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule& applicationModule);
  void send_registerApplicationModule(const std::string& gatewayId, const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule& applicationModule);
  void recv_registerApplicationModule(std::string& _return);
  void getApplicationModule( ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule& _return, const std::string& appModuleId);
  void send_getApplicationModule(const std::string& appModuleId);
  void recv_getApplicationModule( ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule& _return);
  bool updateApplicationModule(const std::string& appModuleId, const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule& applicationModule);
  void send_updateApplicationModule(const std::string& appModuleId, const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule& applicationModule);
  bool recv_updateApplicationModule();
  void getAllAppModules(std::vector< ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule> & _return, const std::string& gatewayId);
  void send_getAllAppModules(const std::string& gatewayId);
  void recv_getAllAppModules(std::vector< ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule> & _return);
  bool deleteApplicationModule(const std::string& appModuleId);
  void send_deleteApplicationModule(const std::string& appModuleId);
  bool recv_deleteApplicationModule();
  void registerApplicationDeployment(std::string& _return, const std::string& gatewayId, const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription& applicationDeployment);
  void send_registerApplicationDeployment(const std::string& gatewayId, const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription& applicationDeployment);
  void recv_registerApplicationDeployment(std::string& _return);
  void getApplicationDeployment( ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription& _return, const std::string& appDeploymentId);
  void send_getApplicationDeployment(const std::string& appDeploymentId);
  void recv_getApplicationDeployment( ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription& _return);
  bool updateApplicationDeployment(const std::string& appDeploymentId, const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription& applicationDeployment);
  void send_updateApplicationDeployment(const std::string& appDeploymentId, const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription& applicationDeployment);
  bool recv_updateApplicationDeployment();
  bool deleteApplicationDeployment(const std::string& appDeploymentId);
  void send_deleteApplicationDeployment(const std::string& appDeploymentId);
  bool recv_deleteApplicationDeployment();
  void getAllApplicationDeployments(std::vector< ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription> & _return, const std::string& gatewayId);
  void send_getAllApplicationDeployments(const std::string& gatewayId);
  void recv_getAllApplicationDeployments(std::vector< ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription> & _return);
  void getAppModuleDeployedResources(std::vector<std::string> & _return, const std::string& appModuleId);
  void send_getAppModuleDeployedResources(const std::string& appModuleId);
  void recv_getAppModuleDeployedResources(std::vector<std::string> & _return);
  void registerApplicationInterface(std::string& _return, const std::string& gatewayId, const  ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription& applicationInterface);
  void send_registerApplicationInterface(const std::string& gatewayId, const  ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription& applicationInterface);
  void recv_registerApplicationInterface(std::string& _return);
  void getApplicationInterface( ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription& _return, const std::string& appInterfaceId);
  void send_getApplicationInterface(const std::string& appInterfaceId);
  void recv_getApplicationInterface( ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription& _return);
  bool updateApplicationInterface(const std::string& appInterfaceId, const  ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription& applicationInterface);
  void send_updateApplicationInterface(const std::string& appInterfaceId, const  ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription& applicationInterface);
  bool recv_updateApplicationInterface();
  bool deleteApplicationInterface(const std::string& appInterfaceId);
  void send_deleteApplicationInterface(const std::string& appInterfaceId);
  bool recv_deleteApplicationInterface();
  void getAllApplicationInterfaceNames(std::map<std::string, std::string> & _return, const std::string& gatewayId);
  void send_getAllApplicationInterfaceNames(const std::string& gatewayId);
  void recv_getAllApplicationInterfaceNames(std::map<std::string, std::string> & _return);
  void getAllApplicationInterfaces(std::vector< ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription> & _return, const std::string& gatewayId);
  void send_getAllApplicationInterfaces(const std::string& gatewayId);
  void recv_getAllApplicationInterfaces(std::vector< ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription> & _return);
  void getApplicationInputs(std::vector< ::apache::airavata::model::appcatalog::appinterface::InputDataObjectType> & _return, const std::string& appInterfaceId);
  void send_getApplicationInputs(const std::string& appInterfaceId);
  void recv_getApplicationInputs(std::vector< ::apache::airavata::model::appcatalog::appinterface::InputDataObjectType> & _return);
  void getApplicationOutputs(std::vector< ::apache::airavata::model::appcatalog::appinterface::OutputDataObjectType> & _return, const std::string& appInterfaceId);
  void send_getApplicationOutputs(const std::string& appInterfaceId);
  void recv_getApplicationOutputs(std::vector< ::apache::airavata::model::appcatalog::appinterface::OutputDataObjectType> & _return);
  void getAvailableAppInterfaceComputeResources(std::map<std::string, std::string> & _return, const std::string& appInterfaceId);
  void send_getAvailableAppInterfaceComputeResources(const std::string& appInterfaceId);
  void recv_getAvailableAppInterfaceComputeResources(std::map<std::string, std::string> & _return);
  void registerComputeResource(std::string& _return, const  ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription& computeResourceDescription);
  void send_registerComputeResource(const  ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription& computeResourceDescription);
  void recv_registerComputeResource(std::string& _return);
  void getComputeResource( ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription& _return, const std::string& computeResourceId);
  void send_getComputeResource(const std::string& computeResourceId);
  void recv_getComputeResource( ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription& _return);
  void getAllComputeResourceNames(std::map<std::string, std::string> & _return);
  void send_getAllComputeResourceNames();
  void recv_getAllComputeResourceNames(std::map<std::string, std::string> & _return);
  bool updateComputeResource(const std::string& computeResourceId, const  ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription& computeResourceDescription);
  void send_updateComputeResource(const std::string& computeResourceId, const  ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription& computeResourceDescription);
  bool recv_updateComputeResource();
  bool deleteComputeResource(const std::string& computeResourceId);
  void send_deleteComputeResource(const std::string& computeResourceId);
  bool recv_deleteComputeResource();
  void addLocalSubmissionDetails(std::string& _return, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission& localSubmission);
  void send_addLocalSubmissionDetails(const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission& localSubmission);
  void recv_addLocalSubmissionDetails(std::string& _return);
  bool updateLocalSubmissionDetails(const std::string& jobSubmissionInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission& localSubmission);
  void send_updateLocalSubmissionDetails(const std::string& jobSubmissionInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission& localSubmission);
  bool recv_updateLocalSubmissionDetails();
  void getLocalJobSubmission( ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission& _return, const std::string& jobSubmissionId);
  void send_getLocalJobSubmission(const std::string& jobSubmissionId);
  void recv_getLocalJobSubmission( ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission& _return);
  void addSSHJobSubmissionDetails(std::string& _return, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission& sshJobSubmission);
  void send_addSSHJobSubmissionDetails(const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission& sshJobSubmission);
  void recv_addSSHJobSubmissionDetails(std::string& _return);
  void getSSHJobSubmission( ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission& _return, const std::string& jobSubmissionId);
  void send_getSSHJobSubmission(const std::string& jobSubmissionId);
  void recv_getSSHJobSubmission( ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission& _return);
  void addUNICOREJobSubmissionDetails(std::string& _return, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission& unicoreJobSubmission);
  void send_addUNICOREJobSubmissionDetails(const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission& unicoreJobSubmission);
  void recv_addUNICOREJobSubmissionDetails(std::string& _return);
  void getUnicoreJobSubmission( ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission& _return, const std::string& jobSubmissionId);
  void send_getUnicoreJobSubmission(const std::string& jobSubmissionId);
  void recv_getUnicoreJobSubmission( ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission& _return);
  void addCloudJobSubmissionDetails(std::string& _return, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission& cloudSubmission);
  void send_addCloudJobSubmissionDetails(const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission& cloudSubmission);
  void recv_addCloudJobSubmissionDetails(std::string& _return);
  void getCloudJobSubmission( ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission& _return, const std::string& jobSubmissionId);
  void send_getCloudJobSubmission(const std::string& jobSubmissionId);
  void recv_getCloudJobSubmission( ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission& _return);
  bool updateSSHJobSubmissionDetails(const std::string& jobSubmissionInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission& sshJobSubmission);
  void send_updateSSHJobSubmissionDetails(const std::string& jobSubmissionInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission& sshJobSubmission);
  bool recv_updateSSHJobSubmissionDetails();
  bool updateCloudJobSubmissionDetails(const std::string& jobSubmissionInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission& sshJobSubmission);
  void send_updateCloudJobSubmissionDetails(const std::string& jobSubmissionInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission& sshJobSubmission);
  bool recv_updateCloudJobSubmissionDetails();
  bool updateUnicoreJobSubmissionDetails(const std::string& jobSubmissionInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission& unicoreJobSubmission);
  void send_updateUnicoreJobSubmissionDetails(const std::string& jobSubmissionInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission& unicoreJobSubmission);
  bool recv_updateUnicoreJobSubmissionDetails();
  void addLocalDataMovementDetails(std::string& _return, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement& localDataMovement);
  void send_addLocalDataMovementDetails(const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement& localDataMovement);
  void recv_addLocalDataMovementDetails(std::string& _return);
  bool updateLocalDataMovementDetails(const std::string& dataMovementInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement& localDataMovement);
  void send_updateLocalDataMovementDetails(const std::string& dataMovementInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement& localDataMovement);
  bool recv_updateLocalDataMovementDetails();
  void getLocalDataMovement( ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement& _return, const std::string& dataMovementId);
  void send_getLocalDataMovement(const std::string& dataMovementId);
  void recv_getLocalDataMovement( ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement& _return);
  void addSCPDataMovementDetails(std::string& _return, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement& scpDataMovement);
  void send_addSCPDataMovementDetails(const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement& scpDataMovement);
  void recv_addSCPDataMovementDetails(std::string& _return);
  bool updateSCPDataMovementDetails(const std::string& dataMovementInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement& scpDataMovement);
  void send_updateSCPDataMovementDetails(const std::string& dataMovementInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement& scpDataMovement);
  bool recv_updateSCPDataMovementDetails();
  void getSCPDataMovement( ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement& _return, const std::string& dataMovementId);
  void send_getSCPDataMovement(const std::string& dataMovementId);
  void recv_getSCPDataMovement( ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement& _return);
  void addUnicoreDataMovementDetails(std::string& _return, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement& unicoreDataMovement);
  void send_addUnicoreDataMovementDetails(const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement& unicoreDataMovement);
  void recv_addUnicoreDataMovementDetails(std::string& _return);
  bool updateUnicoreDataMovementDetails(const std::string& dataMovementInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement& unicoreDataMovement);
  void send_updateUnicoreDataMovementDetails(const std::string& dataMovementInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement& unicoreDataMovement);
  bool recv_updateUnicoreDataMovementDetails();
  void getUnicoreDataMovement( ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement& _return, const std::string& dataMovementId);
  void send_getUnicoreDataMovement(const std::string& dataMovementId);
  void recv_getUnicoreDataMovement( ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement& _return);
  void addGridFTPDataMovementDetails(std::string& _return, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement& gridFTPDataMovement);
  void send_addGridFTPDataMovementDetails(const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement& gridFTPDataMovement);
  void recv_addGridFTPDataMovementDetails(std::string& _return);
  bool updateGridFTPDataMovementDetails(const std::string& dataMovementInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement& gridFTPDataMovement);
  void send_updateGridFTPDataMovementDetails(const std::string& dataMovementInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement& gridFTPDataMovement);
  bool recv_updateGridFTPDataMovementDetails();
  void getGridFTPDataMovement( ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement& _return, const std::string& dataMovementId);
  void send_getGridFTPDataMovement(const std::string& dataMovementId);
  void recv_getGridFTPDataMovement( ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement& _return);
  bool changeJobSubmissionPriority(const std::string& jobSubmissionInterfaceId, const int32_t newPriorityOrder);
  void send_changeJobSubmissionPriority(const std::string& jobSubmissionInterfaceId, const int32_t newPriorityOrder);
  bool recv_changeJobSubmissionPriority();
  bool changeDataMovementPriority(const std::string& dataMovementInterfaceId, const int32_t newPriorityOrder);
  void send_changeDataMovementPriority(const std::string& dataMovementInterfaceId, const int32_t newPriorityOrder);
  bool recv_changeDataMovementPriority();
  bool changeJobSubmissionPriorities(const std::map<std::string, int32_t> & jobSubmissionPriorityMap);
  void send_changeJobSubmissionPriorities(const std::map<std::string, int32_t> & jobSubmissionPriorityMap);
  bool recv_changeJobSubmissionPriorities();
  bool changeDataMovementPriorities(const std::map<std::string, int32_t> & dataMovementPriorityMap);
  void send_changeDataMovementPriorities(const std::map<std::string, int32_t> & dataMovementPriorityMap);
  bool recv_changeDataMovementPriorities();
  bool deleteJobSubmissionInterface(const std::string& computeResourceId, const std::string& jobSubmissionInterfaceId);
  void send_deleteJobSubmissionInterface(const std::string& computeResourceId, const std::string& jobSubmissionInterfaceId);
  bool recv_deleteJobSubmissionInterface();
  bool deleteDataMovementInterface(const std::string& computeResourceId, const std::string& dataMovementInterfaceId);
  void send_deleteDataMovementInterface(const std::string& computeResourceId, const std::string& dataMovementInterfaceId);
  bool recv_deleteDataMovementInterface();
  void registerResourceJobManager(std::string& _return, const  ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager& resourceJobManager);
  void send_registerResourceJobManager(const  ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager& resourceJobManager);
  void recv_registerResourceJobManager(std::string& _return);
  bool updateResourceJobManager(const std::string& resourceJobManagerId, const  ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager& updatedResourceJobManager);
  void send_updateResourceJobManager(const std::string& resourceJobManagerId, const  ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager& updatedResourceJobManager);
  bool recv_updateResourceJobManager();
  void getResourceJobManager( ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager& _return, const std::string& resourceJobManagerId);
  void send_getResourceJobManager(const std::string& resourceJobManagerId);
  void recv_getResourceJobManager( ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager& _return);
  bool deleteResourceJobManager(const std::string& resourceJobManagerId);
  void send_deleteResourceJobManager(const std::string& resourceJobManagerId);
  bool recv_deleteResourceJobManager();
  bool deleteBatchQueue(const std::string& computeResourceId, const std::string& queueName);
  void send_deleteBatchQueue(const std::string& computeResourceId, const std::string& queueName);
  bool recv_deleteBatchQueue();
  void registerGatewayResourceProfile(std::string& _return, const  ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile& gatewayResourceProfile);
  void send_registerGatewayResourceProfile(const  ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile& gatewayResourceProfile);
  void recv_registerGatewayResourceProfile(std::string& _return);
  void getGatewayResourceProfile( ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile& _return, const std::string& gatewayID);
  void send_getGatewayResourceProfile(const std::string& gatewayID);
  void recv_getGatewayResourceProfile( ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile& _return);
  bool updateGatewayResourceProfile(const std::string& gatewayID, const  ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile& gatewayResourceProfile);
  void send_updateGatewayResourceProfile(const std::string& gatewayID, const  ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile& gatewayResourceProfile);
  bool recv_updateGatewayResourceProfile();
  bool deleteGatewayResourceProfile(const std::string& gatewayID);
  void send_deleteGatewayResourceProfile(const std::string& gatewayID);
  bool recv_deleteGatewayResourceProfile();
  bool addGatewayComputeResourcePreference(const std::string& gatewayID, const std::string& computeResourceId, const  ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference& computeResourcePreference);
  void send_addGatewayComputeResourcePreference(const std::string& gatewayID, const std::string& computeResourceId, const  ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference& computeResourcePreference);
  bool recv_addGatewayComputeResourcePreference();
  void getGatewayComputeResourcePreference( ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference& _return, const std::string& gatewayID, const std::string& computeResourceId);
  void send_getGatewayComputeResourcePreference(const std::string& gatewayID, const std::string& computeResourceId);
  void recv_getGatewayComputeResourcePreference( ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference& _return);
  void getAllGatewayComputeResourcePreferences(std::vector< ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference> & _return, const std::string& gatewayID);
  void send_getAllGatewayComputeResourcePreferences(const std::string& gatewayID);
  void recv_getAllGatewayComputeResourcePreferences(std::vector< ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference> & _return);
  void getAllGatewayComputeResources(std::vector< ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile> & _return);
  void send_getAllGatewayComputeResources();
  void recv_getAllGatewayComputeResources(std::vector< ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile> & _return);
  bool updateGatewayComputeResourcePreference(const std::string& gatewayID, const std::string& computeResourceId, const  ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference& computeResourcePreference);
  void send_updateGatewayComputeResourcePreference(const std::string& gatewayID, const std::string& computeResourceId, const  ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference& computeResourcePreference);
  bool recv_updateGatewayComputeResourcePreference();
  bool deleteGatewayComputeResourcePreference(const std::string& gatewayID, const std::string& computeResourceId);
  void send_deleteGatewayComputeResourcePreference(const std::string& gatewayID, const std::string& computeResourceId);
  bool recv_deleteGatewayComputeResourcePreference();
  void getAllWorkflows(std::vector<std::string> & _return, const std::string& gatewayId);
  void send_getAllWorkflows(const std::string& gatewayId);
  void recv_getAllWorkflows(std::vector<std::string> & _return);
  void getWorkflow( ::Workflow& _return, const std::string& workflowTemplateId);
  void send_getWorkflow(const std::string& workflowTemplateId);
  void recv_getWorkflow( ::Workflow& _return);
  void deleteWorkflow(const std::string& workflowTemplateId);
  void send_deleteWorkflow(const std::string& workflowTemplateId);
  void recv_deleteWorkflow();
  void registerWorkflow(std::string& _return, const std::string& gatewayId, const  ::Workflow& workflow);
  void send_registerWorkflow(const std::string& gatewayId, const  ::Workflow& workflow);
  void recv_registerWorkflow(std::string& _return);
  void updateWorkflow(const std::string& workflowTemplateId, const  ::Workflow& workflow);
  void send_updateWorkflow(const std::string& workflowTemplateId, const  ::Workflow& workflow);
  void recv_updateWorkflow();
  void getWorkflowTemplateId(std::string& _return, const std::string& workflowName);
  void send_getWorkflowTemplateId(const std::string& workflowName);
  void recv_getWorkflowTemplateId(std::string& _return);
  bool isWorkflowExistWithName(const std::string& workflowName);
  void send_isWorkflowExistWithName(const std::string& workflowName);
  bool recv_isWorkflowExistWithName();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AiravataProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<AiravataIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AiravataProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getAPIVersion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addGateway(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateGateway(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getGateway(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteGateway(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllGateways(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isGatewayExist(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_generateAndRegisterSSHKeys(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSSHPubKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllUserSSHPubKeys(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createProject(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateProject(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getProject(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteProject(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllUserProjects(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllUserProjectsWithPagination(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_searchProjectsByProjectName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_searchProjectsByProjectNameWithPagination(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_searchProjectsByProjectDesc(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_searchProjectsByProjectDescWithPagination(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_searchExperimentsByName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_searchExperimentsByNameWithPagination(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_searchExperimentsByDesc(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_searchExperimentsByDescWithPagination(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_searchExperimentsByApplication(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_searchExperimentsByApplicationWithPagination(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_searchExperimentsByStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_searchExperimentsByStatusWithPagination(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_searchExperimentsByCreationTime(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_searchExperimentsByCreationTimeWithPagination(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllExperimentsInProject(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllExperimentsInProjectWithPagination(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllUserExperiments(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllUserExperimentsWithPagination(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createExperiment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getExperiment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateExperiment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateExperimentConfiguration(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateResourceScheduleing(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_validateExperiment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_launchExperiment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getExperimentStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getExperimentOutputs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getIntermediateOutputs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getJobStatuses(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getJobDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDataTransferDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_cloneExperiment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_terminateExperiment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerApplicationModule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getApplicationModule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateApplicationModule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllAppModules(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteApplicationModule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerApplicationDeployment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getApplicationDeployment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateApplicationDeployment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteApplicationDeployment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllApplicationDeployments(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAppModuleDeployedResources(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerApplicationInterface(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getApplicationInterface(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateApplicationInterface(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteApplicationInterface(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllApplicationInterfaceNames(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllApplicationInterfaces(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getApplicationInputs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getApplicationOutputs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAvailableAppInterfaceComputeResources(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerComputeResource(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getComputeResource(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllComputeResourceNames(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateComputeResource(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteComputeResource(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addLocalSubmissionDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateLocalSubmissionDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getLocalJobSubmission(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addSSHJobSubmissionDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSSHJobSubmission(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addUNICOREJobSubmissionDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUnicoreJobSubmission(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addCloudJobSubmissionDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCloudJobSubmission(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateSSHJobSubmissionDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateCloudJobSubmissionDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateUnicoreJobSubmissionDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addLocalDataMovementDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateLocalDataMovementDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getLocalDataMovement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addSCPDataMovementDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateSCPDataMovementDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSCPDataMovement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addUnicoreDataMovementDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateUnicoreDataMovementDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUnicoreDataMovement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addGridFTPDataMovementDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateGridFTPDataMovementDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getGridFTPDataMovement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_changeJobSubmissionPriority(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_changeDataMovementPriority(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_changeJobSubmissionPriorities(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_changeDataMovementPriorities(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteJobSubmissionInterface(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteDataMovementInterface(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerResourceJobManager(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateResourceJobManager(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getResourceJobManager(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteResourceJobManager(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteBatchQueue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerGatewayResourceProfile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getGatewayResourceProfile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateGatewayResourceProfile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteGatewayResourceProfile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addGatewayComputeResourcePreference(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getGatewayComputeResourcePreference(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllGatewayComputeResourcePreferences(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllGatewayComputeResources(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateGatewayComputeResourcePreference(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteGatewayComputeResourcePreference(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllWorkflows(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getWorkflow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteWorkflow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerWorkflow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateWorkflow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getWorkflowTemplateId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isWorkflowExistWithName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AiravataProcessor(boost::shared_ptr<AiravataIf> iface) :
    iface_(iface) {
    processMap_["getAPIVersion"] = &AiravataProcessor::process_getAPIVersion;
    processMap_["addGateway"] = &AiravataProcessor::process_addGateway;
    processMap_["updateGateway"] = &AiravataProcessor::process_updateGateway;
    processMap_["getGateway"] = &AiravataProcessor::process_getGateway;
    processMap_["deleteGateway"] = &AiravataProcessor::process_deleteGateway;
    processMap_["getAllGateways"] = &AiravataProcessor::process_getAllGateways;
    processMap_["isGatewayExist"] = &AiravataProcessor::process_isGatewayExist;
    processMap_["generateAndRegisterSSHKeys"] = &AiravataProcessor::process_generateAndRegisterSSHKeys;
    processMap_["getSSHPubKey"] = &AiravataProcessor::process_getSSHPubKey;
    processMap_["getAllUserSSHPubKeys"] = &AiravataProcessor::process_getAllUserSSHPubKeys;
    processMap_["createProject"] = &AiravataProcessor::process_createProject;
    processMap_["updateProject"] = &AiravataProcessor::process_updateProject;
    processMap_["getProject"] = &AiravataProcessor::process_getProject;
    processMap_["deleteProject"] = &AiravataProcessor::process_deleteProject;
    processMap_["getAllUserProjects"] = &AiravataProcessor::process_getAllUserProjects;
    processMap_["getAllUserProjectsWithPagination"] = &AiravataProcessor::process_getAllUserProjectsWithPagination;
    processMap_["searchProjectsByProjectName"] = &AiravataProcessor::process_searchProjectsByProjectName;
    processMap_["searchProjectsByProjectNameWithPagination"] = &AiravataProcessor::process_searchProjectsByProjectNameWithPagination;
    processMap_["searchProjectsByProjectDesc"] = &AiravataProcessor::process_searchProjectsByProjectDesc;
    processMap_["searchProjectsByProjectDescWithPagination"] = &AiravataProcessor::process_searchProjectsByProjectDescWithPagination;
    processMap_["searchExperimentsByName"] = &AiravataProcessor::process_searchExperimentsByName;
    processMap_["searchExperimentsByNameWithPagination"] = &AiravataProcessor::process_searchExperimentsByNameWithPagination;
    processMap_["searchExperimentsByDesc"] = &AiravataProcessor::process_searchExperimentsByDesc;
    processMap_["searchExperimentsByDescWithPagination"] = &AiravataProcessor::process_searchExperimentsByDescWithPagination;
    processMap_["searchExperimentsByApplication"] = &AiravataProcessor::process_searchExperimentsByApplication;
    processMap_["searchExperimentsByApplicationWithPagination"] = &AiravataProcessor::process_searchExperimentsByApplicationWithPagination;
    processMap_["searchExperimentsByStatus"] = &AiravataProcessor::process_searchExperimentsByStatus;
    processMap_["searchExperimentsByStatusWithPagination"] = &AiravataProcessor::process_searchExperimentsByStatusWithPagination;
    processMap_["searchExperimentsByCreationTime"] = &AiravataProcessor::process_searchExperimentsByCreationTime;
    processMap_["searchExperimentsByCreationTimeWithPagination"] = &AiravataProcessor::process_searchExperimentsByCreationTimeWithPagination;
    processMap_["getAllExperimentsInProject"] = &AiravataProcessor::process_getAllExperimentsInProject;
    processMap_["getAllExperimentsInProjectWithPagination"] = &AiravataProcessor::process_getAllExperimentsInProjectWithPagination;
    processMap_["getAllUserExperiments"] = &AiravataProcessor::process_getAllUserExperiments;
    processMap_["getAllUserExperimentsWithPagination"] = &AiravataProcessor::process_getAllUserExperimentsWithPagination;
    processMap_["createExperiment"] = &AiravataProcessor::process_createExperiment;
    processMap_["getExperiment"] = &AiravataProcessor::process_getExperiment;
    processMap_["updateExperiment"] = &AiravataProcessor::process_updateExperiment;
    processMap_["updateExperimentConfiguration"] = &AiravataProcessor::process_updateExperimentConfiguration;
    processMap_["updateResourceScheduleing"] = &AiravataProcessor::process_updateResourceScheduleing;
    processMap_["validateExperiment"] = &AiravataProcessor::process_validateExperiment;
    processMap_["launchExperiment"] = &AiravataProcessor::process_launchExperiment;
    processMap_["getExperimentStatus"] = &AiravataProcessor::process_getExperimentStatus;
    processMap_["getExperimentOutputs"] = &AiravataProcessor::process_getExperimentOutputs;
    processMap_["getIntermediateOutputs"] = &AiravataProcessor::process_getIntermediateOutputs;
    processMap_["getJobStatuses"] = &AiravataProcessor::process_getJobStatuses;
    processMap_["getJobDetails"] = &AiravataProcessor::process_getJobDetails;
    processMap_["getDataTransferDetails"] = &AiravataProcessor::process_getDataTransferDetails;
    processMap_["cloneExperiment"] = &AiravataProcessor::process_cloneExperiment;
    processMap_["terminateExperiment"] = &AiravataProcessor::process_terminateExperiment;
    processMap_["registerApplicationModule"] = &AiravataProcessor::process_registerApplicationModule;
    processMap_["getApplicationModule"] = &AiravataProcessor::process_getApplicationModule;
    processMap_["updateApplicationModule"] = &AiravataProcessor::process_updateApplicationModule;
    processMap_["getAllAppModules"] = &AiravataProcessor::process_getAllAppModules;
    processMap_["deleteApplicationModule"] = &AiravataProcessor::process_deleteApplicationModule;
    processMap_["registerApplicationDeployment"] = &AiravataProcessor::process_registerApplicationDeployment;
    processMap_["getApplicationDeployment"] = &AiravataProcessor::process_getApplicationDeployment;
    processMap_["updateApplicationDeployment"] = &AiravataProcessor::process_updateApplicationDeployment;
    processMap_["deleteApplicationDeployment"] = &AiravataProcessor::process_deleteApplicationDeployment;
    processMap_["getAllApplicationDeployments"] = &AiravataProcessor::process_getAllApplicationDeployments;
    processMap_["getAppModuleDeployedResources"] = &AiravataProcessor::process_getAppModuleDeployedResources;
    processMap_["registerApplicationInterface"] = &AiravataProcessor::process_registerApplicationInterface;
    processMap_["getApplicationInterface"] = &AiravataProcessor::process_getApplicationInterface;
    processMap_["updateApplicationInterface"] = &AiravataProcessor::process_updateApplicationInterface;
    processMap_["deleteApplicationInterface"] = &AiravataProcessor::process_deleteApplicationInterface;
    processMap_["getAllApplicationInterfaceNames"] = &AiravataProcessor::process_getAllApplicationInterfaceNames;
    processMap_["getAllApplicationInterfaces"] = &AiravataProcessor::process_getAllApplicationInterfaces;
    processMap_["getApplicationInputs"] = &AiravataProcessor::process_getApplicationInputs;
    processMap_["getApplicationOutputs"] = &AiravataProcessor::process_getApplicationOutputs;
    processMap_["getAvailableAppInterfaceComputeResources"] = &AiravataProcessor::process_getAvailableAppInterfaceComputeResources;
    processMap_["registerComputeResource"] = &AiravataProcessor::process_registerComputeResource;
    processMap_["getComputeResource"] = &AiravataProcessor::process_getComputeResource;
    processMap_["getAllComputeResourceNames"] = &AiravataProcessor::process_getAllComputeResourceNames;
    processMap_["updateComputeResource"] = &AiravataProcessor::process_updateComputeResource;
    processMap_["deleteComputeResource"] = &AiravataProcessor::process_deleteComputeResource;
    processMap_["addLocalSubmissionDetails"] = &AiravataProcessor::process_addLocalSubmissionDetails;
    processMap_["updateLocalSubmissionDetails"] = &AiravataProcessor::process_updateLocalSubmissionDetails;
    processMap_["getLocalJobSubmission"] = &AiravataProcessor::process_getLocalJobSubmission;
    processMap_["addSSHJobSubmissionDetails"] = &AiravataProcessor::process_addSSHJobSubmissionDetails;
    processMap_["getSSHJobSubmission"] = &AiravataProcessor::process_getSSHJobSubmission;
    processMap_["addUNICOREJobSubmissionDetails"] = &AiravataProcessor::process_addUNICOREJobSubmissionDetails;
    processMap_["getUnicoreJobSubmission"] = &AiravataProcessor::process_getUnicoreJobSubmission;
    processMap_["addCloudJobSubmissionDetails"] = &AiravataProcessor::process_addCloudJobSubmissionDetails;
    processMap_["getCloudJobSubmission"] = &AiravataProcessor::process_getCloudJobSubmission;
    processMap_["updateSSHJobSubmissionDetails"] = &AiravataProcessor::process_updateSSHJobSubmissionDetails;
    processMap_["updateCloudJobSubmissionDetails"] = &AiravataProcessor::process_updateCloudJobSubmissionDetails;
    processMap_["updateUnicoreJobSubmissionDetails"] = &AiravataProcessor::process_updateUnicoreJobSubmissionDetails;
    processMap_["addLocalDataMovementDetails"] = &AiravataProcessor::process_addLocalDataMovementDetails;
    processMap_["updateLocalDataMovementDetails"] = &AiravataProcessor::process_updateLocalDataMovementDetails;
    processMap_["getLocalDataMovement"] = &AiravataProcessor::process_getLocalDataMovement;
    processMap_["addSCPDataMovementDetails"] = &AiravataProcessor::process_addSCPDataMovementDetails;
    processMap_["updateSCPDataMovementDetails"] = &AiravataProcessor::process_updateSCPDataMovementDetails;
    processMap_["getSCPDataMovement"] = &AiravataProcessor::process_getSCPDataMovement;
    processMap_["addUnicoreDataMovementDetails"] = &AiravataProcessor::process_addUnicoreDataMovementDetails;
    processMap_["updateUnicoreDataMovementDetails"] = &AiravataProcessor::process_updateUnicoreDataMovementDetails;
    processMap_["getUnicoreDataMovement"] = &AiravataProcessor::process_getUnicoreDataMovement;
    processMap_["addGridFTPDataMovementDetails"] = &AiravataProcessor::process_addGridFTPDataMovementDetails;
    processMap_["updateGridFTPDataMovementDetails"] = &AiravataProcessor::process_updateGridFTPDataMovementDetails;
    processMap_["getGridFTPDataMovement"] = &AiravataProcessor::process_getGridFTPDataMovement;
    processMap_["changeJobSubmissionPriority"] = &AiravataProcessor::process_changeJobSubmissionPriority;
    processMap_["changeDataMovementPriority"] = &AiravataProcessor::process_changeDataMovementPriority;
    processMap_["changeJobSubmissionPriorities"] = &AiravataProcessor::process_changeJobSubmissionPriorities;
    processMap_["changeDataMovementPriorities"] = &AiravataProcessor::process_changeDataMovementPriorities;
    processMap_["deleteJobSubmissionInterface"] = &AiravataProcessor::process_deleteJobSubmissionInterface;
    processMap_["deleteDataMovementInterface"] = &AiravataProcessor::process_deleteDataMovementInterface;
    processMap_["registerResourceJobManager"] = &AiravataProcessor::process_registerResourceJobManager;
    processMap_["updateResourceJobManager"] = &AiravataProcessor::process_updateResourceJobManager;
    processMap_["getResourceJobManager"] = &AiravataProcessor::process_getResourceJobManager;
    processMap_["deleteResourceJobManager"] = &AiravataProcessor::process_deleteResourceJobManager;
    processMap_["deleteBatchQueue"] = &AiravataProcessor::process_deleteBatchQueue;
    processMap_["registerGatewayResourceProfile"] = &AiravataProcessor::process_registerGatewayResourceProfile;
    processMap_["getGatewayResourceProfile"] = &AiravataProcessor::process_getGatewayResourceProfile;
    processMap_["updateGatewayResourceProfile"] = &AiravataProcessor::process_updateGatewayResourceProfile;
    processMap_["deleteGatewayResourceProfile"] = &AiravataProcessor::process_deleteGatewayResourceProfile;
    processMap_["addGatewayComputeResourcePreference"] = &AiravataProcessor::process_addGatewayComputeResourcePreference;
    processMap_["getGatewayComputeResourcePreference"] = &AiravataProcessor::process_getGatewayComputeResourcePreference;
    processMap_["getAllGatewayComputeResourcePreferences"] = &AiravataProcessor::process_getAllGatewayComputeResourcePreferences;
    processMap_["getAllGatewayComputeResources"] = &AiravataProcessor::process_getAllGatewayComputeResources;
    processMap_["updateGatewayComputeResourcePreference"] = &AiravataProcessor::process_updateGatewayComputeResourcePreference;
    processMap_["deleteGatewayComputeResourcePreference"] = &AiravataProcessor::process_deleteGatewayComputeResourcePreference;
    processMap_["getAllWorkflows"] = &AiravataProcessor::process_getAllWorkflows;
    processMap_["getWorkflow"] = &AiravataProcessor::process_getWorkflow;
    processMap_["deleteWorkflow"] = &AiravataProcessor::process_deleteWorkflow;
    processMap_["registerWorkflow"] = &AiravataProcessor::process_registerWorkflow;
    processMap_["updateWorkflow"] = &AiravataProcessor::process_updateWorkflow;
    processMap_["getWorkflowTemplateId"] = &AiravataProcessor::process_getWorkflowTemplateId;
    processMap_["isWorkflowExistWithName"] = &AiravataProcessor::process_isWorkflowExistWithName;
  }

  virtual ~AiravataProcessor() {}
};

class AiravataProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AiravataProcessorFactory(const ::boost::shared_ptr< AiravataIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< AiravataIfFactory > handlerFactory_;
};

class AiravataMultiface : virtual public AiravataIf {
 public:
  AiravataMultiface(std::vector<boost::shared_ptr<AiravataIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AiravataMultiface() {}
 protected:
  std::vector<boost::shared_ptr<AiravataIf> > ifaces_;
  AiravataMultiface() {}
  void add(boost::shared_ptr<AiravataIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getAPIVersion(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAPIVersion(_return);
    }
    ifaces_[i]->getAPIVersion(_return);
    return;
  }

  void addGateway(std::string& _return, const  ::apache::airavata::model::workspace::Gateway& gateway) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addGateway(_return, gateway);
    }
    ifaces_[i]->addGateway(_return, gateway);
    return;
  }

  void updateGateway(const std::string& gatewayId, const  ::apache::airavata::model::workspace::Gateway& updatedGateway) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateGateway(gatewayId, updatedGateway);
    }
    ifaces_[i]->updateGateway(gatewayId, updatedGateway);
  }

  void getGateway( ::apache::airavata::model::workspace::Gateway& _return, const std::string& gatewayId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getGateway(_return, gatewayId);
    }
    ifaces_[i]->getGateway(_return, gatewayId);
    return;
  }

  bool deleteGateway(const std::string& gatewayId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteGateway(gatewayId);
    }
    return ifaces_[i]->deleteGateway(gatewayId);
  }

  void getAllGateways(std::vector< ::apache::airavata::model::workspace::Gateway> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllGateways(_return);
    }
    ifaces_[i]->getAllGateways(_return);
    return;
  }

  bool isGatewayExist(const std::string& gatewayId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isGatewayExist(gatewayId);
    }
    return ifaces_[i]->isGatewayExist(gatewayId);
  }

  void generateAndRegisterSSHKeys(std::string& _return, const std::string& gatewayId, const std::string& userName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->generateAndRegisterSSHKeys(_return, gatewayId, userName);
    }
    ifaces_[i]->generateAndRegisterSSHKeys(_return, gatewayId, userName);
    return;
  }

  void getSSHPubKey(std::string& _return, const std::string& airavataCredStoreToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSSHPubKey(_return, airavataCredStoreToken);
    }
    ifaces_[i]->getSSHPubKey(_return, airavataCredStoreToken);
    return;
  }

  void getAllUserSSHPubKeys(std::map<std::string, std::string> & _return, const std::string& userName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllUserSSHPubKeys(_return, userName);
    }
    ifaces_[i]->getAllUserSSHPubKeys(_return, userName);
    return;
  }

  void createProject(std::string& _return, const std::string& gatewayId, const  ::apache::airavata::model::workspace::Project& project) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createProject(_return, gatewayId, project);
    }
    ifaces_[i]->createProject(_return, gatewayId, project);
    return;
  }

  void updateProject(const std::string& projectId, const  ::apache::airavata::model::workspace::Project& updatedProject) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateProject(projectId, updatedProject);
    }
    ifaces_[i]->updateProject(projectId, updatedProject);
  }

  void getProject( ::apache::airavata::model::workspace::Project& _return, const std::string& projectId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getProject(_return, projectId);
    }
    ifaces_[i]->getProject(_return, projectId);
    return;
  }

  bool deleteProject(const std::string& projectId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteProject(projectId);
    }
    return ifaces_[i]->deleteProject(projectId);
  }

  void getAllUserProjects(std::vector< ::apache::airavata::model::workspace::Project> & _return, const std::string& gatewayId, const std::string& userName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllUserProjects(_return, gatewayId, userName);
    }
    ifaces_[i]->getAllUserProjects(_return, gatewayId, userName);
    return;
  }

  void getAllUserProjectsWithPagination(std::vector< ::apache::airavata::model::workspace::Project> & _return, const std::string& gatewayId, const std::string& userName, const int32_t limit, const int32_t offset) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllUserProjectsWithPagination(_return, gatewayId, userName, limit, offset);
    }
    ifaces_[i]->getAllUserProjectsWithPagination(_return, gatewayId, userName, limit, offset);
    return;
  }

  void searchProjectsByProjectName(std::vector< ::apache::airavata::model::workspace::Project> & _return, const std::string& gatewayId, const std::string& userName, const std::string& projectName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->searchProjectsByProjectName(_return, gatewayId, userName, projectName);
    }
    ifaces_[i]->searchProjectsByProjectName(_return, gatewayId, userName, projectName);
    return;
  }

  void searchProjectsByProjectNameWithPagination(std::vector< ::apache::airavata::model::workspace::Project> & _return, const std::string& gatewayId, const std::string& userName, const std::string& projectName, const int32_t limit, const int32_t offset) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->searchProjectsByProjectNameWithPagination(_return, gatewayId, userName, projectName, limit, offset);
    }
    ifaces_[i]->searchProjectsByProjectNameWithPagination(_return, gatewayId, userName, projectName, limit, offset);
    return;
  }

  void searchProjectsByProjectDesc(std::vector< ::apache::airavata::model::workspace::Project> & _return, const std::string& gatewayId, const std::string& userName, const std::string& description) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->searchProjectsByProjectDesc(_return, gatewayId, userName, description);
    }
    ifaces_[i]->searchProjectsByProjectDesc(_return, gatewayId, userName, description);
    return;
  }

  void searchProjectsByProjectDescWithPagination(std::vector< ::apache::airavata::model::workspace::Project> & _return, const std::string& gatewayId, const std::string& userName, const std::string& description, const int32_t limit, const int32_t offset) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->searchProjectsByProjectDescWithPagination(_return, gatewayId, userName, description, limit, offset);
    }
    ifaces_[i]->searchProjectsByProjectDescWithPagination(_return, gatewayId, userName, description, limit, offset);
    return;
  }

  void searchExperimentsByName(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & _return, const std::string& gatewayId, const std::string& userName, const std::string& expName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->searchExperimentsByName(_return, gatewayId, userName, expName);
    }
    ifaces_[i]->searchExperimentsByName(_return, gatewayId, userName, expName);
    return;
  }

  void searchExperimentsByNameWithPagination(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & _return, const std::string& gatewayId, const std::string& userName, const std::string& expName, const int32_t limit, const int32_t offset) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->searchExperimentsByNameWithPagination(_return, gatewayId, userName, expName, limit, offset);
    }
    ifaces_[i]->searchExperimentsByNameWithPagination(_return, gatewayId, userName, expName, limit, offset);
    return;
  }

  void searchExperimentsByDesc(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & _return, const std::string& gatewayId, const std::string& userName, const std::string& description) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->searchExperimentsByDesc(_return, gatewayId, userName, description);
    }
    ifaces_[i]->searchExperimentsByDesc(_return, gatewayId, userName, description);
    return;
  }

  void searchExperimentsByDescWithPagination(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & _return, const std::string& gatewayId, const std::string& userName, const std::string& description, const int32_t limit, const int32_t offset) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->searchExperimentsByDescWithPagination(_return, gatewayId, userName, description, limit, offset);
    }
    ifaces_[i]->searchExperimentsByDescWithPagination(_return, gatewayId, userName, description, limit, offset);
    return;
  }

  void searchExperimentsByApplication(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & _return, const std::string& gatewayId, const std::string& userName, const std::string& applicationId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->searchExperimentsByApplication(_return, gatewayId, userName, applicationId);
    }
    ifaces_[i]->searchExperimentsByApplication(_return, gatewayId, userName, applicationId);
    return;
  }

  void searchExperimentsByApplicationWithPagination(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & _return, const std::string& gatewayId, const std::string& userName, const std::string& applicationId, const int32_t limit, const int32_t offset) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->searchExperimentsByApplicationWithPagination(_return, gatewayId, userName, applicationId, limit, offset);
    }
    ifaces_[i]->searchExperimentsByApplicationWithPagination(_return, gatewayId, userName, applicationId, limit, offset);
    return;
  }

  void searchExperimentsByStatus(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & _return, const std::string& gatewayId, const std::string& userName, const  ::apache::airavata::model::workspace::experiment::ExperimentState::type experimentState) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->searchExperimentsByStatus(_return, gatewayId, userName, experimentState);
    }
    ifaces_[i]->searchExperimentsByStatus(_return, gatewayId, userName, experimentState);
    return;
  }

  void searchExperimentsByStatusWithPagination(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & _return, const std::string& gatewayId, const std::string& userName, const  ::apache::airavata::model::workspace::experiment::ExperimentState::type experimentState, const int32_t limit, const int32_t offset) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->searchExperimentsByStatusWithPagination(_return, gatewayId, userName, experimentState, limit, offset);
    }
    ifaces_[i]->searchExperimentsByStatusWithPagination(_return, gatewayId, userName, experimentState, limit, offset);
    return;
  }

  void searchExperimentsByCreationTime(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & _return, const std::string& gatewayId, const std::string& userName, const int64_t fromTime, const int64_t toTime) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->searchExperimentsByCreationTime(_return, gatewayId, userName, fromTime, toTime);
    }
    ifaces_[i]->searchExperimentsByCreationTime(_return, gatewayId, userName, fromTime, toTime);
    return;
  }

  void searchExperimentsByCreationTimeWithPagination(std::vector< ::apache::airavata::model::workspace::experiment::ExperimentSummary> & _return, const std::string& gatewayId, const std::string& userName, const int64_t fromTime, const int64_t toTime, const int32_t limit, const int32_t offset) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->searchExperimentsByCreationTimeWithPagination(_return, gatewayId, userName, fromTime, toTime, limit, offset);
    }
    ifaces_[i]->searchExperimentsByCreationTimeWithPagination(_return, gatewayId, userName, fromTime, toTime, limit, offset);
    return;
  }

  void getAllExperimentsInProject(std::vector< ::apache::airavata::model::workspace::experiment::Experiment> & _return, const std::string& projectId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllExperimentsInProject(_return, projectId);
    }
    ifaces_[i]->getAllExperimentsInProject(_return, projectId);
    return;
  }

  void getAllExperimentsInProjectWithPagination(std::vector< ::apache::airavata::model::workspace::experiment::Experiment> & _return, const std::string& projectId, const int32_t limit, const int32_t offset) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllExperimentsInProjectWithPagination(_return, projectId, limit, offset);
    }
    ifaces_[i]->getAllExperimentsInProjectWithPagination(_return, projectId, limit, offset);
    return;
  }

  void getAllUserExperiments(std::vector< ::apache::airavata::model::workspace::experiment::Experiment> & _return, const std::string& gatewayId, const std::string& userName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllUserExperiments(_return, gatewayId, userName);
    }
    ifaces_[i]->getAllUserExperiments(_return, gatewayId, userName);
    return;
  }

  void getAllUserExperimentsWithPagination(std::vector< ::apache::airavata::model::workspace::experiment::Experiment> & _return, const std::string& gatewayId, const std::string& userName, const int32_t limit, const int32_t offset) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllUserExperimentsWithPagination(_return, gatewayId, userName, limit, offset);
    }
    ifaces_[i]->getAllUserExperimentsWithPagination(_return, gatewayId, userName, limit, offset);
    return;
  }

  void createExperiment(std::string& _return, const std::string& gatewayId, const  ::apache::airavata::model::workspace::experiment::Experiment& experiment) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createExperiment(_return, gatewayId, experiment);
    }
    ifaces_[i]->createExperiment(_return, gatewayId, experiment);
    return;
  }

  void getExperiment( ::apache::airavata::model::workspace::experiment::Experiment& _return, const std::string& airavataExperimentId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getExperiment(_return, airavataExperimentId);
    }
    ifaces_[i]->getExperiment(_return, airavataExperimentId);
    return;
  }

  void updateExperiment(const std::string& airavataExperimentId, const  ::apache::airavata::model::workspace::experiment::Experiment& experiment) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateExperiment(airavataExperimentId, experiment);
    }
    ifaces_[i]->updateExperiment(airavataExperimentId, experiment);
  }

  void updateExperimentConfiguration(const std::string& airavataExperimentId, const  ::apache::airavata::model::workspace::experiment::UserConfigurationData& userConfiguration) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateExperimentConfiguration(airavataExperimentId, userConfiguration);
    }
    ifaces_[i]->updateExperimentConfiguration(airavataExperimentId, userConfiguration);
  }

  void updateResourceScheduleing(const std::string& airavataExperimentId, const  ::apache::airavata::model::workspace::experiment::ComputationalResourceScheduling& resourceScheduling) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateResourceScheduleing(airavataExperimentId, resourceScheduling);
    }
    ifaces_[i]->updateResourceScheduleing(airavataExperimentId, resourceScheduling);
  }

  bool validateExperiment(const std::string& airavataExperimentId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->validateExperiment(airavataExperimentId);
    }
    return ifaces_[i]->validateExperiment(airavataExperimentId);
  }

  void launchExperiment(const std::string& airavataExperimentId, const std::string& airavataCredStoreToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->launchExperiment(airavataExperimentId, airavataCredStoreToken);
    }
    ifaces_[i]->launchExperiment(airavataExperimentId, airavataCredStoreToken);
  }

  void getExperimentStatus( ::apache::airavata::model::workspace::experiment::ExperimentStatus& _return, const std::string& airavataExperimentId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getExperimentStatus(_return, airavataExperimentId);
    }
    ifaces_[i]->getExperimentStatus(_return, airavataExperimentId);
    return;
  }

  void getExperimentOutputs(std::vector< ::apache::airavata::model::appcatalog::appinterface::OutputDataObjectType> & _return, const std::string& airavataExperimentId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getExperimentOutputs(_return, airavataExperimentId);
    }
    ifaces_[i]->getExperimentOutputs(_return, airavataExperimentId);
    return;
  }

  void getIntermediateOutputs(std::vector< ::apache::airavata::model::appcatalog::appinterface::OutputDataObjectType> & _return, const std::string& airavataExperimentId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getIntermediateOutputs(_return, airavataExperimentId);
    }
    ifaces_[i]->getIntermediateOutputs(_return, airavataExperimentId);
    return;
  }

  void getJobStatuses(std::map<std::string,  ::apache::airavata::model::workspace::experiment::JobStatus> & _return, const std::string& airavataExperimentId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getJobStatuses(_return, airavataExperimentId);
    }
    ifaces_[i]->getJobStatuses(_return, airavataExperimentId);
    return;
  }

  void getJobDetails(std::vector< ::apache::airavata::model::workspace::experiment::JobDetails> & _return, const std::string& airavataExperimentId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getJobDetails(_return, airavataExperimentId);
    }
    ifaces_[i]->getJobDetails(_return, airavataExperimentId);
    return;
  }

  void getDataTransferDetails(std::vector< ::apache::airavata::model::workspace::experiment::DataTransferDetails> & _return, const std::string& airavataExperimentId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDataTransferDetails(_return, airavataExperimentId);
    }
    ifaces_[i]->getDataTransferDetails(_return, airavataExperimentId);
    return;
  }

  void cloneExperiment(std::string& _return, const std::string& existingExperimentID, const std::string& newExperimentName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cloneExperiment(_return, existingExperimentID, newExperimentName);
    }
    ifaces_[i]->cloneExperiment(_return, existingExperimentID, newExperimentName);
    return;
  }

  void terminateExperiment(const std::string& airavataExperimentId, const std::string& tokenId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->terminateExperiment(airavataExperimentId, tokenId);
    }
    ifaces_[i]->terminateExperiment(airavataExperimentId, tokenId);
  }

  void registerApplicationModule(std::string& _return, const std::string& gatewayId, const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule& applicationModule) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerApplicationModule(_return, gatewayId, applicationModule);
    }
    ifaces_[i]->registerApplicationModule(_return, gatewayId, applicationModule);
    return;
  }

  void getApplicationModule( ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule& _return, const std::string& appModuleId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getApplicationModule(_return, appModuleId);
    }
    ifaces_[i]->getApplicationModule(_return, appModuleId);
    return;
  }

  bool updateApplicationModule(const std::string& appModuleId, const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule& applicationModule) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateApplicationModule(appModuleId, applicationModule);
    }
    return ifaces_[i]->updateApplicationModule(appModuleId, applicationModule);
  }

  void getAllAppModules(std::vector< ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule> & _return, const std::string& gatewayId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllAppModules(_return, gatewayId);
    }
    ifaces_[i]->getAllAppModules(_return, gatewayId);
    return;
  }

  bool deleteApplicationModule(const std::string& appModuleId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteApplicationModule(appModuleId);
    }
    return ifaces_[i]->deleteApplicationModule(appModuleId);
  }

  void registerApplicationDeployment(std::string& _return, const std::string& gatewayId, const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription& applicationDeployment) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerApplicationDeployment(_return, gatewayId, applicationDeployment);
    }
    ifaces_[i]->registerApplicationDeployment(_return, gatewayId, applicationDeployment);
    return;
  }

  void getApplicationDeployment( ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription& _return, const std::string& appDeploymentId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getApplicationDeployment(_return, appDeploymentId);
    }
    ifaces_[i]->getApplicationDeployment(_return, appDeploymentId);
    return;
  }

  bool updateApplicationDeployment(const std::string& appDeploymentId, const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription& applicationDeployment) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateApplicationDeployment(appDeploymentId, applicationDeployment);
    }
    return ifaces_[i]->updateApplicationDeployment(appDeploymentId, applicationDeployment);
  }

  bool deleteApplicationDeployment(const std::string& appDeploymentId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteApplicationDeployment(appDeploymentId);
    }
    return ifaces_[i]->deleteApplicationDeployment(appDeploymentId);
  }

  void getAllApplicationDeployments(std::vector< ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription> & _return, const std::string& gatewayId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllApplicationDeployments(_return, gatewayId);
    }
    ifaces_[i]->getAllApplicationDeployments(_return, gatewayId);
    return;
  }

  void getAppModuleDeployedResources(std::vector<std::string> & _return, const std::string& appModuleId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAppModuleDeployedResources(_return, appModuleId);
    }
    ifaces_[i]->getAppModuleDeployedResources(_return, appModuleId);
    return;
  }

  void registerApplicationInterface(std::string& _return, const std::string& gatewayId, const  ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription& applicationInterface) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerApplicationInterface(_return, gatewayId, applicationInterface);
    }
    ifaces_[i]->registerApplicationInterface(_return, gatewayId, applicationInterface);
    return;
  }

  void getApplicationInterface( ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription& _return, const std::string& appInterfaceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getApplicationInterface(_return, appInterfaceId);
    }
    ifaces_[i]->getApplicationInterface(_return, appInterfaceId);
    return;
  }

  bool updateApplicationInterface(const std::string& appInterfaceId, const  ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription& applicationInterface) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateApplicationInterface(appInterfaceId, applicationInterface);
    }
    return ifaces_[i]->updateApplicationInterface(appInterfaceId, applicationInterface);
  }

  bool deleteApplicationInterface(const std::string& appInterfaceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteApplicationInterface(appInterfaceId);
    }
    return ifaces_[i]->deleteApplicationInterface(appInterfaceId);
  }

  void getAllApplicationInterfaceNames(std::map<std::string, std::string> & _return, const std::string& gatewayId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllApplicationInterfaceNames(_return, gatewayId);
    }
    ifaces_[i]->getAllApplicationInterfaceNames(_return, gatewayId);
    return;
  }

  void getAllApplicationInterfaces(std::vector< ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription> & _return, const std::string& gatewayId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllApplicationInterfaces(_return, gatewayId);
    }
    ifaces_[i]->getAllApplicationInterfaces(_return, gatewayId);
    return;
  }

  void getApplicationInputs(std::vector< ::apache::airavata::model::appcatalog::appinterface::InputDataObjectType> & _return, const std::string& appInterfaceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getApplicationInputs(_return, appInterfaceId);
    }
    ifaces_[i]->getApplicationInputs(_return, appInterfaceId);
    return;
  }

  void getApplicationOutputs(std::vector< ::apache::airavata::model::appcatalog::appinterface::OutputDataObjectType> & _return, const std::string& appInterfaceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getApplicationOutputs(_return, appInterfaceId);
    }
    ifaces_[i]->getApplicationOutputs(_return, appInterfaceId);
    return;
  }

  void getAvailableAppInterfaceComputeResources(std::map<std::string, std::string> & _return, const std::string& appInterfaceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAvailableAppInterfaceComputeResources(_return, appInterfaceId);
    }
    ifaces_[i]->getAvailableAppInterfaceComputeResources(_return, appInterfaceId);
    return;
  }

  void registerComputeResource(std::string& _return, const  ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription& computeResourceDescription) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerComputeResource(_return, computeResourceDescription);
    }
    ifaces_[i]->registerComputeResource(_return, computeResourceDescription);
    return;
  }

  void getComputeResource( ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription& _return, const std::string& computeResourceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getComputeResource(_return, computeResourceId);
    }
    ifaces_[i]->getComputeResource(_return, computeResourceId);
    return;
  }

  void getAllComputeResourceNames(std::map<std::string, std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllComputeResourceNames(_return);
    }
    ifaces_[i]->getAllComputeResourceNames(_return);
    return;
  }

  bool updateComputeResource(const std::string& computeResourceId, const  ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription& computeResourceDescription) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateComputeResource(computeResourceId, computeResourceDescription);
    }
    return ifaces_[i]->updateComputeResource(computeResourceId, computeResourceDescription);
  }

  bool deleteComputeResource(const std::string& computeResourceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteComputeResource(computeResourceId);
    }
    return ifaces_[i]->deleteComputeResource(computeResourceId);
  }

  void addLocalSubmissionDetails(std::string& _return, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission& localSubmission) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addLocalSubmissionDetails(_return, computeResourceId, priorityOrder, localSubmission);
    }
    ifaces_[i]->addLocalSubmissionDetails(_return, computeResourceId, priorityOrder, localSubmission);
    return;
  }

  bool updateLocalSubmissionDetails(const std::string& jobSubmissionInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission& localSubmission) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateLocalSubmissionDetails(jobSubmissionInterfaceId, localSubmission);
    }
    return ifaces_[i]->updateLocalSubmissionDetails(jobSubmissionInterfaceId, localSubmission);
  }

  void getLocalJobSubmission( ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission& _return, const std::string& jobSubmissionId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getLocalJobSubmission(_return, jobSubmissionId);
    }
    ifaces_[i]->getLocalJobSubmission(_return, jobSubmissionId);
    return;
  }

  void addSSHJobSubmissionDetails(std::string& _return, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission& sshJobSubmission) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addSSHJobSubmissionDetails(_return, computeResourceId, priorityOrder, sshJobSubmission);
    }
    ifaces_[i]->addSSHJobSubmissionDetails(_return, computeResourceId, priorityOrder, sshJobSubmission);
    return;
  }

  void getSSHJobSubmission( ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission& _return, const std::string& jobSubmissionId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSSHJobSubmission(_return, jobSubmissionId);
    }
    ifaces_[i]->getSSHJobSubmission(_return, jobSubmissionId);
    return;
  }

  void addUNICOREJobSubmissionDetails(std::string& _return, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission& unicoreJobSubmission) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addUNICOREJobSubmissionDetails(_return, computeResourceId, priorityOrder, unicoreJobSubmission);
    }
    ifaces_[i]->addUNICOREJobSubmissionDetails(_return, computeResourceId, priorityOrder, unicoreJobSubmission);
    return;
  }

  void getUnicoreJobSubmission( ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission& _return, const std::string& jobSubmissionId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUnicoreJobSubmission(_return, jobSubmissionId);
    }
    ifaces_[i]->getUnicoreJobSubmission(_return, jobSubmissionId);
    return;
  }

  void addCloudJobSubmissionDetails(std::string& _return, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission& cloudSubmission) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addCloudJobSubmissionDetails(_return, computeResourceId, priorityOrder, cloudSubmission);
    }
    ifaces_[i]->addCloudJobSubmissionDetails(_return, computeResourceId, priorityOrder, cloudSubmission);
    return;
  }

  void getCloudJobSubmission( ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission& _return, const std::string& jobSubmissionId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCloudJobSubmission(_return, jobSubmissionId);
    }
    ifaces_[i]->getCloudJobSubmission(_return, jobSubmissionId);
    return;
  }

  bool updateSSHJobSubmissionDetails(const std::string& jobSubmissionInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission& sshJobSubmission) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateSSHJobSubmissionDetails(jobSubmissionInterfaceId, sshJobSubmission);
    }
    return ifaces_[i]->updateSSHJobSubmissionDetails(jobSubmissionInterfaceId, sshJobSubmission);
  }

  bool updateCloudJobSubmissionDetails(const std::string& jobSubmissionInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission& sshJobSubmission) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateCloudJobSubmissionDetails(jobSubmissionInterfaceId, sshJobSubmission);
    }
    return ifaces_[i]->updateCloudJobSubmissionDetails(jobSubmissionInterfaceId, sshJobSubmission);
  }

  bool updateUnicoreJobSubmissionDetails(const std::string& jobSubmissionInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission& unicoreJobSubmission) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateUnicoreJobSubmissionDetails(jobSubmissionInterfaceId, unicoreJobSubmission);
    }
    return ifaces_[i]->updateUnicoreJobSubmissionDetails(jobSubmissionInterfaceId, unicoreJobSubmission);
  }

  void addLocalDataMovementDetails(std::string& _return, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement& localDataMovement) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addLocalDataMovementDetails(_return, computeResourceId, priorityOrder, localDataMovement);
    }
    ifaces_[i]->addLocalDataMovementDetails(_return, computeResourceId, priorityOrder, localDataMovement);
    return;
  }

  bool updateLocalDataMovementDetails(const std::string& dataMovementInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement& localDataMovement) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateLocalDataMovementDetails(dataMovementInterfaceId, localDataMovement);
    }
    return ifaces_[i]->updateLocalDataMovementDetails(dataMovementInterfaceId, localDataMovement);
  }

  void getLocalDataMovement( ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement& _return, const std::string& dataMovementId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getLocalDataMovement(_return, dataMovementId);
    }
    ifaces_[i]->getLocalDataMovement(_return, dataMovementId);
    return;
  }

  void addSCPDataMovementDetails(std::string& _return, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement& scpDataMovement) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addSCPDataMovementDetails(_return, computeResourceId, priorityOrder, scpDataMovement);
    }
    ifaces_[i]->addSCPDataMovementDetails(_return, computeResourceId, priorityOrder, scpDataMovement);
    return;
  }

  bool updateSCPDataMovementDetails(const std::string& dataMovementInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement& scpDataMovement) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateSCPDataMovementDetails(dataMovementInterfaceId, scpDataMovement);
    }
    return ifaces_[i]->updateSCPDataMovementDetails(dataMovementInterfaceId, scpDataMovement);
  }

  void getSCPDataMovement( ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement& _return, const std::string& dataMovementId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSCPDataMovement(_return, dataMovementId);
    }
    ifaces_[i]->getSCPDataMovement(_return, dataMovementId);
    return;
  }

  void addUnicoreDataMovementDetails(std::string& _return, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement& unicoreDataMovement) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addUnicoreDataMovementDetails(_return, computeResourceId, priorityOrder, unicoreDataMovement);
    }
    ifaces_[i]->addUnicoreDataMovementDetails(_return, computeResourceId, priorityOrder, unicoreDataMovement);
    return;
  }

  bool updateUnicoreDataMovementDetails(const std::string& dataMovementInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement& unicoreDataMovement) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateUnicoreDataMovementDetails(dataMovementInterfaceId, unicoreDataMovement);
    }
    return ifaces_[i]->updateUnicoreDataMovementDetails(dataMovementInterfaceId, unicoreDataMovement);
  }

  void getUnicoreDataMovement( ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement& _return, const std::string& dataMovementId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUnicoreDataMovement(_return, dataMovementId);
    }
    ifaces_[i]->getUnicoreDataMovement(_return, dataMovementId);
    return;
  }

  void addGridFTPDataMovementDetails(std::string& _return, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement& gridFTPDataMovement) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addGridFTPDataMovementDetails(_return, computeResourceId, priorityOrder, gridFTPDataMovement);
    }
    ifaces_[i]->addGridFTPDataMovementDetails(_return, computeResourceId, priorityOrder, gridFTPDataMovement);
    return;
  }

  bool updateGridFTPDataMovementDetails(const std::string& dataMovementInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement& gridFTPDataMovement) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateGridFTPDataMovementDetails(dataMovementInterfaceId, gridFTPDataMovement);
    }
    return ifaces_[i]->updateGridFTPDataMovementDetails(dataMovementInterfaceId, gridFTPDataMovement);
  }

  void getGridFTPDataMovement( ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement& _return, const std::string& dataMovementId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getGridFTPDataMovement(_return, dataMovementId);
    }
    ifaces_[i]->getGridFTPDataMovement(_return, dataMovementId);
    return;
  }

  bool changeJobSubmissionPriority(const std::string& jobSubmissionInterfaceId, const int32_t newPriorityOrder) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->changeJobSubmissionPriority(jobSubmissionInterfaceId, newPriorityOrder);
    }
    return ifaces_[i]->changeJobSubmissionPriority(jobSubmissionInterfaceId, newPriorityOrder);
  }

  bool changeDataMovementPriority(const std::string& dataMovementInterfaceId, const int32_t newPriorityOrder) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->changeDataMovementPriority(dataMovementInterfaceId, newPriorityOrder);
    }
    return ifaces_[i]->changeDataMovementPriority(dataMovementInterfaceId, newPriorityOrder);
  }

  bool changeJobSubmissionPriorities(const std::map<std::string, int32_t> & jobSubmissionPriorityMap) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->changeJobSubmissionPriorities(jobSubmissionPriorityMap);
    }
    return ifaces_[i]->changeJobSubmissionPriorities(jobSubmissionPriorityMap);
  }

  bool changeDataMovementPriorities(const std::map<std::string, int32_t> & dataMovementPriorityMap) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->changeDataMovementPriorities(dataMovementPriorityMap);
    }
    return ifaces_[i]->changeDataMovementPriorities(dataMovementPriorityMap);
  }

  bool deleteJobSubmissionInterface(const std::string& computeResourceId, const std::string& jobSubmissionInterfaceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteJobSubmissionInterface(computeResourceId, jobSubmissionInterfaceId);
    }
    return ifaces_[i]->deleteJobSubmissionInterface(computeResourceId, jobSubmissionInterfaceId);
  }

  bool deleteDataMovementInterface(const std::string& computeResourceId, const std::string& dataMovementInterfaceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteDataMovementInterface(computeResourceId, dataMovementInterfaceId);
    }
    return ifaces_[i]->deleteDataMovementInterface(computeResourceId, dataMovementInterfaceId);
  }

  void registerResourceJobManager(std::string& _return, const  ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager& resourceJobManager) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerResourceJobManager(_return, resourceJobManager);
    }
    ifaces_[i]->registerResourceJobManager(_return, resourceJobManager);
    return;
  }

  bool updateResourceJobManager(const std::string& resourceJobManagerId, const  ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager& updatedResourceJobManager) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateResourceJobManager(resourceJobManagerId, updatedResourceJobManager);
    }
    return ifaces_[i]->updateResourceJobManager(resourceJobManagerId, updatedResourceJobManager);
  }

  void getResourceJobManager( ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager& _return, const std::string& resourceJobManagerId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getResourceJobManager(_return, resourceJobManagerId);
    }
    ifaces_[i]->getResourceJobManager(_return, resourceJobManagerId);
    return;
  }

  bool deleteResourceJobManager(const std::string& resourceJobManagerId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteResourceJobManager(resourceJobManagerId);
    }
    return ifaces_[i]->deleteResourceJobManager(resourceJobManagerId);
  }

  bool deleteBatchQueue(const std::string& computeResourceId, const std::string& queueName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteBatchQueue(computeResourceId, queueName);
    }
    return ifaces_[i]->deleteBatchQueue(computeResourceId, queueName);
  }

  void registerGatewayResourceProfile(std::string& _return, const  ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile& gatewayResourceProfile) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerGatewayResourceProfile(_return, gatewayResourceProfile);
    }
    ifaces_[i]->registerGatewayResourceProfile(_return, gatewayResourceProfile);
    return;
  }

  void getGatewayResourceProfile( ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile& _return, const std::string& gatewayID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getGatewayResourceProfile(_return, gatewayID);
    }
    ifaces_[i]->getGatewayResourceProfile(_return, gatewayID);
    return;
  }

  bool updateGatewayResourceProfile(const std::string& gatewayID, const  ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile& gatewayResourceProfile) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateGatewayResourceProfile(gatewayID, gatewayResourceProfile);
    }
    return ifaces_[i]->updateGatewayResourceProfile(gatewayID, gatewayResourceProfile);
  }

  bool deleteGatewayResourceProfile(const std::string& gatewayID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteGatewayResourceProfile(gatewayID);
    }
    return ifaces_[i]->deleteGatewayResourceProfile(gatewayID);
  }

  bool addGatewayComputeResourcePreference(const std::string& gatewayID, const std::string& computeResourceId, const  ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference& computeResourcePreference) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addGatewayComputeResourcePreference(gatewayID, computeResourceId, computeResourcePreference);
    }
    return ifaces_[i]->addGatewayComputeResourcePreference(gatewayID, computeResourceId, computeResourcePreference);
  }

  void getGatewayComputeResourcePreference( ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference& _return, const std::string& gatewayID, const std::string& computeResourceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getGatewayComputeResourcePreference(_return, gatewayID, computeResourceId);
    }
    ifaces_[i]->getGatewayComputeResourcePreference(_return, gatewayID, computeResourceId);
    return;
  }

  void getAllGatewayComputeResourcePreferences(std::vector< ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference> & _return, const std::string& gatewayID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllGatewayComputeResourcePreferences(_return, gatewayID);
    }
    ifaces_[i]->getAllGatewayComputeResourcePreferences(_return, gatewayID);
    return;
  }

  void getAllGatewayComputeResources(std::vector< ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllGatewayComputeResources(_return);
    }
    ifaces_[i]->getAllGatewayComputeResources(_return);
    return;
  }

  bool updateGatewayComputeResourcePreference(const std::string& gatewayID, const std::string& computeResourceId, const  ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference& computeResourcePreference) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateGatewayComputeResourcePreference(gatewayID, computeResourceId, computeResourcePreference);
    }
    return ifaces_[i]->updateGatewayComputeResourcePreference(gatewayID, computeResourceId, computeResourcePreference);
  }

  bool deleteGatewayComputeResourcePreference(const std::string& gatewayID, const std::string& computeResourceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteGatewayComputeResourcePreference(gatewayID, computeResourceId);
    }
    return ifaces_[i]->deleteGatewayComputeResourcePreference(gatewayID, computeResourceId);
  }

  void getAllWorkflows(std::vector<std::string> & _return, const std::string& gatewayId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllWorkflows(_return, gatewayId);
    }
    ifaces_[i]->getAllWorkflows(_return, gatewayId);
    return;
  }

  void getWorkflow( ::Workflow& _return, const std::string& workflowTemplateId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getWorkflow(_return, workflowTemplateId);
    }
    ifaces_[i]->getWorkflow(_return, workflowTemplateId);
    return;
  }

  void deleteWorkflow(const std::string& workflowTemplateId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteWorkflow(workflowTemplateId);
    }
    ifaces_[i]->deleteWorkflow(workflowTemplateId);
  }

  void registerWorkflow(std::string& _return, const std::string& gatewayId, const  ::Workflow& workflow) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerWorkflow(_return, gatewayId, workflow);
    }
    ifaces_[i]->registerWorkflow(_return, gatewayId, workflow);
    return;
  }

  void updateWorkflow(const std::string& workflowTemplateId, const  ::Workflow& workflow) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateWorkflow(workflowTemplateId, workflow);
    }
    ifaces_[i]->updateWorkflow(workflowTemplateId, workflow);
  }

  void getWorkflowTemplateId(std::string& _return, const std::string& workflowName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getWorkflowTemplateId(_return, workflowName);
    }
    ifaces_[i]->getWorkflowTemplateId(_return, workflowName);
    return;
  }

  bool isWorkflowExistWithName(const std::string& workflowName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isWorkflowExistWithName(workflowName);
    }
    return ifaces_[i]->isWorkflowExistWithName(workflowName);
  }

};

}}} // namespace

#endif
