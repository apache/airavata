/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Airavata_H
#define Airavata_H

#include <thrift/TDispatchProcessor.h>
#include "airavata_api_types.h"

namespace apache { namespace airavata { namespace api {

class AiravataIf {
 public:
  virtual ~AiravataIf() {}

  /**
   * Fetch Apache Airavata API version
   */
  virtual void getAPIVersion(std::string& _return) = 0;
  virtual void addGateway(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const  ::apache::airavata::model::workspace::Gateway& gateway) = 0;
  virtual void updateGateway(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const  ::apache::airavata::model::workspace::Gateway& updatedGateway) = 0;
  virtual void getGateway( ::apache::airavata::model::workspace::Gateway& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId) = 0;
  virtual bool deleteGateway(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId) = 0;
  virtual void getAllGateways(std::vector< ::apache::airavata::model::workspace::Gateway> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken) = 0;
  virtual bool isGatewayExist(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId) = 0;

  /**
   * Generate and Register SSH Key Pair with Airavata Credential Store.
   * 
   * @param gatewayId
   *    The identifier for the requested gateway.
   * 
   * @param userName
   *    The User for which the credential should be registered. For community accounts, this user is the name of the
   *    community user name. For computational resources, this user name need not be the same user name on resoruces.
   * 
   * @return airavataCredStoreToken
   *   An SSH Key pair is generated and stored in the credential store and associated with users or community account
   *   belonging to a gateway.
   * 
   * 
   * 
   * @param authzToken
   * @param gatewayId
   * @param userName
   */
  virtual void generateAndRegisterSSHKeys(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const std::string& userName) = 0;
  virtual void getSSHPubKey(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataCredStoreToken, const std::string& gatewayId) = 0;
  virtual void getAllUserSSHPubKeys(std::map<std::string, std::string> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& userName) = 0;

  /**
   * Creates a Project with basic metadata.
   *    A Project is a container of experiments.
   * 
   * @param gatewayId
   *    The identifier for the requested gateway.
   * 
   * @param Project
   *    The Project Object described in the workspace_model
   * 
   * 
   * @param authzToken
   * @param gatewayId
   * @param project
   */
  virtual void createProject(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const  ::apache::airavata::model::workspace::Project& project) = 0;

  /**
   * Update a Project
   * 
   * 
   * @param authzToken
   * @param projectId
   * @param updatedProject
   */
  virtual void updateProject(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& projectId, const  ::apache::airavata::model::workspace::Project& updatedProject) = 0;

  /**
   * Get a Project by ID
   * 
   * 
   * @param authzToken
   * @param projectId
   */
  virtual void getProject( ::apache::airavata::model::workspace::Project& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& projectId) = 0;
  virtual bool deleteProject(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& projectId) = 0;

  /**
   *   * Get all Project by user with pagination. Results will be ordered based
   *   * on creation time DESC
   *   *
   *   * @param gatewayId
   *   *    The identifier for the requested gateway.
   *   * @param userName
   *   *    The identifier of the user
   *   * @param limit
   *   *    The amount results to be fetched
   *   * @param offset
   *   *    The starting point of the results to be fetched
   * *
   * 
   * @param authzToken
   * @param gatewayId
   * @param userName
   * @param limit
   * @param offset
   */
  virtual void getUserProjects(std::vector< ::apache::airavata::model::workspace::Project> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const std::string& userName, const int32_t limit, const int32_t offset) = 0;

  /**
   * Get all Project for user by project name with pagination.Results will be ordered based
   * on creation time DESC
   * 
   * @param gatewayId
   *    The identifier for the requested gateway.
   * @param userName
   *    The identifier of the user
   * @param projectName
   *    The name of the project on which the results to be fetched
   * @param limit
   *    The amount results to be fetched
   * @param offset
   *    The starting point of the results to be fetched
   * 
   * @param authzToken
   * @param gatewayId
   * @param userName
   * @param projectName
   * @param limit
   * @param offset
   */
  virtual void searchProjectsByProjectName(std::vector< ::apache::airavata::model::workspace::Project> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const std::string& userName, const std::string& projectName, const int32_t limit, const int32_t offset) = 0;

  /**
   * Search and get all Projects for user by project description with pagination. Results
   * will be ordered based on creation time DESC
   * 
   * @param gatewayId
   *    The identifier for the requested gateway.
   * @param userName
   *    The identifier of the user
   * @param description
   *    The description to be matched
   * @param limit
   *    The amount results to be fetched
   * @param offset
   *    The starting point of the results to be fetched
   * 
   * @param authzToken
   * @param gatewayId
   * @param userName
   * @param description
   * @param limit
   * @param offset
   */
  virtual void searchProjectsByProjectDesc(std::vector< ::apache::airavata::model::workspace::Project> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const std::string& userName, const std::string& description, const int32_t limit, const int32_t offset) = 0;

  /**
   * Search Experiments by experiment name with pagination. Results will be sorted
   * based on creation time DESC
   * 
   * @param gatewayId
   *       Identifier of the requested gateway
   * @param userName
   *       Username of the requested user
   * @param expName
   *       Experiment name to be matched
   * @param limit
   *       Amount of results to be fetched
   * @param offset
   *       The starting point of the results to be fetched
   * 
   * @param authzToken
   * @param gatewayId
   * @param userName
   * @param expName
   * @param limit
   * @param offset
   */
  virtual void searchExperimentsByName(std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const std::string& userName, const std::string& expName, const int32_t limit, const int32_t offset) = 0;

  /**
   * Search Experiments by experiment name with pagination. Results will be sorted
   * based on creation time DESC
   * 
   * @param gatewayId
   *       Identifier of the requested gateway
   * @param userName
   *       Username of the requested user
   * @param description
   *       Experiment description to be matched
   * @param limit
   *       Amount of results to be fetched
   * @param offset
   *       The starting point of the results to be fetched
   * 
   * @param authzToken
   * @param gatewayId
   * @param userName
   * @param description
   * @param limit
   * @param offset
   */
  virtual void searchExperimentsByDesc(std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const std::string& userName, const std::string& description, const int32_t limit, const int32_t offset) = 0;

  /**
   * Search Experiments by application id with pagination. Results will be sorted
   * based on creation time DESC
   * 
   * @param gatewayId
   *       Identifier of the requested gateway
   * @param userName
   *       Username of the requested user
   * @param applicationId
   *       Application id to be matched
   * @param limit
   *       Amount of results to be fetched
   * @param offset
   *       The starting point of the results to be fetched
   * 
   * @param authzToken
   * @param gatewayId
   * @param userName
   * @param applicationId
   * @param limit
   * @param offset
   */
  virtual void searchExperimentsByApplication(std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const std::string& userName, const std::string& applicationId, const int32_t limit, const int32_t offset) = 0;

  /**
   * Search Experiments by experiment status with pagination. Results will be sorted
   * based on creation time DESC
   * 
   * @param gatewayId
   *       Identifier of the requested gateway
   * @param userName
   *       Username of the requested user
   * @param experimentState
   *       Experiement state to be matched
   * @param limit
   *       Amount of results to be fetched
   * @param offset
   *       The starting point of the results to be fetched
   * 
   * @param authzToken
   * @param gatewayId
   * @param userName
   * @param experimentState
   * @param limit
   * @param offset
   */
  virtual void searchExperimentsByStatus(std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const std::string& userName, const  ::apache::airavata::model::status::ExperimentState::type experimentState, const int32_t limit, const int32_t offset) = 0;

  /**
   * Search Experiments by experiment creation time with pagination. Results will be sorted
   * based on creation time DESC
   * 
   * @param gatewayId
   *       Identifier of the requested gateway
   * @param userName
   *       Username of the requested user
   * @param fromTime
   *       Start time of the experiments creation time
   * @param toTime
   *       End time of the  experiement creation time
   * @param limit
   *       Amount of results to be fetched
   * @param offset
   *       The starting point of the results to be fetched
   * 
   * @param authzToken
   * @param gatewayId
   * @param userName
   * @param fromTime
   * @param toTime
   * @param limit
   * @param offset
   */
  virtual void searchExperimentsByCreationTime(std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const std::string& userName, const int64_t fromTime, const int64_t toTime, const int32_t limit, const int32_t offset) = 0;

  /**
   * Search Experiments by using multiple filter criteria with pagination. Results will be sorted
   * based on creation time DESC
   * 
   * @param gatewayId
   *       Identifier of the requested gateway
   * @param userName
   *       Username of the requested user
   * @param filters
   *       map of multiple filter criteria.
   * @param limit
   *       Amount of results to be fetched
   * @param offset
   *       The starting point of the results to be fetched
   * 
   * @param authzToken
   * @param gatewayId
   * @param userName
   * @param filters
   * @param limit
   * @param offset
   */
  virtual void searchExperiments(std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const std::string& userName, const std::map< ::apache::airavata::model::experiment::ExperimentSearchFields::type, std::string> & filters, const int32_t limit, const int32_t offset) = 0;

  /**
   * Get Experiment Statisitics for the given gateway for a specific time period
   * @param gatewayId
   *       Identifier of the requested gateway
   * @param fromTime
   *       Starting date time
   * @param toTime
   *       Ending data time
   * 
   * 
   * @param authzToken
   * @param gatewayId
   * @param fromTime
   * @param toTime
   */
  virtual void getExperimentStatistics( ::apache::airavata::model::experiment::ExperimentStatistics& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const int64_t fromTime, const int64_t toTime) = 0;

  /**
   * Get Experiments within project with pagination. Results will be sorted
   * based on creation time DESC
   * 
   * @param projectId
   *       Identifier of the project
   * @param limit
   *       Amount of results to be fetched
   * @param offset
   *       The starting point of the results to be fetched
   * 
   * @param authzToken
   * @param projectId
   * @param limit
   * @param offset
   */
  virtual void getExperimentsInProject(std::vector< ::apache::airavata::model::experiment::ExperimentModel> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& projectId, const int32_t limit, const int32_t offset) = 0;

  /**
   * Get experiments by user with pagination. Results will be sorted
   * based on creation time DESC
   * 
   * @param gatewayId
   *       Identifier of the requesting gateway
   * @param userName
   *       Username of the requested user
   * @param limit
   *       Amount of results to be fetched
   * @param offset
   *       The starting point of the results to be fetched
   * 
   * @param authzToken
   * @param gatewayId
   * @param userName
   * @param limit
   * @param offset
   */
  virtual void getUserExperiments(std::vector< ::apache::airavata::model::experiment::ExperimentModel> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const std::string& userName, const int32_t limit, const int32_t offset) = 0;

  /**
   * Create an experiment for the specified user belonging to the gateway. The gateway identity is not explicitly passed
   *   but inferred from the authentication header. This experiment is just a persistent place holder. The client
   *   has to subsequently configure and launch the created experiment. No action is taken on Airavata Server except
   *   registering the experiment in a persistent store.
   * 
   * @param basicExperimentMetadata
   *    The create experiment will require the basic experiment metadata like the name and description, intended user,
   *      the gateway identifer and if the experiment should be shared public by defualt. During the creation of an experiment
   *      the ExperimentMetadata is a required field.
   * 
   * @return
   *   The server-side generated.airavata.registry.core.experiment.globally unique identifier.
   * 
   * @throws org.apache.airavata.model.error.InvalidRequestException
   *    For any incorrect forming of the request itself.
   * 
   * @throws org.apache.airavata.model.error.AiravataClientException
   *    The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
   * 
   *      UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
   *         step, then Airavata Registry will not have a provenance area setup. The client has to follow
   *         gateway registration steps and retry this request.
   * 
   *      AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
   *         For now this is a place holder.
   * 
   *      INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
   *         is implemented, the authorization will be more substantial.
   * 
   * @throws org.apache.airavata.model.error.AiravataSystemException
   *    This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
   *       rather an Airavata Administrator will be notified to take corrective action.
   * 
   * 
   * @param authzToken
   * @param gatewayId
   * @param experiment
   */
  virtual void createExperiment(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const  ::apache::airavata::model::experiment::ExperimentModel& experiment) = 0;

  /**
   * Fetch previously created experiment metadata.
   * 
   * @param airavataExperimentId
   *    The identifier for the requested experiment. This is returned during the create experiment step.
   * 
   * @return experimentMetada
   *   This method will return the previously stored experiment metadata.
   * 
   * @throws org.apache.airavata.model.error.InvalidRequestException
   *    For any incorrect forming of the request itself.
   * 
   * @throws org.apache.airavata.model.error.ExperimentNotFoundException
   *    If the specified experiment is not previously created, then an Experiment Not Found Exception is thrown.
   * 
   * @throws org.apache.airavata.model.error.AiravataClientException
   *    The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
   *      
   *      UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
   *         step, then Airavata Registry will not have a provenance area setup. The client has to follow
   *         gateway registration steps and retry this request.
   * 
   *      AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
   *         For now this is a place holder.
   * 
   *      INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
   *         is implemented, the authorization will be more substantial.
   * 
   * @throws org.apache.airavata.model.error.AiravataSystemException
   *    This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
   *       rather an Airavata Administrator will be notified to take corrective action.
   * 
   * 
   * @param authzToken
   * @param airavataExperimentId
   */
  virtual void getExperiment( ::apache::airavata::model::experiment::ExperimentModel& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId) = 0;

  /**
   * Configure a previously created experiment with required inputs, scheduling and other quality of service
   *   parameters. This method only updates the experiment object within the registry. The experiment has to be launched
   *   to make it actionable by the server.
   * 
   * @param airavataExperimentId
   *    The identifier for the requested experiment. This is returned during the create experiment step.
   * 
   * @param experimentConfigurationData
   *    The configuration information of the experiment with application input parameters, computational resource scheduling
   *      information, special input output handling and additional quality of service parameters.
   * 
   * @return
   *   This method call does not have a return value.
   * 
   * @throws org.apache.airavata.model.error.InvalidRequestException
   *    For any incorrect forming of the request itself.
   * 
   * @throws org.apache.airavata.model.error.ExperimentNotFoundException
   *    If the specified experiment is not previously created, then an Experiment Not Found Exception is thrown.
   * 
   * @throws org.apache.airavata.model.error.AiravataClientException
   *    The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
   *      
   *      UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
   *         step, then Airavata Registry will not have a provenance area setup. The client has to follow
   *         gateway registration steps and retry this request.
   * 
   *      AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
   *         For now this is a place holder.
   * 
   *      INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
   *         is implemented, the authorization will be more substantial.
   * 
   * @throws org.apache.airavata.model.error.AiravataSystemException
   *    This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
   *       rather an Airavata Administrator will be notified to take corrective action.
   * 
   * 
   * @param authzToken
   * @param airavataExperimentId
   * @param experiment
   */
  virtual void updateExperiment(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId, const  ::apache::airavata::model::experiment::ExperimentModel& experiment) = 0;
  virtual void updateExperimentConfiguration(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId, const  ::apache::airavata::model::experiment::UserConfigurationDataModel& userConfiguration) = 0;
  virtual void updateResourceScheduleing(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId, const  ::apache::airavata::model::scheduling::ComputationalResourceSchedulingModel& resourceScheduling) = 0;

  /**
   *  *
   *  * Validate experiment configuration. A true in general indicates, the experiment is ready to be launched.
   *  *
   *  * @param experimentID
   *  * @return sucess/failure
   *  *
   * *
   * 
   * @param authzToken
   * @param airavataExperimentId
   */
  virtual bool validateExperiment(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId) = 0;

  /**
   * Launch a previously created and configured experiment. Airavata Server will then start processing the request and appropriate
   *   notifications and intermediate and output data will be subsequently available for this experiment.
   * 
   * @param airavataExperimentId
   *    The identifier for the requested experiment. This is returned during the create experiment step.
   * 
   * @param airavataCredStoreToken:
   *   A requirement to execute experiments within Airavata is to first register the targeted remote computational account
   *     credentials with Airavata Credential Store. The administrative API (related to credential store) will return a
   *     generated token associated with the registered credentials. The client has to security posses this token id and is
   *     required to pass it to Airavata Server for all execution requests.
   *   Note: At this point only the credential store token is required so the string is directly passed here. In future if
   *     if more security credentials are enables, then the structure ExecutionSecurityParameters should be used.
   *   Note: This parameter is not persisted within Airavata Registry for security reasons.
   * 
   * @return
   *   This method call does not have a return value.
   * 
   * @throws org.apache.airavata.model.error.InvalidRequestException
   *    For any incorrect forming of the request itself.
   * 
   * @throws org.apache.airavata.model.error.ExperimentNotFoundException
   *    If the specified experiment is not previously created, then an Experiment Not Found Exception is thrown.
   * 
   * @throws org.apache.airavata.model.error.AiravataClientException
   *    The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
   *      
   *      UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
   *         step, then Airavata Registry will not have a provenance area setup. The client has to follow
   *         gateway registration steps and retry this request.
   * 
   *      AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
   *         For now this is a place holder.
   * 
   *      INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
   *         is implemented, the authorization will be more substantial.
   * 
   * @throws org.apache.airavata.model.error.AiravataSystemException
   *    This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
   *       rather an Airavata Administrator will be notified to take corrective action.
   * 
   * 
   * @param authzToken
   * @param airavataExperimentId
   * @param airavataCredStoreToken
   */
  virtual void launchExperiment(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId, const std::string& airavataCredStoreToken) = 0;
  virtual void getExperimentStatus( ::apache::airavata::model::status::ExperimentStatus& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId) = 0;
  virtual void getExperimentOutputs(std::vector< ::apache::airavata::model::application::io::OutputDataObjectType> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId) = 0;
  virtual void getIntermediateOutputs(std::vector< ::apache::airavata::model::application::io::OutputDataObjectType> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId) = 0;
  virtual void getJobStatuses(std::map<std::string,  ::apache::airavata::model::status::JobStatus> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId) = 0;
  virtual void getJobDetails(std::vector< ::apache::airavata::model::job::JobModel> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId) = 0;

  /**
   * Clone an specified experiment with a new name. A copy of the experiment configuration is made and is persisted with new metadata.
   *   The client has to subsequently update this configuration if needed and launch the cloned experiment.
   * 
   * @param newExperimentName
   *    experiment name that should be used in the cloned experiment
   * 
   * @param updatedExperiment
   *    Once an experiment is cloned, to disambiguate, the users are suggested to provide new metadata. This will again require
   *      the basic experiment metadata like the name and description, intended user, the gateway identifier and if the experiment
   *      should be shared public by default.
   * 
   * @return
   *   The server-side generated.airavata.registry.core.experiment.globally unique identifier for the newly cloned experiment.
   * 
   * @throws org.apache.airavata.model.error.InvalidRequestException
   *    For any incorrect forming of the request itself.
   * 
   * @throws org.apache.airavata.model.error.ExperimentNotFoundException
   *    If the specified experiment is not previously created, then an Experiment Not Found Exception is thrown.
   * 
   * @throws org.apache.airavata.model.error.AiravataClientException
   *    The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
   *      
   *      UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
   *         step, then Airavata Registry will not have a provenance area setup. The client has to follow
   *         gateway registration steps and retry this request.
   * 
   *      AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
   *         For now this is a place holder.
   * 
   *      INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
   *         is implemented, the authorization will be more substantial.
   * 
   * @throws org.apache.airavata.model.error.AiravataSystemException
   *    This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
   *       rather an Airavata Administrator will be notified to take corrective action.
   * 
   * 
   * @param authzToken
   * @param existingExperimentID
   * @param newExperimentName
   */
  virtual void cloneExperiment(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& existingExperimentID, const std::string& newExperimentName) = 0;

  /**
   * Terminate a running experiment.
   * 
   * @param airavataExperimentId
   *    The identifier for the requested experiment. This is returned during the create experiment step.
   * 
   * @return
   *   This method call does not have a return value.
   * 
   * @throws org.apache.airavata.model.error.InvalidRequestException
   *    For any incorrect forming of the request itself.
   * 
   * @throws org.apache.airavata.model.error.ExperimentNotFoundException
   *    If the specified experiment is not previously created, then an Experiment Not Found Exception is thrown.
   * 
   * @throws org.apache.airavata.model.error.AiravataClientException
   *    The following list of exceptions are thrown which Airavata Client can take corrective actions to resolve:
   *      
   *      UNKNOWN_GATEWAY_ID - If a Gateway is not registered with Airavata as a one time administrative
   *         step, then Airavata Registry will not have a provenance area setup. The client has to follow
   *         gateway registration steps and retry this request.
   * 
   *      AUTHENTICATION_FAILURE - How Authentication will be implemented is yet to be determined.
   *         For now this is a place holder.
   * 
   *      INVALID_AUTHORIZATION - This will throw an authorization exception. When a more robust security hand-shake
   *         is implemented, the authorization will be more substantial.
   * 
   * @throws org.apache.airavata.model.error.AiravataSystemException
   *    This exception will be thrown for any Airavata Server side issues and if the problem cannot be corrected by the client
   *       rather an Airavata Administrator will be notified to take corrective action.
   * 
   * 
   * @param authzToken
   * @param airavataExperimentId
   * @param tokenId
   */
  virtual void terminateExperiment(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId, const std::string& tokenId) = 0;

  /**
   * Register a Application Module.
   * 
   * @param applicationModule
   *    Application Module Object created from the datamodel.
   * 
   * @return appModuleId
   *   Returns a server-side generated airavata appModule globally unique identifier.
   * 
   * 
   * @param authzToken
   * @param gatewayId
   * @param applicationModule
   */
  virtual void registerApplicationModule(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule& applicationModule) = 0;

  /**
   * Fetch a Application Module.
   * 
   * @param appModuleId
   *   The identifier for the requested application module
   * 
   * @return applicationModule
   *   Returns a application Module Object.
   * 
   * 
   * @param authzToken
   * @param appModuleId
   */
  virtual void getApplicationModule( ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appModuleId) = 0;

  /**
   * Update a Application Module.
   * 
   * @param appModuleId
   *   The identifier for the requested application module to be updated.
   * 
   * @param applicationModule
   *    Application Module Object created from the datamodel.
   * 
   * @return status
   *   Returns a success/failure of the update.
   * 
   * 
   * @param authzToken
   * @param appModuleId
   * @param applicationModule
   */
  virtual bool updateApplicationModule(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appModuleId, const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule& applicationModule) = 0;
  virtual void getAllAppModules(std::vector< ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId) = 0;

  /**
   * Delete a Application Module.
   * 
   * @param appModuleId
   *   The identifier for the requested application module to be deleted.
   * 
   * @return status
   *   Returns a success/failure of the deletion.
   * 
   * 
   * @param authzToken
   * @param appModuleId
   */
  virtual bool deleteApplicationModule(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appModuleId) = 0;

  /**
   * Register a Application Deployment.
   * 
   * @param applicationModule
   *    Application Module Object created from the datamodel.
   * 
   * @return appDeploymentId
   *   Returns a server-side generated airavata appDeployment globally unique identifier.
   * 
   * 
   * @param authzToken
   * @param gatewayId
   * @param applicationDeployment
   */
  virtual void registerApplicationDeployment(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription& applicationDeployment) = 0;

  /**
   * Fetch a Application Deployment.
   * 
   * @param appDeploymentId
   *   The identifier for the requested application module
   * 
   * @return applicationDeployment
   *   Returns a application Deployment Object.
   * 
   * 
   * @param authzToken
   * @param appDeploymentId
   */
  virtual void getApplicationDeployment( ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appDeploymentId) = 0;

  /**
   * Update a Application Deployment.
   * 
   * @param appDeploymentId
   *   The identifier for the requested application deployment to be updated.
   * 
   * @param appDeployment
   *    Application Deployment Object created from the datamodel.
   * 
   * @return status
   *   Returns a success/failure of the update.
   * 
   * 
   * @param authzToken
   * @param appDeploymentId
   * @param applicationDeployment
   */
  virtual bool updateApplicationDeployment(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appDeploymentId, const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription& applicationDeployment) = 0;

  /**
   * Delete a Application deployment.
   * 
   * @param appDeploymentId
   *   The identifier for the requested application deployment to be deleted.
   * 
   * @return status
   *   Returns a success/failure of the deletion.
   * 
   * 
   * @param authzToken
   * @param appDeploymentId
   */
  virtual bool deleteApplicationDeployment(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appDeploymentId) = 0;

  /**
   * Fetch all Application Deployment Descriptions.
   * 
   * @return list<applicationDeployment.
   *   Returns the list of all application Deployment Objects.
   * 
   * 
   * @param authzToken
   * @param gatewayId
   */
  virtual void getAllApplicationDeployments(std::vector< ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId) = 0;

  /**
   * Fetch a list of Deployed Compute Hosts.
   * 
   * @param appModuleId
   *   The identifier for the requested application module
   * 
   * @return list<string>
   *   Returns a list of Deployed Resources.
   * 
   * 
   * @param authzToken
   * @param appModuleId
   */
  virtual void getAppModuleDeployedResources(std::vector<std::string> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appModuleId) = 0;

  /**
   * Register a Application Interface.
   * 
   * @param applicationModule
   *    Application Module Object created from the datamodel.
   * 
   * @return appInterfaceId
   *   Returns a server-side generated airavata application interface globally unique identifier.
   * 
   * 
   * @param authzToken
   * @param gatewayId
   * @param applicationInterface
   */
  virtual void registerApplicationInterface(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const  ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription& applicationInterface) = 0;

  /**
   * Fetch a Application Interface.
   * 
   * @param appInterfaceId
   *   The identifier for the requested application module
   * 
   * @return applicationInterface
   *   Returns a application Interface Object.
   * 
   * 
   * 
   * @param authzToken
   * @param appInterfaceId
   */
  virtual void getApplicationInterface( ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appInterfaceId) = 0;

  /**
   * Update a Application Interface.
   * 
   * @param appInterfaceId
   *   The identifier for the requested application deployment to be updated.
   * 
   * @param appInterface
   *    Application Interface Object created from the datamodel.
   * 
   * @return status
   *   Returns a success/failure of the update.
   * 
   * 
   * 
   * @param authzToken
   * @param appInterfaceId
   * @param applicationInterface
   */
  virtual bool updateApplicationInterface(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appInterfaceId, const  ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription& applicationInterface) = 0;

  /**
   * Delete a Application Interface.
   * 
   * @param appInterfaceId
   *   The identifier for the requested application interface to be deleted.
   * 
   * @return status
   *   Returns a success/failure of the deletion.
   * 
   * 
   * 
   * @param authzToken
   * @param appInterfaceId
   */
  virtual bool deleteApplicationInterface(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appInterfaceId) = 0;

  /**
   * Fetch name and id of  Application Interface documents.
   * 
   * 
   * @return map<applicationId, applicationInterfaceNames>
   *   Returns a list of application interfaces with corresponsing id's
   * 
   * 
   * @param authzToken
   * @param gatewayId
   */
  virtual void getAllApplicationInterfaceNames(std::map<std::string, std::string> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId) = 0;

  /**
   * Fetch all Application Interface documents.
   * 
   * 
   * @return map<applicationId, applicationInterfaceNames>
   *   Returns a list of application interfaces documents
   * 
   * 
   * @param authzToken
   * @param gatewayId
   */
  virtual void getAllApplicationInterfaces(std::vector< ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId) = 0;

  /**
   * Fetch the list of Application Inputs.
   * 
   * @param appInterfaceId
   *   The identifier for the requested application interface
   * 
   * @return list<application_interface_model.InputDataObjectType>
   *   Returns a list of application inputs.
   * 
   * 
   * @param authzToken
   * @param appInterfaceId
   */
  virtual void getApplicationInputs(std::vector< ::apache::airavata::model::application::io::InputDataObjectType> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appInterfaceId) = 0;

  /**
   * Fetch the list of Application Outputs.
   * 
   * @param appInterfaceId
   *   The identifier for the requested application interface
   * 
   * @return list<application_interface_model.OutputDataObjectType>
   *   Returns a list of application outputs.
   * 
   * 
   * @param authzToken
   * @param appInterfaceId
   */
  virtual void getApplicationOutputs(std::vector< ::apache::airavata::model::application::io::OutputDataObjectType> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appInterfaceId) = 0;

  /**
   * Fetch a list of all deployed Compute Hosts for a given application interfaces.
   * 
   * @param appInterfaceId
   *   The identifier for the requested application interface
   * 
   * @return map<computeResourceId, computeResourceName>
   *   A map of registered compute resource id's and their corresponding hostnames.
   *    Deployments of each modules listed within the interfaces will be listed.
   * 
   * 
   * @param authzToken
   * @param appInterfaceId
   */
  virtual void getAvailableAppInterfaceComputeResources(std::map<std::string, std::string> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appInterfaceId) = 0;

  /**
   * Register a Compute Resource.
   * 
   * @param computeResourceDescription
   *    Compute Resource Object created from the datamodel.
   * 
   * @return computeResourceId
   *   Returns a server-side generated airavata compute resource globally unique identifier.
   * 
   * 
   * @param authzToken
   * @param computeResourceDescription
   */
  virtual void registerComputeResource(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const  ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription& computeResourceDescription) = 0;

  /**
   * Fetch the given Compute Resource.
   * 
   * @param computeResourceId
   *   The identifier for the requested compute resource
   * 
   * @return computeResourceDescription
   *    Compute Resource Object created from the datamodel..
   * 
   * 
   * @param authzToken
   * @param computeResourceId
   */
  virtual void getComputeResource( ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId) = 0;

  /**
   * Fetch all registered Compute Resources.
   * 
   * @return A map of registered compute resource id's and thier corresponding hostnames.
   *    Compute Resource Object created from the datamodel..
   * 
   * 
   * @param authzToken
   */
  virtual void getAllComputeResourceNames(std::map<std::string, std::string> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken) = 0;

  /**
   * Update a Compute Resource.
   * 
   * @param computeResourceId
   *   The identifier for the requested compute resource to be updated.
   * 
   * @param computeResourceDescription
   *    Compute Resource Object created from the datamodel.
   * 
   * @return status
   *   Returns a success/failure of the update.
   * 
   * 
   * @param authzToken
   * @param computeResourceId
   * @param computeResourceDescription
   */
  virtual bool updateComputeResource(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const  ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription& computeResourceDescription) = 0;

  /**
   * Delete a Compute Resource.
   * 
   * @param computeResourceId
   *   The identifier for the requested compute resource to be deleted.
   * 
   * @return status
   *   Returns a success/failure of the deletion.
   * 
   * 
   * @param authzToken
   * @param computeResourceId
   */
  virtual bool deleteComputeResource(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId) = 0;

  /**
   * Add a Local Job Submission details to a compute resource
   *  App catalog will return a jobSubmissionInterfaceId which will be added to the jobSubmissionInterfaces.
   * 
   * @param computeResourceId
   *   The identifier of the compute resource to which JobSubmission protocol to be added
   * 
   * @param priorityOrder
   *   Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.
   * 
   * @param localSubmission
   *   The LOCALSubmission object to be added to the resource.
   * 
   * @return status
   *   Returns the unique job submission id.
   * 
   * 
   * @param authzToken
   * @param computeResourceId
   * @param priorityOrder
   * @param localSubmission
   */
  virtual void addLocalSubmissionDetails(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission& localSubmission) = 0;

  /**
   * Update the given Local Job Submission details
   * 
   * @param jobSubmissionInterfaceId
   *   The identifier of the JobSubmission Interface to be updated.
   * 
   * @param localSubmission
   *   The LOCALSubmission object to be updated.
   * 
   * @return status
   *   Returns a success/failure of the deletion.
   * 
   * 
   * @param authzToken
   * @param jobSubmissionInterfaceId
   * @param localSubmission
   */
  virtual bool updateLocalSubmissionDetails(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& jobSubmissionInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission& localSubmission) = 0;

  /**
   * This method returns localJobSubmission object
   * @param jobSubmissionInterfaceId
   *   The identifier of the JobSubmission Interface to be retrieved.
   *  @return LOCALSubmission instance
   * 
   * 
   * @param authzToken
   * @param jobSubmissionId
   */
  virtual void getLocalJobSubmission( ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& jobSubmissionId) = 0;

  /**
   * Add a SSH Job Submission details to a compute resource
   *  App catalog will return a jobSubmissionInterfaceId which will be added to the jobSubmissionInterfaces.
   * 
   * @param computeResourceId
   *   The identifier of the compute resource to which JobSubmission protocol to be added
   * 
   * @param priorityOrder
   *   Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.
   * 
   * @param sshJobSubmission
   *   The SSHJobSubmission object to be added to the resource.
   * 
   * @return status
   *   Returns the unique job submission id.
   * 
   * 
   * @param authzToken
   * @param computeResourceId
   * @param priorityOrder
   * @param sshJobSubmission
   */
  virtual void addSSHJobSubmissionDetails(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission& sshJobSubmission) = 0;

  /**
   * Add a SSH_FORK Job Submission details to a compute resource
   *  App catalog will return a jobSubmissionInterfaceId which will be added to the jobSubmissionInterfaces.
   * 
   * @param computeResourceId
   *   The identifier of the compute resource to which JobSubmission protocol to be added
   * 
   * @param priorityOrder
   *   Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.
   * 
   * @param sshJobSubmission
   *   The SSHJobSubmission object to be added to the resource.
   * 
   * @return status
   *   Returns the unique job submission id.
   * 
   * 
   * @param authzToken
   * @param computeResourceId
   * @param priorityOrder
   * @param sshJobSubmission
   */
  virtual void addSSHForkJobSubmissionDetails(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission& sshJobSubmission) = 0;

  /**
   * This method returns SSHJobSubmission object
   * @param jobSubmissionInterfaceId
   *   The identifier of the JobSubmission Interface to be retrieved.
   *  @return SSHJobSubmission instance
   * 
   * 
   * @param authzToken
   * @param jobSubmissionId
   */
  virtual void getSSHJobSubmission( ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& jobSubmissionId) = 0;

  /**
   * Add a UNICORE Job Submission details to a compute resource
   *  App catalog will return a jobSubmissionInterfaceId which will be added to the jobSubmissionInterfaces.
   * 
   * @param computeResourceId
   *   The identifier of the compute resource to which JobSubmission protocol to be added
   * 
   * @param priorityOrder
   *   Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.
   * 
   * @param unicoreJobSubmission
   *   The UnicoreJobSubmission object to be added to the resource.
   * 
   * @return status
   *  Returns the unique job submission id.
   * 
   * 
   * @param authzToken
   * @param computeResourceId
   * @param priorityOrder
   * @param unicoreJobSubmission
   */
  virtual void addUNICOREJobSubmissionDetails(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission& unicoreJobSubmission) = 0;

  /**
   *   * This method returns UnicoreJobSubmission object
   *   * @param jobSubmissionInterfaceId
   *   *   The identifier of the JobSubmission Interface to be retrieved.
   *   *  @return UnicoreJobSubmission instance
   * *
   * 
   * @param authzToken
   * @param jobSubmissionId
   */
  virtual void getUnicoreJobSubmission( ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& jobSubmissionId) = 0;

  /**
   *    * Add a Cloud Job Submission details to a compute resource
   *    *  App catalog will return a jobSubmissionInterfaceId which will be added to the jobSubmissionInterfaces.
   *    *
   *    * @param computeResourceId
   *    *   The identifier of the compute resource to which JobSubmission protocol to be added
   *    *
   *    * @param priorityOrder
   *    *   Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.
   *    *
   *    * @param sshJobSubmission
   *    *   The SSHJobSubmission object to be added to the resource.
   *    *
   *    * @return status
   *    *   Returns the unique job submission id.
   * *
   * 
   * @param authzToken
   * @param computeResourceId
   * @param priorityOrder
   * @param cloudSubmission
   */
  virtual void addCloudJobSubmissionDetails(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission& cloudSubmission) = 0;

  /**
   *    * This method returns cloudJobSubmission object
   *    * @param jobSubmissionInterfaceI
   *        *   The identifier of the JobSubmission Interface to be retrieved.
   *    *  @return CloudJobSubmission instance
   * *
   * 
   * @param authzToken
   * @param jobSubmissionId
   */
  virtual void getCloudJobSubmission( ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& jobSubmissionId) = 0;

  /**
   * Update the given SSH Job Submission details
   * 
   * @param jobSubmissionInterfaceId
   *   The identifier of the JobSubmission Interface to be updated.
   * 
   * @param sshJobSubmission
   *   The SSHJobSubmission object to be updated.
   * 
   * @return status
   *   Returns a success/failure of the deletion.
   * 
   * 
   * @param authzToken
   * @param jobSubmissionInterfaceId
   * @param sshJobSubmission
   */
  virtual bool updateSSHJobSubmissionDetails(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& jobSubmissionInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission& sshJobSubmission) = 0;

  /**
   * Update the cloud Job Submission details
   * 
   * @param jobSubmissionInterfaceId
   *   The identifier of the JobSubmission Interface to be updated.
   * 
   * @param cloudJobSubmission
   *   The CloudJobSubmission object to be updated.
   * 
   * @return status
   *   Returns a success/failure of the deletion.
   * 
   * 
   * @param authzToken
   * @param jobSubmissionInterfaceId
   * @param sshJobSubmission
   */
  virtual bool updateCloudJobSubmissionDetails(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& jobSubmissionInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission& sshJobSubmission) = 0;
  virtual bool updateUnicoreJobSubmissionDetails(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& jobSubmissionInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission& unicoreJobSubmission) = 0;

  /**
   * Add a Local data movement details to a compute resource
   *  App catalog will return a dataMovementInterfaceId which will be added to the dataMovementInterfaces.
   * 
   * @param computeResourceId
   *   The identifier of the compute resource to which JobSubmission protocol to be added
   * 
   * @param priorityOrder
   *   Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.
   * 
   * @param localDataMovement
   *   The LOCALDataMovement object to be added to the resource.
   * 
   * @return status
   *   Returns the unique job submission id.
   * 
   * 
   * @param authzToken
   * @param computeResourceId
   * @param priorityOrder
   * @param localDataMovement
   */
  virtual void addLocalDataMovementDetails(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement& localDataMovement) = 0;

  /**
   * Update the given Local data movement details
   * 
   * @param dataMovementInterfaceId
   *   The identifier of the data movement Interface to be updated.
   * 
   * @param localDataMovement
   *   The LOCALDataMovement object to be updated.
   * 
   * @return status
   *   Returns a success/failure of the update.
   * 
   * 
   * @param authzToken
   * @param dataMovementInterfaceId
   * @param localDataMovement
   */
  virtual bool updateLocalDataMovementDetails(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& dataMovementInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement& localDataMovement) = 0;

  /**
   *         * This method returns local datamovement object
   *         * @param dataMovementId
   *         *   The identifier of the datamovement Interface to be retrieved.
   *         *  @return LOCALDataMovement instance
   * *
   * 
   * @param authzToken
   * @param dataMovementId
   */
  virtual void getLocalDataMovement( ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& dataMovementId) = 0;

  /**
   * Add a SCP data movement details to a compute resource
   *  App catalog will return a dataMovementInterfaceId which will be added to the dataMovementInterfaces.
   * 
   * @param computeResourceId
   *   The identifier of the compute resource to which JobSubmission protocol to be added
   * 
   * @param priorityOrder
   *   Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.
   * 
   * @param scpDataMovement
   *   The SCPDataMovement object to be added to the resource.
   * 
   * @return status
   *   Returns the unique job submission id.
   * 
   * 
   * @param authzToken
   * @param computeResourceId
   * @param priorityOrder
   * @param scpDataMovement
   */
  virtual void addSCPDataMovementDetails(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement& scpDataMovement) = 0;

  /**
   * Update the given scp data movement details
   *  App catalog will return a dataMovementInterfaceId which will be added to the dataMovementInterfaces.
   * 
   * @param dataMovementInterfaceId
   *   The identifier of the data movement Interface to be updated.
   * 
   * @param scpDataMovement
   *   The SCPDataMovement object to be updated.
   * 
   * @return status
   *   Returns a success/failure of the update.
   * 
   * 
   * @param authzToken
   * @param dataMovementInterfaceId
   * @param scpDataMovement
   */
  virtual bool updateSCPDataMovementDetails(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& dataMovementInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement& scpDataMovement) = 0;

  /**
   *   * This method returns SCP datamovement object
   *   * @param dataMovementId
   *      *   The identifier of the datamovement Interface to be retrieved.
   *      *  @return SCPDataMovement instance
   * *
   * 
   * @param authzToken
   * @param dataMovementId
   */
  virtual void getSCPDataMovement( ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& dataMovementId) = 0;
  virtual void addUnicoreDataMovementDetails(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement& unicoreDataMovement) = 0;
  virtual bool updateUnicoreDataMovementDetails(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& dataMovementInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement& unicoreDataMovement) = 0;
  virtual void getUnicoreDataMovement( ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& dataMovementId) = 0;

  /**
   * Add a GridFTP data movement details to a compute resource
   *  App catalog will return a dataMovementInterfaceId which will be added to the dataMovementInterfaces.
   * 
   * @param computeResourceId
   *   The identifier of the compute resource to which JobSubmission protocol to be added
   * 
   * @param priorityOrder
   *   Specify the priority of this job manager. If this is the only jobmanager, the priority can be zero.
   * 
   * @param gridFTPDataMovement
   *   The GridFTPDataMovement object to be added to the resource.
   * 
   * @return status
   *   Returns the unique job submission id.
   * 
   * 
   * @param authzToken
   * @param computeResourceId
   * @param priorityOrder
   * @param gridFTPDataMovement
   */
  virtual void addGridFTPDataMovementDetails(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement& gridFTPDataMovement) = 0;

  /**
   * Update the given GridFTP data movement details to a compute resource
   *  App catalog will return a dataMovementInterfaceId which will be added to the dataMovementInterfaces.
   * 
   * @param dataMovementInterfaceId
   *   The identifier of the data movement Interface to be updated.
   * 
   * @param gridFTPDataMovement
   *   The GridFTPDataMovement object to be updated.
   * 
   * @return status
   *   Returns a success/failure of the updation.
   * 
   * 
   * @param authzToken
   * @param dataMovementInterfaceId
   * @param gridFTPDataMovement
   */
  virtual bool updateGridFTPDataMovementDetails(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& dataMovementInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement& gridFTPDataMovement) = 0;

  /**
   *   * This method returns GridFTP datamovement object
   *   * @param dataMovementId
   *      *   The identifier of the datamovement Interface to be retrieved.
   *   *  @return GridFTPDataMovement instance
   * *
   * 
   * @param authzToken
   * @param dataMovementId
   */
  virtual void getGridFTPDataMovement( ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& dataMovementId) = 0;

  /**
   * Change the priority of a given job submisison interface
   * 
   * @param jobSubmissionInterfaceId
   *   The identifier of the JobSubmission Interface to be changed
   * 
   * @param priorityOrder
   *   The new priority of the job manager interface.
   * 
   * @return status
   *   Returns a success/failure of the change.
   * 
   * 
   * @param authzToken
   * @param jobSubmissionInterfaceId
   * @param newPriorityOrder
   */
  virtual bool changeJobSubmissionPriority(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& jobSubmissionInterfaceId, const int32_t newPriorityOrder) = 0;

  /**
   * Change the priority of a given data movement interface
   * 
   * @param dataMovementInterfaceId
   *   The identifier of the DataMovement Interface to be changed
   * 
   * @param priorityOrder
   *   The new priority of the data movement interface.
   * 
   * @return status
   *   Returns a success/failure of the change.
   * 
   * 
   * @param authzToken
   * @param dataMovementInterfaceId
   * @param newPriorityOrder
   */
  virtual bool changeDataMovementPriority(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& dataMovementInterfaceId, const int32_t newPriorityOrder) = 0;

  /**
   * Change the priorities of a given set of job submission interfaces
   * 
   * @param jobSubmissionPriorityMap
   *   A Map of identifiers of the JobSubmission Interfaces and thier associated priorities to be set.
   * 
   * @return status
   *   Returns a success/failure of the changes.
   * 
   * 
   * @param authzToken
   * @param jobSubmissionPriorityMap
   */
  virtual bool changeJobSubmissionPriorities(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::map<std::string, int32_t> & jobSubmissionPriorityMap) = 0;

  /**
   * Change the priorities of a given set of data movement interfaces
   * 
   * @param dataMovementPriorityMap
   *   A Map of identifiers of the DataMovement Interfaces and thier associated priorities to be set.
   * 
   * @return status
   *   Returns a success/failure of the changes.
   * 
   * 
   * @param authzToken
   * @param dataMovementPriorityMap
   */
  virtual bool changeDataMovementPriorities(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::map<std::string, int32_t> & dataMovementPriorityMap) = 0;

  /**
   * Delete a given job submisison interface
   * 
   * @param jobSubmissionInterfaceId
   *   The identifier of the JobSubmission Interface to be changed
   * 
   * @return status
   *   Returns a success/failure of the deletion.
   * 
   * 
   * @param authzToken
   * @param computeResourceId
   * @param jobSubmissionInterfaceId
   */
  virtual bool deleteJobSubmissionInterface(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const std::string& jobSubmissionInterfaceId) = 0;

  /**
   * Delete a given data movement interface
   * 
   * @param dataMovementInterfaceId
   *   The identifier of the DataMovement Interface to be changed
   * 
   * @return status
   *   Returns a success/failure of the deletion.
   * 
   * 
   * @param authzToken
   * @param computeResourceId
   * @param dataMovementInterfaceId
   */
  virtual bool deleteDataMovementInterface(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const std::string& dataMovementInterfaceId) = 0;
  virtual void registerResourceJobManager(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const  ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager& resourceJobManager) = 0;
  virtual bool updateResourceJobManager(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& resourceJobManagerId, const  ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager& updatedResourceJobManager) = 0;
  virtual void getResourceJobManager( ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& resourceJobManagerId) = 0;
  virtual bool deleteResourceJobManager(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& resourceJobManagerId) = 0;
  virtual bool deleteBatchQueue(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const std::string& queueName) = 0;

  /**
   * Register a Gateway Resource Profile.
   * 
   * @param gatewayResourceProfile
   *    Gateway Resource Profile Object.
   *    The GatewayID should be obtained from Airavata gateway registration and passed to register a corresponding
   *      resource profile.
   * 
   * @return status
   *   Returns a success/failure of the update.
   * 
   * 
   * @param authzToken
   * @param gatewayResourceProfile
   */
  virtual void registerGatewayResourceProfile(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const  ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile& gatewayResourceProfile) = 0;

  /**
   * Fetch the given Gateway Resource Profile.
   * 
   * @param gatewayID
   *   The identifier for the requested gateway resource
   * 
   * @return gatewayResourceProfile
   *    Gateway Resource Profile Object.
   * 
   * 
   * @param authzToken
   * @param gatewayID
   */
  virtual void getGatewayResourceProfile( ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayID) = 0;

  /**
   * Update a Gateway Resource Profile.
   * 
   * @param gatewayID
   *   The identifier for the requested gateway resource to be updated.
   * 
   * @param gatewayResourceProfile
   *    Gateway Resource Profile Object.
   * 
   * @return status
   *   Returns a success/failure of the update.
   * 
   * 
   * @param authzToken
   * @param gatewayID
   * @param gatewayResourceProfile
   */
  virtual bool updateGatewayResourceProfile(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayID, const  ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile& gatewayResourceProfile) = 0;

  /**
   * Delete the given Gateway Resource Profile.
   * 
   * @param gatewayID
   *   The identifier for the requested gateway resource to be deleted.
   * 
   * @return status
   *   Returns a success/failure of the deletion.
   * 
   * 
   * @param authzToken
   * @param gatewayID
   */
  virtual bool deleteGatewayResourceProfile(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayID) = 0;

  /**
   * Add a Compute Resource Preference to a registered gateway profile.
   * 
   * @param gatewayID
   *   The identifier for the gateway profile to be added.
   * 
   * @param computeResourceId
   *   Preferences related to a particular compute resource
   * 
   * @param computeResourcePreference
   *   The ComputeResourcePreference object to be added to the resource profile.
   * 
   * @return status
   *   Returns a success/failure of the addition. If a profile already exists, this operation will fail.
   *    Instead an update should be used.
   * 
   * 
   * @param authzToken
   * @param gatewayID
   * @param computeResourceId
   * @param computeResourcePreference
   */
  virtual bool addGatewayComputeResourcePreference(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayID, const std::string& computeResourceId, const  ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference& computeResourcePreference) = 0;

  /**
   * Fetch a Compute Resource Preference of a registered gateway profile.
   * 
   * @param gatewayID
   *   The identifier for the gateway profile to be requested
   * 
   * @param computeResourceId
   *   Preferences related to a particular compute resource
   * 
   * @return computeResourcePreference
   *   Returns the ComputeResourcePreference object.
   * 
   * 
   * @param authzToken
   * @param gatewayID
   * @param computeResourceId
   */
  virtual void getGatewayComputeResourcePreference( ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayID, const std::string& computeResourceId) = 0;

  /**
   * Fetch all Compute Resource Preferences of a registered gateway profile.
   * 
   * @param gatewayID
   *   The identifier for the gateway profile to be requested
   * 
   * @return computeResourcePreference
   *   Returns the ComputeResourcePreference object.
   * 
   * 
   * @param authzToken
   * @param gatewayID
   */
  virtual void getAllGatewayComputeResourcePreferences(std::vector< ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayID) = 0;

  /**
   * Fetch all gateway profiles registered
   * 
   * 
   * @param authzToken
   */
  virtual void getAllGatewayComputeResources(std::vector< ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken) = 0;

  /**
   * Update a Compute Resource Preference to a registered gateway profile.
   * 
   * @param gatewayID
   *   The identifier for the gateway profile to be updated.
   * 
   * @param computeResourceId
   *   Preferences related to a particular compute resource
   * 
   * @param computeResourcePreference
   *   The ComputeResourcePreference object to be updated to the resource profile.
   * 
   * @return status
   *   Returns a success/failure of the updation.
   * 
   * 
   * @param authzToken
   * @param gatewayID
   * @param computeResourceId
   * @param computeResourcePreference
   */
  virtual bool updateGatewayComputeResourcePreference(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayID, const std::string& computeResourceId, const  ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference& computeResourcePreference) = 0;

  /**
   * Delete the Compute Resource Preference of a registered gateway profile.
   * 
   * @param gatewayID
   *   The identifier for the gateway profile to be deleted.
   * 
   * @param computeResourceId
   *   Preferences related to a particular compute resource
   * 
   * @return status
   *   Returns a success/failure of the deletion.
   * 
   * 
   * @param authzToken
   * @param gatewayID
   * @param computeResourceId
   */
  virtual bool deleteGatewayComputeResourcePreference(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayID, const std::string& computeResourceId) = 0;
  virtual void getAllWorkflows(std::vector<std::string> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId) = 0;
  virtual void getWorkflow( ::Workflow& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& workflowTemplateId) = 0;
  virtual void deleteWorkflow(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& workflowTemplateId) = 0;
  virtual void registerWorkflow(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const  ::Workflow& workflow) = 0;
  virtual void updateWorkflow(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& workflowTemplateId, const  ::Workflow& workflow) = 0;
  virtual void getWorkflowTemplateId(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& workflowName) = 0;
  virtual bool isWorkflowExistWithName(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& workflowName) = 0;
};

class AiravataIfFactory {
 public:
  typedef AiravataIf Handler;

  virtual ~AiravataIfFactory() {}

  virtual AiravataIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AiravataIf* /* handler */) = 0;
};

class AiravataIfSingletonFactory : virtual public AiravataIfFactory {
 public:
  AiravataIfSingletonFactory(const boost::shared_ptr<AiravataIf>& iface) : iface_(iface) {}
  virtual ~AiravataIfSingletonFactory() {}

  virtual AiravataIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AiravataIf* /* handler */) {}

 protected:
  boost::shared_ptr<AiravataIf> iface_;
};

class AiravataNull : virtual public AiravataIf {
 public:
  virtual ~AiravataNull() {}
  void getAPIVersion(std::string& /* _return */) {
    return;
  }
  void addGateway(std::string& /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const  ::apache::airavata::model::workspace::Gateway& /* gateway */) {
    return;
  }
  void updateGateway(const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* gatewayId */, const  ::apache::airavata::model::workspace::Gateway& /* updatedGateway */) {
    return;
  }
  void getGateway( ::apache::airavata::model::workspace::Gateway& /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* gatewayId */) {
    return;
  }
  bool deleteGateway(const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* gatewayId */) {
    bool _return = false;
    return _return;
  }
  void getAllGateways(std::vector< ::apache::airavata::model::workspace::Gateway> & /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */) {
    return;
  }
  bool isGatewayExist(const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* gatewayId */) {
    bool _return = false;
    return _return;
  }
  void generateAndRegisterSSHKeys(std::string& /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* gatewayId */, const std::string& /* userName */) {
    return;
  }
  void getSSHPubKey(std::string& /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* airavataCredStoreToken */, const std::string& /* gatewayId */) {
    return;
  }
  void getAllUserSSHPubKeys(std::map<std::string, std::string> & /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* userName */) {
    return;
  }
  void createProject(std::string& /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* gatewayId */, const  ::apache::airavata::model::workspace::Project& /* project */) {
    return;
  }
  void updateProject(const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* projectId */, const  ::apache::airavata::model::workspace::Project& /* updatedProject */) {
    return;
  }
  void getProject( ::apache::airavata::model::workspace::Project& /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* projectId */) {
    return;
  }
  bool deleteProject(const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* projectId */) {
    bool _return = false;
    return _return;
  }
  void getUserProjects(std::vector< ::apache::airavata::model::workspace::Project> & /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* gatewayId */, const std::string& /* userName */, const int32_t /* limit */, const int32_t /* offset */) {
    return;
  }
  void searchProjectsByProjectName(std::vector< ::apache::airavata::model::workspace::Project> & /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* gatewayId */, const std::string& /* userName */, const std::string& /* projectName */, const int32_t /* limit */, const int32_t /* offset */) {
    return;
  }
  void searchProjectsByProjectDesc(std::vector< ::apache::airavata::model::workspace::Project> & /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* gatewayId */, const std::string& /* userName */, const std::string& /* description */, const int32_t /* limit */, const int32_t /* offset */) {
    return;
  }
  void searchExperimentsByName(std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel> & /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* gatewayId */, const std::string& /* userName */, const std::string& /* expName */, const int32_t /* limit */, const int32_t /* offset */) {
    return;
  }
  void searchExperimentsByDesc(std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel> & /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* gatewayId */, const std::string& /* userName */, const std::string& /* description */, const int32_t /* limit */, const int32_t /* offset */) {
    return;
  }
  void searchExperimentsByApplication(std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel> & /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* gatewayId */, const std::string& /* userName */, const std::string& /* applicationId */, const int32_t /* limit */, const int32_t /* offset */) {
    return;
  }
  void searchExperimentsByStatus(std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel> & /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* gatewayId */, const std::string& /* userName */, const  ::apache::airavata::model::status::ExperimentState::type /* experimentState */, const int32_t /* limit */, const int32_t /* offset */) {
    return;
  }
  void searchExperimentsByCreationTime(std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel> & /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* gatewayId */, const std::string& /* userName */, const int64_t /* fromTime */, const int64_t /* toTime */, const int32_t /* limit */, const int32_t /* offset */) {
    return;
  }
  void searchExperiments(std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel> & /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* gatewayId */, const std::string& /* userName */, const std::map< ::apache::airavata::model::experiment::ExperimentSearchFields::type, std::string> & /* filters */, const int32_t /* limit */, const int32_t /* offset */) {
    return;
  }
  void getExperimentStatistics( ::apache::airavata::model::experiment::ExperimentStatistics& /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* gatewayId */, const int64_t /* fromTime */, const int64_t /* toTime */) {
    return;
  }
  void getExperimentsInProject(std::vector< ::apache::airavata::model::experiment::ExperimentModel> & /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* projectId */, const int32_t /* limit */, const int32_t /* offset */) {
    return;
  }
  void getUserExperiments(std::vector< ::apache::airavata::model::experiment::ExperimentModel> & /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* gatewayId */, const std::string& /* userName */, const int32_t /* limit */, const int32_t /* offset */) {
    return;
  }
  void createExperiment(std::string& /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* gatewayId */, const  ::apache::airavata::model::experiment::ExperimentModel& /* experiment */) {
    return;
  }
  void getExperiment( ::apache::airavata::model::experiment::ExperimentModel& /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* airavataExperimentId */) {
    return;
  }
  void updateExperiment(const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* airavataExperimentId */, const  ::apache::airavata::model::experiment::ExperimentModel& /* experiment */) {
    return;
  }
  void updateExperimentConfiguration(const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* airavataExperimentId */, const  ::apache::airavata::model::experiment::UserConfigurationDataModel& /* userConfiguration */) {
    return;
  }
  void updateResourceScheduleing(const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* airavataExperimentId */, const  ::apache::airavata::model::scheduling::ComputationalResourceSchedulingModel& /* resourceScheduling */) {
    return;
  }
  bool validateExperiment(const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* airavataExperimentId */) {
    bool _return = false;
    return _return;
  }
  void launchExperiment(const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* airavataExperimentId */, const std::string& /* airavataCredStoreToken */) {
    return;
  }
  void getExperimentStatus( ::apache::airavata::model::status::ExperimentStatus& /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* airavataExperimentId */) {
    return;
  }
  void getExperimentOutputs(std::vector< ::apache::airavata::model::application::io::OutputDataObjectType> & /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* airavataExperimentId */) {
    return;
  }
  void getIntermediateOutputs(std::vector< ::apache::airavata::model::application::io::OutputDataObjectType> & /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* airavataExperimentId */) {
    return;
  }
  void getJobStatuses(std::map<std::string,  ::apache::airavata::model::status::JobStatus> & /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* airavataExperimentId */) {
    return;
  }
  void getJobDetails(std::vector< ::apache::airavata::model::job::JobModel> & /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* airavataExperimentId */) {
    return;
  }
  void cloneExperiment(std::string& /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* existingExperimentID */, const std::string& /* newExperimentName */) {
    return;
  }
  void terminateExperiment(const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* airavataExperimentId */, const std::string& /* tokenId */) {
    return;
  }
  void registerApplicationModule(std::string& /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* gatewayId */, const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule& /* applicationModule */) {
    return;
  }
  void getApplicationModule( ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule& /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* appModuleId */) {
    return;
  }
  bool updateApplicationModule(const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* appModuleId */, const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule& /* applicationModule */) {
    bool _return = false;
    return _return;
  }
  void getAllAppModules(std::vector< ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule> & /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* gatewayId */) {
    return;
  }
  bool deleteApplicationModule(const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* appModuleId */) {
    bool _return = false;
    return _return;
  }
  void registerApplicationDeployment(std::string& /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* gatewayId */, const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription& /* applicationDeployment */) {
    return;
  }
  void getApplicationDeployment( ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription& /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* appDeploymentId */) {
    return;
  }
  bool updateApplicationDeployment(const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* appDeploymentId */, const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription& /* applicationDeployment */) {
    bool _return = false;
    return _return;
  }
  bool deleteApplicationDeployment(const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* appDeploymentId */) {
    bool _return = false;
    return _return;
  }
  void getAllApplicationDeployments(std::vector< ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription> & /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* gatewayId */) {
    return;
  }
  void getAppModuleDeployedResources(std::vector<std::string> & /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* appModuleId */) {
    return;
  }
  void registerApplicationInterface(std::string& /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* gatewayId */, const  ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription& /* applicationInterface */) {
    return;
  }
  void getApplicationInterface( ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription& /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* appInterfaceId */) {
    return;
  }
  bool updateApplicationInterface(const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* appInterfaceId */, const  ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription& /* applicationInterface */) {
    bool _return = false;
    return _return;
  }
  bool deleteApplicationInterface(const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* appInterfaceId */) {
    bool _return = false;
    return _return;
  }
  void getAllApplicationInterfaceNames(std::map<std::string, std::string> & /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* gatewayId */) {
    return;
  }
  void getAllApplicationInterfaces(std::vector< ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription> & /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* gatewayId */) {
    return;
  }
  void getApplicationInputs(std::vector< ::apache::airavata::model::application::io::InputDataObjectType> & /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* appInterfaceId */) {
    return;
  }
  void getApplicationOutputs(std::vector< ::apache::airavata::model::application::io::OutputDataObjectType> & /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* appInterfaceId */) {
    return;
  }
  void getAvailableAppInterfaceComputeResources(std::map<std::string, std::string> & /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* appInterfaceId */) {
    return;
  }
  void registerComputeResource(std::string& /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const  ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription& /* computeResourceDescription */) {
    return;
  }
  void getComputeResource( ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription& /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* computeResourceId */) {
    return;
  }
  void getAllComputeResourceNames(std::map<std::string, std::string> & /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */) {
    return;
  }
  bool updateComputeResource(const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* computeResourceId */, const  ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription& /* computeResourceDescription */) {
    bool _return = false;
    return _return;
  }
  bool deleteComputeResource(const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* computeResourceId */) {
    bool _return = false;
    return _return;
  }
  void addLocalSubmissionDetails(std::string& /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* computeResourceId */, const int32_t /* priorityOrder */, const  ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission& /* localSubmission */) {
    return;
  }
  bool updateLocalSubmissionDetails(const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* jobSubmissionInterfaceId */, const  ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission& /* localSubmission */) {
    bool _return = false;
    return _return;
  }
  void getLocalJobSubmission( ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission& /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* jobSubmissionId */) {
    return;
  }
  void addSSHJobSubmissionDetails(std::string& /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* computeResourceId */, const int32_t /* priorityOrder */, const  ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission& /* sshJobSubmission */) {
    return;
  }
  void addSSHForkJobSubmissionDetails(std::string& /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* computeResourceId */, const int32_t /* priorityOrder */, const  ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission& /* sshJobSubmission */) {
    return;
  }
  void getSSHJobSubmission( ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission& /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* jobSubmissionId */) {
    return;
  }
  void addUNICOREJobSubmissionDetails(std::string& /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* computeResourceId */, const int32_t /* priorityOrder */, const  ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission& /* unicoreJobSubmission */) {
    return;
  }
  void getUnicoreJobSubmission( ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission& /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* jobSubmissionId */) {
    return;
  }
  void addCloudJobSubmissionDetails(std::string& /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* computeResourceId */, const int32_t /* priorityOrder */, const  ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission& /* cloudSubmission */) {
    return;
  }
  void getCloudJobSubmission( ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission& /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* jobSubmissionId */) {
    return;
  }
  bool updateSSHJobSubmissionDetails(const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* jobSubmissionInterfaceId */, const  ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission& /* sshJobSubmission */) {
    bool _return = false;
    return _return;
  }
  bool updateCloudJobSubmissionDetails(const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* jobSubmissionInterfaceId */, const  ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission& /* sshJobSubmission */) {
    bool _return = false;
    return _return;
  }
  bool updateUnicoreJobSubmissionDetails(const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* jobSubmissionInterfaceId */, const  ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission& /* unicoreJobSubmission */) {
    bool _return = false;
    return _return;
  }
  void addLocalDataMovementDetails(std::string& /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* computeResourceId */, const int32_t /* priorityOrder */, const  ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement& /* localDataMovement */) {
    return;
  }
  bool updateLocalDataMovementDetails(const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* dataMovementInterfaceId */, const  ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement& /* localDataMovement */) {
    bool _return = false;
    return _return;
  }
  void getLocalDataMovement( ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement& /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* dataMovementId */) {
    return;
  }
  void addSCPDataMovementDetails(std::string& /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* computeResourceId */, const int32_t /* priorityOrder */, const  ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement& /* scpDataMovement */) {
    return;
  }
  bool updateSCPDataMovementDetails(const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* dataMovementInterfaceId */, const  ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement& /* scpDataMovement */) {
    bool _return = false;
    return _return;
  }
  void getSCPDataMovement( ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement& /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* dataMovementId */) {
    return;
  }
  void addUnicoreDataMovementDetails(std::string& /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* computeResourceId */, const int32_t /* priorityOrder */, const  ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement& /* unicoreDataMovement */) {
    return;
  }
  bool updateUnicoreDataMovementDetails(const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* dataMovementInterfaceId */, const  ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement& /* unicoreDataMovement */) {
    bool _return = false;
    return _return;
  }
  void getUnicoreDataMovement( ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement& /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* dataMovementId */) {
    return;
  }
  void addGridFTPDataMovementDetails(std::string& /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* computeResourceId */, const int32_t /* priorityOrder */, const  ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement& /* gridFTPDataMovement */) {
    return;
  }
  bool updateGridFTPDataMovementDetails(const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* dataMovementInterfaceId */, const  ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement& /* gridFTPDataMovement */) {
    bool _return = false;
    return _return;
  }
  void getGridFTPDataMovement( ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement& /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* dataMovementId */) {
    return;
  }
  bool changeJobSubmissionPriority(const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* jobSubmissionInterfaceId */, const int32_t /* newPriorityOrder */) {
    bool _return = false;
    return _return;
  }
  bool changeDataMovementPriority(const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* dataMovementInterfaceId */, const int32_t /* newPriorityOrder */) {
    bool _return = false;
    return _return;
  }
  bool changeJobSubmissionPriorities(const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::map<std::string, int32_t> & /* jobSubmissionPriorityMap */) {
    bool _return = false;
    return _return;
  }
  bool changeDataMovementPriorities(const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::map<std::string, int32_t> & /* dataMovementPriorityMap */) {
    bool _return = false;
    return _return;
  }
  bool deleteJobSubmissionInterface(const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* computeResourceId */, const std::string& /* jobSubmissionInterfaceId */) {
    bool _return = false;
    return _return;
  }
  bool deleteDataMovementInterface(const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* computeResourceId */, const std::string& /* dataMovementInterfaceId */) {
    bool _return = false;
    return _return;
  }
  void registerResourceJobManager(std::string& /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const  ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager& /* resourceJobManager */) {
    return;
  }
  bool updateResourceJobManager(const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* resourceJobManagerId */, const  ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager& /* updatedResourceJobManager */) {
    bool _return = false;
    return _return;
  }
  void getResourceJobManager( ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager& /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* resourceJobManagerId */) {
    return;
  }
  bool deleteResourceJobManager(const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* resourceJobManagerId */) {
    bool _return = false;
    return _return;
  }
  bool deleteBatchQueue(const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* computeResourceId */, const std::string& /* queueName */) {
    bool _return = false;
    return _return;
  }
  void registerGatewayResourceProfile(std::string& /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const  ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile& /* gatewayResourceProfile */) {
    return;
  }
  void getGatewayResourceProfile( ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile& /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* gatewayID */) {
    return;
  }
  bool updateGatewayResourceProfile(const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* gatewayID */, const  ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile& /* gatewayResourceProfile */) {
    bool _return = false;
    return _return;
  }
  bool deleteGatewayResourceProfile(const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* gatewayID */) {
    bool _return = false;
    return _return;
  }
  bool addGatewayComputeResourcePreference(const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* gatewayID */, const std::string& /* computeResourceId */, const  ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference& /* computeResourcePreference */) {
    bool _return = false;
    return _return;
  }
  void getGatewayComputeResourcePreference( ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference& /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* gatewayID */, const std::string& /* computeResourceId */) {
    return;
  }
  void getAllGatewayComputeResourcePreferences(std::vector< ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference> & /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* gatewayID */) {
    return;
  }
  void getAllGatewayComputeResources(std::vector< ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile> & /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */) {
    return;
  }
  bool updateGatewayComputeResourcePreference(const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* gatewayID */, const std::string& /* computeResourceId */, const  ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference& /* computeResourcePreference */) {
    bool _return = false;
    return _return;
  }
  bool deleteGatewayComputeResourcePreference(const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* gatewayID */, const std::string& /* computeResourceId */) {
    bool _return = false;
    return _return;
  }
  void getAllWorkflows(std::vector<std::string> & /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* gatewayId */) {
    return;
  }
  void getWorkflow( ::Workflow& /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* workflowTemplateId */) {
    return;
  }
  void deleteWorkflow(const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* workflowTemplateId */) {
    return;
  }
  void registerWorkflow(std::string& /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* gatewayId */, const  ::Workflow& /* workflow */) {
    return;
  }
  void updateWorkflow(const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* workflowTemplateId */, const  ::Workflow& /* workflow */) {
    return;
  }
  void getWorkflowTemplateId(std::string& /* _return */, const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* workflowName */) {
    return;
  }
  bool isWorkflowExistWithName(const  ::apache::airavata::model::security::AuthzToken& /* authzToken */, const std::string& /* workflowName */) {
    bool _return = false;
    return _return;
  }
};


class Airavata_getAPIVersion_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  Airavata_getAPIVersion_args(const Airavata_getAPIVersion_args&);
  Airavata_getAPIVersion_args& operator=(const Airavata_getAPIVersion_args&);
  Airavata_getAPIVersion_args() {
  }

  virtual ~Airavata_getAPIVersion_args() throw();

  bool operator == (const Airavata_getAPIVersion_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Airavata_getAPIVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAPIVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAPIVersion_args& obj);
};


class Airavata_getAPIVersion_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~Airavata_getAPIVersion_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAPIVersion_pargs& obj);
};

typedef struct _Airavata_getAPIVersion_result__isset {
  _Airavata_getAPIVersion_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getAPIVersion_result__isset;

class Airavata_getAPIVersion_result {
 public:

  static const char* ascii_fingerprint; // = "21BF57A9FE5AAA661540804D4FB9F023";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xBF,0x57,0xA9,0xFE,0x5A,0xAA,0x66,0x15,0x40,0x80,0x4D,0x4F,0xB9,0xF0,0x23};

  Airavata_getAPIVersion_result(const Airavata_getAPIVersion_result&);
  Airavata_getAPIVersion_result& operator=(const Airavata_getAPIVersion_result&);
  Airavata_getAPIVersion_result() : success() {
  }

  virtual ~Airavata_getAPIVersion_result() throw();
  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getAPIVersion_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_getAPIVersion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAPIVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAPIVersion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAPIVersion_result& obj);
};

typedef struct _Airavata_getAPIVersion_presult__isset {
  _Airavata_getAPIVersion_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getAPIVersion_presult__isset;

class Airavata_getAPIVersion_presult {
 public:

  static const char* ascii_fingerprint; // = "21BF57A9FE5AAA661540804D4FB9F023";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xBF,0x57,0xA9,0xFE,0x5A,0xAA,0x66,0x15,0x40,0x80,0x4D,0x4F,0xB9,0xF0,0x23};


  virtual ~Airavata_getAPIVersion_presult() throw();
  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getAPIVersion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAPIVersion_presult& obj);
};


class Airavata_addGateway_args {
 public:

  static const char* ascii_fingerprint; // = "04DA9961C72375F564BB2C724C51FAF2";
  static const uint8_t binary_fingerprint[16]; // = {0x04,0xDA,0x99,0x61,0xC7,0x23,0x75,0xF5,0x64,0xBB,0x2C,0x72,0x4C,0x51,0xFA,0xF2};

  Airavata_addGateway_args(const Airavata_addGateway_args&);
  Airavata_addGateway_args& operator=(const Airavata_addGateway_args&);
  Airavata_addGateway_args() {
  }

  virtual ~Airavata_addGateway_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
   ::apache::airavata::model::workspace::Gateway gateway;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_gateway(const  ::apache::airavata::model::workspace::Gateway& val);

  bool operator == (const Airavata_addGateway_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(gateway == rhs.gateway))
      return false;
    return true;
  }
  bool operator != (const Airavata_addGateway_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addGateway_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_addGateway_args& obj);
};


class Airavata_addGateway_pargs {
 public:

  static const char* ascii_fingerprint; // = "04DA9961C72375F564BB2C724C51FAF2";
  static const uint8_t binary_fingerprint[16]; // = {0x04,0xDA,0x99,0x61,0xC7,0x23,0x75,0xF5,0x64,0xBB,0x2C,0x72,0x4C,0x51,0xFA,0xF2};


  virtual ~Airavata_addGateway_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const  ::apache::airavata::model::workspace::Gateway* gateway;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_addGateway_pargs& obj);
};

typedef struct _Airavata_addGateway_result__isset {
  _Airavata_addGateway_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_addGateway_result__isset;

class Airavata_addGateway_result {
 public:

  static const char* ascii_fingerprint; // = "21BF57A9FE5AAA661540804D4FB9F023";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xBF,0x57,0xA9,0xFE,0x5A,0xAA,0x66,0x15,0x40,0x80,0x4D,0x4F,0xB9,0xF0,0x23};

  Airavata_addGateway_result(const Airavata_addGateway_result&);
  Airavata_addGateway_result& operator=(const Airavata_addGateway_result&);
  Airavata_addGateway_result() : success() {
  }

  virtual ~Airavata_addGateway_result() throw();
  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_addGateway_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_addGateway_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_addGateway_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addGateway_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_addGateway_result& obj);
};

typedef struct _Airavata_addGateway_presult__isset {
  _Airavata_addGateway_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_addGateway_presult__isset;

class Airavata_addGateway_presult {
 public:

  static const char* ascii_fingerprint; // = "21BF57A9FE5AAA661540804D4FB9F023";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xBF,0x57,0xA9,0xFE,0x5A,0xAA,0x66,0x15,0x40,0x80,0x4D,0x4F,0xB9,0xF0,0x23};


  virtual ~Airavata_addGateway_presult() throw();
  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_addGateway_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_addGateway_presult& obj);
};


class Airavata_updateGateway_args {
 public:

  static const char* ascii_fingerprint; // = "223E46C55CD2A23DFB47C4B0ED700093";
  static const uint8_t binary_fingerprint[16]; // = {0x22,0x3E,0x46,0xC5,0x5C,0xD2,0xA2,0x3D,0xFB,0x47,0xC4,0xB0,0xED,0x70,0x00,0x93};

  Airavata_updateGateway_args(const Airavata_updateGateway_args&);
  Airavata_updateGateway_args& operator=(const Airavata_updateGateway_args&);
  Airavata_updateGateway_args() : gatewayId() {
  }

  virtual ~Airavata_updateGateway_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string gatewayId;
   ::apache::airavata::model::workspace::Gateway updatedGateway;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_gatewayId(const std::string& val);

  void __set_updatedGateway(const  ::apache::airavata::model::workspace::Gateway& val);

  bool operator == (const Airavata_updateGateway_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(updatedGateway == rhs.updatedGateway))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateGateway_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateGateway_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateGateway_args& obj);
};


class Airavata_updateGateway_pargs {
 public:

  static const char* ascii_fingerprint; // = "223E46C55CD2A23DFB47C4B0ED700093";
  static const uint8_t binary_fingerprint[16]; // = {0x22,0x3E,0x46,0xC5,0x5C,0xD2,0xA2,0x3D,0xFB,0x47,0xC4,0xB0,0xED,0x70,0x00,0x93};


  virtual ~Airavata_updateGateway_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* gatewayId;
  const  ::apache::airavata::model::workspace::Gateway* updatedGateway;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateGateway_pargs& obj);
};

typedef struct _Airavata_updateGateway_result__isset {
  _Airavata_updateGateway_result__isset() : ire(false), ace(false), ase(false), ae(false) {}
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_updateGateway_result__isset;

class Airavata_updateGateway_result {
 public:

  static const char* ascii_fingerprint; // = "0603929641B3F91F81AA6AC437512303";
  static const uint8_t binary_fingerprint[16]; // = {0x06,0x03,0x92,0x96,0x41,0xB3,0xF9,0x1F,0x81,0xAA,0x6A,0xC4,0x37,0x51,0x23,0x03};

  Airavata_updateGateway_result(const Airavata_updateGateway_result&);
  Airavata_updateGateway_result& operator=(const Airavata_updateGateway_result&);
  Airavata_updateGateway_result() {
  }

  virtual ~Airavata_updateGateway_result() throw();
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_updateGateway_result__isset __isset;

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_updateGateway_result & rhs) const
  {
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateGateway_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateGateway_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateGateway_result& obj);
};

typedef struct _Airavata_updateGateway_presult__isset {
  _Airavata_updateGateway_presult__isset() : ire(false), ace(false), ase(false), ae(false) {}
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_updateGateway_presult__isset;

class Airavata_updateGateway_presult {
 public:

  static const char* ascii_fingerprint; // = "0603929641B3F91F81AA6AC437512303";
  static const uint8_t binary_fingerprint[16]; // = {0x06,0x03,0x92,0x96,0x41,0xB3,0xF9,0x1F,0x81,0xAA,0x6A,0xC4,0x37,0x51,0x23,0x03};


  virtual ~Airavata_updateGateway_presult() throw();
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_updateGateway_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateGateway_presult& obj);
};


class Airavata_getGateway_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_getGateway_args(const Airavata_getGateway_args&);
  Airavata_getGateway_args& operator=(const Airavata_getGateway_args&);
  Airavata_getGateway_args() : gatewayId() {
  }

  virtual ~Airavata_getGateway_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string gatewayId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_gatewayId(const std::string& val);

  bool operator == (const Airavata_getGateway_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(gatewayId == rhs.gatewayId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getGateway_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getGateway_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getGateway_args& obj);
};


class Airavata_getGateway_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_getGateway_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* gatewayId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getGateway_pargs& obj);
};

typedef struct _Airavata_getGateway_result__isset {
  _Airavata_getGateway_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getGateway_result__isset;

class Airavata_getGateway_result {
 public:

  static const char* ascii_fingerprint; // = "1CD3091B63319C5F9E044C91C5E7D48E";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xD3,0x09,0x1B,0x63,0x31,0x9C,0x5F,0x9E,0x04,0x4C,0x91,0xC5,0xE7,0xD4,0x8E};

  Airavata_getGateway_result(const Airavata_getGateway_result&);
  Airavata_getGateway_result& operator=(const Airavata_getGateway_result&);
  Airavata_getGateway_result() {
  }

  virtual ~Airavata_getGateway_result() throw();
   ::apache::airavata::model::workspace::Gateway success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getGateway_result__isset __isset;

  void __set_success(const  ::apache::airavata::model::workspace::Gateway& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_getGateway_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_getGateway_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getGateway_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getGateway_result& obj);
};

typedef struct _Airavata_getGateway_presult__isset {
  _Airavata_getGateway_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getGateway_presult__isset;

class Airavata_getGateway_presult {
 public:

  static const char* ascii_fingerprint; // = "1CD3091B63319C5F9E044C91C5E7D48E";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xD3,0x09,0x1B,0x63,0x31,0x9C,0x5F,0x9E,0x04,0x4C,0x91,0xC5,0xE7,0xD4,0x8E};


  virtual ~Airavata_getGateway_presult() throw();
   ::apache::airavata::model::workspace::Gateway* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getGateway_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getGateway_presult& obj);
};


class Airavata_deleteGateway_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_deleteGateway_args(const Airavata_deleteGateway_args&);
  Airavata_deleteGateway_args& operator=(const Airavata_deleteGateway_args&);
  Airavata_deleteGateway_args() : gatewayId() {
  }

  virtual ~Airavata_deleteGateway_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string gatewayId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_gatewayId(const std::string& val);

  bool operator == (const Airavata_deleteGateway_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(gatewayId == rhs.gatewayId))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteGateway_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteGateway_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteGateway_args& obj);
};


class Airavata_deleteGateway_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_deleteGateway_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* gatewayId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteGateway_pargs& obj);
};

typedef struct _Airavata_deleteGateway_result__isset {
  _Airavata_deleteGateway_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_deleteGateway_result__isset;

class Airavata_deleteGateway_result {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};

  Airavata_deleteGateway_result(const Airavata_deleteGateway_result&);
  Airavata_deleteGateway_result& operator=(const Airavata_deleteGateway_result&);
  Airavata_deleteGateway_result() : success(0) {
  }

  virtual ~Airavata_deleteGateway_result() throw();
  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_deleteGateway_result__isset __isset;

  void __set_success(const bool val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_deleteGateway_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteGateway_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteGateway_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteGateway_result& obj);
};

typedef struct _Airavata_deleteGateway_presult__isset {
  _Airavata_deleteGateway_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_deleteGateway_presult__isset;

class Airavata_deleteGateway_presult {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};


  virtual ~Airavata_deleteGateway_presult() throw();
  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_deleteGateway_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteGateway_presult& obj);
};


class Airavata_getAllGateways_args {
 public:

  static const char* ascii_fingerprint; // = "75A7E945AEBB96C8FA8998CBCEB31C27";
  static const uint8_t binary_fingerprint[16]; // = {0x75,0xA7,0xE9,0x45,0xAE,0xBB,0x96,0xC8,0xFA,0x89,0x98,0xCB,0xCE,0xB3,0x1C,0x27};

  Airavata_getAllGateways_args(const Airavata_getAllGateways_args&);
  Airavata_getAllGateways_args& operator=(const Airavata_getAllGateways_args&);
  Airavata_getAllGateways_args() {
  }

  virtual ~Airavata_getAllGateways_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  bool operator == (const Airavata_getAllGateways_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllGateways_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllGateways_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAllGateways_args& obj);
};


class Airavata_getAllGateways_pargs {
 public:

  static const char* ascii_fingerprint; // = "75A7E945AEBB96C8FA8998CBCEB31C27";
  static const uint8_t binary_fingerprint[16]; // = {0x75,0xA7,0xE9,0x45,0xAE,0xBB,0x96,0xC8,0xFA,0x89,0x98,0xCB,0xCE,0xB3,0x1C,0x27};


  virtual ~Airavata_getAllGateways_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAllGateways_pargs& obj);
};

typedef struct _Airavata_getAllGateways_result__isset {
  _Airavata_getAllGateways_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getAllGateways_result__isset;

class Airavata_getAllGateways_result {
 public:

  static const char* ascii_fingerprint; // = "797B839022B9DB504CEA88A61463B523";
  static const uint8_t binary_fingerprint[16]; // = {0x79,0x7B,0x83,0x90,0x22,0xB9,0xDB,0x50,0x4C,0xEA,0x88,0xA6,0x14,0x63,0xB5,0x23};

  Airavata_getAllGateways_result(const Airavata_getAllGateways_result&);
  Airavata_getAllGateways_result& operator=(const Airavata_getAllGateways_result&);
  Airavata_getAllGateways_result() {
  }

  virtual ~Airavata_getAllGateways_result() throw();
  std::vector< ::apache::airavata::model::workspace::Gateway>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getAllGateways_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::workspace::Gateway> & val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_getAllGateways_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllGateways_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllGateways_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAllGateways_result& obj);
};

typedef struct _Airavata_getAllGateways_presult__isset {
  _Airavata_getAllGateways_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getAllGateways_presult__isset;

class Airavata_getAllGateways_presult {
 public:

  static const char* ascii_fingerprint; // = "797B839022B9DB504CEA88A61463B523";
  static const uint8_t binary_fingerprint[16]; // = {0x79,0x7B,0x83,0x90,0x22,0xB9,0xDB,0x50,0x4C,0xEA,0x88,0xA6,0x14,0x63,0xB5,0x23};


  virtual ~Airavata_getAllGateways_presult() throw();
  std::vector< ::apache::airavata::model::workspace::Gateway> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getAllGateways_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAllGateways_presult& obj);
};


class Airavata_isGatewayExist_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_isGatewayExist_args(const Airavata_isGatewayExist_args&);
  Airavata_isGatewayExist_args& operator=(const Airavata_isGatewayExist_args&);
  Airavata_isGatewayExist_args() : gatewayId() {
  }

  virtual ~Airavata_isGatewayExist_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string gatewayId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_gatewayId(const std::string& val);

  bool operator == (const Airavata_isGatewayExist_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(gatewayId == rhs.gatewayId))
      return false;
    return true;
  }
  bool operator != (const Airavata_isGatewayExist_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_isGatewayExist_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_isGatewayExist_args& obj);
};


class Airavata_isGatewayExist_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_isGatewayExist_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* gatewayId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_isGatewayExist_pargs& obj);
};

typedef struct _Airavata_isGatewayExist_result__isset {
  _Airavata_isGatewayExist_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_isGatewayExist_result__isset;

class Airavata_isGatewayExist_result {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};

  Airavata_isGatewayExist_result(const Airavata_isGatewayExist_result&);
  Airavata_isGatewayExist_result& operator=(const Airavata_isGatewayExist_result&);
  Airavata_isGatewayExist_result() : success(0) {
  }

  virtual ~Airavata_isGatewayExist_result() throw();
  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_isGatewayExist_result__isset __isset;

  void __set_success(const bool val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_isGatewayExist_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_isGatewayExist_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_isGatewayExist_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_isGatewayExist_result& obj);
};

typedef struct _Airavata_isGatewayExist_presult__isset {
  _Airavata_isGatewayExist_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_isGatewayExist_presult__isset;

class Airavata_isGatewayExist_presult {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};


  virtual ~Airavata_isGatewayExist_presult() throw();
  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_isGatewayExist_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_isGatewayExist_presult& obj);
};


class Airavata_generateAndRegisterSSHKeys_args {
 public:

  static const char* ascii_fingerprint; // = "1E6476DBB101101BCE4A4B190EDEB468";
  static const uint8_t binary_fingerprint[16]; // = {0x1E,0x64,0x76,0xDB,0xB1,0x01,0x10,0x1B,0xCE,0x4A,0x4B,0x19,0x0E,0xDE,0xB4,0x68};

  Airavata_generateAndRegisterSSHKeys_args(const Airavata_generateAndRegisterSSHKeys_args&);
  Airavata_generateAndRegisterSSHKeys_args& operator=(const Airavata_generateAndRegisterSSHKeys_args&);
  Airavata_generateAndRegisterSSHKeys_args() : gatewayId(), userName() {
  }

  virtual ~Airavata_generateAndRegisterSSHKeys_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string gatewayId;
  std::string userName;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_gatewayId(const std::string& val);

  void __set_userName(const std::string& val);

  bool operator == (const Airavata_generateAndRegisterSSHKeys_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(userName == rhs.userName))
      return false;
    return true;
  }
  bool operator != (const Airavata_generateAndRegisterSSHKeys_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_generateAndRegisterSSHKeys_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_generateAndRegisterSSHKeys_args& obj);
};


class Airavata_generateAndRegisterSSHKeys_pargs {
 public:

  static const char* ascii_fingerprint; // = "1E6476DBB101101BCE4A4B190EDEB468";
  static const uint8_t binary_fingerprint[16]; // = {0x1E,0x64,0x76,0xDB,0xB1,0x01,0x10,0x1B,0xCE,0x4A,0x4B,0x19,0x0E,0xDE,0xB4,0x68};


  virtual ~Airavata_generateAndRegisterSSHKeys_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* gatewayId;
  const std::string* userName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_generateAndRegisterSSHKeys_pargs& obj);
};

typedef struct _Airavata_generateAndRegisterSSHKeys_result__isset {
  _Airavata_generateAndRegisterSSHKeys_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
} _Airavata_generateAndRegisterSSHKeys_result__isset;

class Airavata_generateAndRegisterSSHKeys_result {
 public:

  static const char* ascii_fingerprint; // = "765449DB00DA08377C7E82BB71F66398";
  static const uint8_t binary_fingerprint[16]; // = {0x76,0x54,0x49,0xDB,0x00,0xDA,0x08,0x37,0x7C,0x7E,0x82,0xBB,0x71,0xF6,0x63,0x98};

  Airavata_generateAndRegisterSSHKeys_result(const Airavata_generateAndRegisterSSHKeys_result&);
  Airavata_generateAndRegisterSSHKeys_result& operator=(const Airavata_generateAndRegisterSSHKeys_result&);
  Airavata_generateAndRegisterSSHKeys_result() : success() {
  }

  virtual ~Airavata_generateAndRegisterSSHKeys_result() throw();
  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_generateAndRegisterSSHKeys_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  bool operator == (const Airavata_generateAndRegisterSSHKeys_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_generateAndRegisterSSHKeys_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_generateAndRegisterSSHKeys_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_generateAndRegisterSSHKeys_result& obj);
};

typedef struct _Airavata_generateAndRegisterSSHKeys_presult__isset {
  _Airavata_generateAndRegisterSSHKeys_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
} _Airavata_generateAndRegisterSSHKeys_presult__isset;

class Airavata_generateAndRegisterSSHKeys_presult {
 public:

  static const char* ascii_fingerprint; // = "765449DB00DA08377C7E82BB71F66398";
  static const uint8_t binary_fingerprint[16]; // = {0x76,0x54,0x49,0xDB,0x00,0xDA,0x08,0x37,0x7C,0x7E,0x82,0xBB,0x71,0xF6,0x63,0x98};


  virtual ~Airavata_generateAndRegisterSSHKeys_presult() throw();
  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_generateAndRegisterSSHKeys_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_generateAndRegisterSSHKeys_presult& obj);
};


class Airavata_getSSHPubKey_args {
 public:

  static const char* ascii_fingerprint; // = "1E6476DBB101101BCE4A4B190EDEB468";
  static const uint8_t binary_fingerprint[16]; // = {0x1E,0x64,0x76,0xDB,0xB1,0x01,0x10,0x1B,0xCE,0x4A,0x4B,0x19,0x0E,0xDE,0xB4,0x68};

  Airavata_getSSHPubKey_args(const Airavata_getSSHPubKey_args&);
  Airavata_getSSHPubKey_args& operator=(const Airavata_getSSHPubKey_args&);
  Airavata_getSSHPubKey_args() : airavataCredStoreToken(), gatewayId() {
  }

  virtual ~Airavata_getSSHPubKey_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string airavataCredStoreToken;
  std::string gatewayId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_airavataCredStoreToken(const std::string& val);

  void __set_gatewayId(const std::string& val);

  bool operator == (const Airavata_getSSHPubKey_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(airavataCredStoreToken == rhs.airavataCredStoreToken))
      return false;
    if (!(gatewayId == rhs.gatewayId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getSSHPubKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getSSHPubKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getSSHPubKey_args& obj);
};


class Airavata_getSSHPubKey_pargs {
 public:

  static const char* ascii_fingerprint; // = "1E6476DBB101101BCE4A4B190EDEB468";
  static const uint8_t binary_fingerprint[16]; // = {0x1E,0x64,0x76,0xDB,0xB1,0x01,0x10,0x1B,0xCE,0x4A,0x4B,0x19,0x0E,0xDE,0xB4,0x68};


  virtual ~Airavata_getSSHPubKey_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* airavataCredStoreToken;
  const std::string* gatewayId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getSSHPubKey_pargs& obj);
};

typedef struct _Airavata_getSSHPubKey_result__isset {
  _Airavata_getSSHPubKey_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
} _Airavata_getSSHPubKey_result__isset;

class Airavata_getSSHPubKey_result {
 public:

  static const char* ascii_fingerprint; // = "765449DB00DA08377C7E82BB71F66398";
  static const uint8_t binary_fingerprint[16]; // = {0x76,0x54,0x49,0xDB,0x00,0xDA,0x08,0x37,0x7C,0x7E,0x82,0xBB,0x71,0xF6,0x63,0x98};

  Airavata_getSSHPubKey_result(const Airavata_getSSHPubKey_result&);
  Airavata_getSSHPubKey_result& operator=(const Airavata_getSSHPubKey_result&);
  Airavata_getSSHPubKey_result() : success() {
  }

  virtual ~Airavata_getSSHPubKey_result() throw();
  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getSSHPubKey_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  bool operator == (const Airavata_getSSHPubKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getSSHPubKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getSSHPubKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getSSHPubKey_result& obj);
};

typedef struct _Airavata_getSSHPubKey_presult__isset {
  _Airavata_getSSHPubKey_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
} _Airavata_getSSHPubKey_presult__isset;

class Airavata_getSSHPubKey_presult {
 public:

  static const char* ascii_fingerprint; // = "765449DB00DA08377C7E82BB71F66398";
  static const uint8_t binary_fingerprint[16]; // = {0x76,0x54,0x49,0xDB,0x00,0xDA,0x08,0x37,0x7C,0x7E,0x82,0xBB,0x71,0xF6,0x63,0x98};


  virtual ~Airavata_getSSHPubKey_presult() throw();
  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getSSHPubKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getSSHPubKey_presult& obj);
};


class Airavata_getAllUserSSHPubKeys_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_getAllUserSSHPubKeys_args(const Airavata_getAllUserSSHPubKeys_args&);
  Airavata_getAllUserSSHPubKeys_args& operator=(const Airavata_getAllUserSSHPubKeys_args&);
  Airavata_getAllUserSSHPubKeys_args() : userName() {
  }

  virtual ~Airavata_getAllUserSSHPubKeys_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string userName;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_userName(const std::string& val);

  bool operator == (const Airavata_getAllUserSSHPubKeys_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(userName == rhs.userName))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllUserSSHPubKeys_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllUserSSHPubKeys_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAllUserSSHPubKeys_args& obj);
};


class Airavata_getAllUserSSHPubKeys_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_getAllUserSSHPubKeys_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* userName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAllUserSSHPubKeys_pargs& obj);
};

typedef struct _Airavata_getAllUserSSHPubKeys_result__isset {
  _Airavata_getAllUserSSHPubKeys_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
} _Airavata_getAllUserSSHPubKeys_result__isset;

class Airavata_getAllUserSSHPubKeys_result {
 public:

  static const char* ascii_fingerprint; // = "718BFC609275A3CA37186885AF55A512";
  static const uint8_t binary_fingerprint[16]; // = {0x71,0x8B,0xFC,0x60,0x92,0x75,0xA3,0xCA,0x37,0x18,0x68,0x85,0xAF,0x55,0xA5,0x12};

  Airavata_getAllUserSSHPubKeys_result(const Airavata_getAllUserSSHPubKeys_result&);
  Airavata_getAllUserSSHPubKeys_result& operator=(const Airavata_getAllUserSSHPubKeys_result&);
  Airavata_getAllUserSSHPubKeys_result() {
  }

  virtual ~Airavata_getAllUserSSHPubKeys_result() throw();
  std::map<std::string, std::string>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAllUserSSHPubKeys_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  bool operator == (const Airavata_getAllUserSSHPubKeys_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllUserSSHPubKeys_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllUserSSHPubKeys_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAllUserSSHPubKeys_result& obj);
};

typedef struct _Airavata_getAllUserSSHPubKeys_presult__isset {
  _Airavata_getAllUserSSHPubKeys_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
} _Airavata_getAllUserSSHPubKeys_presult__isset;

class Airavata_getAllUserSSHPubKeys_presult {
 public:

  static const char* ascii_fingerprint; // = "718BFC609275A3CA37186885AF55A512";
  static const uint8_t binary_fingerprint[16]; // = {0x71,0x8B,0xFC,0x60,0x92,0x75,0xA3,0xCA,0x37,0x18,0x68,0x85,0xAF,0x55,0xA5,0x12};


  virtual ~Airavata_getAllUserSSHPubKeys_presult() throw();
  std::map<std::string, std::string> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;

  _Airavata_getAllUserSSHPubKeys_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAllUserSSHPubKeys_presult& obj);
};


class Airavata_createProject_args {
 public:

  static const char* ascii_fingerprint; // = "6AD998897EEB0CD749E1E97F7A084A23";
  static const uint8_t binary_fingerprint[16]; // = {0x6A,0xD9,0x98,0x89,0x7E,0xEB,0x0C,0xD7,0x49,0xE1,0xE9,0x7F,0x7A,0x08,0x4A,0x23};

  Airavata_createProject_args(const Airavata_createProject_args&);
  Airavata_createProject_args& operator=(const Airavata_createProject_args&);
  Airavata_createProject_args() : gatewayId() {
  }

  virtual ~Airavata_createProject_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string gatewayId;
   ::apache::airavata::model::workspace::Project project;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_gatewayId(const std::string& val);

  void __set_project(const  ::apache::airavata::model::workspace::Project& val);

  bool operator == (const Airavata_createProject_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(project == rhs.project))
      return false;
    return true;
  }
  bool operator != (const Airavata_createProject_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_createProject_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_createProject_args& obj);
};


class Airavata_createProject_pargs {
 public:

  static const char* ascii_fingerprint; // = "6AD998897EEB0CD749E1E97F7A084A23";
  static const uint8_t binary_fingerprint[16]; // = {0x6A,0xD9,0x98,0x89,0x7E,0xEB,0x0C,0xD7,0x49,0xE1,0xE9,0x7F,0x7A,0x08,0x4A,0x23};


  virtual ~Airavata_createProject_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* gatewayId;
  const  ::apache::airavata::model::workspace::Project* project;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_createProject_pargs& obj);
};

typedef struct _Airavata_createProject_result__isset {
  _Airavata_createProject_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_createProject_result__isset;

class Airavata_createProject_result {
 public:

  static const char* ascii_fingerprint; // = "21BF57A9FE5AAA661540804D4FB9F023";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xBF,0x57,0xA9,0xFE,0x5A,0xAA,0x66,0x15,0x40,0x80,0x4D,0x4F,0xB9,0xF0,0x23};

  Airavata_createProject_result(const Airavata_createProject_result&);
  Airavata_createProject_result& operator=(const Airavata_createProject_result&);
  Airavata_createProject_result() : success() {
  }

  virtual ~Airavata_createProject_result() throw();
  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_createProject_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_createProject_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_createProject_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_createProject_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_createProject_result& obj);
};

typedef struct _Airavata_createProject_presult__isset {
  _Airavata_createProject_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_createProject_presult__isset;

class Airavata_createProject_presult {
 public:

  static const char* ascii_fingerprint; // = "21BF57A9FE5AAA661540804D4FB9F023";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xBF,0x57,0xA9,0xFE,0x5A,0xAA,0x66,0x15,0x40,0x80,0x4D,0x4F,0xB9,0xF0,0x23};


  virtual ~Airavata_createProject_presult() throw();
  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_createProject_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_createProject_presult& obj);
};


class Airavata_updateProject_args {
 public:

  static const char* ascii_fingerprint; // = "6AD998897EEB0CD749E1E97F7A084A23";
  static const uint8_t binary_fingerprint[16]; // = {0x6A,0xD9,0x98,0x89,0x7E,0xEB,0x0C,0xD7,0x49,0xE1,0xE9,0x7F,0x7A,0x08,0x4A,0x23};

  Airavata_updateProject_args(const Airavata_updateProject_args&);
  Airavata_updateProject_args& operator=(const Airavata_updateProject_args&);
  Airavata_updateProject_args() : projectId() {
  }

  virtual ~Airavata_updateProject_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string projectId;
   ::apache::airavata::model::workspace::Project updatedProject;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_projectId(const std::string& val);

  void __set_updatedProject(const  ::apache::airavata::model::workspace::Project& val);

  bool operator == (const Airavata_updateProject_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(projectId == rhs.projectId))
      return false;
    if (!(updatedProject == rhs.updatedProject))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateProject_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateProject_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateProject_args& obj);
};


class Airavata_updateProject_pargs {
 public:

  static const char* ascii_fingerprint; // = "6AD998897EEB0CD749E1E97F7A084A23";
  static const uint8_t binary_fingerprint[16]; // = {0x6A,0xD9,0x98,0x89,0x7E,0xEB,0x0C,0xD7,0x49,0xE1,0xE9,0x7F,0x7A,0x08,0x4A,0x23};


  virtual ~Airavata_updateProject_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* projectId;
  const  ::apache::airavata::model::workspace::Project* updatedProject;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateProject_pargs& obj);
};

typedef struct _Airavata_updateProject_result__isset {
  _Airavata_updateProject_result__isset() : ire(false), ace(false), ase(false), pnfe(false), ae(false) {}
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool pnfe :1;
  bool ae :1;
} _Airavata_updateProject_result__isset;

class Airavata_updateProject_result {
 public:

  static const char* ascii_fingerprint; // = "618606830293956AC9CBF7CC72E10E10";
  static const uint8_t binary_fingerprint[16]; // = {0x61,0x86,0x06,0x83,0x02,0x93,0x95,0x6A,0xC9,0xCB,0xF7,0xCC,0x72,0xE1,0x0E,0x10};

  Airavata_updateProject_result(const Airavata_updateProject_result&);
  Airavata_updateProject_result& operator=(const Airavata_updateProject_result&);
  Airavata_updateProject_result() {
  }

  virtual ~Airavata_updateProject_result() throw();
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::ProjectNotFoundException pnfe;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_updateProject_result__isset __isset;

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_pnfe(const  ::apache::airavata::api::error::ProjectNotFoundException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_updateProject_result & rhs) const
  {
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(pnfe == rhs.pnfe))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateProject_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateProject_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateProject_result& obj);
};

typedef struct _Airavata_updateProject_presult__isset {
  _Airavata_updateProject_presult__isset() : ire(false), ace(false), ase(false), pnfe(false), ae(false) {}
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool pnfe :1;
  bool ae :1;
} _Airavata_updateProject_presult__isset;

class Airavata_updateProject_presult {
 public:

  static const char* ascii_fingerprint; // = "618606830293956AC9CBF7CC72E10E10";
  static const uint8_t binary_fingerprint[16]; // = {0x61,0x86,0x06,0x83,0x02,0x93,0x95,0x6A,0xC9,0xCB,0xF7,0xCC,0x72,0xE1,0x0E,0x10};


  virtual ~Airavata_updateProject_presult() throw();
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::ProjectNotFoundException pnfe;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_updateProject_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateProject_presult& obj);
};


class Airavata_getProject_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_getProject_args(const Airavata_getProject_args&);
  Airavata_getProject_args& operator=(const Airavata_getProject_args&);
  Airavata_getProject_args() : projectId() {
  }

  virtual ~Airavata_getProject_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string projectId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_projectId(const std::string& val);

  bool operator == (const Airavata_getProject_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(projectId == rhs.projectId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getProject_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getProject_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getProject_args& obj);
};


class Airavata_getProject_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_getProject_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* projectId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getProject_pargs& obj);
};

typedef struct _Airavata_getProject_result__isset {
  _Airavata_getProject_result__isset() : success(false), ire(false), ace(false), ase(false), pnfe(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool pnfe :1;
  bool ae :1;
} _Airavata_getProject_result__isset;

class Airavata_getProject_result {
 public:

  static const char* ascii_fingerprint; // = "2F45380EEEE0097154022FB3E6DD9970";
  static const uint8_t binary_fingerprint[16]; // = {0x2F,0x45,0x38,0x0E,0xEE,0xE0,0x09,0x71,0x54,0x02,0x2F,0xB3,0xE6,0xDD,0x99,0x70};

  Airavata_getProject_result(const Airavata_getProject_result&);
  Airavata_getProject_result& operator=(const Airavata_getProject_result&);
  Airavata_getProject_result() {
  }

  virtual ~Airavata_getProject_result() throw();
   ::apache::airavata::model::workspace::Project success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::ProjectNotFoundException pnfe;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getProject_result__isset __isset;

  void __set_success(const  ::apache::airavata::model::workspace::Project& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_pnfe(const  ::apache::airavata::api::error::ProjectNotFoundException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_getProject_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(pnfe == rhs.pnfe))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_getProject_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getProject_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getProject_result& obj);
};

typedef struct _Airavata_getProject_presult__isset {
  _Airavata_getProject_presult__isset() : success(false), ire(false), ace(false), ase(false), pnfe(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool pnfe :1;
  bool ae :1;
} _Airavata_getProject_presult__isset;

class Airavata_getProject_presult {
 public:

  static const char* ascii_fingerprint; // = "2F45380EEEE0097154022FB3E6DD9970";
  static const uint8_t binary_fingerprint[16]; // = {0x2F,0x45,0x38,0x0E,0xEE,0xE0,0x09,0x71,0x54,0x02,0x2F,0xB3,0xE6,0xDD,0x99,0x70};


  virtual ~Airavata_getProject_presult() throw();
   ::apache::airavata::model::workspace::Project* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::ProjectNotFoundException pnfe;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getProject_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getProject_presult& obj);
};


class Airavata_deleteProject_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_deleteProject_args(const Airavata_deleteProject_args&);
  Airavata_deleteProject_args& operator=(const Airavata_deleteProject_args&);
  Airavata_deleteProject_args() : projectId() {
  }

  virtual ~Airavata_deleteProject_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string projectId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_projectId(const std::string& val);

  bool operator == (const Airavata_deleteProject_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(projectId == rhs.projectId))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteProject_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteProject_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteProject_args& obj);
};


class Airavata_deleteProject_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_deleteProject_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* projectId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteProject_pargs& obj);
};

typedef struct _Airavata_deleteProject_result__isset {
  _Airavata_deleteProject_result__isset() : success(false), ire(false), ace(false), ase(false), pnfe(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool pnfe :1;
  bool ae :1;
} _Airavata_deleteProject_result__isset;

class Airavata_deleteProject_result {
 public:

  static const char* ascii_fingerprint; // = "7670E6E497F9095E2551C67B12D309B2";
  static const uint8_t binary_fingerprint[16]; // = {0x76,0x70,0xE6,0xE4,0x97,0xF9,0x09,0x5E,0x25,0x51,0xC6,0x7B,0x12,0xD3,0x09,0xB2};

  Airavata_deleteProject_result(const Airavata_deleteProject_result&);
  Airavata_deleteProject_result& operator=(const Airavata_deleteProject_result&);
  Airavata_deleteProject_result() : success(0) {
  }

  virtual ~Airavata_deleteProject_result() throw();
  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::ProjectNotFoundException pnfe;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_deleteProject_result__isset __isset;

  void __set_success(const bool val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_pnfe(const  ::apache::airavata::api::error::ProjectNotFoundException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_deleteProject_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(pnfe == rhs.pnfe))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteProject_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteProject_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteProject_result& obj);
};

typedef struct _Airavata_deleteProject_presult__isset {
  _Airavata_deleteProject_presult__isset() : success(false), ire(false), ace(false), ase(false), pnfe(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool pnfe :1;
  bool ae :1;
} _Airavata_deleteProject_presult__isset;

class Airavata_deleteProject_presult {
 public:

  static const char* ascii_fingerprint; // = "7670E6E497F9095E2551C67B12D309B2";
  static const uint8_t binary_fingerprint[16]; // = {0x76,0x70,0xE6,0xE4,0x97,0xF9,0x09,0x5E,0x25,0x51,0xC6,0x7B,0x12,0xD3,0x09,0xB2};


  virtual ~Airavata_deleteProject_presult() throw();
  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::ProjectNotFoundException pnfe;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_deleteProject_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteProject_presult& obj);
};


class Airavata_getUserProjects_args {
 public:

  static const char* ascii_fingerprint; // = "B0F1ED866602D6465A1E8B7B65B9DBBA";
  static const uint8_t binary_fingerprint[16]; // = {0xB0,0xF1,0xED,0x86,0x66,0x02,0xD6,0x46,0x5A,0x1E,0x8B,0x7B,0x65,0xB9,0xDB,0xBA};

  Airavata_getUserProjects_args(const Airavata_getUserProjects_args&);
  Airavata_getUserProjects_args& operator=(const Airavata_getUserProjects_args&);
  Airavata_getUserProjects_args() : gatewayId(), userName(), limit(0), offset(0) {
  }

  virtual ~Airavata_getUserProjects_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string gatewayId;
  std::string userName;
  int32_t limit;
  int32_t offset;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_gatewayId(const std::string& val);

  void __set_userName(const std::string& val);

  void __set_limit(const int32_t val);

  void __set_offset(const int32_t val);

  bool operator == (const Airavata_getUserProjects_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(userName == rhs.userName))
      return false;
    if (!(limit == rhs.limit))
      return false;
    if (!(offset == rhs.offset))
      return false;
    return true;
  }
  bool operator != (const Airavata_getUserProjects_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getUserProjects_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getUserProjects_args& obj);
};


class Airavata_getUserProjects_pargs {
 public:

  static const char* ascii_fingerprint; // = "B0F1ED866602D6465A1E8B7B65B9DBBA";
  static const uint8_t binary_fingerprint[16]; // = {0xB0,0xF1,0xED,0x86,0x66,0x02,0xD6,0x46,0x5A,0x1E,0x8B,0x7B,0x65,0xB9,0xDB,0xBA};


  virtual ~Airavata_getUserProjects_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* gatewayId;
  const std::string* userName;
  const int32_t* limit;
  const int32_t* offset;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getUserProjects_pargs& obj);
};

typedef struct _Airavata_getUserProjects_result__isset {
  _Airavata_getUserProjects_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getUserProjects_result__isset;

class Airavata_getUserProjects_result {
 public:

  static const char* ascii_fingerprint; // = "9FDEFB6B8A9E4977A43B7C4722664EC3";
  static const uint8_t binary_fingerprint[16]; // = {0x9F,0xDE,0xFB,0x6B,0x8A,0x9E,0x49,0x77,0xA4,0x3B,0x7C,0x47,0x22,0x66,0x4E,0xC3};

  Airavata_getUserProjects_result(const Airavata_getUserProjects_result&);
  Airavata_getUserProjects_result& operator=(const Airavata_getUserProjects_result&);
  Airavata_getUserProjects_result() {
  }

  virtual ~Airavata_getUserProjects_result() throw();
  std::vector< ::apache::airavata::model::workspace::Project>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getUserProjects_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::workspace::Project> & val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_getUserProjects_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_getUserProjects_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getUserProjects_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getUserProjects_result& obj);
};

typedef struct _Airavata_getUserProjects_presult__isset {
  _Airavata_getUserProjects_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getUserProjects_presult__isset;

class Airavata_getUserProjects_presult {
 public:

  static const char* ascii_fingerprint; // = "9FDEFB6B8A9E4977A43B7C4722664EC3";
  static const uint8_t binary_fingerprint[16]; // = {0x9F,0xDE,0xFB,0x6B,0x8A,0x9E,0x49,0x77,0xA4,0x3B,0x7C,0x47,0x22,0x66,0x4E,0xC3};


  virtual ~Airavata_getUserProjects_presult() throw();
  std::vector< ::apache::airavata::model::workspace::Project> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getUserProjects_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getUserProjects_presult& obj);
};


class Airavata_searchProjectsByProjectName_args {
 public:

  static const char* ascii_fingerprint; // = "97BE39385D449F49A0D934F09B2EF404";
  static const uint8_t binary_fingerprint[16]; // = {0x97,0xBE,0x39,0x38,0x5D,0x44,0x9F,0x49,0xA0,0xD9,0x34,0xF0,0x9B,0x2E,0xF4,0x04};

  Airavata_searchProjectsByProjectName_args(const Airavata_searchProjectsByProjectName_args&);
  Airavata_searchProjectsByProjectName_args& operator=(const Airavata_searchProjectsByProjectName_args&);
  Airavata_searchProjectsByProjectName_args() : gatewayId(), userName(), projectName(), limit(0), offset(0) {
  }

  virtual ~Airavata_searchProjectsByProjectName_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string gatewayId;
  std::string userName;
  std::string projectName;
  int32_t limit;
  int32_t offset;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_gatewayId(const std::string& val);

  void __set_userName(const std::string& val);

  void __set_projectName(const std::string& val);

  void __set_limit(const int32_t val);

  void __set_offset(const int32_t val);

  bool operator == (const Airavata_searchProjectsByProjectName_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(userName == rhs.userName))
      return false;
    if (!(projectName == rhs.projectName))
      return false;
    if (!(limit == rhs.limit))
      return false;
    if (!(offset == rhs.offset))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchProjectsByProjectName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchProjectsByProjectName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_searchProjectsByProjectName_args& obj);
};


class Airavata_searchProjectsByProjectName_pargs {
 public:

  static const char* ascii_fingerprint; // = "97BE39385D449F49A0D934F09B2EF404";
  static const uint8_t binary_fingerprint[16]; // = {0x97,0xBE,0x39,0x38,0x5D,0x44,0x9F,0x49,0xA0,0xD9,0x34,0xF0,0x9B,0x2E,0xF4,0x04};


  virtual ~Airavata_searchProjectsByProjectName_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* gatewayId;
  const std::string* userName;
  const std::string* projectName;
  const int32_t* limit;
  const int32_t* offset;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_searchProjectsByProjectName_pargs& obj);
};

typedef struct _Airavata_searchProjectsByProjectName_result__isset {
  _Airavata_searchProjectsByProjectName_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_searchProjectsByProjectName_result__isset;

class Airavata_searchProjectsByProjectName_result {
 public:

  static const char* ascii_fingerprint; // = "9FDEFB6B8A9E4977A43B7C4722664EC3";
  static const uint8_t binary_fingerprint[16]; // = {0x9F,0xDE,0xFB,0x6B,0x8A,0x9E,0x49,0x77,0xA4,0x3B,0x7C,0x47,0x22,0x66,0x4E,0xC3};

  Airavata_searchProjectsByProjectName_result(const Airavata_searchProjectsByProjectName_result&);
  Airavata_searchProjectsByProjectName_result& operator=(const Airavata_searchProjectsByProjectName_result&);
  Airavata_searchProjectsByProjectName_result() {
  }

  virtual ~Airavata_searchProjectsByProjectName_result() throw();
  std::vector< ::apache::airavata::model::workspace::Project>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_searchProjectsByProjectName_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::workspace::Project> & val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_searchProjectsByProjectName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchProjectsByProjectName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchProjectsByProjectName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_searchProjectsByProjectName_result& obj);
};

typedef struct _Airavata_searchProjectsByProjectName_presult__isset {
  _Airavata_searchProjectsByProjectName_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_searchProjectsByProjectName_presult__isset;

class Airavata_searchProjectsByProjectName_presult {
 public:

  static const char* ascii_fingerprint; // = "9FDEFB6B8A9E4977A43B7C4722664EC3";
  static const uint8_t binary_fingerprint[16]; // = {0x9F,0xDE,0xFB,0x6B,0x8A,0x9E,0x49,0x77,0xA4,0x3B,0x7C,0x47,0x22,0x66,0x4E,0xC3};


  virtual ~Airavata_searchProjectsByProjectName_presult() throw();
  std::vector< ::apache::airavata::model::workspace::Project> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_searchProjectsByProjectName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_searchProjectsByProjectName_presult& obj);
};


class Airavata_searchProjectsByProjectDesc_args {
 public:

  static const char* ascii_fingerprint; // = "97BE39385D449F49A0D934F09B2EF404";
  static const uint8_t binary_fingerprint[16]; // = {0x97,0xBE,0x39,0x38,0x5D,0x44,0x9F,0x49,0xA0,0xD9,0x34,0xF0,0x9B,0x2E,0xF4,0x04};

  Airavata_searchProjectsByProjectDesc_args(const Airavata_searchProjectsByProjectDesc_args&);
  Airavata_searchProjectsByProjectDesc_args& operator=(const Airavata_searchProjectsByProjectDesc_args&);
  Airavata_searchProjectsByProjectDesc_args() : gatewayId(), userName(), description(), limit(0), offset(0) {
  }

  virtual ~Airavata_searchProjectsByProjectDesc_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string gatewayId;
  std::string userName;
  std::string description;
  int32_t limit;
  int32_t offset;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_gatewayId(const std::string& val);

  void __set_userName(const std::string& val);

  void __set_description(const std::string& val);

  void __set_limit(const int32_t val);

  void __set_offset(const int32_t val);

  bool operator == (const Airavata_searchProjectsByProjectDesc_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(userName == rhs.userName))
      return false;
    if (!(description == rhs.description))
      return false;
    if (!(limit == rhs.limit))
      return false;
    if (!(offset == rhs.offset))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchProjectsByProjectDesc_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchProjectsByProjectDesc_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_searchProjectsByProjectDesc_args& obj);
};


class Airavata_searchProjectsByProjectDesc_pargs {
 public:

  static const char* ascii_fingerprint; // = "97BE39385D449F49A0D934F09B2EF404";
  static const uint8_t binary_fingerprint[16]; // = {0x97,0xBE,0x39,0x38,0x5D,0x44,0x9F,0x49,0xA0,0xD9,0x34,0xF0,0x9B,0x2E,0xF4,0x04};


  virtual ~Airavata_searchProjectsByProjectDesc_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* gatewayId;
  const std::string* userName;
  const std::string* description;
  const int32_t* limit;
  const int32_t* offset;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_searchProjectsByProjectDesc_pargs& obj);
};

typedef struct _Airavata_searchProjectsByProjectDesc_result__isset {
  _Airavata_searchProjectsByProjectDesc_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_searchProjectsByProjectDesc_result__isset;

class Airavata_searchProjectsByProjectDesc_result {
 public:

  static const char* ascii_fingerprint; // = "9FDEFB6B8A9E4977A43B7C4722664EC3";
  static const uint8_t binary_fingerprint[16]; // = {0x9F,0xDE,0xFB,0x6B,0x8A,0x9E,0x49,0x77,0xA4,0x3B,0x7C,0x47,0x22,0x66,0x4E,0xC3};

  Airavata_searchProjectsByProjectDesc_result(const Airavata_searchProjectsByProjectDesc_result&);
  Airavata_searchProjectsByProjectDesc_result& operator=(const Airavata_searchProjectsByProjectDesc_result&);
  Airavata_searchProjectsByProjectDesc_result() {
  }

  virtual ~Airavata_searchProjectsByProjectDesc_result() throw();
  std::vector< ::apache::airavata::model::workspace::Project>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_searchProjectsByProjectDesc_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::workspace::Project> & val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_searchProjectsByProjectDesc_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchProjectsByProjectDesc_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchProjectsByProjectDesc_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_searchProjectsByProjectDesc_result& obj);
};

typedef struct _Airavata_searchProjectsByProjectDesc_presult__isset {
  _Airavata_searchProjectsByProjectDesc_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_searchProjectsByProjectDesc_presult__isset;

class Airavata_searchProjectsByProjectDesc_presult {
 public:

  static const char* ascii_fingerprint; // = "9FDEFB6B8A9E4977A43B7C4722664EC3";
  static const uint8_t binary_fingerprint[16]; // = {0x9F,0xDE,0xFB,0x6B,0x8A,0x9E,0x49,0x77,0xA4,0x3B,0x7C,0x47,0x22,0x66,0x4E,0xC3};


  virtual ~Airavata_searchProjectsByProjectDesc_presult() throw();
  std::vector< ::apache::airavata::model::workspace::Project> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_searchProjectsByProjectDesc_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_searchProjectsByProjectDesc_presult& obj);
};


class Airavata_searchExperimentsByName_args {
 public:

  static const char* ascii_fingerprint; // = "97BE39385D449F49A0D934F09B2EF404";
  static const uint8_t binary_fingerprint[16]; // = {0x97,0xBE,0x39,0x38,0x5D,0x44,0x9F,0x49,0xA0,0xD9,0x34,0xF0,0x9B,0x2E,0xF4,0x04};

  Airavata_searchExperimentsByName_args(const Airavata_searchExperimentsByName_args&);
  Airavata_searchExperimentsByName_args& operator=(const Airavata_searchExperimentsByName_args&);
  Airavata_searchExperimentsByName_args() : gatewayId(), userName(), expName(), limit(0), offset(0) {
  }

  virtual ~Airavata_searchExperimentsByName_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string gatewayId;
  std::string userName;
  std::string expName;
  int32_t limit;
  int32_t offset;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_gatewayId(const std::string& val);

  void __set_userName(const std::string& val);

  void __set_expName(const std::string& val);

  void __set_limit(const int32_t val);

  void __set_offset(const int32_t val);

  bool operator == (const Airavata_searchExperimentsByName_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(userName == rhs.userName))
      return false;
    if (!(expName == rhs.expName))
      return false;
    if (!(limit == rhs.limit))
      return false;
    if (!(offset == rhs.offset))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchExperimentsByName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchExperimentsByName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_searchExperimentsByName_args& obj);
};


class Airavata_searchExperimentsByName_pargs {
 public:

  static const char* ascii_fingerprint; // = "97BE39385D449F49A0D934F09B2EF404";
  static const uint8_t binary_fingerprint[16]; // = {0x97,0xBE,0x39,0x38,0x5D,0x44,0x9F,0x49,0xA0,0xD9,0x34,0xF0,0x9B,0x2E,0xF4,0x04};


  virtual ~Airavata_searchExperimentsByName_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* gatewayId;
  const std::string* userName;
  const std::string* expName;
  const int32_t* limit;
  const int32_t* offset;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_searchExperimentsByName_pargs& obj);
};

typedef struct _Airavata_searchExperimentsByName_result__isset {
  _Airavata_searchExperimentsByName_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_searchExperimentsByName_result__isset;

class Airavata_searchExperimentsByName_result {
 public:

  static const char* ascii_fingerprint; // = "6490BEC830E2A72869B2F4E224CB0E50";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x90,0xBE,0xC8,0x30,0xE2,0xA7,0x28,0x69,0xB2,0xF4,0xE2,0x24,0xCB,0x0E,0x50};

  Airavata_searchExperimentsByName_result(const Airavata_searchExperimentsByName_result&);
  Airavata_searchExperimentsByName_result& operator=(const Airavata_searchExperimentsByName_result&);
  Airavata_searchExperimentsByName_result() {
  }

  virtual ~Airavata_searchExperimentsByName_result() throw();
  std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_searchExperimentsByName_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel> & val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_searchExperimentsByName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchExperimentsByName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchExperimentsByName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_searchExperimentsByName_result& obj);
};

typedef struct _Airavata_searchExperimentsByName_presult__isset {
  _Airavata_searchExperimentsByName_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_searchExperimentsByName_presult__isset;

class Airavata_searchExperimentsByName_presult {
 public:

  static const char* ascii_fingerprint; // = "6490BEC830E2A72869B2F4E224CB0E50";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x90,0xBE,0xC8,0x30,0xE2,0xA7,0x28,0x69,0xB2,0xF4,0xE2,0x24,0xCB,0x0E,0x50};


  virtual ~Airavata_searchExperimentsByName_presult() throw();
  std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_searchExperimentsByName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_searchExperimentsByName_presult& obj);
};


class Airavata_searchExperimentsByDesc_args {
 public:

  static const char* ascii_fingerprint; // = "97BE39385D449F49A0D934F09B2EF404";
  static const uint8_t binary_fingerprint[16]; // = {0x97,0xBE,0x39,0x38,0x5D,0x44,0x9F,0x49,0xA0,0xD9,0x34,0xF0,0x9B,0x2E,0xF4,0x04};

  Airavata_searchExperimentsByDesc_args(const Airavata_searchExperimentsByDesc_args&);
  Airavata_searchExperimentsByDesc_args& operator=(const Airavata_searchExperimentsByDesc_args&);
  Airavata_searchExperimentsByDesc_args() : gatewayId(), userName(), description(), limit(0), offset(0) {
  }

  virtual ~Airavata_searchExperimentsByDesc_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string gatewayId;
  std::string userName;
  std::string description;
  int32_t limit;
  int32_t offset;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_gatewayId(const std::string& val);

  void __set_userName(const std::string& val);

  void __set_description(const std::string& val);

  void __set_limit(const int32_t val);

  void __set_offset(const int32_t val);

  bool operator == (const Airavata_searchExperimentsByDesc_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(userName == rhs.userName))
      return false;
    if (!(description == rhs.description))
      return false;
    if (!(limit == rhs.limit))
      return false;
    if (!(offset == rhs.offset))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchExperimentsByDesc_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchExperimentsByDesc_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_searchExperimentsByDesc_args& obj);
};


class Airavata_searchExperimentsByDesc_pargs {
 public:

  static const char* ascii_fingerprint; // = "97BE39385D449F49A0D934F09B2EF404";
  static const uint8_t binary_fingerprint[16]; // = {0x97,0xBE,0x39,0x38,0x5D,0x44,0x9F,0x49,0xA0,0xD9,0x34,0xF0,0x9B,0x2E,0xF4,0x04};


  virtual ~Airavata_searchExperimentsByDesc_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* gatewayId;
  const std::string* userName;
  const std::string* description;
  const int32_t* limit;
  const int32_t* offset;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_searchExperimentsByDesc_pargs& obj);
};

typedef struct _Airavata_searchExperimentsByDesc_result__isset {
  _Airavata_searchExperimentsByDesc_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_searchExperimentsByDesc_result__isset;

class Airavata_searchExperimentsByDesc_result {
 public:

  static const char* ascii_fingerprint; // = "6490BEC830E2A72869B2F4E224CB0E50";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x90,0xBE,0xC8,0x30,0xE2,0xA7,0x28,0x69,0xB2,0xF4,0xE2,0x24,0xCB,0x0E,0x50};

  Airavata_searchExperimentsByDesc_result(const Airavata_searchExperimentsByDesc_result&);
  Airavata_searchExperimentsByDesc_result& operator=(const Airavata_searchExperimentsByDesc_result&);
  Airavata_searchExperimentsByDesc_result() {
  }

  virtual ~Airavata_searchExperimentsByDesc_result() throw();
  std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_searchExperimentsByDesc_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel> & val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_searchExperimentsByDesc_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchExperimentsByDesc_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchExperimentsByDesc_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_searchExperimentsByDesc_result& obj);
};

typedef struct _Airavata_searchExperimentsByDesc_presult__isset {
  _Airavata_searchExperimentsByDesc_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_searchExperimentsByDesc_presult__isset;

class Airavata_searchExperimentsByDesc_presult {
 public:

  static const char* ascii_fingerprint; // = "6490BEC830E2A72869B2F4E224CB0E50";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x90,0xBE,0xC8,0x30,0xE2,0xA7,0x28,0x69,0xB2,0xF4,0xE2,0x24,0xCB,0x0E,0x50};


  virtual ~Airavata_searchExperimentsByDesc_presult() throw();
  std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_searchExperimentsByDesc_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_searchExperimentsByDesc_presult& obj);
};


class Airavata_searchExperimentsByApplication_args {
 public:

  static const char* ascii_fingerprint; // = "97BE39385D449F49A0D934F09B2EF404";
  static const uint8_t binary_fingerprint[16]; // = {0x97,0xBE,0x39,0x38,0x5D,0x44,0x9F,0x49,0xA0,0xD9,0x34,0xF0,0x9B,0x2E,0xF4,0x04};

  Airavata_searchExperimentsByApplication_args(const Airavata_searchExperimentsByApplication_args&);
  Airavata_searchExperimentsByApplication_args& operator=(const Airavata_searchExperimentsByApplication_args&);
  Airavata_searchExperimentsByApplication_args() : gatewayId(), userName(), applicationId(), limit(0), offset(0) {
  }

  virtual ~Airavata_searchExperimentsByApplication_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string gatewayId;
  std::string userName;
  std::string applicationId;
  int32_t limit;
  int32_t offset;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_gatewayId(const std::string& val);

  void __set_userName(const std::string& val);

  void __set_applicationId(const std::string& val);

  void __set_limit(const int32_t val);

  void __set_offset(const int32_t val);

  bool operator == (const Airavata_searchExperimentsByApplication_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(userName == rhs.userName))
      return false;
    if (!(applicationId == rhs.applicationId))
      return false;
    if (!(limit == rhs.limit))
      return false;
    if (!(offset == rhs.offset))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchExperimentsByApplication_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchExperimentsByApplication_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_searchExperimentsByApplication_args& obj);
};


class Airavata_searchExperimentsByApplication_pargs {
 public:

  static const char* ascii_fingerprint; // = "97BE39385D449F49A0D934F09B2EF404";
  static const uint8_t binary_fingerprint[16]; // = {0x97,0xBE,0x39,0x38,0x5D,0x44,0x9F,0x49,0xA0,0xD9,0x34,0xF0,0x9B,0x2E,0xF4,0x04};


  virtual ~Airavata_searchExperimentsByApplication_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* gatewayId;
  const std::string* userName;
  const std::string* applicationId;
  const int32_t* limit;
  const int32_t* offset;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_searchExperimentsByApplication_pargs& obj);
};

typedef struct _Airavata_searchExperimentsByApplication_result__isset {
  _Airavata_searchExperimentsByApplication_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_searchExperimentsByApplication_result__isset;

class Airavata_searchExperimentsByApplication_result {
 public:

  static const char* ascii_fingerprint; // = "6490BEC830E2A72869B2F4E224CB0E50";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x90,0xBE,0xC8,0x30,0xE2,0xA7,0x28,0x69,0xB2,0xF4,0xE2,0x24,0xCB,0x0E,0x50};

  Airavata_searchExperimentsByApplication_result(const Airavata_searchExperimentsByApplication_result&);
  Airavata_searchExperimentsByApplication_result& operator=(const Airavata_searchExperimentsByApplication_result&);
  Airavata_searchExperimentsByApplication_result() {
  }

  virtual ~Airavata_searchExperimentsByApplication_result() throw();
  std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_searchExperimentsByApplication_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel> & val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_searchExperimentsByApplication_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchExperimentsByApplication_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchExperimentsByApplication_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_searchExperimentsByApplication_result& obj);
};

typedef struct _Airavata_searchExperimentsByApplication_presult__isset {
  _Airavata_searchExperimentsByApplication_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_searchExperimentsByApplication_presult__isset;

class Airavata_searchExperimentsByApplication_presult {
 public:

  static const char* ascii_fingerprint; // = "6490BEC830E2A72869B2F4E224CB0E50";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x90,0xBE,0xC8,0x30,0xE2,0xA7,0x28,0x69,0xB2,0xF4,0xE2,0x24,0xCB,0x0E,0x50};


  virtual ~Airavata_searchExperimentsByApplication_presult() throw();
  std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_searchExperimentsByApplication_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_searchExperimentsByApplication_presult& obj);
};


class Airavata_searchExperimentsByStatus_args {
 public:

  static const char* ascii_fingerprint; // = "A902C1FCF3C2BF735A7E5A4A6FF9AE3D";
  static const uint8_t binary_fingerprint[16]; // = {0xA9,0x02,0xC1,0xFC,0xF3,0xC2,0xBF,0x73,0x5A,0x7E,0x5A,0x4A,0x6F,0xF9,0xAE,0x3D};

  Airavata_searchExperimentsByStatus_args(const Airavata_searchExperimentsByStatus_args&);
  Airavata_searchExperimentsByStatus_args& operator=(const Airavata_searchExperimentsByStatus_args&);
  Airavata_searchExperimentsByStatus_args() : gatewayId(), userName(), experimentState(( ::apache::airavata::model::status::ExperimentState::type)0), limit(0), offset(0) {
  }

  virtual ~Airavata_searchExperimentsByStatus_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string gatewayId;
  std::string userName;
   ::apache::airavata::model::status::ExperimentState::type experimentState;
  int32_t limit;
  int32_t offset;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_gatewayId(const std::string& val);

  void __set_userName(const std::string& val);

  void __set_experimentState(const  ::apache::airavata::model::status::ExperimentState::type val);

  void __set_limit(const int32_t val);

  void __set_offset(const int32_t val);

  bool operator == (const Airavata_searchExperimentsByStatus_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(userName == rhs.userName))
      return false;
    if (!(experimentState == rhs.experimentState))
      return false;
    if (!(limit == rhs.limit))
      return false;
    if (!(offset == rhs.offset))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchExperimentsByStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchExperimentsByStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_searchExperimentsByStatus_args& obj);
};


class Airavata_searchExperimentsByStatus_pargs {
 public:

  static const char* ascii_fingerprint; // = "A902C1FCF3C2BF735A7E5A4A6FF9AE3D";
  static const uint8_t binary_fingerprint[16]; // = {0xA9,0x02,0xC1,0xFC,0xF3,0xC2,0xBF,0x73,0x5A,0x7E,0x5A,0x4A,0x6F,0xF9,0xAE,0x3D};


  virtual ~Airavata_searchExperimentsByStatus_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* gatewayId;
  const std::string* userName;
  const  ::apache::airavata::model::status::ExperimentState::type* experimentState;
  const int32_t* limit;
  const int32_t* offset;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_searchExperimentsByStatus_pargs& obj);
};

typedef struct _Airavata_searchExperimentsByStatus_result__isset {
  _Airavata_searchExperimentsByStatus_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_searchExperimentsByStatus_result__isset;

class Airavata_searchExperimentsByStatus_result {
 public:

  static const char* ascii_fingerprint; // = "6490BEC830E2A72869B2F4E224CB0E50";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x90,0xBE,0xC8,0x30,0xE2,0xA7,0x28,0x69,0xB2,0xF4,0xE2,0x24,0xCB,0x0E,0x50};

  Airavata_searchExperimentsByStatus_result(const Airavata_searchExperimentsByStatus_result&);
  Airavata_searchExperimentsByStatus_result& operator=(const Airavata_searchExperimentsByStatus_result&);
  Airavata_searchExperimentsByStatus_result() {
  }

  virtual ~Airavata_searchExperimentsByStatus_result() throw();
  std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_searchExperimentsByStatus_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel> & val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_searchExperimentsByStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchExperimentsByStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchExperimentsByStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_searchExperimentsByStatus_result& obj);
};

typedef struct _Airavata_searchExperimentsByStatus_presult__isset {
  _Airavata_searchExperimentsByStatus_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_searchExperimentsByStatus_presult__isset;

class Airavata_searchExperimentsByStatus_presult {
 public:

  static const char* ascii_fingerprint; // = "6490BEC830E2A72869B2F4E224CB0E50";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x90,0xBE,0xC8,0x30,0xE2,0xA7,0x28,0x69,0xB2,0xF4,0xE2,0x24,0xCB,0x0E,0x50};


  virtual ~Airavata_searchExperimentsByStatus_presult() throw();
  std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_searchExperimentsByStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_searchExperimentsByStatus_presult& obj);
};


class Airavata_searchExperimentsByCreationTime_args {
 public:

  static const char* ascii_fingerprint; // = "25238CAB6E3C1A0B8B40128B1FD9F510";
  static const uint8_t binary_fingerprint[16]; // = {0x25,0x23,0x8C,0xAB,0x6E,0x3C,0x1A,0x0B,0x8B,0x40,0x12,0x8B,0x1F,0xD9,0xF5,0x10};

  Airavata_searchExperimentsByCreationTime_args(const Airavata_searchExperimentsByCreationTime_args&);
  Airavata_searchExperimentsByCreationTime_args& operator=(const Airavata_searchExperimentsByCreationTime_args&);
  Airavata_searchExperimentsByCreationTime_args() : gatewayId(), userName(), fromTime(0), toTime(0), limit(0), offset(0) {
  }

  virtual ~Airavata_searchExperimentsByCreationTime_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string gatewayId;
  std::string userName;
  int64_t fromTime;
  int64_t toTime;
  int32_t limit;
  int32_t offset;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_gatewayId(const std::string& val);

  void __set_userName(const std::string& val);

  void __set_fromTime(const int64_t val);

  void __set_toTime(const int64_t val);

  void __set_limit(const int32_t val);

  void __set_offset(const int32_t val);

  bool operator == (const Airavata_searchExperimentsByCreationTime_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(userName == rhs.userName))
      return false;
    if (!(fromTime == rhs.fromTime))
      return false;
    if (!(toTime == rhs.toTime))
      return false;
    if (!(limit == rhs.limit))
      return false;
    if (!(offset == rhs.offset))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchExperimentsByCreationTime_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchExperimentsByCreationTime_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_searchExperimentsByCreationTime_args& obj);
};


class Airavata_searchExperimentsByCreationTime_pargs {
 public:

  static const char* ascii_fingerprint; // = "25238CAB6E3C1A0B8B40128B1FD9F510";
  static const uint8_t binary_fingerprint[16]; // = {0x25,0x23,0x8C,0xAB,0x6E,0x3C,0x1A,0x0B,0x8B,0x40,0x12,0x8B,0x1F,0xD9,0xF5,0x10};


  virtual ~Airavata_searchExperimentsByCreationTime_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* gatewayId;
  const std::string* userName;
  const int64_t* fromTime;
  const int64_t* toTime;
  const int32_t* limit;
  const int32_t* offset;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_searchExperimentsByCreationTime_pargs& obj);
};

typedef struct _Airavata_searchExperimentsByCreationTime_result__isset {
  _Airavata_searchExperimentsByCreationTime_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_searchExperimentsByCreationTime_result__isset;

class Airavata_searchExperimentsByCreationTime_result {
 public:

  static const char* ascii_fingerprint; // = "6490BEC830E2A72869B2F4E224CB0E50";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x90,0xBE,0xC8,0x30,0xE2,0xA7,0x28,0x69,0xB2,0xF4,0xE2,0x24,0xCB,0x0E,0x50};

  Airavata_searchExperimentsByCreationTime_result(const Airavata_searchExperimentsByCreationTime_result&);
  Airavata_searchExperimentsByCreationTime_result& operator=(const Airavata_searchExperimentsByCreationTime_result&);
  Airavata_searchExperimentsByCreationTime_result() {
  }

  virtual ~Airavata_searchExperimentsByCreationTime_result() throw();
  std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_searchExperimentsByCreationTime_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel> & val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_searchExperimentsByCreationTime_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchExperimentsByCreationTime_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchExperimentsByCreationTime_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_searchExperimentsByCreationTime_result& obj);
};

typedef struct _Airavata_searchExperimentsByCreationTime_presult__isset {
  _Airavata_searchExperimentsByCreationTime_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_searchExperimentsByCreationTime_presult__isset;

class Airavata_searchExperimentsByCreationTime_presult {
 public:

  static const char* ascii_fingerprint; // = "6490BEC830E2A72869B2F4E224CB0E50";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x90,0xBE,0xC8,0x30,0xE2,0xA7,0x28,0x69,0xB2,0xF4,0xE2,0x24,0xCB,0x0E,0x50};


  virtual ~Airavata_searchExperimentsByCreationTime_presult() throw();
  std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_searchExperimentsByCreationTime_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_searchExperimentsByCreationTime_presult& obj);
};

typedef struct _Airavata_searchExperiments_args__isset {
  _Airavata_searchExperiments_args__isset() : filters(false) {}
  bool filters :1;
} _Airavata_searchExperiments_args__isset;

class Airavata_searchExperiments_args {
 public:

  static const char* ascii_fingerprint; // = "EDA0192C126C354B078045FED66CAB8B";
  static const uint8_t binary_fingerprint[16]; // = {0xED,0xA0,0x19,0x2C,0x12,0x6C,0x35,0x4B,0x07,0x80,0x45,0xFE,0xD6,0x6C,0xAB,0x8B};

  Airavata_searchExperiments_args(const Airavata_searchExperiments_args&);
  Airavata_searchExperiments_args& operator=(const Airavata_searchExperiments_args&);
  Airavata_searchExperiments_args() : gatewayId(), userName(), limit(0), offset(0) {
  }

  virtual ~Airavata_searchExperiments_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string gatewayId;
  std::string userName;
  std::map< ::apache::airavata::model::experiment::ExperimentSearchFields::type, std::string>  filters;
  int32_t limit;
  int32_t offset;

  _Airavata_searchExperiments_args__isset __isset;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_gatewayId(const std::string& val);

  void __set_userName(const std::string& val);

  void __set_filters(const std::map< ::apache::airavata::model::experiment::ExperimentSearchFields::type, std::string> & val);

  void __set_limit(const int32_t val);

  void __set_offset(const int32_t val);

  bool operator == (const Airavata_searchExperiments_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(userName == rhs.userName))
      return false;
    if (!(filters == rhs.filters))
      return false;
    if (!(limit == rhs.limit))
      return false;
    if (!(offset == rhs.offset))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchExperiments_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchExperiments_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_searchExperiments_args& obj);
};


class Airavata_searchExperiments_pargs {
 public:

  static const char* ascii_fingerprint; // = "EDA0192C126C354B078045FED66CAB8B";
  static const uint8_t binary_fingerprint[16]; // = {0xED,0xA0,0x19,0x2C,0x12,0x6C,0x35,0x4B,0x07,0x80,0x45,0xFE,0xD6,0x6C,0xAB,0x8B};


  virtual ~Airavata_searchExperiments_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* gatewayId;
  const std::string* userName;
  const std::map< ::apache::airavata::model::experiment::ExperimentSearchFields::type, std::string> * filters;
  const int32_t* limit;
  const int32_t* offset;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_searchExperiments_pargs& obj);
};

typedef struct _Airavata_searchExperiments_result__isset {
  _Airavata_searchExperiments_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_searchExperiments_result__isset;

class Airavata_searchExperiments_result {
 public:

  static const char* ascii_fingerprint; // = "6490BEC830E2A72869B2F4E224CB0E50";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x90,0xBE,0xC8,0x30,0xE2,0xA7,0x28,0x69,0xB2,0xF4,0xE2,0x24,0xCB,0x0E,0x50};

  Airavata_searchExperiments_result(const Airavata_searchExperiments_result&);
  Airavata_searchExperiments_result& operator=(const Airavata_searchExperiments_result&);
  Airavata_searchExperiments_result() {
  }

  virtual ~Airavata_searchExperiments_result() throw();
  std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_searchExperiments_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel> & val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_searchExperiments_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_searchExperiments_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_searchExperiments_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_searchExperiments_result& obj);
};

typedef struct _Airavata_searchExperiments_presult__isset {
  _Airavata_searchExperiments_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_searchExperiments_presult__isset;

class Airavata_searchExperiments_presult {
 public:

  static const char* ascii_fingerprint; // = "6490BEC830E2A72869B2F4E224CB0E50";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x90,0xBE,0xC8,0x30,0xE2,0xA7,0x28,0x69,0xB2,0xF4,0xE2,0x24,0xCB,0x0E,0x50};


  virtual ~Airavata_searchExperiments_presult() throw();
  std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_searchExperiments_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_searchExperiments_presult& obj);
};


class Airavata_getExperimentStatistics_args {
 public:

  static const char* ascii_fingerprint; // = "1B3B276C4C08FB8748C5C3090D01B28A";
  static const uint8_t binary_fingerprint[16]; // = {0x1B,0x3B,0x27,0x6C,0x4C,0x08,0xFB,0x87,0x48,0xC5,0xC3,0x09,0x0D,0x01,0xB2,0x8A};

  Airavata_getExperimentStatistics_args(const Airavata_getExperimentStatistics_args&);
  Airavata_getExperimentStatistics_args& operator=(const Airavata_getExperimentStatistics_args&);
  Airavata_getExperimentStatistics_args() : gatewayId(), fromTime(0), toTime(0) {
  }

  virtual ~Airavata_getExperimentStatistics_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string gatewayId;
  int64_t fromTime;
  int64_t toTime;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_gatewayId(const std::string& val);

  void __set_fromTime(const int64_t val);

  void __set_toTime(const int64_t val);

  bool operator == (const Airavata_getExperimentStatistics_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(fromTime == rhs.fromTime))
      return false;
    if (!(toTime == rhs.toTime))
      return false;
    return true;
  }
  bool operator != (const Airavata_getExperimentStatistics_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getExperimentStatistics_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getExperimentStatistics_args& obj);
};


class Airavata_getExperimentStatistics_pargs {
 public:

  static const char* ascii_fingerprint; // = "1B3B276C4C08FB8748C5C3090D01B28A";
  static const uint8_t binary_fingerprint[16]; // = {0x1B,0x3B,0x27,0x6C,0x4C,0x08,0xFB,0x87,0x48,0xC5,0xC3,0x09,0x0D,0x01,0xB2,0x8A};


  virtual ~Airavata_getExperimentStatistics_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* gatewayId;
  const int64_t* fromTime;
  const int64_t* toTime;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getExperimentStatistics_pargs& obj);
};

typedef struct _Airavata_getExperimentStatistics_result__isset {
  _Airavata_getExperimentStatistics_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getExperimentStatistics_result__isset;

class Airavata_getExperimentStatistics_result {
 public:

  static const char* ascii_fingerprint; // = "A6787E9C1B6481816F881EB68978D788";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x78,0x7E,0x9C,0x1B,0x64,0x81,0x81,0x6F,0x88,0x1E,0xB6,0x89,0x78,0xD7,0x88};

  Airavata_getExperimentStatistics_result(const Airavata_getExperimentStatistics_result&);
  Airavata_getExperimentStatistics_result& operator=(const Airavata_getExperimentStatistics_result&);
  Airavata_getExperimentStatistics_result() {
  }

  virtual ~Airavata_getExperimentStatistics_result() throw();
   ::apache::airavata::model::experiment::ExperimentStatistics success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getExperimentStatistics_result__isset __isset;

  void __set_success(const  ::apache::airavata::model::experiment::ExperimentStatistics& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_getExperimentStatistics_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_getExperimentStatistics_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getExperimentStatistics_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getExperimentStatistics_result& obj);
};

typedef struct _Airavata_getExperimentStatistics_presult__isset {
  _Airavata_getExperimentStatistics_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getExperimentStatistics_presult__isset;

class Airavata_getExperimentStatistics_presult {
 public:

  static const char* ascii_fingerprint; // = "A6787E9C1B6481816F881EB68978D788";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x78,0x7E,0x9C,0x1B,0x64,0x81,0x81,0x6F,0x88,0x1E,0xB6,0x89,0x78,0xD7,0x88};


  virtual ~Airavata_getExperimentStatistics_presult() throw();
   ::apache::airavata::model::experiment::ExperimentStatistics* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getExperimentStatistics_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getExperimentStatistics_presult& obj);
};


class Airavata_getExperimentsInProject_args {
 public:

  static const char* ascii_fingerprint; // = "B1122ABC64D90B0DBC9C064E7B94145D";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0x12,0x2A,0xBC,0x64,0xD9,0x0B,0x0D,0xBC,0x9C,0x06,0x4E,0x7B,0x94,0x14,0x5D};

  Airavata_getExperimentsInProject_args(const Airavata_getExperimentsInProject_args&);
  Airavata_getExperimentsInProject_args& operator=(const Airavata_getExperimentsInProject_args&);
  Airavata_getExperimentsInProject_args() : projectId(), limit(0), offset(0) {
  }

  virtual ~Airavata_getExperimentsInProject_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string projectId;
  int32_t limit;
  int32_t offset;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_projectId(const std::string& val);

  void __set_limit(const int32_t val);

  void __set_offset(const int32_t val);

  bool operator == (const Airavata_getExperimentsInProject_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(projectId == rhs.projectId))
      return false;
    if (!(limit == rhs.limit))
      return false;
    if (!(offset == rhs.offset))
      return false;
    return true;
  }
  bool operator != (const Airavata_getExperimentsInProject_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getExperimentsInProject_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getExperimentsInProject_args& obj);
};


class Airavata_getExperimentsInProject_pargs {
 public:

  static const char* ascii_fingerprint; // = "B1122ABC64D90B0DBC9C064E7B94145D";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0x12,0x2A,0xBC,0x64,0xD9,0x0B,0x0D,0xBC,0x9C,0x06,0x4E,0x7B,0x94,0x14,0x5D};


  virtual ~Airavata_getExperimentsInProject_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* projectId;
  const int32_t* limit;
  const int32_t* offset;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getExperimentsInProject_pargs& obj);
};

typedef struct _Airavata_getExperimentsInProject_result__isset {
  _Airavata_getExperimentsInProject_result__isset() : success(false), ire(false), ace(false), ase(false), pnfe(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool pnfe :1;
  bool ae :1;
} _Airavata_getExperimentsInProject_result__isset;

class Airavata_getExperimentsInProject_result {
 public:

  static const char* ascii_fingerprint; // = "3B04FE1F15E6945947A3FD5096FB91AF";
  static const uint8_t binary_fingerprint[16]; // = {0x3B,0x04,0xFE,0x1F,0x15,0xE6,0x94,0x59,0x47,0xA3,0xFD,0x50,0x96,0xFB,0x91,0xAF};

  Airavata_getExperimentsInProject_result(const Airavata_getExperimentsInProject_result&);
  Airavata_getExperimentsInProject_result& operator=(const Airavata_getExperimentsInProject_result&);
  Airavata_getExperimentsInProject_result() {
  }

  virtual ~Airavata_getExperimentsInProject_result() throw();
  std::vector< ::apache::airavata::model::experiment::ExperimentModel>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::ProjectNotFoundException pnfe;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getExperimentsInProject_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::experiment::ExperimentModel> & val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_pnfe(const  ::apache::airavata::api::error::ProjectNotFoundException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_getExperimentsInProject_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(pnfe == rhs.pnfe))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_getExperimentsInProject_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getExperimentsInProject_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getExperimentsInProject_result& obj);
};

typedef struct _Airavata_getExperimentsInProject_presult__isset {
  _Airavata_getExperimentsInProject_presult__isset() : success(false), ire(false), ace(false), ase(false), pnfe(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool pnfe :1;
  bool ae :1;
} _Airavata_getExperimentsInProject_presult__isset;

class Airavata_getExperimentsInProject_presult {
 public:

  static const char* ascii_fingerprint; // = "3B04FE1F15E6945947A3FD5096FB91AF";
  static const uint8_t binary_fingerprint[16]; // = {0x3B,0x04,0xFE,0x1F,0x15,0xE6,0x94,0x59,0x47,0xA3,0xFD,0x50,0x96,0xFB,0x91,0xAF};


  virtual ~Airavata_getExperimentsInProject_presult() throw();
  std::vector< ::apache::airavata::model::experiment::ExperimentModel> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::ProjectNotFoundException pnfe;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getExperimentsInProject_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getExperimentsInProject_presult& obj);
};


class Airavata_getUserExperiments_args {
 public:

  static const char* ascii_fingerprint; // = "B0F1ED866602D6465A1E8B7B65B9DBBA";
  static const uint8_t binary_fingerprint[16]; // = {0xB0,0xF1,0xED,0x86,0x66,0x02,0xD6,0x46,0x5A,0x1E,0x8B,0x7B,0x65,0xB9,0xDB,0xBA};

  Airavata_getUserExperiments_args(const Airavata_getUserExperiments_args&);
  Airavata_getUserExperiments_args& operator=(const Airavata_getUserExperiments_args&);
  Airavata_getUserExperiments_args() : gatewayId(), userName(), limit(0), offset(0) {
  }

  virtual ~Airavata_getUserExperiments_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string gatewayId;
  std::string userName;
  int32_t limit;
  int32_t offset;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_gatewayId(const std::string& val);

  void __set_userName(const std::string& val);

  void __set_limit(const int32_t val);

  void __set_offset(const int32_t val);

  bool operator == (const Airavata_getUserExperiments_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(userName == rhs.userName))
      return false;
    if (!(limit == rhs.limit))
      return false;
    if (!(offset == rhs.offset))
      return false;
    return true;
  }
  bool operator != (const Airavata_getUserExperiments_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getUserExperiments_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getUserExperiments_args& obj);
};


class Airavata_getUserExperiments_pargs {
 public:

  static const char* ascii_fingerprint; // = "B0F1ED866602D6465A1E8B7B65B9DBBA";
  static const uint8_t binary_fingerprint[16]; // = {0xB0,0xF1,0xED,0x86,0x66,0x02,0xD6,0x46,0x5A,0x1E,0x8B,0x7B,0x65,0xB9,0xDB,0xBA};


  virtual ~Airavata_getUserExperiments_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* gatewayId;
  const std::string* userName;
  const int32_t* limit;
  const int32_t* offset;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getUserExperiments_pargs& obj);
};

typedef struct _Airavata_getUserExperiments_result__isset {
  _Airavata_getUserExperiments_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getUserExperiments_result__isset;

class Airavata_getUserExperiments_result {
 public:

  static const char* ascii_fingerprint; // = "6B4769CBA7068AF3BD2B200CE0A4C648";
  static const uint8_t binary_fingerprint[16]; // = {0x6B,0x47,0x69,0xCB,0xA7,0x06,0x8A,0xF3,0xBD,0x2B,0x20,0x0C,0xE0,0xA4,0xC6,0x48};

  Airavata_getUserExperiments_result(const Airavata_getUserExperiments_result&);
  Airavata_getUserExperiments_result& operator=(const Airavata_getUserExperiments_result&);
  Airavata_getUserExperiments_result() {
  }

  virtual ~Airavata_getUserExperiments_result() throw();
  std::vector< ::apache::airavata::model::experiment::ExperimentModel>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getUserExperiments_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::experiment::ExperimentModel> & val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_getUserExperiments_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_getUserExperiments_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getUserExperiments_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getUserExperiments_result& obj);
};

typedef struct _Airavata_getUserExperiments_presult__isset {
  _Airavata_getUserExperiments_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getUserExperiments_presult__isset;

class Airavata_getUserExperiments_presult {
 public:

  static const char* ascii_fingerprint; // = "6B4769CBA7068AF3BD2B200CE0A4C648";
  static const uint8_t binary_fingerprint[16]; // = {0x6B,0x47,0x69,0xCB,0xA7,0x06,0x8A,0xF3,0xBD,0x2B,0x20,0x0C,0xE0,0xA4,0xC6,0x48};


  virtual ~Airavata_getUserExperiments_presult() throw();
  std::vector< ::apache::airavata::model::experiment::ExperimentModel> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getUserExperiments_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getUserExperiments_presult& obj);
};


class Airavata_createExperiment_args {
 public:

  static const char* ascii_fingerprint; // = "64258B21FF25D7A0E4DBEF5C5624C598";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x25,0x8B,0x21,0xFF,0x25,0xD7,0xA0,0xE4,0xDB,0xEF,0x5C,0x56,0x24,0xC5,0x98};

  Airavata_createExperiment_args(const Airavata_createExperiment_args&);
  Airavata_createExperiment_args& operator=(const Airavata_createExperiment_args&);
  Airavata_createExperiment_args() : gatewayId() {
  }

  virtual ~Airavata_createExperiment_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string gatewayId;
   ::apache::airavata::model::experiment::ExperimentModel experiment;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_gatewayId(const std::string& val);

  void __set_experiment(const  ::apache::airavata::model::experiment::ExperimentModel& val);

  bool operator == (const Airavata_createExperiment_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(experiment == rhs.experiment))
      return false;
    return true;
  }
  bool operator != (const Airavata_createExperiment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_createExperiment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_createExperiment_args& obj);
};


class Airavata_createExperiment_pargs {
 public:

  static const char* ascii_fingerprint; // = "64258B21FF25D7A0E4DBEF5C5624C598";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x25,0x8B,0x21,0xFF,0x25,0xD7,0xA0,0xE4,0xDB,0xEF,0x5C,0x56,0x24,0xC5,0x98};


  virtual ~Airavata_createExperiment_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* gatewayId;
  const  ::apache::airavata::model::experiment::ExperimentModel* experiment;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_createExperiment_pargs& obj);
};

typedef struct _Airavata_createExperiment_result__isset {
  _Airavata_createExperiment_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_createExperiment_result__isset;

class Airavata_createExperiment_result {
 public:

  static const char* ascii_fingerprint; // = "21BF57A9FE5AAA661540804D4FB9F023";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xBF,0x57,0xA9,0xFE,0x5A,0xAA,0x66,0x15,0x40,0x80,0x4D,0x4F,0xB9,0xF0,0x23};

  Airavata_createExperiment_result(const Airavata_createExperiment_result&);
  Airavata_createExperiment_result& operator=(const Airavata_createExperiment_result&);
  Airavata_createExperiment_result() : success() {
  }

  virtual ~Airavata_createExperiment_result() throw();
  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_createExperiment_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_createExperiment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_createExperiment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_createExperiment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_createExperiment_result& obj);
};

typedef struct _Airavata_createExperiment_presult__isset {
  _Airavata_createExperiment_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_createExperiment_presult__isset;

class Airavata_createExperiment_presult {
 public:

  static const char* ascii_fingerprint; // = "21BF57A9FE5AAA661540804D4FB9F023";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xBF,0x57,0xA9,0xFE,0x5A,0xAA,0x66,0x15,0x40,0x80,0x4D,0x4F,0xB9,0xF0,0x23};


  virtual ~Airavata_createExperiment_presult() throw();
  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_createExperiment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_createExperiment_presult& obj);
};


class Airavata_getExperiment_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_getExperiment_args(const Airavata_getExperiment_args&);
  Airavata_getExperiment_args& operator=(const Airavata_getExperiment_args&);
  Airavata_getExperiment_args() : airavataExperimentId() {
  }

  virtual ~Airavata_getExperiment_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string airavataExperimentId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_airavataExperimentId(const std::string& val);

  bool operator == (const Airavata_getExperiment_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getExperiment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getExperiment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getExperiment_args& obj);
};


class Airavata_getExperiment_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_getExperiment_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* airavataExperimentId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getExperiment_pargs& obj);
};

typedef struct _Airavata_getExperiment_result__isset {
  _Airavata_getExperiment_result__isset() : success(false), ire(false), enf(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool enf :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getExperiment_result__isset;

class Airavata_getExperiment_result {
 public:

  static const char* ascii_fingerprint; // = "F15B15683AA363AAA8E0CA8E43352DF4";
  static const uint8_t binary_fingerprint[16]; // = {0xF1,0x5B,0x15,0x68,0x3A,0xA3,0x63,0xAA,0xA8,0xE0,0xCA,0x8E,0x43,0x35,0x2D,0xF4};

  Airavata_getExperiment_result(const Airavata_getExperiment_result&);
  Airavata_getExperiment_result& operator=(const Airavata_getExperiment_result&);
  Airavata_getExperiment_result() {
  }

  virtual ~Airavata_getExperiment_result() throw();
   ::apache::airavata::model::experiment::ExperimentModel success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getExperiment_result__isset __isset;

  void __set_success(const  ::apache::airavata::model::experiment::ExperimentModel& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_enf(const  ::apache::airavata::api::error::ExperimentNotFoundException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_getExperiment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(enf == rhs.enf))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_getExperiment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getExperiment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getExperiment_result& obj);
};

typedef struct _Airavata_getExperiment_presult__isset {
  _Airavata_getExperiment_presult__isset() : success(false), ire(false), enf(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool enf :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getExperiment_presult__isset;

class Airavata_getExperiment_presult {
 public:

  static const char* ascii_fingerprint; // = "F15B15683AA363AAA8E0CA8E43352DF4";
  static const uint8_t binary_fingerprint[16]; // = {0xF1,0x5B,0x15,0x68,0x3A,0xA3,0x63,0xAA,0xA8,0xE0,0xCA,0x8E,0x43,0x35,0x2D,0xF4};


  virtual ~Airavata_getExperiment_presult() throw();
   ::apache::airavata::model::experiment::ExperimentModel* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getExperiment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getExperiment_presult& obj);
};


class Airavata_updateExperiment_args {
 public:

  static const char* ascii_fingerprint; // = "64258B21FF25D7A0E4DBEF5C5624C598";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x25,0x8B,0x21,0xFF,0x25,0xD7,0xA0,0xE4,0xDB,0xEF,0x5C,0x56,0x24,0xC5,0x98};

  Airavata_updateExperiment_args(const Airavata_updateExperiment_args&);
  Airavata_updateExperiment_args& operator=(const Airavata_updateExperiment_args&);
  Airavata_updateExperiment_args() : airavataExperimentId() {
  }

  virtual ~Airavata_updateExperiment_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string airavataExperimentId;
   ::apache::airavata::model::experiment::ExperimentModel experiment;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_airavataExperimentId(const std::string& val);

  void __set_experiment(const  ::apache::airavata::model::experiment::ExperimentModel& val);

  bool operator == (const Airavata_updateExperiment_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    if (!(experiment == rhs.experiment))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateExperiment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateExperiment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateExperiment_args& obj);
};


class Airavata_updateExperiment_pargs {
 public:

  static const char* ascii_fingerprint; // = "64258B21FF25D7A0E4DBEF5C5624C598";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x25,0x8B,0x21,0xFF,0x25,0xD7,0xA0,0xE4,0xDB,0xEF,0x5C,0x56,0x24,0xC5,0x98};


  virtual ~Airavata_updateExperiment_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* airavataExperimentId;
  const  ::apache::airavata::model::experiment::ExperimentModel* experiment;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateExperiment_pargs& obj);
};

typedef struct _Airavata_updateExperiment_result__isset {
  _Airavata_updateExperiment_result__isset() : ire(false), enf(false), ace(false), ase(false), ae(false) {}
  bool ire :1;
  bool enf :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_updateExperiment_result__isset;

class Airavata_updateExperiment_result {
 public:

  static const char* ascii_fingerprint; // = "43D169870516CC442131552CFE8E86EF";
  static const uint8_t binary_fingerprint[16]; // = {0x43,0xD1,0x69,0x87,0x05,0x16,0xCC,0x44,0x21,0x31,0x55,0x2C,0xFE,0x8E,0x86,0xEF};

  Airavata_updateExperiment_result(const Airavata_updateExperiment_result&);
  Airavata_updateExperiment_result& operator=(const Airavata_updateExperiment_result&);
  Airavata_updateExperiment_result() {
  }

  virtual ~Airavata_updateExperiment_result() throw();
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_updateExperiment_result__isset __isset;

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_enf(const  ::apache::airavata::api::error::ExperimentNotFoundException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_updateExperiment_result & rhs) const
  {
    if (!(ire == rhs.ire))
      return false;
    if (!(enf == rhs.enf))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateExperiment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateExperiment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateExperiment_result& obj);
};

typedef struct _Airavata_updateExperiment_presult__isset {
  _Airavata_updateExperiment_presult__isset() : ire(false), enf(false), ace(false), ase(false), ae(false) {}
  bool ire :1;
  bool enf :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_updateExperiment_presult__isset;

class Airavata_updateExperiment_presult {
 public:

  static const char* ascii_fingerprint; // = "43D169870516CC442131552CFE8E86EF";
  static const uint8_t binary_fingerprint[16]; // = {0x43,0xD1,0x69,0x87,0x05,0x16,0xCC,0x44,0x21,0x31,0x55,0x2C,0xFE,0x8E,0x86,0xEF};


  virtual ~Airavata_updateExperiment_presult() throw();
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_updateExperiment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateExperiment_presult& obj);
};


class Airavata_updateExperimentConfiguration_args {
 public:

  static const char* ascii_fingerprint; // = "467AEC2E7897E95117F6783431F0DE50";
  static const uint8_t binary_fingerprint[16]; // = {0x46,0x7A,0xEC,0x2E,0x78,0x97,0xE9,0x51,0x17,0xF6,0x78,0x34,0x31,0xF0,0xDE,0x50};

  Airavata_updateExperimentConfiguration_args(const Airavata_updateExperimentConfiguration_args&);
  Airavata_updateExperimentConfiguration_args& operator=(const Airavata_updateExperimentConfiguration_args&);
  Airavata_updateExperimentConfiguration_args() : airavataExperimentId() {
  }

  virtual ~Airavata_updateExperimentConfiguration_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string airavataExperimentId;
   ::apache::airavata::model::experiment::UserConfigurationDataModel userConfiguration;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_airavataExperimentId(const std::string& val);

  void __set_userConfiguration(const  ::apache::airavata::model::experiment::UserConfigurationDataModel& val);

  bool operator == (const Airavata_updateExperimentConfiguration_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    if (!(userConfiguration == rhs.userConfiguration))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateExperimentConfiguration_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateExperimentConfiguration_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateExperimentConfiguration_args& obj);
};


class Airavata_updateExperimentConfiguration_pargs {
 public:

  static const char* ascii_fingerprint; // = "467AEC2E7897E95117F6783431F0DE50";
  static const uint8_t binary_fingerprint[16]; // = {0x46,0x7A,0xEC,0x2E,0x78,0x97,0xE9,0x51,0x17,0xF6,0x78,0x34,0x31,0xF0,0xDE,0x50};


  virtual ~Airavata_updateExperimentConfiguration_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* airavataExperimentId;
  const  ::apache::airavata::model::experiment::UserConfigurationDataModel* userConfiguration;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateExperimentConfiguration_pargs& obj);
};

typedef struct _Airavata_updateExperimentConfiguration_result__isset {
  _Airavata_updateExperimentConfiguration_result__isset() : ae(false) {}
  bool ae :1;
} _Airavata_updateExperimentConfiguration_result__isset;

class Airavata_updateExperimentConfiguration_result {
 public:

  static const char* ascii_fingerprint; // = "771E7EF40B572D2BFAB12C49547ADCBF";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x1E,0x7E,0xF4,0x0B,0x57,0x2D,0x2B,0xFA,0xB1,0x2C,0x49,0x54,0x7A,0xDC,0xBF};

  Airavata_updateExperimentConfiguration_result(const Airavata_updateExperimentConfiguration_result&);
  Airavata_updateExperimentConfiguration_result& operator=(const Airavata_updateExperimentConfiguration_result&);
  Airavata_updateExperimentConfiguration_result() {
  }

  virtual ~Airavata_updateExperimentConfiguration_result() throw();
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_updateExperimentConfiguration_result__isset __isset;

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_updateExperimentConfiguration_result & rhs) const
  {
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateExperimentConfiguration_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateExperimentConfiguration_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateExperimentConfiguration_result& obj);
};

typedef struct _Airavata_updateExperimentConfiguration_presult__isset {
  _Airavata_updateExperimentConfiguration_presult__isset() : ae(false) {}
  bool ae :1;
} _Airavata_updateExperimentConfiguration_presult__isset;

class Airavata_updateExperimentConfiguration_presult {
 public:

  static const char* ascii_fingerprint; // = "771E7EF40B572D2BFAB12C49547ADCBF";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x1E,0x7E,0xF4,0x0B,0x57,0x2D,0x2B,0xFA,0xB1,0x2C,0x49,0x54,0x7A,0xDC,0xBF};


  virtual ~Airavata_updateExperimentConfiguration_presult() throw();
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_updateExperimentConfiguration_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateExperimentConfiguration_presult& obj);
};


class Airavata_updateResourceScheduleing_args {
 public:

  static const char* ascii_fingerprint; // = "6415353D6CB47363460CDC52AA23527D";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x15,0x35,0x3D,0x6C,0xB4,0x73,0x63,0x46,0x0C,0xDC,0x52,0xAA,0x23,0x52,0x7D};

  Airavata_updateResourceScheduleing_args(const Airavata_updateResourceScheduleing_args&);
  Airavata_updateResourceScheduleing_args& operator=(const Airavata_updateResourceScheduleing_args&);
  Airavata_updateResourceScheduleing_args() : airavataExperimentId() {
  }

  virtual ~Airavata_updateResourceScheduleing_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string airavataExperimentId;
   ::apache::airavata::model::scheduling::ComputationalResourceSchedulingModel resourceScheduling;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_airavataExperimentId(const std::string& val);

  void __set_resourceScheduling(const  ::apache::airavata::model::scheduling::ComputationalResourceSchedulingModel& val);

  bool operator == (const Airavata_updateResourceScheduleing_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    if (!(resourceScheduling == rhs.resourceScheduling))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateResourceScheduleing_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateResourceScheduleing_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateResourceScheduleing_args& obj);
};


class Airavata_updateResourceScheduleing_pargs {
 public:

  static const char* ascii_fingerprint; // = "6415353D6CB47363460CDC52AA23527D";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x15,0x35,0x3D,0x6C,0xB4,0x73,0x63,0x46,0x0C,0xDC,0x52,0xAA,0x23,0x52,0x7D};


  virtual ~Airavata_updateResourceScheduleing_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* airavataExperimentId;
  const  ::apache::airavata::model::scheduling::ComputationalResourceSchedulingModel* resourceScheduling;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateResourceScheduleing_pargs& obj);
};

typedef struct _Airavata_updateResourceScheduleing_result__isset {
  _Airavata_updateResourceScheduleing_result__isset() : ae(false) {}
  bool ae :1;
} _Airavata_updateResourceScheduleing_result__isset;

class Airavata_updateResourceScheduleing_result {
 public:

  static const char* ascii_fingerprint; // = "771E7EF40B572D2BFAB12C49547ADCBF";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x1E,0x7E,0xF4,0x0B,0x57,0x2D,0x2B,0xFA,0xB1,0x2C,0x49,0x54,0x7A,0xDC,0xBF};

  Airavata_updateResourceScheduleing_result(const Airavata_updateResourceScheduleing_result&);
  Airavata_updateResourceScheduleing_result& operator=(const Airavata_updateResourceScheduleing_result&);
  Airavata_updateResourceScheduleing_result() {
  }

  virtual ~Airavata_updateResourceScheduleing_result() throw();
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_updateResourceScheduleing_result__isset __isset;

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_updateResourceScheduleing_result & rhs) const
  {
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateResourceScheduleing_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateResourceScheduleing_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateResourceScheduleing_result& obj);
};

typedef struct _Airavata_updateResourceScheduleing_presult__isset {
  _Airavata_updateResourceScheduleing_presult__isset() : ae(false) {}
  bool ae :1;
} _Airavata_updateResourceScheduleing_presult__isset;

class Airavata_updateResourceScheduleing_presult {
 public:

  static const char* ascii_fingerprint; // = "771E7EF40B572D2BFAB12C49547ADCBF";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x1E,0x7E,0xF4,0x0B,0x57,0x2D,0x2B,0xFA,0xB1,0x2C,0x49,0x54,0x7A,0xDC,0xBF};


  virtual ~Airavata_updateResourceScheduleing_presult() throw();
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_updateResourceScheduleing_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateResourceScheduleing_presult& obj);
};


class Airavata_validateExperiment_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_validateExperiment_args(const Airavata_validateExperiment_args&);
  Airavata_validateExperiment_args& operator=(const Airavata_validateExperiment_args&);
  Airavata_validateExperiment_args() : airavataExperimentId() {
  }

  virtual ~Airavata_validateExperiment_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string airavataExperimentId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_airavataExperimentId(const std::string& val);

  bool operator == (const Airavata_validateExperiment_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    return true;
  }
  bool operator != (const Airavata_validateExperiment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_validateExperiment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_validateExperiment_args& obj);
};


class Airavata_validateExperiment_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_validateExperiment_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* airavataExperimentId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_validateExperiment_pargs& obj);
};

typedef struct _Airavata_validateExperiment_result__isset {
  _Airavata_validateExperiment_result__isset() : success(false), ire(false), enf(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool enf :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_validateExperiment_result__isset;

class Airavata_validateExperiment_result {
 public:

  static const char* ascii_fingerprint; // = "AA751C930A18A878CB6E9D04221F5D24";
  static const uint8_t binary_fingerprint[16]; // = {0xAA,0x75,0x1C,0x93,0x0A,0x18,0xA8,0x78,0xCB,0x6E,0x9D,0x04,0x22,0x1F,0x5D,0x24};

  Airavata_validateExperiment_result(const Airavata_validateExperiment_result&);
  Airavata_validateExperiment_result& operator=(const Airavata_validateExperiment_result&);
  Airavata_validateExperiment_result() : success(0) {
  }

  virtual ~Airavata_validateExperiment_result() throw();
  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_validateExperiment_result__isset __isset;

  void __set_success(const bool val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_enf(const  ::apache::airavata::api::error::ExperimentNotFoundException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_validateExperiment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(enf == rhs.enf))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_validateExperiment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_validateExperiment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_validateExperiment_result& obj);
};

typedef struct _Airavata_validateExperiment_presult__isset {
  _Airavata_validateExperiment_presult__isset() : success(false), ire(false), enf(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool enf :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_validateExperiment_presult__isset;

class Airavata_validateExperiment_presult {
 public:

  static const char* ascii_fingerprint; // = "AA751C930A18A878CB6E9D04221F5D24";
  static const uint8_t binary_fingerprint[16]; // = {0xAA,0x75,0x1C,0x93,0x0A,0x18,0xA8,0x78,0xCB,0x6E,0x9D,0x04,0x22,0x1F,0x5D,0x24};


  virtual ~Airavata_validateExperiment_presult() throw();
  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_validateExperiment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_validateExperiment_presult& obj);
};


class Airavata_launchExperiment_args {
 public:

  static const char* ascii_fingerprint; // = "1E6476DBB101101BCE4A4B190EDEB468";
  static const uint8_t binary_fingerprint[16]; // = {0x1E,0x64,0x76,0xDB,0xB1,0x01,0x10,0x1B,0xCE,0x4A,0x4B,0x19,0x0E,0xDE,0xB4,0x68};

  Airavata_launchExperiment_args(const Airavata_launchExperiment_args&);
  Airavata_launchExperiment_args& operator=(const Airavata_launchExperiment_args&);
  Airavata_launchExperiment_args() : airavataExperimentId(), airavataCredStoreToken() {
  }

  virtual ~Airavata_launchExperiment_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string airavataExperimentId;
  std::string airavataCredStoreToken;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_airavataExperimentId(const std::string& val);

  void __set_airavataCredStoreToken(const std::string& val);

  bool operator == (const Airavata_launchExperiment_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    if (!(airavataCredStoreToken == rhs.airavataCredStoreToken))
      return false;
    return true;
  }
  bool operator != (const Airavata_launchExperiment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_launchExperiment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_launchExperiment_args& obj);
};


class Airavata_launchExperiment_pargs {
 public:

  static const char* ascii_fingerprint; // = "1E6476DBB101101BCE4A4B190EDEB468";
  static const uint8_t binary_fingerprint[16]; // = {0x1E,0x64,0x76,0xDB,0xB1,0x01,0x10,0x1B,0xCE,0x4A,0x4B,0x19,0x0E,0xDE,0xB4,0x68};


  virtual ~Airavata_launchExperiment_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* airavataExperimentId;
  const std::string* airavataCredStoreToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_launchExperiment_pargs& obj);
};

typedef struct _Airavata_launchExperiment_result__isset {
  _Airavata_launchExperiment_result__isset() : ire(false), enf(false), ace(false), ase(false), ae(false) {}
  bool ire :1;
  bool enf :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_launchExperiment_result__isset;

class Airavata_launchExperiment_result {
 public:

  static const char* ascii_fingerprint; // = "43D169870516CC442131552CFE8E86EF";
  static const uint8_t binary_fingerprint[16]; // = {0x43,0xD1,0x69,0x87,0x05,0x16,0xCC,0x44,0x21,0x31,0x55,0x2C,0xFE,0x8E,0x86,0xEF};

  Airavata_launchExperiment_result(const Airavata_launchExperiment_result&);
  Airavata_launchExperiment_result& operator=(const Airavata_launchExperiment_result&);
  Airavata_launchExperiment_result() {
  }

  virtual ~Airavata_launchExperiment_result() throw();
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_launchExperiment_result__isset __isset;

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_enf(const  ::apache::airavata::api::error::ExperimentNotFoundException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_launchExperiment_result & rhs) const
  {
    if (!(ire == rhs.ire))
      return false;
    if (!(enf == rhs.enf))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_launchExperiment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_launchExperiment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_launchExperiment_result& obj);
};

typedef struct _Airavata_launchExperiment_presult__isset {
  _Airavata_launchExperiment_presult__isset() : ire(false), enf(false), ace(false), ase(false), ae(false) {}
  bool ire :1;
  bool enf :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_launchExperiment_presult__isset;

class Airavata_launchExperiment_presult {
 public:

  static const char* ascii_fingerprint; // = "43D169870516CC442131552CFE8E86EF";
  static const uint8_t binary_fingerprint[16]; // = {0x43,0xD1,0x69,0x87,0x05,0x16,0xCC,0x44,0x21,0x31,0x55,0x2C,0xFE,0x8E,0x86,0xEF};


  virtual ~Airavata_launchExperiment_presult() throw();
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_launchExperiment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_launchExperiment_presult& obj);
};


class Airavata_getExperimentStatus_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_getExperimentStatus_args(const Airavata_getExperimentStatus_args&);
  Airavata_getExperimentStatus_args& operator=(const Airavata_getExperimentStatus_args&);
  Airavata_getExperimentStatus_args() : airavataExperimentId() {
  }

  virtual ~Airavata_getExperimentStatus_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string airavataExperimentId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_airavataExperimentId(const std::string& val);

  bool operator == (const Airavata_getExperimentStatus_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getExperimentStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getExperimentStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getExperimentStatus_args& obj);
};


class Airavata_getExperimentStatus_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_getExperimentStatus_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* airavataExperimentId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getExperimentStatus_pargs& obj);
};

typedef struct _Airavata_getExperimentStatus_result__isset {
  _Airavata_getExperimentStatus_result__isset() : success(false), ire(false), enf(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool enf :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getExperimentStatus_result__isset;

class Airavata_getExperimentStatus_result {
 public:

  static const char* ascii_fingerprint; // = "359ED00774E9E1DEDF6F53C07637AE56";
  static const uint8_t binary_fingerprint[16]; // = {0x35,0x9E,0xD0,0x07,0x74,0xE9,0xE1,0xDE,0xDF,0x6F,0x53,0xC0,0x76,0x37,0xAE,0x56};

  Airavata_getExperimentStatus_result(const Airavata_getExperimentStatus_result&);
  Airavata_getExperimentStatus_result& operator=(const Airavata_getExperimentStatus_result&);
  Airavata_getExperimentStatus_result() {
  }

  virtual ~Airavata_getExperimentStatus_result() throw();
   ::apache::airavata::model::status::ExperimentStatus success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getExperimentStatus_result__isset __isset;

  void __set_success(const  ::apache::airavata::model::status::ExperimentStatus& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_enf(const  ::apache::airavata::api::error::ExperimentNotFoundException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_getExperimentStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(enf == rhs.enf))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_getExperimentStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getExperimentStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getExperimentStatus_result& obj);
};

typedef struct _Airavata_getExperimentStatus_presult__isset {
  _Airavata_getExperimentStatus_presult__isset() : success(false), ire(false), enf(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool enf :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getExperimentStatus_presult__isset;

class Airavata_getExperimentStatus_presult {
 public:

  static const char* ascii_fingerprint; // = "359ED00774E9E1DEDF6F53C07637AE56";
  static const uint8_t binary_fingerprint[16]; // = {0x35,0x9E,0xD0,0x07,0x74,0xE9,0xE1,0xDE,0xDF,0x6F,0x53,0xC0,0x76,0x37,0xAE,0x56};


  virtual ~Airavata_getExperimentStatus_presult() throw();
   ::apache::airavata::model::status::ExperimentStatus* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getExperimentStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getExperimentStatus_presult& obj);
};


class Airavata_getExperimentOutputs_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_getExperimentOutputs_args(const Airavata_getExperimentOutputs_args&);
  Airavata_getExperimentOutputs_args& operator=(const Airavata_getExperimentOutputs_args&);
  Airavata_getExperimentOutputs_args() : airavataExperimentId() {
  }

  virtual ~Airavata_getExperimentOutputs_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string airavataExperimentId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_airavataExperimentId(const std::string& val);

  bool operator == (const Airavata_getExperimentOutputs_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getExperimentOutputs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getExperimentOutputs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getExperimentOutputs_args& obj);
};


class Airavata_getExperimentOutputs_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_getExperimentOutputs_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* airavataExperimentId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getExperimentOutputs_pargs& obj);
};

typedef struct _Airavata_getExperimentOutputs_result__isset {
  _Airavata_getExperimentOutputs_result__isset() : success(false), ire(false), enf(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool enf :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getExperimentOutputs_result__isset;

class Airavata_getExperimentOutputs_result {
 public:

  static const char* ascii_fingerprint; // = "F1F25E7831A5C4BCE01B3B33F18B3093";
  static const uint8_t binary_fingerprint[16]; // = {0xF1,0xF2,0x5E,0x78,0x31,0xA5,0xC4,0xBC,0xE0,0x1B,0x3B,0x33,0xF1,0x8B,0x30,0x93};

  Airavata_getExperimentOutputs_result(const Airavata_getExperimentOutputs_result&);
  Airavata_getExperimentOutputs_result& operator=(const Airavata_getExperimentOutputs_result&);
  Airavata_getExperimentOutputs_result() {
  }

  virtual ~Airavata_getExperimentOutputs_result() throw();
  std::vector< ::apache::airavata::model::application::io::OutputDataObjectType>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getExperimentOutputs_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::application::io::OutputDataObjectType> & val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_enf(const  ::apache::airavata::api::error::ExperimentNotFoundException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_getExperimentOutputs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(enf == rhs.enf))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_getExperimentOutputs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getExperimentOutputs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getExperimentOutputs_result& obj);
};

typedef struct _Airavata_getExperimentOutputs_presult__isset {
  _Airavata_getExperimentOutputs_presult__isset() : success(false), ire(false), enf(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool enf :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getExperimentOutputs_presult__isset;

class Airavata_getExperimentOutputs_presult {
 public:

  static const char* ascii_fingerprint; // = "F1F25E7831A5C4BCE01B3B33F18B3093";
  static const uint8_t binary_fingerprint[16]; // = {0xF1,0xF2,0x5E,0x78,0x31,0xA5,0xC4,0xBC,0xE0,0x1B,0x3B,0x33,0xF1,0x8B,0x30,0x93};


  virtual ~Airavata_getExperimentOutputs_presult() throw();
  std::vector< ::apache::airavata::model::application::io::OutputDataObjectType> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getExperimentOutputs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getExperimentOutputs_presult& obj);
};


class Airavata_getIntermediateOutputs_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_getIntermediateOutputs_args(const Airavata_getIntermediateOutputs_args&);
  Airavata_getIntermediateOutputs_args& operator=(const Airavata_getIntermediateOutputs_args&);
  Airavata_getIntermediateOutputs_args() : airavataExperimentId() {
  }

  virtual ~Airavata_getIntermediateOutputs_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string airavataExperimentId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_airavataExperimentId(const std::string& val);

  bool operator == (const Airavata_getIntermediateOutputs_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getIntermediateOutputs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getIntermediateOutputs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getIntermediateOutputs_args& obj);
};


class Airavata_getIntermediateOutputs_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_getIntermediateOutputs_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* airavataExperimentId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getIntermediateOutputs_pargs& obj);
};

typedef struct _Airavata_getIntermediateOutputs_result__isset {
  _Airavata_getIntermediateOutputs_result__isset() : success(false), ire(false), enf(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool enf :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getIntermediateOutputs_result__isset;

class Airavata_getIntermediateOutputs_result {
 public:

  static const char* ascii_fingerprint; // = "F1F25E7831A5C4BCE01B3B33F18B3093";
  static const uint8_t binary_fingerprint[16]; // = {0xF1,0xF2,0x5E,0x78,0x31,0xA5,0xC4,0xBC,0xE0,0x1B,0x3B,0x33,0xF1,0x8B,0x30,0x93};

  Airavata_getIntermediateOutputs_result(const Airavata_getIntermediateOutputs_result&);
  Airavata_getIntermediateOutputs_result& operator=(const Airavata_getIntermediateOutputs_result&);
  Airavata_getIntermediateOutputs_result() {
  }

  virtual ~Airavata_getIntermediateOutputs_result() throw();
  std::vector< ::apache::airavata::model::application::io::OutputDataObjectType>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getIntermediateOutputs_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::application::io::OutputDataObjectType> & val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_enf(const  ::apache::airavata::api::error::ExperimentNotFoundException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_getIntermediateOutputs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(enf == rhs.enf))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_getIntermediateOutputs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getIntermediateOutputs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getIntermediateOutputs_result& obj);
};

typedef struct _Airavata_getIntermediateOutputs_presult__isset {
  _Airavata_getIntermediateOutputs_presult__isset() : success(false), ire(false), enf(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool enf :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getIntermediateOutputs_presult__isset;

class Airavata_getIntermediateOutputs_presult {
 public:

  static const char* ascii_fingerprint; // = "F1F25E7831A5C4BCE01B3B33F18B3093";
  static const uint8_t binary_fingerprint[16]; // = {0xF1,0xF2,0x5E,0x78,0x31,0xA5,0xC4,0xBC,0xE0,0x1B,0x3B,0x33,0xF1,0x8B,0x30,0x93};


  virtual ~Airavata_getIntermediateOutputs_presult() throw();
  std::vector< ::apache::airavata::model::application::io::OutputDataObjectType> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getIntermediateOutputs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getIntermediateOutputs_presult& obj);
};


class Airavata_getJobStatuses_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_getJobStatuses_args(const Airavata_getJobStatuses_args&);
  Airavata_getJobStatuses_args& operator=(const Airavata_getJobStatuses_args&);
  Airavata_getJobStatuses_args() : airavataExperimentId() {
  }

  virtual ~Airavata_getJobStatuses_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string airavataExperimentId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_airavataExperimentId(const std::string& val);

  bool operator == (const Airavata_getJobStatuses_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getJobStatuses_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getJobStatuses_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getJobStatuses_args& obj);
};


class Airavata_getJobStatuses_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_getJobStatuses_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* airavataExperimentId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getJobStatuses_pargs& obj);
};

typedef struct _Airavata_getJobStatuses_result__isset {
  _Airavata_getJobStatuses_result__isset() : success(false), ire(false), enf(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool enf :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getJobStatuses_result__isset;

class Airavata_getJobStatuses_result {
 public:

  static const char* ascii_fingerprint; // = "ED706A1457C97162DDF378037B696FED";
  static const uint8_t binary_fingerprint[16]; // = {0xED,0x70,0x6A,0x14,0x57,0xC9,0x71,0x62,0xDD,0xF3,0x78,0x03,0x7B,0x69,0x6F,0xED};

  Airavata_getJobStatuses_result(const Airavata_getJobStatuses_result&);
  Airavata_getJobStatuses_result& operator=(const Airavata_getJobStatuses_result&);
  Airavata_getJobStatuses_result() {
  }

  virtual ~Airavata_getJobStatuses_result() throw();
  std::map<std::string,  ::apache::airavata::model::status::JobStatus>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getJobStatuses_result__isset __isset;

  void __set_success(const std::map<std::string,  ::apache::airavata::model::status::JobStatus> & val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_enf(const  ::apache::airavata::api::error::ExperimentNotFoundException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_getJobStatuses_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(enf == rhs.enf))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_getJobStatuses_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getJobStatuses_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getJobStatuses_result& obj);
};

typedef struct _Airavata_getJobStatuses_presult__isset {
  _Airavata_getJobStatuses_presult__isset() : success(false), ire(false), enf(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool enf :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getJobStatuses_presult__isset;

class Airavata_getJobStatuses_presult {
 public:

  static const char* ascii_fingerprint; // = "ED706A1457C97162DDF378037B696FED";
  static const uint8_t binary_fingerprint[16]; // = {0xED,0x70,0x6A,0x14,0x57,0xC9,0x71,0x62,0xDD,0xF3,0x78,0x03,0x7B,0x69,0x6F,0xED};


  virtual ~Airavata_getJobStatuses_presult() throw();
  std::map<std::string,  ::apache::airavata::model::status::JobStatus> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getJobStatuses_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getJobStatuses_presult& obj);
};


class Airavata_getJobDetails_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_getJobDetails_args(const Airavata_getJobDetails_args&);
  Airavata_getJobDetails_args& operator=(const Airavata_getJobDetails_args&);
  Airavata_getJobDetails_args() : airavataExperimentId() {
  }

  virtual ~Airavata_getJobDetails_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string airavataExperimentId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_airavataExperimentId(const std::string& val);

  bool operator == (const Airavata_getJobDetails_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getJobDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getJobDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getJobDetails_args& obj);
};


class Airavata_getJobDetails_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_getJobDetails_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* airavataExperimentId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getJobDetails_pargs& obj);
};

typedef struct _Airavata_getJobDetails_result__isset {
  _Airavata_getJobDetails_result__isset() : success(false), ire(false), enf(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool enf :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getJobDetails_result__isset;

class Airavata_getJobDetails_result {
 public:

  static const char* ascii_fingerprint; // = "85D8CE6F76E396F1CD5A41458FB135E7";
  static const uint8_t binary_fingerprint[16]; // = {0x85,0xD8,0xCE,0x6F,0x76,0xE3,0x96,0xF1,0xCD,0x5A,0x41,0x45,0x8F,0xB1,0x35,0xE7};

  Airavata_getJobDetails_result(const Airavata_getJobDetails_result&);
  Airavata_getJobDetails_result& operator=(const Airavata_getJobDetails_result&);
  Airavata_getJobDetails_result() {
  }

  virtual ~Airavata_getJobDetails_result() throw();
  std::vector< ::apache::airavata::model::job::JobModel>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getJobDetails_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::job::JobModel> & val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_enf(const  ::apache::airavata::api::error::ExperimentNotFoundException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_getJobDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(enf == rhs.enf))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_getJobDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getJobDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getJobDetails_result& obj);
};

typedef struct _Airavata_getJobDetails_presult__isset {
  _Airavata_getJobDetails_presult__isset() : success(false), ire(false), enf(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool enf :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getJobDetails_presult__isset;

class Airavata_getJobDetails_presult {
 public:

  static const char* ascii_fingerprint; // = "85D8CE6F76E396F1CD5A41458FB135E7";
  static const uint8_t binary_fingerprint[16]; // = {0x85,0xD8,0xCE,0x6F,0x76,0xE3,0x96,0xF1,0xCD,0x5A,0x41,0x45,0x8F,0xB1,0x35,0xE7};


  virtual ~Airavata_getJobDetails_presult() throw();
  std::vector< ::apache::airavata::model::job::JobModel> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getJobDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getJobDetails_presult& obj);
};

typedef struct _Airavata_cloneExperiment_args__isset {
  _Airavata_cloneExperiment_args__isset() : existingExperimentID(false), newExperimentName(false) {}
  bool existingExperimentID :1;
  bool newExperimentName :1;
} _Airavata_cloneExperiment_args__isset;

class Airavata_cloneExperiment_args {
 public:

  static const char* ascii_fingerprint; // = "1E6476DBB101101BCE4A4B190EDEB468";
  static const uint8_t binary_fingerprint[16]; // = {0x1E,0x64,0x76,0xDB,0xB1,0x01,0x10,0x1B,0xCE,0x4A,0x4B,0x19,0x0E,0xDE,0xB4,0x68};

  Airavata_cloneExperiment_args(const Airavata_cloneExperiment_args&);
  Airavata_cloneExperiment_args& operator=(const Airavata_cloneExperiment_args&);
  Airavata_cloneExperiment_args() : existingExperimentID(), newExperimentName() {
  }

  virtual ~Airavata_cloneExperiment_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string existingExperimentID;
  std::string newExperimentName;

  _Airavata_cloneExperiment_args__isset __isset;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_existingExperimentID(const std::string& val);

  void __set_newExperimentName(const std::string& val);

  bool operator == (const Airavata_cloneExperiment_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(existingExperimentID == rhs.existingExperimentID))
      return false;
    if (!(newExperimentName == rhs.newExperimentName))
      return false;
    return true;
  }
  bool operator != (const Airavata_cloneExperiment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_cloneExperiment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_cloneExperiment_args& obj);
};


class Airavata_cloneExperiment_pargs {
 public:

  static const char* ascii_fingerprint; // = "1E6476DBB101101BCE4A4B190EDEB468";
  static const uint8_t binary_fingerprint[16]; // = {0x1E,0x64,0x76,0xDB,0xB1,0x01,0x10,0x1B,0xCE,0x4A,0x4B,0x19,0x0E,0xDE,0xB4,0x68};


  virtual ~Airavata_cloneExperiment_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* existingExperimentID;
  const std::string* newExperimentName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_cloneExperiment_pargs& obj);
};

typedef struct _Airavata_cloneExperiment_result__isset {
  _Airavata_cloneExperiment_result__isset() : success(false), ire(false), enf(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool enf :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_cloneExperiment_result__isset;

class Airavata_cloneExperiment_result {
 public:

  static const char* ascii_fingerprint; // = "5F2BC41303F0AD7BB78278200B560B90";
  static const uint8_t binary_fingerprint[16]; // = {0x5F,0x2B,0xC4,0x13,0x03,0xF0,0xAD,0x7B,0xB7,0x82,0x78,0x20,0x0B,0x56,0x0B,0x90};

  Airavata_cloneExperiment_result(const Airavata_cloneExperiment_result&);
  Airavata_cloneExperiment_result& operator=(const Airavata_cloneExperiment_result&);
  Airavata_cloneExperiment_result() : success() {
  }

  virtual ~Airavata_cloneExperiment_result() throw();
  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_cloneExperiment_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_enf(const  ::apache::airavata::api::error::ExperimentNotFoundException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_cloneExperiment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(enf == rhs.enf))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_cloneExperiment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_cloneExperiment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_cloneExperiment_result& obj);
};

typedef struct _Airavata_cloneExperiment_presult__isset {
  _Airavata_cloneExperiment_presult__isset() : success(false), ire(false), enf(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool enf :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_cloneExperiment_presult__isset;

class Airavata_cloneExperiment_presult {
 public:

  static const char* ascii_fingerprint; // = "5F2BC41303F0AD7BB78278200B560B90";
  static const uint8_t binary_fingerprint[16]; // = {0x5F,0x2B,0xC4,0x13,0x03,0xF0,0xAD,0x7B,0xB7,0x82,0x78,0x20,0x0B,0x56,0x0B,0x90};


  virtual ~Airavata_cloneExperiment_presult() throw();
  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_cloneExperiment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_cloneExperiment_presult& obj);
};

typedef struct _Airavata_terminateExperiment_args__isset {
  _Airavata_terminateExperiment_args__isset() : airavataExperimentId(false), tokenId(false) {}
  bool airavataExperimentId :1;
  bool tokenId :1;
} _Airavata_terminateExperiment_args__isset;

class Airavata_terminateExperiment_args {
 public:

  static const char* ascii_fingerprint; // = "1E6476DBB101101BCE4A4B190EDEB468";
  static const uint8_t binary_fingerprint[16]; // = {0x1E,0x64,0x76,0xDB,0xB1,0x01,0x10,0x1B,0xCE,0x4A,0x4B,0x19,0x0E,0xDE,0xB4,0x68};

  Airavata_terminateExperiment_args(const Airavata_terminateExperiment_args&);
  Airavata_terminateExperiment_args& operator=(const Airavata_terminateExperiment_args&);
  Airavata_terminateExperiment_args() : airavataExperimentId(), tokenId() {
  }

  virtual ~Airavata_terminateExperiment_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string airavataExperimentId;
  std::string tokenId;

  _Airavata_terminateExperiment_args__isset __isset;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_airavataExperimentId(const std::string& val);

  void __set_tokenId(const std::string& val);

  bool operator == (const Airavata_terminateExperiment_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(airavataExperimentId == rhs.airavataExperimentId))
      return false;
    if (!(tokenId == rhs.tokenId))
      return false;
    return true;
  }
  bool operator != (const Airavata_terminateExperiment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_terminateExperiment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_terminateExperiment_args& obj);
};


class Airavata_terminateExperiment_pargs {
 public:

  static const char* ascii_fingerprint; // = "1E6476DBB101101BCE4A4B190EDEB468";
  static const uint8_t binary_fingerprint[16]; // = {0x1E,0x64,0x76,0xDB,0xB1,0x01,0x10,0x1B,0xCE,0x4A,0x4B,0x19,0x0E,0xDE,0xB4,0x68};


  virtual ~Airavata_terminateExperiment_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* airavataExperimentId;
  const std::string* tokenId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_terminateExperiment_pargs& obj);
};

typedef struct _Airavata_terminateExperiment_result__isset {
  _Airavata_terminateExperiment_result__isset() : ire(false), enf(false), ace(false), ase(false), ae(false) {}
  bool ire :1;
  bool enf :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_terminateExperiment_result__isset;

class Airavata_terminateExperiment_result {
 public:

  static const char* ascii_fingerprint; // = "43D169870516CC442131552CFE8E86EF";
  static const uint8_t binary_fingerprint[16]; // = {0x43,0xD1,0x69,0x87,0x05,0x16,0xCC,0x44,0x21,0x31,0x55,0x2C,0xFE,0x8E,0x86,0xEF};

  Airavata_terminateExperiment_result(const Airavata_terminateExperiment_result&);
  Airavata_terminateExperiment_result& operator=(const Airavata_terminateExperiment_result&);
  Airavata_terminateExperiment_result() {
  }

  virtual ~Airavata_terminateExperiment_result() throw();
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_terminateExperiment_result__isset __isset;

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_enf(const  ::apache::airavata::api::error::ExperimentNotFoundException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_terminateExperiment_result & rhs) const
  {
    if (!(ire == rhs.ire))
      return false;
    if (!(enf == rhs.enf))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_terminateExperiment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_terminateExperiment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_terminateExperiment_result& obj);
};

typedef struct _Airavata_terminateExperiment_presult__isset {
  _Airavata_terminateExperiment_presult__isset() : ire(false), enf(false), ace(false), ase(false), ae(false) {}
  bool ire :1;
  bool enf :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_terminateExperiment_presult__isset;

class Airavata_terminateExperiment_presult {
 public:

  static const char* ascii_fingerprint; // = "43D169870516CC442131552CFE8E86EF";
  static const uint8_t binary_fingerprint[16]; // = {0x43,0xD1,0x69,0x87,0x05,0x16,0xCC,0x44,0x21,0x31,0x55,0x2C,0xFE,0x8E,0x86,0xEF};


  virtual ~Airavata_terminateExperiment_presult() throw();
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::ExperimentNotFoundException enf;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_terminateExperiment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_terminateExperiment_presult& obj);
};


class Airavata_registerApplicationModule_args {
 public:

  static const char* ascii_fingerprint; // = "850D82BACF4DFB254955099A8DFC34BA";
  static const uint8_t binary_fingerprint[16]; // = {0x85,0x0D,0x82,0xBA,0xCF,0x4D,0xFB,0x25,0x49,0x55,0x09,0x9A,0x8D,0xFC,0x34,0xBA};

  Airavata_registerApplicationModule_args(const Airavata_registerApplicationModule_args&);
  Airavata_registerApplicationModule_args& operator=(const Airavata_registerApplicationModule_args&);
  Airavata_registerApplicationModule_args() : gatewayId() {
  }

  virtual ~Airavata_registerApplicationModule_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string gatewayId;
   ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule applicationModule;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_gatewayId(const std::string& val);

  void __set_applicationModule(const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule& val);

  bool operator == (const Airavata_registerApplicationModule_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(applicationModule == rhs.applicationModule))
      return false;
    return true;
  }
  bool operator != (const Airavata_registerApplicationModule_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_registerApplicationModule_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_registerApplicationModule_args& obj);
};


class Airavata_registerApplicationModule_pargs {
 public:

  static const char* ascii_fingerprint; // = "850D82BACF4DFB254955099A8DFC34BA";
  static const uint8_t binary_fingerprint[16]; // = {0x85,0x0D,0x82,0xBA,0xCF,0x4D,0xFB,0x25,0x49,0x55,0x09,0x9A,0x8D,0xFC,0x34,0xBA};


  virtual ~Airavata_registerApplicationModule_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* gatewayId;
  const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule* applicationModule;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_registerApplicationModule_pargs& obj);
};

typedef struct _Airavata_registerApplicationModule_result__isset {
  _Airavata_registerApplicationModule_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_registerApplicationModule_result__isset;

class Airavata_registerApplicationModule_result {
 public:

  static const char* ascii_fingerprint; // = "21BF57A9FE5AAA661540804D4FB9F023";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xBF,0x57,0xA9,0xFE,0x5A,0xAA,0x66,0x15,0x40,0x80,0x4D,0x4F,0xB9,0xF0,0x23};

  Airavata_registerApplicationModule_result(const Airavata_registerApplicationModule_result&);
  Airavata_registerApplicationModule_result& operator=(const Airavata_registerApplicationModule_result&);
  Airavata_registerApplicationModule_result() : success() {
  }

  virtual ~Airavata_registerApplicationModule_result() throw();
  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_registerApplicationModule_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_registerApplicationModule_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_registerApplicationModule_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_registerApplicationModule_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_registerApplicationModule_result& obj);
};

typedef struct _Airavata_registerApplicationModule_presult__isset {
  _Airavata_registerApplicationModule_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_registerApplicationModule_presult__isset;

class Airavata_registerApplicationModule_presult {
 public:

  static const char* ascii_fingerprint; // = "21BF57A9FE5AAA661540804D4FB9F023";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xBF,0x57,0xA9,0xFE,0x5A,0xAA,0x66,0x15,0x40,0x80,0x4D,0x4F,0xB9,0xF0,0x23};


  virtual ~Airavata_registerApplicationModule_presult() throw();
  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_registerApplicationModule_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_registerApplicationModule_presult& obj);
};


class Airavata_getApplicationModule_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_getApplicationModule_args(const Airavata_getApplicationModule_args&);
  Airavata_getApplicationModule_args& operator=(const Airavata_getApplicationModule_args&);
  Airavata_getApplicationModule_args() : appModuleId() {
  }

  virtual ~Airavata_getApplicationModule_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string appModuleId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_appModuleId(const std::string& val);

  bool operator == (const Airavata_getApplicationModule_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(appModuleId == rhs.appModuleId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getApplicationModule_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getApplicationModule_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getApplicationModule_args& obj);
};


class Airavata_getApplicationModule_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_getApplicationModule_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* appModuleId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getApplicationModule_pargs& obj);
};

typedef struct _Airavata_getApplicationModule_result__isset {
  _Airavata_getApplicationModule_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getApplicationModule_result__isset;

class Airavata_getApplicationModule_result {
 public:

  static const char* ascii_fingerprint; // = "00BD2C6C9666CBA83810C7F0EAD98570";
  static const uint8_t binary_fingerprint[16]; // = {0x00,0xBD,0x2C,0x6C,0x96,0x66,0xCB,0xA8,0x38,0x10,0xC7,0xF0,0xEA,0xD9,0x85,0x70};

  Airavata_getApplicationModule_result(const Airavata_getApplicationModule_result&);
  Airavata_getApplicationModule_result& operator=(const Airavata_getApplicationModule_result&);
  Airavata_getApplicationModule_result() {
  }

  virtual ~Airavata_getApplicationModule_result() throw();
   ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getApplicationModule_result__isset __isset;

  void __set_success(const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_getApplicationModule_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_getApplicationModule_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getApplicationModule_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getApplicationModule_result& obj);
};

typedef struct _Airavata_getApplicationModule_presult__isset {
  _Airavata_getApplicationModule_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getApplicationModule_presult__isset;

class Airavata_getApplicationModule_presult {
 public:

  static const char* ascii_fingerprint; // = "00BD2C6C9666CBA83810C7F0EAD98570";
  static const uint8_t binary_fingerprint[16]; // = {0x00,0xBD,0x2C,0x6C,0x96,0x66,0xCB,0xA8,0x38,0x10,0xC7,0xF0,0xEA,0xD9,0x85,0x70};


  virtual ~Airavata_getApplicationModule_presult() throw();
   ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getApplicationModule_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getApplicationModule_presult& obj);
};


class Airavata_updateApplicationModule_args {
 public:

  static const char* ascii_fingerprint; // = "850D82BACF4DFB254955099A8DFC34BA";
  static const uint8_t binary_fingerprint[16]; // = {0x85,0x0D,0x82,0xBA,0xCF,0x4D,0xFB,0x25,0x49,0x55,0x09,0x9A,0x8D,0xFC,0x34,0xBA};

  Airavata_updateApplicationModule_args(const Airavata_updateApplicationModule_args&);
  Airavata_updateApplicationModule_args& operator=(const Airavata_updateApplicationModule_args&);
  Airavata_updateApplicationModule_args() : appModuleId() {
  }

  virtual ~Airavata_updateApplicationModule_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string appModuleId;
   ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule applicationModule;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_appModuleId(const std::string& val);

  void __set_applicationModule(const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule& val);

  bool operator == (const Airavata_updateApplicationModule_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(appModuleId == rhs.appModuleId))
      return false;
    if (!(applicationModule == rhs.applicationModule))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateApplicationModule_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateApplicationModule_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateApplicationModule_args& obj);
};


class Airavata_updateApplicationModule_pargs {
 public:

  static const char* ascii_fingerprint; // = "850D82BACF4DFB254955099A8DFC34BA";
  static const uint8_t binary_fingerprint[16]; // = {0x85,0x0D,0x82,0xBA,0xCF,0x4D,0xFB,0x25,0x49,0x55,0x09,0x9A,0x8D,0xFC,0x34,0xBA};


  virtual ~Airavata_updateApplicationModule_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* appModuleId;
  const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule* applicationModule;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateApplicationModule_pargs& obj);
};

typedef struct _Airavata_updateApplicationModule_result__isset {
  _Airavata_updateApplicationModule_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_updateApplicationModule_result__isset;

class Airavata_updateApplicationModule_result {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};

  Airavata_updateApplicationModule_result(const Airavata_updateApplicationModule_result&);
  Airavata_updateApplicationModule_result& operator=(const Airavata_updateApplicationModule_result&);
  Airavata_updateApplicationModule_result() : success(0) {
  }

  virtual ~Airavata_updateApplicationModule_result() throw();
  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_updateApplicationModule_result__isset __isset;

  void __set_success(const bool val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_updateApplicationModule_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateApplicationModule_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateApplicationModule_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateApplicationModule_result& obj);
};

typedef struct _Airavata_updateApplicationModule_presult__isset {
  _Airavata_updateApplicationModule_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_updateApplicationModule_presult__isset;

class Airavata_updateApplicationModule_presult {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};


  virtual ~Airavata_updateApplicationModule_presult() throw();
  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_updateApplicationModule_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateApplicationModule_presult& obj);
};


class Airavata_getAllAppModules_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_getAllAppModules_args(const Airavata_getAllAppModules_args&);
  Airavata_getAllAppModules_args& operator=(const Airavata_getAllAppModules_args&);
  Airavata_getAllAppModules_args() : gatewayId() {
  }

  virtual ~Airavata_getAllAppModules_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string gatewayId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_gatewayId(const std::string& val);

  bool operator == (const Airavata_getAllAppModules_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(gatewayId == rhs.gatewayId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllAppModules_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllAppModules_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAllAppModules_args& obj);
};


class Airavata_getAllAppModules_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_getAllAppModules_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* gatewayId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAllAppModules_pargs& obj);
};

typedef struct _Airavata_getAllAppModules_result__isset {
  _Airavata_getAllAppModules_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getAllAppModules_result__isset;

class Airavata_getAllAppModules_result {
 public:

  static const char* ascii_fingerprint; // = "6E3DB572307038689ADE886C672B42E3";
  static const uint8_t binary_fingerprint[16]; // = {0x6E,0x3D,0xB5,0x72,0x30,0x70,0x38,0x68,0x9A,0xDE,0x88,0x6C,0x67,0x2B,0x42,0xE3};

  Airavata_getAllAppModules_result(const Airavata_getAllAppModules_result&);
  Airavata_getAllAppModules_result& operator=(const Airavata_getAllAppModules_result&);
  Airavata_getAllAppModules_result() {
  }

  virtual ~Airavata_getAllAppModules_result() throw();
  std::vector< ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getAllAppModules_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule> & val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_getAllAppModules_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllAppModules_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllAppModules_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAllAppModules_result& obj);
};

typedef struct _Airavata_getAllAppModules_presult__isset {
  _Airavata_getAllAppModules_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getAllAppModules_presult__isset;

class Airavata_getAllAppModules_presult {
 public:

  static const char* ascii_fingerprint; // = "6E3DB572307038689ADE886C672B42E3";
  static const uint8_t binary_fingerprint[16]; // = {0x6E,0x3D,0xB5,0x72,0x30,0x70,0x38,0x68,0x9A,0xDE,0x88,0x6C,0x67,0x2B,0x42,0xE3};


  virtual ~Airavata_getAllAppModules_presult() throw();
  std::vector< ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getAllAppModules_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAllAppModules_presult& obj);
};


class Airavata_deleteApplicationModule_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_deleteApplicationModule_args(const Airavata_deleteApplicationModule_args&);
  Airavata_deleteApplicationModule_args& operator=(const Airavata_deleteApplicationModule_args&);
  Airavata_deleteApplicationModule_args() : appModuleId() {
  }

  virtual ~Airavata_deleteApplicationModule_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string appModuleId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_appModuleId(const std::string& val);

  bool operator == (const Airavata_deleteApplicationModule_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(appModuleId == rhs.appModuleId))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteApplicationModule_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteApplicationModule_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteApplicationModule_args& obj);
};


class Airavata_deleteApplicationModule_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_deleteApplicationModule_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* appModuleId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteApplicationModule_pargs& obj);
};

typedef struct _Airavata_deleteApplicationModule_result__isset {
  _Airavata_deleteApplicationModule_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_deleteApplicationModule_result__isset;

class Airavata_deleteApplicationModule_result {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};

  Airavata_deleteApplicationModule_result(const Airavata_deleteApplicationModule_result&);
  Airavata_deleteApplicationModule_result& operator=(const Airavata_deleteApplicationModule_result&);
  Airavata_deleteApplicationModule_result() : success(0) {
  }

  virtual ~Airavata_deleteApplicationModule_result() throw();
  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_deleteApplicationModule_result__isset __isset;

  void __set_success(const bool val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_deleteApplicationModule_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteApplicationModule_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteApplicationModule_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteApplicationModule_result& obj);
};

typedef struct _Airavata_deleteApplicationModule_presult__isset {
  _Airavata_deleteApplicationModule_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_deleteApplicationModule_presult__isset;

class Airavata_deleteApplicationModule_presult {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};


  virtual ~Airavata_deleteApplicationModule_presult() throw();
  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_deleteApplicationModule_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteApplicationModule_presult& obj);
};


class Airavata_registerApplicationDeployment_args {
 public:

  static const char* ascii_fingerprint; // = "5B419E78EF9104AB913EF5A04F45D322";
  static const uint8_t binary_fingerprint[16]; // = {0x5B,0x41,0x9E,0x78,0xEF,0x91,0x04,0xAB,0x91,0x3E,0xF5,0xA0,0x4F,0x45,0xD3,0x22};

  Airavata_registerApplicationDeployment_args(const Airavata_registerApplicationDeployment_args&);
  Airavata_registerApplicationDeployment_args& operator=(const Airavata_registerApplicationDeployment_args&);
  Airavata_registerApplicationDeployment_args() : gatewayId() {
  }

  virtual ~Airavata_registerApplicationDeployment_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string gatewayId;
   ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription applicationDeployment;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_gatewayId(const std::string& val);

  void __set_applicationDeployment(const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription& val);

  bool operator == (const Airavata_registerApplicationDeployment_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(applicationDeployment == rhs.applicationDeployment))
      return false;
    return true;
  }
  bool operator != (const Airavata_registerApplicationDeployment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_registerApplicationDeployment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_registerApplicationDeployment_args& obj);
};


class Airavata_registerApplicationDeployment_pargs {
 public:

  static const char* ascii_fingerprint; // = "5B419E78EF9104AB913EF5A04F45D322";
  static const uint8_t binary_fingerprint[16]; // = {0x5B,0x41,0x9E,0x78,0xEF,0x91,0x04,0xAB,0x91,0x3E,0xF5,0xA0,0x4F,0x45,0xD3,0x22};


  virtual ~Airavata_registerApplicationDeployment_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* gatewayId;
  const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription* applicationDeployment;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_registerApplicationDeployment_pargs& obj);
};

typedef struct _Airavata_registerApplicationDeployment_result__isset {
  _Airavata_registerApplicationDeployment_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_registerApplicationDeployment_result__isset;

class Airavata_registerApplicationDeployment_result {
 public:

  static const char* ascii_fingerprint; // = "21BF57A9FE5AAA661540804D4FB9F023";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xBF,0x57,0xA9,0xFE,0x5A,0xAA,0x66,0x15,0x40,0x80,0x4D,0x4F,0xB9,0xF0,0x23};

  Airavata_registerApplicationDeployment_result(const Airavata_registerApplicationDeployment_result&);
  Airavata_registerApplicationDeployment_result& operator=(const Airavata_registerApplicationDeployment_result&);
  Airavata_registerApplicationDeployment_result() : success() {
  }

  virtual ~Airavata_registerApplicationDeployment_result() throw();
  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_registerApplicationDeployment_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_registerApplicationDeployment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_registerApplicationDeployment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_registerApplicationDeployment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_registerApplicationDeployment_result& obj);
};

typedef struct _Airavata_registerApplicationDeployment_presult__isset {
  _Airavata_registerApplicationDeployment_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_registerApplicationDeployment_presult__isset;

class Airavata_registerApplicationDeployment_presult {
 public:

  static const char* ascii_fingerprint; // = "21BF57A9FE5AAA661540804D4FB9F023";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xBF,0x57,0xA9,0xFE,0x5A,0xAA,0x66,0x15,0x40,0x80,0x4D,0x4F,0xB9,0xF0,0x23};


  virtual ~Airavata_registerApplicationDeployment_presult() throw();
  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_registerApplicationDeployment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_registerApplicationDeployment_presult& obj);
};


class Airavata_getApplicationDeployment_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_getApplicationDeployment_args(const Airavata_getApplicationDeployment_args&);
  Airavata_getApplicationDeployment_args& operator=(const Airavata_getApplicationDeployment_args&);
  Airavata_getApplicationDeployment_args() : appDeploymentId() {
  }

  virtual ~Airavata_getApplicationDeployment_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string appDeploymentId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_appDeploymentId(const std::string& val);

  bool operator == (const Airavata_getApplicationDeployment_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(appDeploymentId == rhs.appDeploymentId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getApplicationDeployment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getApplicationDeployment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getApplicationDeployment_args& obj);
};


class Airavata_getApplicationDeployment_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_getApplicationDeployment_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* appDeploymentId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getApplicationDeployment_pargs& obj);
};

typedef struct _Airavata_getApplicationDeployment_result__isset {
  _Airavata_getApplicationDeployment_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getApplicationDeployment_result__isset;

class Airavata_getApplicationDeployment_result {
 public:

  static const char* ascii_fingerprint; // = "0BE777CC1A559906DC782B64EA24451D";
  static const uint8_t binary_fingerprint[16]; // = {0x0B,0xE7,0x77,0xCC,0x1A,0x55,0x99,0x06,0xDC,0x78,0x2B,0x64,0xEA,0x24,0x45,0x1D};

  Airavata_getApplicationDeployment_result(const Airavata_getApplicationDeployment_result&);
  Airavata_getApplicationDeployment_result& operator=(const Airavata_getApplicationDeployment_result&);
  Airavata_getApplicationDeployment_result() {
  }

  virtual ~Airavata_getApplicationDeployment_result() throw();
   ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getApplicationDeployment_result__isset __isset;

  void __set_success(const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_getApplicationDeployment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_getApplicationDeployment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getApplicationDeployment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getApplicationDeployment_result& obj);
};

typedef struct _Airavata_getApplicationDeployment_presult__isset {
  _Airavata_getApplicationDeployment_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getApplicationDeployment_presult__isset;

class Airavata_getApplicationDeployment_presult {
 public:

  static const char* ascii_fingerprint; // = "0BE777CC1A559906DC782B64EA24451D";
  static const uint8_t binary_fingerprint[16]; // = {0x0B,0xE7,0x77,0xCC,0x1A,0x55,0x99,0x06,0xDC,0x78,0x2B,0x64,0xEA,0x24,0x45,0x1D};


  virtual ~Airavata_getApplicationDeployment_presult() throw();
   ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getApplicationDeployment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getApplicationDeployment_presult& obj);
};


class Airavata_updateApplicationDeployment_args {
 public:

  static const char* ascii_fingerprint; // = "5B419E78EF9104AB913EF5A04F45D322";
  static const uint8_t binary_fingerprint[16]; // = {0x5B,0x41,0x9E,0x78,0xEF,0x91,0x04,0xAB,0x91,0x3E,0xF5,0xA0,0x4F,0x45,0xD3,0x22};

  Airavata_updateApplicationDeployment_args(const Airavata_updateApplicationDeployment_args&);
  Airavata_updateApplicationDeployment_args& operator=(const Airavata_updateApplicationDeployment_args&);
  Airavata_updateApplicationDeployment_args() : appDeploymentId() {
  }

  virtual ~Airavata_updateApplicationDeployment_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string appDeploymentId;
   ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription applicationDeployment;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_appDeploymentId(const std::string& val);

  void __set_applicationDeployment(const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription& val);

  bool operator == (const Airavata_updateApplicationDeployment_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(appDeploymentId == rhs.appDeploymentId))
      return false;
    if (!(applicationDeployment == rhs.applicationDeployment))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateApplicationDeployment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateApplicationDeployment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateApplicationDeployment_args& obj);
};


class Airavata_updateApplicationDeployment_pargs {
 public:

  static const char* ascii_fingerprint; // = "5B419E78EF9104AB913EF5A04F45D322";
  static const uint8_t binary_fingerprint[16]; // = {0x5B,0x41,0x9E,0x78,0xEF,0x91,0x04,0xAB,0x91,0x3E,0xF5,0xA0,0x4F,0x45,0xD3,0x22};


  virtual ~Airavata_updateApplicationDeployment_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* appDeploymentId;
  const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription* applicationDeployment;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateApplicationDeployment_pargs& obj);
};

typedef struct _Airavata_updateApplicationDeployment_result__isset {
  _Airavata_updateApplicationDeployment_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_updateApplicationDeployment_result__isset;

class Airavata_updateApplicationDeployment_result {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};

  Airavata_updateApplicationDeployment_result(const Airavata_updateApplicationDeployment_result&);
  Airavata_updateApplicationDeployment_result& operator=(const Airavata_updateApplicationDeployment_result&);
  Airavata_updateApplicationDeployment_result() : success(0) {
  }

  virtual ~Airavata_updateApplicationDeployment_result() throw();
  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_updateApplicationDeployment_result__isset __isset;

  void __set_success(const bool val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_updateApplicationDeployment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateApplicationDeployment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateApplicationDeployment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateApplicationDeployment_result& obj);
};

typedef struct _Airavata_updateApplicationDeployment_presult__isset {
  _Airavata_updateApplicationDeployment_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_updateApplicationDeployment_presult__isset;

class Airavata_updateApplicationDeployment_presult {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};


  virtual ~Airavata_updateApplicationDeployment_presult() throw();
  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_updateApplicationDeployment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateApplicationDeployment_presult& obj);
};


class Airavata_deleteApplicationDeployment_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_deleteApplicationDeployment_args(const Airavata_deleteApplicationDeployment_args&);
  Airavata_deleteApplicationDeployment_args& operator=(const Airavata_deleteApplicationDeployment_args&);
  Airavata_deleteApplicationDeployment_args() : appDeploymentId() {
  }

  virtual ~Airavata_deleteApplicationDeployment_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string appDeploymentId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_appDeploymentId(const std::string& val);

  bool operator == (const Airavata_deleteApplicationDeployment_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(appDeploymentId == rhs.appDeploymentId))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteApplicationDeployment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteApplicationDeployment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteApplicationDeployment_args& obj);
};


class Airavata_deleteApplicationDeployment_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_deleteApplicationDeployment_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* appDeploymentId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteApplicationDeployment_pargs& obj);
};

typedef struct _Airavata_deleteApplicationDeployment_result__isset {
  _Airavata_deleteApplicationDeployment_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_deleteApplicationDeployment_result__isset;

class Airavata_deleteApplicationDeployment_result {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};

  Airavata_deleteApplicationDeployment_result(const Airavata_deleteApplicationDeployment_result&);
  Airavata_deleteApplicationDeployment_result& operator=(const Airavata_deleteApplicationDeployment_result&);
  Airavata_deleteApplicationDeployment_result() : success(0) {
  }

  virtual ~Airavata_deleteApplicationDeployment_result() throw();
  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_deleteApplicationDeployment_result__isset __isset;

  void __set_success(const bool val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_deleteApplicationDeployment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteApplicationDeployment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteApplicationDeployment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteApplicationDeployment_result& obj);
};

typedef struct _Airavata_deleteApplicationDeployment_presult__isset {
  _Airavata_deleteApplicationDeployment_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_deleteApplicationDeployment_presult__isset;

class Airavata_deleteApplicationDeployment_presult {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};


  virtual ~Airavata_deleteApplicationDeployment_presult() throw();
  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_deleteApplicationDeployment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteApplicationDeployment_presult& obj);
};


class Airavata_getAllApplicationDeployments_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_getAllApplicationDeployments_args(const Airavata_getAllApplicationDeployments_args&);
  Airavata_getAllApplicationDeployments_args& operator=(const Airavata_getAllApplicationDeployments_args&);
  Airavata_getAllApplicationDeployments_args() : gatewayId() {
  }

  virtual ~Airavata_getAllApplicationDeployments_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string gatewayId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_gatewayId(const std::string& val);

  bool operator == (const Airavata_getAllApplicationDeployments_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(gatewayId == rhs.gatewayId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllApplicationDeployments_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllApplicationDeployments_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAllApplicationDeployments_args& obj);
};


class Airavata_getAllApplicationDeployments_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_getAllApplicationDeployments_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* gatewayId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAllApplicationDeployments_pargs& obj);
};

typedef struct _Airavata_getAllApplicationDeployments_result__isset {
  _Airavata_getAllApplicationDeployments_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getAllApplicationDeployments_result__isset;

class Airavata_getAllApplicationDeployments_result {
 public:

  static const char* ascii_fingerprint; // = "A9CF1ABBE38E1B9F68F5049A8C29C04D";
  static const uint8_t binary_fingerprint[16]; // = {0xA9,0xCF,0x1A,0xBB,0xE3,0x8E,0x1B,0x9F,0x68,0xF5,0x04,0x9A,0x8C,0x29,0xC0,0x4D};

  Airavata_getAllApplicationDeployments_result(const Airavata_getAllApplicationDeployments_result&);
  Airavata_getAllApplicationDeployments_result& operator=(const Airavata_getAllApplicationDeployments_result&);
  Airavata_getAllApplicationDeployments_result() {
  }

  virtual ~Airavata_getAllApplicationDeployments_result() throw();
  std::vector< ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getAllApplicationDeployments_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription> & val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_getAllApplicationDeployments_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllApplicationDeployments_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllApplicationDeployments_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAllApplicationDeployments_result& obj);
};

typedef struct _Airavata_getAllApplicationDeployments_presult__isset {
  _Airavata_getAllApplicationDeployments_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getAllApplicationDeployments_presult__isset;

class Airavata_getAllApplicationDeployments_presult {
 public:

  static const char* ascii_fingerprint; // = "A9CF1ABBE38E1B9F68F5049A8C29C04D";
  static const uint8_t binary_fingerprint[16]; // = {0xA9,0xCF,0x1A,0xBB,0xE3,0x8E,0x1B,0x9F,0x68,0xF5,0x04,0x9A,0x8C,0x29,0xC0,0x4D};


  virtual ~Airavata_getAllApplicationDeployments_presult() throw();
  std::vector< ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getAllApplicationDeployments_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAllApplicationDeployments_presult& obj);
};


class Airavata_getAppModuleDeployedResources_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_getAppModuleDeployedResources_args(const Airavata_getAppModuleDeployedResources_args&);
  Airavata_getAppModuleDeployedResources_args& operator=(const Airavata_getAppModuleDeployedResources_args&);
  Airavata_getAppModuleDeployedResources_args() : appModuleId() {
  }

  virtual ~Airavata_getAppModuleDeployedResources_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string appModuleId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_appModuleId(const std::string& val);

  bool operator == (const Airavata_getAppModuleDeployedResources_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(appModuleId == rhs.appModuleId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAppModuleDeployedResources_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAppModuleDeployedResources_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAppModuleDeployedResources_args& obj);
};


class Airavata_getAppModuleDeployedResources_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_getAppModuleDeployedResources_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* appModuleId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAppModuleDeployedResources_pargs& obj);
};

typedef struct _Airavata_getAppModuleDeployedResources_result__isset {
  _Airavata_getAppModuleDeployedResources_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getAppModuleDeployedResources_result__isset;

class Airavata_getAppModuleDeployedResources_result {
 public:

  static const char* ascii_fingerprint; // = "B5ACC9137B7AE989339E86F91B264092";
  static const uint8_t binary_fingerprint[16]; // = {0xB5,0xAC,0xC9,0x13,0x7B,0x7A,0xE9,0x89,0x33,0x9E,0x86,0xF9,0x1B,0x26,0x40,0x92};

  Airavata_getAppModuleDeployedResources_result(const Airavata_getAppModuleDeployedResources_result&);
  Airavata_getAppModuleDeployedResources_result& operator=(const Airavata_getAppModuleDeployedResources_result&);
  Airavata_getAppModuleDeployedResources_result() {
  }

  virtual ~Airavata_getAppModuleDeployedResources_result() throw();
  std::vector<std::string>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getAppModuleDeployedResources_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_getAppModuleDeployedResources_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAppModuleDeployedResources_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAppModuleDeployedResources_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAppModuleDeployedResources_result& obj);
};

typedef struct _Airavata_getAppModuleDeployedResources_presult__isset {
  _Airavata_getAppModuleDeployedResources_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getAppModuleDeployedResources_presult__isset;

class Airavata_getAppModuleDeployedResources_presult {
 public:

  static const char* ascii_fingerprint; // = "B5ACC9137B7AE989339E86F91B264092";
  static const uint8_t binary_fingerprint[16]; // = {0xB5,0xAC,0xC9,0x13,0x7B,0x7A,0xE9,0x89,0x33,0x9E,0x86,0xF9,0x1B,0x26,0x40,0x92};


  virtual ~Airavata_getAppModuleDeployedResources_presult() throw();
  std::vector<std::string> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getAppModuleDeployedResources_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAppModuleDeployedResources_presult& obj);
};


class Airavata_registerApplicationInterface_args {
 public:

  static const char* ascii_fingerprint; // = "EF6C721538C0A5EDD7F35F317703462B";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0x6C,0x72,0x15,0x38,0xC0,0xA5,0xED,0xD7,0xF3,0x5F,0x31,0x77,0x03,0x46,0x2B};

  Airavata_registerApplicationInterface_args(const Airavata_registerApplicationInterface_args&);
  Airavata_registerApplicationInterface_args& operator=(const Airavata_registerApplicationInterface_args&);
  Airavata_registerApplicationInterface_args() : gatewayId() {
  }

  virtual ~Airavata_registerApplicationInterface_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string gatewayId;
   ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription applicationInterface;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_gatewayId(const std::string& val);

  void __set_applicationInterface(const  ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription& val);

  bool operator == (const Airavata_registerApplicationInterface_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(applicationInterface == rhs.applicationInterface))
      return false;
    return true;
  }
  bool operator != (const Airavata_registerApplicationInterface_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_registerApplicationInterface_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_registerApplicationInterface_args& obj);
};


class Airavata_registerApplicationInterface_pargs {
 public:

  static const char* ascii_fingerprint; // = "EF6C721538C0A5EDD7F35F317703462B";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0x6C,0x72,0x15,0x38,0xC0,0xA5,0xED,0xD7,0xF3,0x5F,0x31,0x77,0x03,0x46,0x2B};


  virtual ~Airavata_registerApplicationInterface_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* gatewayId;
  const  ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription* applicationInterface;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_registerApplicationInterface_pargs& obj);
};

typedef struct _Airavata_registerApplicationInterface_result__isset {
  _Airavata_registerApplicationInterface_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_registerApplicationInterface_result__isset;

class Airavata_registerApplicationInterface_result {
 public:

  static const char* ascii_fingerprint; // = "21BF57A9FE5AAA661540804D4FB9F023";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xBF,0x57,0xA9,0xFE,0x5A,0xAA,0x66,0x15,0x40,0x80,0x4D,0x4F,0xB9,0xF0,0x23};

  Airavata_registerApplicationInterface_result(const Airavata_registerApplicationInterface_result&);
  Airavata_registerApplicationInterface_result& operator=(const Airavata_registerApplicationInterface_result&);
  Airavata_registerApplicationInterface_result() : success() {
  }

  virtual ~Airavata_registerApplicationInterface_result() throw();
  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_registerApplicationInterface_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_registerApplicationInterface_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_registerApplicationInterface_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_registerApplicationInterface_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_registerApplicationInterface_result& obj);
};

typedef struct _Airavata_registerApplicationInterface_presult__isset {
  _Airavata_registerApplicationInterface_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_registerApplicationInterface_presult__isset;

class Airavata_registerApplicationInterface_presult {
 public:

  static const char* ascii_fingerprint; // = "21BF57A9FE5AAA661540804D4FB9F023";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xBF,0x57,0xA9,0xFE,0x5A,0xAA,0x66,0x15,0x40,0x80,0x4D,0x4F,0xB9,0xF0,0x23};


  virtual ~Airavata_registerApplicationInterface_presult() throw();
  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_registerApplicationInterface_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_registerApplicationInterface_presult& obj);
};


class Airavata_getApplicationInterface_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_getApplicationInterface_args(const Airavata_getApplicationInterface_args&);
  Airavata_getApplicationInterface_args& operator=(const Airavata_getApplicationInterface_args&);
  Airavata_getApplicationInterface_args() : appInterfaceId() {
  }

  virtual ~Airavata_getApplicationInterface_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string appInterfaceId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_appInterfaceId(const std::string& val);

  bool operator == (const Airavata_getApplicationInterface_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(appInterfaceId == rhs.appInterfaceId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getApplicationInterface_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getApplicationInterface_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getApplicationInterface_args& obj);
};


class Airavata_getApplicationInterface_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_getApplicationInterface_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* appInterfaceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getApplicationInterface_pargs& obj);
};

typedef struct _Airavata_getApplicationInterface_result__isset {
  _Airavata_getApplicationInterface_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getApplicationInterface_result__isset;

class Airavata_getApplicationInterface_result {
 public:

  static const char* ascii_fingerprint; // = "585E2BE0CB0848B2F1D58187CA1D24A6";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x5E,0x2B,0xE0,0xCB,0x08,0x48,0xB2,0xF1,0xD5,0x81,0x87,0xCA,0x1D,0x24,0xA6};

  Airavata_getApplicationInterface_result(const Airavata_getApplicationInterface_result&);
  Airavata_getApplicationInterface_result& operator=(const Airavata_getApplicationInterface_result&);
  Airavata_getApplicationInterface_result() {
  }

  virtual ~Airavata_getApplicationInterface_result() throw();
   ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getApplicationInterface_result__isset __isset;

  void __set_success(const  ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_getApplicationInterface_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_getApplicationInterface_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getApplicationInterface_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getApplicationInterface_result& obj);
};

typedef struct _Airavata_getApplicationInterface_presult__isset {
  _Airavata_getApplicationInterface_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getApplicationInterface_presult__isset;

class Airavata_getApplicationInterface_presult {
 public:

  static const char* ascii_fingerprint; // = "585E2BE0CB0848B2F1D58187CA1D24A6";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x5E,0x2B,0xE0,0xCB,0x08,0x48,0xB2,0xF1,0xD5,0x81,0x87,0xCA,0x1D,0x24,0xA6};


  virtual ~Airavata_getApplicationInterface_presult() throw();
   ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getApplicationInterface_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getApplicationInterface_presult& obj);
};


class Airavata_updateApplicationInterface_args {
 public:

  static const char* ascii_fingerprint; // = "EF6C721538C0A5EDD7F35F317703462B";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0x6C,0x72,0x15,0x38,0xC0,0xA5,0xED,0xD7,0xF3,0x5F,0x31,0x77,0x03,0x46,0x2B};

  Airavata_updateApplicationInterface_args(const Airavata_updateApplicationInterface_args&);
  Airavata_updateApplicationInterface_args& operator=(const Airavata_updateApplicationInterface_args&);
  Airavata_updateApplicationInterface_args() : appInterfaceId() {
  }

  virtual ~Airavata_updateApplicationInterface_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string appInterfaceId;
   ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription applicationInterface;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_appInterfaceId(const std::string& val);

  void __set_applicationInterface(const  ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription& val);

  bool operator == (const Airavata_updateApplicationInterface_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(appInterfaceId == rhs.appInterfaceId))
      return false;
    if (!(applicationInterface == rhs.applicationInterface))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateApplicationInterface_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateApplicationInterface_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateApplicationInterface_args& obj);
};


class Airavata_updateApplicationInterface_pargs {
 public:

  static const char* ascii_fingerprint; // = "EF6C721538C0A5EDD7F35F317703462B";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0x6C,0x72,0x15,0x38,0xC0,0xA5,0xED,0xD7,0xF3,0x5F,0x31,0x77,0x03,0x46,0x2B};


  virtual ~Airavata_updateApplicationInterface_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* appInterfaceId;
  const  ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription* applicationInterface;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateApplicationInterface_pargs& obj);
};

typedef struct _Airavata_updateApplicationInterface_result__isset {
  _Airavata_updateApplicationInterface_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_updateApplicationInterface_result__isset;

class Airavata_updateApplicationInterface_result {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};

  Airavata_updateApplicationInterface_result(const Airavata_updateApplicationInterface_result&);
  Airavata_updateApplicationInterface_result& operator=(const Airavata_updateApplicationInterface_result&);
  Airavata_updateApplicationInterface_result() : success(0) {
  }

  virtual ~Airavata_updateApplicationInterface_result() throw();
  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_updateApplicationInterface_result__isset __isset;

  void __set_success(const bool val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_updateApplicationInterface_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateApplicationInterface_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateApplicationInterface_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateApplicationInterface_result& obj);
};

typedef struct _Airavata_updateApplicationInterface_presult__isset {
  _Airavata_updateApplicationInterface_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_updateApplicationInterface_presult__isset;

class Airavata_updateApplicationInterface_presult {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};


  virtual ~Airavata_updateApplicationInterface_presult() throw();
  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_updateApplicationInterface_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateApplicationInterface_presult& obj);
};


class Airavata_deleteApplicationInterface_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_deleteApplicationInterface_args(const Airavata_deleteApplicationInterface_args&);
  Airavata_deleteApplicationInterface_args& operator=(const Airavata_deleteApplicationInterface_args&);
  Airavata_deleteApplicationInterface_args() : appInterfaceId() {
  }

  virtual ~Airavata_deleteApplicationInterface_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string appInterfaceId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_appInterfaceId(const std::string& val);

  bool operator == (const Airavata_deleteApplicationInterface_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(appInterfaceId == rhs.appInterfaceId))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteApplicationInterface_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteApplicationInterface_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteApplicationInterface_args& obj);
};


class Airavata_deleteApplicationInterface_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_deleteApplicationInterface_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* appInterfaceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteApplicationInterface_pargs& obj);
};

typedef struct _Airavata_deleteApplicationInterface_result__isset {
  _Airavata_deleteApplicationInterface_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_deleteApplicationInterface_result__isset;

class Airavata_deleteApplicationInterface_result {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};

  Airavata_deleteApplicationInterface_result(const Airavata_deleteApplicationInterface_result&);
  Airavata_deleteApplicationInterface_result& operator=(const Airavata_deleteApplicationInterface_result&);
  Airavata_deleteApplicationInterface_result() : success(0) {
  }

  virtual ~Airavata_deleteApplicationInterface_result() throw();
  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_deleteApplicationInterface_result__isset __isset;

  void __set_success(const bool val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_deleteApplicationInterface_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteApplicationInterface_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteApplicationInterface_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteApplicationInterface_result& obj);
};

typedef struct _Airavata_deleteApplicationInterface_presult__isset {
  _Airavata_deleteApplicationInterface_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_deleteApplicationInterface_presult__isset;

class Airavata_deleteApplicationInterface_presult {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};


  virtual ~Airavata_deleteApplicationInterface_presult() throw();
  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_deleteApplicationInterface_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteApplicationInterface_presult& obj);
};


class Airavata_getAllApplicationInterfaceNames_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_getAllApplicationInterfaceNames_args(const Airavata_getAllApplicationInterfaceNames_args&);
  Airavata_getAllApplicationInterfaceNames_args& operator=(const Airavata_getAllApplicationInterfaceNames_args&);
  Airavata_getAllApplicationInterfaceNames_args() : gatewayId() {
  }

  virtual ~Airavata_getAllApplicationInterfaceNames_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string gatewayId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_gatewayId(const std::string& val);

  bool operator == (const Airavata_getAllApplicationInterfaceNames_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(gatewayId == rhs.gatewayId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllApplicationInterfaceNames_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllApplicationInterfaceNames_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAllApplicationInterfaceNames_args& obj);
};


class Airavata_getAllApplicationInterfaceNames_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_getAllApplicationInterfaceNames_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* gatewayId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAllApplicationInterfaceNames_pargs& obj);
};

typedef struct _Airavata_getAllApplicationInterfaceNames_result__isset {
  _Airavata_getAllApplicationInterfaceNames_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getAllApplicationInterfaceNames_result__isset;

class Airavata_getAllApplicationInterfaceNames_result {
 public:

  static const char* ascii_fingerprint; // = "4D83E75749C4DBB6AB6F160CB4AC1423";
  static const uint8_t binary_fingerprint[16]; // = {0x4D,0x83,0xE7,0x57,0x49,0xC4,0xDB,0xB6,0xAB,0x6F,0x16,0x0C,0xB4,0xAC,0x14,0x23};

  Airavata_getAllApplicationInterfaceNames_result(const Airavata_getAllApplicationInterfaceNames_result&);
  Airavata_getAllApplicationInterfaceNames_result& operator=(const Airavata_getAllApplicationInterfaceNames_result&);
  Airavata_getAllApplicationInterfaceNames_result() {
  }

  virtual ~Airavata_getAllApplicationInterfaceNames_result() throw();
  std::map<std::string, std::string>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getAllApplicationInterfaceNames_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_getAllApplicationInterfaceNames_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllApplicationInterfaceNames_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllApplicationInterfaceNames_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAllApplicationInterfaceNames_result& obj);
};

typedef struct _Airavata_getAllApplicationInterfaceNames_presult__isset {
  _Airavata_getAllApplicationInterfaceNames_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getAllApplicationInterfaceNames_presult__isset;

class Airavata_getAllApplicationInterfaceNames_presult {
 public:

  static const char* ascii_fingerprint; // = "4D83E75749C4DBB6AB6F160CB4AC1423";
  static const uint8_t binary_fingerprint[16]; // = {0x4D,0x83,0xE7,0x57,0x49,0xC4,0xDB,0xB6,0xAB,0x6F,0x16,0x0C,0xB4,0xAC,0x14,0x23};


  virtual ~Airavata_getAllApplicationInterfaceNames_presult() throw();
  std::map<std::string, std::string> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getAllApplicationInterfaceNames_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAllApplicationInterfaceNames_presult& obj);
};


class Airavata_getAllApplicationInterfaces_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_getAllApplicationInterfaces_args(const Airavata_getAllApplicationInterfaces_args&);
  Airavata_getAllApplicationInterfaces_args& operator=(const Airavata_getAllApplicationInterfaces_args&);
  Airavata_getAllApplicationInterfaces_args() : gatewayId() {
  }

  virtual ~Airavata_getAllApplicationInterfaces_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string gatewayId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_gatewayId(const std::string& val);

  bool operator == (const Airavata_getAllApplicationInterfaces_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(gatewayId == rhs.gatewayId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllApplicationInterfaces_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllApplicationInterfaces_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAllApplicationInterfaces_args& obj);
};


class Airavata_getAllApplicationInterfaces_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_getAllApplicationInterfaces_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* gatewayId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAllApplicationInterfaces_pargs& obj);
};

typedef struct _Airavata_getAllApplicationInterfaces_result__isset {
  _Airavata_getAllApplicationInterfaces_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getAllApplicationInterfaces_result__isset;

class Airavata_getAllApplicationInterfaces_result {
 public:

  static const char* ascii_fingerprint; // = "A6106E8CA3152C84AEB754B0582DFF33";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x10,0x6E,0x8C,0xA3,0x15,0x2C,0x84,0xAE,0xB7,0x54,0xB0,0x58,0x2D,0xFF,0x33};

  Airavata_getAllApplicationInterfaces_result(const Airavata_getAllApplicationInterfaces_result&);
  Airavata_getAllApplicationInterfaces_result& operator=(const Airavata_getAllApplicationInterfaces_result&);
  Airavata_getAllApplicationInterfaces_result() {
  }

  virtual ~Airavata_getAllApplicationInterfaces_result() throw();
  std::vector< ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getAllApplicationInterfaces_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription> & val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_getAllApplicationInterfaces_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllApplicationInterfaces_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllApplicationInterfaces_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAllApplicationInterfaces_result& obj);
};

typedef struct _Airavata_getAllApplicationInterfaces_presult__isset {
  _Airavata_getAllApplicationInterfaces_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getAllApplicationInterfaces_presult__isset;

class Airavata_getAllApplicationInterfaces_presult {
 public:

  static const char* ascii_fingerprint; // = "A6106E8CA3152C84AEB754B0582DFF33";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x10,0x6E,0x8C,0xA3,0x15,0x2C,0x84,0xAE,0xB7,0x54,0xB0,0x58,0x2D,0xFF,0x33};


  virtual ~Airavata_getAllApplicationInterfaces_presult() throw();
  std::vector< ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getAllApplicationInterfaces_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAllApplicationInterfaces_presult& obj);
};


class Airavata_getApplicationInputs_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_getApplicationInputs_args(const Airavata_getApplicationInputs_args&);
  Airavata_getApplicationInputs_args& operator=(const Airavata_getApplicationInputs_args&);
  Airavata_getApplicationInputs_args() : appInterfaceId() {
  }

  virtual ~Airavata_getApplicationInputs_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string appInterfaceId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_appInterfaceId(const std::string& val);

  bool operator == (const Airavata_getApplicationInputs_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(appInterfaceId == rhs.appInterfaceId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getApplicationInputs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getApplicationInputs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getApplicationInputs_args& obj);
};


class Airavata_getApplicationInputs_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_getApplicationInputs_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* appInterfaceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getApplicationInputs_pargs& obj);
};

typedef struct _Airavata_getApplicationInputs_result__isset {
  _Airavata_getApplicationInputs_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getApplicationInputs_result__isset;

class Airavata_getApplicationInputs_result {
 public:

  static const char* ascii_fingerprint; // = "B47684EE8729D5FF32B9B55564B64EC6";
  static const uint8_t binary_fingerprint[16]; // = {0xB4,0x76,0x84,0xEE,0x87,0x29,0xD5,0xFF,0x32,0xB9,0xB5,0x55,0x64,0xB6,0x4E,0xC6};

  Airavata_getApplicationInputs_result(const Airavata_getApplicationInputs_result&);
  Airavata_getApplicationInputs_result& operator=(const Airavata_getApplicationInputs_result&);
  Airavata_getApplicationInputs_result() {
  }

  virtual ~Airavata_getApplicationInputs_result() throw();
  std::vector< ::apache::airavata::model::application::io::InputDataObjectType>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getApplicationInputs_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::application::io::InputDataObjectType> & val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_getApplicationInputs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_getApplicationInputs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getApplicationInputs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getApplicationInputs_result& obj);
};

typedef struct _Airavata_getApplicationInputs_presult__isset {
  _Airavata_getApplicationInputs_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getApplicationInputs_presult__isset;

class Airavata_getApplicationInputs_presult {
 public:

  static const char* ascii_fingerprint; // = "B47684EE8729D5FF32B9B55564B64EC6";
  static const uint8_t binary_fingerprint[16]; // = {0xB4,0x76,0x84,0xEE,0x87,0x29,0xD5,0xFF,0x32,0xB9,0xB5,0x55,0x64,0xB6,0x4E,0xC6};


  virtual ~Airavata_getApplicationInputs_presult() throw();
  std::vector< ::apache::airavata::model::application::io::InputDataObjectType> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getApplicationInputs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getApplicationInputs_presult& obj);
};


class Airavata_getApplicationOutputs_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_getApplicationOutputs_args(const Airavata_getApplicationOutputs_args&);
  Airavata_getApplicationOutputs_args& operator=(const Airavata_getApplicationOutputs_args&);
  Airavata_getApplicationOutputs_args() : appInterfaceId() {
  }

  virtual ~Airavata_getApplicationOutputs_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string appInterfaceId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_appInterfaceId(const std::string& val);

  bool operator == (const Airavata_getApplicationOutputs_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(appInterfaceId == rhs.appInterfaceId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getApplicationOutputs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getApplicationOutputs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getApplicationOutputs_args& obj);
};


class Airavata_getApplicationOutputs_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_getApplicationOutputs_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* appInterfaceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getApplicationOutputs_pargs& obj);
};

typedef struct _Airavata_getApplicationOutputs_result__isset {
  _Airavata_getApplicationOutputs_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getApplicationOutputs_result__isset;

class Airavata_getApplicationOutputs_result {
 public:

  static const char* ascii_fingerprint; // = "7BEA8A4446AC6B71C5EDDE2D33BB226C";
  static const uint8_t binary_fingerprint[16]; // = {0x7B,0xEA,0x8A,0x44,0x46,0xAC,0x6B,0x71,0xC5,0xED,0xDE,0x2D,0x33,0xBB,0x22,0x6C};

  Airavata_getApplicationOutputs_result(const Airavata_getApplicationOutputs_result&);
  Airavata_getApplicationOutputs_result& operator=(const Airavata_getApplicationOutputs_result&);
  Airavata_getApplicationOutputs_result() {
  }

  virtual ~Airavata_getApplicationOutputs_result() throw();
  std::vector< ::apache::airavata::model::application::io::OutputDataObjectType>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getApplicationOutputs_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::application::io::OutputDataObjectType> & val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_getApplicationOutputs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_getApplicationOutputs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getApplicationOutputs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getApplicationOutputs_result& obj);
};

typedef struct _Airavata_getApplicationOutputs_presult__isset {
  _Airavata_getApplicationOutputs_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getApplicationOutputs_presult__isset;

class Airavata_getApplicationOutputs_presult {
 public:

  static const char* ascii_fingerprint; // = "7BEA8A4446AC6B71C5EDDE2D33BB226C";
  static const uint8_t binary_fingerprint[16]; // = {0x7B,0xEA,0x8A,0x44,0x46,0xAC,0x6B,0x71,0xC5,0xED,0xDE,0x2D,0x33,0xBB,0x22,0x6C};


  virtual ~Airavata_getApplicationOutputs_presult() throw();
  std::vector< ::apache::airavata::model::application::io::OutputDataObjectType> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getApplicationOutputs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getApplicationOutputs_presult& obj);
};


class Airavata_getAvailableAppInterfaceComputeResources_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_getAvailableAppInterfaceComputeResources_args(const Airavata_getAvailableAppInterfaceComputeResources_args&);
  Airavata_getAvailableAppInterfaceComputeResources_args& operator=(const Airavata_getAvailableAppInterfaceComputeResources_args&);
  Airavata_getAvailableAppInterfaceComputeResources_args() : appInterfaceId() {
  }

  virtual ~Airavata_getAvailableAppInterfaceComputeResources_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string appInterfaceId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_appInterfaceId(const std::string& val);

  bool operator == (const Airavata_getAvailableAppInterfaceComputeResources_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(appInterfaceId == rhs.appInterfaceId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAvailableAppInterfaceComputeResources_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAvailableAppInterfaceComputeResources_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAvailableAppInterfaceComputeResources_args& obj);
};


class Airavata_getAvailableAppInterfaceComputeResources_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_getAvailableAppInterfaceComputeResources_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* appInterfaceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAvailableAppInterfaceComputeResources_pargs& obj);
};

typedef struct _Airavata_getAvailableAppInterfaceComputeResources_result__isset {
  _Airavata_getAvailableAppInterfaceComputeResources_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getAvailableAppInterfaceComputeResources_result__isset;

class Airavata_getAvailableAppInterfaceComputeResources_result {
 public:

  static const char* ascii_fingerprint; // = "4D83E75749C4DBB6AB6F160CB4AC1423";
  static const uint8_t binary_fingerprint[16]; // = {0x4D,0x83,0xE7,0x57,0x49,0xC4,0xDB,0xB6,0xAB,0x6F,0x16,0x0C,0xB4,0xAC,0x14,0x23};

  Airavata_getAvailableAppInterfaceComputeResources_result(const Airavata_getAvailableAppInterfaceComputeResources_result&);
  Airavata_getAvailableAppInterfaceComputeResources_result& operator=(const Airavata_getAvailableAppInterfaceComputeResources_result&);
  Airavata_getAvailableAppInterfaceComputeResources_result() {
  }

  virtual ~Airavata_getAvailableAppInterfaceComputeResources_result() throw();
  std::map<std::string, std::string>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getAvailableAppInterfaceComputeResources_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_getAvailableAppInterfaceComputeResources_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAvailableAppInterfaceComputeResources_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAvailableAppInterfaceComputeResources_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAvailableAppInterfaceComputeResources_result& obj);
};

typedef struct _Airavata_getAvailableAppInterfaceComputeResources_presult__isset {
  _Airavata_getAvailableAppInterfaceComputeResources_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getAvailableAppInterfaceComputeResources_presult__isset;

class Airavata_getAvailableAppInterfaceComputeResources_presult {
 public:

  static const char* ascii_fingerprint; // = "4D83E75749C4DBB6AB6F160CB4AC1423";
  static const uint8_t binary_fingerprint[16]; // = {0x4D,0x83,0xE7,0x57,0x49,0xC4,0xDB,0xB6,0xAB,0x6F,0x16,0x0C,0xB4,0xAC,0x14,0x23};


  virtual ~Airavata_getAvailableAppInterfaceComputeResources_presult() throw();
  std::map<std::string, std::string> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getAvailableAppInterfaceComputeResources_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAvailableAppInterfaceComputeResources_presult& obj);
};


class Airavata_registerComputeResource_args {
 public:

  static const char* ascii_fingerprint; // = "A0B8CF62A1878BA384B2619B9C93A4D0";
  static const uint8_t binary_fingerprint[16]; // = {0xA0,0xB8,0xCF,0x62,0xA1,0x87,0x8B,0xA3,0x84,0xB2,0x61,0x9B,0x9C,0x93,0xA4,0xD0};

  Airavata_registerComputeResource_args(const Airavata_registerComputeResource_args&);
  Airavata_registerComputeResource_args& operator=(const Airavata_registerComputeResource_args&);
  Airavata_registerComputeResource_args() {
  }

  virtual ~Airavata_registerComputeResource_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
   ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription computeResourceDescription;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_computeResourceDescription(const  ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription& val);

  bool operator == (const Airavata_registerComputeResource_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(computeResourceDescription == rhs.computeResourceDescription))
      return false;
    return true;
  }
  bool operator != (const Airavata_registerComputeResource_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_registerComputeResource_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_registerComputeResource_args& obj);
};


class Airavata_registerComputeResource_pargs {
 public:

  static const char* ascii_fingerprint; // = "A0B8CF62A1878BA384B2619B9C93A4D0";
  static const uint8_t binary_fingerprint[16]; // = {0xA0,0xB8,0xCF,0x62,0xA1,0x87,0x8B,0xA3,0x84,0xB2,0x61,0x9B,0x9C,0x93,0xA4,0xD0};


  virtual ~Airavata_registerComputeResource_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const  ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription* computeResourceDescription;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_registerComputeResource_pargs& obj);
};

typedef struct _Airavata_registerComputeResource_result__isset {
  _Airavata_registerComputeResource_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_registerComputeResource_result__isset;

class Airavata_registerComputeResource_result {
 public:

  static const char* ascii_fingerprint; // = "21BF57A9FE5AAA661540804D4FB9F023";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xBF,0x57,0xA9,0xFE,0x5A,0xAA,0x66,0x15,0x40,0x80,0x4D,0x4F,0xB9,0xF0,0x23};

  Airavata_registerComputeResource_result(const Airavata_registerComputeResource_result&);
  Airavata_registerComputeResource_result& operator=(const Airavata_registerComputeResource_result&);
  Airavata_registerComputeResource_result() : success() {
  }

  virtual ~Airavata_registerComputeResource_result() throw();
  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_registerComputeResource_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_registerComputeResource_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_registerComputeResource_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_registerComputeResource_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_registerComputeResource_result& obj);
};

typedef struct _Airavata_registerComputeResource_presult__isset {
  _Airavata_registerComputeResource_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_registerComputeResource_presult__isset;

class Airavata_registerComputeResource_presult {
 public:

  static const char* ascii_fingerprint; // = "21BF57A9FE5AAA661540804D4FB9F023";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xBF,0x57,0xA9,0xFE,0x5A,0xAA,0x66,0x15,0x40,0x80,0x4D,0x4F,0xB9,0xF0,0x23};


  virtual ~Airavata_registerComputeResource_presult() throw();
  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_registerComputeResource_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_registerComputeResource_presult& obj);
};


class Airavata_getComputeResource_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_getComputeResource_args(const Airavata_getComputeResource_args&);
  Airavata_getComputeResource_args& operator=(const Airavata_getComputeResource_args&);
  Airavata_getComputeResource_args() : computeResourceId() {
  }

  virtual ~Airavata_getComputeResource_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string computeResourceId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_computeResourceId(const std::string& val);

  bool operator == (const Airavata_getComputeResource_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getComputeResource_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getComputeResource_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getComputeResource_args& obj);
};


class Airavata_getComputeResource_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_getComputeResource_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* computeResourceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getComputeResource_pargs& obj);
};

typedef struct _Airavata_getComputeResource_result__isset {
  _Airavata_getComputeResource_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getComputeResource_result__isset;

class Airavata_getComputeResource_result {
 public:

  static const char* ascii_fingerprint; // = "7905BE169CBADD24201811EE1339957F";
  static const uint8_t binary_fingerprint[16]; // = {0x79,0x05,0xBE,0x16,0x9C,0xBA,0xDD,0x24,0x20,0x18,0x11,0xEE,0x13,0x39,0x95,0x7F};

  Airavata_getComputeResource_result(const Airavata_getComputeResource_result&);
  Airavata_getComputeResource_result& operator=(const Airavata_getComputeResource_result&);
  Airavata_getComputeResource_result() {
  }

  virtual ~Airavata_getComputeResource_result() throw();
   ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getComputeResource_result__isset __isset;

  void __set_success(const  ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_getComputeResource_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_getComputeResource_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getComputeResource_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getComputeResource_result& obj);
};

typedef struct _Airavata_getComputeResource_presult__isset {
  _Airavata_getComputeResource_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getComputeResource_presult__isset;

class Airavata_getComputeResource_presult {
 public:

  static const char* ascii_fingerprint; // = "7905BE169CBADD24201811EE1339957F";
  static const uint8_t binary_fingerprint[16]; // = {0x79,0x05,0xBE,0x16,0x9C,0xBA,0xDD,0x24,0x20,0x18,0x11,0xEE,0x13,0x39,0x95,0x7F};


  virtual ~Airavata_getComputeResource_presult() throw();
   ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getComputeResource_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getComputeResource_presult& obj);
};


class Airavata_getAllComputeResourceNames_args {
 public:

  static const char* ascii_fingerprint; // = "75A7E945AEBB96C8FA8998CBCEB31C27";
  static const uint8_t binary_fingerprint[16]; // = {0x75,0xA7,0xE9,0x45,0xAE,0xBB,0x96,0xC8,0xFA,0x89,0x98,0xCB,0xCE,0xB3,0x1C,0x27};

  Airavata_getAllComputeResourceNames_args(const Airavata_getAllComputeResourceNames_args&);
  Airavata_getAllComputeResourceNames_args& operator=(const Airavata_getAllComputeResourceNames_args&);
  Airavata_getAllComputeResourceNames_args() {
  }

  virtual ~Airavata_getAllComputeResourceNames_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  bool operator == (const Airavata_getAllComputeResourceNames_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllComputeResourceNames_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllComputeResourceNames_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAllComputeResourceNames_args& obj);
};


class Airavata_getAllComputeResourceNames_pargs {
 public:

  static const char* ascii_fingerprint; // = "75A7E945AEBB96C8FA8998CBCEB31C27";
  static const uint8_t binary_fingerprint[16]; // = {0x75,0xA7,0xE9,0x45,0xAE,0xBB,0x96,0xC8,0xFA,0x89,0x98,0xCB,0xCE,0xB3,0x1C,0x27};


  virtual ~Airavata_getAllComputeResourceNames_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAllComputeResourceNames_pargs& obj);
};

typedef struct _Airavata_getAllComputeResourceNames_result__isset {
  _Airavata_getAllComputeResourceNames_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getAllComputeResourceNames_result__isset;

class Airavata_getAllComputeResourceNames_result {
 public:

  static const char* ascii_fingerprint; // = "4D83E75749C4DBB6AB6F160CB4AC1423";
  static const uint8_t binary_fingerprint[16]; // = {0x4D,0x83,0xE7,0x57,0x49,0xC4,0xDB,0xB6,0xAB,0x6F,0x16,0x0C,0xB4,0xAC,0x14,0x23};

  Airavata_getAllComputeResourceNames_result(const Airavata_getAllComputeResourceNames_result&);
  Airavata_getAllComputeResourceNames_result& operator=(const Airavata_getAllComputeResourceNames_result&);
  Airavata_getAllComputeResourceNames_result() {
  }

  virtual ~Airavata_getAllComputeResourceNames_result() throw();
  std::map<std::string, std::string>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getAllComputeResourceNames_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_getAllComputeResourceNames_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllComputeResourceNames_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllComputeResourceNames_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAllComputeResourceNames_result& obj);
};

typedef struct _Airavata_getAllComputeResourceNames_presult__isset {
  _Airavata_getAllComputeResourceNames_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getAllComputeResourceNames_presult__isset;

class Airavata_getAllComputeResourceNames_presult {
 public:

  static const char* ascii_fingerprint; // = "4D83E75749C4DBB6AB6F160CB4AC1423";
  static const uint8_t binary_fingerprint[16]; // = {0x4D,0x83,0xE7,0x57,0x49,0xC4,0xDB,0xB6,0xAB,0x6F,0x16,0x0C,0xB4,0xAC,0x14,0x23};


  virtual ~Airavata_getAllComputeResourceNames_presult() throw();
  std::map<std::string, std::string> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getAllComputeResourceNames_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAllComputeResourceNames_presult& obj);
};


class Airavata_updateComputeResource_args {
 public:

  static const char* ascii_fingerprint; // = "3BA03B80825B9C928838194635F8BBB1";
  static const uint8_t binary_fingerprint[16]; // = {0x3B,0xA0,0x3B,0x80,0x82,0x5B,0x9C,0x92,0x88,0x38,0x19,0x46,0x35,0xF8,0xBB,0xB1};

  Airavata_updateComputeResource_args(const Airavata_updateComputeResource_args&);
  Airavata_updateComputeResource_args& operator=(const Airavata_updateComputeResource_args&);
  Airavata_updateComputeResource_args() : computeResourceId() {
  }

  virtual ~Airavata_updateComputeResource_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string computeResourceId;
   ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription computeResourceDescription;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_computeResourceId(const std::string& val);

  void __set_computeResourceDescription(const  ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription& val);

  bool operator == (const Airavata_updateComputeResource_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    if (!(computeResourceDescription == rhs.computeResourceDescription))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateComputeResource_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateComputeResource_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateComputeResource_args& obj);
};


class Airavata_updateComputeResource_pargs {
 public:

  static const char* ascii_fingerprint; // = "3BA03B80825B9C928838194635F8BBB1";
  static const uint8_t binary_fingerprint[16]; // = {0x3B,0xA0,0x3B,0x80,0x82,0x5B,0x9C,0x92,0x88,0x38,0x19,0x46,0x35,0xF8,0xBB,0xB1};


  virtual ~Airavata_updateComputeResource_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* computeResourceId;
  const  ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription* computeResourceDescription;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateComputeResource_pargs& obj);
};

typedef struct _Airavata_updateComputeResource_result__isset {
  _Airavata_updateComputeResource_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_updateComputeResource_result__isset;

class Airavata_updateComputeResource_result {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};

  Airavata_updateComputeResource_result(const Airavata_updateComputeResource_result&);
  Airavata_updateComputeResource_result& operator=(const Airavata_updateComputeResource_result&);
  Airavata_updateComputeResource_result() : success(0) {
  }

  virtual ~Airavata_updateComputeResource_result() throw();
  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_updateComputeResource_result__isset __isset;

  void __set_success(const bool val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_updateComputeResource_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateComputeResource_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateComputeResource_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateComputeResource_result& obj);
};

typedef struct _Airavata_updateComputeResource_presult__isset {
  _Airavata_updateComputeResource_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_updateComputeResource_presult__isset;

class Airavata_updateComputeResource_presult {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};


  virtual ~Airavata_updateComputeResource_presult() throw();
  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_updateComputeResource_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateComputeResource_presult& obj);
};


class Airavata_deleteComputeResource_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_deleteComputeResource_args(const Airavata_deleteComputeResource_args&);
  Airavata_deleteComputeResource_args& operator=(const Airavata_deleteComputeResource_args&);
  Airavata_deleteComputeResource_args() : computeResourceId() {
  }

  virtual ~Airavata_deleteComputeResource_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string computeResourceId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_computeResourceId(const std::string& val);

  bool operator == (const Airavata_deleteComputeResource_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteComputeResource_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteComputeResource_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteComputeResource_args& obj);
};


class Airavata_deleteComputeResource_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_deleteComputeResource_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* computeResourceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteComputeResource_pargs& obj);
};

typedef struct _Airavata_deleteComputeResource_result__isset {
  _Airavata_deleteComputeResource_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_deleteComputeResource_result__isset;

class Airavata_deleteComputeResource_result {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};

  Airavata_deleteComputeResource_result(const Airavata_deleteComputeResource_result&);
  Airavata_deleteComputeResource_result& operator=(const Airavata_deleteComputeResource_result&);
  Airavata_deleteComputeResource_result() : success(0) {
  }

  virtual ~Airavata_deleteComputeResource_result() throw();
  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_deleteComputeResource_result__isset __isset;

  void __set_success(const bool val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_deleteComputeResource_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteComputeResource_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteComputeResource_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteComputeResource_result& obj);
};

typedef struct _Airavata_deleteComputeResource_presult__isset {
  _Airavata_deleteComputeResource_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_deleteComputeResource_presult__isset;

class Airavata_deleteComputeResource_presult {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};


  virtual ~Airavata_deleteComputeResource_presult() throw();
  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_deleteComputeResource_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteComputeResource_presult& obj);
};


class Airavata_addLocalSubmissionDetails_args {
 public:

  static const char* ascii_fingerprint; // = "00D126D537D3074444AD00D217BBE71E";
  static const uint8_t binary_fingerprint[16]; // = {0x00,0xD1,0x26,0xD5,0x37,0xD3,0x07,0x44,0x44,0xAD,0x00,0xD2,0x17,0xBB,0xE7,0x1E};

  Airavata_addLocalSubmissionDetails_args(const Airavata_addLocalSubmissionDetails_args&);
  Airavata_addLocalSubmissionDetails_args& operator=(const Airavata_addLocalSubmissionDetails_args&);
  Airavata_addLocalSubmissionDetails_args() : computeResourceId(), priorityOrder(0) {
  }

  virtual ~Airavata_addLocalSubmissionDetails_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string computeResourceId;
  int32_t priorityOrder;
   ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission localSubmission;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_computeResourceId(const std::string& val);

  void __set_priorityOrder(const int32_t val);

  void __set_localSubmission(const  ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission& val);

  bool operator == (const Airavata_addLocalSubmissionDetails_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    if (!(priorityOrder == rhs.priorityOrder))
      return false;
    if (!(localSubmission == rhs.localSubmission))
      return false;
    return true;
  }
  bool operator != (const Airavata_addLocalSubmissionDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addLocalSubmissionDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_addLocalSubmissionDetails_args& obj);
};


class Airavata_addLocalSubmissionDetails_pargs {
 public:

  static const char* ascii_fingerprint; // = "00D126D537D3074444AD00D217BBE71E";
  static const uint8_t binary_fingerprint[16]; // = {0x00,0xD1,0x26,0xD5,0x37,0xD3,0x07,0x44,0x44,0xAD,0x00,0xD2,0x17,0xBB,0xE7,0x1E};


  virtual ~Airavata_addLocalSubmissionDetails_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* computeResourceId;
  const int32_t* priorityOrder;
  const  ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission* localSubmission;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_addLocalSubmissionDetails_pargs& obj);
};

typedef struct _Airavata_addLocalSubmissionDetails_result__isset {
  _Airavata_addLocalSubmissionDetails_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_addLocalSubmissionDetails_result__isset;

class Airavata_addLocalSubmissionDetails_result {
 public:

  static const char* ascii_fingerprint; // = "21BF57A9FE5AAA661540804D4FB9F023";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xBF,0x57,0xA9,0xFE,0x5A,0xAA,0x66,0x15,0x40,0x80,0x4D,0x4F,0xB9,0xF0,0x23};

  Airavata_addLocalSubmissionDetails_result(const Airavata_addLocalSubmissionDetails_result&);
  Airavata_addLocalSubmissionDetails_result& operator=(const Airavata_addLocalSubmissionDetails_result&);
  Airavata_addLocalSubmissionDetails_result() : success() {
  }

  virtual ~Airavata_addLocalSubmissionDetails_result() throw();
  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_addLocalSubmissionDetails_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_addLocalSubmissionDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_addLocalSubmissionDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addLocalSubmissionDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_addLocalSubmissionDetails_result& obj);
};

typedef struct _Airavata_addLocalSubmissionDetails_presult__isset {
  _Airavata_addLocalSubmissionDetails_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_addLocalSubmissionDetails_presult__isset;

class Airavata_addLocalSubmissionDetails_presult {
 public:

  static const char* ascii_fingerprint; // = "21BF57A9FE5AAA661540804D4FB9F023";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xBF,0x57,0xA9,0xFE,0x5A,0xAA,0x66,0x15,0x40,0x80,0x4D,0x4F,0xB9,0xF0,0x23};


  virtual ~Airavata_addLocalSubmissionDetails_presult() throw();
  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_addLocalSubmissionDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_addLocalSubmissionDetails_presult& obj);
};


class Airavata_updateLocalSubmissionDetails_args {
 public:

  static const char* ascii_fingerprint; // = "3A312248D892ED814394F9D34608B8F2";
  static const uint8_t binary_fingerprint[16]; // = {0x3A,0x31,0x22,0x48,0xD8,0x92,0xED,0x81,0x43,0x94,0xF9,0xD3,0x46,0x08,0xB8,0xF2};

  Airavata_updateLocalSubmissionDetails_args(const Airavata_updateLocalSubmissionDetails_args&);
  Airavata_updateLocalSubmissionDetails_args& operator=(const Airavata_updateLocalSubmissionDetails_args&);
  Airavata_updateLocalSubmissionDetails_args() : jobSubmissionInterfaceId() {
  }

  virtual ~Airavata_updateLocalSubmissionDetails_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string jobSubmissionInterfaceId;
   ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission localSubmission;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_jobSubmissionInterfaceId(const std::string& val);

  void __set_localSubmission(const  ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission& val);

  bool operator == (const Airavata_updateLocalSubmissionDetails_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(jobSubmissionInterfaceId == rhs.jobSubmissionInterfaceId))
      return false;
    if (!(localSubmission == rhs.localSubmission))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateLocalSubmissionDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateLocalSubmissionDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateLocalSubmissionDetails_args& obj);
};


class Airavata_updateLocalSubmissionDetails_pargs {
 public:

  static const char* ascii_fingerprint; // = "3A312248D892ED814394F9D34608B8F2";
  static const uint8_t binary_fingerprint[16]; // = {0x3A,0x31,0x22,0x48,0xD8,0x92,0xED,0x81,0x43,0x94,0xF9,0xD3,0x46,0x08,0xB8,0xF2};


  virtual ~Airavata_updateLocalSubmissionDetails_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* jobSubmissionInterfaceId;
  const  ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission* localSubmission;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateLocalSubmissionDetails_pargs& obj);
};

typedef struct _Airavata_updateLocalSubmissionDetails_result__isset {
  _Airavata_updateLocalSubmissionDetails_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_updateLocalSubmissionDetails_result__isset;

class Airavata_updateLocalSubmissionDetails_result {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};

  Airavata_updateLocalSubmissionDetails_result(const Airavata_updateLocalSubmissionDetails_result&);
  Airavata_updateLocalSubmissionDetails_result& operator=(const Airavata_updateLocalSubmissionDetails_result&);
  Airavata_updateLocalSubmissionDetails_result() : success(0) {
  }

  virtual ~Airavata_updateLocalSubmissionDetails_result() throw();
  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_updateLocalSubmissionDetails_result__isset __isset;

  void __set_success(const bool val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_updateLocalSubmissionDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateLocalSubmissionDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateLocalSubmissionDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateLocalSubmissionDetails_result& obj);
};

typedef struct _Airavata_updateLocalSubmissionDetails_presult__isset {
  _Airavata_updateLocalSubmissionDetails_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_updateLocalSubmissionDetails_presult__isset;

class Airavata_updateLocalSubmissionDetails_presult {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};


  virtual ~Airavata_updateLocalSubmissionDetails_presult() throw();
  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_updateLocalSubmissionDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateLocalSubmissionDetails_presult& obj);
};


class Airavata_getLocalJobSubmission_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_getLocalJobSubmission_args(const Airavata_getLocalJobSubmission_args&);
  Airavata_getLocalJobSubmission_args& operator=(const Airavata_getLocalJobSubmission_args&);
  Airavata_getLocalJobSubmission_args() : jobSubmissionId() {
  }

  virtual ~Airavata_getLocalJobSubmission_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string jobSubmissionId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_jobSubmissionId(const std::string& val);

  bool operator == (const Airavata_getLocalJobSubmission_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(jobSubmissionId == rhs.jobSubmissionId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getLocalJobSubmission_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getLocalJobSubmission_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getLocalJobSubmission_args& obj);
};


class Airavata_getLocalJobSubmission_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_getLocalJobSubmission_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* jobSubmissionId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getLocalJobSubmission_pargs& obj);
};

typedef struct _Airavata_getLocalJobSubmission_result__isset {
  _Airavata_getLocalJobSubmission_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getLocalJobSubmission_result__isset;

class Airavata_getLocalJobSubmission_result {
 public:

  static const char* ascii_fingerprint; // = "0DD51139219D43EA79E77A98C849E3E7";
  static const uint8_t binary_fingerprint[16]; // = {0x0D,0xD5,0x11,0x39,0x21,0x9D,0x43,0xEA,0x79,0xE7,0x7A,0x98,0xC8,0x49,0xE3,0xE7};

  Airavata_getLocalJobSubmission_result(const Airavata_getLocalJobSubmission_result&);
  Airavata_getLocalJobSubmission_result& operator=(const Airavata_getLocalJobSubmission_result&);
  Airavata_getLocalJobSubmission_result() {
  }

  virtual ~Airavata_getLocalJobSubmission_result() throw();
   ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getLocalJobSubmission_result__isset __isset;

  void __set_success(const  ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_getLocalJobSubmission_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_getLocalJobSubmission_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getLocalJobSubmission_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getLocalJobSubmission_result& obj);
};

typedef struct _Airavata_getLocalJobSubmission_presult__isset {
  _Airavata_getLocalJobSubmission_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getLocalJobSubmission_presult__isset;

class Airavata_getLocalJobSubmission_presult {
 public:

  static const char* ascii_fingerprint; // = "0DD51139219D43EA79E77A98C849E3E7";
  static const uint8_t binary_fingerprint[16]; // = {0x0D,0xD5,0x11,0x39,0x21,0x9D,0x43,0xEA,0x79,0xE7,0x7A,0x98,0xC8,0x49,0xE3,0xE7};


  virtual ~Airavata_getLocalJobSubmission_presult() throw();
   ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getLocalJobSubmission_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getLocalJobSubmission_presult& obj);
};


class Airavata_addSSHJobSubmissionDetails_args {
 public:

  static const char* ascii_fingerprint; // = "739C379FFFDF31048FBFCFE69A609387";
  static const uint8_t binary_fingerprint[16]; // = {0x73,0x9C,0x37,0x9F,0xFF,0xDF,0x31,0x04,0x8F,0xBF,0xCF,0xE6,0x9A,0x60,0x93,0x87};

  Airavata_addSSHJobSubmissionDetails_args(const Airavata_addSSHJobSubmissionDetails_args&);
  Airavata_addSSHJobSubmissionDetails_args& operator=(const Airavata_addSSHJobSubmissionDetails_args&);
  Airavata_addSSHJobSubmissionDetails_args() : computeResourceId(), priorityOrder(0) {
  }

  virtual ~Airavata_addSSHJobSubmissionDetails_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string computeResourceId;
  int32_t priorityOrder;
   ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission sshJobSubmission;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_computeResourceId(const std::string& val);

  void __set_priorityOrder(const int32_t val);

  void __set_sshJobSubmission(const  ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission& val);

  bool operator == (const Airavata_addSSHJobSubmissionDetails_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    if (!(priorityOrder == rhs.priorityOrder))
      return false;
    if (!(sshJobSubmission == rhs.sshJobSubmission))
      return false;
    return true;
  }
  bool operator != (const Airavata_addSSHJobSubmissionDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addSSHJobSubmissionDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_addSSHJobSubmissionDetails_args& obj);
};


class Airavata_addSSHJobSubmissionDetails_pargs {
 public:

  static const char* ascii_fingerprint; // = "739C379FFFDF31048FBFCFE69A609387";
  static const uint8_t binary_fingerprint[16]; // = {0x73,0x9C,0x37,0x9F,0xFF,0xDF,0x31,0x04,0x8F,0xBF,0xCF,0xE6,0x9A,0x60,0x93,0x87};


  virtual ~Airavata_addSSHJobSubmissionDetails_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* computeResourceId;
  const int32_t* priorityOrder;
  const  ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission* sshJobSubmission;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_addSSHJobSubmissionDetails_pargs& obj);
};

typedef struct _Airavata_addSSHJobSubmissionDetails_result__isset {
  _Airavata_addSSHJobSubmissionDetails_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_addSSHJobSubmissionDetails_result__isset;

class Airavata_addSSHJobSubmissionDetails_result {
 public:

  static const char* ascii_fingerprint; // = "21BF57A9FE5AAA661540804D4FB9F023";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xBF,0x57,0xA9,0xFE,0x5A,0xAA,0x66,0x15,0x40,0x80,0x4D,0x4F,0xB9,0xF0,0x23};

  Airavata_addSSHJobSubmissionDetails_result(const Airavata_addSSHJobSubmissionDetails_result&);
  Airavata_addSSHJobSubmissionDetails_result& operator=(const Airavata_addSSHJobSubmissionDetails_result&);
  Airavata_addSSHJobSubmissionDetails_result() : success() {
  }

  virtual ~Airavata_addSSHJobSubmissionDetails_result() throw();
  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_addSSHJobSubmissionDetails_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_addSSHJobSubmissionDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_addSSHJobSubmissionDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addSSHJobSubmissionDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_addSSHJobSubmissionDetails_result& obj);
};

typedef struct _Airavata_addSSHJobSubmissionDetails_presult__isset {
  _Airavata_addSSHJobSubmissionDetails_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_addSSHJobSubmissionDetails_presult__isset;

class Airavata_addSSHJobSubmissionDetails_presult {
 public:

  static const char* ascii_fingerprint; // = "21BF57A9FE5AAA661540804D4FB9F023";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xBF,0x57,0xA9,0xFE,0x5A,0xAA,0x66,0x15,0x40,0x80,0x4D,0x4F,0xB9,0xF0,0x23};


  virtual ~Airavata_addSSHJobSubmissionDetails_presult() throw();
  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_addSSHJobSubmissionDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_addSSHJobSubmissionDetails_presult& obj);
};


class Airavata_addSSHForkJobSubmissionDetails_args {
 public:

  static const char* ascii_fingerprint; // = "739C379FFFDF31048FBFCFE69A609387";
  static const uint8_t binary_fingerprint[16]; // = {0x73,0x9C,0x37,0x9F,0xFF,0xDF,0x31,0x04,0x8F,0xBF,0xCF,0xE6,0x9A,0x60,0x93,0x87};

  Airavata_addSSHForkJobSubmissionDetails_args(const Airavata_addSSHForkJobSubmissionDetails_args&);
  Airavata_addSSHForkJobSubmissionDetails_args& operator=(const Airavata_addSSHForkJobSubmissionDetails_args&);
  Airavata_addSSHForkJobSubmissionDetails_args() : computeResourceId(), priorityOrder(0) {
  }

  virtual ~Airavata_addSSHForkJobSubmissionDetails_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string computeResourceId;
  int32_t priorityOrder;
   ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission sshJobSubmission;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_computeResourceId(const std::string& val);

  void __set_priorityOrder(const int32_t val);

  void __set_sshJobSubmission(const  ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission& val);

  bool operator == (const Airavata_addSSHForkJobSubmissionDetails_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    if (!(priorityOrder == rhs.priorityOrder))
      return false;
    if (!(sshJobSubmission == rhs.sshJobSubmission))
      return false;
    return true;
  }
  bool operator != (const Airavata_addSSHForkJobSubmissionDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addSSHForkJobSubmissionDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_addSSHForkJobSubmissionDetails_args& obj);
};


class Airavata_addSSHForkJobSubmissionDetails_pargs {
 public:

  static const char* ascii_fingerprint; // = "739C379FFFDF31048FBFCFE69A609387";
  static const uint8_t binary_fingerprint[16]; // = {0x73,0x9C,0x37,0x9F,0xFF,0xDF,0x31,0x04,0x8F,0xBF,0xCF,0xE6,0x9A,0x60,0x93,0x87};


  virtual ~Airavata_addSSHForkJobSubmissionDetails_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* computeResourceId;
  const int32_t* priorityOrder;
  const  ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission* sshJobSubmission;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_addSSHForkJobSubmissionDetails_pargs& obj);
};

typedef struct _Airavata_addSSHForkJobSubmissionDetails_result__isset {
  _Airavata_addSSHForkJobSubmissionDetails_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_addSSHForkJobSubmissionDetails_result__isset;

class Airavata_addSSHForkJobSubmissionDetails_result {
 public:

  static const char* ascii_fingerprint; // = "21BF57A9FE5AAA661540804D4FB9F023";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xBF,0x57,0xA9,0xFE,0x5A,0xAA,0x66,0x15,0x40,0x80,0x4D,0x4F,0xB9,0xF0,0x23};

  Airavata_addSSHForkJobSubmissionDetails_result(const Airavata_addSSHForkJobSubmissionDetails_result&);
  Airavata_addSSHForkJobSubmissionDetails_result& operator=(const Airavata_addSSHForkJobSubmissionDetails_result&);
  Airavata_addSSHForkJobSubmissionDetails_result() : success() {
  }

  virtual ~Airavata_addSSHForkJobSubmissionDetails_result() throw();
  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_addSSHForkJobSubmissionDetails_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_addSSHForkJobSubmissionDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_addSSHForkJobSubmissionDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addSSHForkJobSubmissionDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_addSSHForkJobSubmissionDetails_result& obj);
};

typedef struct _Airavata_addSSHForkJobSubmissionDetails_presult__isset {
  _Airavata_addSSHForkJobSubmissionDetails_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_addSSHForkJobSubmissionDetails_presult__isset;

class Airavata_addSSHForkJobSubmissionDetails_presult {
 public:

  static const char* ascii_fingerprint; // = "21BF57A9FE5AAA661540804D4FB9F023";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xBF,0x57,0xA9,0xFE,0x5A,0xAA,0x66,0x15,0x40,0x80,0x4D,0x4F,0xB9,0xF0,0x23};


  virtual ~Airavata_addSSHForkJobSubmissionDetails_presult() throw();
  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_addSSHForkJobSubmissionDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_addSSHForkJobSubmissionDetails_presult& obj);
};


class Airavata_getSSHJobSubmission_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_getSSHJobSubmission_args(const Airavata_getSSHJobSubmission_args&);
  Airavata_getSSHJobSubmission_args& operator=(const Airavata_getSSHJobSubmission_args&);
  Airavata_getSSHJobSubmission_args() : jobSubmissionId() {
  }

  virtual ~Airavata_getSSHJobSubmission_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string jobSubmissionId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_jobSubmissionId(const std::string& val);

  bool operator == (const Airavata_getSSHJobSubmission_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(jobSubmissionId == rhs.jobSubmissionId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getSSHJobSubmission_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getSSHJobSubmission_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getSSHJobSubmission_args& obj);
};


class Airavata_getSSHJobSubmission_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_getSSHJobSubmission_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* jobSubmissionId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getSSHJobSubmission_pargs& obj);
};

typedef struct _Airavata_getSSHJobSubmission_result__isset {
  _Airavata_getSSHJobSubmission_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getSSHJobSubmission_result__isset;

class Airavata_getSSHJobSubmission_result {
 public:

  static const char* ascii_fingerprint; // = "5C923F24AFC1B85BD0C2EE7C7ED472A9";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x92,0x3F,0x24,0xAF,0xC1,0xB8,0x5B,0xD0,0xC2,0xEE,0x7C,0x7E,0xD4,0x72,0xA9};

  Airavata_getSSHJobSubmission_result(const Airavata_getSSHJobSubmission_result&);
  Airavata_getSSHJobSubmission_result& operator=(const Airavata_getSSHJobSubmission_result&);
  Airavata_getSSHJobSubmission_result() {
  }

  virtual ~Airavata_getSSHJobSubmission_result() throw();
   ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getSSHJobSubmission_result__isset __isset;

  void __set_success(const  ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_getSSHJobSubmission_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_getSSHJobSubmission_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getSSHJobSubmission_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getSSHJobSubmission_result& obj);
};

typedef struct _Airavata_getSSHJobSubmission_presult__isset {
  _Airavata_getSSHJobSubmission_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getSSHJobSubmission_presult__isset;

class Airavata_getSSHJobSubmission_presult {
 public:

  static const char* ascii_fingerprint; // = "5C923F24AFC1B85BD0C2EE7C7ED472A9";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x92,0x3F,0x24,0xAF,0xC1,0xB8,0x5B,0xD0,0xC2,0xEE,0x7C,0x7E,0xD4,0x72,0xA9};


  virtual ~Airavata_getSSHJobSubmission_presult() throw();
   ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getSSHJobSubmission_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getSSHJobSubmission_presult& obj);
};


class Airavata_addUNICOREJobSubmissionDetails_args {
 public:

  static const char* ascii_fingerprint; // = "9C481B55CC89B4890CA332B07489FC6F";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x48,0x1B,0x55,0xCC,0x89,0xB4,0x89,0x0C,0xA3,0x32,0xB0,0x74,0x89,0xFC,0x6F};

  Airavata_addUNICOREJobSubmissionDetails_args(const Airavata_addUNICOREJobSubmissionDetails_args&);
  Airavata_addUNICOREJobSubmissionDetails_args& operator=(const Airavata_addUNICOREJobSubmissionDetails_args&);
  Airavata_addUNICOREJobSubmissionDetails_args() : computeResourceId(), priorityOrder(0) {
  }

  virtual ~Airavata_addUNICOREJobSubmissionDetails_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string computeResourceId;
  int32_t priorityOrder;
   ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission unicoreJobSubmission;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_computeResourceId(const std::string& val);

  void __set_priorityOrder(const int32_t val);

  void __set_unicoreJobSubmission(const  ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission& val);

  bool operator == (const Airavata_addUNICOREJobSubmissionDetails_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    if (!(priorityOrder == rhs.priorityOrder))
      return false;
    if (!(unicoreJobSubmission == rhs.unicoreJobSubmission))
      return false;
    return true;
  }
  bool operator != (const Airavata_addUNICOREJobSubmissionDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addUNICOREJobSubmissionDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_addUNICOREJobSubmissionDetails_args& obj);
};


class Airavata_addUNICOREJobSubmissionDetails_pargs {
 public:

  static const char* ascii_fingerprint; // = "9C481B55CC89B4890CA332B07489FC6F";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x48,0x1B,0x55,0xCC,0x89,0xB4,0x89,0x0C,0xA3,0x32,0xB0,0x74,0x89,0xFC,0x6F};


  virtual ~Airavata_addUNICOREJobSubmissionDetails_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* computeResourceId;
  const int32_t* priorityOrder;
  const  ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission* unicoreJobSubmission;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_addUNICOREJobSubmissionDetails_pargs& obj);
};

typedef struct _Airavata_addUNICOREJobSubmissionDetails_result__isset {
  _Airavata_addUNICOREJobSubmissionDetails_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_addUNICOREJobSubmissionDetails_result__isset;

class Airavata_addUNICOREJobSubmissionDetails_result {
 public:

  static const char* ascii_fingerprint; // = "21BF57A9FE5AAA661540804D4FB9F023";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xBF,0x57,0xA9,0xFE,0x5A,0xAA,0x66,0x15,0x40,0x80,0x4D,0x4F,0xB9,0xF0,0x23};

  Airavata_addUNICOREJobSubmissionDetails_result(const Airavata_addUNICOREJobSubmissionDetails_result&);
  Airavata_addUNICOREJobSubmissionDetails_result& operator=(const Airavata_addUNICOREJobSubmissionDetails_result&);
  Airavata_addUNICOREJobSubmissionDetails_result() : success() {
  }

  virtual ~Airavata_addUNICOREJobSubmissionDetails_result() throw();
  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_addUNICOREJobSubmissionDetails_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_addUNICOREJobSubmissionDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_addUNICOREJobSubmissionDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addUNICOREJobSubmissionDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_addUNICOREJobSubmissionDetails_result& obj);
};

typedef struct _Airavata_addUNICOREJobSubmissionDetails_presult__isset {
  _Airavata_addUNICOREJobSubmissionDetails_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_addUNICOREJobSubmissionDetails_presult__isset;

class Airavata_addUNICOREJobSubmissionDetails_presult {
 public:

  static const char* ascii_fingerprint; // = "21BF57A9FE5AAA661540804D4FB9F023";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xBF,0x57,0xA9,0xFE,0x5A,0xAA,0x66,0x15,0x40,0x80,0x4D,0x4F,0xB9,0xF0,0x23};


  virtual ~Airavata_addUNICOREJobSubmissionDetails_presult() throw();
  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_addUNICOREJobSubmissionDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_addUNICOREJobSubmissionDetails_presult& obj);
};


class Airavata_getUnicoreJobSubmission_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_getUnicoreJobSubmission_args(const Airavata_getUnicoreJobSubmission_args&);
  Airavata_getUnicoreJobSubmission_args& operator=(const Airavata_getUnicoreJobSubmission_args&);
  Airavata_getUnicoreJobSubmission_args() : jobSubmissionId() {
  }

  virtual ~Airavata_getUnicoreJobSubmission_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string jobSubmissionId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_jobSubmissionId(const std::string& val);

  bool operator == (const Airavata_getUnicoreJobSubmission_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(jobSubmissionId == rhs.jobSubmissionId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getUnicoreJobSubmission_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getUnicoreJobSubmission_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getUnicoreJobSubmission_args& obj);
};


class Airavata_getUnicoreJobSubmission_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_getUnicoreJobSubmission_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* jobSubmissionId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getUnicoreJobSubmission_pargs& obj);
};

typedef struct _Airavata_getUnicoreJobSubmission_result__isset {
  _Airavata_getUnicoreJobSubmission_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getUnicoreJobSubmission_result__isset;

class Airavata_getUnicoreJobSubmission_result {
 public:

  static const char* ascii_fingerprint; // = "B201E8F31E13DF037993F234DEF9CBF4";
  static const uint8_t binary_fingerprint[16]; // = {0xB2,0x01,0xE8,0xF3,0x1E,0x13,0xDF,0x03,0x79,0x93,0xF2,0x34,0xDE,0xF9,0xCB,0xF4};

  Airavata_getUnicoreJobSubmission_result(const Airavata_getUnicoreJobSubmission_result&);
  Airavata_getUnicoreJobSubmission_result& operator=(const Airavata_getUnicoreJobSubmission_result&);
  Airavata_getUnicoreJobSubmission_result() {
  }

  virtual ~Airavata_getUnicoreJobSubmission_result() throw();
   ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getUnicoreJobSubmission_result__isset __isset;

  void __set_success(const  ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_getUnicoreJobSubmission_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_getUnicoreJobSubmission_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getUnicoreJobSubmission_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getUnicoreJobSubmission_result& obj);
};

typedef struct _Airavata_getUnicoreJobSubmission_presult__isset {
  _Airavata_getUnicoreJobSubmission_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getUnicoreJobSubmission_presult__isset;

class Airavata_getUnicoreJobSubmission_presult {
 public:

  static const char* ascii_fingerprint; // = "B201E8F31E13DF037993F234DEF9CBF4";
  static const uint8_t binary_fingerprint[16]; // = {0xB2,0x01,0xE8,0xF3,0x1E,0x13,0xDF,0x03,0x79,0x93,0xF2,0x34,0xDE,0xF9,0xCB,0xF4};


  virtual ~Airavata_getUnicoreJobSubmission_presult() throw();
   ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getUnicoreJobSubmission_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getUnicoreJobSubmission_presult& obj);
};


class Airavata_addCloudJobSubmissionDetails_args {
 public:

  static const char* ascii_fingerprint; // = "0A4508FF668F1346793B2190AC9188A5";
  static const uint8_t binary_fingerprint[16]; // = {0x0A,0x45,0x08,0xFF,0x66,0x8F,0x13,0x46,0x79,0x3B,0x21,0x90,0xAC,0x91,0x88,0xA5};

  Airavata_addCloudJobSubmissionDetails_args(const Airavata_addCloudJobSubmissionDetails_args&);
  Airavata_addCloudJobSubmissionDetails_args& operator=(const Airavata_addCloudJobSubmissionDetails_args&);
  Airavata_addCloudJobSubmissionDetails_args() : computeResourceId(), priorityOrder(0) {
  }

  virtual ~Airavata_addCloudJobSubmissionDetails_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string computeResourceId;
  int32_t priorityOrder;
   ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission cloudSubmission;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_computeResourceId(const std::string& val);

  void __set_priorityOrder(const int32_t val);

  void __set_cloudSubmission(const  ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission& val);

  bool operator == (const Airavata_addCloudJobSubmissionDetails_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    if (!(priorityOrder == rhs.priorityOrder))
      return false;
    if (!(cloudSubmission == rhs.cloudSubmission))
      return false;
    return true;
  }
  bool operator != (const Airavata_addCloudJobSubmissionDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addCloudJobSubmissionDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_addCloudJobSubmissionDetails_args& obj);
};


class Airavata_addCloudJobSubmissionDetails_pargs {
 public:

  static const char* ascii_fingerprint; // = "0A4508FF668F1346793B2190AC9188A5";
  static const uint8_t binary_fingerprint[16]; // = {0x0A,0x45,0x08,0xFF,0x66,0x8F,0x13,0x46,0x79,0x3B,0x21,0x90,0xAC,0x91,0x88,0xA5};


  virtual ~Airavata_addCloudJobSubmissionDetails_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* computeResourceId;
  const int32_t* priorityOrder;
  const  ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission* cloudSubmission;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_addCloudJobSubmissionDetails_pargs& obj);
};

typedef struct _Airavata_addCloudJobSubmissionDetails_result__isset {
  _Airavata_addCloudJobSubmissionDetails_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_addCloudJobSubmissionDetails_result__isset;

class Airavata_addCloudJobSubmissionDetails_result {
 public:

  static const char* ascii_fingerprint; // = "21BF57A9FE5AAA661540804D4FB9F023";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xBF,0x57,0xA9,0xFE,0x5A,0xAA,0x66,0x15,0x40,0x80,0x4D,0x4F,0xB9,0xF0,0x23};

  Airavata_addCloudJobSubmissionDetails_result(const Airavata_addCloudJobSubmissionDetails_result&);
  Airavata_addCloudJobSubmissionDetails_result& operator=(const Airavata_addCloudJobSubmissionDetails_result&);
  Airavata_addCloudJobSubmissionDetails_result() : success() {
  }

  virtual ~Airavata_addCloudJobSubmissionDetails_result() throw();
  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_addCloudJobSubmissionDetails_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_addCloudJobSubmissionDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_addCloudJobSubmissionDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addCloudJobSubmissionDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_addCloudJobSubmissionDetails_result& obj);
};

typedef struct _Airavata_addCloudJobSubmissionDetails_presult__isset {
  _Airavata_addCloudJobSubmissionDetails_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_addCloudJobSubmissionDetails_presult__isset;

class Airavata_addCloudJobSubmissionDetails_presult {
 public:

  static const char* ascii_fingerprint; // = "21BF57A9FE5AAA661540804D4FB9F023";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xBF,0x57,0xA9,0xFE,0x5A,0xAA,0x66,0x15,0x40,0x80,0x4D,0x4F,0xB9,0xF0,0x23};


  virtual ~Airavata_addCloudJobSubmissionDetails_presult() throw();
  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_addCloudJobSubmissionDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_addCloudJobSubmissionDetails_presult& obj);
};


class Airavata_getCloudJobSubmission_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_getCloudJobSubmission_args(const Airavata_getCloudJobSubmission_args&);
  Airavata_getCloudJobSubmission_args& operator=(const Airavata_getCloudJobSubmission_args&);
  Airavata_getCloudJobSubmission_args() : jobSubmissionId() {
  }

  virtual ~Airavata_getCloudJobSubmission_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string jobSubmissionId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_jobSubmissionId(const std::string& val);

  bool operator == (const Airavata_getCloudJobSubmission_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(jobSubmissionId == rhs.jobSubmissionId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getCloudJobSubmission_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getCloudJobSubmission_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getCloudJobSubmission_args& obj);
};


class Airavata_getCloudJobSubmission_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_getCloudJobSubmission_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* jobSubmissionId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getCloudJobSubmission_pargs& obj);
};

typedef struct _Airavata_getCloudJobSubmission_result__isset {
  _Airavata_getCloudJobSubmission_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getCloudJobSubmission_result__isset;

class Airavata_getCloudJobSubmission_result {
 public:

  static const char* ascii_fingerprint; // = "A3B42C08C9DB4793DF5A52BAEB86D164";
  static const uint8_t binary_fingerprint[16]; // = {0xA3,0xB4,0x2C,0x08,0xC9,0xDB,0x47,0x93,0xDF,0x5A,0x52,0xBA,0xEB,0x86,0xD1,0x64};

  Airavata_getCloudJobSubmission_result(const Airavata_getCloudJobSubmission_result&);
  Airavata_getCloudJobSubmission_result& operator=(const Airavata_getCloudJobSubmission_result&);
  Airavata_getCloudJobSubmission_result() {
  }

  virtual ~Airavata_getCloudJobSubmission_result() throw();
   ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getCloudJobSubmission_result__isset __isset;

  void __set_success(const  ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_getCloudJobSubmission_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_getCloudJobSubmission_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getCloudJobSubmission_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getCloudJobSubmission_result& obj);
};

typedef struct _Airavata_getCloudJobSubmission_presult__isset {
  _Airavata_getCloudJobSubmission_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getCloudJobSubmission_presult__isset;

class Airavata_getCloudJobSubmission_presult {
 public:

  static const char* ascii_fingerprint; // = "A3B42C08C9DB4793DF5A52BAEB86D164";
  static const uint8_t binary_fingerprint[16]; // = {0xA3,0xB4,0x2C,0x08,0xC9,0xDB,0x47,0x93,0xDF,0x5A,0x52,0xBA,0xEB,0x86,0xD1,0x64};


  virtual ~Airavata_getCloudJobSubmission_presult() throw();
   ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getCloudJobSubmission_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getCloudJobSubmission_presult& obj);
};


class Airavata_updateSSHJobSubmissionDetails_args {
 public:

  static const char* ascii_fingerprint; // = "7B82A49DCB2CC2C937B6B8EF4B3D9D9C";
  static const uint8_t binary_fingerprint[16]; // = {0x7B,0x82,0xA4,0x9D,0xCB,0x2C,0xC2,0xC9,0x37,0xB6,0xB8,0xEF,0x4B,0x3D,0x9D,0x9C};

  Airavata_updateSSHJobSubmissionDetails_args(const Airavata_updateSSHJobSubmissionDetails_args&);
  Airavata_updateSSHJobSubmissionDetails_args& operator=(const Airavata_updateSSHJobSubmissionDetails_args&);
  Airavata_updateSSHJobSubmissionDetails_args() : jobSubmissionInterfaceId() {
  }

  virtual ~Airavata_updateSSHJobSubmissionDetails_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string jobSubmissionInterfaceId;
   ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission sshJobSubmission;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_jobSubmissionInterfaceId(const std::string& val);

  void __set_sshJobSubmission(const  ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission& val);

  bool operator == (const Airavata_updateSSHJobSubmissionDetails_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(jobSubmissionInterfaceId == rhs.jobSubmissionInterfaceId))
      return false;
    if (!(sshJobSubmission == rhs.sshJobSubmission))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateSSHJobSubmissionDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateSSHJobSubmissionDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateSSHJobSubmissionDetails_args& obj);
};


class Airavata_updateSSHJobSubmissionDetails_pargs {
 public:

  static const char* ascii_fingerprint; // = "7B82A49DCB2CC2C937B6B8EF4B3D9D9C";
  static const uint8_t binary_fingerprint[16]; // = {0x7B,0x82,0xA4,0x9D,0xCB,0x2C,0xC2,0xC9,0x37,0xB6,0xB8,0xEF,0x4B,0x3D,0x9D,0x9C};


  virtual ~Airavata_updateSSHJobSubmissionDetails_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* jobSubmissionInterfaceId;
  const  ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission* sshJobSubmission;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateSSHJobSubmissionDetails_pargs& obj);
};

typedef struct _Airavata_updateSSHJobSubmissionDetails_result__isset {
  _Airavata_updateSSHJobSubmissionDetails_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_updateSSHJobSubmissionDetails_result__isset;

class Airavata_updateSSHJobSubmissionDetails_result {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};

  Airavata_updateSSHJobSubmissionDetails_result(const Airavata_updateSSHJobSubmissionDetails_result&);
  Airavata_updateSSHJobSubmissionDetails_result& operator=(const Airavata_updateSSHJobSubmissionDetails_result&);
  Airavata_updateSSHJobSubmissionDetails_result() : success(0) {
  }

  virtual ~Airavata_updateSSHJobSubmissionDetails_result() throw();
  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_updateSSHJobSubmissionDetails_result__isset __isset;

  void __set_success(const bool val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_updateSSHJobSubmissionDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateSSHJobSubmissionDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateSSHJobSubmissionDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateSSHJobSubmissionDetails_result& obj);
};

typedef struct _Airavata_updateSSHJobSubmissionDetails_presult__isset {
  _Airavata_updateSSHJobSubmissionDetails_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_updateSSHJobSubmissionDetails_presult__isset;

class Airavata_updateSSHJobSubmissionDetails_presult {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};


  virtual ~Airavata_updateSSHJobSubmissionDetails_presult() throw();
  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_updateSSHJobSubmissionDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateSSHJobSubmissionDetails_presult& obj);
};


class Airavata_updateCloudJobSubmissionDetails_args {
 public:

  static const char* ascii_fingerprint; // = "EEAE1A7E342801293C71E676217588DB";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xAE,0x1A,0x7E,0x34,0x28,0x01,0x29,0x3C,0x71,0xE6,0x76,0x21,0x75,0x88,0xDB};

  Airavata_updateCloudJobSubmissionDetails_args(const Airavata_updateCloudJobSubmissionDetails_args&);
  Airavata_updateCloudJobSubmissionDetails_args& operator=(const Airavata_updateCloudJobSubmissionDetails_args&);
  Airavata_updateCloudJobSubmissionDetails_args() : jobSubmissionInterfaceId() {
  }

  virtual ~Airavata_updateCloudJobSubmissionDetails_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string jobSubmissionInterfaceId;
   ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission sshJobSubmission;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_jobSubmissionInterfaceId(const std::string& val);

  void __set_sshJobSubmission(const  ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission& val);

  bool operator == (const Airavata_updateCloudJobSubmissionDetails_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(jobSubmissionInterfaceId == rhs.jobSubmissionInterfaceId))
      return false;
    if (!(sshJobSubmission == rhs.sshJobSubmission))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateCloudJobSubmissionDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateCloudJobSubmissionDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateCloudJobSubmissionDetails_args& obj);
};


class Airavata_updateCloudJobSubmissionDetails_pargs {
 public:

  static const char* ascii_fingerprint; // = "EEAE1A7E342801293C71E676217588DB";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xAE,0x1A,0x7E,0x34,0x28,0x01,0x29,0x3C,0x71,0xE6,0x76,0x21,0x75,0x88,0xDB};


  virtual ~Airavata_updateCloudJobSubmissionDetails_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* jobSubmissionInterfaceId;
  const  ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission* sshJobSubmission;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateCloudJobSubmissionDetails_pargs& obj);
};

typedef struct _Airavata_updateCloudJobSubmissionDetails_result__isset {
  _Airavata_updateCloudJobSubmissionDetails_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_updateCloudJobSubmissionDetails_result__isset;

class Airavata_updateCloudJobSubmissionDetails_result {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};

  Airavata_updateCloudJobSubmissionDetails_result(const Airavata_updateCloudJobSubmissionDetails_result&);
  Airavata_updateCloudJobSubmissionDetails_result& operator=(const Airavata_updateCloudJobSubmissionDetails_result&);
  Airavata_updateCloudJobSubmissionDetails_result() : success(0) {
  }

  virtual ~Airavata_updateCloudJobSubmissionDetails_result() throw();
  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_updateCloudJobSubmissionDetails_result__isset __isset;

  void __set_success(const bool val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_updateCloudJobSubmissionDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateCloudJobSubmissionDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateCloudJobSubmissionDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateCloudJobSubmissionDetails_result& obj);
};

typedef struct _Airavata_updateCloudJobSubmissionDetails_presult__isset {
  _Airavata_updateCloudJobSubmissionDetails_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_updateCloudJobSubmissionDetails_presult__isset;

class Airavata_updateCloudJobSubmissionDetails_presult {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};


  virtual ~Airavata_updateCloudJobSubmissionDetails_presult() throw();
  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_updateCloudJobSubmissionDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateCloudJobSubmissionDetails_presult& obj);
};


class Airavata_updateUnicoreJobSubmissionDetails_args {
 public:

  static const char* ascii_fingerprint; // = "87522ADB637251D41BCD9D8628906AD6";
  static const uint8_t binary_fingerprint[16]; // = {0x87,0x52,0x2A,0xDB,0x63,0x72,0x51,0xD4,0x1B,0xCD,0x9D,0x86,0x28,0x90,0x6A,0xD6};

  Airavata_updateUnicoreJobSubmissionDetails_args(const Airavata_updateUnicoreJobSubmissionDetails_args&);
  Airavata_updateUnicoreJobSubmissionDetails_args& operator=(const Airavata_updateUnicoreJobSubmissionDetails_args&);
  Airavata_updateUnicoreJobSubmissionDetails_args() : jobSubmissionInterfaceId() {
  }

  virtual ~Airavata_updateUnicoreJobSubmissionDetails_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string jobSubmissionInterfaceId;
   ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission unicoreJobSubmission;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_jobSubmissionInterfaceId(const std::string& val);

  void __set_unicoreJobSubmission(const  ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission& val);

  bool operator == (const Airavata_updateUnicoreJobSubmissionDetails_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(jobSubmissionInterfaceId == rhs.jobSubmissionInterfaceId))
      return false;
    if (!(unicoreJobSubmission == rhs.unicoreJobSubmission))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateUnicoreJobSubmissionDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateUnicoreJobSubmissionDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateUnicoreJobSubmissionDetails_args& obj);
};


class Airavata_updateUnicoreJobSubmissionDetails_pargs {
 public:

  static const char* ascii_fingerprint; // = "87522ADB637251D41BCD9D8628906AD6";
  static const uint8_t binary_fingerprint[16]; // = {0x87,0x52,0x2A,0xDB,0x63,0x72,0x51,0xD4,0x1B,0xCD,0x9D,0x86,0x28,0x90,0x6A,0xD6};


  virtual ~Airavata_updateUnicoreJobSubmissionDetails_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* jobSubmissionInterfaceId;
  const  ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission* unicoreJobSubmission;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateUnicoreJobSubmissionDetails_pargs& obj);
};

typedef struct _Airavata_updateUnicoreJobSubmissionDetails_result__isset {
  _Airavata_updateUnicoreJobSubmissionDetails_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_updateUnicoreJobSubmissionDetails_result__isset;

class Airavata_updateUnicoreJobSubmissionDetails_result {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};

  Airavata_updateUnicoreJobSubmissionDetails_result(const Airavata_updateUnicoreJobSubmissionDetails_result&);
  Airavata_updateUnicoreJobSubmissionDetails_result& operator=(const Airavata_updateUnicoreJobSubmissionDetails_result&);
  Airavata_updateUnicoreJobSubmissionDetails_result() : success(0) {
  }

  virtual ~Airavata_updateUnicoreJobSubmissionDetails_result() throw();
  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_updateUnicoreJobSubmissionDetails_result__isset __isset;

  void __set_success(const bool val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_updateUnicoreJobSubmissionDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateUnicoreJobSubmissionDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateUnicoreJobSubmissionDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateUnicoreJobSubmissionDetails_result& obj);
};

typedef struct _Airavata_updateUnicoreJobSubmissionDetails_presult__isset {
  _Airavata_updateUnicoreJobSubmissionDetails_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_updateUnicoreJobSubmissionDetails_presult__isset;

class Airavata_updateUnicoreJobSubmissionDetails_presult {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};


  virtual ~Airavata_updateUnicoreJobSubmissionDetails_presult() throw();
  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_updateUnicoreJobSubmissionDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateUnicoreJobSubmissionDetails_presult& obj);
};


class Airavata_addLocalDataMovementDetails_args {
 public:

  static const char* ascii_fingerprint; // = "C67E999928098F56E6CE1E5F0A873872";
  static const uint8_t binary_fingerprint[16]; // = {0xC6,0x7E,0x99,0x99,0x28,0x09,0x8F,0x56,0xE6,0xCE,0x1E,0x5F,0x0A,0x87,0x38,0x72};

  Airavata_addLocalDataMovementDetails_args(const Airavata_addLocalDataMovementDetails_args&);
  Airavata_addLocalDataMovementDetails_args& operator=(const Airavata_addLocalDataMovementDetails_args&);
  Airavata_addLocalDataMovementDetails_args() : computeResourceId(), priorityOrder(0) {
  }

  virtual ~Airavata_addLocalDataMovementDetails_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string computeResourceId;
  int32_t priorityOrder;
   ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement localDataMovement;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_computeResourceId(const std::string& val);

  void __set_priorityOrder(const int32_t val);

  void __set_localDataMovement(const  ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement& val);

  bool operator == (const Airavata_addLocalDataMovementDetails_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    if (!(priorityOrder == rhs.priorityOrder))
      return false;
    if (!(localDataMovement == rhs.localDataMovement))
      return false;
    return true;
  }
  bool operator != (const Airavata_addLocalDataMovementDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addLocalDataMovementDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_addLocalDataMovementDetails_args& obj);
};


class Airavata_addLocalDataMovementDetails_pargs {
 public:

  static const char* ascii_fingerprint; // = "C67E999928098F56E6CE1E5F0A873872";
  static const uint8_t binary_fingerprint[16]; // = {0xC6,0x7E,0x99,0x99,0x28,0x09,0x8F,0x56,0xE6,0xCE,0x1E,0x5F,0x0A,0x87,0x38,0x72};


  virtual ~Airavata_addLocalDataMovementDetails_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* computeResourceId;
  const int32_t* priorityOrder;
  const  ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement* localDataMovement;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_addLocalDataMovementDetails_pargs& obj);
};

typedef struct _Airavata_addLocalDataMovementDetails_result__isset {
  _Airavata_addLocalDataMovementDetails_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_addLocalDataMovementDetails_result__isset;

class Airavata_addLocalDataMovementDetails_result {
 public:

  static const char* ascii_fingerprint; // = "21BF57A9FE5AAA661540804D4FB9F023";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xBF,0x57,0xA9,0xFE,0x5A,0xAA,0x66,0x15,0x40,0x80,0x4D,0x4F,0xB9,0xF0,0x23};

  Airavata_addLocalDataMovementDetails_result(const Airavata_addLocalDataMovementDetails_result&);
  Airavata_addLocalDataMovementDetails_result& operator=(const Airavata_addLocalDataMovementDetails_result&);
  Airavata_addLocalDataMovementDetails_result() : success() {
  }

  virtual ~Airavata_addLocalDataMovementDetails_result() throw();
  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_addLocalDataMovementDetails_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_addLocalDataMovementDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_addLocalDataMovementDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addLocalDataMovementDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_addLocalDataMovementDetails_result& obj);
};

typedef struct _Airavata_addLocalDataMovementDetails_presult__isset {
  _Airavata_addLocalDataMovementDetails_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_addLocalDataMovementDetails_presult__isset;

class Airavata_addLocalDataMovementDetails_presult {
 public:

  static const char* ascii_fingerprint; // = "21BF57A9FE5AAA661540804D4FB9F023";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xBF,0x57,0xA9,0xFE,0x5A,0xAA,0x66,0x15,0x40,0x80,0x4D,0x4F,0xB9,0xF0,0x23};


  virtual ~Airavata_addLocalDataMovementDetails_presult() throw();
  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_addLocalDataMovementDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_addLocalDataMovementDetails_presult& obj);
};


class Airavata_updateLocalDataMovementDetails_args {
 public:

  static const char* ascii_fingerprint; // = "C46A085239461E9EFBCFAD6B6795E256";
  static const uint8_t binary_fingerprint[16]; // = {0xC4,0x6A,0x08,0x52,0x39,0x46,0x1E,0x9E,0xFB,0xCF,0xAD,0x6B,0x67,0x95,0xE2,0x56};

  Airavata_updateLocalDataMovementDetails_args(const Airavata_updateLocalDataMovementDetails_args&);
  Airavata_updateLocalDataMovementDetails_args& operator=(const Airavata_updateLocalDataMovementDetails_args&);
  Airavata_updateLocalDataMovementDetails_args() : dataMovementInterfaceId() {
  }

  virtual ~Airavata_updateLocalDataMovementDetails_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string dataMovementInterfaceId;
   ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement localDataMovement;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_dataMovementInterfaceId(const std::string& val);

  void __set_localDataMovement(const  ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement& val);

  bool operator == (const Airavata_updateLocalDataMovementDetails_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(dataMovementInterfaceId == rhs.dataMovementInterfaceId))
      return false;
    if (!(localDataMovement == rhs.localDataMovement))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateLocalDataMovementDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateLocalDataMovementDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateLocalDataMovementDetails_args& obj);
};


class Airavata_updateLocalDataMovementDetails_pargs {
 public:

  static const char* ascii_fingerprint; // = "C46A085239461E9EFBCFAD6B6795E256";
  static const uint8_t binary_fingerprint[16]; // = {0xC4,0x6A,0x08,0x52,0x39,0x46,0x1E,0x9E,0xFB,0xCF,0xAD,0x6B,0x67,0x95,0xE2,0x56};


  virtual ~Airavata_updateLocalDataMovementDetails_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* dataMovementInterfaceId;
  const  ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement* localDataMovement;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateLocalDataMovementDetails_pargs& obj);
};

typedef struct _Airavata_updateLocalDataMovementDetails_result__isset {
  _Airavata_updateLocalDataMovementDetails_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_updateLocalDataMovementDetails_result__isset;

class Airavata_updateLocalDataMovementDetails_result {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};

  Airavata_updateLocalDataMovementDetails_result(const Airavata_updateLocalDataMovementDetails_result&);
  Airavata_updateLocalDataMovementDetails_result& operator=(const Airavata_updateLocalDataMovementDetails_result&);
  Airavata_updateLocalDataMovementDetails_result() : success(0) {
  }

  virtual ~Airavata_updateLocalDataMovementDetails_result() throw();
  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_updateLocalDataMovementDetails_result__isset __isset;

  void __set_success(const bool val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_updateLocalDataMovementDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateLocalDataMovementDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateLocalDataMovementDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateLocalDataMovementDetails_result& obj);
};

typedef struct _Airavata_updateLocalDataMovementDetails_presult__isset {
  _Airavata_updateLocalDataMovementDetails_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_updateLocalDataMovementDetails_presult__isset;

class Airavata_updateLocalDataMovementDetails_presult {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};


  virtual ~Airavata_updateLocalDataMovementDetails_presult() throw();
  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_updateLocalDataMovementDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateLocalDataMovementDetails_presult& obj);
};


class Airavata_getLocalDataMovement_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_getLocalDataMovement_args(const Airavata_getLocalDataMovement_args&);
  Airavata_getLocalDataMovement_args& operator=(const Airavata_getLocalDataMovement_args&);
  Airavata_getLocalDataMovement_args() : dataMovementId() {
  }

  virtual ~Airavata_getLocalDataMovement_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string dataMovementId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_dataMovementId(const std::string& val);

  bool operator == (const Airavata_getLocalDataMovement_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(dataMovementId == rhs.dataMovementId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getLocalDataMovement_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getLocalDataMovement_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getLocalDataMovement_args& obj);
};


class Airavata_getLocalDataMovement_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_getLocalDataMovement_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* dataMovementId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getLocalDataMovement_pargs& obj);
};

typedef struct _Airavata_getLocalDataMovement_result__isset {
  _Airavata_getLocalDataMovement_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getLocalDataMovement_result__isset;

class Airavata_getLocalDataMovement_result {
 public:

  static const char* ascii_fingerprint; // = "2A9B6470BEAA92B28B8E01535EFE07A5";
  static const uint8_t binary_fingerprint[16]; // = {0x2A,0x9B,0x64,0x70,0xBE,0xAA,0x92,0xB2,0x8B,0x8E,0x01,0x53,0x5E,0xFE,0x07,0xA5};

  Airavata_getLocalDataMovement_result(const Airavata_getLocalDataMovement_result&);
  Airavata_getLocalDataMovement_result& operator=(const Airavata_getLocalDataMovement_result&);
  Airavata_getLocalDataMovement_result() {
  }

  virtual ~Airavata_getLocalDataMovement_result() throw();
   ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getLocalDataMovement_result__isset __isset;

  void __set_success(const  ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_getLocalDataMovement_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_getLocalDataMovement_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getLocalDataMovement_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getLocalDataMovement_result& obj);
};

typedef struct _Airavata_getLocalDataMovement_presult__isset {
  _Airavata_getLocalDataMovement_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getLocalDataMovement_presult__isset;

class Airavata_getLocalDataMovement_presult {
 public:

  static const char* ascii_fingerprint; // = "2A9B6470BEAA92B28B8E01535EFE07A5";
  static const uint8_t binary_fingerprint[16]; // = {0x2A,0x9B,0x64,0x70,0xBE,0xAA,0x92,0xB2,0x8B,0x8E,0x01,0x53,0x5E,0xFE,0x07,0xA5};


  virtual ~Airavata_getLocalDataMovement_presult() throw();
   ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getLocalDataMovement_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getLocalDataMovement_presult& obj);
};


class Airavata_addSCPDataMovementDetails_args {
 public:

  static const char* ascii_fingerprint; // = "2CC6E777B98DE66DA368D27FC2926465";
  static const uint8_t binary_fingerprint[16]; // = {0x2C,0xC6,0xE7,0x77,0xB9,0x8D,0xE6,0x6D,0xA3,0x68,0xD2,0x7F,0xC2,0x92,0x64,0x65};

  Airavata_addSCPDataMovementDetails_args(const Airavata_addSCPDataMovementDetails_args&);
  Airavata_addSCPDataMovementDetails_args& operator=(const Airavata_addSCPDataMovementDetails_args&);
  Airavata_addSCPDataMovementDetails_args() : computeResourceId(), priorityOrder(0) {
  }

  virtual ~Airavata_addSCPDataMovementDetails_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string computeResourceId;
  int32_t priorityOrder;
   ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement scpDataMovement;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_computeResourceId(const std::string& val);

  void __set_priorityOrder(const int32_t val);

  void __set_scpDataMovement(const  ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement& val);

  bool operator == (const Airavata_addSCPDataMovementDetails_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    if (!(priorityOrder == rhs.priorityOrder))
      return false;
    if (!(scpDataMovement == rhs.scpDataMovement))
      return false;
    return true;
  }
  bool operator != (const Airavata_addSCPDataMovementDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addSCPDataMovementDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_addSCPDataMovementDetails_args& obj);
};


class Airavata_addSCPDataMovementDetails_pargs {
 public:

  static const char* ascii_fingerprint; // = "2CC6E777B98DE66DA368D27FC2926465";
  static const uint8_t binary_fingerprint[16]; // = {0x2C,0xC6,0xE7,0x77,0xB9,0x8D,0xE6,0x6D,0xA3,0x68,0xD2,0x7F,0xC2,0x92,0x64,0x65};


  virtual ~Airavata_addSCPDataMovementDetails_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* computeResourceId;
  const int32_t* priorityOrder;
  const  ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement* scpDataMovement;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_addSCPDataMovementDetails_pargs& obj);
};

typedef struct _Airavata_addSCPDataMovementDetails_result__isset {
  _Airavata_addSCPDataMovementDetails_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_addSCPDataMovementDetails_result__isset;

class Airavata_addSCPDataMovementDetails_result {
 public:

  static const char* ascii_fingerprint; // = "21BF57A9FE5AAA661540804D4FB9F023";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xBF,0x57,0xA9,0xFE,0x5A,0xAA,0x66,0x15,0x40,0x80,0x4D,0x4F,0xB9,0xF0,0x23};

  Airavata_addSCPDataMovementDetails_result(const Airavata_addSCPDataMovementDetails_result&);
  Airavata_addSCPDataMovementDetails_result& operator=(const Airavata_addSCPDataMovementDetails_result&);
  Airavata_addSCPDataMovementDetails_result() : success() {
  }

  virtual ~Airavata_addSCPDataMovementDetails_result() throw();
  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_addSCPDataMovementDetails_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_addSCPDataMovementDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_addSCPDataMovementDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addSCPDataMovementDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_addSCPDataMovementDetails_result& obj);
};

typedef struct _Airavata_addSCPDataMovementDetails_presult__isset {
  _Airavata_addSCPDataMovementDetails_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_addSCPDataMovementDetails_presult__isset;

class Airavata_addSCPDataMovementDetails_presult {
 public:

  static const char* ascii_fingerprint; // = "21BF57A9FE5AAA661540804D4FB9F023";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xBF,0x57,0xA9,0xFE,0x5A,0xAA,0x66,0x15,0x40,0x80,0x4D,0x4F,0xB9,0xF0,0x23};


  virtual ~Airavata_addSCPDataMovementDetails_presult() throw();
  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_addSCPDataMovementDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_addSCPDataMovementDetails_presult& obj);
};


class Airavata_updateSCPDataMovementDetails_args {
 public:

  static const char* ascii_fingerprint; // = "8AD7458F3E517F9B6E1B033225DE7D9F";
  static const uint8_t binary_fingerprint[16]; // = {0x8A,0xD7,0x45,0x8F,0x3E,0x51,0x7F,0x9B,0x6E,0x1B,0x03,0x32,0x25,0xDE,0x7D,0x9F};

  Airavata_updateSCPDataMovementDetails_args(const Airavata_updateSCPDataMovementDetails_args&);
  Airavata_updateSCPDataMovementDetails_args& operator=(const Airavata_updateSCPDataMovementDetails_args&);
  Airavata_updateSCPDataMovementDetails_args() : dataMovementInterfaceId() {
  }

  virtual ~Airavata_updateSCPDataMovementDetails_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string dataMovementInterfaceId;
   ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement scpDataMovement;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_dataMovementInterfaceId(const std::string& val);

  void __set_scpDataMovement(const  ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement& val);

  bool operator == (const Airavata_updateSCPDataMovementDetails_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(dataMovementInterfaceId == rhs.dataMovementInterfaceId))
      return false;
    if (!(scpDataMovement == rhs.scpDataMovement))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateSCPDataMovementDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateSCPDataMovementDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateSCPDataMovementDetails_args& obj);
};


class Airavata_updateSCPDataMovementDetails_pargs {
 public:

  static const char* ascii_fingerprint; // = "8AD7458F3E517F9B6E1B033225DE7D9F";
  static const uint8_t binary_fingerprint[16]; // = {0x8A,0xD7,0x45,0x8F,0x3E,0x51,0x7F,0x9B,0x6E,0x1B,0x03,0x32,0x25,0xDE,0x7D,0x9F};


  virtual ~Airavata_updateSCPDataMovementDetails_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* dataMovementInterfaceId;
  const  ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement* scpDataMovement;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateSCPDataMovementDetails_pargs& obj);
};

typedef struct _Airavata_updateSCPDataMovementDetails_result__isset {
  _Airavata_updateSCPDataMovementDetails_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_updateSCPDataMovementDetails_result__isset;

class Airavata_updateSCPDataMovementDetails_result {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};

  Airavata_updateSCPDataMovementDetails_result(const Airavata_updateSCPDataMovementDetails_result&);
  Airavata_updateSCPDataMovementDetails_result& operator=(const Airavata_updateSCPDataMovementDetails_result&);
  Airavata_updateSCPDataMovementDetails_result() : success(0) {
  }

  virtual ~Airavata_updateSCPDataMovementDetails_result() throw();
  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_updateSCPDataMovementDetails_result__isset __isset;

  void __set_success(const bool val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_updateSCPDataMovementDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateSCPDataMovementDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateSCPDataMovementDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateSCPDataMovementDetails_result& obj);
};

typedef struct _Airavata_updateSCPDataMovementDetails_presult__isset {
  _Airavata_updateSCPDataMovementDetails_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_updateSCPDataMovementDetails_presult__isset;

class Airavata_updateSCPDataMovementDetails_presult {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};


  virtual ~Airavata_updateSCPDataMovementDetails_presult() throw();
  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_updateSCPDataMovementDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateSCPDataMovementDetails_presult& obj);
};


class Airavata_getSCPDataMovement_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_getSCPDataMovement_args(const Airavata_getSCPDataMovement_args&);
  Airavata_getSCPDataMovement_args& operator=(const Airavata_getSCPDataMovement_args&);
  Airavata_getSCPDataMovement_args() : dataMovementId() {
  }

  virtual ~Airavata_getSCPDataMovement_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string dataMovementId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_dataMovementId(const std::string& val);

  bool operator == (const Airavata_getSCPDataMovement_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(dataMovementId == rhs.dataMovementId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getSCPDataMovement_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getSCPDataMovement_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getSCPDataMovement_args& obj);
};


class Airavata_getSCPDataMovement_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_getSCPDataMovement_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* dataMovementId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getSCPDataMovement_pargs& obj);
};

typedef struct _Airavata_getSCPDataMovement_result__isset {
  _Airavata_getSCPDataMovement_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getSCPDataMovement_result__isset;

class Airavata_getSCPDataMovement_result {
 public:

  static const char* ascii_fingerprint; // = "8005886172BB8CD575F6882E41D51AC9";
  static const uint8_t binary_fingerprint[16]; // = {0x80,0x05,0x88,0x61,0x72,0xBB,0x8C,0xD5,0x75,0xF6,0x88,0x2E,0x41,0xD5,0x1A,0xC9};

  Airavata_getSCPDataMovement_result(const Airavata_getSCPDataMovement_result&);
  Airavata_getSCPDataMovement_result& operator=(const Airavata_getSCPDataMovement_result&);
  Airavata_getSCPDataMovement_result() {
  }

  virtual ~Airavata_getSCPDataMovement_result() throw();
   ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getSCPDataMovement_result__isset __isset;

  void __set_success(const  ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_getSCPDataMovement_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_getSCPDataMovement_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getSCPDataMovement_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getSCPDataMovement_result& obj);
};

typedef struct _Airavata_getSCPDataMovement_presult__isset {
  _Airavata_getSCPDataMovement_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getSCPDataMovement_presult__isset;

class Airavata_getSCPDataMovement_presult {
 public:

  static const char* ascii_fingerprint; // = "8005886172BB8CD575F6882E41D51AC9";
  static const uint8_t binary_fingerprint[16]; // = {0x80,0x05,0x88,0x61,0x72,0xBB,0x8C,0xD5,0x75,0xF6,0x88,0x2E,0x41,0xD5,0x1A,0xC9};


  virtual ~Airavata_getSCPDataMovement_presult() throw();
   ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getSCPDataMovement_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getSCPDataMovement_presult& obj);
};


class Airavata_addUnicoreDataMovementDetails_args {
 public:

  static const char* ascii_fingerprint; // = "9C481B55CC89B4890CA332B07489FC6F";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x48,0x1B,0x55,0xCC,0x89,0xB4,0x89,0x0C,0xA3,0x32,0xB0,0x74,0x89,0xFC,0x6F};

  Airavata_addUnicoreDataMovementDetails_args(const Airavata_addUnicoreDataMovementDetails_args&);
  Airavata_addUnicoreDataMovementDetails_args& operator=(const Airavata_addUnicoreDataMovementDetails_args&);
  Airavata_addUnicoreDataMovementDetails_args() : computeResourceId(), priorityOrder(0) {
  }

  virtual ~Airavata_addUnicoreDataMovementDetails_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string computeResourceId;
  int32_t priorityOrder;
   ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement unicoreDataMovement;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_computeResourceId(const std::string& val);

  void __set_priorityOrder(const int32_t val);

  void __set_unicoreDataMovement(const  ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement& val);

  bool operator == (const Airavata_addUnicoreDataMovementDetails_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    if (!(priorityOrder == rhs.priorityOrder))
      return false;
    if (!(unicoreDataMovement == rhs.unicoreDataMovement))
      return false;
    return true;
  }
  bool operator != (const Airavata_addUnicoreDataMovementDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addUnicoreDataMovementDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_addUnicoreDataMovementDetails_args& obj);
};


class Airavata_addUnicoreDataMovementDetails_pargs {
 public:

  static const char* ascii_fingerprint; // = "9C481B55CC89B4890CA332B07489FC6F";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x48,0x1B,0x55,0xCC,0x89,0xB4,0x89,0x0C,0xA3,0x32,0xB0,0x74,0x89,0xFC,0x6F};


  virtual ~Airavata_addUnicoreDataMovementDetails_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* computeResourceId;
  const int32_t* priorityOrder;
  const  ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement* unicoreDataMovement;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_addUnicoreDataMovementDetails_pargs& obj);
};

typedef struct _Airavata_addUnicoreDataMovementDetails_result__isset {
  _Airavata_addUnicoreDataMovementDetails_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_addUnicoreDataMovementDetails_result__isset;

class Airavata_addUnicoreDataMovementDetails_result {
 public:

  static const char* ascii_fingerprint; // = "21BF57A9FE5AAA661540804D4FB9F023";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xBF,0x57,0xA9,0xFE,0x5A,0xAA,0x66,0x15,0x40,0x80,0x4D,0x4F,0xB9,0xF0,0x23};

  Airavata_addUnicoreDataMovementDetails_result(const Airavata_addUnicoreDataMovementDetails_result&);
  Airavata_addUnicoreDataMovementDetails_result& operator=(const Airavata_addUnicoreDataMovementDetails_result&);
  Airavata_addUnicoreDataMovementDetails_result() : success() {
  }

  virtual ~Airavata_addUnicoreDataMovementDetails_result() throw();
  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_addUnicoreDataMovementDetails_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_addUnicoreDataMovementDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_addUnicoreDataMovementDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addUnicoreDataMovementDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_addUnicoreDataMovementDetails_result& obj);
};

typedef struct _Airavata_addUnicoreDataMovementDetails_presult__isset {
  _Airavata_addUnicoreDataMovementDetails_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_addUnicoreDataMovementDetails_presult__isset;

class Airavata_addUnicoreDataMovementDetails_presult {
 public:

  static const char* ascii_fingerprint; // = "21BF57A9FE5AAA661540804D4FB9F023";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xBF,0x57,0xA9,0xFE,0x5A,0xAA,0x66,0x15,0x40,0x80,0x4D,0x4F,0xB9,0xF0,0x23};


  virtual ~Airavata_addUnicoreDataMovementDetails_presult() throw();
  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_addUnicoreDataMovementDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_addUnicoreDataMovementDetails_presult& obj);
};


class Airavata_updateUnicoreDataMovementDetails_args {
 public:

  static const char* ascii_fingerprint; // = "87522ADB637251D41BCD9D8628906AD6";
  static const uint8_t binary_fingerprint[16]; // = {0x87,0x52,0x2A,0xDB,0x63,0x72,0x51,0xD4,0x1B,0xCD,0x9D,0x86,0x28,0x90,0x6A,0xD6};

  Airavata_updateUnicoreDataMovementDetails_args(const Airavata_updateUnicoreDataMovementDetails_args&);
  Airavata_updateUnicoreDataMovementDetails_args& operator=(const Airavata_updateUnicoreDataMovementDetails_args&);
  Airavata_updateUnicoreDataMovementDetails_args() : dataMovementInterfaceId() {
  }

  virtual ~Airavata_updateUnicoreDataMovementDetails_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string dataMovementInterfaceId;
   ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement unicoreDataMovement;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_dataMovementInterfaceId(const std::string& val);

  void __set_unicoreDataMovement(const  ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement& val);

  bool operator == (const Airavata_updateUnicoreDataMovementDetails_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(dataMovementInterfaceId == rhs.dataMovementInterfaceId))
      return false;
    if (!(unicoreDataMovement == rhs.unicoreDataMovement))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateUnicoreDataMovementDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateUnicoreDataMovementDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateUnicoreDataMovementDetails_args& obj);
};


class Airavata_updateUnicoreDataMovementDetails_pargs {
 public:

  static const char* ascii_fingerprint; // = "87522ADB637251D41BCD9D8628906AD6";
  static const uint8_t binary_fingerprint[16]; // = {0x87,0x52,0x2A,0xDB,0x63,0x72,0x51,0xD4,0x1B,0xCD,0x9D,0x86,0x28,0x90,0x6A,0xD6};


  virtual ~Airavata_updateUnicoreDataMovementDetails_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* dataMovementInterfaceId;
  const  ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement* unicoreDataMovement;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateUnicoreDataMovementDetails_pargs& obj);
};

typedef struct _Airavata_updateUnicoreDataMovementDetails_result__isset {
  _Airavata_updateUnicoreDataMovementDetails_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_updateUnicoreDataMovementDetails_result__isset;

class Airavata_updateUnicoreDataMovementDetails_result {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};

  Airavata_updateUnicoreDataMovementDetails_result(const Airavata_updateUnicoreDataMovementDetails_result&);
  Airavata_updateUnicoreDataMovementDetails_result& operator=(const Airavata_updateUnicoreDataMovementDetails_result&);
  Airavata_updateUnicoreDataMovementDetails_result() : success(0) {
  }

  virtual ~Airavata_updateUnicoreDataMovementDetails_result() throw();
  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_updateUnicoreDataMovementDetails_result__isset __isset;

  void __set_success(const bool val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_updateUnicoreDataMovementDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateUnicoreDataMovementDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateUnicoreDataMovementDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateUnicoreDataMovementDetails_result& obj);
};

typedef struct _Airavata_updateUnicoreDataMovementDetails_presult__isset {
  _Airavata_updateUnicoreDataMovementDetails_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_updateUnicoreDataMovementDetails_presult__isset;

class Airavata_updateUnicoreDataMovementDetails_presult {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};


  virtual ~Airavata_updateUnicoreDataMovementDetails_presult() throw();
  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_updateUnicoreDataMovementDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateUnicoreDataMovementDetails_presult& obj);
};


class Airavata_getUnicoreDataMovement_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_getUnicoreDataMovement_args(const Airavata_getUnicoreDataMovement_args&);
  Airavata_getUnicoreDataMovement_args& operator=(const Airavata_getUnicoreDataMovement_args&);
  Airavata_getUnicoreDataMovement_args() : dataMovementId() {
  }

  virtual ~Airavata_getUnicoreDataMovement_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string dataMovementId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_dataMovementId(const std::string& val);

  bool operator == (const Airavata_getUnicoreDataMovement_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(dataMovementId == rhs.dataMovementId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getUnicoreDataMovement_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getUnicoreDataMovement_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getUnicoreDataMovement_args& obj);
};


class Airavata_getUnicoreDataMovement_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_getUnicoreDataMovement_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* dataMovementId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getUnicoreDataMovement_pargs& obj);
};

typedef struct _Airavata_getUnicoreDataMovement_result__isset {
  _Airavata_getUnicoreDataMovement_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getUnicoreDataMovement_result__isset;

class Airavata_getUnicoreDataMovement_result {
 public:

  static const char* ascii_fingerprint; // = "B201E8F31E13DF037993F234DEF9CBF4";
  static const uint8_t binary_fingerprint[16]; // = {0xB2,0x01,0xE8,0xF3,0x1E,0x13,0xDF,0x03,0x79,0x93,0xF2,0x34,0xDE,0xF9,0xCB,0xF4};

  Airavata_getUnicoreDataMovement_result(const Airavata_getUnicoreDataMovement_result&);
  Airavata_getUnicoreDataMovement_result& operator=(const Airavata_getUnicoreDataMovement_result&);
  Airavata_getUnicoreDataMovement_result() {
  }

  virtual ~Airavata_getUnicoreDataMovement_result() throw();
   ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getUnicoreDataMovement_result__isset __isset;

  void __set_success(const  ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_getUnicoreDataMovement_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_getUnicoreDataMovement_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getUnicoreDataMovement_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getUnicoreDataMovement_result& obj);
};

typedef struct _Airavata_getUnicoreDataMovement_presult__isset {
  _Airavata_getUnicoreDataMovement_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getUnicoreDataMovement_presult__isset;

class Airavata_getUnicoreDataMovement_presult {
 public:

  static const char* ascii_fingerprint; // = "B201E8F31E13DF037993F234DEF9CBF4";
  static const uint8_t binary_fingerprint[16]; // = {0xB2,0x01,0xE8,0xF3,0x1E,0x13,0xDF,0x03,0x79,0x93,0xF2,0x34,0xDE,0xF9,0xCB,0xF4};


  virtual ~Airavata_getUnicoreDataMovement_presult() throw();
   ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getUnicoreDataMovement_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getUnicoreDataMovement_presult& obj);
};


class Airavata_addGridFTPDataMovementDetails_args {
 public:

  static const char* ascii_fingerprint; // = "58551C5C9309A7DB38BC8BD183E9D217";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x55,0x1C,0x5C,0x93,0x09,0xA7,0xDB,0x38,0xBC,0x8B,0xD1,0x83,0xE9,0xD2,0x17};

  Airavata_addGridFTPDataMovementDetails_args(const Airavata_addGridFTPDataMovementDetails_args&);
  Airavata_addGridFTPDataMovementDetails_args& operator=(const Airavata_addGridFTPDataMovementDetails_args&);
  Airavata_addGridFTPDataMovementDetails_args() : computeResourceId(), priorityOrder(0) {
  }

  virtual ~Airavata_addGridFTPDataMovementDetails_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string computeResourceId;
  int32_t priorityOrder;
   ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement gridFTPDataMovement;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_computeResourceId(const std::string& val);

  void __set_priorityOrder(const int32_t val);

  void __set_gridFTPDataMovement(const  ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement& val);

  bool operator == (const Airavata_addGridFTPDataMovementDetails_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    if (!(priorityOrder == rhs.priorityOrder))
      return false;
    if (!(gridFTPDataMovement == rhs.gridFTPDataMovement))
      return false;
    return true;
  }
  bool operator != (const Airavata_addGridFTPDataMovementDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addGridFTPDataMovementDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_addGridFTPDataMovementDetails_args& obj);
};


class Airavata_addGridFTPDataMovementDetails_pargs {
 public:

  static const char* ascii_fingerprint; // = "58551C5C9309A7DB38BC8BD183E9D217";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x55,0x1C,0x5C,0x93,0x09,0xA7,0xDB,0x38,0xBC,0x8B,0xD1,0x83,0xE9,0xD2,0x17};


  virtual ~Airavata_addGridFTPDataMovementDetails_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* computeResourceId;
  const int32_t* priorityOrder;
  const  ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement* gridFTPDataMovement;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_addGridFTPDataMovementDetails_pargs& obj);
};

typedef struct _Airavata_addGridFTPDataMovementDetails_result__isset {
  _Airavata_addGridFTPDataMovementDetails_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_addGridFTPDataMovementDetails_result__isset;

class Airavata_addGridFTPDataMovementDetails_result {
 public:

  static const char* ascii_fingerprint; // = "21BF57A9FE5AAA661540804D4FB9F023";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xBF,0x57,0xA9,0xFE,0x5A,0xAA,0x66,0x15,0x40,0x80,0x4D,0x4F,0xB9,0xF0,0x23};

  Airavata_addGridFTPDataMovementDetails_result(const Airavata_addGridFTPDataMovementDetails_result&);
  Airavata_addGridFTPDataMovementDetails_result& operator=(const Airavata_addGridFTPDataMovementDetails_result&);
  Airavata_addGridFTPDataMovementDetails_result() : success() {
  }

  virtual ~Airavata_addGridFTPDataMovementDetails_result() throw();
  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_addGridFTPDataMovementDetails_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_addGridFTPDataMovementDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_addGridFTPDataMovementDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addGridFTPDataMovementDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_addGridFTPDataMovementDetails_result& obj);
};

typedef struct _Airavata_addGridFTPDataMovementDetails_presult__isset {
  _Airavata_addGridFTPDataMovementDetails_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_addGridFTPDataMovementDetails_presult__isset;

class Airavata_addGridFTPDataMovementDetails_presult {
 public:

  static const char* ascii_fingerprint; // = "21BF57A9FE5AAA661540804D4FB9F023";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xBF,0x57,0xA9,0xFE,0x5A,0xAA,0x66,0x15,0x40,0x80,0x4D,0x4F,0xB9,0xF0,0x23};


  virtual ~Airavata_addGridFTPDataMovementDetails_presult() throw();
  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_addGridFTPDataMovementDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_addGridFTPDataMovementDetails_presult& obj);
};


class Airavata_updateGridFTPDataMovementDetails_args {
 public:

  static const char* ascii_fingerprint; // = "E1E4E08A36AD7C5FAC8C36A06F81BA19";
  static const uint8_t binary_fingerprint[16]; // = {0xE1,0xE4,0xE0,0x8A,0x36,0xAD,0x7C,0x5F,0xAC,0x8C,0x36,0xA0,0x6F,0x81,0xBA,0x19};

  Airavata_updateGridFTPDataMovementDetails_args(const Airavata_updateGridFTPDataMovementDetails_args&);
  Airavata_updateGridFTPDataMovementDetails_args& operator=(const Airavata_updateGridFTPDataMovementDetails_args&);
  Airavata_updateGridFTPDataMovementDetails_args() : dataMovementInterfaceId() {
  }

  virtual ~Airavata_updateGridFTPDataMovementDetails_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string dataMovementInterfaceId;
   ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement gridFTPDataMovement;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_dataMovementInterfaceId(const std::string& val);

  void __set_gridFTPDataMovement(const  ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement& val);

  bool operator == (const Airavata_updateGridFTPDataMovementDetails_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(dataMovementInterfaceId == rhs.dataMovementInterfaceId))
      return false;
    if (!(gridFTPDataMovement == rhs.gridFTPDataMovement))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateGridFTPDataMovementDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateGridFTPDataMovementDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateGridFTPDataMovementDetails_args& obj);
};


class Airavata_updateGridFTPDataMovementDetails_pargs {
 public:

  static const char* ascii_fingerprint; // = "E1E4E08A36AD7C5FAC8C36A06F81BA19";
  static const uint8_t binary_fingerprint[16]; // = {0xE1,0xE4,0xE0,0x8A,0x36,0xAD,0x7C,0x5F,0xAC,0x8C,0x36,0xA0,0x6F,0x81,0xBA,0x19};


  virtual ~Airavata_updateGridFTPDataMovementDetails_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* dataMovementInterfaceId;
  const  ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement* gridFTPDataMovement;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateGridFTPDataMovementDetails_pargs& obj);
};

typedef struct _Airavata_updateGridFTPDataMovementDetails_result__isset {
  _Airavata_updateGridFTPDataMovementDetails_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_updateGridFTPDataMovementDetails_result__isset;

class Airavata_updateGridFTPDataMovementDetails_result {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};

  Airavata_updateGridFTPDataMovementDetails_result(const Airavata_updateGridFTPDataMovementDetails_result&);
  Airavata_updateGridFTPDataMovementDetails_result& operator=(const Airavata_updateGridFTPDataMovementDetails_result&);
  Airavata_updateGridFTPDataMovementDetails_result() : success(0) {
  }

  virtual ~Airavata_updateGridFTPDataMovementDetails_result() throw();
  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_updateGridFTPDataMovementDetails_result__isset __isset;

  void __set_success(const bool val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_updateGridFTPDataMovementDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateGridFTPDataMovementDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateGridFTPDataMovementDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateGridFTPDataMovementDetails_result& obj);
};

typedef struct _Airavata_updateGridFTPDataMovementDetails_presult__isset {
  _Airavata_updateGridFTPDataMovementDetails_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_updateGridFTPDataMovementDetails_presult__isset;

class Airavata_updateGridFTPDataMovementDetails_presult {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};


  virtual ~Airavata_updateGridFTPDataMovementDetails_presult() throw();
  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_updateGridFTPDataMovementDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateGridFTPDataMovementDetails_presult& obj);
};


class Airavata_getGridFTPDataMovement_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_getGridFTPDataMovement_args(const Airavata_getGridFTPDataMovement_args&);
  Airavata_getGridFTPDataMovement_args& operator=(const Airavata_getGridFTPDataMovement_args&);
  Airavata_getGridFTPDataMovement_args() : dataMovementId() {
  }

  virtual ~Airavata_getGridFTPDataMovement_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string dataMovementId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_dataMovementId(const std::string& val);

  bool operator == (const Airavata_getGridFTPDataMovement_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(dataMovementId == rhs.dataMovementId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getGridFTPDataMovement_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getGridFTPDataMovement_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getGridFTPDataMovement_args& obj);
};


class Airavata_getGridFTPDataMovement_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_getGridFTPDataMovement_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* dataMovementId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getGridFTPDataMovement_pargs& obj);
};

typedef struct _Airavata_getGridFTPDataMovement_result__isset {
  _Airavata_getGridFTPDataMovement_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getGridFTPDataMovement_result__isset;

class Airavata_getGridFTPDataMovement_result {
 public:

  static const char* ascii_fingerprint; // = "6DFA2E5FC3B76D3F79CFBA0AA2B15610";
  static const uint8_t binary_fingerprint[16]; // = {0x6D,0xFA,0x2E,0x5F,0xC3,0xB7,0x6D,0x3F,0x79,0xCF,0xBA,0x0A,0xA2,0xB1,0x56,0x10};

  Airavata_getGridFTPDataMovement_result(const Airavata_getGridFTPDataMovement_result&);
  Airavata_getGridFTPDataMovement_result& operator=(const Airavata_getGridFTPDataMovement_result&);
  Airavata_getGridFTPDataMovement_result() {
  }

  virtual ~Airavata_getGridFTPDataMovement_result() throw();
   ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getGridFTPDataMovement_result__isset __isset;

  void __set_success(const  ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_getGridFTPDataMovement_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_getGridFTPDataMovement_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getGridFTPDataMovement_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getGridFTPDataMovement_result& obj);
};

typedef struct _Airavata_getGridFTPDataMovement_presult__isset {
  _Airavata_getGridFTPDataMovement_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getGridFTPDataMovement_presult__isset;

class Airavata_getGridFTPDataMovement_presult {
 public:

  static const char* ascii_fingerprint; // = "6DFA2E5FC3B76D3F79CFBA0AA2B15610";
  static const uint8_t binary_fingerprint[16]; // = {0x6D,0xFA,0x2E,0x5F,0xC3,0xB7,0x6D,0x3F,0x79,0xCF,0xBA,0x0A,0xA2,0xB1,0x56,0x10};


  virtual ~Airavata_getGridFTPDataMovement_presult() throw();
   ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getGridFTPDataMovement_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getGridFTPDataMovement_presult& obj);
};


class Airavata_changeJobSubmissionPriority_args {
 public:

  static const char* ascii_fingerprint; // = "1D657A556AB03267D8E123F852AAA080";
  static const uint8_t binary_fingerprint[16]; // = {0x1D,0x65,0x7A,0x55,0x6A,0xB0,0x32,0x67,0xD8,0xE1,0x23,0xF8,0x52,0xAA,0xA0,0x80};

  Airavata_changeJobSubmissionPriority_args(const Airavata_changeJobSubmissionPriority_args&);
  Airavata_changeJobSubmissionPriority_args& operator=(const Airavata_changeJobSubmissionPriority_args&);
  Airavata_changeJobSubmissionPriority_args() : jobSubmissionInterfaceId(), newPriorityOrder(0) {
  }

  virtual ~Airavata_changeJobSubmissionPriority_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string jobSubmissionInterfaceId;
  int32_t newPriorityOrder;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_jobSubmissionInterfaceId(const std::string& val);

  void __set_newPriorityOrder(const int32_t val);

  bool operator == (const Airavata_changeJobSubmissionPriority_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(jobSubmissionInterfaceId == rhs.jobSubmissionInterfaceId))
      return false;
    if (!(newPriorityOrder == rhs.newPriorityOrder))
      return false;
    return true;
  }
  bool operator != (const Airavata_changeJobSubmissionPriority_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_changeJobSubmissionPriority_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_changeJobSubmissionPriority_args& obj);
};


class Airavata_changeJobSubmissionPriority_pargs {
 public:

  static const char* ascii_fingerprint; // = "1D657A556AB03267D8E123F852AAA080";
  static const uint8_t binary_fingerprint[16]; // = {0x1D,0x65,0x7A,0x55,0x6A,0xB0,0x32,0x67,0xD8,0xE1,0x23,0xF8,0x52,0xAA,0xA0,0x80};


  virtual ~Airavata_changeJobSubmissionPriority_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* jobSubmissionInterfaceId;
  const int32_t* newPriorityOrder;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_changeJobSubmissionPriority_pargs& obj);
};

typedef struct _Airavata_changeJobSubmissionPriority_result__isset {
  _Airavata_changeJobSubmissionPriority_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_changeJobSubmissionPriority_result__isset;

class Airavata_changeJobSubmissionPriority_result {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};

  Airavata_changeJobSubmissionPriority_result(const Airavata_changeJobSubmissionPriority_result&);
  Airavata_changeJobSubmissionPriority_result& operator=(const Airavata_changeJobSubmissionPriority_result&);
  Airavata_changeJobSubmissionPriority_result() : success(0) {
  }

  virtual ~Airavata_changeJobSubmissionPriority_result() throw();
  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_changeJobSubmissionPriority_result__isset __isset;

  void __set_success(const bool val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_changeJobSubmissionPriority_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_changeJobSubmissionPriority_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_changeJobSubmissionPriority_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_changeJobSubmissionPriority_result& obj);
};

typedef struct _Airavata_changeJobSubmissionPriority_presult__isset {
  _Airavata_changeJobSubmissionPriority_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_changeJobSubmissionPriority_presult__isset;

class Airavata_changeJobSubmissionPriority_presult {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};


  virtual ~Airavata_changeJobSubmissionPriority_presult() throw();
  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_changeJobSubmissionPriority_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_changeJobSubmissionPriority_presult& obj);
};


class Airavata_changeDataMovementPriority_args {
 public:

  static const char* ascii_fingerprint; // = "1D657A556AB03267D8E123F852AAA080";
  static const uint8_t binary_fingerprint[16]; // = {0x1D,0x65,0x7A,0x55,0x6A,0xB0,0x32,0x67,0xD8,0xE1,0x23,0xF8,0x52,0xAA,0xA0,0x80};

  Airavata_changeDataMovementPriority_args(const Airavata_changeDataMovementPriority_args&);
  Airavata_changeDataMovementPriority_args& operator=(const Airavata_changeDataMovementPriority_args&);
  Airavata_changeDataMovementPriority_args() : dataMovementInterfaceId(), newPriorityOrder(0) {
  }

  virtual ~Airavata_changeDataMovementPriority_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string dataMovementInterfaceId;
  int32_t newPriorityOrder;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_dataMovementInterfaceId(const std::string& val);

  void __set_newPriorityOrder(const int32_t val);

  bool operator == (const Airavata_changeDataMovementPriority_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(dataMovementInterfaceId == rhs.dataMovementInterfaceId))
      return false;
    if (!(newPriorityOrder == rhs.newPriorityOrder))
      return false;
    return true;
  }
  bool operator != (const Airavata_changeDataMovementPriority_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_changeDataMovementPriority_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_changeDataMovementPriority_args& obj);
};


class Airavata_changeDataMovementPriority_pargs {
 public:

  static const char* ascii_fingerprint; // = "1D657A556AB03267D8E123F852AAA080";
  static const uint8_t binary_fingerprint[16]; // = {0x1D,0x65,0x7A,0x55,0x6A,0xB0,0x32,0x67,0xD8,0xE1,0x23,0xF8,0x52,0xAA,0xA0,0x80};


  virtual ~Airavata_changeDataMovementPriority_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* dataMovementInterfaceId;
  const int32_t* newPriorityOrder;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_changeDataMovementPriority_pargs& obj);
};

typedef struct _Airavata_changeDataMovementPriority_result__isset {
  _Airavata_changeDataMovementPriority_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_changeDataMovementPriority_result__isset;

class Airavata_changeDataMovementPriority_result {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};

  Airavata_changeDataMovementPriority_result(const Airavata_changeDataMovementPriority_result&);
  Airavata_changeDataMovementPriority_result& operator=(const Airavata_changeDataMovementPriority_result&);
  Airavata_changeDataMovementPriority_result() : success(0) {
  }

  virtual ~Airavata_changeDataMovementPriority_result() throw();
  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_changeDataMovementPriority_result__isset __isset;

  void __set_success(const bool val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_changeDataMovementPriority_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_changeDataMovementPriority_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_changeDataMovementPriority_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_changeDataMovementPriority_result& obj);
};

typedef struct _Airavata_changeDataMovementPriority_presult__isset {
  _Airavata_changeDataMovementPriority_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_changeDataMovementPriority_presult__isset;

class Airavata_changeDataMovementPriority_presult {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};


  virtual ~Airavata_changeDataMovementPriority_presult() throw();
  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_changeDataMovementPriority_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_changeDataMovementPriority_presult& obj);
};


class Airavata_changeJobSubmissionPriorities_args {
 public:

  static const char* ascii_fingerprint; // = "73132322768E97A996BD5666679189BE";
  static const uint8_t binary_fingerprint[16]; // = {0x73,0x13,0x23,0x22,0x76,0x8E,0x97,0xA9,0x96,0xBD,0x56,0x66,0x67,0x91,0x89,0xBE};

  Airavata_changeJobSubmissionPriorities_args(const Airavata_changeJobSubmissionPriorities_args&);
  Airavata_changeJobSubmissionPriorities_args& operator=(const Airavata_changeJobSubmissionPriorities_args&);
  Airavata_changeJobSubmissionPriorities_args() {
  }

  virtual ~Airavata_changeJobSubmissionPriorities_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::map<std::string, int32_t>  jobSubmissionPriorityMap;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_jobSubmissionPriorityMap(const std::map<std::string, int32_t> & val);

  bool operator == (const Airavata_changeJobSubmissionPriorities_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(jobSubmissionPriorityMap == rhs.jobSubmissionPriorityMap))
      return false;
    return true;
  }
  bool operator != (const Airavata_changeJobSubmissionPriorities_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_changeJobSubmissionPriorities_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_changeJobSubmissionPriorities_args& obj);
};


class Airavata_changeJobSubmissionPriorities_pargs {
 public:

  static const char* ascii_fingerprint; // = "73132322768E97A996BD5666679189BE";
  static const uint8_t binary_fingerprint[16]; // = {0x73,0x13,0x23,0x22,0x76,0x8E,0x97,0xA9,0x96,0xBD,0x56,0x66,0x67,0x91,0x89,0xBE};


  virtual ~Airavata_changeJobSubmissionPriorities_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::map<std::string, int32_t> * jobSubmissionPriorityMap;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_changeJobSubmissionPriorities_pargs& obj);
};

typedef struct _Airavata_changeJobSubmissionPriorities_result__isset {
  _Airavata_changeJobSubmissionPriorities_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_changeJobSubmissionPriorities_result__isset;

class Airavata_changeJobSubmissionPriorities_result {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};

  Airavata_changeJobSubmissionPriorities_result(const Airavata_changeJobSubmissionPriorities_result&);
  Airavata_changeJobSubmissionPriorities_result& operator=(const Airavata_changeJobSubmissionPriorities_result&);
  Airavata_changeJobSubmissionPriorities_result() : success(0) {
  }

  virtual ~Airavata_changeJobSubmissionPriorities_result() throw();
  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_changeJobSubmissionPriorities_result__isset __isset;

  void __set_success(const bool val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_changeJobSubmissionPriorities_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_changeJobSubmissionPriorities_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_changeJobSubmissionPriorities_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_changeJobSubmissionPriorities_result& obj);
};

typedef struct _Airavata_changeJobSubmissionPriorities_presult__isset {
  _Airavata_changeJobSubmissionPriorities_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_changeJobSubmissionPriorities_presult__isset;

class Airavata_changeJobSubmissionPriorities_presult {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};


  virtual ~Airavata_changeJobSubmissionPriorities_presult() throw();
  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_changeJobSubmissionPriorities_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_changeJobSubmissionPriorities_presult& obj);
};


class Airavata_changeDataMovementPriorities_args {
 public:

  static const char* ascii_fingerprint; // = "73132322768E97A996BD5666679189BE";
  static const uint8_t binary_fingerprint[16]; // = {0x73,0x13,0x23,0x22,0x76,0x8E,0x97,0xA9,0x96,0xBD,0x56,0x66,0x67,0x91,0x89,0xBE};

  Airavata_changeDataMovementPriorities_args(const Airavata_changeDataMovementPriorities_args&);
  Airavata_changeDataMovementPriorities_args& operator=(const Airavata_changeDataMovementPriorities_args&);
  Airavata_changeDataMovementPriorities_args() {
  }

  virtual ~Airavata_changeDataMovementPriorities_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::map<std::string, int32_t>  dataMovementPriorityMap;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_dataMovementPriorityMap(const std::map<std::string, int32_t> & val);

  bool operator == (const Airavata_changeDataMovementPriorities_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(dataMovementPriorityMap == rhs.dataMovementPriorityMap))
      return false;
    return true;
  }
  bool operator != (const Airavata_changeDataMovementPriorities_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_changeDataMovementPriorities_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_changeDataMovementPriorities_args& obj);
};


class Airavata_changeDataMovementPriorities_pargs {
 public:

  static const char* ascii_fingerprint; // = "73132322768E97A996BD5666679189BE";
  static const uint8_t binary_fingerprint[16]; // = {0x73,0x13,0x23,0x22,0x76,0x8E,0x97,0xA9,0x96,0xBD,0x56,0x66,0x67,0x91,0x89,0xBE};


  virtual ~Airavata_changeDataMovementPriorities_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::map<std::string, int32_t> * dataMovementPriorityMap;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_changeDataMovementPriorities_pargs& obj);
};

typedef struct _Airavata_changeDataMovementPriorities_result__isset {
  _Airavata_changeDataMovementPriorities_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_changeDataMovementPriorities_result__isset;

class Airavata_changeDataMovementPriorities_result {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};

  Airavata_changeDataMovementPriorities_result(const Airavata_changeDataMovementPriorities_result&);
  Airavata_changeDataMovementPriorities_result& operator=(const Airavata_changeDataMovementPriorities_result&);
  Airavata_changeDataMovementPriorities_result() : success(0) {
  }

  virtual ~Airavata_changeDataMovementPriorities_result() throw();
  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_changeDataMovementPriorities_result__isset __isset;

  void __set_success(const bool val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_changeDataMovementPriorities_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_changeDataMovementPriorities_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_changeDataMovementPriorities_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_changeDataMovementPriorities_result& obj);
};

typedef struct _Airavata_changeDataMovementPriorities_presult__isset {
  _Airavata_changeDataMovementPriorities_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_changeDataMovementPriorities_presult__isset;

class Airavata_changeDataMovementPriorities_presult {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};


  virtual ~Airavata_changeDataMovementPriorities_presult() throw();
  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_changeDataMovementPriorities_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_changeDataMovementPriorities_presult& obj);
};


class Airavata_deleteJobSubmissionInterface_args {
 public:

  static const char* ascii_fingerprint; // = "1E6476DBB101101BCE4A4B190EDEB468";
  static const uint8_t binary_fingerprint[16]; // = {0x1E,0x64,0x76,0xDB,0xB1,0x01,0x10,0x1B,0xCE,0x4A,0x4B,0x19,0x0E,0xDE,0xB4,0x68};

  Airavata_deleteJobSubmissionInterface_args(const Airavata_deleteJobSubmissionInterface_args&);
  Airavata_deleteJobSubmissionInterface_args& operator=(const Airavata_deleteJobSubmissionInterface_args&);
  Airavata_deleteJobSubmissionInterface_args() : computeResourceId(), jobSubmissionInterfaceId() {
  }

  virtual ~Airavata_deleteJobSubmissionInterface_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string computeResourceId;
  std::string jobSubmissionInterfaceId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_computeResourceId(const std::string& val);

  void __set_jobSubmissionInterfaceId(const std::string& val);

  bool operator == (const Airavata_deleteJobSubmissionInterface_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    if (!(jobSubmissionInterfaceId == rhs.jobSubmissionInterfaceId))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteJobSubmissionInterface_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteJobSubmissionInterface_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteJobSubmissionInterface_args& obj);
};


class Airavata_deleteJobSubmissionInterface_pargs {
 public:

  static const char* ascii_fingerprint; // = "1E6476DBB101101BCE4A4B190EDEB468";
  static const uint8_t binary_fingerprint[16]; // = {0x1E,0x64,0x76,0xDB,0xB1,0x01,0x10,0x1B,0xCE,0x4A,0x4B,0x19,0x0E,0xDE,0xB4,0x68};


  virtual ~Airavata_deleteJobSubmissionInterface_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* computeResourceId;
  const std::string* jobSubmissionInterfaceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteJobSubmissionInterface_pargs& obj);
};

typedef struct _Airavata_deleteJobSubmissionInterface_result__isset {
  _Airavata_deleteJobSubmissionInterface_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_deleteJobSubmissionInterface_result__isset;

class Airavata_deleteJobSubmissionInterface_result {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};

  Airavata_deleteJobSubmissionInterface_result(const Airavata_deleteJobSubmissionInterface_result&);
  Airavata_deleteJobSubmissionInterface_result& operator=(const Airavata_deleteJobSubmissionInterface_result&);
  Airavata_deleteJobSubmissionInterface_result() : success(0) {
  }

  virtual ~Airavata_deleteJobSubmissionInterface_result() throw();
  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_deleteJobSubmissionInterface_result__isset __isset;

  void __set_success(const bool val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_deleteJobSubmissionInterface_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteJobSubmissionInterface_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteJobSubmissionInterface_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteJobSubmissionInterface_result& obj);
};

typedef struct _Airavata_deleteJobSubmissionInterface_presult__isset {
  _Airavata_deleteJobSubmissionInterface_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_deleteJobSubmissionInterface_presult__isset;

class Airavata_deleteJobSubmissionInterface_presult {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};


  virtual ~Airavata_deleteJobSubmissionInterface_presult() throw();
  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_deleteJobSubmissionInterface_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteJobSubmissionInterface_presult& obj);
};


class Airavata_deleteDataMovementInterface_args {
 public:

  static const char* ascii_fingerprint; // = "1E6476DBB101101BCE4A4B190EDEB468";
  static const uint8_t binary_fingerprint[16]; // = {0x1E,0x64,0x76,0xDB,0xB1,0x01,0x10,0x1B,0xCE,0x4A,0x4B,0x19,0x0E,0xDE,0xB4,0x68};

  Airavata_deleteDataMovementInterface_args(const Airavata_deleteDataMovementInterface_args&);
  Airavata_deleteDataMovementInterface_args& operator=(const Airavata_deleteDataMovementInterface_args&);
  Airavata_deleteDataMovementInterface_args() : computeResourceId(), dataMovementInterfaceId() {
  }

  virtual ~Airavata_deleteDataMovementInterface_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string computeResourceId;
  std::string dataMovementInterfaceId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_computeResourceId(const std::string& val);

  void __set_dataMovementInterfaceId(const std::string& val);

  bool operator == (const Airavata_deleteDataMovementInterface_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    if (!(dataMovementInterfaceId == rhs.dataMovementInterfaceId))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteDataMovementInterface_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteDataMovementInterface_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteDataMovementInterface_args& obj);
};


class Airavata_deleteDataMovementInterface_pargs {
 public:

  static const char* ascii_fingerprint; // = "1E6476DBB101101BCE4A4B190EDEB468";
  static const uint8_t binary_fingerprint[16]; // = {0x1E,0x64,0x76,0xDB,0xB1,0x01,0x10,0x1B,0xCE,0x4A,0x4B,0x19,0x0E,0xDE,0xB4,0x68};


  virtual ~Airavata_deleteDataMovementInterface_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* computeResourceId;
  const std::string* dataMovementInterfaceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteDataMovementInterface_pargs& obj);
};

typedef struct _Airavata_deleteDataMovementInterface_result__isset {
  _Airavata_deleteDataMovementInterface_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_deleteDataMovementInterface_result__isset;

class Airavata_deleteDataMovementInterface_result {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};

  Airavata_deleteDataMovementInterface_result(const Airavata_deleteDataMovementInterface_result&);
  Airavata_deleteDataMovementInterface_result& operator=(const Airavata_deleteDataMovementInterface_result&);
  Airavata_deleteDataMovementInterface_result() : success(0) {
  }

  virtual ~Airavata_deleteDataMovementInterface_result() throw();
  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_deleteDataMovementInterface_result__isset __isset;

  void __set_success(const bool val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_deleteDataMovementInterface_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteDataMovementInterface_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteDataMovementInterface_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteDataMovementInterface_result& obj);
};

typedef struct _Airavata_deleteDataMovementInterface_presult__isset {
  _Airavata_deleteDataMovementInterface_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_deleteDataMovementInterface_presult__isset;

class Airavata_deleteDataMovementInterface_presult {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};


  virtual ~Airavata_deleteDataMovementInterface_presult() throw();
  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_deleteDataMovementInterface_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteDataMovementInterface_presult& obj);
};


class Airavata_registerResourceJobManager_args {
 public:

  static const char* ascii_fingerprint; // = "D2AD5E4296F7A4C94195B1ACF4DC1D77";
  static const uint8_t binary_fingerprint[16]; // = {0xD2,0xAD,0x5E,0x42,0x96,0xF7,0xA4,0xC9,0x41,0x95,0xB1,0xAC,0xF4,0xDC,0x1D,0x77};

  Airavata_registerResourceJobManager_args(const Airavata_registerResourceJobManager_args&);
  Airavata_registerResourceJobManager_args& operator=(const Airavata_registerResourceJobManager_args&);
  Airavata_registerResourceJobManager_args() {
  }

  virtual ~Airavata_registerResourceJobManager_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
   ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager resourceJobManager;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_resourceJobManager(const  ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager& val);

  bool operator == (const Airavata_registerResourceJobManager_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(resourceJobManager == rhs.resourceJobManager))
      return false;
    return true;
  }
  bool operator != (const Airavata_registerResourceJobManager_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_registerResourceJobManager_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_registerResourceJobManager_args& obj);
};


class Airavata_registerResourceJobManager_pargs {
 public:

  static const char* ascii_fingerprint; // = "D2AD5E4296F7A4C94195B1ACF4DC1D77";
  static const uint8_t binary_fingerprint[16]; // = {0xD2,0xAD,0x5E,0x42,0x96,0xF7,0xA4,0xC9,0x41,0x95,0xB1,0xAC,0xF4,0xDC,0x1D,0x77};


  virtual ~Airavata_registerResourceJobManager_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const  ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager* resourceJobManager;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_registerResourceJobManager_pargs& obj);
};

typedef struct _Airavata_registerResourceJobManager_result__isset {
  _Airavata_registerResourceJobManager_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_registerResourceJobManager_result__isset;

class Airavata_registerResourceJobManager_result {
 public:

  static const char* ascii_fingerprint; // = "21BF57A9FE5AAA661540804D4FB9F023";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xBF,0x57,0xA9,0xFE,0x5A,0xAA,0x66,0x15,0x40,0x80,0x4D,0x4F,0xB9,0xF0,0x23};

  Airavata_registerResourceJobManager_result(const Airavata_registerResourceJobManager_result&);
  Airavata_registerResourceJobManager_result& operator=(const Airavata_registerResourceJobManager_result&);
  Airavata_registerResourceJobManager_result() : success() {
  }

  virtual ~Airavata_registerResourceJobManager_result() throw();
  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_registerResourceJobManager_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_registerResourceJobManager_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_registerResourceJobManager_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_registerResourceJobManager_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_registerResourceJobManager_result& obj);
};

typedef struct _Airavata_registerResourceJobManager_presult__isset {
  _Airavata_registerResourceJobManager_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_registerResourceJobManager_presult__isset;

class Airavata_registerResourceJobManager_presult {
 public:

  static const char* ascii_fingerprint; // = "21BF57A9FE5AAA661540804D4FB9F023";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xBF,0x57,0xA9,0xFE,0x5A,0xAA,0x66,0x15,0x40,0x80,0x4D,0x4F,0xB9,0xF0,0x23};


  virtual ~Airavata_registerResourceJobManager_presult() throw();
  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_registerResourceJobManager_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_registerResourceJobManager_presult& obj);
};


class Airavata_updateResourceJobManager_args {
 public:

  static const char* ascii_fingerprint; // = "06B44995CA1AB5013B57B80077F0B240";
  static const uint8_t binary_fingerprint[16]; // = {0x06,0xB4,0x49,0x95,0xCA,0x1A,0xB5,0x01,0x3B,0x57,0xB8,0x00,0x77,0xF0,0xB2,0x40};

  Airavata_updateResourceJobManager_args(const Airavata_updateResourceJobManager_args&);
  Airavata_updateResourceJobManager_args& operator=(const Airavata_updateResourceJobManager_args&);
  Airavata_updateResourceJobManager_args() : resourceJobManagerId() {
  }

  virtual ~Airavata_updateResourceJobManager_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string resourceJobManagerId;
   ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager updatedResourceJobManager;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_resourceJobManagerId(const std::string& val);

  void __set_updatedResourceJobManager(const  ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager& val);

  bool operator == (const Airavata_updateResourceJobManager_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(resourceJobManagerId == rhs.resourceJobManagerId))
      return false;
    if (!(updatedResourceJobManager == rhs.updatedResourceJobManager))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateResourceJobManager_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateResourceJobManager_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateResourceJobManager_args& obj);
};


class Airavata_updateResourceJobManager_pargs {
 public:

  static const char* ascii_fingerprint; // = "06B44995CA1AB5013B57B80077F0B240";
  static const uint8_t binary_fingerprint[16]; // = {0x06,0xB4,0x49,0x95,0xCA,0x1A,0xB5,0x01,0x3B,0x57,0xB8,0x00,0x77,0xF0,0xB2,0x40};


  virtual ~Airavata_updateResourceJobManager_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* resourceJobManagerId;
  const  ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager* updatedResourceJobManager;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateResourceJobManager_pargs& obj);
};

typedef struct _Airavata_updateResourceJobManager_result__isset {
  _Airavata_updateResourceJobManager_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_updateResourceJobManager_result__isset;

class Airavata_updateResourceJobManager_result {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};

  Airavata_updateResourceJobManager_result(const Airavata_updateResourceJobManager_result&);
  Airavata_updateResourceJobManager_result& operator=(const Airavata_updateResourceJobManager_result&);
  Airavata_updateResourceJobManager_result() : success(0) {
  }

  virtual ~Airavata_updateResourceJobManager_result() throw();
  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_updateResourceJobManager_result__isset __isset;

  void __set_success(const bool val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_updateResourceJobManager_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateResourceJobManager_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateResourceJobManager_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateResourceJobManager_result& obj);
};

typedef struct _Airavata_updateResourceJobManager_presult__isset {
  _Airavata_updateResourceJobManager_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_updateResourceJobManager_presult__isset;

class Airavata_updateResourceJobManager_presult {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};


  virtual ~Airavata_updateResourceJobManager_presult() throw();
  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_updateResourceJobManager_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateResourceJobManager_presult& obj);
};


class Airavata_getResourceJobManager_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_getResourceJobManager_args(const Airavata_getResourceJobManager_args&);
  Airavata_getResourceJobManager_args& operator=(const Airavata_getResourceJobManager_args&);
  Airavata_getResourceJobManager_args() : resourceJobManagerId() {
  }

  virtual ~Airavata_getResourceJobManager_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string resourceJobManagerId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_resourceJobManagerId(const std::string& val);

  bool operator == (const Airavata_getResourceJobManager_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(resourceJobManagerId == rhs.resourceJobManagerId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getResourceJobManager_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getResourceJobManager_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getResourceJobManager_args& obj);
};


class Airavata_getResourceJobManager_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_getResourceJobManager_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* resourceJobManagerId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getResourceJobManager_pargs& obj);
};

typedef struct _Airavata_getResourceJobManager_result__isset {
  _Airavata_getResourceJobManager_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getResourceJobManager_result__isset;

class Airavata_getResourceJobManager_result {
 public:

  static const char* ascii_fingerprint; // = "E7AF6359D681D3E487B741B14A5D3FD2";
  static const uint8_t binary_fingerprint[16]; // = {0xE7,0xAF,0x63,0x59,0xD6,0x81,0xD3,0xE4,0x87,0xB7,0x41,0xB1,0x4A,0x5D,0x3F,0xD2};

  Airavata_getResourceJobManager_result(const Airavata_getResourceJobManager_result&);
  Airavata_getResourceJobManager_result& operator=(const Airavata_getResourceJobManager_result&);
  Airavata_getResourceJobManager_result() {
  }

  virtual ~Airavata_getResourceJobManager_result() throw();
   ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getResourceJobManager_result__isset __isset;

  void __set_success(const  ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_getResourceJobManager_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_getResourceJobManager_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getResourceJobManager_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getResourceJobManager_result& obj);
};

typedef struct _Airavata_getResourceJobManager_presult__isset {
  _Airavata_getResourceJobManager_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getResourceJobManager_presult__isset;

class Airavata_getResourceJobManager_presult {
 public:

  static const char* ascii_fingerprint; // = "E7AF6359D681D3E487B741B14A5D3FD2";
  static const uint8_t binary_fingerprint[16]; // = {0xE7,0xAF,0x63,0x59,0xD6,0x81,0xD3,0xE4,0x87,0xB7,0x41,0xB1,0x4A,0x5D,0x3F,0xD2};


  virtual ~Airavata_getResourceJobManager_presult() throw();
   ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getResourceJobManager_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getResourceJobManager_presult& obj);
};


class Airavata_deleteResourceJobManager_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_deleteResourceJobManager_args(const Airavata_deleteResourceJobManager_args&);
  Airavata_deleteResourceJobManager_args& operator=(const Airavata_deleteResourceJobManager_args&);
  Airavata_deleteResourceJobManager_args() : resourceJobManagerId() {
  }

  virtual ~Airavata_deleteResourceJobManager_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string resourceJobManagerId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_resourceJobManagerId(const std::string& val);

  bool operator == (const Airavata_deleteResourceJobManager_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(resourceJobManagerId == rhs.resourceJobManagerId))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteResourceJobManager_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteResourceJobManager_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteResourceJobManager_args& obj);
};


class Airavata_deleteResourceJobManager_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_deleteResourceJobManager_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* resourceJobManagerId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteResourceJobManager_pargs& obj);
};

typedef struct _Airavata_deleteResourceJobManager_result__isset {
  _Airavata_deleteResourceJobManager_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_deleteResourceJobManager_result__isset;

class Airavata_deleteResourceJobManager_result {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};

  Airavata_deleteResourceJobManager_result(const Airavata_deleteResourceJobManager_result&);
  Airavata_deleteResourceJobManager_result& operator=(const Airavata_deleteResourceJobManager_result&);
  Airavata_deleteResourceJobManager_result() : success(0) {
  }

  virtual ~Airavata_deleteResourceJobManager_result() throw();
  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_deleteResourceJobManager_result__isset __isset;

  void __set_success(const bool val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_deleteResourceJobManager_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteResourceJobManager_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteResourceJobManager_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteResourceJobManager_result& obj);
};

typedef struct _Airavata_deleteResourceJobManager_presult__isset {
  _Airavata_deleteResourceJobManager_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_deleteResourceJobManager_presult__isset;

class Airavata_deleteResourceJobManager_presult {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};


  virtual ~Airavata_deleteResourceJobManager_presult() throw();
  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_deleteResourceJobManager_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteResourceJobManager_presult& obj);
};


class Airavata_deleteBatchQueue_args {
 public:

  static const char* ascii_fingerprint; // = "1E6476DBB101101BCE4A4B190EDEB468";
  static const uint8_t binary_fingerprint[16]; // = {0x1E,0x64,0x76,0xDB,0xB1,0x01,0x10,0x1B,0xCE,0x4A,0x4B,0x19,0x0E,0xDE,0xB4,0x68};

  Airavata_deleteBatchQueue_args(const Airavata_deleteBatchQueue_args&);
  Airavata_deleteBatchQueue_args& operator=(const Airavata_deleteBatchQueue_args&);
  Airavata_deleteBatchQueue_args() : computeResourceId(), queueName() {
  }

  virtual ~Airavata_deleteBatchQueue_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string computeResourceId;
  std::string queueName;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_computeResourceId(const std::string& val);

  void __set_queueName(const std::string& val);

  bool operator == (const Airavata_deleteBatchQueue_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    if (!(queueName == rhs.queueName))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteBatchQueue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteBatchQueue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteBatchQueue_args& obj);
};


class Airavata_deleteBatchQueue_pargs {
 public:

  static const char* ascii_fingerprint; // = "1E6476DBB101101BCE4A4B190EDEB468";
  static const uint8_t binary_fingerprint[16]; // = {0x1E,0x64,0x76,0xDB,0xB1,0x01,0x10,0x1B,0xCE,0x4A,0x4B,0x19,0x0E,0xDE,0xB4,0x68};


  virtual ~Airavata_deleteBatchQueue_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* computeResourceId;
  const std::string* queueName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteBatchQueue_pargs& obj);
};

typedef struct _Airavata_deleteBatchQueue_result__isset {
  _Airavata_deleteBatchQueue_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_deleteBatchQueue_result__isset;

class Airavata_deleteBatchQueue_result {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};

  Airavata_deleteBatchQueue_result(const Airavata_deleteBatchQueue_result&);
  Airavata_deleteBatchQueue_result& operator=(const Airavata_deleteBatchQueue_result&);
  Airavata_deleteBatchQueue_result() : success(0) {
  }

  virtual ~Airavata_deleteBatchQueue_result() throw();
  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_deleteBatchQueue_result__isset __isset;

  void __set_success(const bool val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_deleteBatchQueue_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteBatchQueue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteBatchQueue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteBatchQueue_result& obj);
};

typedef struct _Airavata_deleteBatchQueue_presult__isset {
  _Airavata_deleteBatchQueue_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_deleteBatchQueue_presult__isset;

class Airavata_deleteBatchQueue_presult {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};


  virtual ~Airavata_deleteBatchQueue_presult() throw();
  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_deleteBatchQueue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteBatchQueue_presult& obj);
};


class Airavata_registerGatewayResourceProfile_args {
 public:

  static const char* ascii_fingerprint; // = "CA71CD4CA695550416FDEF33C7F367F8";
  static const uint8_t binary_fingerprint[16]; // = {0xCA,0x71,0xCD,0x4C,0xA6,0x95,0x55,0x04,0x16,0xFD,0xEF,0x33,0xC7,0xF3,0x67,0xF8};

  Airavata_registerGatewayResourceProfile_args(const Airavata_registerGatewayResourceProfile_args&);
  Airavata_registerGatewayResourceProfile_args& operator=(const Airavata_registerGatewayResourceProfile_args&);
  Airavata_registerGatewayResourceProfile_args() {
  }

  virtual ~Airavata_registerGatewayResourceProfile_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
   ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile gatewayResourceProfile;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_gatewayResourceProfile(const  ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile& val);

  bool operator == (const Airavata_registerGatewayResourceProfile_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(gatewayResourceProfile == rhs.gatewayResourceProfile))
      return false;
    return true;
  }
  bool operator != (const Airavata_registerGatewayResourceProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_registerGatewayResourceProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_registerGatewayResourceProfile_args& obj);
};


class Airavata_registerGatewayResourceProfile_pargs {
 public:

  static const char* ascii_fingerprint; // = "CA71CD4CA695550416FDEF33C7F367F8";
  static const uint8_t binary_fingerprint[16]; // = {0xCA,0x71,0xCD,0x4C,0xA6,0x95,0x55,0x04,0x16,0xFD,0xEF,0x33,0xC7,0xF3,0x67,0xF8};


  virtual ~Airavata_registerGatewayResourceProfile_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const  ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile* gatewayResourceProfile;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_registerGatewayResourceProfile_pargs& obj);
};

typedef struct _Airavata_registerGatewayResourceProfile_result__isset {
  _Airavata_registerGatewayResourceProfile_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_registerGatewayResourceProfile_result__isset;

class Airavata_registerGatewayResourceProfile_result {
 public:

  static const char* ascii_fingerprint; // = "21BF57A9FE5AAA661540804D4FB9F023";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xBF,0x57,0xA9,0xFE,0x5A,0xAA,0x66,0x15,0x40,0x80,0x4D,0x4F,0xB9,0xF0,0x23};

  Airavata_registerGatewayResourceProfile_result(const Airavata_registerGatewayResourceProfile_result&);
  Airavata_registerGatewayResourceProfile_result& operator=(const Airavata_registerGatewayResourceProfile_result&);
  Airavata_registerGatewayResourceProfile_result() : success() {
  }

  virtual ~Airavata_registerGatewayResourceProfile_result() throw();
  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_registerGatewayResourceProfile_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_registerGatewayResourceProfile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_registerGatewayResourceProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_registerGatewayResourceProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_registerGatewayResourceProfile_result& obj);
};

typedef struct _Airavata_registerGatewayResourceProfile_presult__isset {
  _Airavata_registerGatewayResourceProfile_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_registerGatewayResourceProfile_presult__isset;

class Airavata_registerGatewayResourceProfile_presult {
 public:

  static const char* ascii_fingerprint; // = "21BF57A9FE5AAA661540804D4FB9F023";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xBF,0x57,0xA9,0xFE,0x5A,0xAA,0x66,0x15,0x40,0x80,0x4D,0x4F,0xB9,0xF0,0x23};


  virtual ~Airavata_registerGatewayResourceProfile_presult() throw();
  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_registerGatewayResourceProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_registerGatewayResourceProfile_presult& obj);
};


class Airavata_getGatewayResourceProfile_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_getGatewayResourceProfile_args(const Airavata_getGatewayResourceProfile_args&);
  Airavata_getGatewayResourceProfile_args& operator=(const Airavata_getGatewayResourceProfile_args&);
  Airavata_getGatewayResourceProfile_args() : gatewayID() {
  }

  virtual ~Airavata_getGatewayResourceProfile_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string gatewayID;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_gatewayID(const std::string& val);

  bool operator == (const Airavata_getGatewayResourceProfile_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(gatewayID == rhs.gatewayID))
      return false;
    return true;
  }
  bool operator != (const Airavata_getGatewayResourceProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getGatewayResourceProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getGatewayResourceProfile_args& obj);
};


class Airavata_getGatewayResourceProfile_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_getGatewayResourceProfile_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* gatewayID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getGatewayResourceProfile_pargs& obj);
};

typedef struct _Airavata_getGatewayResourceProfile_result__isset {
  _Airavata_getGatewayResourceProfile_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getGatewayResourceProfile_result__isset;

class Airavata_getGatewayResourceProfile_result {
 public:

  static const char* ascii_fingerprint; // = "7E1845834AC9B22AB0CA117EF31B3760";
  static const uint8_t binary_fingerprint[16]; // = {0x7E,0x18,0x45,0x83,0x4A,0xC9,0xB2,0x2A,0xB0,0xCA,0x11,0x7E,0xF3,0x1B,0x37,0x60};

  Airavata_getGatewayResourceProfile_result(const Airavata_getGatewayResourceProfile_result&);
  Airavata_getGatewayResourceProfile_result& operator=(const Airavata_getGatewayResourceProfile_result&);
  Airavata_getGatewayResourceProfile_result() {
  }

  virtual ~Airavata_getGatewayResourceProfile_result() throw();
   ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getGatewayResourceProfile_result__isset __isset;

  void __set_success(const  ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_getGatewayResourceProfile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_getGatewayResourceProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getGatewayResourceProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getGatewayResourceProfile_result& obj);
};

typedef struct _Airavata_getGatewayResourceProfile_presult__isset {
  _Airavata_getGatewayResourceProfile_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getGatewayResourceProfile_presult__isset;

class Airavata_getGatewayResourceProfile_presult {
 public:

  static const char* ascii_fingerprint; // = "7E1845834AC9B22AB0CA117EF31B3760";
  static const uint8_t binary_fingerprint[16]; // = {0x7E,0x18,0x45,0x83,0x4A,0xC9,0xB2,0x2A,0xB0,0xCA,0x11,0x7E,0xF3,0x1B,0x37,0x60};


  virtual ~Airavata_getGatewayResourceProfile_presult() throw();
   ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getGatewayResourceProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getGatewayResourceProfile_presult& obj);
};


class Airavata_updateGatewayResourceProfile_args {
 public:

  static const char* ascii_fingerprint; // = "4966B70537CD573938DBA923245910CF";
  static const uint8_t binary_fingerprint[16]; // = {0x49,0x66,0xB7,0x05,0x37,0xCD,0x57,0x39,0x38,0xDB,0xA9,0x23,0x24,0x59,0x10,0xCF};

  Airavata_updateGatewayResourceProfile_args(const Airavata_updateGatewayResourceProfile_args&);
  Airavata_updateGatewayResourceProfile_args& operator=(const Airavata_updateGatewayResourceProfile_args&);
  Airavata_updateGatewayResourceProfile_args() : gatewayID() {
  }

  virtual ~Airavata_updateGatewayResourceProfile_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string gatewayID;
   ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile gatewayResourceProfile;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_gatewayID(const std::string& val);

  void __set_gatewayResourceProfile(const  ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile& val);

  bool operator == (const Airavata_updateGatewayResourceProfile_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(gatewayID == rhs.gatewayID))
      return false;
    if (!(gatewayResourceProfile == rhs.gatewayResourceProfile))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateGatewayResourceProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateGatewayResourceProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateGatewayResourceProfile_args& obj);
};


class Airavata_updateGatewayResourceProfile_pargs {
 public:

  static const char* ascii_fingerprint; // = "4966B70537CD573938DBA923245910CF";
  static const uint8_t binary_fingerprint[16]; // = {0x49,0x66,0xB7,0x05,0x37,0xCD,0x57,0x39,0x38,0xDB,0xA9,0x23,0x24,0x59,0x10,0xCF};


  virtual ~Airavata_updateGatewayResourceProfile_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* gatewayID;
  const  ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile* gatewayResourceProfile;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateGatewayResourceProfile_pargs& obj);
};

typedef struct _Airavata_updateGatewayResourceProfile_result__isset {
  _Airavata_updateGatewayResourceProfile_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_updateGatewayResourceProfile_result__isset;

class Airavata_updateGatewayResourceProfile_result {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};

  Airavata_updateGatewayResourceProfile_result(const Airavata_updateGatewayResourceProfile_result&);
  Airavata_updateGatewayResourceProfile_result& operator=(const Airavata_updateGatewayResourceProfile_result&);
  Airavata_updateGatewayResourceProfile_result() : success(0) {
  }

  virtual ~Airavata_updateGatewayResourceProfile_result() throw();
  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_updateGatewayResourceProfile_result__isset __isset;

  void __set_success(const bool val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_updateGatewayResourceProfile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateGatewayResourceProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateGatewayResourceProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateGatewayResourceProfile_result& obj);
};

typedef struct _Airavata_updateGatewayResourceProfile_presult__isset {
  _Airavata_updateGatewayResourceProfile_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_updateGatewayResourceProfile_presult__isset;

class Airavata_updateGatewayResourceProfile_presult {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};


  virtual ~Airavata_updateGatewayResourceProfile_presult() throw();
  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_updateGatewayResourceProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateGatewayResourceProfile_presult& obj);
};


class Airavata_deleteGatewayResourceProfile_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_deleteGatewayResourceProfile_args(const Airavata_deleteGatewayResourceProfile_args&);
  Airavata_deleteGatewayResourceProfile_args& operator=(const Airavata_deleteGatewayResourceProfile_args&);
  Airavata_deleteGatewayResourceProfile_args() : gatewayID() {
  }

  virtual ~Airavata_deleteGatewayResourceProfile_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string gatewayID;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_gatewayID(const std::string& val);

  bool operator == (const Airavata_deleteGatewayResourceProfile_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(gatewayID == rhs.gatewayID))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteGatewayResourceProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteGatewayResourceProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteGatewayResourceProfile_args& obj);
};


class Airavata_deleteGatewayResourceProfile_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_deleteGatewayResourceProfile_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* gatewayID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteGatewayResourceProfile_pargs& obj);
};

typedef struct _Airavata_deleteGatewayResourceProfile_result__isset {
  _Airavata_deleteGatewayResourceProfile_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_deleteGatewayResourceProfile_result__isset;

class Airavata_deleteGatewayResourceProfile_result {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};

  Airavata_deleteGatewayResourceProfile_result(const Airavata_deleteGatewayResourceProfile_result&);
  Airavata_deleteGatewayResourceProfile_result& operator=(const Airavata_deleteGatewayResourceProfile_result&);
  Airavata_deleteGatewayResourceProfile_result() : success(0) {
  }

  virtual ~Airavata_deleteGatewayResourceProfile_result() throw();
  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_deleteGatewayResourceProfile_result__isset __isset;

  void __set_success(const bool val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_deleteGatewayResourceProfile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteGatewayResourceProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteGatewayResourceProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteGatewayResourceProfile_result& obj);
};

typedef struct _Airavata_deleteGatewayResourceProfile_presult__isset {
  _Airavata_deleteGatewayResourceProfile_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_deleteGatewayResourceProfile_presult__isset;

class Airavata_deleteGatewayResourceProfile_presult {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};


  virtual ~Airavata_deleteGatewayResourceProfile_presult() throw();
  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_deleteGatewayResourceProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteGatewayResourceProfile_presult& obj);
};


class Airavata_addGatewayComputeResourcePreference_args {
 public:

  static const char* ascii_fingerprint; // = "610310E56965C0B03B7F8A4A0C4477B4";
  static const uint8_t binary_fingerprint[16]; // = {0x61,0x03,0x10,0xE5,0x69,0x65,0xC0,0xB0,0x3B,0x7F,0x8A,0x4A,0x0C,0x44,0x77,0xB4};

  Airavata_addGatewayComputeResourcePreference_args(const Airavata_addGatewayComputeResourcePreference_args&);
  Airavata_addGatewayComputeResourcePreference_args& operator=(const Airavata_addGatewayComputeResourcePreference_args&);
  Airavata_addGatewayComputeResourcePreference_args() : gatewayID(), computeResourceId() {
  }

  virtual ~Airavata_addGatewayComputeResourcePreference_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string gatewayID;
  std::string computeResourceId;
   ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference computeResourcePreference;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_gatewayID(const std::string& val);

  void __set_computeResourceId(const std::string& val);

  void __set_computeResourcePreference(const  ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference& val);

  bool operator == (const Airavata_addGatewayComputeResourcePreference_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(gatewayID == rhs.gatewayID))
      return false;
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    if (!(computeResourcePreference == rhs.computeResourcePreference))
      return false;
    return true;
  }
  bool operator != (const Airavata_addGatewayComputeResourcePreference_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addGatewayComputeResourcePreference_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_addGatewayComputeResourcePreference_args& obj);
};


class Airavata_addGatewayComputeResourcePreference_pargs {
 public:

  static const char* ascii_fingerprint; // = "610310E56965C0B03B7F8A4A0C4477B4";
  static const uint8_t binary_fingerprint[16]; // = {0x61,0x03,0x10,0xE5,0x69,0x65,0xC0,0xB0,0x3B,0x7F,0x8A,0x4A,0x0C,0x44,0x77,0xB4};


  virtual ~Airavata_addGatewayComputeResourcePreference_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* gatewayID;
  const std::string* computeResourceId;
  const  ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference* computeResourcePreference;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_addGatewayComputeResourcePreference_pargs& obj);
};

typedef struct _Airavata_addGatewayComputeResourcePreference_result__isset {
  _Airavata_addGatewayComputeResourcePreference_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_addGatewayComputeResourcePreference_result__isset;

class Airavata_addGatewayComputeResourcePreference_result {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};

  Airavata_addGatewayComputeResourcePreference_result(const Airavata_addGatewayComputeResourcePreference_result&);
  Airavata_addGatewayComputeResourcePreference_result& operator=(const Airavata_addGatewayComputeResourcePreference_result&);
  Airavata_addGatewayComputeResourcePreference_result() : success(0) {
  }

  virtual ~Airavata_addGatewayComputeResourcePreference_result() throw();
  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_addGatewayComputeResourcePreference_result__isset __isset;

  void __set_success(const bool val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_addGatewayComputeResourcePreference_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_addGatewayComputeResourcePreference_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_addGatewayComputeResourcePreference_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_addGatewayComputeResourcePreference_result& obj);
};

typedef struct _Airavata_addGatewayComputeResourcePreference_presult__isset {
  _Airavata_addGatewayComputeResourcePreference_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_addGatewayComputeResourcePreference_presult__isset;

class Airavata_addGatewayComputeResourcePreference_presult {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};


  virtual ~Airavata_addGatewayComputeResourcePreference_presult() throw();
  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_addGatewayComputeResourcePreference_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_addGatewayComputeResourcePreference_presult& obj);
};


class Airavata_getGatewayComputeResourcePreference_args {
 public:

  static const char* ascii_fingerprint; // = "1E6476DBB101101BCE4A4B190EDEB468";
  static const uint8_t binary_fingerprint[16]; // = {0x1E,0x64,0x76,0xDB,0xB1,0x01,0x10,0x1B,0xCE,0x4A,0x4B,0x19,0x0E,0xDE,0xB4,0x68};

  Airavata_getGatewayComputeResourcePreference_args(const Airavata_getGatewayComputeResourcePreference_args&);
  Airavata_getGatewayComputeResourcePreference_args& operator=(const Airavata_getGatewayComputeResourcePreference_args&);
  Airavata_getGatewayComputeResourcePreference_args() : gatewayID(), computeResourceId() {
  }

  virtual ~Airavata_getGatewayComputeResourcePreference_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string gatewayID;
  std::string computeResourceId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_gatewayID(const std::string& val);

  void __set_computeResourceId(const std::string& val);

  bool operator == (const Airavata_getGatewayComputeResourcePreference_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(gatewayID == rhs.gatewayID))
      return false;
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getGatewayComputeResourcePreference_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getGatewayComputeResourcePreference_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getGatewayComputeResourcePreference_args& obj);
};


class Airavata_getGatewayComputeResourcePreference_pargs {
 public:

  static const char* ascii_fingerprint; // = "1E6476DBB101101BCE4A4B190EDEB468";
  static const uint8_t binary_fingerprint[16]; // = {0x1E,0x64,0x76,0xDB,0xB1,0x01,0x10,0x1B,0xCE,0x4A,0x4B,0x19,0x0E,0xDE,0xB4,0x68};


  virtual ~Airavata_getGatewayComputeResourcePreference_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* gatewayID;
  const std::string* computeResourceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getGatewayComputeResourcePreference_pargs& obj);
};

typedef struct _Airavata_getGatewayComputeResourcePreference_result__isset {
  _Airavata_getGatewayComputeResourcePreference_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getGatewayComputeResourcePreference_result__isset;

class Airavata_getGatewayComputeResourcePreference_result {
 public:

  static const char* ascii_fingerprint; // = "FEE580AF67A2B7686AE2D60E6E540B04";
  static const uint8_t binary_fingerprint[16]; // = {0xFE,0xE5,0x80,0xAF,0x67,0xA2,0xB7,0x68,0x6A,0xE2,0xD6,0x0E,0x6E,0x54,0x0B,0x04};

  Airavata_getGatewayComputeResourcePreference_result(const Airavata_getGatewayComputeResourcePreference_result&);
  Airavata_getGatewayComputeResourcePreference_result& operator=(const Airavata_getGatewayComputeResourcePreference_result&);
  Airavata_getGatewayComputeResourcePreference_result() {
  }

  virtual ~Airavata_getGatewayComputeResourcePreference_result() throw();
   ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getGatewayComputeResourcePreference_result__isset __isset;

  void __set_success(const  ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_getGatewayComputeResourcePreference_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_getGatewayComputeResourcePreference_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getGatewayComputeResourcePreference_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getGatewayComputeResourcePreference_result& obj);
};

typedef struct _Airavata_getGatewayComputeResourcePreference_presult__isset {
  _Airavata_getGatewayComputeResourcePreference_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getGatewayComputeResourcePreference_presult__isset;

class Airavata_getGatewayComputeResourcePreference_presult {
 public:

  static const char* ascii_fingerprint; // = "FEE580AF67A2B7686AE2D60E6E540B04";
  static const uint8_t binary_fingerprint[16]; // = {0xFE,0xE5,0x80,0xAF,0x67,0xA2,0xB7,0x68,0x6A,0xE2,0xD6,0x0E,0x6E,0x54,0x0B,0x04};


  virtual ~Airavata_getGatewayComputeResourcePreference_presult() throw();
   ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getGatewayComputeResourcePreference_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getGatewayComputeResourcePreference_presult& obj);
};


class Airavata_getAllGatewayComputeResourcePreferences_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_getAllGatewayComputeResourcePreferences_args(const Airavata_getAllGatewayComputeResourcePreferences_args&);
  Airavata_getAllGatewayComputeResourcePreferences_args& operator=(const Airavata_getAllGatewayComputeResourcePreferences_args&);
  Airavata_getAllGatewayComputeResourcePreferences_args() : gatewayID() {
  }

  virtual ~Airavata_getAllGatewayComputeResourcePreferences_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string gatewayID;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_gatewayID(const std::string& val);

  bool operator == (const Airavata_getAllGatewayComputeResourcePreferences_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(gatewayID == rhs.gatewayID))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllGatewayComputeResourcePreferences_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllGatewayComputeResourcePreferences_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAllGatewayComputeResourcePreferences_args& obj);
};


class Airavata_getAllGatewayComputeResourcePreferences_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_getAllGatewayComputeResourcePreferences_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* gatewayID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAllGatewayComputeResourcePreferences_pargs& obj);
};

typedef struct _Airavata_getAllGatewayComputeResourcePreferences_result__isset {
  _Airavata_getAllGatewayComputeResourcePreferences_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getAllGatewayComputeResourcePreferences_result__isset;

class Airavata_getAllGatewayComputeResourcePreferences_result {
 public:

  static const char* ascii_fingerprint; // = "08276C8589280AB7D9E27B5B3F791FBA";
  static const uint8_t binary_fingerprint[16]; // = {0x08,0x27,0x6C,0x85,0x89,0x28,0x0A,0xB7,0xD9,0xE2,0x7B,0x5B,0x3F,0x79,0x1F,0xBA};

  Airavata_getAllGatewayComputeResourcePreferences_result(const Airavata_getAllGatewayComputeResourcePreferences_result&);
  Airavata_getAllGatewayComputeResourcePreferences_result& operator=(const Airavata_getAllGatewayComputeResourcePreferences_result&);
  Airavata_getAllGatewayComputeResourcePreferences_result() {
  }

  virtual ~Airavata_getAllGatewayComputeResourcePreferences_result() throw();
  std::vector< ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getAllGatewayComputeResourcePreferences_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference> & val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_getAllGatewayComputeResourcePreferences_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllGatewayComputeResourcePreferences_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllGatewayComputeResourcePreferences_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAllGatewayComputeResourcePreferences_result& obj);
};

typedef struct _Airavata_getAllGatewayComputeResourcePreferences_presult__isset {
  _Airavata_getAllGatewayComputeResourcePreferences_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getAllGatewayComputeResourcePreferences_presult__isset;

class Airavata_getAllGatewayComputeResourcePreferences_presult {
 public:

  static const char* ascii_fingerprint; // = "08276C8589280AB7D9E27B5B3F791FBA";
  static const uint8_t binary_fingerprint[16]; // = {0x08,0x27,0x6C,0x85,0x89,0x28,0x0A,0xB7,0xD9,0xE2,0x7B,0x5B,0x3F,0x79,0x1F,0xBA};


  virtual ~Airavata_getAllGatewayComputeResourcePreferences_presult() throw();
  std::vector< ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getAllGatewayComputeResourcePreferences_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAllGatewayComputeResourcePreferences_presult& obj);
};


class Airavata_getAllGatewayComputeResources_args {
 public:

  static const char* ascii_fingerprint; // = "75A7E945AEBB96C8FA8998CBCEB31C27";
  static const uint8_t binary_fingerprint[16]; // = {0x75,0xA7,0xE9,0x45,0xAE,0xBB,0x96,0xC8,0xFA,0x89,0x98,0xCB,0xCE,0xB3,0x1C,0x27};

  Airavata_getAllGatewayComputeResources_args(const Airavata_getAllGatewayComputeResources_args&);
  Airavata_getAllGatewayComputeResources_args& operator=(const Airavata_getAllGatewayComputeResources_args&);
  Airavata_getAllGatewayComputeResources_args() {
  }

  virtual ~Airavata_getAllGatewayComputeResources_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  bool operator == (const Airavata_getAllGatewayComputeResources_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllGatewayComputeResources_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllGatewayComputeResources_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAllGatewayComputeResources_args& obj);
};


class Airavata_getAllGatewayComputeResources_pargs {
 public:

  static const char* ascii_fingerprint; // = "75A7E945AEBB96C8FA8998CBCEB31C27";
  static const uint8_t binary_fingerprint[16]; // = {0x75,0xA7,0xE9,0x45,0xAE,0xBB,0x96,0xC8,0xFA,0x89,0x98,0xCB,0xCE,0xB3,0x1C,0x27};


  virtual ~Airavata_getAllGatewayComputeResources_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAllGatewayComputeResources_pargs& obj);
};

typedef struct _Airavata_getAllGatewayComputeResources_result__isset {
  _Airavata_getAllGatewayComputeResources_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getAllGatewayComputeResources_result__isset;

class Airavata_getAllGatewayComputeResources_result {
 public:

  static const char* ascii_fingerprint; // = "7E0E4BA187F281A6334BB230DF116DB8";
  static const uint8_t binary_fingerprint[16]; // = {0x7E,0x0E,0x4B,0xA1,0x87,0xF2,0x81,0xA6,0x33,0x4B,0xB2,0x30,0xDF,0x11,0x6D,0xB8};

  Airavata_getAllGatewayComputeResources_result(const Airavata_getAllGatewayComputeResources_result&);
  Airavata_getAllGatewayComputeResources_result& operator=(const Airavata_getAllGatewayComputeResources_result&);
  Airavata_getAllGatewayComputeResources_result() {
  }

  virtual ~Airavata_getAllGatewayComputeResources_result() throw();
  std::vector< ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getAllGatewayComputeResources_result__isset __isset;

  void __set_success(const std::vector< ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile> & val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_getAllGatewayComputeResources_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllGatewayComputeResources_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllGatewayComputeResources_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAllGatewayComputeResources_result& obj);
};

typedef struct _Airavata_getAllGatewayComputeResources_presult__isset {
  _Airavata_getAllGatewayComputeResources_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getAllGatewayComputeResources_presult__isset;

class Airavata_getAllGatewayComputeResources_presult {
 public:

  static const char* ascii_fingerprint; // = "7E0E4BA187F281A6334BB230DF116DB8";
  static const uint8_t binary_fingerprint[16]; // = {0x7E,0x0E,0x4B,0xA1,0x87,0xF2,0x81,0xA6,0x33,0x4B,0xB2,0x30,0xDF,0x11,0x6D,0xB8};


  virtual ~Airavata_getAllGatewayComputeResources_presult() throw();
  std::vector< ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getAllGatewayComputeResources_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAllGatewayComputeResources_presult& obj);
};


class Airavata_updateGatewayComputeResourcePreference_args {
 public:

  static const char* ascii_fingerprint; // = "610310E56965C0B03B7F8A4A0C4477B4";
  static const uint8_t binary_fingerprint[16]; // = {0x61,0x03,0x10,0xE5,0x69,0x65,0xC0,0xB0,0x3B,0x7F,0x8A,0x4A,0x0C,0x44,0x77,0xB4};

  Airavata_updateGatewayComputeResourcePreference_args(const Airavata_updateGatewayComputeResourcePreference_args&);
  Airavata_updateGatewayComputeResourcePreference_args& operator=(const Airavata_updateGatewayComputeResourcePreference_args&);
  Airavata_updateGatewayComputeResourcePreference_args() : gatewayID(), computeResourceId() {
  }

  virtual ~Airavata_updateGatewayComputeResourcePreference_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string gatewayID;
  std::string computeResourceId;
   ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference computeResourcePreference;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_gatewayID(const std::string& val);

  void __set_computeResourceId(const std::string& val);

  void __set_computeResourcePreference(const  ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference& val);

  bool operator == (const Airavata_updateGatewayComputeResourcePreference_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(gatewayID == rhs.gatewayID))
      return false;
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    if (!(computeResourcePreference == rhs.computeResourcePreference))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateGatewayComputeResourcePreference_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateGatewayComputeResourcePreference_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateGatewayComputeResourcePreference_args& obj);
};


class Airavata_updateGatewayComputeResourcePreference_pargs {
 public:

  static const char* ascii_fingerprint; // = "610310E56965C0B03B7F8A4A0C4477B4";
  static const uint8_t binary_fingerprint[16]; // = {0x61,0x03,0x10,0xE5,0x69,0x65,0xC0,0xB0,0x3B,0x7F,0x8A,0x4A,0x0C,0x44,0x77,0xB4};


  virtual ~Airavata_updateGatewayComputeResourcePreference_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* gatewayID;
  const std::string* computeResourceId;
  const  ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference* computeResourcePreference;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateGatewayComputeResourcePreference_pargs& obj);
};

typedef struct _Airavata_updateGatewayComputeResourcePreference_result__isset {
  _Airavata_updateGatewayComputeResourcePreference_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_updateGatewayComputeResourcePreference_result__isset;

class Airavata_updateGatewayComputeResourcePreference_result {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};

  Airavata_updateGatewayComputeResourcePreference_result(const Airavata_updateGatewayComputeResourcePreference_result&);
  Airavata_updateGatewayComputeResourcePreference_result& operator=(const Airavata_updateGatewayComputeResourcePreference_result&);
  Airavata_updateGatewayComputeResourcePreference_result() : success(0) {
  }

  virtual ~Airavata_updateGatewayComputeResourcePreference_result() throw();
  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_updateGatewayComputeResourcePreference_result__isset __isset;

  void __set_success(const bool val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_updateGatewayComputeResourcePreference_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateGatewayComputeResourcePreference_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateGatewayComputeResourcePreference_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateGatewayComputeResourcePreference_result& obj);
};

typedef struct _Airavata_updateGatewayComputeResourcePreference_presult__isset {
  _Airavata_updateGatewayComputeResourcePreference_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_updateGatewayComputeResourcePreference_presult__isset;

class Airavata_updateGatewayComputeResourcePreference_presult {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};


  virtual ~Airavata_updateGatewayComputeResourcePreference_presult() throw();
  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_updateGatewayComputeResourcePreference_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateGatewayComputeResourcePreference_presult& obj);
};


class Airavata_deleteGatewayComputeResourcePreference_args {
 public:

  static const char* ascii_fingerprint; // = "1E6476DBB101101BCE4A4B190EDEB468";
  static const uint8_t binary_fingerprint[16]; // = {0x1E,0x64,0x76,0xDB,0xB1,0x01,0x10,0x1B,0xCE,0x4A,0x4B,0x19,0x0E,0xDE,0xB4,0x68};

  Airavata_deleteGatewayComputeResourcePreference_args(const Airavata_deleteGatewayComputeResourcePreference_args&);
  Airavata_deleteGatewayComputeResourcePreference_args& operator=(const Airavata_deleteGatewayComputeResourcePreference_args&);
  Airavata_deleteGatewayComputeResourcePreference_args() : gatewayID(), computeResourceId() {
  }

  virtual ~Airavata_deleteGatewayComputeResourcePreference_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string gatewayID;
  std::string computeResourceId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_gatewayID(const std::string& val);

  void __set_computeResourceId(const std::string& val);

  bool operator == (const Airavata_deleteGatewayComputeResourcePreference_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(gatewayID == rhs.gatewayID))
      return false;
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteGatewayComputeResourcePreference_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteGatewayComputeResourcePreference_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteGatewayComputeResourcePreference_args& obj);
};


class Airavata_deleteGatewayComputeResourcePreference_pargs {
 public:

  static const char* ascii_fingerprint; // = "1E6476DBB101101BCE4A4B190EDEB468";
  static const uint8_t binary_fingerprint[16]; // = {0x1E,0x64,0x76,0xDB,0xB1,0x01,0x10,0x1B,0xCE,0x4A,0x4B,0x19,0x0E,0xDE,0xB4,0x68};


  virtual ~Airavata_deleteGatewayComputeResourcePreference_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* gatewayID;
  const std::string* computeResourceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteGatewayComputeResourcePreference_pargs& obj);
};

typedef struct _Airavata_deleteGatewayComputeResourcePreference_result__isset {
  _Airavata_deleteGatewayComputeResourcePreference_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_deleteGatewayComputeResourcePreference_result__isset;

class Airavata_deleteGatewayComputeResourcePreference_result {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};

  Airavata_deleteGatewayComputeResourcePreference_result(const Airavata_deleteGatewayComputeResourcePreference_result&);
  Airavata_deleteGatewayComputeResourcePreference_result& operator=(const Airavata_deleteGatewayComputeResourcePreference_result&);
  Airavata_deleteGatewayComputeResourcePreference_result() : success(0) {
  }

  virtual ~Airavata_deleteGatewayComputeResourcePreference_result() throw();
  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_deleteGatewayComputeResourcePreference_result__isset __isset;

  void __set_success(const bool val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_deleteGatewayComputeResourcePreference_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteGatewayComputeResourcePreference_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteGatewayComputeResourcePreference_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteGatewayComputeResourcePreference_result& obj);
};

typedef struct _Airavata_deleteGatewayComputeResourcePreference_presult__isset {
  _Airavata_deleteGatewayComputeResourcePreference_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_deleteGatewayComputeResourcePreference_presult__isset;

class Airavata_deleteGatewayComputeResourcePreference_presult {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};


  virtual ~Airavata_deleteGatewayComputeResourcePreference_presult() throw();
  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_deleteGatewayComputeResourcePreference_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteGatewayComputeResourcePreference_presult& obj);
};


class Airavata_getAllWorkflows_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_getAllWorkflows_args(const Airavata_getAllWorkflows_args&);
  Airavata_getAllWorkflows_args& operator=(const Airavata_getAllWorkflows_args&);
  Airavata_getAllWorkflows_args() : gatewayId() {
  }

  virtual ~Airavata_getAllWorkflows_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string gatewayId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_gatewayId(const std::string& val);

  bool operator == (const Airavata_getAllWorkflows_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(gatewayId == rhs.gatewayId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllWorkflows_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllWorkflows_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAllWorkflows_args& obj);
};


class Airavata_getAllWorkflows_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_getAllWorkflows_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* gatewayId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAllWorkflows_pargs& obj);
};

typedef struct _Airavata_getAllWorkflows_result__isset {
  _Airavata_getAllWorkflows_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getAllWorkflows_result__isset;

class Airavata_getAllWorkflows_result {
 public:

  static const char* ascii_fingerprint; // = "B5ACC9137B7AE989339E86F91B264092";
  static const uint8_t binary_fingerprint[16]; // = {0xB5,0xAC,0xC9,0x13,0x7B,0x7A,0xE9,0x89,0x33,0x9E,0x86,0xF9,0x1B,0x26,0x40,0x92};

  Airavata_getAllWorkflows_result(const Airavata_getAllWorkflows_result&);
  Airavata_getAllWorkflows_result& operator=(const Airavata_getAllWorkflows_result&);
  Airavata_getAllWorkflows_result() {
  }

  virtual ~Airavata_getAllWorkflows_result() throw();
  std::vector<std::string>  success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getAllWorkflows_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_getAllWorkflows_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_getAllWorkflows_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getAllWorkflows_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAllWorkflows_result& obj);
};

typedef struct _Airavata_getAllWorkflows_presult__isset {
  _Airavata_getAllWorkflows_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getAllWorkflows_presult__isset;

class Airavata_getAllWorkflows_presult {
 public:

  static const char* ascii_fingerprint; // = "B5ACC9137B7AE989339E86F91B264092";
  static const uint8_t binary_fingerprint[16]; // = {0xB5,0xAC,0xC9,0x13,0x7B,0x7A,0xE9,0x89,0x33,0x9E,0x86,0xF9,0x1B,0x26,0x40,0x92};


  virtual ~Airavata_getAllWorkflows_presult() throw();
  std::vector<std::string> * success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getAllWorkflows_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getAllWorkflows_presult& obj);
};


class Airavata_getWorkflow_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_getWorkflow_args(const Airavata_getWorkflow_args&);
  Airavata_getWorkflow_args& operator=(const Airavata_getWorkflow_args&);
  Airavata_getWorkflow_args() : workflowTemplateId() {
  }

  virtual ~Airavata_getWorkflow_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string workflowTemplateId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_workflowTemplateId(const std::string& val);

  bool operator == (const Airavata_getWorkflow_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(workflowTemplateId == rhs.workflowTemplateId))
      return false;
    return true;
  }
  bool operator != (const Airavata_getWorkflow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getWorkflow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getWorkflow_args& obj);
};


class Airavata_getWorkflow_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_getWorkflow_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* workflowTemplateId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getWorkflow_pargs& obj);
};

typedef struct _Airavata_getWorkflow_result__isset {
  _Airavata_getWorkflow_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getWorkflow_result__isset;

class Airavata_getWorkflow_result {
 public:

  static const char* ascii_fingerprint; // = "987D1CA944F97F02BC03E7D74C08FC54";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x7D,0x1C,0xA9,0x44,0xF9,0x7F,0x02,0xBC,0x03,0xE7,0xD7,0x4C,0x08,0xFC,0x54};

  Airavata_getWorkflow_result(const Airavata_getWorkflow_result&);
  Airavata_getWorkflow_result& operator=(const Airavata_getWorkflow_result&);
  Airavata_getWorkflow_result() {
  }

  virtual ~Airavata_getWorkflow_result() throw();
   ::Workflow success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getWorkflow_result__isset __isset;

  void __set_success(const  ::Workflow& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_getWorkflow_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_getWorkflow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getWorkflow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getWorkflow_result& obj);
};

typedef struct _Airavata_getWorkflow_presult__isset {
  _Airavata_getWorkflow_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getWorkflow_presult__isset;

class Airavata_getWorkflow_presult {
 public:

  static const char* ascii_fingerprint; // = "987D1CA944F97F02BC03E7D74C08FC54";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x7D,0x1C,0xA9,0x44,0xF9,0x7F,0x02,0xBC,0x03,0xE7,0xD7,0x4C,0x08,0xFC,0x54};


  virtual ~Airavata_getWorkflow_presult() throw();
   ::Workflow* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getWorkflow_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getWorkflow_presult& obj);
};


class Airavata_deleteWorkflow_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_deleteWorkflow_args(const Airavata_deleteWorkflow_args&);
  Airavata_deleteWorkflow_args& operator=(const Airavata_deleteWorkflow_args&);
  Airavata_deleteWorkflow_args() : workflowTemplateId() {
  }

  virtual ~Airavata_deleteWorkflow_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string workflowTemplateId;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_workflowTemplateId(const std::string& val);

  bool operator == (const Airavata_deleteWorkflow_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(workflowTemplateId == rhs.workflowTemplateId))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteWorkflow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteWorkflow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteWorkflow_args& obj);
};


class Airavata_deleteWorkflow_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_deleteWorkflow_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* workflowTemplateId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteWorkflow_pargs& obj);
};

typedef struct _Airavata_deleteWorkflow_result__isset {
  _Airavata_deleteWorkflow_result__isset() : ire(false), ace(false), ase(false), ae(false) {}
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_deleteWorkflow_result__isset;

class Airavata_deleteWorkflow_result {
 public:

  static const char* ascii_fingerprint; // = "0603929641B3F91F81AA6AC437512303";
  static const uint8_t binary_fingerprint[16]; // = {0x06,0x03,0x92,0x96,0x41,0xB3,0xF9,0x1F,0x81,0xAA,0x6A,0xC4,0x37,0x51,0x23,0x03};

  Airavata_deleteWorkflow_result(const Airavata_deleteWorkflow_result&);
  Airavata_deleteWorkflow_result& operator=(const Airavata_deleteWorkflow_result&);
  Airavata_deleteWorkflow_result() {
  }

  virtual ~Airavata_deleteWorkflow_result() throw();
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_deleteWorkflow_result__isset __isset;

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_deleteWorkflow_result & rhs) const
  {
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_deleteWorkflow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_deleteWorkflow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteWorkflow_result& obj);
};

typedef struct _Airavata_deleteWorkflow_presult__isset {
  _Airavata_deleteWorkflow_presult__isset() : ire(false), ace(false), ase(false), ae(false) {}
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_deleteWorkflow_presult__isset;

class Airavata_deleteWorkflow_presult {
 public:

  static const char* ascii_fingerprint; // = "0603929641B3F91F81AA6AC437512303";
  static const uint8_t binary_fingerprint[16]; // = {0x06,0x03,0x92,0x96,0x41,0xB3,0xF9,0x1F,0x81,0xAA,0x6A,0xC4,0x37,0x51,0x23,0x03};


  virtual ~Airavata_deleteWorkflow_presult() throw();
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_deleteWorkflow_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_deleteWorkflow_presult& obj);
};


class Airavata_registerWorkflow_args {
 public:

  static const char* ascii_fingerprint; // = "50FB93DD9A05410670101D36B71E3A0B";
  static const uint8_t binary_fingerprint[16]; // = {0x50,0xFB,0x93,0xDD,0x9A,0x05,0x41,0x06,0x70,0x10,0x1D,0x36,0xB7,0x1E,0x3A,0x0B};

  Airavata_registerWorkflow_args(const Airavata_registerWorkflow_args&);
  Airavata_registerWorkflow_args& operator=(const Airavata_registerWorkflow_args&);
  Airavata_registerWorkflow_args() : gatewayId() {
  }

  virtual ~Airavata_registerWorkflow_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string gatewayId;
   ::Workflow workflow;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_gatewayId(const std::string& val);

  void __set_workflow(const  ::Workflow& val);

  bool operator == (const Airavata_registerWorkflow_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(workflow == rhs.workflow))
      return false;
    return true;
  }
  bool operator != (const Airavata_registerWorkflow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_registerWorkflow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_registerWorkflow_args& obj);
};


class Airavata_registerWorkflow_pargs {
 public:

  static const char* ascii_fingerprint; // = "50FB93DD9A05410670101D36B71E3A0B";
  static const uint8_t binary_fingerprint[16]; // = {0x50,0xFB,0x93,0xDD,0x9A,0x05,0x41,0x06,0x70,0x10,0x1D,0x36,0xB7,0x1E,0x3A,0x0B};


  virtual ~Airavata_registerWorkflow_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* gatewayId;
  const  ::Workflow* workflow;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_registerWorkflow_pargs& obj);
};

typedef struct _Airavata_registerWorkflow_result__isset {
  _Airavata_registerWorkflow_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_registerWorkflow_result__isset;

class Airavata_registerWorkflow_result {
 public:

  static const char* ascii_fingerprint; // = "21BF57A9FE5AAA661540804D4FB9F023";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xBF,0x57,0xA9,0xFE,0x5A,0xAA,0x66,0x15,0x40,0x80,0x4D,0x4F,0xB9,0xF0,0x23};

  Airavata_registerWorkflow_result(const Airavata_registerWorkflow_result&);
  Airavata_registerWorkflow_result& operator=(const Airavata_registerWorkflow_result&);
  Airavata_registerWorkflow_result() : success() {
  }

  virtual ~Airavata_registerWorkflow_result() throw();
  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_registerWorkflow_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_registerWorkflow_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_registerWorkflow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_registerWorkflow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_registerWorkflow_result& obj);
};

typedef struct _Airavata_registerWorkflow_presult__isset {
  _Airavata_registerWorkflow_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_registerWorkflow_presult__isset;

class Airavata_registerWorkflow_presult {
 public:

  static const char* ascii_fingerprint; // = "21BF57A9FE5AAA661540804D4FB9F023";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xBF,0x57,0xA9,0xFE,0x5A,0xAA,0x66,0x15,0x40,0x80,0x4D,0x4F,0xB9,0xF0,0x23};


  virtual ~Airavata_registerWorkflow_presult() throw();
  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_registerWorkflow_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_registerWorkflow_presult& obj);
};


class Airavata_updateWorkflow_args {
 public:

  static const char* ascii_fingerprint; // = "50FB93DD9A05410670101D36B71E3A0B";
  static const uint8_t binary_fingerprint[16]; // = {0x50,0xFB,0x93,0xDD,0x9A,0x05,0x41,0x06,0x70,0x10,0x1D,0x36,0xB7,0x1E,0x3A,0x0B};

  Airavata_updateWorkflow_args(const Airavata_updateWorkflow_args&);
  Airavata_updateWorkflow_args& operator=(const Airavata_updateWorkflow_args&);
  Airavata_updateWorkflow_args() : workflowTemplateId() {
  }

  virtual ~Airavata_updateWorkflow_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string workflowTemplateId;
   ::Workflow workflow;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_workflowTemplateId(const std::string& val);

  void __set_workflow(const  ::Workflow& val);

  bool operator == (const Airavata_updateWorkflow_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(workflowTemplateId == rhs.workflowTemplateId))
      return false;
    if (!(workflow == rhs.workflow))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateWorkflow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateWorkflow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateWorkflow_args& obj);
};


class Airavata_updateWorkflow_pargs {
 public:

  static const char* ascii_fingerprint; // = "50FB93DD9A05410670101D36B71E3A0B";
  static const uint8_t binary_fingerprint[16]; // = {0x50,0xFB,0x93,0xDD,0x9A,0x05,0x41,0x06,0x70,0x10,0x1D,0x36,0xB7,0x1E,0x3A,0x0B};


  virtual ~Airavata_updateWorkflow_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* workflowTemplateId;
  const  ::Workflow* workflow;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateWorkflow_pargs& obj);
};

typedef struct _Airavata_updateWorkflow_result__isset {
  _Airavata_updateWorkflow_result__isset() : ire(false), ace(false), ase(false), ae(false) {}
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_updateWorkflow_result__isset;

class Airavata_updateWorkflow_result {
 public:

  static const char* ascii_fingerprint; // = "0603929641B3F91F81AA6AC437512303";
  static const uint8_t binary_fingerprint[16]; // = {0x06,0x03,0x92,0x96,0x41,0xB3,0xF9,0x1F,0x81,0xAA,0x6A,0xC4,0x37,0x51,0x23,0x03};

  Airavata_updateWorkflow_result(const Airavata_updateWorkflow_result&);
  Airavata_updateWorkflow_result& operator=(const Airavata_updateWorkflow_result&);
  Airavata_updateWorkflow_result() {
  }

  virtual ~Airavata_updateWorkflow_result() throw();
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_updateWorkflow_result__isset __isset;

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_updateWorkflow_result & rhs) const
  {
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_updateWorkflow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_updateWorkflow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateWorkflow_result& obj);
};

typedef struct _Airavata_updateWorkflow_presult__isset {
  _Airavata_updateWorkflow_presult__isset() : ire(false), ace(false), ase(false), ae(false) {}
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_updateWorkflow_presult__isset;

class Airavata_updateWorkflow_presult {
 public:

  static const char* ascii_fingerprint; // = "0603929641B3F91F81AA6AC437512303";
  static const uint8_t binary_fingerprint[16]; // = {0x06,0x03,0x92,0x96,0x41,0xB3,0xF9,0x1F,0x81,0xAA,0x6A,0xC4,0x37,0x51,0x23,0x03};


  virtual ~Airavata_updateWorkflow_presult() throw();
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_updateWorkflow_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_updateWorkflow_presult& obj);
};


class Airavata_getWorkflowTemplateId_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_getWorkflowTemplateId_args(const Airavata_getWorkflowTemplateId_args&);
  Airavata_getWorkflowTemplateId_args& operator=(const Airavata_getWorkflowTemplateId_args&);
  Airavata_getWorkflowTemplateId_args() : workflowName() {
  }

  virtual ~Airavata_getWorkflowTemplateId_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string workflowName;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_workflowName(const std::string& val);

  bool operator == (const Airavata_getWorkflowTemplateId_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(workflowName == rhs.workflowName))
      return false;
    return true;
  }
  bool operator != (const Airavata_getWorkflowTemplateId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getWorkflowTemplateId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getWorkflowTemplateId_args& obj);
};


class Airavata_getWorkflowTemplateId_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_getWorkflowTemplateId_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* workflowName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getWorkflowTemplateId_pargs& obj);
};

typedef struct _Airavata_getWorkflowTemplateId_result__isset {
  _Airavata_getWorkflowTemplateId_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getWorkflowTemplateId_result__isset;

class Airavata_getWorkflowTemplateId_result {
 public:

  static const char* ascii_fingerprint; // = "21BF57A9FE5AAA661540804D4FB9F023";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xBF,0x57,0xA9,0xFE,0x5A,0xAA,0x66,0x15,0x40,0x80,0x4D,0x4F,0xB9,0xF0,0x23};

  Airavata_getWorkflowTemplateId_result(const Airavata_getWorkflowTemplateId_result&);
  Airavata_getWorkflowTemplateId_result& operator=(const Airavata_getWorkflowTemplateId_result&);
  Airavata_getWorkflowTemplateId_result() : success() {
  }

  virtual ~Airavata_getWorkflowTemplateId_result() throw();
  std::string success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getWorkflowTemplateId_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_getWorkflowTemplateId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_getWorkflowTemplateId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_getWorkflowTemplateId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getWorkflowTemplateId_result& obj);
};

typedef struct _Airavata_getWorkflowTemplateId_presult__isset {
  _Airavata_getWorkflowTemplateId_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_getWorkflowTemplateId_presult__isset;

class Airavata_getWorkflowTemplateId_presult {
 public:

  static const char* ascii_fingerprint; // = "21BF57A9FE5AAA661540804D4FB9F023";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0xBF,0x57,0xA9,0xFE,0x5A,0xAA,0x66,0x15,0x40,0x80,0x4D,0x4F,0xB9,0xF0,0x23};


  virtual ~Airavata_getWorkflowTemplateId_presult() throw();
  std::string* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_getWorkflowTemplateId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_getWorkflowTemplateId_presult& obj);
};


class Airavata_isWorkflowExistWithName_args {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};

  Airavata_isWorkflowExistWithName_args(const Airavata_isWorkflowExistWithName_args&);
  Airavata_isWorkflowExistWithName_args& operator=(const Airavata_isWorkflowExistWithName_args&);
  Airavata_isWorkflowExistWithName_args() : workflowName() {
  }

  virtual ~Airavata_isWorkflowExistWithName_args() throw();
   ::apache::airavata::model::security::AuthzToken authzToken;
  std::string workflowName;

  void __set_authzToken(const  ::apache::airavata::model::security::AuthzToken& val);

  void __set_workflowName(const std::string& val);

  bool operator == (const Airavata_isWorkflowExistWithName_args & rhs) const
  {
    if (!(authzToken == rhs.authzToken))
      return false;
    if (!(workflowName == rhs.workflowName))
      return false;
    return true;
  }
  bool operator != (const Airavata_isWorkflowExistWithName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_isWorkflowExistWithName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_isWorkflowExistWithName_args& obj);
};


class Airavata_isWorkflowExistWithName_pargs {
 public:

  static const char* ascii_fingerprint; // = "5C8C4FD14D732E7EC3E0A61A8C24C7FF";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0x8C,0x4F,0xD1,0x4D,0x73,0x2E,0x7E,0xC3,0xE0,0xA6,0x1A,0x8C,0x24,0xC7,0xFF};


  virtual ~Airavata_isWorkflowExistWithName_pargs() throw();
  const  ::apache::airavata::model::security::AuthzToken* authzToken;
  const std::string* workflowName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_isWorkflowExistWithName_pargs& obj);
};

typedef struct _Airavata_isWorkflowExistWithName_result__isset {
  _Airavata_isWorkflowExistWithName_result__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_isWorkflowExistWithName_result__isset;

class Airavata_isWorkflowExistWithName_result {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};

  Airavata_isWorkflowExistWithName_result(const Airavata_isWorkflowExistWithName_result&);
  Airavata_isWorkflowExistWithName_result& operator=(const Airavata_isWorkflowExistWithName_result&);
  Airavata_isWorkflowExistWithName_result() : success(0) {
  }

  virtual ~Airavata_isWorkflowExistWithName_result() throw();
  bool success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_isWorkflowExistWithName_result__isset __isset;

  void __set_success(const bool val);

  void __set_ire(const  ::apache::airavata::api::error::InvalidRequestException& val);

  void __set_ace(const  ::apache::airavata::api::error::AiravataClientException& val);

  void __set_ase(const  ::apache::airavata::api::error::AiravataSystemException& val);

  void __set_ae(const  ::apache::airavata::api::error::AuthorizationException& val);

  bool operator == (const Airavata_isWorkflowExistWithName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    if (!(ae == rhs.ae))
      return false;
    return true;
  }
  bool operator != (const Airavata_isWorkflowExistWithName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Airavata_isWorkflowExistWithName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Airavata_isWorkflowExistWithName_result& obj);
};

typedef struct _Airavata_isWorkflowExistWithName_presult__isset {
  _Airavata_isWorkflowExistWithName_presult__isset() : success(false), ire(false), ace(false), ase(false), ae(false) {}
  bool success :1;
  bool ire :1;
  bool ace :1;
  bool ase :1;
  bool ae :1;
} _Airavata_isWorkflowExistWithName_presult__isset;

class Airavata_isWorkflowExistWithName_presult {
 public:

  static const char* ascii_fingerprint; // = "C0679679E26638BE0A41545C2E17B17A";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x67,0x96,0x79,0xE2,0x66,0x38,0xBE,0x0A,0x41,0x54,0x5C,0x2E,0x17,0xB1,0x7A};


  virtual ~Airavata_isWorkflowExistWithName_presult() throw();
  bool* success;
   ::apache::airavata::api::error::InvalidRequestException ire;
   ::apache::airavata::api::error::AiravataClientException ace;
   ::apache::airavata::api::error::AiravataSystemException ase;
   ::apache::airavata::api::error::AuthorizationException ae;

  _Airavata_isWorkflowExistWithName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Airavata_isWorkflowExistWithName_presult& obj);
};

class AiravataClient : virtual public AiravataIf {
 public:
  AiravataClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AiravataClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getAPIVersion(std::string& _return);
  void send_getAPIVersion();
  void recv_getAPIVersion(std::string& _return);
  void addGateway(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const  ::apache::airavata::model::workspace::Gateway& gateway);
  void send_addGateway(const  ::apache::airavata::model::security::AuthzToken& authzToken, const  ::apache::airavata::model::workspace::Gateway& gateway);
  void recv_addGateway(std::string& _return);
  void updateGateway(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const  ::apache::airavata::model::workspace::Gateway& updatedGateway);
  void send_updateGateway(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const  ::apache::airavata::model::workspace::Gateway& updatedGateway);
  void recv_updateGateway();
  void getGateway( ::apache::airavata::model::workspace::Gateway& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId);
  void send_getGateway(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId);
  void recv_getGateway( ::apache::airavata::model::workspace::Gateway& _return);
  bool deleteGateway(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId);
  void send_deleteGateway(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId);
  bool recv_deleteGateway();
  void getAllGateways(std::vector< ::apache::airavata::model::workspace::Gateway> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken);
  void send_getAllGateways(const  ::apache::airavata::model::security::AuthzToken& authzToken);
  void recv_getAllGateways(std::vector< ::apache::airavata::model::workspace::Gateway> & _return);
  bool isGatewayExist(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId);
  void send_isGatewayExist(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId);
  bool recv_isGatewayExist();
  void generateAndRegisterSSHKeys(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const std::string& userName);
  void send_generateAndRegisterSSHKeys(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const std::string& userName);
  void recv_generateAndRegisterSSHKeys(std::string& _return);
  void getSSHPubKey(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataCredStoreToken, const std::string& gatewayId);
  void send_getSSHPubKey(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataCredStoreToken, const std::string& gatewayId);
  void recv_getSSHPubKey(std::string& _return);
  void getAllUserSSHPubKeys(std::map<std::string, std::string> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& userName);
  void send_getAllUserSSHPubKeys(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& userName);
  void recv_getAllUserSSHPubKeys(std::map<std::string, std::string> & _return);
  void createProject(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const  ::apache::airavata::model::workspace::Project& project);
  void send_createProject(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const  ::apache::airavata::model::workspace::Project& project);
  void recv_createProject(std::string& _return);
  void updateProject(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& projectId, const  ::apache::airavata::model::workspace::Project& updatedProject);
  void send_updateProject(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& projectId, const  ::apache::airavata::model::workspace::Project& updatedProject);
  void recv_updateProject();
  void getProject( ::apache::airavata::model::workspace::Project& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& projectId);
  void send_getProject(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& projectId);
  void recv_getProject( ::apache::airavata::model::workspace::Project& _return);
  bool deleteProject(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& projectId);
  void send_deleteProject(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& projectId);
  bool recv_deleteProject();
  void getUserProjects(std::vector< ::apache::airavata::model::workspace::Project> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const std::string& userName, const int32_t limit, const int32_t offset);
  void send_getUserProjects(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const std::string& userName, const int32_t limit, const int32_t offset);
  void recv_getUserProjects(std::vector< ::apache::airavata::model::workspace::Project> & _return);
  void searchProjectsByProjectName(std::vector< ::apache::airavata::model::workspace::Project> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const std::string& userName, const std::string& projectName, const int32_t limit, const int32_t offset);
  void send_searchProjectsByProjectName(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const std::string& userName, const std::string& projectName, const int32_t limit, const int32_t offset);
  void recv_searchProjectsByProjectName(std::vector< ::apache::airavata::model::workspace::Project> & _return);
  void searchProjectsByProjectDesc(std::vector< ::apache::airavata::model::workspace::Project> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const std::string& userName, const std::string& description, const int32_t limit, const int32_t offset);
  void send_searchProjectsByProjectDesc(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const std::string& userName, const std::string& description, const int32_t limit, const int32_t offset);
  void recv_searchProjectsByProjectDesc(std::vector< ::apache::airavata::model::workspace::Project> & _return);
  void searchExperimentsByName(std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const std::string& userName, const std::string& expName, const int32_t limit, const int32_t offset);
  void send_searchExperimentsByName(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const std::string& userName, const std::string& expName, const int32_t limit, const int32_t offset);
  void recv_searchExperimentsByName(std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel> & _return);
  void searchExperimentsByDesc(std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const std::string& userName, const std::string& description, const int32_t limit, const int32_t offset);
  void send_searchExperimentsByDesc(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const std::string& userName, const std::string& description, const int32_t limit, const int32_t offset);
  void recv_searchExperimentsByDesc(std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel> & _return);
  void searchExperimentsByApplication(std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const std::string& userName, const std::string& applicationId, const int32_t limit, const int32_t offset);
  void send_searchExperimentsByApplication(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const std::string& userName, const std::string& applicationId, const int32_t limit, const int32_t offset);
  void recv_searchExperimentsByApplication(std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel> & _return);
  void searchExperimentsByStatus(std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const std::string& userName, const  ::apache::airavata::model::status::ExperimentState::type experimentState, const int32_t limit, const int32_t offset);
  void send_searchExperimentsByStatus(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const std::string& userName, const  ::apache::airavata::model::status::ExperimentState::type experimentState, const int32_t limit, const int32_t offset);
  void recv_searchExperimentsByStatus(std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel> & _return);
  void searchExperimentsByCreationTime(std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const std::string& userName, const int64_t fromTime, const int64_t toTime, const int32_t limit, const int32_t offset);
  void send_searchExperimentsByCreationTime(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const std::string& userName, const int64_t fromTime, const int64_t toTime, const int32_t limit, const int32_t offset);
  void recv_searchExperimentsByCreationTime(std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel> & _return);
  void searchExperiments(std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const std::string& userName, const std::map< ::apache::airavata::model::experiment::ExperimentSearchFields::type, std::string> & filters, const int32_t limit, const int32_t offset);
  void send_searchExperiments(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const std::string& userName, const std::map< ::apache::airavata::model::experiment::ExperimentSearchFields::type, std::string> & filters, const int32_t limit, const int32_t offset);
  void recv_searchExperiments(std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel> & _return);
  void getExperimentStatistics( ::apache::airavata::model::experiment::ExperimentStatistics& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const int64_t fromTime, const int64_t toTime);
  void send_getExperimentStatistics(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const int64_t fromTime, const int64_t toTime);
  void recv_getExperimentStatistics( ::apache::airavata::model::experiment::ExperimentStatistics& _return);
  void getExperimentsInProject(std::vector< ::apache::airavata::model::experiment::ExperimentModel> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& projectId, const int32_t limit, const int32_t offset);
  void send_getExperimentsInProject(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& projectId, const int32_t limit, const int32_t offset);
  void recv_getExperimentsInProject(std::vector< ::apache::airavata::model::experiment::ExperimentModel> & _return);
  void getUserExperiments(std::vector< ::apache::airavata::model::experiment::ExperimentModel> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const std::string& userName, const int32_t limit, const int32_t offset);
  void send_getUserExperiments(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const std::string& userName, const int32_t limit, const int32_t offset);
  void recv_getUserExperiments(std::vector< ::apache::airavata::model::experiment::ExperimentModel> & _return);
  void createExperiment(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const  ::apache::airavata::model::experiment::ExperimentModel& experiment);
  void send_createExperiment(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const  ::apache::airavata::model::experiment::ExperimentModel& experiment);
  void recv_createExperiment(std::string& _return);
  void getExperiment( ::apache::airavata::model::experiment::ExperimentModel& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId);
  void send_getExperiment(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId);
  void recv_getExperiment( ::apache::airavata::model::experiment::ExperimentModel& _return);
  void updateExperiment(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId, const  ::apache::airavata::model::experiment::ExperimentModel& experiment);
  void send_updateExperiment(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId, const  ::apache::airavata::model::experiment::ExperimentModel& experiment);
  void recv_updateExperiment();
  void updateExperimentConfiguration(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId, const  ::apache::airavata::model::experiment::UserConfigurationDataModel& userConfiguration);
  void send_updateExperimentConfiguration(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId, const  ::apache::airavata::model::experiment::UserConfigurationDataModel& userConfiguration);
  void recv_updateExperimentConfiguration();
  void updateResourceScheduleing(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId, const  ::apache::airavata::model::scheduling::ComputationalResourceSchedulingModel& resourceScheduling);
  void send_updateResourceScheduleing(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId, const  ::apache::airavata::model::scheduling::ComputationalResourceSchedulingModel& resourceScheduling);
  void recv_updateResourceScheduleing();
  bool validateExperiment(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId);
  void send_validateExperiment(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId);
  bool recv_validateExperiment();
  void launchExperiment(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId, const std::string& airavataCredStoreToken);
  void send_launchExperiment(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId, const std::string& airavataCredStoreToken);
  void recv_launchExperiment();
  void getExperimentStatus( ::apache::airavata::model::status::ExperimentStatus& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId);
  void send_getExperimentStatus(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId);
  void recv_getExperimentStatus( ::apache::airavata::model::status::ExperimentStatus& _return);
  void getExperimentOutputs(std::vector< ::apache::airavata::model::application::io::OutputDataObjectType> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId);
  void send_getExperimentOutputs(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId);
  void recv_getExperimentOutputs(std::vector< ::apache::airavata::model::application::io::OutputDataObjectType> & _return);
  void getIntermediateOutputs(std::vector< ::apache::airavata::model::application::io::OutputDataObjectType> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId);
  void send_getIntermediateOutputs(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId);
  void recv_getIntermediateOutputs(std::vector< ::apache::airavata::model::application::io::OutputDataObjectType> & _return);
  void getJobStatuses(std::map<std::string,  ::apache::airavata::model::status::JobStatus> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId);
  void send_getJobStatuses(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId);
  void recv_getJobStatuses(std::map<std::string,  ::apache::airavata::model::status::JobStatus> & _return);
  void getJobDetails(std::vector< ::apache::airavata::model::job::JobModel> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId);
  void send_getJobDetails(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId);
  void recv_getJobDetails(std::vector< ::apache::airavata::model::job::JobModel> & _return);
  void cloneExperiment(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& existingExperimentID, const std::string& newExperimentName);
  void send_cloneExperiment(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& existingExperimentID, const std::string& newExperimentName);
  void recv_cloneExperiment(std::string& _return);
  void terminateExperiment(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId, const std::string& tokenId);
  void send_terminateExperiment(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId, const std::string& tokenId);
  void recv_terminateExperiment();
  void registerApplicationModule(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule& applicationModule);
  void send_registerApplicationModule(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule& applicationModule);
  void recv_registerApplicationModule(std::string& _return);
  void getApplicationModule( ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appModuleId);
  void send_getApplicationModule(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appModuleId);
  void recv_getApplicationModule( ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule& _return);
  bool updateApplicationModule(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appModuleId, const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule& applicationModule);
  void send_updateApplicationModule(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appModuleId, const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule& applicationModule);
  bool recv_updateApplicationModule();
  void getAllAppModules(std::vector< ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId);
  void send_getAllAppModules(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId);
  void recv_getAllAppModules(std::vector< ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule> & _return);
  bool deleteApplicationModule(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appModuleId);
  void send_deleteApplicationModule(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appModuleId);
  bool recv_deleteApplicationModule();
  void registerApplicationDeployment(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription& applicationDeployment);
  void send_registerApplicationDeployment(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription& applicationDeployment);
  void recv_registerApplicationDeployment(std::string& _return);
  void getApplicationDeployment( ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appDeploymentId);
  void send_getApplicationDeployment(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appDeploymentId);
  void recv_getApplicationDeployment( ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription& _return);
  bool updateApplicationDeployment(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appDeploymentId, const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription& applicationDeployment);
  void send_updateApplicationDeployment(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appDeploymentId, const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription& applicationDeployment);
  bool recv_updateApplicationDeployment();
  bool deleteApplicationDeployment(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appDeploymentId);
  void send_deleteApplicationDeployment(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appDeploymentId);
  bool recv_deleteApplicationDeployment();
  void getAllApplicationDeployments(std::vector< ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId);
  void send_getAllApplicationDeployments(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId);
  void recv_getAllApplicationDeployments(std::vector< ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription> & _return);
  void getAppModuleDeployedResources(std::vector<std::string> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appModuleId);
  void send_getAppModuleDeployedResources(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appModuleId);
  void recv_getAppModuleDeployedResources(std::vector<std::string> & _return);
  void registerApplicationInterface(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const  ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription& applicationInterface);
  void send_registerApplicationInterface(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const  ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription& applicationInterface);
  void recv_registerApplicationInterface(std::string& _return);
  void getApplicationInterface( ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appInterfaceId);
  void send_getApplicationInterface(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appInterfaceId);
  void recv_getApplicationInterface( ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription& _return);
  bool updateApplicationInterface(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appInterfaceId, const  ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription& applicationInterface);
  void send_updateApplicationInterface(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appInterfaceId, const  ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription& applicationInterface);
  bool recv_updateApplicationInterface();
  bool deleteApplicationInterface(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appInterfaceId);
  void send_deleteApplicationInterface(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appInterfaceId);
  bool recv_deleteApplicationInterface();
  void getAllApplicationInterfaceNames(std::map<std::string, std::string> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId);
  void send_getAllApplicationInterfaceNames(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId);
  void recv_getAllApplicationInterfaceNames(std::map<std::string, std::string> & _return);
  void getAllApplicationInterfaces(std::vector< ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId);
  void send_getAllApplicationInterfaces(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId);
  void recv_getAllApplicationInterfaces(std::vector< ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription> & _return);
  void getApplicationInputs(std::vector< ::apache::airavata::model::application::io::InputDataObjectType> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appInterfaceId);
  void send_getApplicationInputs(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appInterfaceId);
  void recv_getApplicationInputs(std::vector< ::apache::airavata::model::application::io::InputDataObjectType> & _return);
  void getApplicationOutputs(std::vector< ::apache::airavata::model::application::io::OutputDataObjectType> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appInterfaceId);
  void send_getApplicationOutputs(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appInterfaceId);
  void recv_getApplicationOutputs(std::vector< ::apache::airavata::model::application::io::OutputDataObjectType> & _return);
  void getAvailableAppInterfaceComputeResources(std::map<std::string, std::string> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appInterfaceId);
  void send_getAvailableAppInterfaceComputeResources(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appInterfaceId);
  void recv_getAvailableAppInterfaceComputeResources(std::map<std::string, std::string> & _return);
  void registerComputeResource(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const  ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription& computeResourceDescription);
  void send_registerComputeResource(const  ::apache::airavata::model::security::AuthzToken& authzToken, const  ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription& computeResourceDescription);
  void recv_registerComputeResource(std::string& _return);
  void getComputeResource( ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId);
  void send_getComputeResource(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId);
  void recv_getComputeResource( ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription& _return);
  void getAllComputeResourceNames(std::map<std::string, std::string> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken);
  void send_getAllComputeResourceNames(const  ::apache::airavata::model::security::AuthzToken& authzToken);
  void recv_getAllComputeResourceNames(std::map<std::string, std::string> & _return);
  bool updateComputeResource(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const  ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription& computeResourceDescription);
  void send_updateComputeResource(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const  ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription& computeResourceDescription);
  bool recv_updateComputeResource();
  bool deleteComputeResource(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId);
  void send_deleteComputeResource(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId);
  bool recv_deleteComputeResource();
  void addLocalSubmissionDetails(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission& localSubmission);
  void send_addLocalSubmissionDetails(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission& localSubmission);
  void recv_addLocalSubmissionDetails(std::string& _return);
  bool updateLocalSubmissionDetails(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& jobSubmissionInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission& localSubmission);
  void send_updateLocalSubmissionDetails(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& jobSubmissionInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission& localSubmission);
  bool recv_updateLocalSubmissionDetails();
  void getLocalJobSubmission( ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& jobSubmissionId);
  void send_getLocalJobSubmission(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& jobSubmissionId);
  void recv_getLocalJobSubmission( ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission& _return);
  void addSSHJobSubmissionDetails(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission& sshJobSubmission);
  void send_addSSHJobSubmissionDetails(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission& sshJobSubmission);
  void recv_addSSHJobSubmissionDetails(std::string& _return);
  void addSSHForkJobSubmissionDetails(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission& sshJobSubmission);
  void send_addSSHForkJobSubmissionDetails(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission& sshJobSubmission);
  void recv_addSSHForkJobSubmissionDetails(std::string& _return);
  void getSSHJobSubmission( ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& jobSubmissionId);
  void send_getSSHJobSubmission(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& jobSubmissionId);
  void recv_getSSHJobSubmission( ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission& _return);
  void addUNICOREJobSubmissionDetails(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission& unicoreJobSubmission);
  void send_addUNICOREJobSubmissionDetails(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission& unicoreJobSubmission);
  void recv_addUNICOREJobSubmissionDetails(std::string& _return);
  void getUnicoreJobSubmission( ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& jobSubmissionId);
  void send_getUnicoreJobSubmission(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& jobSubmissionId);
  void recv_getUnicoreJobSubmission( ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission& _return);
  void addCloudJobSubmissionDetails(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission& cloudSubmission);
  void send_addCloudJobSubmissionDetails(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission& cloudSubmission);
  void recv_addCloudJobSubmissionDetails(std::string& _return);
  void getCloudJobSubmission( ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& jobSubmissionId);
  void send_getCloudJobSubmission(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& jobSubmissionId);
  void recv_getCloudJobSubmission( ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission& _return);
  bool updateSSHJobSubmissionDetails(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& jobSubmissionInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission& sshJobSubmission);
  void send_updateSSHJobSubmissionDetails(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& jobSubmissionInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission& sshJobSubmission);
  bool recv_updateSSHJobSubmissionDetails();
  bool updateCloudJobSubmissionDetails(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& jobSubmissionInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission& sshJobSubmission);
  void send_updateCloudJobSubmissionDetails(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& jobSubmissionInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission& sshJobSubmission);
  bool recv_updateCloudJobSubmissionDetails();
  bool updateUnicoreJobSubmissionDetails(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& jobSubmissionInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission& unicoreJobSubmission);
  void send_updateUnicoreJobSubmissionDetails(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& jobSubmissionInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission& unicoreJobSubmission);
  bool recv_updateUnicoreJobSubmissionDetails();
  void addLocalDataMovementDetails(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement& localDataMovement);
  void send_addLocalDataMovementDetails(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement& localDataMovement);
  void recv_addLocalDataMovementDetails(std::string& _return);
  bool updateLocalDataMovementDetails(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& dataMovementInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement& localDataMovement);
  void send_updateLocalDataMovementDetails(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& dataMovementInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement& localDataMovement);
  bool recv_updateLocalDataMovementDetails();
  void getLocalDataMovement( ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& dataMovementId);
  void send_getLocalDataMovement(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& dataMovementId);
  void recv_getLocalDataMovement( ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement& _return);
  void addSCPDataMovementDetails(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement& scpDataMovement);
  void send_addSCPDataMovementDetails(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement& scpDataMovement);
  void recv_addSCPDataMovementDetails(std::string& _return);
  bool updateSCPDataMovementDetails(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& dataMovementInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement& scpDataMovement);
  void send_updateSCPDataMovementDetails(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& dataMovementInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement& scpDataMovement);
  bool recv_updateSCPDataMovementDetails();
  void getSCPDataMovement( ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& dataMovementId);
  void send_getSCPDataMovement(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& dataMovementId);
  void recv_getSCPDataMovement( ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement& _return);
  void addUnicoreDataMovementDetails(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement& unicoreDataMovement);
  void send_addUnicoreDataMovementDetails(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement& unicoreDataMovement);
  void recv_addUnicoreDataMovementDetails(std::string& _return);
  bool updateUnicoreDataMovementDetails(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& dataMovementInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement& unicoreDataMovement);
  void send_updateUnicoreDataMovementDetails(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& dataMovementInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement& unicoreDataMovement);
  bool recv_updateUnicoreDataMovementDetails();
  void getUnicoreDataMovement( ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& dataMovementId);
  void send_getUnicoreDataMovement(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& dataMovementId);
  void recv_getUnicoreDataMovement( ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement& _return);
  void addGridFTPDataMovementDetails(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement& gridFTPDataMovement);
  void send_addGridFTPDataMovementDetails(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement& gridFTPDataMovement);
  void recv_addGridFTPDataMovementDetails(std::string& _return);
  bool updateGridFTPDataMovementDetails(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& dataMovementInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement& gridFTPDataMovement);
  void send_updateGridFTPDataMovementDetails(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& dataMovementInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement& gridFTPDataMovement);
  bool recv_updateGridFTPDataMovementDetails();
  void getGridFTPDataMovement( ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& dataMovementId);
  void send_getGridFTPDataMovement(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& dataMovementId);
  void recv_getGridFTPDataMovement( ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement& _return);
  bool changeJobSubmissionPriority(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& jobSubmissionInterfaceId, const int32_t newPriorityOrder);
  void send_changeJobSubmissionPriority(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& jobSubmissionInterfaceId, const int32_t newPriorityOrder);
  bool recv_changeJobSubmissionPriority();
  bool changeDataMovementPriority(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& dataMovementInterfaceId, const int32_t newPriorityOrder);
  void send_changeDataMovementPriority(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& dataMovementInterfaceId, const int32_t newPriorityOrder);
  bool recv_changeDataMovementPriority();
  bool changeJobSubmissionPriorities(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::map<std::string, int32_t> & jobSubmissionPriorityMap);
  void send_changeJobSubmissionPriorities(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::map<std::string, int32_t> & jobSubmissionPriorityMap);
  bool recv_changeJobSubmissionPriorities();
  bool changeDataMovementPriorities(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::map<std::string, int32_t> & dataMovementPriorityMap);
  void send_changeDataMovementPriorities(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::map<std::string, int32_t> & dataMovementPriorityMap);
  bool recv_changeDataMovementPriorities();
  bool deleteJobSubmissionInterface(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const std::string& jobSubmissionInterfaceId);
  void send_deleteJobSubmissionInterface(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const std::string& jobSubmissionInterfaceId);
  bool recv_deleteJobSubmissionInterface();
  bool deleteDataMovementInterface(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const std::string& dataMovementInterfaceId);
  void send_deleteDataMovementInterface(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const std::string& dataMovementInterfaceId);
  bool recv_deleteDataMovementInterface();
  void registerResourceJobManager(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const  ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager& resourceJobManager);
  void send_registerResourceJobManager(const  ::apache::airavata::model::security::AuthzToken& authzToken, const  ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager& resourceJobManager);
  void recv_registerResourceJobManager(std::string& _return);
  bool updateResourceJobManager(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& resourceJobManagerId, const  ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager& updatedResourceJobManager);
  void send_updateResourceJobManager(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& resourceJobManagerId, const  ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager& updatedResourceJobManager);
  bool recv_updateResourceJobManager();
  void getResourceJobManager( ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& resourceJobManagerId);
  void send_getResourceJobManager(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& resourceJobManagerId);
  void recv_getResourceJobManager( ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager& _return);
  bool deleteResourceJobManager(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& resourceJobManagerId);
  void send_deleteResourceJobManager(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& resourceJobManagerId);
  bool recv_deleteResourceJobManager();
  bool deleteBatchQueue(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const std::string& queueName);
  void send_deleteBatchQueue(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const std::string& queueName);
  bool recv_deleteBatchQueue();
  void registerGatewayResourceProfile(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const  ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile& gatewayResourceProfile);
  void send_registerGatewayResourceProfile(const  ::apache::airavata::model::security::AuthzToken& authzToken, const  ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile& gatewayResourceProfile);
  void recv_registerGatewayResourceProfile(std::string& _return);
  void getGatewayResourceProfile( ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayID);
  void send_getGatewayResourceProfile(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayID);
  void recv_getGatewayResourceProfile( ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile& _return);
  bool updateGatewayResourceProfile(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayID, const  ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile& gatewayResourceProfile);
  void send_updateGatewayResourceProfile(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayID, const  ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile& gatewayResourceProfile);
  bool recv_updateGatewayResourceProfile();
  bool deleteGatewayResourceProfile(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayID);
  void send_deleteGatewayResourceProfile(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayID);
  bool recv_deleteGatewayResourceProfile();
  bool addGatewayComputeResourcePreference(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayID, const std::string& computeResourceId, const  ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference& computeResourcePreference);
  void send_addGatewayComputeResourcePreference(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayID, const std::string& computeResourceId, const  ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference& computeResourcePreference);
  bool recv_addGatewayComputeResourcePreference();
  void getGatewayComputeResourcePreference( ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayID, const std::string& computeResourceId);
  void send_getGatewayComputeResourcePreference(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayID, const std::string& computeResourceId);
  void recv_getGatewayComputeResourcePreference( ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference& _return);
  void getAllGatewayComputeResourcePreferences(std::vector< ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayID);
  void send_getAllGatewayComputeResourcePreferences(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayID);
  void recv_getAllGatewayComputeResourcePreferences(std::vector< ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference> & _return);
  void getAllGatewayComputeResources(std::vector< ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken);
  void send_getAllGatewayComputeResources(const  ::apache::airavata::model::security::AuthzToken& authzToken);
  void recv_getAllGatewayComputeResources(std::vector< ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile> & _return);
  bool updateGatewayComputeResourcePreference(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayID, const std::string& computeResourceId, const  ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference& computeResourcePreference);
  void send_updateGatewayComputeResourcePreference(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayID, const std::string& computeResourceId, const  ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference& computeResourcePreference);
  bool recv_updateGatewayComputeResourcePreference();
  bool deleteGatewayComputeResourcePreference(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayID, const std::string& computeResourceId);
  void send_deleteGatewayComputeResourcePreference(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayID, const std::string& computeResourceId);
  bool recv_deleteGatewayComputeResourcePreference();
  void getAllWorkflows(std::vector<std::string> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId);
  void send_getAllWorkflows(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId);
  void recv_getAllWorkflows(std::vector<std::string> & _return);
  void getWorkflow( ::Workflow& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& workflowTemplateId);
  void send_getWorkflow(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& workflowTemplateId);
  void recv_getWorkflow( ::Workflow& _return);
  void deleteWorkflow(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& workflowTemplateId);
  void send_deleteWorkflow(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& workflowTemplateId);
  void recv_deleteWorkflow();
  void registerWorkflow(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const  ::Workflow& workflow);
  void send_registerWorkflow(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const  ::Workflow& workflow);
  void recv_registerWorkflow(std::string& _return);
  void updateWorkflow(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& workflowTemplateId, const  ::Workflow& workflow);
  void send_updateWorkflow(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& workflowTemplateId, const  ::Workflow& workflow);
  void recv_updateWorkflow();
  void getWorkflowTemplateId(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& workflowName);
  void send_getWorkflowTemplateId(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& workflowName);
  void recv_getWorkflowTemplateId(std::string& _return);
  bool isWorkflowExistWithName(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& workflowName);
  void send_isWorkflowExistWithName(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& workflowName);
  bool recv_isWorkflowExistWithName();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AiravataProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<AiravataIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AiravataProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getAPIVersion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addGateway(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateGateway(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getGateway(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteGateway(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllGateways(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isGatewayExist(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_generateAndRegisterSSHKeys(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSSHPubKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllUserSSHPubKeys(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createProject(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateProject(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getProject(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteProject(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUserProjects(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_searchProjectsByProjectName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_searchProjectsByProjectDesc(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_searchExperimentsByName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_searchExperimentsByDesc(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_searchExperimentsByApplication(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_searchExperimentsByStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_searchExperimentsByCreationTime(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_searchExperiments(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getExperimentStatistics(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getExperimentsInProject(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUserExperiments(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createExperiment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getExperiment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateExperiment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateExperimentConfiguration(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateResourceScheduleing(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_validateExperiment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_launchExperiment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getExperimentStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getExperimentOutputs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getIntermediateOutputs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getJobStatuses(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getJobDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_cloneExperiment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_terminateExperiment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerApplicationModule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getApplicationModule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateApplicationModule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllAppModules(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteApplicationModule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerApplicationDeployment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getApplicationDeployment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateApplicationDeployment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteApplicationDeployment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllApplicationDeployments(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAppModuleDeployedResources(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerApplicationInterface(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getApplicationInterface(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateApplicationInterface(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteApplicationInterface(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllApplicationInterfaceNames(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllApplicationInterfaces(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getApplicationInputs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getApplicationOutputs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAvailableAppInterfaceComputeResources(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerComputeResource(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getComputeResource(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllComputeResourceNames(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateComputeResource(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteComputeResource(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addLocalSubmissionDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateLocalSubmissionDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getLocalJobSubmission(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addSSHJobSubmissionDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addSSHForkJobSubmissionDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSSHJobSubmission(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addUNICOREJobSubmissionDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUnicoreJobSubmission(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addCloudJobSubmissionDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCloudJobSubmission(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateSSHJobSubmissionDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateCloudJobSubmissionDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateUnicoreJobSubmissionDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addLocalDataMovementDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateLocalDataMovementDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getLocalDataMovement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addSCPDataMovementDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateSCPDataMovementDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSCPDataMovement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addUnicoreDataMovementDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateUnicoreDataMovementDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUnicoreDataMovement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addGridFTPDataMovementDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateGridFTPDataMovementDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getGridFTPDataMovement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_changeJobSubmissionPriority(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_changeDataMovementPriority(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_changeJobSubmissionPriorities(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_changeDataMovementPriorities(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteJobSubmissionInterface(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteDataMovementInterface(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerResourceJobManager(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateResourceJobManager(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getResourceJobManager(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteResourceJobManager(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteBatchQueue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerGatewayResourceProfile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getGatewayResourceProfile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateGatewayResourceProfile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteGatewayResourceProfile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addGatewayComputeResourcePreference(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getGatewayComputeResourcePreference(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllGatewayComputeResourcePreferences(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllGatewayComputeResources(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateGatewayComputeResourcePreference(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteGatewayComputeResourcePreference(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllWorkflows(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getWorkflow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteWorkflow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerWorkflow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateWorkflow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getWorkflowTemplateId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isWorkflowExistWithName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AiravataProcessor(boost::shared_ptr<AiravataIf> iface) :
    iface_(iface) {
    processMap_["getAPIVersion"] = &AiravataProcessor::process_getAPIVersion;
    processMap_["addGateway"] = &AiravataProcessor::process_addGateway;
    processMap_["updateGateway"] = &AiravataProcessor::process_updateGateway;
    processMap_["getGateway"] = &AiravataProcessor::process_getGateway;
    processMap_["deleteGateway"] = &AiravataProcessor::process_deleteGateway;
    processMap_["getAllGateways"] = &AiravataProcessor::process_getAllGateways;
    processMap_["isGatewayExist"] = &AiravataProcessor::process_isGatewayExist;
    processMap_["generateAndRegisterSSHKeys"] = &AiravataProcessor::process_generateAndRegisterSSHKeys;
    processMap_["getSSHPubKey"] = &AiravataProcessor::process_getSSHPubKey;
    processMap_["getAllUserSSHPubKeys"] = &AiravataProcessor::process_getAllUserSSHPubKeys;
    processMap_["createProject"] = &AiravataProcessor::process_createProject;
    processMap_["updateProject"] = &AiravataProcessor::process_updateProject;
    processMap_["getProject"] = &AiravataProcessor::process_getProject;
    processMap_["deleteProject"] = &AiravataProcessor::process_deleteProject;
    processMap_["getUserProjects"] = &AiravataProcessor::process_getUserProjects;
    processMap_["searchProjectsByProjectName"] = &AiravataProcessor::process_searchProjectsByProjectName;
    processMap_["searchProjectsByProjectDesc"] = &AiravataProcessor::process_searchProjectsByProjectDesc;
    processMap_["searchExperimentsByName"] = &AiravataProcessor::process_searchExperimentsByName;
    processMap_["searchExperimentsByDesc"] = &AiravataProcessor::process_searchExperimentsByDesc;
    processMap_["searchExperimentsByApplication"] = &AiravataProcessor::process_searchExperimentsByApplication;
    processMap_["searchExperimentsByStatus"] = &AiravataProcessor::process_searchExperimentsByStatus;
    processMap_["searchExperimentsByCreationTime"] = &AiravataProcessor::process_searchExperimentsByCreationTime;
    processMap_["searchExperiments"] = &AiravataProcessor::process_searchExperiments;
    processMap_["getExperimentStatistics"] = &AiravataProcessor::process_getExperimentStatistics;
    processMap_["getExperimentsInProject"] = &AiravataProcessor::process_getExperimentsInProject;
    processMap_["getUserExperiments"] = &AiravataProcessor::process_getUserExperiments;
    processMap_["createExperiment"] = &AiravataProcessor::process_createExperiment;
    processMap_["getExperiment"] = &AiravataProcessor::process_getExperiment;
    processMap_["updateExperiment"] = &AiravataProcessor::process_updateExperiment;
    processMap_["updateExperimentConfiguration"] = &AiravataProcessor::process_updateExperimentConfiguration;
    processMap_["updateResourceScheduleing"] = &AiravataProcessor::process_updateResourceScheduleing;
    processMap_["validateExperiment"] = &AiravataProcessor::process_validateExperiment;
    processMap_["launchExperiment"] = &AiravataProcessor::process_launchExperiment;
    processMap_["getExperimentStatus"] = &AiravataProcessor::process_getExperimentStatus;
    processMap_["getExperimentOutputs"] = &AiravataProcessor::process_getExperimentOutputs;
    processMap_["getIntermediateOutputs"] = &AiravataProcessor::process_getIntermediateOutputs;
    processMap_["getJobStatuses"] = &AiravataProcessor::process_getJobStatuses;
    processMap_["getJobDetails"] = &AiravataProcessor::process_getJobDetails;
    processMap_["cloneExperiment"] = &AiravataProcessor::process_cloneExperiment;
    processMap_["terminateExperiment"] = &AiravataProcessor::process_terminateExperiment;
    processMap_["registerApplicationModule"] = &AiravataProcessor::process_registerApplicationModule;
    processMap_["getApplicationModule"] = &AiravataProcessor::process_getApplicationModule;
    processMap_["updateApplicationModule"] = &AiravataProcessor::process_updateApplicationModule;
    processMap_["getAllAppModules"] = &AiravataProcessor::process_getAllAppModules;
    processMap_["deleteApplicationModule"] = &AiravataProcessor::process_deleteApplicationModule;
    processMap_["registerApplicationDeployment"] = &AiravataProcessor::process_registerApplicationDeployment;
    processMap_["getApplicationDeployment"] = &AiravataProcessor::process_getApplicationDeployment;
    processMap_["updateApplicationDeployment"] = &AiravataProcessor::process_updateApplicationDeployment;
    processMap_["deleteApplicationDeployment"] = &AiravataProcessor::process_deleteApplicationDeployment;
    processMap_["getAllApplicationDeployments"] = &AiravataProcessor::process_getAllApplicationDeployments;
    processMap_["getAppModuleDeployedResources"] = &AiravataProcessor::process_getAppModuleDeployedResources;
    processMap_["registerApplicationInterface"] = &AiravataProcessor::process_registerApplicationInterface;
    processMap_["getApplicationInterface"] = &AiravataProcessor::process_getApplicationInterface;
    processMap_["updateApplicationInterface"] = &AiravataProcessor::process_updateApplicationInterface;
    processMap_["deleteApplicationInterface"] = &AiravataProcessor::process_deleteApplicationInterface;
    processMap_["getAllApplicationInterfaceNames"] = &AiravataProcessor::process_getAllApplicationInterfaceNames;
    processMap_["getAllApplicationInterfaces"] = &AiravataProcessor::process_getAllApplicationInterfaces;
    processMap_["getApplicationInputs"] = &AiravataProcessor::process_getApplicationInputs;
    processMap_["getApplicationOutputs"] = &AiravataProcessor::process_getApplicationOutputs;
    processMap_["getAvailableAppInterfaceComputeResources"] = &AiravataProcessor::process_getAvailableAppInterfaceComputeResources;
    processMap_["registerComputeResource"] = &AiravataProcessor::process_registerComputeResource;
    processMap_["getComputeResource"] = &AiravataProcessor::process_getComputeResource;
    processMap_["getAllComputeResourceNames"] = &AiravataProcessor::process_getAllComputeResourceNames;
    processMap_["updateComputeResource"] = &AiravataProcessor::process_updateComputeResource;
    processMap_["deleteComputeResource"] = &AiravataProcessor::process_deleteComputeResource;
    processMap_["addLocalSubmissionDetails"] = &AiravataProcessor::process_addLocalSubmissionDetails;
    processMap_["updateLocalSubmissionDetails"] = &AiravataProcessor::process_updateLocalSubmissionDetails;
    processMap_["getLocalJobSubmission"] = &AiravataProcessor::process_getLocalJobSubmission;
    processMap_["addSSHJobSubmissionDetails"] = &AiravataProcessor::process_addSSHJobSubmissionDetails;
    processMap_["addSSHForkJobSubmissionDetails"] = &AiravataProcessor::process_addSSHForkJobSubmissionDetails;
    processMap_["getSSHJobSubmission"] = &AiravataProcessor::process_getSSHJobSubmission;
    processMap_["addUNICOREJobSubmissionDetails"] = &AiravataProcessor::process_addUNICOREJobSubmissionDetails;
    processMap_["getUnicoreJobSubmission"] = &AiravataProcessor::process_getUnicoreJobSubmission;
    processMap_["addCloudJobSubmissionDetails"] = &AiravataProcessor::process_addCloudJobSubmissionDetails;
    processMap_["getCloudJobSubmission"] = &AiravataProcessor::process_getCloudJobSubmission;
    processMap_["updateSSHJobSubmissionDetails"] = &AiravataProcessor::process_updateSSHJobSubmissionDetails;
    processMap_["updateCloudJobSubmissionDetails"] = &AiravataProcessor::process_updateCloudJobSubmissionDetails;
    processMap_["updateUnicoreJobSubmissionDetails"] = &AiravataProcessor::process_updateUnicoreJobSubmissionDetails;
    processMap_["addLocalDataMovementDetails"] = &AiravataProcessor::process_addLocalDataMovementDetails;
    processMap_["updateLocalDataMovementDetails"] = &AiravataProcessor::process_updateLocalDataMovementDetails;
    processMap_["getLocalDataMovement"] = &AiravataProcessor::process_getLocalDataMovement;
    processMap_["addSCPDataMovementDetails"] = &AiravataProcessor::process_addSCPDataMovementDetails;
    processMap_["updateSCPDataMovementDetails"] = &AiravataProcessor::process_updateSCPDataMovementDetails;
    processMap_["getSCPDataMovement"] = &AiravataProcessor::process_getSCPDataMovement;
    processMap_["addUnicoreDataMovementDetails"] = &AiravataProcessor::process_addUnicoreDataMovementDetails;
    processMap_["updateUnicoreDataMovementDetails"] = &AiravataProcessor::process_updateUnicoreDataMovementDetails;
    processMap_["getUnicoreDataMovement"] = &AiravataProcessor::process_getUnicoreDataMovement;
    processMap_["addGridFTPDataMovementDetails"] = &AiravataProcessor::process_addGridFTPDataMovementDetails;
    processMap_["updateGridFTPDataMovementDetails"] = &AiravataProcessor::process_updateGridFTPDataMovementDetails;
    processMap_["getGridFTPDataMovement"] = &AiravataProcessor::process_getGridFTPDataMovement;
    processMap_["changeJobSubmissionPriority"] = &AiravataProcessor::process_changeJobSubmissionPriority;
    processMap_["changeDataMovementPriority"] = &AiravataProcessor::process_changeDataMovementPriority;
    processMap_["changeJobSubmissionPriorities"] = &AiravataProcessor::process_changeJobSubmissionPriorities;
    processMap_["changeDataMovementPriorities"] = &AiravataProcessor::process_changeDataMovementPriorities;
    processMap_["deleteJobSubmissionInterface"] = &AiravataProcessor::process_deleteJobSubmissionInterface;
    processMap_["deleteDataMovementInterface"] = &AiravataProcessor::process_deleteDataMovementInterface;
    processMap_["registerResourceJobManager"] = &AiravataProcessor::process_registerResourceJobManager;
    processMap_["updateResourceJobManager"] = &AiravataProcessor::process_updateResourceJobManager;
    processMap_["getResourceJobManager"] = &AiravataProcessor::process_getResourceJobManager;
    processMap_["deleteResourceJobManager"] = &AiravataProcessor::process_deleteResourceJobManager;
    processMap_["deleteBatchQueue"] = &AiravataProcessor::process_deleteBatchQueue;
    processMap_["registerGatewayResourceProfile"] = &AiravataProcessor::process_registerGatewayResourceProfile;
    processMap_["getGatewayResourceProfile"] = &AiravataProcessor::process_getGatewayResourceProfile;
    processMap_["updateGatewayResourceProfile"] = &AiravataProcessor::process_updateGatewayResourceProfile;
    processMap_["deleteGatewayResourceProfile"] = &AiravataProcessor::process_deleteGatewayResourceProfile;
    processMap_["addGatewayComputeResourcePreference"] = &AiravataProcessor::process_addGatewayComputeResourcePreference;
    processMap_["getGatewayComputeResourcePreference"] = &AiravataProcessor::process_getGatewayComputeResourcePreference;
    processMap_["getAllGatewayComputeResourcePreferences"] = &AiravataProcessor::process_getAllGatewayComputeResourcePreferences;
    processMap_["getAllGatewayComputeResources"] = &AiravataProcessor::process_getAllGatewayComputeResources;
    processMap_["updateGatewayComputeResourcePreference"] = &AiravataProcessor::process_updateGatewayComputeResourcePreference;
    processMap_["deleteGatewayComputeResourcePreference"] = &AiravataProcessor::process_deleteGatewayComputeResourcePreference;
    processMap_["getAllWorkflows"] = &AiravataProcessor::process_getAllWorkflows;
    processMap_["getWorkflow"] = &AiravataProcessor::process_getWorkflow;
    processMap_["deleteWorkflow"] = &AiravataProcessor::process_deleteWorkflow;
    processMap_["registerWorkflow"] = &AiravataProcessor::process_registerWorkflow;
    processMap_["updateWorkflow"] = &AiravataProcessor::process_updateWorkflow;
    processMap_["getWorkflowTemplateId"] = &AiravataProcessor::process_getWorkflowTemplateId;
    processMap_["isWorkflowExistWithName"] = &AiravataProcessor::process_isWorkflowExistWithName;
  }

  virtual ~AiravataProcessor() {}
};

class AiravataProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AiravataProcessorFactory(const ::boost::shared_ptr< AiravataIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< AiravataIfFactory > handlerFactory_;
};

class AiravataMultiface : virtual public AiravataIf {
 public:
  AiravataMultiface(std::vector<boost::shared_ptr<AiravataIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AiravataMultiface() {}
 protected:
  std::vector<boost::shared_ptr<AiravataIf> > ifaces_;
  AiravataMultiface() {}
  void add(boost::shared_ptr<AiravataIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getAPIVersion(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAPIVersion(_return);
    }
    ifaces_[i]->getAPIVersion(_return);
    return;
  }

  void addGateway(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const  ::apache::airavata::model::workspace::Gateway& gateway) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addGateway(_return, authzToken, gateway);
    }
    ifaces_[i]->addGateway(_return, authzToken, gateway);
    return;
  }

  void updateGateway(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const  ::apache::airavata::model::workspace::Gateway& updatedGateway) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateGateway(authzToken, gatewayId, updatedGateway);
    }
    ifaces_[i]->updateGateway(authzToken, gatewayId, updatedGateway);
  }

  void getGateway( ::apache::airavata::model::workspace::Gateway& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getGateway(_return, authzToken, gatewayId);
    }
    ifaces_[i]->getGateway(_return, authzToken, gatewayId);
    return;
  }

  bool deleteGateway(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteGateway(authzToken, gatewayId);
    }
    return ifaces_[i]->deleteGateway(authzToken, gatewayId);
  }

  void getAllGateways(std::vector< ::apache::airavata::model::workspace::Gateway> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllGateways(_return, authzToken);
    }
    ifaces_[i]->getAllGateways(_return, authzToken);
    return;
  }

  bool isGatewayExist(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isGatewayExist(authzToken, gatewayId);
    }
    return ifaces_[i]->isGatewayExist(authzToken, gatewayId);
  }

  void generateAndRegisterSSHKeys(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const std::string& userName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->generateAndRegisterSSHKeys(_return, authzToken, gatewayId, userName);
    }
    ifaces_[i]->generateAndRegisterSSHKeys(_return, authzToken, gatewayId, userName);
    return;
  }

  void getSSHPubKey(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataCredStoreToken, const std::string& gatewayId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSSHPubKey(_return, authzToken, airavataCredStoreToken, gatewayId);
    }
    ifaces_[i]->getSSHPubKey(_return, authzToken, airavataCredStoreToken, gatewayId);
    return;
  }

  void getAllUserSSHPubKeys(std::map<std::string, std::string> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& userName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllUserSSHPubKeys(_return, authzToken, userName);
    }
    ifaces_[i]->getAllUserSSHPubKeys(_return, authzToken, userName);
    return;
  }

  void createProject(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const  ::apache::airavata::model::workspace::Project& project) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createProject(_return, authzToken, gatewayId, project);
    }
    ifaces_[i]->createProject(_return, authzToken, gatewayId, project);
    return;
  }

  void updateProject(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& projectId, const  ::apache::airavata::model::workspace::Project& updatedProject) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateProject(authzToken, projectId, updatedProject);
    }
    ifaces_[i]->updateProject(authzToken, projectId, updatedProject);
  }

  void getProject( ::apache::airavata::model::workspace::Project& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& projectId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getProject(_return, authzToken, projectId);
    }
    ifaces_[i]->getProject(_return, authzToken, projectId);
    return;
  }

  bool deleteProject(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& projectId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteProject(authzToken, projectId);
    }
    return ifaces_[i]->deleteProject(authzToken, projectId);
  }

  void getUserProjects(std::vector< ::apache::airavata::model::workspace::Project> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const std::string& userName, const int32_t limit, const int32_t offset) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUserProjects(_return, authzToken, gatewayId, userName, limit, offset);
    }
    ifaces_[i]->getUserProjects(_return, authzToken, gatewayId, userName, limit, offset);
    return;
  }

  void searchProjectsByProjectName(std::vector< ::apache::airavata::model::workspace::Project> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const std::string& userName, const std::string& projectName, const int32_t limit, const int32_t offset) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->searchProjectsByProjectName(_return, authzToken, gatewayId, userName, projectName, limit, offset);
    }
    ifaces_[i]->searchProjectsByProjectName(_return, authzToken, gatewayId, userName, projectName, limit, offset);
    return;
  }

  void searchProjectsByProjectDesc(std::vector< ::apache::airavata::model::workspace::Project> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const std::string& userName, const std::string& description, const int32_t limit, const int32_t offset) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->searchProjectsByProjectDesc(_return, authzToken, gatewayId, userName, description, limit, offset);
    }
    ifaces_[i]->searchProjectsByProjectDesc(_return, authzToken, gatewayId, userName, description, limit, offset);
    return;
  }

  void searchExperimentsByName(std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const std::string& userName, const std::string& expName, const int32_t limit, const int32_t offset) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->searchExperimentsByName(_return, authzToken, gatewayId, userName, expName, limit, offset);
    }
    ifaces_[i]->searchExperimentsByName(_return, authzToken, gatewayId, userName, expName, limit, offset);
    return;
  }

  void searchExperimentsByDesc(std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const std::string& userName, const std::string& description, const int32_t limit, const int32_t offset) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->searchExperimentsByDesc(_return, authzToken, gatewayId, userName, description, limit, offset);
    }
    ifaces_[i]->searchExperimentsByDesc(_return, authzToken, gatewayId, userName, description, limit, offset);
    return;
  }

  void searchExperimentsByApplication(std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const std::string& userName, const std::string& applicationId, const int32_t limit, const int32_t offset) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->searchExperimentsByApplication(_return, authzToken, gatewayId, userName, applicationId, limit, offset);
    }
    ifaces_[i]->searchExperimentsByApplication(_return, authzToken, gatewayId, userName, applicationId, limit, offset);
    return;
  }

  void searchExperimentsByStatus(std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const std::string& userName, const  ::apache::airavata::model::status::ExperimentState::type experimentState, const int32_t limit, const int32_t offset) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->searchExperimentsByStatus(_return, authzToken, gatewayId, userName, experimentState, limit, offset);
    }
    ifaces_[i]->searchExperimentsByStatus(_return, authzToken, gatewayId, userName, experimentState, limit, offset);
    return;
  }

  void searchExperimentsByCreationTime(std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const std::string& userName, const int64_t fromTime, const int64_t toTime, const int32_t limit, const int32_t offset) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->searchExperimentsByCreationTime(_return, authzToken, gatewayId, userName, fromTime, toTime, limit, offset);
    }
    ifaces_[i]->searchExperimentsByCreationTime(_return, authzToken, gatewayId, userName, fromTime, toTime, limit, offset);
    return;
  }

  void searchExperiments(std::vector< ::apache::airavata::model::experiment::ExperimentSummaryModel> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const std::string& userName, const std::map< ::apache::airavata::model::experiment::ExperimentSearchFields::type, std::string> & filters, const int32_t limit, const int32_t offset) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->searchExperiments(_return, authzToken, gatewayId, userName, filters, limit, offset);
    }
    ifaces_[i]->searchExperiments(_return, authzToken, gatewayId, userName, filters, limit, offset);
    return;
  }

  void getExperimentStatistics( ::apache::airavata::model::experiment::ExperimentStatistics& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const int64_t fromTime, const int64_t toTime) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getExperimentStatistics(_return, authzToken, gatewayId, fromTime, toTime);
    }
    ifaces_[i]->getExperimentStatistics(_return, authzToken, gatewayId, fromTime, toTime);
    return;
  }

  void getExperimentsInProject(std::vector< ::apache::airavata::model::experiment::ExperimentModel> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& projectId, const int32_t limit, const int32_t offset) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getExperimentsInProject(_return, authzToken, projectId, limit, offset);
    }
    ifaces_[i]->getExperimentsInProject(_return, authzToken, projectId, limit, offset);
    return;
  }

  void getUserExperiments(std::vector< ::apache::airavata::model::experiment::ExperimentModel> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const std::string& userName, const int32_t limit, const int32_t offset) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUserExperiments(_return, authzToken, gatewayId, userName, limit, offset);
    }
    ifaces_[i]->getUserExperiments(_return, authzToken, gatewayId, userName, limit, offset);
    return;
  }

  void createExperiment(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const  ::apache::airavata::model::experiment::ExperimentModel& experiment) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createExperiment(_return, authzToken, gatewayId, experiment);
    }
    ifaces_[i]->createExperiment(_return, authzToken, gatewayId, experiment);
    return;
  }

  void getExperiment( ::apache::airavata::model::experiment::ExperimentModel& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getExperiment(_return, authzToken, airavataExperimentId);
    }
    ifaces_[i]->getExperiment(_return, authzToken, airavataExperimentId);
    return;
  }

  void updateExperiment(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId, const  ::apache::airavata::model::experiment::ExperimentModel& experiment) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateExperiment(authzToken, airavataExperimentId, experiment);
    }
    ifaces_[i]->updateExperiment(authzToken, airavataExperimentId, experiment);
  }

  void updateExperimentConfiguration(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId, const  ::apache::airavata::model::experiment::UserConfigurationDataModel& userConfiguration) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateExperimentConfiguration(authzToken, airavataExperimentId, userConfiguration);
    }
    ifaces_[i]->updateExperimentConfiguration(authzToken, airavataExperimentId, userConfiguration);
  }

  void updateResourceScheduleing(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId, const  ::apache::airavata::model::scheduling::ComputationalResourceSchedulingModel& resourceScheduling) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateResourceScheduleing(authzToken, airavataExperimentId, resourceScheduling);
    }
    ifaces_[i]->updateResourceScheduleing(authzToken, airavataExperimentId, resourceScheduling);
  }

  bool validateExperiment(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->validateExperiment(authzToken, airavataExperimentId);
    }
    return ifaces_[i]->validateExperiment(authzToken, airavataExperimentId);
  }

  void launchExperiment(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId, const std::string& airavataCredStoreToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->launchExperiment(authzToken, airavataExperimentId, airavataCredStoreToken);
    }
    ifaces_[i]->launchExperiment(authzToken, airavataExperimentId, airavataCredStoreToken);
  }

  void getExperimentStatus( ::apache::airavata::model::status::ExperimentStatus& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getExperimentStatus(_return, authzToken, airavataExperimentId);
    }
    ifaces_[i]->getExperimentStatus(_return, authzToken, airavataExperimentId);
    return;
  }

  void getExperimentOutputs(std::vector< ::apache::airavata::model::application::io::OutputDataObjectType> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getExperimentOutputs(_return, authzToken, airavataExperimentId);
    }
    ifaces_[i]->getExperimentOutputs(_return, authzToken, airavataExperimentId);
    return;
  }

  void getIntermediateOutputs(std::vector< ::apache::airavata::model::application::io::OutputDataObjectType> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getIntermediateOutputs(_return, authzToken, airavataExperimentId);
    }
    ifaces_[i]->getIntermediateOutputs(_return, authzToken, airavataExperimentId);
    return;
  }

  void getJobStatuses(std::map<std::string,  ::apache::airavata::model::status::JobStatus> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getJobStatuses(_return, authzToken, airavataExperimentId);
    }
    ifaces_[i]->getJobStatuses(_return, authzToken, airavataExperimentId);
    return;
  }

  void getJobDetails(std::vector< ::apache::airavata::model::job::JobModel> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getJobDetails(_return, authzToken, airavataExperimentId);
    }
    ifaces_[i]->getJobDetails(_return, authzToken, airavataExperimentId);
    return;
  }

  void cloneExperiment(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& existingExperimentID, const std::string& newExperimentName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cloneExperiment(_return, authzToken, existingExperimentID, newExperimentName);
    }
    ifaces_[i]->cloneExperiment(_return, authzToken, existingExperimentID, newExperimentName);
    return;
  }

  void terminateExperiment(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& airavataExperimentId, const std::string& tokenId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->terminateExperiment(authzToken, airavataExperimentId, tokenId);
    }
    ifaces_[i]->terminateExperiment(authzToken, airavataExperimentId, tokenId);
  }

  void registerApplicationModule(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule& applicationModule) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerApplicationModule(_return, authzToken, gatewayId, applicationModule);
    }
    ifaces_[i]->registerApplicationModule(_return, authzToken, gatewayId, applicationModule);
    return;
  }

  void getApplicationModule( ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appModuleId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getApplicationModule(_return, authzToken, appModuleId);
    }
    ifaces_[i]->getApplicationModule(_return, authzToken, appModuleId);
    return;
  }

  bool updateApplicationModule(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appModuleId, const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule& applicationModule) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateApplicationModule(authzToken, appModuleId, applicationModule);
    }
    return ifaces_[i]->updateApplicationModule(authzToken, appModuleId, applicationModule);
  }

  void getAllAppModules(std::vector< ::apache::airavata::model::appcatalog::appdeployment::ApplicationModule> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllAppModules(_return, authzToken, gatewayId);
    }
    ifaces_[i]->getAllAppModules(_return, authzToken, gatewayId);
    return;
  }

  bool deleteApplicationModule(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appModuleId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteApplicationModule(authzToken, appModuleId);
    }
    return ifaces_[i]->deleteApplicationModule(authzToken, appModuleId);
  }

  void registerApplicationDeployment(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription& applicationDeployment) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerApplicationDeployment(_return, authzToken, gatewayId, applicationDeployment);
    }
    ifaces_[i]->registerApplicationDeployment(_return, authzToken, gatewayId, applicationDeployment);
    return;
  }

  void getApplicationDeployment( ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appDeploymentId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getApplicationDeployment(_return, authzToken, appDeploymentId);
    }
    ifaces_[i]->getApplicationDeployment(_return, authzToken, appDeploymentId);
    return;
  }

  bool updateApplicationDeployment(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appDeploymentId, const  ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription& applicationDeployment) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateApplicationDeployment(authzToken, appDeploymentId, applicationDeployment);
    }
    return ifaces_[i]->updateApplicationDeployment(authzToken, appDeploymentId, applicationDeployment);
  }

  bool deleteApplicationDeployment(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appDeploymentId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteApplicationDeployment(authzToken, appDeploymentId);
    }
    return ifaces_[i]->deleteApplicationDeployment(authzToken, appDeploymentId);
  }

  void getAllApplicationDeployments(std::vector< ::apache::airavata::model::appcatalog::appdeployment::ApplicationDeploymentDescription> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllApplicationDeployments(_return, authzToken, gatewayId);
    }
    ifaces_[i]->getAllApplicationDeployments(_return, authzToken, gatewayId);
    return;
  }

  void getAppModuleDeployedResources(std::vector<std::string> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appModuleId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAppModuleDeployedResources(_return, authzToken, appModuleId);
    }
    ifaces_[i]->getAppModuleDeployedResources(_return, authzToken, appModuleId);
    return;
  }

  void registerApplicationInterface(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const  ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription& applicationInterface) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerApplicationInterface(_return, authzToken, gatewayId, applicationInterface);
    }
    ifaces_[i]->registerApplicationInterface(_return, authzToken, gatewayId, applicationInterface);
    return;
  }

  void getApplicationInterface( ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appInterfaceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getApplicationInterface(_return, authzToken, appInterfaceId);
    }
    ifaces_[i]->getApplicationInterface(_return, authzToken, appInterfaceId);
    return;
  }

  bool updateApplicationInterface(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appInterfaceId, const  ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription& applicationInterface) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateApplicationInterface(authzToken, appInterfaceId, applicationInterface);
    }
    return ifaces_[i]->updateApplicationInterface(authzToken, appInterfaceId, applicationInterface);
  }

  bool deleteApplicationInterface(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appInterfaceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteApplicationInterface(authzToken, appInterfaceId);
    }
    return ifaces_[i]->deleteApplicationInterface(authzToken, appInterfaceId);
  }

  void getAllApplicationInterfaceNames(std::map<std::string, std::string> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllApplicationInterfaceNames(_return, authzToken, gatewayId);
    }
    ifaces_[i]->getAllApplicationInterfaceNames(_return, authzToken, gatewayId);
    return;
  }

  void getAllApplicationInterfaces(std::vector< ::apache::airavata::model::appcatalog::appinterface::ApplicationInterfaceDescription> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllApplicationInterfaces(_return, authzToken, gatewayId);
    }
    ifaces_[i]->getAllApplicationInterfaces(_return, authzToken, gatewayId);
    return;
  }

  void getApplicationInputs(std::vector< ::apache::airavata::model::application::io::InputDataObjectType> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appInterfaceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getApplicationInputs(_return, authzToken, appInterfaceId);
    }
    ifaces_[i]->getApplicationInputs(_return, authzToken, appInterfaceId);
    return;
  }

  void getApplicationOutputs(std::vector< ::apache::airavata::model::application::io::OutputDataObjectType> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appInterfaceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getApplicationOutputs(_return, authzToken, appInterfaceId);
    }
    ifaces_[i]->getApplicationOutputs(_return, authzToken, appInterfaceId);
    return;
  }

  void getAvailableAppInterfaceComputeResources(std::map<std::string, std::string> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& appInterfaceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAvailableAppInterfaceComputeResources(_return, authzToken, appInterfaceId);
    }
    ifaces_[i]->getAvailableAppInterfaceComputeResources(_return, authzToken, appInterfaceId);
    return;
  }

  void registerComputeResource(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const  ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription& computeResourceDescription) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerComputeResource(_return, authzToken, computeResourceDescription);
    }
    ifaces_[i]->registerComputeResource(_return, authzToken, computeResourceDescription);
    return;
  }

  void getComputeResource( ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getComputeResource(_return, authzToken, computeResourceId);
    }
    ifaces_[i]->getComputeResource(_return, authzToken, computeResourceId);
    return;
  }

  void getAllComputeResourceNames(std::map<std::string, std::string> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllComputeResourceNames(_return, authzToken);
    }
    ifaces_[i]->getAllComputeResourceNames(_return, authzToken);
    return;
  }

  bool updateComputeResource(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const  ::apache::airavata::model::appcatalog::computeresource::ComputeResourceDescription& computeResourceDescription) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateComputeResource(authzToken, computeResourceId, computeResourceDescription);
    }
    return ifaces_[i]->updateComputeResource(authzToken, computeResourceId, computeResourceDescription);
  }

  bool deleteComputeResource(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteComputeResource(authzToken, computeResourceId);
    }
    return ifaces_[i]->deleteComputeResource(authzToken, computeResourceId);
  }

  void addLocalSubmissionDetails(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission& localSubmission) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addLocalSubmissionDetails(_return, authzToken, computeResourceId, priorityOrder, localSubmission);
    }
    ifaces_[i]->addLocalSubmissionDetails(_return, authzToken, computeResourceId, priorityOrder, localSubmission);
    return;
  }

  bool updateLocalSubmissionDetails(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& jobSubmissionInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission& localSubmission) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateLocalSubmissionDetails(authzToken, jobSubmissionInterfaceId, localSubmission);
    }
    return ifaces_[i]->updateLocalSubmissionDetails(authzToken, jobSubmissionInterfaceId, localSubmission);
  }

  void getLocalJobSubmission( ::apache::airavata::model::appcatalog::computeresource::LOCALSubmission& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& jobSubmissionId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getLocalJobSubmission(_return, authzToken, jobSubmissionId);
    }
    ifaces_[i]->getLocalJobSubmission(_return, authzToken, jobSubmissionId);
    return;
  }

  void addSSHJobSubmissionDetails(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission& sshJobSubmission) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addSSHJobSubmissionDetails(_return, authzToken, computeResourceId, priorityOrder, sshJobSubmission);
    }
    ifaces_[i]->addSSHJobSubmissionDetails(_return, authzToken, computeResourceId, priorityOrder, sshJobSubmission);
    return;
  }

  void addSSHForkJobSubmissionDetails(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission& sshJobSubmission) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addSSHForkJobSubmissionDetails(_return, authzToken, computeResourceId, priorityOrder, sshJobSubmission);
    }
    ifaces_[i]->addSSHForkJobSubmissionDetails(_return, authzToken, computeResourceId, priorityOrder, sshJobSubmission);
    return;
  }

  void getSSHJobSubmission( ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& jobSubmissionId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSSHJobSubmission(_return, authzToken, jobSubmissionId);
    }
    ifaces_[i]->getSSHJobSubmission(_return, authzToken, jobSubmissionId);
    return;
  }

  void addUNICOREJobSubmissionDetails(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission& unicoreJobSubmission) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addUNICOREJobSubmissionDetails(_return, authzToken, computeResourceId, priorityOrder, unicoreJobSubmission);
    }
    ifaces_[i]->addUNICOREJobSubmissionDetails(_return, authzToken, computeResourceId, priorityOrder, unicoreJobSubmission);
    return;
  }

  void getUnicoreJobSubmission( ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& jobSubmissionId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUnicoreJobSubmission(_return, authzToken, jobSubmissionId);
    }
    ifaces_[i]->getUnicoreJobSubmission(_return, authzToken, jobSubmissionId);
    return;
  }

  void addCloudJobSubmissionDetails(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission& cloudSubmission) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addCloudJobSubmissionDetails(_return, authzToken, computeResourceId, priorityOrder, cloudSubmission);
    }
    ifaces_[i]->addCloudJobSubmissionDetails(_return, authzToken, computeResourceId, priorityOrder, cloudSubmission);
    return;
  }

  void getCloudJobSubmission( ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& jobSubmissionId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCloudJobSubmission(_return, authzToken, jobSubmissionId);
    }
    ifaces_[i]->getCloudJobSubmission(_return, authzToken, jobSubmissionId);
    return;
  }

  bool updateSSHJobSubmissionDetails(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& jobSubmissionInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::SSHJobSubmission& sshJobSubmission) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateSSHJobSubmissionDetails(authzToken, jobSubmissionInterfaceId, sshJobSubmission);
    }
    return ifaces_[i]->updateSSHJobSubmissionDetails(authzToken, jobSubmissionInterfaceId, sshJobSubmission);
  }

  bool updateCloudJobSubmissionDetails(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& jobSubmissionInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::CloudJobSubmission& sshJobSubmission) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateCloudJobSubmissionDetails(authzToken, jobSubmissionInterfaceId, sshJobSubmission);
    }
    return ifaces_[i]->updateCloudJobSubmissionDetails(authzToken, jobSubmissionInterfaceId, sshJobSubmission);
  }

  bool updateUnicoreJobSubmissionDetails(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& jobSubmissionInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::UnicoreJobSubmission& unicoreJobSubmission) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateUnicoreJobSubmissionDetails(authzToken, jobSubmissionInterfaceId, unicoreJobSubmission);
    }
    return ifaces_[i]->updateUnicoreJobSubmissionDetails(authzToken, jobSubmissionInterfaceId, unicoreJobSubmission);
  }

  void addLocalDataMovementDetails(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement& localDataMovement) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addLocalDataMovementDetails(_return, authzToken, computeResourceId, priorityOrder, localDataMovement);
    }
    ifaces_[i]->addLocalDataMovementDetails(_return, authzToken, computeResourceId, priorityOrder, localDataMovement);
    return;
  }

  bool updateLocalDataMovementDetails(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& dataMovementInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement& localDataMovement) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateLocalDataMovementDetails(authzToken, dataMovementInterfaceId, localDataMovement);
    }
    return ifaces_[i]->updateLocalDataMovementDetails(authzToken, dataMovementInterfaceId, localDataMovement);
  }

  void getLocalDataMovement( ::apache::airavata::model::appcatalog::computeresource::LOCALDataMovement& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& dataMovementId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getLocalDataMovement(_return, authzToken, dataMovementId);
    }
    ifaces_[i]->getLocalDataMovement(_return, authzToken, dataMovementId);
    return;
  }

  void addSCPDataMovementDetails(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement& scpDataMovement) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addSCPDataMovementDetails(_return, authzToken, computeResourceId, priorityOrder, scpDataMovement);
    }
    ifaces_[i]->addSCPDataMovementDetails(_return, authzToken, computeResourceId, priorityOrder, scpDataMovement);
    return;
  }

  bool updateSCPDataMovementDetails(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& dataMovementInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement& scpDataMovement) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateSCPDataMovementDetails(authzToken, dataMovementInterfaceId, scpDataMovement);
    }
    return ifaces_[i]->updateSCPDataMovementDetails(authzToken, dataMovementInterfaceId, scpDataMovement);
  }

  void getSCPDataMovement( ::apache::airavata::model::appcatalog::computeresource::SCPDataMovement& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& dataMovementId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSCPDataMovement(_return, authzToken, dataMovementId);
    }
    ifaces_[i]->getSCPDataMovement(_return, authzToken, dataMovementId);
    return;
  }

  void addUnicoreDataMovementDetails(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement& unicoreDataMovement) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addUnicoreDataMovementDetails(_return, authzToken, computeResourceId, priorityOrder, unicoreDataMovement);
    }
    ifaces_[i]->addUnicoreDataMovementDetails(_return, authzToken, computeResourceId, priorityOrder, unicoreDataMovement);
    return;
  }

  bool updateUnicoreDataMovementDetails(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& dataMovementInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement& unicoreDataMovement) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateUnicoreDataMovementDetails(authzToken, dataMovementInterfaceId, unicoreDataMovement);
    }
    return ifaces_[i]->updateUnicoreDataMovementDetails(authzToken, dataMovementInterfaceId, unicoreDataMovement);
  }

  void getUnicoreDataMovement( ::apache::airavata::model::appcatalog::computeresource::UnicoreDataMovement& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& dataMovementId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUnicoreDataMovement(_return, authzToken, dataMovementId);
    }
    ifaces_[i]->getUnicoreDataMovement(_return, authzToken, dataMovementId);
    return;
  }

  void addGridFTPDataMovementDetails(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const int32_t priorityOrder, const  ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement& gridFTPDataMovement) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addGridFTPDataMovementDetails(_return, authzToken, computeResourceId, priorityOrder, gridFTPDataMovement);
    }
    ifaces_[i]->addGridFTPDataMovementDetails(_return, authzToken, computeResourceId, priorityOrder, gridFTPDataMovement);
    return;
  }

  bool updateGridFTPDataMovementDetails(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& dataMovementInterfaceId, const  ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement& gridFTPDataMovement) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateGridFTPDataMovementDetails(authzToken, dataMovementInterfaceId, gridFTPDataMovement);
    }
    return ifaces_[i]->updateGridFTPDataMovementDetails(authzToken, dataMovementInterfaceId, gridFTPDataMovement);
  }

  void getGridFTPDataMovement( ::apache::airavata::model::appcatalog::computeresource::GridFTPDataMovement& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& dataMovementId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getGridFTPDataMovement(_return, authzToken, dataMovementId);
    }
    ifaces_[i]->getGridFTPDataMovement(_return, authzToken, dataMovementId);
    return;
  }

  bool changeJobSubmissionPriority(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& jobSubmissionInterfaceId, const int32_t newPriorityOrder) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->changeJobSubmissionPriority(authzToken, jobSubmissionInterfaceId, newPriorityOrder);
    }
    return ifaces_[i]->changeJobSubmissionPriority(authzToken, jobSubmissionInterfaceId, newPriorityOrder);
  }

  bool changeDataMovementPriority(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& dataMovementInterfaceId, const int32_t newPriorityOrder) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->changeDataMovementPriority(authzToken, dataMovementInterfaceId, newPriorityOrder);
    }
    return ifaces_[i]->changeDataMovementPriority(authzToken, dataMovementInterfaceId, newPriorityOrder);
  }

  bool changeJobSubmissionPriorities(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::map<std::string, int32_t> & jobSubmissionPriorityMap) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->changeJobSubmissionPriorities(authzToken, jobSubmissionPriorityMap);
    }
    return ifaces_[i]->changeJobSubmissionPriorities(authzToken, jobSubmissionPriorityMap);
  }

  bool changeDataMovementPriorities(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::map<std::string, int32_t> & dataMovementPriorityMap) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->changeDataMovementPriorities(authzToken, dataMovementPriorityMap);
    }
    return ifaces_[i]->changeDataMovementPriorities(authzToken, dataMovementPriorityMap);
  }

  bool deleteJobSubmissionInterface(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const std::string& jobSubmissionInterfaceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteJobSubmissionInterface(authzToken, computeResourceId, jobSubmissionInterfaceId);
    }
    return ifaces_[i]->deleteJobSubmissionInterface(authzToken, computeResourceId, jobSubmissionInterfaceId);
  }

  bool deleteDataMovementInterface(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const std::string& dataMovementInterfaceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteDataMovementInterface(authzToken, computeResourceId, dataMovementInterfaceId);
    }
    return ifaces_[i]->deleteDataMovementInterface(authzToken, computeResourceId, dataMovementInterfaceId);
  }

  void registerResourceJobManager(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const  ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager& resourceJobManager) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerResourceJobManager(_return, authzToken, resourceJobManager);
    }
    ifaces_[i]->registerResourceJobManager(_return, authzToken, resourceJobManager);
    return;
  }

  bool updateResourceJobManager(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& resourceJobManagerId, const  ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager& updatedResourceJobManager) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateResourceJobManager(authzToken, resourceJobManagerId, updatedResourceJobManager);
    }
    return ifaces_[i]->updateResourceJobManager(authzToken, resourceJobManagerId, updatedResourceJobManager);
  }

  void getResourceJobManager( ::apache::airavata::model::appcatalog::computeresource::ResourceJobManager& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& resourceJobManagerId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getResourceJobManager(_return, authzToken, resourceJobManagerId);
    }
    ifaces_[i]->getResourceJobManager(_return, authzToken, resourceJobManagerId);
    return;
  }

  bool deleteResourceJobManager(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& resourceJobManagerId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteResourceJobManager(authzToken, resourceJobManagerId);
    }
    return ifaces_[i]->deleteResourceJobManager(authzToken, resourceJobManagerId);
  }

  bool deleteBatchQueue(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& computeResourceId, const std::string& queueName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteBatchQueue(authzToken, computeResourceId, queueName);
    }
    return ifaces_[i]->deleteBatchQueue(authzToken, computeResourceId, queueName);
  }

  void registerGatewayResourceProfile(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const  ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile& gatewayResourceProfile) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerGatewayResourceProfile(_return, authzToken, gatewayResourceProfile);
    }
    ifaces_[i]->registerGatewayResourceProfile(_return, authzToken, gatewayResourceProfile);
    return;
  }

  void getGatewayResourceProfile( ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getGatewayResourceProfile(_return, authzToken, gatewayID);
    }
    ifaces_[i]->getGatewayResourceProfile(_return, authzToken, gatewayID);
    return;
  }

  bool updateGatewayResourceProfile(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayID, const  ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile& gatewayResourceProfile) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateGatewayResourceProfile(authzToken, gatewayID, gatewayResourceProfile);
    }
    return ifaces_[i]->updateGatewayResourceProfile(authzToken, gatewayID, gatewayResourceProfile);
  }

  bool deleteGatewayResourceProfile(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteGatewayResourceProfile(authzToken, gatewayID);
    }
    return ifaces_[i]->deleteGatewayResourceProfile(authzToken, gatewayID);
  }

  bool addGatewayComputeResourcePreference(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayID, const std::string& computeResourceId, const  ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference& computeResourcePreference) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addGatewayComputeResourcePreference(authzToken, gatewayID, computeResourceId, computeResourcePreference);
    }
    return ifaces_[i]->addGatewayComputeResourcePreference(authzToken, gatewayID, computeResourceId, computeResourcePreference);
  }

  void getGatewayComputeResourcePreference( ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayID, const std::string& computeResourceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getGatewayComputeResourcePreference(_return, authzToken, gatewayID, computeResourceId);
    }
    ifaces_[i]->getGatewayComputeResourcePreference(_return, authzToken, gatewayID, computeResourceId);
    return;
  }

  void getAllGatewayComputeResourcePreferences(std::vector< ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllGatewayComputeResourcePreferences(_return, authzToken, gatewayID);
    }
    ifaces_[i]->getAllGatewayComputeResourcePreferences(_return, authzToken, gatewayID);
    return;
  }

  void getAllGatewayComputeResources(std::vector< ::apache::airavata::model::appcatalog::gatewayprofile::GatewayResourceProfile> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllGatewayComputeResources(_return, authzToken);
    }
    ifaces_[i]->getAllGatewayComputeResources(_return, authzToken);
    return;
  }

  bool updateGatewayComputeResourcePreference(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayID, const std::string& computeResourceId, const  ::apache::airavata::model::appcatalog::gatewayprofile::ComputeResourcePreference& computeResourcePreference) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateGatewayComputeResourcePreference(authzToken, gatewayID, computeResourceId, computeResourcePreference);
    }
    return ifaces_[i]->updateGatewayComputeResourcePreference(authzToken, gatewayID, computeResourceId, computeResourcePreference);
  }

  bool deleteGatewayComputeResourcePreference(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayID, const std::string& computeResourceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteGatewayComputeResourcePreference(authzToken, gatewayID, computeResourceId);
    }
    return ifaces_[i]->deleteGatewayComputeResourcePreference(authzToken, gatewayID, computeResourceId);
  }

  void getAllWorkflows(std::vector<std::string> & _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllWorkflows(_return, authzToken, gatewayId);
    }
    ifaces_[i]->getAllWorkflows(_return, authzToken, gatewayId);
    return;
  }

  void getWorkflow( ::Workflow& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& workflowTemplateId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getWorkflow(_return, authzToken, workflowTemplateId);
    }
    ifaces_[i]->getWorkflow(_return, authzToken, workflowTemplateId);
    return;
  }

  void deleteWorkflow(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& workflowTemplateId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteWorkflow(authzToken, workflowTemplateId);
    }
    ifaces_[i]->deleteWorkflow(authzToken, workflowTemplateId);
  }

  void registerWorkflow(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& gatewayId, const  ::Workflow& workflow) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerWorkflow(_return, authzToken, gatewayId, workflow);
    }
    ifaces_[i]->registerWorkflow(_return, authzToken, gatewayId, workflow);
    return;
  }

  void updateWorkflow(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& workflowTemplateId, const  ::Workflow& workflow) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateWorkflow(authzToken, workflowTemplateId, workflow);
    }
    ifaces_[i]->updateWorkflow(authzToken, workflowTemplateId, workflow);
  }

  void getWorkflowTemplateId(std::string& _return, const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& workflowName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getWorkflowTemplateId(_return, authzToken, workflowName);
    }
    ifaces_[i]->getWorkflowTemplateId(_return, authzToken, workflowName);
    return;
  }

  bool isWorkflowExistWithName(const  ::apache::airavata::model::security::AuthzToken& authzToken, const std::string& workflowName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isWorkflowExistWithName(authzToken, workflowName);
    }
    return ifaces_[i]->isWorkflowExistWithName(authzToken, workflowName);
  }

};

}}} // namespace

#endif
