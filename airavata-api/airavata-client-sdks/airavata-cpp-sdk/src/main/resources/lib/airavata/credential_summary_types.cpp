/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "credential_summary_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace apache { namespace airavata { namespace model { namespace appcatalog { namespace credentialsummary {


CredentialSummary::~CredentialSummary() throw() {
}


void CredentialSummary::__set_gatewayId(const std::string& val) {
  this->gatewayId = val;
}

void CredentialSummary::__set_username(const std::string& val) {
  this->username = val;
}

void CredentialSummary::__set_token(const std::string& val) {
  this->token = val;
}

void CredentialSummary::__set_publicKey(const std::string& val) {
  this->publicKey = val;
__isset.publicKey = true;
}

void CredentialSummary::__set_persistedTime(const int64_t val) {
  this->persistedTime = val;
__isset.persistedTime = true;
}

void CredentialSummary::__set_description(const std::string& val) {
  this->description = val;
__isset.description = true;
}

uint32_t CredentialSummary::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_gatewayId = false;
  bool isset_username = false;
  bool isset_token = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gatewayId);
          isset_gatewayId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->username);
          isset_username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->token);
          isset_token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->publicKey);
          this->__isset.publicKey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->persistedTime);
          this->__isset.persistedTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_gatewayId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_username)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_token)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CredentialSummary::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CredentialSummary");

  xfer += oprot->writeFieldBegin("gatewayId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->gatewayId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("username", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->username);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->token);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.publicKey) {
    xfer += oprot->writeFieldBegin("publicKey", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->publicKey);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.persistedTime) {
    xfer += oprot->writeFieldBegin("persistedTime", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->persistedTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.description) {
    xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->description);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CredentialSummary &a, CredentialSummary &b) {
  using ::std::swap;
  swap(a.gatewayId, b.gatewayId);
  swap(a.username, b.username);
  swap(a.token, b.token);
  swap(a.publicKey, b.publicKey);
  swap(a.persistedTime, b.persistedTime);
  swap(a.description, b.description);
  swap(a.__isset, b.__isset);
}

CredentialSummary::CredentialSummary(const CredentialSummary& other0) {
  gatewayId = other0.gatewayId;
  username = other0.username;
  token = other0.token;
  publicKey = other0.publicKey;
  persistedTime = other0.persistedTime;
  description = other0.description;
  __isset = other0.__isset;
}
CredentialSummary& CredentialSummary::operator=(const CredentialSummary& other1) {
  gatewayId = other1.gatewayId;
  username = other1.username;
  token = other1.token;
  publicKey = other1.publicKey;
  persistedTime = other1.persistedTime;
  description = other1.description;
  __isset = other1.__isset;
  return *this;
}
void CredentialSummary::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CredentialSummary(";
  out << "gatewayId=" << to_string(gatewayId);
  out << ", " << "username=" << to_string(username);
  out << ", " << "token=" << to_string(token);
  out << ", " << "publicKey="; (__isset.publicKey ? (out << to_string(publicKey)) : (out << "<null>"));
  out << ", " << "persistedTime="; (__isset.persistedTime ? (out << to_string(persistedTime)) : (out << "<null>"));
  out << ", " << "description="; (__isset.description ? (out << to_string(description)) : (out << "<null>"));
  out << ")";
}

}}}}} // namespace
