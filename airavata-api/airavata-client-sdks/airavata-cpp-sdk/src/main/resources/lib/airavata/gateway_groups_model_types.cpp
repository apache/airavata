/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "gateway_groups_model_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace apache { namespace airavata { namespace model { namespace appcatalog { namespace gatewaygroups {


GatewayGroups::~GatewayGroups() throw() {
}


void GatewayGroups::__set_gatewayId(const std::string& val) {
  this->gatewayId = val;
}

void GatewayGroups::__set_adminsGroupId(const std::string& val) {
  this->adminsGroupId = val;
}

void GatewayGroups::__set_readOnlyAdminsGroupId(const std::string& val) {
  this->readOnlyAdminsGroupId = val;
}

void GatewayGroups::__set_defaultGatewayUsersGroupId(const std::string& val) {
  this->defaultGatewayUsersGroupId = val;
}

uint32_t GatewayGroups::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_gatewayId = false;
  bool isset_adminsGroupId = false;
  bool isset_readOnlyAdminsGroupId = false;
  bool isset_defaultGatewayUsersGroupId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gatewayId);
          isset_gatewayId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->adminsGroupId);
          isset_adminsGroupId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->readOnlyAdminsGroupId);
          isset_readOnlyAdminsGroupId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->defaultGatewayUsersGroupId);
          isset_defaultGatewayUsersGroupId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_gatewayId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_adminsGroupId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_readOnlyAdminsGroupId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_defaultGatewayUsersGroupId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GatewayGroups::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GatewayGroups");

  xfer += oprot->writeFieldBegin("gatewayId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->gatewayId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("adminsGroupId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->adminsGroupId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("readOnlyAdminsGroupId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->readOnlyAdminsGroupId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("defaultGatewayUsersGroupId", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->defaultGatewayUsersGroupId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GatewayGroups &a, GatewayGroups &b) {
  using ::std::swap;
  swap(a.gatewayId, b.gatewayId);
  swap(a.adminsGroupId, b.adminsGroupId);
  swap(a.readOnlyAdminsGroupId, b.readOnlyAdminsGroupId);
  swap(a.defaultGatewayUsersGroupId, b.defaultGatewayUsersGroupId);
}

GatewayGroups::GatewayGroups(const GatewayGroups& other0) {
  gatewayId = other0.gatewayId;
  adminsGroupId = other0.adminsGroupId;
  readOnlyAdminsGroupId = other0.readOnlyAdminsGroupId;
  defaultGatewayUsersGroupId = other0.defaultGatewayUsersGroupId;
}
GatewayGroups& GatewayGroups::operator=(const GatewayGroups& other1) {
  gatewayId = other1.gatewayId;
  adminsGroupId = other1.adminsGroupId;
  readOnlyAdminsGroupId = other1.readOnlyAdminsGroupId;
  defaultGatewayUsersGroupId = other1.defaultGatewayUsersGroupId;
  return *this;
}
void GatewayGroups::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GatewayGroups(";
  out << "gatewayId=" << to_string(gatewayId);
  out << ", " << "adminsGroupId=" << to_string(adminsGroupId);
  out << ", " << "readOnlyAdminsGroupId=" << to_string(readOnlyAdminsGroupId);
  out << ", " << "defaultGatewayUsersGroupId=" << to_string(defaultGatewayUsersGroupId);
  out << ")";
}

}}}}} // namespace
