/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef scheduling_model_TYPES_H
#define scheduling_model_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace apache { namespace airavata { namespace model { namespace scheduling {

class ComputationalResourceSchedulingModel;

typedef struct _ComputationalResourceSchedulingModel__isset {
  _ComputationalResourceSchedulingModel__isset() : resourceHostId(false), totalCPUCount(false), nodeCount(false), numberOfThreads(false), queueName(false), wallTimeLimit(false), totalPhysicalMemory(false), chessisNumber(false), staticWorkingDir(false), overrideLoginUserName(false), overrideScratchLocation(false), overrideAllocationProjectNumber(false) {}
  bool resourceHostId :1;
  bool totalCPUCount :1;
  bool nodeCount :1;
  bool numberOfThreads :1;
  bool queueName :1;
  bool wallTimeLimit :1;
  bool totalPhysicalMemory :1;
  bool chessisNumber :1;
  bool staticWorkingDir :1;
  bool overrideLoginUserName :1;
  bool overrideScratchLocation :1;
  bool overrideAllocationProjectNumber :1;
} _ComputationalResourceSchedulingModel__isset;

class ComputationalResourceSchedulingModel {
 public:

  ComputationalResourceSchedulingModel(const ComputationalResourceSchedulingModel&);
  ComputationalResourceSchedulingModel& operator=(const ComputationalResourceSchedulingModel&);
  ComputationalResourceSchedulingModel() : resourceHostId(), totalCPUCount(0), nodeCount(0), numberOfThreads(0), queueName(), wallTimeLimit(0), totalPhysicalMemory(0), chessisNumber(), staticWorkingDir(), overrideLoginUserName(), overrideScratchLocation(), overrideAllocationProjectNumber() {
  }

  virtual ~ComputationalResourceSchedulingModel() throw();
  std::string resourceHostId;
  int32_t totalCPUCount;
  int32_t nodeCount;
  int32_t numberOfThreads;
  std::string queueName;
  int32_t wallTimeLimit;
  int32_t totalPhysicalMemory;
  std::string chessisNumber;
  std::string staticWorkingDir;
  std::string overrideLoginUserName;
  std::string overrideScratchLocation;
  std::string overrideAllocationProjectNumber;

  _ComputationalResourceSchedulingModel__isset __isset;

  void __set_resourceHostId(const std::string& val);

  void __set_totalCPUCount(const int32_t val);

  void __set_nodeCount(const int32_t val);

  void __set_numberOfThreads(const int32_t val);

  void __set_queueName(const std::string& val);

  void __set_wallTimeLimit(const int32_t val);

  void __set_totalPhysicalMemory(const int32_t val);

  void __set_chessisNumber(const std::string& val);

  void __set_staticWorkingDir(const std::string& val);

  void __set_overrideLoginUserName(const std::string& val);

  void __set_overrideScratchLocation(const std::string& val);

  void __set_overrideAllocationProjectNumber(const std::string& val);

  bool operator == (const ComputationalResourceSchedulingModel & rhs) const
  {
    if (__isset.resourceHostId != rhs.__isset.resourceHostId)
      return false;
    else if (__isset.resourceHostId && !(resourceHostId == rhs.resourceHostId))
      return false;
    if (__isset.totalCPUCount != rhs.__isset.totalCPUCount)
      return false;
    else if (__isset.totalCPUCount && !(totalCPUCount == rhs.totalCPUCount))
      return false;
    if (__isset.nodeCount != rhs.__isset.nodeCount)
      return false;
    else if (__isset.nodeCount && !(nodeCount == rhs.nodeCount))
      return false;
    if (__isset.numberOfThreads != rhs.__isset.numberOfThreads)
      return false;
    else if (__isset.numberOfThreads && !(numberOfThreads == rhs.numberOfThreads))
      return false;
    if (__isset.queueName != rhs.__isset.queueName)
      return false;
    else if (__isset.queueName && !(queueName == rhs.queueName))
      return false;
    if (__isset.wallTimeLimit != rhs.__isset.wallTimeLimit)
      return false;
    else if (__isset.wallTimeLimit && !(wallTimeLimit == rhs.wallTimeLimit))
      return false;
    if (__isset.totalPhysicalMemory != rhs.__isset.totalPhysicalMemory)
      return false;
    else if (__isset.totalPhysicalMemory && !(totalPhysicalMemory == rhs.totalPhysicalMemory))
      return false;
    if (__isset.chessisNumber != rhs.__isset.chessisNumber)
      return false;
    else if (__isset.chessisNumber && !(chessisNumber == rhs.chessisNumber))
      return false;
    if (__isset.staticWorkingDir != rhs.__isset.staticWorkingDir)
      return false;
    else if (__isset.staticWorkingDir && !(staticWorkingDir == rhs.staticWorkingDir))
      return false;
    if (__isset.overrideLoginUserName != rhs.__isset.overrideLoginUserName)
      return false;
    else if (__isset.overrideLoginUserName && !(overrideLoginUserName == rhs.overrideLoginUserName))
      return false;
    if (__isset.overrideScratchLocation != rhs.__isset.overrideScratchLocation)
      return false;
    else if (__isset.overrideScratchLocation && !(overrideScratchLocation == rhs.overrideScratchLocation))
      return false;
    if (__isset.overrideAllocationProjectNumber != rhs.__isset.overrideAllocationProjectNumber)
      return false;
    else if (__isset.overrideAllocationProjectNumber && !(overrideAllocationProjectNumber == rhs.overrideAllocationProjectNumber))
      return false;
    return true;
  }
  bool operator != (const ComputationalResourceSchedulingModel &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ComputationalResourceSchedulingModel & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ComputationalResourceSchedulingModel &a, ComputationalResourceSchedulingModel &b);

inline std::ostream& operator<<(std::ostream& out, const ComputationalResourceSchedulingModel& obj)
{
  obj.printTo(out);
  return out;
}

}}}} // namespace

#endif
