/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef messagingEvents_TYPES_H
#define messagingEvents_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "experimentModel_types.h"


namespace apache { namespace airavata { namespace model { namespace messaging { namespace event {


class ExperimentStatusChangeEvent {
 public:

  static const char* ascii_fingerprint; // = "19B5240589E680301A7E32DF3971EFBE";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

  ExperimentStatusChangeEvent() : state(( ::apache::airavata::model::workspace::experiment::ExperimentState::type)0), experimentId() {
  }

  virtual ~ExperimentStatusChangeEvent() throw() {}

   ::apache::airavata::model::workspace::experiment::ExperimentState::type state;
  std::string experimentId;

  void __set_state(const  ::apache::airavata::model::workspace::experiment::ExperimentState::type val) {
    state = val;
  }

  void __set_experimentId(const std::string& val) {
    experimentId = val;
  }

  bool operator == (const ExperimentStatusChangeEvent & rhs) const
  {
    if (!(state == rhs.state))
      return false;
    if (!(experimentId == rhs.experimentId))
      return false;
    return true;
  }
  bool operator != (const ExperimentStatusChangeEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExperimentStatusChangeEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ExperimentStatusChangeEvent &a, ExperimentStatusChangeEvent &b);


class WorkflowIdentity {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  WorkflowIdentity() : workflowNodeId(), experimentId() {
  }

  virtual ~WorkflowIdentity() throw() {}

  std::string workflowNodeId;
  std::string experimentId;

  void __set_workflowNodeId(const std::string& val) {
    workflowNodeId = val;
  }

  void __set_experimentId(const std::string& val) {
    experimentId = val;
  }

  bool operator == (const WorkflowIdentity & rhs) const
  {
    if (!(workflowNodeId == rhs.workflowNodeId))
      return false;
    if (!(experimentId == rhs.experimentId))
      return false;
    return true;
  }
  bool operator != (const WorkflowIdentity &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WorkflowIdentity & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(WorkflowIdentity &a, WorkflowIdentity &b);


class WorkflowNodeStatusChangeEvent {
 public:

  static const char* ascii_fingerprint; // = "E9096211D03C8F19468314A49FB23CF0";
  static const uint8_t binary_fingerprint[16]; // = {0xE9,0x09,0x62,0x11,0xD0,0x3C,0x8F,0x19,0x46,0x83,0x14,0xA4,0x9F,0xB2,0x3C,0xF0};

  WorkflowNodeStatusChangeEvent() : state(( ::apache::airavata::model::workspace::experiment::WorkflowNodeState::type)0) {
  }

  virtual ~WorkflowNodeStatusChangeEvent() throw() {}

   ::apache::airavata::model::workspace::experiment::WorkflowNodeState::type state;
  WorkflowIdentity workflowNodeIdentity;

  void __set_state(const  ::apache::airavata::model::workspace::experiment::WorkflowNodeState::type val) {
    state = val;
  }

  void __set_workflowNodeIdentity(const WorkflowIdentity& val) {
    workflowNodeIdentity = val;
  }

  bool operator == (const WorkflowNodeStatusChangeEvent & rhs) const
  {
    if (!(state == rhs.state))
      return false;
    if (!(workflowNodeIdentity == rhs.workflowNodeIdentity))
      return false;
    return true;
  }
  bool operator != (const WorkflowNodeStatusChangeEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WorkflowNodeStatusChangeEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(WorkflowNodeStatusChangeEvent &a, WorkflowNodeStatusChangeEvent &b);


class TaskIdentity {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

  TaskIdentity() : taskId(), workflowNodeId(), experimentId() {
  }

  virtual ~TaskIdentity() throw() {}

  std::string taskId;
  std::string workflowNodeId;
  std::string experimentId;

  void __set_taskId(const std::string& val) {
    taskId = val;
  }

  void __set_workflowNodeId(const std::string& val) {
    workflowNodeId = val;
  }

  void __set_experimentId(const std::string& val) {
    experimentId = val;
  }

  bool operator == (const TaskIdentity & rhs) const
  {
    if (!(taskId == rhs.taskId))
      return false;
    if (!(workflowNodeId == rhs.workflowNodeId))
      return false;
    if (!(experimentId == rhs.experimentId))
      return false;
    return true;
  }
  bool operator != (const TaskIdentity &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TaskIdentity & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TaskIdentity &a, TaskIdentity &b);


class TaskStatusChangeEvent {
 public:

  static const char* ascii_fingerprint; // = "9686679C94D43D75F2B35A0BED2E4003";
  static const uint8_t binary_fingerprint[16]; // = {0x96,0x86,0x67,0x9C,0x94,0xD4,0x3D,0x75,0xF2,0xB3,0x5A,0x0B,0xED,0x2E,0x40,0x03};

  TaskStatusChangeEvent() : state(( ::apache::airavata::model::workspace::experiment::TaskState::type)0) {
  }

  virtual ~TaskStatusChangeEvent() throw() {}

   ::apache::airavata::model::workspace::experiment::TaskState::type state;
  TaskIdentity taskIdentity;

  void __set_state(const  ::apache::airavata::model::workspace::experiment::TaskState::type val) {
    state = val;
  }

  void __set_taskIdentity(const TaskIdentity& val) {
    taskIdentity = val;
  }

  bool operator == (const TaskStatusChangeEvent & rhs) const
  {
    if (!(state == rhs.state))
      return false;
    if (!(taskIdentity == rhs.taskIdentity))
      return false;
    return true;
  }
  bool operator != (const TaskStatusChangeEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TaskStatusChangeEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TaskStatusChangeEvent &a, TaskStatusChangeEvent &b);


class JobIdentity {
 public:

  static const char* ascii_fingerprint; // = "C93D890311F28844166CF6E571EB3AC2";
  static const uint8_t binary_fingerprint[16]; // = {0xC9,0x3D,0x89,0x03,0x11,0xF2,0x88,0x44,0x16,0x6C,0xF6,0xE5,0x71,0xEB,0x3A,0xC2};

  JobIdentity() : jobId(), taskId(), workflowNodeId(), experimentId() {
  }

  virtual ~JobIdentity() throw() {}

  std::string jobId;
  std::string taskId;
  std::string workflowNodeId;
  std::string experimentId;

  void __set_jobId(const std::string& val) {
    jobId = val;
  }

  void __set_taskId(const std::string& val) {
    taskId = val;
  }

  void __set_workflowNodeId(const std::string& val) {
    workflowNodeId = val;
  }

  void __set_experimentId(const std::string& val) {
    experimentId = val;
  }

  bool operator == (const JobIdentity & rhs) const
  {
    if (!(jobId == rhs.jobId))
      return false;
    if (!(taskId == rhs.taskId))
      return false;
    if (!(workflowNodeId == rhs.workflowNodeId))
      return false;
    if (!(experimentId == rhs.experimentId))
      return false;
    return true;
  }
  bool operator != (const JobIdentity &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const JobIdentity & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(JobIdentity &a, JobIdentity &b);

typedef struct _JobMonitor__isset {
  _JobMonitor__isset() : username(false), jobStartedTime(false), lastMonitoredTime(false), hostId(false), parameters(false), jobName(false), failedCount(true) {}
  bool username;
  bool jobStartedTime;
  bool lastMonitoredTime;
  bool hostId;
  bool parameters;
  bool jobName;
  bool failedCount;
} _JobMonitor__isset;

class JobMonitor {
 public:

  static const char* ascii_fingerprint; // = "D0036787E2FC651CBEB945D6D6CBBEB8";
  static const uint8_t binary_fingerprint[16]; // = {0xD0,0x03,0x67,0x87,0xE2,0xFC,0x65,0x1C,0xBE,0xB9,0x45,0xD6,0xD6,0xCB,0xBE,0xB8};

  JobMonitor() : username(), jobStartedTime(0), lastMonitoredTime(0), hostId(), jobName(), failedCount(0) {
  }

  virtual ~JobMonitor() throw() {}

  std::string username;
  int64_t jobStartedTime;
  int64_t lastMonitoredTime;
  std::string hostId;
  std::map<std::string, std::string>  parameters;
  std::string jobName;
  int32_t failedCount;

  _JobMonitor__isset __isset;

  void __set_username(const std::string& val) {
    username = val;
    __isset.username = true;
  }

  void __set_jobStartedTime(const int64_t val) {
    jobStartedTime = val;
    __isset.jobStartedTime = true;
  }

  void __set_lastMonitoredTime(const int64_t val) {
    lastMonitoredTime = val;
    __isset.lastMonitoredTime = true;
  }

  void __set_hostId(const std::string& val) {
    hostId = val;
    __isset.hostId = true;
  }

  void __set_parameters(const std::map<std::string, std::string> & val) {
    parameters = val;
    __isset.parameters = true;
  }

  void __set_jobName(const std::string& val) {
    jobName = val;
    __isset.jobName = true;
  }

  void __set_failedCount(const int32_t val) {
    failedCount = val;
    __isset.failedCount = true;
  }

  bool operator == (const JobMonitor & rhs) const
  {
    if (__isset.username != rhs.__isset.username)
      return false;
    else if (__isset.username && !(username == rhs.username))
      return false;
    if (__isset.jobStartedTime != rhs.__isset.jobStartedTime)
      return false;
    else if (__isset.jobStartedTime && !(jobStartedTime == rhs.jobStartedTime))
      return false;
    if (__isset.lastMonitoredTime != rhs.__isset.lastMonitoredTime)
      return false;
    else if (__isset.lastMonitoredTime && !(lastMonitoredTime == rhs.lastMonitoredTime))
      return false;
    if (__isset.hostId != rhs.__isset.hostId)
      return false;
    else if (__isset.hostId && !(hostId == rhs.hostId))
      return false;
    if (__isset.parameters != rhs.__isset.parameters)
      return false;
    else if (__isset.parameters && !(parameters == rhs.parameters))
      return false;
    if (__isset.jobName != rhs.__isset.jobName)
      return false;
    else if (__isset.jobName && !(jobName == rhs.jobName))
      return false;
    if (__isset.failedCount != rhs.__isset.failedCount)
      return false;
    else if (__isset.failedCount && !(failedCount == rhs.failedCount))
      return false;
    return true;
  }
  bool operator != (const JobMonitor &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const JobMonitor & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(JobMonitor &a, JobMonitor &b);


class JobStatusChangeEvent {
 public:

  static const char* ascii_fingerprint; // = "A4467EF21DF0026B864BF2B95C34A774";
  static const uint8_t binary_fingerprint[16]; // = {0xA4,0x46,0x7E,0xF2,0x1D,0xF0,0x02,0x6B,0x86,0x4B,0xF2,0xB9,0x5C,0x34,0xA7,0x74};

  JobStatusChangeEvent() : state(( ::apache::airavata::model::workspace::experiment::JobState::type)0) {
  }

  virtual ~JobStatusChangeEvent() throw() {}

   ::apache::airavata::model::workspace::experiment::JobState::type state;
  JobIdentity jobIdentity;
  JobMonitor jobMonitor;

  void __set_state(const  ::apache::airavata::model::workspace::experiment::JobState::type val) {
    state = val;
  }

  void __set_jobIdentity(const JobIdentity& val) {
    jobIdentity = val;
  }

  void __set_jobMonitor(const JobMonitor& val) {
    jobMonitor = val;
  }

  bool operator == (const JobStatusChangeEvent & rhs) const
  {
    if (!(state == rhs.state))
      return false;
    if (!(jobIdentity == rhs.jobIdentity))
      return false;
    if (!(jobMonitor == rhs.jobMonitor))
      return false;
    return true;
  }
  bool operator != (const JobStatusChangeEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const JobStatusChangeEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(JobStatusChangeEvent &a, JobStatusChangeEvent &b);

}}}}} // namespace

#endif
