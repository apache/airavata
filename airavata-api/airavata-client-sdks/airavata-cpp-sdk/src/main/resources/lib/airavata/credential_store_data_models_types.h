/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef credential_store_data_models_TYPES_H
#define credential_store_data_models_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




struct CredentialOwnerType {
  enum type {
    GATEWAY = 0,
    USER = 1
  };
};

extern const std::map<int, const char*> _CredentialOwnerType_VALUES_TO_NAMES;

struct SummaryType {
  enum type {
    SSH = 0,
    PASSWD = 1,
    CERT = 2
  };
};

extern const std::map<int, const char*> _SummaryType_VALUES_TO_NAMES;

class SSHCredential;

class CredentialSummary;

class CommunityUser;

class CertificateCredential;

class PasswordCredential;

typedef struct _SSHCredential__isset {
  _SSHCredential__isset() : passphrase(false), publicKey(false), privateKey(false), persistedTime(false), token(false), description(false), credentialOwnerType(true) {}
  bool passphrase :1;
  bool publicKey :1;
  bool privateKey :1;
  bool persistedTime :1;
  bool token :1;
  bool description :1;
  bool credentialOwnerType :1;
} _SSHCredential__isset;

class SSHCredential {
 public:

  SSHCredential(const SSHCredential&);
  SSHCredential& operator=(const SSHCredential&);
  SSHCredential() : gatewayId(), username(), passphrase(), publicKey(), privateKey(), persistedTime(0), token(), description(), credentialOwnerType((CredentialOwnerType::type)0) {
    credentialOwnerType = (CredentialOwnerType::type)0;

  }

  virtual ~SSHCredential() throw();
  std::string gatewayId;
  std::string username;
  std::string passphrase;
  std::string publicKey;
  std::string privateKey;
  int64_t persistedTime;
  std::string token;
  std::string description;
  CredentialOwnerType::type credentialOwnerType;

  _SSHCredential__isset __isset;

  void __set_gatewayId(const std::string& val);

  void __set_username(const std::string& val);

  void __set_passphrase(const std::string& val);

  void __set_publicKey(const std::string& val);

  void __set_privateKey(const std::string& val);

  void __set_persistedTime(const int64_t val);

  void __set_token(const std::string& val);

  void __set_description(const std::string& val);

  void __set_credentialOwnerType(const CredentialOwnerType::type val);

  bool operator == (const SSHCredential & rhs) const
  {
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(username == rhs.username))
      return false;
    if (__isset.passphrase != rhs.__isset.passphrase)
      return false;
    else if (__isset.passphrase && !(passphrase == rhs.passphrase))
      return false;
    if (__isset.publicKey != rhs.__isset.publicKey)
      return false;
    else if (__isset.publicKey && !(publicKey == rhs.publicKey))
      return false;
    if (__isset.privateKey != rhs.__isset.privateKey)
      return false;
    else if (__isset.privateKey && !(privateKey == rhs.privateKey))
      return false;
    if (__isset.persistedTime != rhs.__isset.persistedTime)
      return false;
    else if (__isset.persistedTime && !(persistedTime == rhs.persistedTime))
      return false;
    if (__isset.token != rhs.__isset.token)
      return false;
    else if (__isset.token && !(token == rhs.token))
      return false;
    if (__isset.description != rhs.__isset.description)
      return false;
    else if (__isset.description && !(description == rhs.description))
      return false;
    if (__isset.credentialOwnerType != rhs.__isset.credentialOwnerType)
      return false;
    else if (__isset.credentialOwnerType && !(credentialOwnerType == rhs.credentialOwnerType))
      return false;
    return true;
  }
  bool operator != (const SSHCredential &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SSHCredential & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SSHCredential &a, SSHCredential &b);

inline std::ostream& operator<<(std::ostream& out, const SSHCredential& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CredentialSummary__isset {
  _CredentialSummary__isset() : publicKey(false), persistedTime(false), description(false) {}
  bool publicKey :1;
  bool persistedTime :1;
  bool description :1;
} _CredentialSummary__isset;

class CredentialSummary {
 public:

  CredentialSummary(const CredentialSummary&);
  CredentialSummary& operator=(const CredentialSummary&);
  CredentialSummary() : type((SummaryType::type)0), gatewayId(), username(), publicKey(), persistedTime(0), token(), description() {
  }

  virtual ~CredentialSummary() throw();
  SummaryType::type type;
  std::string gatewayId;
  std::string username;
  std::string publicKey;
  int64_t persistedTime;
  std::string token;
  std::string description;

  _CredentialSummary__isset __isset;

  void __set_type(const SummaryType::type val);

  void __set_gatewayId(const std::string& val);

  void __set_username(const std::string& val);

  void __set_publicKey(const std::string& val);

  void __set_persistedTime(const int64_t val);

  void __set_token(const std::string& val);

  void __set_description(const std::string& val);

  bool operator == (const CredentialSummary & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(username == rhs.username))
      return false;
    if (__isset.publicKey != rhs.__isset.publicKey)
      return false;
    else if (__isset.publicKey && !(publicKey == rhs.publicKey))
      return false;
    if (__isset.persistedTime != rhs.__isset.persistedTime)
      return false;
    else if (__isset.persistedTime && !(persistedTime == rhs.persistedTime))
      return false;
    if (!(token == rhs.token))
      return false;
    if (__isset.description != rhs.__isset.description)
      return false;
    else if (__isset.description && !(description == rhs.description))
      return false;
    return true;
  }
  bool operator != (const CredentialSummary &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CredentialSummary & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CredentialSummary &a, CredentialSummary &b);

inline std::ostream& operator<<(std::ostream& out, const CredentialSummary& obj)
{
  obj.printTo(out);
  return out;
}


class CommunityUser {
 public:

  CommunityUser(const CommunityUser&);
  CommunityUser& operator=(const CommunityUser&);
  CommunityUser() : gatewayName(), username(), userEmail() {
  }

  virtual ~CommunityUser() throw();
  std::string gatewayName;
  std::string username;
  std::string userEmail;

  void __set_gatewayName(const std::string& val);

  void __set_username(const std::string& val);

  void __set_userEmail(const std::string& val);

  bool operator == (const CommunityUser & rhs) const
  {
    if (!(gatewayName == rhs.gatewayName))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(userEmail == rhs.userEmail))
      return false;
    return true;
  }
  bool operator != (const CommunityUser &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommunityUser & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CommunityUser &a, CommunityUser &b);

inline std::ostream& operator<<(std::ostream& out, const CommunityUser& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CertificateCredential__isset {
  _CertificateCredential__isset() : notAfter(false), privateKey(false), lifeTime(false), notBefore(false), persistedTime(false), token(false) {}
  bool notAfter :1;
  bool privateKey :1;
  bool lifeTime :1;
  bool notBefore :1;
  bool persistedTime :1;
  bool token :1;
} _CertificateCredential__isset;

class CertificateCredential {
 public:

  CertificateCredential(const CertificateCredential&);
  CertificateCredential& operator=(const CertificateCredential&);
  CertificateCredential() : x509Cert(), notAfter(), privateKey(), lifeTime(0), notBefore(), persistedTime(0), token() {
  }

  virtual ~CertificateCredential() throw();
  CommunityUser communityUser;
  std::string x509Cert;
  std::string notAfter;
  std::string privateKey;
  int64_t lifeTime;
  std::string notBefore;
  int64_t persistedTime;
  std::string token;

  _CertificateCredential__isset __isset;

  void __set_communityUser(const CommunityUser& val);

  void __set_x509Cert(const std::string& val);

  void __set_notAfter(const std::string& val);

  void __set_privateKey(const std::string& val);

  void __set_lifeTime(const int64_t val);

  void __set_notBefore(const std::string& val);

  void __set_persistedTime(const int64_t val);

  void __set_token(const std::string& val);

  bool operator == (const CertificateCredential & rhs) const
  {
    if (!(communityUser == rhs.communityUser))
      return false;
    if (!(x509Cert == rhs.x509Cert))
      return false;
    if (__isset.notAfter != rhs.__isset.notAfter)
      return false;
    else if (__isset.notAfter && !(notAfter == rhs.notAfter))
      return false;
    if (__isset.privateKey != rhs.__isset.privateKey)
      return false;
    else if (__isset.privateKey && !(privateKey == rhs.privateKey))
      return false;
    if (__isset.lifeTime != rhs.__isset.lifeTime)
      return false;
    else if (__isset.lifeTime && !(lifeTime == rhs.lifeTime))
      return false;
    if (__isset.notBefore != rhs.__isset.notBefore)
      return false;
    else if (__isset.notBefore && !(notBefore == rhs.notBefore))
      return false;
    if (__isset.persistedTime != rhs.__isset.persistedTime)
      return false;
    else if (__isset.persistedTime && !(persistedTime == rhs.persistedTime))
      return false;
    if (__isset.token != rhs.__isset.token)
      return false;
    else if (__isset.token && !(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const CertificateCredential &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CertificateCredential & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CertificateCredential &a, CertificateCredential &b);

inline std::ostream& operator<<(std::ostream& out, const CertificateCredential& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _PasswordCredential__isset {
  _PasswordCredential__isset() : description(false), persistedTime(false), token(false) {}
  bool description :1;
  bool persistedTime :1;
  bool token :1;
} _PasswordCredential__isset;

class PasswordCredential {
 public:

  PasswordCredential(const PasswordCredential&);
  PasswordCredential& operator=(const PasswordCredential&);
  PasswordCredential() : gatewayId(), portalUserName(), loginUserName(), password(), description(), persistedTime(0), token() {
  }

  virtual ~PasswordCredential() throw();
  std::string gatewayId;
  std::string portalUserName;
  std::string loginUserName;
  std::string password;
  std::string description;
  int64_t persistedTime;
  std::string token;

  _PasswordCredential__isset __isset;

  void __set_gatewayId(const std::string& val);

  void __set_portalUserName(const std::string& val);

  void __set_loginUserName(const std::string& val);

  void __set_password(const std::string& val);

  void __set_description(const std::string& val);

  void __set_persistedTime(const int64_t val);

  void __set_token(const std::string& val);

  bool operator == (const PasswordCredential & rhs) const
  {
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(portalUserName == rhs.portalUserName))
      return false;
    if (!(loginUserName == rhs.loginUserName))
      return false;
    if (!(password == rhs.password))
      return false;
    if (__isset.description != rhs.__isset.description)
      return false;
    else if (__isset.description && !(description == rhs.description))
      return false;
    if (__isset.persistedTime != rhs.__isset.persistedTime)
      return false;
    else if (__isset.persistedTime && !(persistedTime == rhs.persistedTime))
      return false;
    if (__isset.token != rhs.__isset.token)
      return false;
    else if (__isset.token && !(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const PasswordCredential &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PasswordCredential & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PasswordCredential &a, PasswordCredential &b);

inline std::ostream& operator<<(std::ostream& out, const PasswordCredential& obj)
{
  obj.printTo(out);
  return out;
}



#endif
