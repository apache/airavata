/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "application_interface_model_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace apache { namespace airavata { namespace model { namespace appcatalog { namespace appinterface {


ApplicationInterfaceDescription::~ApplicationInterfaceDescription() throw() {
}


void ApplicationInterfaceDescription::__set_applicationInterfaceId(const std::string& val) {
  this->applicationInterfaceId = val;
}

void ApplicationInterfaceDescription::__set_applicationName(const std::string& val) {
  this->applicationName = val;
}

void ApplicationInterfaceDescription::__set_applicationDescription(const std::string& val) {
  this->applicationDescription = val;
__isset.applicationDescription = true;
}

void ApplicationInterfaceDescription::__set_applicationModules(const std::vector<std::string> & val) {
  this->applicationModules = val;
__isset.applicationModules = true;
}

void ApplicationInterfaceDescription::__set_applicationInputs(const std::vector< ::apache::airavata::model::application::io::InputDataObjectType> & val) {
  this->applicationInputs = val;
__isset.applicationInputs = true;
}

void ApplicationInterfaceDescription::__set_applicationOutputs(const std::vector< ::apache::airavata::model::application::io::OutputDataObjectType> & val) {
  this->applicationOutputs = val;
__isset.applicationOutputs = true;
}

void ApplicationInterfaceDescription::__set_archiveWorkingDirectory(const bool val) {
  this->archiveWorkingDirectory = val;
__isset.archiveWorkingDirectory = true;
}

void ApplicationInterfaceDescription::__set_hasOptionalFileInputs(const bool val) {
  this->hasOptionalFileInputs = val;
__isset.hasOptionalFileInputs = true;
}

uint32_t ApplicationInterfaceDescription::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_applicationInterfaceId = false;
  bool isset_applicationName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationInterfaceId);
          isset_applicationInterfaceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationName);
          isset_applicationName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationDescription);
          this->__isset.applicationDescription = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->applicationModules.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->applicationModules.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readString(this->applicationModules[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.applicationModules = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->applicationInputs.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            xfer += iprot->readListBegin(_etype8, _size5);
            this->applicationInputs.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += this->applicationInputs[_i9].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.applicationInputs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->applicationOutputs.clear();
            uint32_t _size10;
            ::apache::thrift::protocol::TType _etype13;
            xfer += iprot->readListBegin(_etype13, _size10);
            this->applicationOutputs.resize(_size10);
            uint32_t _i14;
            for (_i14 = 0; _i14 < _size10; ++_i14)
            {
              xfer += this->applicationOutputs[_i14].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.applicationOutputs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->archiveWorkingDirectory);
          this->__isset.archiveWorkingDirectory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hasOptionalFileInputs);
          this->__isset.hasOptionalFileInputs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_applicationInterfaceId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_applicationName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ApplicationInterfaceDescription::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ApplicationInterfaceDescription");

  xfer += oprot->writeFieldBegin("applicationInterfaceId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->applicationInterfaceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->applicationName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.applicationDescription) {
    xfer += oprot->writeFieldBegin("applicationDescription", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->applicationDescription);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.applicationModules) {
    xfer += oprot->writeFieldBegin("applicationModules", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->applicationModules.size()));
      std::vector<std::string> ::const_iterator _iter15;
      for (_iter15 = this->applicationModules.begin(); _iter15 != this->applicationModules.end(); ++_iter15)
      {
        xfer += oprot->writeString((*_iter15));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.applicationInputs) {
    xfer += oprot->writeFieldBegin("applicationInputs", ::apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->applicationInputs.size()));
      std::vector< ::apache::airavata::model::application::io::InputDataObjectType> ::const_iterator _iter16;
      for (_iter16 = this->applicationInputs.begin(); _iter16 != this->applicationInputs.end(); ++_iter16)
      {
        xfer += (*_iter16).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.applicationOutputs) {
    xfer += oprot->writeFieldBegin("applicationOutputs", ::apache::thrift::protocol::T_LIST, 6);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->applicationOutputs.size()));
      std::vector< ::apache::airavata::model::application::io::OutputDataObjectType> ::const_iterator _iter17;
      for (_iter17 = this->applicationOutputs.begin(); _iter17 != this->applicationOutputs.end(); ++_iter17)
      {
        xfer += (*_iter17).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.archiveWorkingDirectory) {
    xfer += oprot->writeFieldBegin("archiveWorkingDirectory", ::apache::thrift::protocol::T_BOOL, 7);
    xfer += oprot->writeBool(this->archiveWorkingDirectory);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.hasOptionalFileInputs) {
    xfer += oprot->writeFieldBegin("hasOptionalFileInputs", ::apache::thrift::protocol::T_BOOL, 8);
    xfer += oprot->writeBool(this->hasOptionalFileInputs);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ApplicationInterfaceDescription &a, ApplicationInterfaceDescription &b) {
  using ::std::swap;
  swap(a.applicationInterfaceId, b.applicationInterfaceId);
  swap(a.applicationName, b.applicationName);
  swap(a.applicationDescription, b.applicationDescription);
  swap(a.applicationModules, b.applicationModules);
  swap(a.applicationInputs, b.applicationInputs);
  swap(a.applicationOutputs, b.applicationOutputs);
  swap(a.archiveWorkingDirectory, b.archiveWorkingDirectory);
  swap(a.hasOptionalFileInputs, b.hasOptionalFileInputs);
  swap(a.__isset, b.__isset);
}

ApplicationInterfaceDescription::ApplicationInterfaceDescription(const ApplicationInterfaceDescription& other18) {
  applicationInterfaceId = other18.applicationInterfaceId;
  applicationName = other18.applicationName;
  applicationDescription = other18.applicationDescription;
  applicationModules = other18.applicationModules;
  applicationInputs = other18.applicationInputs;
  applicationOutputs = other18.applicationOutputs;
  archiveWorkingDirectory = other18.archiveWorkingDirectory;
  hasOptionalFileInputs = other18.hasOptionalFileInputs;
  __isset = other18.__isset;
}
ApplicationInterfaceDescription& ApplicationInterfaceDescription::operator=(const ApplicationInterfaceDescription& other19) {
  applicationInterfaceId = other19.applicationInterfaceId;
  applicationName = other19.applicationName;
  applicationDescription = other19.applicationDescription;
  applicationModules = other19.applicationModules;
  applicationInputs = other19.applicationInputs;
  applicationOutputs = other19.applicationOutputs;
  archiveWorkingDirectory = other19.archiveWorkingDirectory;
  hasOptionalFileInputs = other19.hasOptionalFileInputs;
  __isset = other19.__isset;
  return *this;
}
void ApplicationInterfaceDescription::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ApplicationInterfaceDescription(";
  out << "applicationInterfaceId=" << to_string(applicationInterfaceId);
  out << ", " << "applicationName=" << to_string(applicationName);
  out << ", " << "applicationDescription="; (__isset.applicationDescription ? (out << to_string(applicationDescription)) : (out << "<null>"));
  out << ", " << "applicationModules="; (__isset.applicationModules ? (out << to_string(applicationModules)) : (out << "<null>"));
  out << ", " << "applicationInputs="; (__isset.applicationInputs ? (out << to_string(applicationInputs)) : (out << "<null>"));
  out << ", " << "applicationOutputs="; (__isset.applicationOutputs ? (out << to_string(applicationOutputs)) : (out << "<null>"));
  out << ", " << "archiveWorkingDirectory="; (__isset.archiveWorkingDirectory ? (out << to_string(archiveWorkingDirectory)) : (out << "<null>"));
  out << ", " << "hasOptionalFileInputs="; (__isset.hasOptionalFileInputs ? (out << to_string(hasOptionalFileInputs)) : (out << "<null>"));
  out << ")";
}

}}}}} // namespace
