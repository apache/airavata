/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef storage_resource_model_TYPES_H
#define storage_resource_model_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "airavata_commons_types.h"
#include "data_movement_models_types.h"


namespace apache { namespace airavata { namespace model { namespace appcatalog { namespace storageresource {

class StorageResourceDescription;

typedef struct _StorageResourceDescription__isset {
  _StorageResourceDescription__isset() : storageResourceDescription(false), enabled(false), dataMovementInterfaces(false) {}
  bool storageResourceDescription :1;
  bool enabled :1;
  bool dataMovementInterfaces :1;
} _StorageResourceDescription__isset;

class StorageResourceDescription {
 public:

  StorageResourceDescription(const StorageResourceDescription&);
  StorageResourceDescription& operator=(const StorageResourceDescription&);
  StorageResourceDescription() : storageResourceId("DO_NOT_SET_AT_CLIENTS"), hostName(), storageResourceDescription(), enabled(0) {
  }

  virtual ~StorageResourceDescription() throw();
  std::string storageResourceId;
  std::string hostName;
  std::string storageResourceDescription;
  bool enabled;
  std::vector< ::apache::airavata::model::data::movement::DataMovementInterface>  dataMovementInterfaces;

  _StorageResourceDescription__isset __isset;

  void __set_storageResourceId(const std::string& val);

  void __set_hostName(const std::string& val);

  void __set_storageResourceDescription(const std::string& val);

  void __set_enabled(const bool val);

  void __set_dataMovementInterfaces(const std::vector< ::apache::airavata::model::data::movement::DataMovementInterface> & val);

  bool operator == (const StorageResourceDescription & rhs) const
  {
    if (!(storageResourceId == rhs.storageResourceId))
      return false;
    if (!(hostName == rhs.hostName))
      return false;
    if (__isset.storageResourceDescription != rhs.__isset.storageResourceDescription)
      return false;
    else if (__isset.storageResourceDescription && !(storageResourceDescription == rhs.storageResourceDescription))
      return false;
    if (__isset.enabled != rhs.__isset.enabled)
      return false;
    else if (__isset.enabled && !(enabled == rhs.enabled))
      return false;
    if (__isset.dataMovementInterfaces != rhs.__isset.dataMovementInterfaces)
      return false;
    else if (__isset.dataMovementInterfaces && !(dataMovementInterfaces == rhs.dataMovementInterfaces))
      return false;
    return true;
  }
  bool operator != (const StorageResourceDescription &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageResourceDescription & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(StorageResourceDescription &a, StorageResourceDescription &b);

inline std::ostream& operator<<(std::ostream& out, const StorageResourceDescription& obj)
{
  obj.printTo(out);
  return out;
}

}}}}} // namespace

#endif
