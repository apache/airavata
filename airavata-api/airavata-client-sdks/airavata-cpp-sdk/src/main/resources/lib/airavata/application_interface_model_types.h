/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef application_interface_model_TYPES_H
#define application_interface_model_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "application_io_models_types.h"
#include "airavata_commons_types.h"


namespace apache { namespace airavata { namespace model { namespace appcatalog { namespace appinterface {

class ApplicationInterfaceDescription;

typedef struct _ApplicationInterfaceDescription__isset {
  _ApplicationInterfaceDescription__isset() : applicationDescription(false), applicationModules(false), applicationInputs(false), applicationOutputs(false), archiveWorkingDirectory(true), hasOptionalFileInputs(false) {}
  bool applicationDescription :1;
  bool applicationModules :1;
  bool applicationInputs :1;
  bool applicationOutputs :1;
  bool archiveWorkingDirectory :1;
  bool hasOptionalFileInputs :1;
} _ApplicationInterfaceDescription__isset;

class ApplicationInterfaceDescription {
 public:

  ApplicationInterfaceDescription(const ApplicationInterfaceDescription&);
  ApplicationInterfaceDescription& operator=(const ApplicationInterfaceDescription&);
  ApplicationInterfaceDescription() : applicationInterfaceId("DO_NOT_SET_AT_CLIENTS"), applicationName(), applicationDescription(), archiveWorkingDirectory(false), hasOptionalFileInputs(0) {
  }

  virtual ~ApplicationInterfaceDescription() throw();
  std::string applicationInterfaceId;
  std::string applicationName;
  std::string applicationDescription;
  std::vector<std::string>  applicationModules;
  std::vector< ::apache::airavata::model::application::io::InputDataObjectType>  applicationInputs;
  std::vector< ::apache::airavata::model::application::io::OutputDataObjectType>  applicationOutputs;
  bool archiveWorkingDirectory;
  bool hasOptionalFileInputs;

  _ApplicationInterfaceDescription__isset __isset;

  void __set_applicationInterfaceId(const std::string& val);

  void __set_applicationName(const std::string& val);

  void __set_applicationDescription(const std::string& val);

  void __set_applicationModules(const std::vector<std::string> & val);

  void __set_applicationInputs(const std::vector< ::apache::airavata::model::application::io::InputDataObjectType> & val);

  void __set_applicationOutputs(const std::vector< ::apache::airavata::model::application::io::OutputDataObjectType> & val);

  void __set_archiveWorkingDirectory(const bool val);

  void __set_hasOptionalFileInputs(const bool val);

  bool operator == (const ApplicationInterfaceDescription & rhs) const
  {
    if (!(applicationInterfaceId == rhs.applicationInterfaceId))
      return false;
    if (!(applicationName == rhs.applicationName))
      return false;
    if (__isset.applicationDescription != rhs.__isset.applicationDescription)
      return false;
    else if (__isset.applicationDescription && !(applicationDescription == rhs.applicationDescription))
      return false;
    if (__isset.applicationModules != rhs.__isset.applicationModules)
      return false;
    else if (__isset.applicationModules && !(applicationModules == rhs.applicationModules))
      return false;
    if (__isset.applicationInputs != rhs.__isset.applicationInputs)
      return false;
    else if (__isset.applicationInputs && !(applicationInputs == rhs.applicationInputs))
      return false;
    if (__isset.applicationOutputs != rhs.__isset.applicationOutputs)
      return false;
    else if (__isset.applicationOutputs && !(applicationOutputs == rhs.applicationOutputs))
      return false;
    if (__isset.archiveWorkingDirectory != rhs.__isset.archiveWorkingDirectory)
      return false;
    else if (__isset.archiveWorkingDirectory && !(archiveWorkingDirectory == rhs.archiveWorkingDirectory))
      return false;
    if (__isset.hasOptionalFileInputs != rhs.__isset.hasOptionalFileInputs)
      return false;
    else if (__isset.hasOptionalFileInputs && !(hasOptionalFileInputs == rhs.hasOptionalFileInputs))
      return false;
    return true;
  }
  bool operator != (const ApplicationInterfaceDescription &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationInterfaceDescription & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ApplicationInterfaceDescription &a, ApplicationInterfaceDescription &b);

inline std::ostream& operator<<(std::ostream& out, const ApplicationInterfaceDescription& obj)
{
  obj.printTo(out);
  return out;
}

}}}}} // namespace

#endif
