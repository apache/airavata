/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef gatewayResourceProfileModel_TYPES_H
#define gatewayResourceProfileModel_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "computeResourceModel_types.h"


namespace apache { namespace airavata { namespace model { namespace appcatalog { namespace gatewayprofile {

typedef struct _ComputeResourcePreference__isset {
  _ComputeResourcePreference__isset() : preferredJobSubmissionProtocol(false), preferredDataMovementProtocol(false), preferredBatchQueue(false), scratchLocation(false), allocationProjectNumber(false) {}
  bool preferredJobSubmissionProtocol;
  bool preferredDataMovementProtocol;
  bool preferredBatchQueue;
  bool scratchLocation;
  bool allocationProjectNumber;
} _ComputeResourcePreference__isset;

class ComputeResourcePreference {
 public:

  static const char* ascii_fingerprint; // = "365108C84A2E160D53CD17C2A7F06F5C";
  static const uint8_t binary_fingerprint[16]; // = {0x36,0x51,0x08,0xC8,0x4A,0x2E,0x16,0x0D,0x53,0xCD,0x17,0xC2,0xA7,0xF0,0x6F,0x5C};

  ComputeResourcePreference() : computeResourceId(), overridebyAiravata(true), preferredJobSubmissionProtocol(( ::apache::airavata::model::appcatalog::computeresource::JobSubmissionProtocol::type)0), preferredDataMovementProtocol(( ::apache::airavata::model::appcatalog::computeresource::DataMovementProtocol::type)0), preferredBatchQueue(), scratchLocation(), allocationProjectNumber() {
  }

  virtual ~ComputeResourcePreference() throw() {}

  std::string computeResourceId;
  bool overridebyAiravata;
   ::apache::airavata::model::appcatalog::computeresource::JobSubmissionProtocol::type preferredJobSubmissionProtocol;
   ::apache::airavata::model::appcatalog::computeresource::DataMovementProtocol::type preferredDataMovementProtocol;
  std::string preferredBatchQueue;
  std::string scratchLocation;
  std::string allocationProjectNumber;

  _ComputeResourcePreference__isset __isset;

  void __set_computeResourceId(const std::string& val) {
    computeResourceId = val;
  }

  void __set_overridebyAiravata(const bool val) {
    overridebyAiravata = val;
  }

  void __set_preferredJobSubmissionProtocol(const  ::apache::airavata::model::appcatalog::computeresource::JobSubmissionProtocol::type val) {
    preferredJobSubmissionProtocol = val;
    __isset.preferredJobSubmissionProtocol = true;
  }

  void __set_preferredDataMovementProtocol(const  ::apache::airavata::model::appcatalog::computeresource::DataMovementProtocol::type val) {
    preferredDataMovementProtocol = val;
    __isset.preferredDataMovementProtocol = true;
  }

  void __set_preferredBatchQueue(const std::string& val) {
    preferredBatchQueue = val;
    __isset.preferredBatchQueue = true;
  }

  void __set_scratchLocation(const std::string& val) {
    scratchLocation = val;
    __isset.scratchLocation = true;
  }

  void __set_allocationProjectNumber(const std::string& val) {
    allocationProjectNumber = val;
    __isset.allocationProjectNumber = true;
  }

  bool operator == (const ComputeResourcePreference & rhs) const
  {
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    if (!(overridebyAiravata == rhs.overridebyAiravata))
      return false;
    if (__isset.preferredJobSubmissionProtocol != rhs.__isset.preferredJobSubmissionProtocol)
      return false;
    else if (__isset.preferredJobSubmissionProtocol && !(preferredJobSubmissionProtocol == rhs.preferredJobSubmissionProtocol))
      return false;
    if (__isset.preferredDataMovementProtocol != rhs.__isset.preferredDataMovementProtocol)
      return false;
    else if (__isset.preferredDataMovementProtocol && !(preferredDataMovementProtocol == rhs.preferredDataMovementProtocol))
      return false;
    if (__isset.preferredBatchQueue != rhs.__isset.preferredBatchQueue)
      return false;
    else if (__isset.preferredBatchQueue && !(preferredBatchQueue == rhs.preferredBatchQueue))
      return false;
    if (__isset.scratchLocation != rhs.__isset.scratchLocation)
      return false;
    else if (__isset.scratchLocation && !(scratchLocation == rhs.scratchLocation))
      return false;
    if (__isset.allocationProjectNumber != rhs.__isset.allocationProjectNumber)
      return false;
    else if (__isset.allocationProjectNumber && !(allocationProjectNumber == rhs.allocationProjectNumber))
      return false;
    return true;
  }
  bool operator != (const ComputeResourcePreference &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ComputeResourcePreference & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ComputeResourcePreference &a, ComputeResourcePreference &b);

typedef struct _GatewayResourceProfile__isset {
  _GatewayResourceProfile__isset() : computeResourcePreferences(false) {}
  bool computeResourcePreferences;
} _GatewayResourceProfile__isset;

class GatewayResourceProfile {
 public:

  static const char* ascii_fingerprint; // = "2C13C97D8E01026228E6E378E58505CC";
  static const uint8_t binary_fingerprint[16]; // = {0x2C,0x13,0xC9,0x7D,0x8E,0x01,0x02,0x62,0x28,0xE6,0xE3,0x78,0xE5,0x85,0x05,0xCC};

  GatewayResourceProfile() : gatewayID() {
  }

  virtual ~GatewayResourceProfile() throw() {}

  std::string gatewayID;
  std::vector<ComputeResourcePreference>  computeResourcePreferences;

  _GatewayResourceProfile__isset __isset;

  void __set_gatewayID(const std::string& val) {
    gatewayID = val;
  }

  void __set_computeResourcePreferences(const std::vector<ComputeResourcePreference> & val) {
    computeResourcePreferences = val;
    __isset.computeResourcePreferences = true;
  }

  bool operator == (const GatewayResourceProfile & rhs) const
  {
    if (!(gatewayID == rhs.gatewayID))
      return false;
    if (__isset.computeResourcePreferences != rhs.__isset.computeResourcePreferences)
      return false;
    else if (__isset.computeResourcePreferences && !(computeResourcePreferences == rhs.computeResourcePreferences))
      return false;
    return true;
  }
  bool operator != (const GatewayResourceProfile &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GatewayResourceProfile & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GatewayResourceProfile &a, GatewayResourceProfile &b);

}}}}} // namespace

#endif
