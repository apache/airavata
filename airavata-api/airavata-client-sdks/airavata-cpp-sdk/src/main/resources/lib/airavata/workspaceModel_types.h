/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef workspaceModel_TYPES_H
#define workspaceModel_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "experimentModel_types.h"


namespace apache { namespace airavata { namespace model { namespace workspace {

typedef struct _Group__isset {
  _Group__isset() : description(false) {}
  bool description;
} _Group__isset;

class Group {
 public:

  static const char* ascii_fingerprint; // = "5B708A954C550ECA9C1A49D3C5CAFAB9";
  static const uint8_t binary_fingerprint[16]; // = {0x5B,0x70,0x8A,0x95,0x4C,0x55,0x0E,0xCA,0x9C,0x1A,0x49,0xD3,0xC5,0xCA,0xFA,0xB9};

  Group() : groupName(), description() {
  }

  virtual ~Group() throw() {}

  std::string groupName;
  std::string description;

  _Group__isset __isset;

  void __set_groupName(const std::string& val) {
    groupName = val;
  }

  void __set_description(const std::string& val) {
    description = val;
    __isset.description = true;
  }

  bool operator == (const Group & rhs) const
  {
    if (!(groupName == rhs.groupName))
      return false;
    if (__isset.description != rhs.__isset.description)
      return false;
    else if (__isset.description && !(description == rhs.description))
      return false;
    return true;
  }
  bool operator != (const Group &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Group & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Group &a, Group &b);

typedef struct _Project__isset {
  _Project__isset() : description(false), creationTime(false), sharedUsers(false), sharedGroups(false) {}
  bool description;
  bool creationTime;
  bool sharedUsers;
  bool sharedGroups;
} _Project__isset;

class Project {
 public:

  static const char* ascii_fingerprint; // = "AFD8090DE564134035942D450F918628";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xD8,0x09,0x0D,0xE5,0x64,0x13,0x40,0x35,0x94,0x2D,0x45,0x0F,0x91,0x86,0x28};

  Project() : projectID("DEFAULT"), owner(), name(), description(), creationTime(0) {
  }

  virtual ~Project() throw() {}

  std::string projectID;
  std::string owner;
  std::string name;
  std::string description;
  int64_t creationTime;
  std::vector<std::string>  sharedUsers;
  std::vector<std::string>  sharedGroups;

  _Project__isset __isset;

  void __set_projectID(const std::string& val) {
    projectID = val;
  }

  void __set_owner(const std::string& val) {
    owner = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_description(const std::string& val) {
    description = val;
    __isset.description = true;
  }

  void __set_creationTime(const int64_t val) {
    creationTime = val;
    __isset.creationTime = true;
  }

  void __set_sharedUsers(const std::vector<std::string> & val) {
    sharedUsers = val;
    __isset.sharedUsers = true;
  }

  void __set_sharedGroups(const std::vector<std::string> & val) {
    sharedGroups = val;
    __isset.sharedGroups = true;
  }

  bool operator == (const Project & rhs) const
  {
    if (!(projectID == rhs.projectID))
      return false;
    if (!(owner == rhs.owner))
      return false;
    if (!(name == rhs.name))
      return false;
    if (__isset.description != rhs.__isset.description)
      return false;
    else if (__isset.description && !(description == rhs.description))
      return false;
    if (__isset.creationTime != rhs.__isset.creationTime)
      return false;
    else if (__isset.creationTime && !(creationTime == rhs.creationTime))
      return false;
    if (__isset.sharedUsers != rhs.__isset.sharedUsers)
      return false;
    else if (__isset.sharedUsers && !(sharedUsers == rhs.sharedUsers))
      return false;
    if (__isset.sharedGroups != rhs.__isset.sharedGroups)
      return false;
    else if (__isset.sharedGroups && !(sharedGroups == rhs.sharedGroups))
      return false;
    return true;
  }
  bool operator != (const Project &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Project & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Project &a, Project &b);

typedef struct _User__isset {
  _User__isset() : groupList(false) {}
  bool groupList;
} _User__isset;

class User {
 public:

  static const char* ascii_fingerprint; // = "D7DA282D6B2F08CB02B4E3CF47DB44E5";
  static const uint8_t binary_fingerprint[16]; // = {0xD7,0xDA,0x28,0x2D,0x6B,0x2F,0x08,0xCB,0x02,0xB4,0xE3,0xCF,0x47,0xDB,0x44,0xE5};

  User() : userName() {
  }

  virtual ~User() throw() {}

  std::string userName;
  std::vector<Group>  groupList;

  _User__isset __isset;

  void __set_userName(const std::string& val) {
    userName = val;
  }

  void __set_groupList(const std::vector<Group> & val) {
    groupList = val;
    __isset.groupList = true;
  }

  bool operator == (const User & rhs) const
  {
    if (!(userName == rhs.userName))
      return false;
    if (__isset.groupList != rhs.__isset.groupList)
      return false;
    else if (__isset.groupList && !(groupList == rhs.groupList))
      return false;
    return true;
  }
  bool operator != (const User &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(User &a, User &b);


class Gateway {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  Gateway() : gatewayId("DO_NOT_SET_AT_CLIENTS"), name() {
  }

  virtual ~Gateway() throw() {}

  std::string gatewayId;
  std::string name;

  void __set_gatewayId(const std::string& val) {
    gatewayId = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  bool operator == (const Gateway & rhs) const
  {
    if (!(gatewayId == rhs.gatewayId))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const Gateway &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Gateway & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Gateway &a, Gateway &b);

}}}} // namespace

#endif
