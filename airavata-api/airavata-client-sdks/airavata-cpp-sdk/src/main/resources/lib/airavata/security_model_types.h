/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef security_model_TYPES_H
#define security_model_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace apache { namespace airavata { namespace model { namespace security {

class AuthzToken;

typedef struct _AuthzToken__isset {
  _AuthzToken__isset() : claimsMap(false) {}
  bool claimsMap :1;
} _AuthzToken__isset;

class AuthzToken {
 public:

  static const char* ascii_fingerprint; // = "31FBBEA1FC165CE500F2DE705C5C27CE";
  static const uint8_t binary_fingerprint[16]; // = {0x31,0xFB,0xBE,0xA1,0xFC,0x16,0x5C,0xE5,0x00,0xF2,0xDE,0x70,0x5C,0x5C,0x27,0xCE};

  AuthzToken(const AuthzToken&);
  AuthzToken& operator=(const AuthzToken&);
  AuthzToken() : accessToken() {
  }

  virtual ~AuthzToken() throw();
  std::string accessToken;
  std::map<std::string, std::string>  claimsMap;

  _AuthzToken__isset __isset;

  void __set_accessToken(const std::string& val);

  void __set_claimsMap(const std::map<std::string, std::string> & val);

  bool operator == (const AuthzToken & rhs) const
  {
    if (!(accessToken == rhs.accessToken))
      return false;
    if (__isset.claimsMap != rhs.__isset.claimsMap)
      return false;
    else if (__isset.claimsMap && !(claimsMap == rhs.claimsMap))
      return false;
    return true;
  }
  bool operator != (const AuthzToken &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthzToken & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const AuthzToken& obj);
};

void swap(AuthzToken &a, AuthzToken &b);

}}}} // namespace

#endif
