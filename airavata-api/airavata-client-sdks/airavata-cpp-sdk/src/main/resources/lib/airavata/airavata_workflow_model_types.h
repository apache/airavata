/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef airavata_workflow_model_TYPES_H
#define airavata_workflow_model_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "airavata_commons_types.h"
#include "application_io_models_types.h"


namespace apache { namespace airavata { namespace model { namespace workflow {

struct ApplicationState {
  enum type {
    CREATED = 0,
    VALIDATED = 1,
    SCHEDULED = 2,
    LAUNCHED = 3,
    EXECUTING = 4,
    CANCELING = 5,
    CANCELED = 6,
    COMPLETED = 7,
    FAILED = 8
  };
};

extern const std::map<int, const char*> _ApplicationState_VALUES_TO_NAMES;

struct ComponentType {
  enum type {
    APPLICATION = 0,
    HANDLER = 1
  };
};

extern const std::map<int, const char*> _ComponentType_VALUES_TO_NAMES;

struct HandlerType {
  enum type {
    FLOW_STARTER = 0,
    FLOW_TERMINATOR = 1
  };
};

extern const std::map<int, const char*> _HandlerType_VALUES_TO_NAMES;

struct HandlerState {
  enum type {
    CREATED = 0,
    VALIDATED = 1,
    SCHEDULED = 2,
    LAUNCHED = 3,
    EXECUTING = 4,
    CANCELING = 5,
    CANCELED = 6,
    COMPLETED = 7,
    FAILED = 8
  };
};

extern const std::map<int, const char*> _HandlerState_VALUES_TO_NAMES;

struct WorkflowState {
  enum type {
    CREATED = 0,
    VALIDATED = 1,
    SCHEDULED = 2,
    LAUNCHED = 3,
    EXECUTING = 4,
    PAUSING = 5,
    PAUSED = 6,
    RESTARTING = 7,
    CANCELING = 8,
    CANCELED = 9,
    COMPLETED = 10,
    FAILED = 11
  };
};

extern const std::map<int, const char*> _WorkflowState_VALUES_TO_NAMES;

class ApplicationStatus;

class WorkflowApplication;

class DataBlock;

class WorkflowConnection;

class HandlerStatus;

class WorkflowHandler;

class WorkflowStatus;

class AiravataWorkflow;

typedef struct _ApplicationStatus__isset {
  _ApplicationStatus__isset() : id(false), description(false), updatedAt(false) {}
  bool id :1;
  bool description :1;
  bool updatedAt :1;
} _ApplicationStatus__isset;

class ApplicationStatus : public virtual ::apache::thrift::TBase {
 public:

  ApplicationStatus(const ApplicationStatus&);
  ApplicationStatus& operator=(const ApplicationStatus&);
  ApplicationStatus() : id(), state((ApplicationState::type)0), description(), updatedAt(0) {
  }

  virtual ~ApplicationStatus() throw();
  std::string id;
  ApplicationState::type state;
  std::string description;
  int64_t updatedAt;

  _ApplicationStatus__isset __isset;

  void __set_id(const std::string& val);

  void __set_state(const ApplicationState::type val);

  void __set_description(const std::string& val);

  void __set_updatedAt(const int64_t val);

  bool operator == (const ApplicationStatus & rhs) const
  {
    if (__isset.id != rhs.__isset.id)
      return false;
    else if (__isset.id && !(id == rhs.id))
      return false;
    if (!(state == rhs.state))
      return false;
    if (__isset.description != rhs.__isset.description)
      return false;
    else if (__isset.description && !(description == rhs.description))
      return false;
    if (__isset.updatedAt != rhs.__isset.updatedAt)
      return false;
    else if (__isset.updatedAt && !(updatedAt == rhs.updatedAt))
      return false;
    return true;
  }
  bool operator != (const ApplicationStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ApplicationStatus &a, ApplicationStatus &b);

inline std::ostream& operator<<(std::ostream& out, const ApplicationStatus& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _WorkflowApplication__isset {
  _WorkflowApplication__isset() : processId(false), applicationInterfaceId(false), computeResourceId(false), queueName(false), nodeCount(false), coreCount(false), wallTimeLimit(false), physicalMemory(false), statuses(false), errors(false), createdAt(false), updatedAt(false) {}
  bool processId :1;
  bool applicationInterfaceId :1;
  bool computeResourceId :1;
  bool queueName :1;
  bool nodeCount :1;
  bool coreCount :1;
  bool wallTimeLimit :1;
  bool physicalMemory :1;
  bool statuses :1;
  bool errors :1;
  bool createdAt :1;
  bool updatedAt :1;
} _WorkflowApplication__isset;

class WorkflowApplication : public virtual ::apache::thrift::TBase {
 public:

  WorkflowApplication(const WorkflowApplication&);
  WorkflowApplication& operator=(const WorkflowApplication&);
  WorkflowApplication() : id(), processId(), applicationInterfaceId(), computeResourceId(), queueName(), nodeCount(0), coreCount(0), wallTimeLimit(0), physicalMemory(0), createdAt(0), updatedAt(0) {
  }

  virtual ~WorkflowApplication() throw();
  std::string id;
  std::string processId;
  std::string applicationInterfaceId;
  std::string computeResourceId;
  std::string queueName;
  int32_t nodeCount;
  int32_t coreCount;
  int32_t wallTimeLimit;
  int32_t physicalMemory;
  std::vector<ApplicationStatus>  statuses;
  std::vector< ::apache::airavata::model::commons::ErrorModel>  errors;
  int64_t createdAt;
  int64_t updatedAt;

  _WorkflowApplication__isset __isset;

  void __set_id(const std::string& val);

  void __set_processId(const std::string& val);

  void __set_applicationInterfaceId(const std::string& val);

  void __set_computeResourceId(const std::string& val);

  void __set_queueName(const std::string& val);

  void __set_nodeCount(const int32_t val);

  void __set_coreCount(const int32_t val);

  void __set_wallTimeLimit(const int32_t val);

  void __set_physicalMemory(const int32_t val);

  void __set_statuses(const std::vector<ApplicationStatus> & val);

  void __set_errors(const std::vector< ::apache::airavata::model::commons::ErrorModel> & val);

  void __set_createdAt(const int64_t val);

  void __set_updatedAt(const int64_t val);

  bool operator == (const WorkflowApplication & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (__isset.processId != rhs.__isset.processId)
      return false;
    else if (__isset.processId && !(processId == rhs.processId))
      return false;
    if (__isset.applicationInterfaceId != rhs.__isset.applicationInterfaceId)
      return false;
    else if (__isset.applicationInterfaceId && !(applicationInterfaceId == rhs.applicationInterfaceId))
      return false;
    if (__isset.computeResourceId != rhs.__isset.computeResourceId)
      return false;
    else if (__isset.computeResourceId && !(computeResourceId == rhs.computeResourceId))
      return false;
    if (__isset.queueName != rhs.__isset.queueName)
      return false;
    else if (__isset.queueName && !(queueName == rhs.queueName))
      return false;
    if (__isset.nodeCount != rhs.__isset.nodeCount)
      return false;
    else if (__isset.nodeCount && !(nodeCount == rhs.nodeCount))
      return false;
    if (__isset.coreCount != rhs.__isset.coreCount)
      return false;
    else if (__isset.coreCount && !(coreCount == rhs.coreCount))
      return false;
    if (__isset.wallTimeLimit != rhs.__isset.wallTimeLimit)
      return false;
    else if (__isset.wallTimeLimit && !(wallTimeLimit == rhs.wallTimeLimit))
      return false;
    if (__isset.physicalMemory != rhs.__isset.physicalMemory)
      return false;
    else if (__isset.physicalMemory && !(physicalMemory == rhs.physicalMemory))
      return false;
    if (__isset.statuses != rhs.__isset.statuses)
      return false;
    else if (__isset.statuses && !(statuses == rhs.statuses))
      return false;
    if (__isset.errors != rhs.__isset.errors)
      return false;
    else if (__isset.errors && !(errors == rhs.errors))
      return false;
    if (__isset.createdAt != rhs.__isset.createdAt)
      return false;
    else if (__isset.createdAt && !(createdAt == rhs.createdAt))
      return false;
    if (__isset.updatedAt != rhs.__isset.updatedAt)
      return false;
    else if (__isset.updatedAt && !(updatedAt == rhs.updatedAt))
      return false;
    return true;
  }
  bool operator != (const WorkflowApplication &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WorkflowApplication & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WorkflowApplication &a, WorkflowApplication &b);

inline std::ostream& operator<<(std::ostream& out, const WorkflowApplication& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DataBlock__isset {
  _DataBlock__isset() : value(false), type(false), createdAt(false), updatedAt(false) {}
  bool value :1;
  bool type :1;
  bool createdAt :1;
  bool updatedAt :1;
} _DataBlock__isset;

class DataBlock : public virtual ::apache::thrift::TBase {
 public:

  DataBlock(const DataBlock&);
  DataBlock& operator=(const DataBlock&);
  DataBlock() : id(), value(), type(( ::apache::airavata::model::application::io::DataType::type)0), createdAt(0), updatedAt(0) {
  }

  virtual ~DataBlock() throw();
  std::string id;
  std::string value;
   ::apache::airavata::model::application::io::DataType::type type;
  int64_t createdAt;
  int64_t updatedAt;

  _DataBlock__isset __isset;

  void __set_id(const std::string& val);

  void __set_value(const std::string& val);

  void __set_type(const  ::apache::airavata::model::application::io::DataType::type val);

  void __set_createdAt(const int64_t val);

  void __set_updatedAt(const int64_t val);

  bool operator == (const DataBlock & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (__isset.value != rhs.__isset.value)
      return false;
    else if (__isset.value && !(value == rhs.value))
      return false;
    if (__isset.type != rhs.__isset.type)
      return false;
    else if (__isset.type && !(type == rhs.type))
      return false;
    if (__isset.createdAt != rhs.__isset.createdAt)
      return false;
    else if (__isset.createdAt && !(createdAt == rhs.createdAt))
      return false;
    if (__isset.updatedAt != rhs.__isset.updatedAt)
      return false;
    else if (__isset.updatedAt && !(updatedAt == rhs.updatedAt))
      return false;
    return true;
  }
  bool operator != (const DataBlock &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataBlock & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DataBlock &a, DataBlock &b);

inline std::ostream& operator<<(std::ostream& out, const DataBlock& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _WorkflowConnection__isset {
  _WorkflowConnection__isset() : dataBlock(false), createdAt(false), updatedAt(false) {}
  bool dataBlock :1;
  bool createdAt :1;
  bool updatedAt :1;
} _WorkflowConnection__isset;

class WorkflowConnection : public virtual ::apache::thrift::TBase {
 public:

  WorkflowConnection(const WorkflowConnection&);
  WorkflowConnection& operator=(const WorkflowConnection&);
  WorkflowConnection() : id("DO_NOT_SET_AT_CLIENTS"), fromType((ComponentType::type)0), fromId(), fromOutputName(), toType((ComponentType::type)0), toId(), toInputName(), createdAt(0), updatedAt(0) {
  }

  virtual ~WorkflowConnection() throw();
  std::string id;
  DataBlock dataBlock;
  ComponentType::type fromType;
  std::string fromId;
  std::string fromOutputName;
  ComponentType::type toType;
  std::string toId;
  std::string toInputName;
  int64_t createdAt;
  int64_t updatedAt;

  _WorkflowConnection__isset __isset;

  void __set_id(const std::string& val);

  void __set_dataBlock(const DataBlock& val);

  void __set_fromType(const ComponentType::type val);

  void __set_fromId(const std::string& val);

  void __set_fromOutputName(const std::string& val);

  void __set_toType(const ComponentType::type val);

  void __set_toId(const std::string& val);

  void __set_toInputName(const std::string& val);

  void __set_createdAt(const int64_t val);

  void __set_updatedAt(const int64_t val);

  bool operator == (const WorkflowConnection & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (__isset.dataBlock != rhs.__isset.dataBlock)
      return false;
    else if (__isset.dataBlock && !(dataBlock == rhs.dataBlock))
      return false;
    if (!(fromType == rhs.fromType))
      return false;
    if (!(fromId == rhs.fromId))
      return false;
    if (!(fromOutputName == rhs.fromOutputName))
      return false;
    if (!(toType == rhs.toType))
      return false;
    if (!(toId == rhs.toId))
      return false;
    if (!(toInputName == rhs.toInputName))
      return false;
    if (__isset.createdAt != rhs.__isset.createdAt)
      return false;
    else if (__isset.createdAt && !(createdAt == rhs.createdAt))
      return false;
    if (__isset.updatedAt != rhs.__isset.updatedAt)
      return false;
    else if (__isset.updatedAt && !(updatedAt == rhs.updatedAt))
      return false;
    return true;
  }
  bool operator != (const WorkflowConnection &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WorkflowConnection & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WorkflowConnection &a, WorkflowConnection &b);

inline std::ostream& operator<<(std::ostream& out, const WorkflowConnection& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _HandlerStatus__isset {
  _HandlerStatus__isset() : id(false), description(false), updatedAt(false) {}
  bool id :1;
  bool description :1;
  bool updatedAt :1;
} _HandlerStatus__isset;

class HandlerStatus : public virtual ::apache::thrift::TBase {
 public:

  HandlerStatus(const HandlerStatus&);
  HandlerStatus& operator=(const HandlerStatus&);
  HandlerStatus() : id(), state((HandlerState::type)0), description(), updatedAt(0) {
  }

  virtual ~HandlerStatus() throw();
  std::string id;
  HandlerState::type state;
  std::string description;
  int64_t updatedAt;

  _HandlerStatus__isset __isset;

  void __set_id(const std::string& val);

  void __set_state(const HandlerState::type val);

  void __set_description(const std::string& val);

  void __set_updatedAt(const int64_t val);

  bool operator == (const HandlerStatus & rhs) const
  {
    if (__isset.id != rhs.__isset.id)
      return false;
    else if (__isset.id && !(id == rhs.id))
      return false;
    if (!(state == rhs.state))
      return false;
    if (__isset.description != rhs.__isset.description)
      return false;
    else if (__isset.description && !(description == rhs.description))
      return false;
    if (__isset.updatedAt != rhs.__isset.updatedAt)
      return false;
    else if (__isset.updatedAt && !(updatedAt == rhs.updatedAt))
      return false;
    return true;
  }
  bool operator != (const HandlerStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HandlerStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(HandlerStatus &a, HandlerStatus &b);

inline std::ostream& operator<<(std::ostream& out, const HandlerStatus& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _WorkflowHandler__isset {
  _WorkflowHandler__isset() : inputs(false), outputs(false), statuses(false), errors(false), createdAt(false), updatedAt(false) {}
  bool inputs :1;
  bool outputs :1;
  bool statuses :1;
  bool errors :1;
  bool createdAt :1;
  bool updatedAt :1;
} _WorkflowHandler__isset;

class WorkflowHandler : public virtual ::apache::thrift::TBase {
 public:

  WorkflowHandler(const WorkflowHandler&);
  WorkflowHandler& operator=(const WorkflowHandler&);
  WorkflowHandler() : id(), type((HandlerType::type)0), createdAt(0), updatedAt(0) {
  }

  virtual ~WorkflowHandler() throw();
  std::string id;
  HandlerType::type type;
  std::vector< ::apache::airavata::model::application::io::InputDataObjectType>  inputs;
  std::vector< ::apache::airavata::model::application::io::OutputDataObjectType>  outputs;
  std::vector<HandlerStatus>  statuses;
  std::vector< ::apache::airavata::model::commons::ErrorModel>  errors;
  int64_t createdAt;
  int64_t updatedAt;

  _WorkflowHandler__isset __isset;

  void __set_id(const std::string& val);

  void __set_type(const HandlerType::type val);

  void __set_inputs(const std::vector< ::apache::airavata::model::application::io::InputDataObjectType> & val);

  void __set_outputs(const std::vector< ::apache::airavata::model::application::io::OutputDataObjectType> & val);

  void __set_statuses(const std::vector<HandlerStatus> & val);

  void __set_errors(const std::vector< ::apache::airavata::model::commons::ErrorModel> & val);

  void __set_createdAt(const int64_t val);

  void __set_updatedAt(const int64_t val);

  bool operator == (const WorkflowHandler & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(type == rhs.type))
      return false;
    if (__isset.inputs != rhs.__isset.inputs)
      return false;
    else if (__isset.inputs && !(inputs == rhs.inputs))
      return false;
    if (__isset.outputs != rhs.__isset.outputs)
      return false;
    else if (__isset.outputs && !(outputs == rhs.outputs))
      return false;
    if (__isset.statuses != rhs.__isset.statuses)
      return false;
    else if (__isset.statuses && !(statuses == rhs.statuses))
      return false;
    if (__isset.errors != rhs.__isset.errors)
      return false;
    else if (__isset.errors && !(errors == rhs.errors))
      return false;
    if (__isset.createdAt != rhs.__isset.createdAt)
      return false;
    else if (__isset.createdAt && !(createdAt == rhs.createdAt))
      return false;
    if (__isset.updatedAt != rhs.__isset.updatedAt)
      return false;
    else if (__isset.updatedAt && !(updatedAt == rhs.updatedAt))
      return false;
    return true;
  }
  bool operator != (const WorkflowHandler &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WorkflowHandler & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WorkflowHandler &a, WorkflowHandler &b);

inline std::ostream& operator<<(std::ostream& out, const WorkflowHandler& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _WorkflowStatus__isset {
  _WorkflowStatus__isset() : id(false), description(false), updatedAt(false) {}
  bool id :1;
  bool description :1;
  bool updatedAt :1;
} _WorkflowStatus__isset;

class WorkflowStatus : public virtual ::apache::thrift::TBase {
 public:

  WorkflowStatus(const WorkflowStatus&);
  WorkflowStatus& operator=(const WorkflowStatus&);
  WorkflowStatus() : id(), state((WorkflowState::type)0), description(), updatedAt(0) {
  }

  virtual ~WorkflowStatus() throw();
  std::string id;
  WorkflowState::type state;
  std::string description;
  int64_t updatedAt;

  _WorkflowStatus__isset __isset;

  void __set_id(const std::string& val);

  void __set_state(const WorkflowState::type val);

  void __set_description(const std::string& val);

  void __set_updatedAt(const int64_t val);

  bool operator == (const WorkflowStatus & rhs) const
  {
    if (__isset.id != rhs.__isset.id)
      return false;
    else if (__isset.id && !(id == rhs.id))
      return false;
    if (!(state == rhs.state))
      return false;
    if (__isset.description != rhs.__isset.description)
      return false;
    else if (__isset.description && !(description == rhs.description))
      return false;
    if (__isset.updatedAt != rhs.__isset.updatedAt)
      return false;
    else if (__isset.updatedAt && !(updatedAt == rhs.updatedAt))
      return false;
    return true;
  }
  bool operator != (const WorkflowStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WorkflowStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WorkflowStatus &a, WorkflowStatus &b);

inline std::ostream& operator<<(std::ostream& out, const WorkflowStatus& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _AiravataWorkflow__isset {
  _AiravataWorkflow__isset() : description(false), applications(false), handlers(false), connections(false), statuses(false), errors(false), createdAt(false), updatedAt(false) {}
  bool description :1;
  bool applications :1;
  bool handlers :1;
  bool connections :1;
  bool statuses :1;
  bool errors :1;
  bool createdAt :1;
  bool updatedAt :1;
} _AiravataWorkflow__isset;

class AiravataWorkflow : public virtual ::apache::thrift::TBase {
 public:

  AiravataWorkflow(const AiravataWorkflow&);
  AiravataWorkflow& operator=(const AiravataWorkflow&);
  AiravataWorkflow() : id("DO_NOT_SET_AT_CLIENTS"), experimentId(), description(), createdAt(0), updatedAt(0) {
  }

  virtual ~AiravataWorkflow() throw();
  std::string id;
  std::string experimentId;
  std::string description;
  std::vector<WorkflowApplication>  applications;
  std::vector<WorkflowHandler>  handlers;
  std::vector<WorkflowConnection>  connections;
  std::vector<WorkflowStatus>  statuses;
  std::vector< ::apache::airavata::model::commons::ErrorModel>  errors;
  int64_t createdAt;
  int64_t updatedAt;

  _AiravataWorkflow__isset __isset;

  void __set_id(const std::string& val);

  void __set_experimentId(const std::string& val);

  void __set_description(const std::string& val);

  void __set_applications(const std::vector<WorkflowApplication> & val);

  void __set_handlers(const std::vector<WorkflowHandler> & val);

  void __set_connections(const std::vector<WorkflowConnection> & val);

  void __set_statuses(const std::vector<WorkflowStatus> & val);

  void __set_errors(const std::vector< ::apache::airavata::model::commons::ErrorModel> & val);

  void __set_createdAt(const int64_t val);

  void __set_updatedAt(const int64_t val);

  bool operator == (const AiravataWorkflow & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(experimentId == rhs.experimentId))
      return false;
    if (__isset.description != rhs.__isset.description)
      return false;
    else if (__isset.description && !(description == rhs.description))
      return false;
    if (__isset.applications != rhs.__isset.applications)
      return false;
    else if (__isset.applications && !(applications == rhs.applications))
      return false;
    if (__isset.handlers != rhs.__isset.handlers)
      return false;
    else if (__isset.handlers && !(handlers == rhs.handlers))
      return false;
    if (__isset.connections != rhs.__isset.connections)
      return false;
    else if (__isset.connections && !(connections == rhs.connections))
      return false;
    if (__isset.statuses != rhs.__isset.statuses)
      return false;
    else if (__isset.statuses && !(statuses == rhs.statuses))
      return false;
    if (__isset.errors != rhs.__isset.errors)
      return false;
    else if (__isset.errors && !(errors == rhs.errors))
      return false;
    if (__isset.createdAt != rhs.__isset.createdAt)
      return false;
    else if (__isset.createdAt && !(createdAt == rhs.createdAt))
      return false;
    if (__isset.updatedAt != rhs.__isset.updatedAt)
      return false;
    else if (__isset.updatedAt && !(updatedAt == rhs.updatedAt))
      return false;
    return true;
  }
  bool operator != (const AiravataWorkflow &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AiravataWorkflow & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AiravataWorkflow &a, AiravataWorkflow &b);

inline std::ostream& operator<<(std::ostream& out, const AiravataWorkflow& obj)
{
  obj.printTo(out);
  return out;
}

}}}} // namespace

#endif
