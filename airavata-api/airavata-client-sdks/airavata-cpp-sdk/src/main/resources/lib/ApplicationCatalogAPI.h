/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ApplicationCatalogAPI_H
#define ApplicationCatalogAPI_H

#include <thrift/TDispatchProcessor.h>
#include "applicationCatalogAPI_types.h"

namespace airavata { namespace api { namespace appcatalog {

class ApplicationCatalogAPIIf {
 public:
  virtual ~ApplicationCatalogAPIIf() {}
  virtual void GetAPIVersion(std::string& _return) = 0;
  virtual void addComputeResourceDescription(std::string& _return, const  ::ComputeResourceDescription& computeResourceDescription) = 0;
  virtual void addSSHJobSubmissionProtocol(std::string& _return, const std::string& computeResourceId, const  ::SSHJobSubmission& jobSubmission) = 0;
  virtual void addGSISSHJobSubmissionProtocol(std::string& _return, const std::string& computeResourceId, const  ::GSISSHJobSubmission& jobSubmission) = 0;
  virtual void addGlobusJobSubmissionProtocol(std::string& _return, const std::string& computeResourceId, const  ::GlobusJobSubmission& jobSubmission) = 0;
  virtual void addSCPDataMovementProtocol(std::string& _return, const std::string& computeResourceId, const  ::SCPDataMovement& dataMovement) = 0;
  virtual void addGridFTPDataMovementProtocol(std::string& _return, const std::string& computeResourceId, const  ::GridFTPDataMovement& dataMovement) = 0;
  virtual void listComputeResourceDescriptions(std::vector<std::string> & _return) = 0;
  virtual void getComputeResourceDescription( ::ComputeResourceDescription& _return, const std::string& computeResourceId) = 0;
  virtual void getSSHJobSubmissionProtocol( ::SSHJobSubmission& _return, const std::string& sshJobSubmissionProtocolResourceId) = 0;
  virtual void getGSISSHJobSubmissionProtocol( ::GSISSHJobSubmission& _return, const std::string& gsisshJobSubmissionProtocolResourceId) = 0;
  virtual void getGlobusJobSubmissionProtocol( ::GlobusJobSubmission& _return, const std::string& globusJobSubmissionProtocolResourceId) = 0;
  virtual void getSCPDataMovementProtocol( ::SCPDataMovement& _return, const std::string& scpDataMovementResourceId) = 0;
  virtual void getGridFTPDataMovementProtocol( ::GridFTPDataMovement& _return, const std::string& gridFTPDataMovementResourceId) = 0;
  virtual bool isComputeResourceDescriptionRegistered(const std::string& hostName) = 0;
  virtual void getComputeResourceDescriptionFromHostName( ::ComputeResourceDescription& _return, const std::string& hostName) = 0;
  virtual void addApplicationInterface(std::string& _return, const  ::ApplicationInterfaceDescription& applicationInterface) = 0;
  virtual void listApplicationInterfaceIds(std::vector<std::string> & _return) = 0;
  virtual void getApplicationInterface( ::ApplicationInterfaceDescription& _return, const std::string& applicationInterfaceId) = 0;
  virtual void registerAppicationModule(std::string& _return, const  ::ApplicationModule& applicationModule, const bool publish) = 0;
  virtual void getAppicationModule( ::ApplicationModule& _return, const std::string& appModuleId) = 0;
  virtual bool updateAppicationModule(const std::string& appModuleId, const  ::ApplicationModule& applicationModule) = 0;
  virtual bool deleteAppicationModule(const std::string& appModuleId) = 0;
  virtual void addApplicationDeployment(std::string& _return, const std::string& applicationInterfaceId, const  ::ApplicationDeploymentDescription& applicationDeployment) = 0;
  virtual void listApplicationDeploymentIds(std::vector<std::string> & _return, const std::string& applicationInterfaceId) = 0;
  virtual void getApplicationDeployment( ::ApplicationDeploymentDescription& _return, const std::string& applicationInterfaceId, const std::string& applicationDeploymentId) = 0;
};

class ApplicationCatalogAPIIfFactory {
 public:
  typedef ApplicationCatalogAPIIf Handler;

  virtual ~ApplicationCatalogAPIIfFactory() {}

  virtual ApplicationCatalogAPIIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ApplicationCatalogAPIIf* /* handler */) = 0;
};

class ApplicationCatalogAPIIfSingletonFactory : virtual public ApplicationCatalogAPIIfFactory {
 public:
  ApplicationCatalogAPIIfSingletonFactory(const boost::shared_ptr<ApplicationCatalogAPIIf>& iface) : iface_(iface) {}
  virtual ~ApplicationCatalogAPIIfSingletonFactory() {}

  virtual ApplicationCatalogAPIIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ApplicationCatalogAPIIf* /* handler */) {}

 protected:
  boost::shared_ptr<ApplicationCatalogAPIIf> iface_;
};

class ApplicationCatalogAPINull : virtual public ApplicationCatalogAPIIf {
 public:
  virtual ~ApplicationCatalogAPINull() {}
  void GetAPIVersion(std::string& /* _return */) {
    return;
  }
  void addComputeResourceDescription(std::string& /* _return */, const  ::ComputeResourceDescription& /* computeResourceDescription */) {
    return;
  }
  void addSSHJobSubmissionProtocol(std::string& /* _return */, const std::string& /* computeResourceId */, const  ::SSHJobSubmission& /* jobSubmission */) {
    return;
  }
  void addGSISSHJobSubmissionProtocol(std::string& /* _return */, const std::string& /* computeResourceId */, const  ::GSISSHJobSubmission& /* jobSubmission */) {
    return;
  }
  void addGlobusJobSubmissionProtocol(std::string& /* _return */, const std::string& /* computeResourceId */, const  ::GlobusJobSubmission& /* jobSubmission */) {
    return;
  }
  void addSCPDataMovementProtocol(std::string& /* _return */, const std::string& /* computeResourceId */, const  ::SCPDataMovement& /* dataMovement */) {
    return;
  }
  void addGridFTPDataMovementProtocol(std::string& /* _return */, const std::string& /* computeResourceId */, const  ::GridFTPDataMovement& /* dataMovement */) {
    return;
  }
  void listComputeResourceDescriptions(std::vector<std::string> & /* _return */) {
    return;
  }
  void getComputeResourceDescription( ::ComputeResourceDescription& /* _return */, const std::string& /* computeResourceId */) {
    return;
  }
  void getSSHJobSubmissionProtocol( ::SSHJobSubmission& /* _return */, const std::string& /* sshJobSubmissionProtocolResourceId */) {
    return;
  }
  void getGSISSHJobSubmissionProtocol( ::GSISSHJobSubmission& /* _return */, const std::string& /* gsisshJobSubmissionProtocolResourceId */) {
    return;
  }
  void getGlobusJobSubmissionProtocol( ::GlobusJobSubmission& /* _return */, const std::string& /* globusJobSubmissionProtocolResourceId */) {
    return;
  }
  void getSCPDataMovementProtocol( ::SCPDataMovement& /* _return */, const std::string& /* scpDataMovementResourceId */) {
    return;
  }
  void getGridFTPDataMovementProtocol( ::GridFTPDataMovement& /* _return */, const std::string& /* gridFTPDataMovementResourceId */) {
    return;
  }
  bool isComputeResourceDescriptionRegistered(const std::string& /* hostName */) {
    bool _return = false;
    return _return;
  }
  void getComputeResourceDescriptionFromHostName( ::ComputeResourceDescription& /* _return */, const std::string& /* hostName */) {
    return;
  }
  void addApplicationInterface(std::string& /* _return */, const  ::ApplicationInterfaceDescription& /* applicationInterface */) {
    return;
  }
  void listApplicationInterfaceIds(std::vector<std::string> & /* _return */) {
    return;
  }
  void getApplicationInterface( ::ApplicationInterfaceDescription& /* _return */, const std::string& /* applicationInterfaceId */) {
    return;
  }
  void registerAppicationModule(std::string& /* _return */, const  ::ApplicationModule& /* applicationModule */, const bool /* publish */) {
    return;
  }
  void getAppicationModule( ::ApplicationModule& /* _return */, const std::string& /* appModuleId */) {
    return;
  }
  bool updateAppicationModule(const std::string& /* appModuleId */, const  ::ApplicationModule& /* applicationModule */) {
    bool _return = false;
    return _return;
  }
  bool deleteAppicationModule(const std::string& /* appModuleId */) {
    bool _return = false;
    return _return;
  }
  void addApplicationDeployment(std::string& /* _return */, const std::string& /* applicationInterfaceId */, const  ::ApplicationDeploymentDescription& /* applicationDeployment */) {
    return;
  }
  void listApplicationDeploymentIds(std::vector<std::string> & /* _return */, const std::string& /* applicationInterfaceId */) {
    return;
  }
  void getApplicationDeployment( ::ApplicationDeploymentDescription& /* _return */, const std::string& /* applicationInterfaceId */, const std::string& /* applicationDeploymentId */) {
    return;
  }
};


class ApplicationCatalogAPI_GetAPIVersion_args {
 public:

  ApplicationCatalogAPI_GetAPIVersion_args() {
  }

  virtual ~ApplicationCatalogAPI_GetAPIVersion_args() throw() {}


  bool operator == (const ApplicationCatalogAPI_GetAPIVersion_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_GetAPIVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_GetAPIVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApplicationCatalogAPI_GetAPIVersion_pargs {
 public:


  virtual ~ApplicationCatalogAPI_GetAPIVersion_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_GetAPIVersion_result__isset {
  _ApplicationCatalogAPI_GetAPIVersion_result__isset() : success(false) {}
  bool success;
} _ApplicationCatalogAPI_GetAPIVersion_result__isset;

class ApplicationCatalogAPI_GetAPIVersion_result {
 public:

  ApplicationCatalogAPI_GetAPIVersion_result() : success() {
  }

  virtual ~ApplicationCatalogAPI_GetAPIVersion_result() throw() {}

  std::string success;

  _ApplicationCatalogAPI_GetAPIVersion_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const ApplicationCatalogAPI_GetAPIVersion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_GetAPIVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_GetAPIVersion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_GetAPIVersion_presult__isset {
  _ApplicationCatalogAPI_GetAPIVersion_presult__isset() : success(false) {}
  bool success;
} _ApplicationCatalogAPI_GetAPIVersion_presult__isset;

class ApplicationCatalogAPI_GetAPIVersion_presult {
 public:


  virtual ~ApplicationCatalogAPI_GetAPIVersion_presult() throw() {}

  std::string* success;

  _ApplicationCatalogAPI_GetAPIVersion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ApplicationCatalogAPI_addComputeResourceDescription_args {
 public:

  ApplicationCatalogAPI_addComputeResourceDescription_args() {
  }

  virtual ~ApplicationCatalogAPI_addComputeResourceDescription_args() throw() {}

   ::ComputeResourceDescription computeResourceDescription;

  void __set_computeResourceDescription(const  ::ComputeResourceDescription& val) {
    computeResourceDescription = val;
  }

  bool operator == (const ApplicationCatalogAPI_addComputeResourceDescription_args & rhs) const
  {
    if (!(computeResourceDescription == rhs.computeResourceDescription))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_addComputeResourceDescription_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_addComputeResourceDescription_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApplicationCatalogAPI_addComputeResourceDescription_pargs {
 public:


  virtual ~ApplicationCatalogAPI_addComputeResourceDescription_pargs() throw() {}

  const  ::ComputeResourceDescription* computeResourceDescription;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_addComputeResourceDescription_result__isset {
  _ApplicationCatalogAPI_addComputeResourceDescription_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_addComputeResourceDescription_result__isset;

class ApplicationCatalogAPI_addComputeResourceDescription_result {
 public:

  ApplicationCatalogAPI_addComputeResourceDescription_result() : success() {
  }

  virtual ~ApplicationCatalogAPI_addComputeResourceDescription_result() throw() {}

  std::string success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_addComputeResourceDescription_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const ApplicationCatalogAPI_addComputeResourceDescription_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_addComputeResourceDescription_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_addComputeResourceDescription_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_addComputeResourceDescription_presult__isset {
  _ApplicationCatalogAPI_addComputeResourceDescription_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_addComputeResourceDescription_presult__isset;

class ApplicationCatalogAPI_addComputeResourceDescription_presult {
 public:


  virtual ~ApplicationCatalogAPI_addComputeResourceDescription_presult() throw() {}

  std::string* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_addComputeResourceDescription_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ApplicationCatalogAPI_addSSHJobSubmissionProtocol_args {
 public:

  ApplicationCatalogAPI_addSSHJobSubmissionProtocol_args() : computeResourceId() {
  }

  virtual ~ApplicationCatalogAPI_addSSHJobSubmissionProtocol_args() throw() {}

  std::string computeResourceId;
   ::SSHJobSubmission jobSubmission;

  void __set_computeResourceId(const std::string& val) {
    computeResourceId = val;
  }

  void __set_jobSubmission(const  ::SSHJobSubmission& val) {
    jobSubmission = val;
  }

  bool operator == (const ApplicationCatalogAPI_addSSHJobSubmissionProtocol_args & rhs) const
  {
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    if (!(jobSubmission == rhs.jobSubmission))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_addSSHJobSubmissionProtocol_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_addSSHJobSubmissionProtocol_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApplicationCatalogAPI_addSSHJobSubmissionProtocol_pargs {
 public:


  virtual ~ApplicationCatalogAPI_addSSHJobSubmissionProtocol_pargs() throw() {}

  const std::string* computeResourceId;
  const  ::SSHJobSubmission* jobSubmission;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_addSSHJobSubmissionProtocol_result__isset {
  _ApplicationCatalogAPI_addSSHJobSubmissionProtocol_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_addSSHJobSubmissionProtocol_result__isset;

class ApplicationCatalogAPI_addSSHJobSubmissionProtocol_result {
 public:

  ApplicationCatalogAPI_addSSHJobSubmissionProtocol_result() : success() {
  }

  virtual ~ApplicationCatalogAPI_addSSHJobSubmissionProtocol_result() throw() {}

  std::string success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_addSSHJobSubmissionProtocol_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const ApplicationCatalogAPI_addSSHJobSubmissionProtocol_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_addSSHJobSubmissionProtocol_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_addSSHJobSubmissionProtocol_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_addSSHJobSubmissionProtocol_presult__isset {
  _ApplicationCatalogAPI_addSSHJobSubmissionProtocol_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_addSSHJobSubmissionProtocol_presult__isset;

class ApplicationCatalogAPI_addSSHJobSubmissionProtocol_presult {
 public:


  virtual ~ApplicationCatalogAPI_addSSHJobSubmissionProtocol_presult() throw() {}

  std::string* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_addSSHJobSubmissionProtocol_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ApplicationCatalogAPI_addGSISSHJobSubmissionProtocol_args {
 public:

  ApplicationCatalogAPI_addGSISSHJobSubmissionProtocol_args() : computeResourceId() {
  }

  virtual ~ApplicationCatalogAPI_addGSISSHJobSubmissionProtocol_args() throw() {}

  std::string computeResourceId;
   ::GSISSHJobSubmission jobSubmission;

  void __set_computeResourceId(const std::string& val) {
    computeResourceId = val;
  }

  void __set_jobSubmission(const  ::GSISSHJobSubmission& val) {
    jobSubmission = val;
  }

  bool operator == (const ApplicationCatalogAPI_addGSISSHJobSubmissionProtocol_args & rhs) const
  {
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    if (!(jobSubmission == rhs.jobSubmission))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_addGSISSHJobSubmissionProtocol_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_addGSISSHJobSubmissionProtocol_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApplicationCatalogAPI_addGSISSHJobSubmissionProtocol_pargs {
 public:


  virtual ~ApplicationCatalogAPI_addGSISSHJobSubmissionProtocol_pargs() throw() {}

  const std::string* computeResourceId;
  const  ::GSISSHJobSubmission* jobSubmission;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_addGSISSHJobSubmissionProtocol_result__isset {
  _ApplicationCatalogAPI_addGSISSHJobSubmissionProtocol_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_addGSISSHJobSubmissionProtocol_result__isset;

class ApplicationCatalogAPI_addGSISSHJobSubmissionProtocol_result {
 public:

  ApplicationCatalogAPI_addGSISSHJobSubmissionProtocol_result() : success() {
  }

  virtual ~ApplicationCatalogAPI_addGSISSHJobSubmissionProtocol_result() throw() {}

  std::string success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_addGSISSHJobSubmissionProtocol_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const ApplicationCatalogAPI_addGSISSHJobSubmissionProtocol_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_addGSISSHJobSubmissionProtocol_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_addGSISSHJobSubmissionProtocol_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_addGSISSHJobSubmissionProtocol_presult__isset {
  _ApplicationCatalogAPI_addGSISSHJobSubmissionProtocol_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_addGSISSHJobSubmissionProtocol_presult__isset;

class ApplicationCatalogAPI_addGSISSHJobSubmissionProtocol_presult {
 public:


  virtual ~ApplicationCatalogAPI_addGSISSHJobSubmissionProtocol_presult() throw() {}

  std::string* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_addGSISSHJobSubmissionProtocol_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ApplicationCatalogAPI_addGlobusJobSubmissionProtocol_args {
 public:

  ApplicationCatalogAPI_addGlobusJobSubmissionProtocol_args() : computeResourceId() {
  }

  virtual ~ApplicationCatalogAPI_addGlobusJobSubmissionProtocol_args() throw() {}

  std::string computeResourceId;
   ::GlobusJobSubmission jobSubmission;

  void __set_computeResourceId(const std::string& val) {
    computeResourceId = val;
  }

  void __set_jobSubmission(const  ::GlobusJobSubmission& val) {
    jobSubmission = val;
  }

  bool operator == (const ApplicationCatalogAPI_addGlobusJobSubmissionProtocol_args & rhs) const
  {
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    if (!(jobSubmission == rhs.jobSubmission))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_addGlobusJobSubmissionProtocol_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_addGlobusJobSubmissionProtocol_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApplicationCatalogAPI_addGlobusJobSubmissionProtocol_pargs {
 public:


  virtual ~ApplicationCatalogAPI_addGlobusJobSubmissionProtocol_pargs() throw() {}

  const std::string* computeResourceId;
  const  ::GlobusJobSubmission* jobSubmission;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_addGlobusJobSubmissionProtocol_result__isset {
  _ApplicationCatalogAPI_addGlobusJobSubmissionProtocol_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_addGlobusJobSubmissionProtocol_result__isset;

class ApplicationCatalogAPI_addGlobusJobSubmissionProtocol_result {
 public:

  ApplicationCatalogAPI_addGlobusJobSubmissionProtocol_result() : success() {
  }

  virtual ~ApplicationCatalogAPI_addGlobusJobSubmissionProtocol_result() throw() {}

  std::string success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_addGlobusJobSubmissionProtocol_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const ApplicationCatalogAPI_addGlobusJobSubmissionProtocol_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_addGlobusJobSubmissionProtocol_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_addGlobusJobSubmissionProtocol_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_addGlobusJobSubmissionProtocol_presult__isset {
  _ApplicationCatalogAPI_addGlobusJobSubmissionProtocol_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_addGlobusJobSubmissionProtocol_presult__isset;

class ApplicationCatalogAPI_addGlobusJobSubmissionProtocol_presult {
 public:


  virtual ~ApplicationCatalogAPI_addGlobusJobSubmissionProtocol_presult() throw() {}

  std::string* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_addGlobusJobSubmissionProtocol_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ApplicationCatalogAPI_addSCPDataMovementProtocol_args {
 public:

  ApplicationCatalogAPI_addSCPDataMovementProtocol_args() : computeResourceId() {
  }

  virtual ~ApplicationCatalogAPI_addSCPDataMovementProtocol_args() throw() {}

  std::string computeResourceId;
   ::SCPDataMovement dataMovement;

  void __set_computeResourceId(const std::string& val) {
    computeResourceId = val;
  }

  void __set_dataMovement(const  ::SCPDataMovement& val) {
    dataMovement = val;
  }

  bool operator == (const ApplicationCatalogAPI_addSCPDataMovementProtocol_args & rhs) const
  {
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    if (!(dataMovement == rhs.dataMovement))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_addSCPDataMovementProtocol_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_addSCPDataMovementProtocol_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApplicationCatalogAPI_addSCPDataMovementProtocol_pargs {
 public:


  virtual ~ApplicationCatalogAPI_addSCPDataMovementProtocol_pargs() throw() {}

  const std::string* computeResourceId;
  const  ::SCPDataMovement* dataMovement;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_addSCPDataMovementProtocol_result__isset {
  _ApplicationCatalogAPI_addSCPDataMovementProtocol_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_addSCPDataMovementProtocol_result__isset;

class ApplicationCatalogAPI_addSCPDataMovementProtocol_result {
 public:

  ApplicationCatalogAPI_addSCPDataMovementProtocol_result() : success() {
  }

  virtual ~ApplicationCatalogAPI_addSCPDataMovementProtocol_result() throw() {}

  std::string success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_addSCPDataMovementProtocol_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const ApplicationCatalogAPI_addSCPDataMovementProtocol_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_addSCPDataMovementProtocol_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_addSCPDataMovementProtocol_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_addSCPDataMovementProtocol_presult__isset {
  _ApplicationCatalogAPI_addSCPDataMovementProtocol_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_addSCPDataMovementProtocol_presult__isset;

class ApplicationCatalogAPI_addSCPDataMovementProtocol_presult {
 public:


  virtual ~ApplicationCatalogAPI_addSCPDataMovementProtocol_presult() throw() {}

  std::string* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_addSCPDataMovementProtocol_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ApplicationCatalogAPI_addGridFTPDataMovementProtocol_args {
 public:

  ApplicationCatalogAPI_addGridFTPDataMovementProtocol_args() : computeResourceId() {
  }

  virtual ~ApplicationCatalogAPI_addGridFTPDataMovementProtocol_args() throw() {}

  std::string computeResourceId;
   ::GridFTPDataMovement dataMovement;

  void __set_computeResourceId(const std::string& val) {
    computeResourceId = val;
  }

  void __set_dataMovement(const  ::GridFTPDataMovement& val) {
    dataMovement = val;
  }

  bool operator == (const ApplicationCatalogAPI_addGridFTPDataMovementProtocol_args & rhs) const
  {
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    if (!(dataMovement == rhs.dataMovement))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_addGridFTPDataMovementProtocol_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_addGridFTPDataMovementProtocol_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApplicationCatalogAPI_addGridFTPDataMovementProtocol_pargs {
 public:


  virtual ~ApplicationCatalogAPI_addGridFTPDataMovementProtocol_pargs() throw() {}

  const std::string* computeResourceId;
  const  ::GridFTPDataMovement* dataMovement;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_addGridFTPDataMovementProtocol_result__isset {
  _ApplicationCatalogAPI_addGridFTPDataMovementProtocol_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_addGridFTPDataMovementProtocol_result__isset;

class ApplicationCatalogAPI_addGridFTPDataMovementProtocol_result {
 public:

  ApplicationCatalogAPI_addGridFTPDataMovementProtocol_result() : success() {
  }

  virtual ~ApplicationCatalogAPI_addGridFTPDataMovementProtocol_result() throw() {}

  std::string success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_addGridFTPDataMovementProtocol_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const ApplicationCatalogAPI_addGridFTPDataMovementProtocol_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_addGridFTPDataMovementProtocol_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_addGridFTPDataMovementProtocol_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_addGridFTPDataMovementProtocol_presult__isset {
  _ApplicationCatalogAPI_addGridFTPDataMovementProtocol_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_addGridFTPDataMovementProtocol_presult__isset;

class ApplicationCatalogAPI_addGridFTPDataMovementProtocol_presult {
 public:


  virtual ~ApplicationCatalogAPI_addGridFTPDataMovementProtocol_presult() throw() {}

  std::string* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_addGridFTPDataMovementProtocol_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ApplicationCatalogAPI_listComputeResourceDescriptions_args {
 public:

  ApplicationCatalogAPI_listComputeResourceDescriptions_args() {
  }

  virtual ~ApplicationCatalogAPI_listComputeResourceDescriptions_args() throw() {}


  bool operator == (const ApplicationCatalogAPI_listComputeResourceDescriptions_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_listComputeResourceDescriptions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_listComputeResourceDescriptions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApplicationCatalogAPI_listComputeResourceDescriptions_pargs {
 public:


  virtual ~ApplicationCatalogAPI_listComputeResourceDescriptions_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_listComputeResourceDescriptions_result__isset {
  _ApplicationCatalogAPI_listComputeResourceDescriptions_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_listComputeResourceDescriptions_result__isset;

class ApplicationCatalogAPI_listComputeResourceDescriptions_result {
 public:

  ApplicationCatalogAPI_listComputeResourceDescriptions_result() {
  }

  virtual ~ApplicationCatalogAPI_listComputeResourceDescriptions_result() throw() {}

  std::vector<std::string>  success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_listComputeResourceDescriptions_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const ApplicationCatalogAPI_listComputeResourceDescriptions_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_listComputeResourceDescriptions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_listComputeResourceDescriptions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_listComputeResourceDescriptions_presult__isset {
  _ApplicationCatalogAPI_listComputeResourceDescriptions_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_listComputeResourceDescriptions_presult__isset;

class ApplicationCatalogAPI_listComputeResourceDescriptions_presult {
 public:


  virtual ~ApplicationCatalogAPI_listComputeResourceDescriptions_presult() throw() {}

  std::vector<std::string> * success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_listComputeResourceDescriptions_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ApplicationCatalogAPI_getComputeResourceDescription_args {
 public:

  ApplicationCatalogAPI_getComputeResourceDescription_args() : computeResourceId() {
  }

  virtual ~ApplicationCatalogAPI_getComputeResourceDescription_args() throw() {}

  std::string computeResourceId;

  void __set_computeResourceId(const std::string& val) {
    computeResourceId = val;
  }

  bool operator == (const ApplicationCatalogAPI_getComputeResourceDescription_args & rhs) const
  {
    if (!(computeResourceId == rhs.computeResourceId))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_getComputeResourceDescription_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_getComputeResourceDescription_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApplicationCatalogAPI_getComputeResourceDescription_pargs {
 public:


  virtual ~ApplicationCatalogAPI_getComputeResourceDescription_pargs() throw() {}

  const std::string* computeResourceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_getComputeResourceDescription_result__isset {
  _ApplicationCatalogAPI_getComputeResourceDescription_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_getComputeResourceDescription_result__isset;

class ApplicationCatalogAPI_getComputeResourceDescription_result {
 public:

  ApplicationCatalogAPI_getComputeResourceDescription_result() {
  }

  virtual ~ApplicationCatalogAPI_getComputeResourceDescription_result() throw() {}

   ::ComputeResourceDescription success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_getComputeResourceDescription_result__isset __isset;

  void __set_success(const  ::ComputeResourceDescription& val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const ApplicationCatalogAPI_getComputeResourceDescription_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_getComputeResourceDescription_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_getComputeResourceDescription_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_getComputeResourceDescription_presult__isset {
  _ApplicationCatalogAPI_getComputeResourceDescription_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_getComputeResourceDescription_presult__isset;

class ApplicationCatalogAPI_getComputeResourceDescription_presult {
 public:


  virtual ~ApplicationCatalogAPI_getComputeResourceDescription_presult() throw() {}

   ::ComputeResourceDescription* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_getComputeResourceDescription_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ApplicationCatalogAPI_getSSHJobSubmissionProtocol_args {
 public:

  ApplicationCatalogAPI_getSSHJobSubmissionProtocol_args() : sshJobSubmissionProtocolResourceId() {
  }

  virtual ~ApplicationCatalogAPI_getSSHJobSubmissionProtocol_args() throw() {}

  std::string sshJobSubmissionProtocolResourceId;

  void __set_sshJobSubmissionProtocolResourceId(const std::string& val) {
    sshJobSubmissionProtocolResourceId = val;
  }

  bool operator == (const ApplicationCatalogAPI_getSSHJobSubmissionProtocol_args & rhs) const
  {
    if (!(sshJobSubmissionProtocolResourceId == rhs.sshJobSubmissionProtocolResourceId))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_getSSHJobSubmissionProtocol_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_getSSHJobSubmissionProtocol_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApplicationCatalogAPI_getSSHJobSubmissionProtocol_pargs {
 public:


  virtual ~ApplicationCatalogAPI_getSSHJobSubmissionProtocol_pargs() throw() {}

  const std::string* sshJobSubmissionProtocolResourceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_getSSHJobSubmissionProtocol_result__isset {
  _ApplicationCatalogAPI_getSSHJobSubmissionProtocol_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_getSSHJobSubmissionProtocol_result__isset;

class ApplicationCatalogAPI_getSSHJobSubmissionProtocol_result {
 public:

  ApplicationCatalogAPI_getSSHJobSubmissionProtocol_result() {
  }

  virtual ~ApplicationCatalogAPI_getSSHJobSubmissionProtocol_result() throw() {}

   ::SSHJobSubmission success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_getSSHJobSubmissionProtocol_result__isset __isset;

  void __set_success(const  ::SSHJobSubmission& val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const ApplicationCatalogAPI_getSSHJobSubmissionProtocol_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_getSSHJobSubmissionProtocol_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_getSSHJobSubmissionProtocol_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_getSSHJobSubmissionProtocol_presult__isset {
  _ApplicationCatalogAPI_getSSHJobSubmissionProtocol_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_getSSHJobSubmissionProtocol_presult__isset;

class ApplicationCatalogAPI_getSSHJobSubmissionProtocol_presult {
 public:


  virtual ~ApplicationCatalogAPI_getSSHJobSubmissionProtocol_presult() throw() {}

   ::SSHJobSubmission* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_getSSHJobSubmissionProtocol_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ApplicationCatalogAPI_getGSISSHJobSubmissionProtocol_args {
 public:

  ApplicationCatalogAPI_getGSISSHJobSubmissionProtocol_args() : gsisshJobSubmissionProtocolResourceId() {
  }

  virtual ~ApplicationCatalogAPI_getGSISSHJobSubmissionProtocol_args() throw() {}

  std::string gsisshJobSubmissionProtocolResourceId;

  void __set_gsisshJobSubmissionProtocolResourceId(const std::string& val) {
    gsisshJobSubmissionProtocolResourceId = val;
  }

  bool operator == (const ApplicationCatalogAPI_getGSISSHJobSubmissionProtocol_args & rhs) const
  {
    if (!(gsisshJobSubmissionProtocolResourceId == rhs.gsisshJobSubmissionProtocolResourceId))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_getGSISSHJobSubmissionProtocol_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_getGSISSHJobSubmissionProtocol_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApplicationCatalogAPI_getGSISSHJobSubmissionProtocol_pargs {
 public:


  virtual ~ApplicationCatalogAPI_getGSISSHJobSubmissionProtocol_pargs() throw() {}

  const std::string* gsisshJobSubmissionProtocolResourceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_getGSISSHJobSubmissionProtocol_result__isset {
  _ApplicationCatalogAPI_getGSISSHJobSubmissionProtocol_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_getGSISSHJobSubmissionProtocol_result__isset;

class ApplicationCatalogAPI_getGSISSHJobSubmissionProtocol_result {
 public:

  ApplicationCatalogAPI_getGSISSHJobSubmissionProtocol_result() {
  }

  virtual ~ApplicationCatalogAPI_getGSISSHJobSubmissionProtocol_result() throw() {}

   ::GSISSHJobSubmission success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_getGSISSHJobSubmissionProtocol_result__isset __isset;

  void __set_success(const  ::GSISSHJobSubmission& val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const ApplicationCatalogAPI_getGSISSHJobSubmissionProtocol_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_getGSISSHJobSubmissionProtocol_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_getGSISSHJobSubmissionProtocol_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_getGSISSHJobSubmissionProtocol_presult__isset {
  _ApplicationCatalogAPI_getGSISSHJobSubmissionProtocol_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_getGSISSHJobSubmissionProtocol_presult__isset;

class ApplicationCatalogAPI_getGSISSHJobSubmissionProtocol_presult {
 public:


  virtual ~ApplicationCatalogAPI_getGSISSHJobSubmissionProtocol_presult() throw() {}

   ::GSISSHJobSubmission* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_getGSISSHJobSubmissionProtocol_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ApplicationCatalogAPI_getGlobusJobSubmissionProtocol_args {
 public:

  ApplicationCatalogAPI_getGlobusJobSubmissionProtocol_args() : globusJobSubmissionProtocolResourceId() {
  }

  virtual ~ApplicationCatalogAPI_getGlobusJobSubmissionProtocol_args() throw() {}

  std::string globusJobSubmissionProtocolResourceId;

  void __set_globusJobSubmissionProtocolResourceId(const std::string& val) {
    globusJobSubmissionProtocolResourceId = val;
  }

  bool operator == (const ApplicationCatalogAPI_getGlobusJobSubmissionProtocol_args & rhs) const
  {
    if (!(globusJobSubmissionProtocolResourceId == rhs.globusJobSubmissionProtocolResourceId))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_getGlobusJobSubmissionProtocol_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_getGlobusJobSubmissionProtocol_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApplicationCatalogAPI_getGlobusJobSubmissionProtocol_pargs {
 public:


  virtual ~ApplicationCatalogAPI_getGlobusJobSubmissionProtocol_pargs() throw() {}

  const std::string* globusJobSubmissionProtocolResourceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_getGlobusJobSubmissionProtocol_result__isset {
  _ApplicationCatalogAPI_getGlobusJobSubmissionProtocol_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_getGlobusJobSubmissionProtocol_result__isset;

class ApplicationCatalogAPI_getGlobusJobSubmissionProtocol_result {
 public:

  ApplicationCatalogAPI_getGlobusJobSubmissionProtocol_result() {
  }

  virtual ~ApplicationCatalogAPI_getGlobusJobSubmissionProtocol_result() throw() {}

   ::GlobusJobSubmission success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_getGlobusJobSubmissionProtocol_result__isset __isset;

  void __set_success(const  ::GlobusJobSubmission& val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const ApplicationCatalogAPI_getGlobusJobSubmissionProtocol_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_getGlobusJobSubmissionProtocol_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_getGlobusJobSubmissionProtocol_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_getGlobusJobSubmissionProtocol_presult__isset {
  _ApplicationCatalogAPI_getGlobusJobSubmissionProtocol_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_getGlobusJobSubmissionProtocol_presult__isset;

class ApplicationCatalogAPI_getGlobusJobSubmissionProtocol_presult {
 public:


  virtual ~ApplicationCatalogAPI_getGlobusJobSubmissionProtocol_presult() throw() {}

   ::GlobusJobSubmission* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_getGlobusJobSubmissionProtocol_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ApplicationCatalogAPI_getSCPDataMovementProtocol_args {
 public:

  ApplicationCatalogAPI_getSCPDataMovementProtocol_args() : scpDataMovementResourceId() {
  }

  virtual ~ApplicationCatalogAPI_getSCPDataMovementProtocol_args() throw() {}

  std::string scpDataMovementResourceId;

  void __set_scpDataMovementResourceId(const std::string& val) {
    scpDataMovementResourceId = val;
  }

  bool operator == (const ApplicationCatalogAPI_getSCPDataMovementProtocol_args & rhs) const
  {
    if (!(scpDataMovementResourceId == rhs.scpDataMovementResourceId))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_getSCPDataMovementProtocol_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_getSCPDataMovementProtocol_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApplicationCatalogAPI_getSCPDataMovementProtocol_pargs {
 public:


  virtual ~ApplicationCatalogAPI_getSCPDataMovementProtocol_pargs() throw() {}

  const std::string* scpDataMovementResourceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_getSCPDataMovementProtocol_result__isset {
  _ApplicationCatalogAPI_getSCPDataMovementProtocol_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_getSCPDataMovementProtocol_result__isset;

class ApplicationCatalogAPI_getSCPDataMovementProtocol_result {
 public:

  ApplicationCatalogAPI_getSCPDataMovementProtocol_result() {
  }

  virtual ~ApplicationCatalogAPI_getSCPDataMovementProtocol_result() throw() {}

   ::SCPDataMovement success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_getSCPDataMovementProtocol_result__isset __isset;

  void __set_success(const  ::SCPDataMovement& val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const ApplicationCatalogAPI_getSCPDataMovementProtocol_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_getSCPDataMovementProtocol_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_getSCPDataMovementProtocol_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_getSCPDataMovementProtocol_presult__isset {
  _ApplicationCatalogAPI_getSCPDataMovementProtocol_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_getSCPDataMovementProtocol_presult__isset;

class ApplicationCatalogAPI_getSCPDataMovementProtocol_presult {
 public:


  virtual ~ApplicationCatalogAPI_getSCPDataMovementProtocol_presult() throw() {}

   ::SCPDataMovement* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_getSCPDataMovementProtocol_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ApplicationCatalogAPI_getGridFTPDataMovementProtocol_args {
 public:

  ApplicationCatalogAPI_getGridFTPDataMovementProtocol_args() : gridFTPDataMovementResourceId() {
  }

  virtual ~ApplicationCatalogAPI_getGridFTPDataMovementProtocol_args() throw() {}

  std::string gridFTPDataMovementResourceId;

  void __set_gridFTPDataMovementResourceId(const std::string& val) {
    gridFTPDataMovementResourceId = val;
  }

  bool operator == (const ApplicationCatalogAPI_getGridFTPDataMovementProtocol_args & rhs) const
  {
    if (!(gridFTPDataMovementResourceId == rhs.gridFTPDataMovementResourceId))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_getGridFTPDataMovementProtocol_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_getGridFTPDataMovementProtocol_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApplicationCatalogAPI_getGridFTPDataMovementProtocol_pargs {
 public:


  virtual ~ApplicationCatalogAPI_getGridFTPDataMovementProtocol_pargs() throw() {}

  const std::string* gridFTPDataMovementResourceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_getGridFTPDataMovementProtocol_result__isset {
  _ApplicationCatalogAPI_getGridFTPDataMovementProtocol_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_getGridFTPDataMovementProtocol_result__isset;

class ApplicationCatalogAPI_getGridFTPDataMovementProtocol_result {
 public:

  ApplicationCatalogAPI_getGridFTPDataMovementProtocol_result() {
  }

  virtual ~ApplicationCatalogAPI_getGridFTPDataMovementProtocol_result() throw() {}

   ::GridFTPDataMovement success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_getGridFTPDataMovementProtocol_result__isset __isset;

  void __set_success(const  ::GridFTPDataMovement& val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const ApplicationCatalogAPI_getGridFTPDataMovementProtocol_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_getGridFTPDataMovementProtocol_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_getGridFTPDataMovementProtocol_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_getGridFTPDataMovementProtocol_presult__isset {
  _ApplicationCatalogAPI_getGridFTPDataMovementProtocol_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_getGridFTPDataMovementProtocol_presult__isset;

class ApplicationCatalogAPI_getGridFTPDataMovementProtocol_presult {
 public:


  virtual ~ApplicationCatalogAPI_getGridFTPDataMovementProtocol_presult() throw() {}

   ::GridFTPDataMovement* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_getGridFTPDataMovementProtocol_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ApplicationCatalogAPI_isComputeResourceDescriptionRegistered_args {
 public:

  ApplicationCatalogAPI_isComputeResourceDescriptionRegistered_args() : hostName() {
  }

  virtual ~ApplicationCatalogAPI_isComputeResourceDescriptionRegistered_args() throw() {}

  std::string hostName;

  void __set_hostName(const std::string& val) {
    hostName = val;
  }

  bool operator == (const ApplicationCatalogAPI_isComputeResourceDescriptionRegistered_args & rhs) const
  {
    if (!(hostName == rhs.hostName))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_isComputeResourceDescriptionRegistered_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_isComputeResourceDescriptionRegistered_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApplicationCatalogAPI_isComputeResourceDescriptionRegistered_pargs {
 public:


  virtual ~ApplicationCatalogAPI_isComputeResourceDescriptionRegistered_pargs() throw() {}

  const std::string* hostName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_isComputeResourceDescriptionRegistered_result__isset {
  _ApplicationCatalogAPI_isComputeResourceDescriptionRegistered_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_isComputeResourceDescriptionRegistered_result__isset;

class ApplicationCatalogAPI_isComputeResourceDescriptionRegistered_result {
 public:

  ApplicationCatalogAPI_isComputeResourceDescriptionRegistered_result() : success(0) {
  }

  virtual ~ApplicationCatalogAPI_isComputeResourceDescriptionRegistered_result() throw() {}

  bool success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_isComputeResourceDescriptionRegistered_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const ApplicationCatalogAPI_isComputeResourceDescriptionRegistered_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_isComputeResourceDescriptionRegistered_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_isComputeResourceDescriptionRegistered_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_isComputeResourceDescriptionRegistered_presult__isset {
  _ApplicationCatalogAPI_isComputeResourceDescriptionRegistered_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_isComputeResourceDescriptionRegistered_presult__isset;

class ApplicationCatalogAPI_isComputeResourceDescriptionRegistered_presult {
 public:


  virtual ~ApplicationCatalogAPI_isComputeResourceDescriptionRegistered_presult() throw() {}

  bool* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_isComputeResourceDescriptionRegistered_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ApplicationCatalogAPI_getComputeResourceDescriptionFromHostName_args {
 public:

  ApplicationCatalogAPI_getComputeResourceDescriptionFromHostName_args() : hostName() {
  }

  virtual ~ApplicationCatalogAPI_getComputeResourceDescriptionFromHostName_args() throw() {}

  std::string hostName;

  void __set_hostName(const std::string& val) {
    hostName = val;
  }

  bool operator == (const ApplicationCatalogAPI_getComputeResourceDescriptionFromHostName_args & rhs) const
  {
    if (!(hostName == rhs.hostName))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_getComputeResourceDescriptionFromHostName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_getComputeResourceDescriptionFromHostName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApplicationCatalogAPI_getComputeResourceDescriptionFromHostName_pargs {
 public:


  virtual ~ApplicationCatalogAPI_getComputeResourceDescriptionFromHostName_pargs() throw() {}

  const std::string* hostName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_getComputeResourceDescriptionFromHostName_result__isset {
  _ApplicationCatalogAPI_getComputeResourceDescriptionFromHostName_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_getComputeResourceDescriptionFromHostName_result__isset;

class ApplicationCatalogAPI_getComputeResourceDescriptionFromHostName_result {
 public:

  ApplicationCatalogAPI_getComputeResourceDescriptionFromHostName_result() {
  }

  virtual ~ApplicationCatalogAPI_getComputeResourceDescriptionFromHostName_result() throw() {}

   ::ComputeResourceDescription success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_getComputeResourceDescriptionFromHostName_result__isset __isset;

  void __set_success(const  ::ComputeResourceDescription& val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const ApplicationCatalogAPI_getComputeResourceDescriptionFromHostName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_getComputeResourceDescriptionFromHostName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_getComputeResourceDescriptionFromHostName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_getComputeResourceDescriptionFromHostName_presult__isset {
  _ApplicationCatalogAPI_getComputeResourceDescriptionFromHostName_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_getComputeResourceDescriptionFromHostName_presult__isset;

class ApplicationCatalogAPI_getComputeResourceDescriptionFromHostName_presult {
 public:


  virtual ~ApplicationCatalogAPI_getComputeResourceDescriptionFromHostName_presult() throw() {}

   ::ComputeResourceDescription* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_getComputeResourceDescriptionFromHostName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ApplicationCatalogAPI_addApplicationInterface_args {
 public:

  ApplicationCatalogAPI_addApplicationInterface_args() {
  }

  virtual ~ApplicationCatalogAPI_addApplicationInterface_args() throw() {}

   ::ApplicationInterfaceDescription applicationInterface;

  void __set_applicationInterface(const  ::ApplicationInterfaceDescription& val) {
    applicationInterface = val;
  }

  bool operator == (const ApplicationCatalogAPI_addApplicationInterface_args & rhs) const
  {
    if (!(applicationInterface == rhs.applicationInterface))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_addApplicationInterface_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_addApplicationInterface_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApplicationCatalogAPI_addApplicationInterface_pargs {
 public:


  virtual ~ApplicationCatalogAPI_addApplicationInterface_pargs() throw() {}

  const  ::ApplicationInterfaceDescription* applicationInterface;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_addApplicationInterface_result__isset {
  _ApplicationCatalogAPI_addApplicationInterface_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_addApplicationInterface_result__isset;

class ApplicationCatalogAPI_addApplicationInterface_result {
 public:

  ApplicationCatalogAPI_addApplicationInterface_result() : success() {
  }

  virtual ~ApplicationCatalogAPI_addApplicationInterface_result() throw() {}

  std::string success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_addApplicationInterface_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const ApplicationCatalogAPI_addApplicationInterface_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_addApplicationInterface_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_addApplicationInterface_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_addApplicationInterface_presult__isset {
  _ApplicationCatalogAPI_addApplicationInterface_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_addApplicationInterface_presult__isset;

class ApplicationCatalogAPI_addApplicationInterface_presult {
 public:


  virtual ~ApplicationCatalogAPI_addApplicationInterface_presult() throw() {}

  std::string* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_addApplicationInterface_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ApplicationCatalogAPI_listApplicationInterfaceIds_args {
 public:

  ApplicationCatalogAPI_listApplicationInterfaceIds_args() {
  }

  virtual ~ApplicationCatalogAPI_listApplicationInterfaceIds_args() throw() {}


  bool operator == (const ApplicationCatalogAPI_listApplicationInterfaceIds_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_listApplicationInterfaceIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_listApplicationInterfaceIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApplicationCatalogAPI_listApplicationInterfaceIds_pargs {
 public:


  virtual ~ApplicationCatalogAPI_listApplicationInterfaceIds_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_listApplicationInterfaceIds_result__isset {
  _ApplicationCatalogAPI_listApplicationInterfaceIds_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_listApplicationInterfaceIds_result__isset;

class ApplicationCatalogAPI_listApplicationInterfaceIds_result {
 public:

  ApplicationCatalogAPI_listApplicationInterfaceIds_result() {
  }

  virtual ~ApplicationCatalogAPI_listApplicationInterfaceIds_result() throw() {}

  std::vector<std::string>  success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_listApplicationInterfaceIds_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const ApplicationCatalogAPI_listApplicationInterfaceIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_listApplicationInterfaceIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_listApplicationInterfaceIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_listApplicationInterfaceIds_presult__isset {
  _ApplicationCatalogAPI_listApplicationInterfaceIds_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_listApplicationInterfaceIds_presult__isset;

class ApplicationCatalogAPI_listApplicationInterfaceIds_presult {
 public:


  virtual ~ApplicationCatalogAPI_listApplicationInterfaceIds_presult() throw() {}

  std::vector<std::string> * success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_listApplicationInterfaceIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ApplicationCatalogAPI_getApplicationInterface_args {
 public:

  ApplicationCatalogAPI_getApplicationInterface_args() : applicationInterfaceId() {
  }

  virtual ~ApplicationCatalogAPI_getApplicationInterface_args() throw() {}

  std::string applicationInterfaceId;

  void __set_applicationInterfaceId(const std::string& val) {
    applicationInterfaceId = val;
  }

  bool operator == (const ApplicationCatalogAPI_getApplicationInterface_args & rhs) const
  {
    if (!(applicationInterfaceId == rhs.applicationInterfaceId))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_getApplicationInterface_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_getApplicationInterface_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApplicationCatalogAPI_getApplicationInterface_pargs {
 public:


  virtual ~ApplicationCatalogAPI_getApplicationInterface_pargs() throw() {}

  const std::string* applicationInterfaceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_getApplicationInterface_result__isset {
  _ApplicationCatalogAPI_getApplicationInterface_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_getApplicationInterface_result__isset;

class ApplicationCatalogAPI_getApplicationInterface_result {
 public:

  ApplicationCatalogAPI_getApplicationInterface_result() {
  }

  virtual ~ApplicationCatalogAPI_getApplicationInterface_result() throw() {}

   ::ApplicationInterfaceDescription success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_getApplicationInterface_result__isset __isset;

  void __set_success(const  ::ApplicationInterfaceDescription& val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const ApplicationCatalogAPI_getApplicationInterface_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_getApplicationInterface_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_getApplicationInterface_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_getApplicationInterface_presult__isset {
  _ApplicationCatalogAPI_getApplicationInterface_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_getApplicationInterface_presult__isset;

class ApplicationCatalogAPI_getApplicationInterface_presult {
 public:


  virtual ~ApplicationCatalogAPI_getApplicationInterface_presult() throw() {}

   ::ApplicationInterfaceDescription* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_getApplicationInterface_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ApplicationCatalogAPI_registerAppicationModule_args__isset {
  _ApplicationCatalogAPI_registerAppicationModule_args__isset() : publish(false) {}
  bool publish;
} _ApplicationCatalogAPI_registerAppicationModule_args__isset;

class ApplicationCatalogAPI_registerAppicationModule_args {
 public:

  ApplicationCatalogAPI_registerAppicationModule_args() : publish(0) {
  }

  virtual ~ApplicationCatalogAPI_registerAppicationModule_args() throw() {}

   ::ApplicationModule applicationModule;
  bool publish;

  _ApplicationCatalogAPI_registerAppicationModule_args__isset __isset;

  void __set_applicationModule(const  ::ApplicationModule& val) {
    applicationModule = val;
  }

  void __set_publish(const bool val) {
    publish = val;
  }

  bool operator == (const ApplicationCatalogAPI_registerAppicationModule_args & rhs) const
  {
    if (!(applicationModule == rhs.applicationModule))
      return false;
    if (!(publish == rhs.publish))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_registerAppicationModule_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_registerAppicationModule_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApplicationCatalogAPI_registerAppicationModule_pargs {
 public:


  virtual ~ApplicationCatalogAPI_registerAppicationModule_pargs() throw() {}

  const  ::ApplicationModule* applicationModule;
  const bool* publish;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_registerAppicationModule_result__isset {
  _ApplicationCatalogAPI_registerAppicationModule_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_registerAppicationModule_result__isset;

class ApplicationCatalogAPI_registerAppicationModule_result {
 public:

  ApplicationCatalogAPI_registerAppicationModule_result() : success() {
  }

  virtual ~ApplicationCatalogAPI_registerAppicationModule_result() throw() {}

  std::string success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_registerAppicationModule_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const ApplicationCatalogAPI_registerAppicationModule_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_registerAppicationModule_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_registerAppicationModule_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_registerAppicationModule_presult__isset {
  _ApplicationCatalogAPI_registerAppicationModule_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_registerAppicationModule_presult__isset;

class ApplicationCatalogAPI_registerAppicationModule_presult {
 public:


  virtual ~ApplicationCatalogAPI_registerAppicationModule_presult() throw() {}

  std::string* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_registerAppicationModule_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ApplicationCatalogAPI_getAppicationModule_args {
 public:

  ApplicationCatalogAPI_getAppicationModule_args() : appModuleId() {
  }

  virtual ~ApplicationCatalogAPI_getAppicationModule_args() throw() {}

  std::string appModuleId;

  void __set_appModuleId(const std::string& val) {
    appModuleId = val;
  }

  bool operator == (const ApplicationCatalogAPI_getAppicationModule_args & rhs) const
  {
    if (!(appModuleId == rhs.appModuleId))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_getAppicationModule_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_getAppicationModule_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApplicationCatalogAPI_getAppicationModule_pargs {
 public:


  virtual ~ApplicationCatalogAPI_getAppicationModule_pargs() throw() {}

  const std::string* appModuleId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_getAppicationModule_result__isset {
  _ApplicationCatalogAPI_getAppicationModule_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_getAppicationModule_result__isset;

class ApplicationCatalogAPI_getAppicationModule_result {
 public:

  ApplicationCatalogAPI_getAppicationModule_result() {
  }

  virtual ~ApplicationCatalogAPI_getAppicationModule_result() throw() {}

   ::ApplicationModule success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_getAppicationModule_result__isset __isset;

  void __set_success(const  ::ApplicationModule& val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const ApplicationCatalogAPI_getAppicationModule_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_getAppicationModule_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_getAppicationModule_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_getAppicationModule_presult__isset {
  _ApplicationCatalogAPI_getAppicationModule_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_getAppicationModule_presult__isset;

class ApplicationCatalogAPI_getAppicationModule_presult {
 public:


  virtual ~ApplicationCatalogAPI_getAppicationModule_presult() throw() {}

   ::ApplicationModule* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_getAppicationModule_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ApplicationCatalogAPI_updateAppicationModule_args {
 public:

  ApplicationCatalogAPI_updateAppicationModule_args() : appModuleId() {
  }

  virtual ~ApplicationCatalogAPI_updateAppicationModule_args() throw() {}

  std::string appModuleId;
   ::ApplicationModule applicationModule;

  void __set_appModuleId(const std::string& val) {
    appModuleId = val;
  }

  void __set_applicationModule(const  ::ApplicationModule& val) {
    applicationModule = val;
  }

  bool operator == (const ApplicationCatalogAPI_updateAppicationModule_args & rhs) const
  {
    if (!(appModuleId == rhs.appModuleId))
      return false;
    if (!(applicationModule == rhs.applicationModule))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_updateAppicationModule_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_updateAppicationModule_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApplicationCatalogAPI_updateAppicationModule_pargs {
 public:


  virtual ~ApplicationCatalogAPI_updateAppicationModule_pargs() throw() {}

  const std::string* appModuleId;
  const  ::ApplicationModule* applicationModule;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_updateAppicationModule_result__isset {
  _ApplicationCatalogAPI_updateAppicationModule_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_updateAppicationModule_result__isset;

class ApplicationCatalogAPI_updateAppicationModule_result {
 public:

  ApplicationCatalogAPI_updateAppicationModule_result() : success(0) {
  }

  virtual ~ApplicationCatalogAPI_updateAppicationModule_result() throw() {}

  bool success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_updateAppicationModule_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const ApplicationCatalogAPI_updateAppicationModule_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_updateAppicationModule_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_updateAppicationModule_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_updateAppicationModule_presult__isset {
  _ApplicationCatalogAPI_updateAppicationModule_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_updateAppicationModule_presult__isset;

class ApplicationCatalogAPI_updateAppicationModule_presult {
 public:


  virtual ~ApplicationCatalogAPI_updateAppicationModule_presult() throw() {}

  bool* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_updateAppicationModule_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ApplicationCatalogAPI_deleteAppicationModule_args {
 public:

  ApplicationCatalogAPI_deleteAppicationModule_args() : appModuleId() {
  }

  virtual ~ApplicationCatalogAPI_deleteAppicationModule_args() throw() {}

  std::string appModuleId;

  void __set_appModuleId(const std::string& val) {
    appModuleId = val;
  }

  bool operator == (const ApplicationCatalogAPI_deleteAppicationModule_args & rhs) const
  {
    if (!(appModuleId == rhs.appModuleId))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_deleteAppicationModule_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_deleteAppicationModule_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApplicationCatalogAPI_deleteAppicationModule_pargs {
 public:


  virtual ~ApplicationCatalogAPI_deleteAppicationModule_pargs() throw() {}

  const std::string* appModuleId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_deleteAppicationModule_result__isset {
  _ApplicationCatalogAPI_deleteAppicationModule_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_deleteAppicationModule_result__isset;

class ApplicationCatalogAPI_deleteAppicationModule_result {
 public:

  ApplicationCatalogAPI_deleteAppicationModule_result() : success(0) {
  }

  virtual ~ApplicationCatalogAPI_deleteAppicationModule_result() throw() {}

  bool success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_deleteAppicationModule_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const ApplicationCatalogAPI_deleteAppicationModule_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_deleteAppicationModule_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_deleteAppicationModule_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_deleteAppicationModule_presult__isset {
  _ApplicationCatalogAPI_deleteAppicationModule_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_deleteAppicationModule_presult__isset;

class ApplicationCatalogAPI_deleteAppicationModule_presult {
 public:


  virtual ~ApplicationCatalogAPI_deleteAppicationModule_presult() throw() {}

  bool* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_deleteAppicationModule_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ApplicationCatalogAPI_addApplicationDeployment_args {
 public:

  ApplicationCatalogAPI_addApplicationDeployment_args() : applicationInterfaceId() {
  }

  virtual ~ApplicationCatalogAPI_addApplicationDeployment_args() throw() {}

  std::string applicationInterfaceId;
   ::ApplicationDeploymentDescription applicationDeployment;

  void __set_applicationInterfaceId(const std::string& val) {
    applicationInterfaceId = val;
  }

  void __set_applicationDeployment(const  ::ApplicationDeploymentDescription& val) {
    applicationDeployment = val;
  }

  bool operator == (const ApplicationCatalogAPI_addApplicationDeployment_args & rhs) const
  {
    if (!(applicationInterfaceId == rhs.applicationInterfaceId))
      return false;
    if (!(applicationDeployment == rhs.applicationDeployment))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_addApplicationDeployment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_addApplicationDeployment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApplicationCatalogAPI_addApplicationDeployment_pargs {
 public:


  virtual ~ApplicationCatalogAPI_addApplicationDeployment_pargs() throw() {}

  const std::string* applicationInterfaceId;
  const  ::ApplicationDeploymentDescription* applicationDeployment;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_addApplicationDeployment_result__isset {
  _ApplicationCatalogAPI_addApplicationDeployment_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_addApplicationDeployment_result__isset;

class ApplicationCatalogAPI_addApplicationDeployment_result {
 public:

  ApplicationCatalogAPI_addApplicationDeployment_result() : success() {
  }

  virtual ~ApplicationCatalogAPI_addApplicationDeployment_result() throw() {}

  std::string success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_addApplicationDeployment_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const ApplicationCatalogAPI_addApplicationDeployment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_addApplicationDeployment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_addApplicationDeployment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_addApplicationDeployment_presult__isset {
  _ApplicationCatalogAPI_addApplicationDeployment_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_addApplicationDeployment_presult__isset;

class ApplicationCatalogAPI_addApplicationDeployment_presult {
 public:


  virtual ~ApplicationCatalogAPI_addApplicationDeployment_presult() throw() {}

  std::string* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_addApplicationDeployment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ApplicationCatalogAPI_listApplicationDeploymentIds_args {
 public:

  ApplicationCatalogAPI_listApplicationDeploymentIds_args() : applicationInterfaceId() {
  }

  virtual ~ApplicationCatalogAPI_listApplicationDeploymentIds_args() throw() {}

  std::string applicationInterfaceId;

  void __set_applicationInterfaceId(const std::string& val) {
    applicationInterfaceId = val;
  }

  bool operator == (const ApplicationCatalogAPI_listApplicationDeploymentIds_args & rhs) const
  {
    if (!(applicationInterfaceId == rhs.applicationInterfaceId))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_listApplicationDeploymentIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_listApplicationDeploymentIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApplicationCatalogAPI_listApplicationDeploymentIds_pargs {
 public:


  virtual ~ApplicationCatalogAPI_listApplicationDeploymentIds_pargs() throw() {}

  const std::string* applicationInterfaceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_listApplicationDeploymentIds_result__isset {
  _ApplicationCatalogAPI_listApplicationDeploymentIds_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_listApplicationDeploymentIds_result__isset;

class ApplicationCatalogAPI_listApplicationDeploymentIds_result {
 public:

  ApplicationCatalogAPI_listApplicationDeploymentIds_result() {
  }

  virtual ~ApplicationCatalogAPI_listApplicationDeploymentIds_result() throw() {}

  std::vector<std::string>  success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_listApplicationDeploymentIds_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const ApplicationCatalogAPI_listApplicationDeploymentIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_listApplicationDeploymentIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_listApplicationDeploymentIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_listApplicationDeploymentIds_presult__isset {
  _ApplicationCatalogAPI_listApplicationDeploymentIds_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_listApplicationDeploymentIds_presult__isset;

class ApplicationCatalogAPI_listApplicationDeploymentIds_presult {
 public:


  virtual ~ApplicationCatalogAPI_listApplicationDeploymentIds_presult() throw() {}

  std::vector<std::string> * success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_listApplicationDeploymentIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ApplicationCatalogAPI_getApplicationDeployment_args {
 public:

  ApplicationCatalogAPI_getApplicationDeployment_args() : applicationInterfaceId(), applicationDeploymentId() {
  }

  virtual ~ApplicationCatalogAPI_getApplicationDeployment_args() throw() {}

  std::string applicationInterfaceId;
  std::string applicationDeploymentId;

  void __set_applicationInterfaceId(const std::string& val) {
    applicationInterfaceId = val;
  }

  void __set_applicationDeploymentId(const std::string& val) {
    applicationDeploymentId = val;
  }

  bool operator == (const ApplicationCatalogAPI_getApplicationDeployment_args & rhs) const
  {
    if (!(applicationInterfaceId == rhs.applicationInterfaceId))
      return false;
    if (!(applicationDeploymentId == rhs.applicationDeploymentId))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_getApplicationDeployment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_getApplicationDeployment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApplicationCatalogAPI_getApplicationDeployment_pargs {
 public:


  virtual ~ApplicationCatalogAPI_getApplicationDeployment_pargs() throw() {}

  const std::string* applicationInterfaceId;
  const std::string* applicationDeploymentId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_getApplicationDeployment_result__isset {
  _ApplicationCatalogAPI_getApplicationDeployment_result__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_getApplicationDeployment_result__isset;

class ApplicationCatalogAPI_getApplicationDeployment_result {
 public:

  ApplicationCatalogAPI_getApplicationDeployment_result() {
  }

  virtual ~ApplicationCatalogAPI_getApplicationDeployment_result() throw() {}

   ::ApplicationDeploymentDescription success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_getApplicationDeployment_result__isset __isset;

  void __set_success(const  ::ApplicationDeploymentDescription& val) {
    success = val;
  }

  void __set_ire(const  ::airavata::api::error::InvalidRequestException& val) {
    ire = val;
  }

  void __set_ace(const  ::airavata::api::error::AiravataClientException& val) {
    ace = val;
  }

  void __set_ase(const  ::airavata::api::error::AiravataSystemException& val) {
    ase = val;
  }

  bool operator == (const ApplicationCatalogAPI_getApplicationDeployment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ire == rhs.ire))
      return false;
    if (!(ace == rhs.ace))
      return false;
    if (!(ase == rhs.ase))
      return false;
    return true;
  }
  bool operator != (const ApplicationCatalogAPI_getApplicationDeployment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplicationCatalogAPI_getApplicationDeployment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApplicationCatalogAPI_getApplicationDeployment_presult__isset {
  _ApplicationCatalogAPI_getApplicationDeployment_presult__isset() : success(false), ire(false), ace(false), ase(false) {}
  bool success;
  bool ire;
  bool ace;
  bool ase;
} _ApplicationCatalogAPI_getApplicationDeployment_presult__isset;

class ApplicationCatalogAPI_getApplicationDeployment_presult {
 public:


  virtual ~ApplicationCatalogAPI_getApplicationDeployment_presult() throw() {}

   ::ApplicationDeploymentDescription* success;
   ::airavata::api::error::InvalidRequestException ire;
   ::airavata::api::error::AiravataClientException ace;
   ::airavata::api::error::AiravataSystemException ase;

  _ApplicationCatalogAPI_getApplicationDeployment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ApplicationCatalogAPIClient : virtual public ApplicationCatalogAPIIf {
 public:
  ApplicationCatalogAPIClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ApplicationCatalogAPIClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetAPIVersion(std::string& _return);
  void send_GetAPIVersion();
  void recv_GetAPIVersion(std::string& _return);
  void addComputeResourceDescription(std::string& _return, const  ::ComputeResourceDescription& computeResourceDescription);
  void send_addComputeResourceDescription(const  ::ComputeResourceDescription& computeResourceDescription);
  void recv_addComputeResourceDescription(std::string& _return);
  void addSSHJobSubmissionProtocol(std::string& _return, const std::string& computeResourceId, const  ::SSHJobSubmission& jobSubmission);
  void send_addSSHJobSubmissionProtocol(const std::string& computeResourceId, const  ::SSHJobSubmission& jobSubmission);
  void recv_addSSHJobSubmissionProtocol(std::string& _return);
  void addGSISSHJobSubmissionProtocol(std::string& _return, const std::string& computeResourceId, const  ::GSISSHJobSubmission& jobSubmission);
  void send_addGSISSHJobSubmissionProtocol(const std::string& computeResourceId, const  ::GSISSHJobSubmission& jobSubmission);
  void recv_addGSISSHJobSubmissionProtocol(std::string& _return);
  void addGlobusJobSubmissionProtocol(std::string& _return, const std::string& computeResourceId, const  ::GlobusJobSubmission& jobSubmission);
  void send_addGlobusJobSubmissionProtocol(const std::string& computeResourceId, const  ::GlobusJobSubmission& jobSubmission);
  void recv_addGlobusJobSubmissionProtocol(std::string& _return);
  void addSCPDataMovementProtocol(std::string& _return, const std::string& computeResourceId, const  ::SCPDataMovement& dataMovement);
  void send_addSCPDataMovementProtocol(const std::string& computeResourceId, const  ::SCPDataMovement& dataMovement);
  void recv_addSCPDataMovementProtocol(std::string& _return);
  void addGridFTPDataMovementProtocol(std::string& _return, const std::string& computeResourceId, const  ::GridFTPDataMovement& dataMovement);
  void send_addGridFTPDataMovementProtocol(const std::string& computeResourceId, const  ::GridFTPDataMovement& dataMovement);
  void recv_addGridFTPDataMovementProtocol(std::string& _return);
  void listComputeResourceDescriptions(std::vector<std::string> & _return);
  void send_listComputeResourceDescriptions();
  void recv_listComputeResourceDescriptions(std::vector<std::string> & _return);
  void getComputeResourceDescription( ::ComputeResourceDescription& _return, const std::string& computeResourceId);
  void send_getComputeResourceDescription(const std::string& computeResourceId);
  void recv_getComputeResourceDescription( ::ComputeResourceDescription& _return);
  void getSSHJobSubmissionProtocol( ::SSHJobSubmission& _return, const std::string& sshJobSubmissionProtocolResourceId);
  void send_getSSHJobSubmissionProtocol(const std::string& sshJobSubmissionProtocolResourceId);
  void recv_getSSHJobSubmissionProtocol( ::SSHJobSubmission& _return);
  void getGSISSHJobSubmissionProtocol( ::GSISSHJobSubmission& _return, const std::string& gsisshJobSubmissionProtocolResourceId);
  void send_getGSISSHJobSubmissionProtocol(const std::string& gsisshJobSubmissionProtocolResourceId);
  void recv_getGSISSHJobSubmissionProtocol( ::GSISSHJobSubmission& _return);
  void getGlobusJobSubmissionProtocol( ::GlobusJobSubmission& _return, const std::string& globusJobSubmissionProtocolResourceId);
  void send_getGlobusJobSubmissionProtocol(const std::string& globusJobSubmissionProtocolResourceId);
  void recv_getGlobusJobSubmissionProtocol( ::GlobusJobSubmission& _return);
  void getSCPDataMovementProtocol( ::SCPDataMovement& _return, const std::string& scpDataMovementResourceId);
  void send_getSCPDataMovementProtocol(const std::string& scpDataMovementResourceId);
  void recv_getSCPDataMovementProtocol( ::SCPDataMovement& _return);
  void getGridFTPDataMovementProtocol( ::GridFTPDataMovement& _return, const std::string& gridFTPDataMovementResourceId);
  void send_getGridFTPDataMovementProtocol(const std::string& gridFTPDataMovementResourceId);
  void recv_getGridFTPDataMovementProtocol( ::GridFTPDataMovement& _return);
  bool isComputeResourceDescriptionRegistered(const std::string& hostName);
  void send_isComputeResourceDescriptionRegistered(const std::string& hostName);
  bool recv_isComputeResourceDescriptionRegistered();
  void getComputeResourceDescriptionFromHostName( ::ComputeResourceDescription& _return, const std::string& hostName);
  void send_getComputeResourceDescriptionFromHostName(const std::string& hostName);
  void recv_getComputeResourceDescriptionFromHostName( ::ComputeResourceDescription& _return);
  void addApplicationInterface(std::string& _return, const  ::ApplicationInterfaceDescription& applicationInterface);
  void send_addApplicationInterface(const  ::ApplicationInterfaceDescription& applicationInterface);
  void recv_addApplicationInterface(std::string& _return);
  void listApplicationInterfaceIds(std::vector<std::string> & _return);
  void send_listApplicationInterfaceIds();
  void recv_listApplicationInterfaceIds(std::vector<std::string> & _return);
  void getApplicationInterface( ::ApplicationInterfaceDescription& _return, const std::string& applicationInterfaceId);
  void send_getApplicationInterface(const std::string& applicationInterfaceId);
  void recv_getApplicationInterface( ::ApplicationInterfaceDescription& _return);
  void registerAppicationModule(std::string& _return, const  ::ApplicationModule& applicationModule, const bool publish);
  void send_registerAppicationModule(const  ::ApplicationModule& applicationModule, const bool publish);
  void recv_registerAppicationModule(std::string& _return);
  void getAppicationModule( ::ApplicationModule& _return, const std::string& appModuleId);
  void send_getAppicationModule(const std::string& appModuleId);
  void recv_getAppicationModule( ::ApplicationModule& _return);
  bool updateAppicationModule(const std::string& appModuleId, const  ::ApplicationModule& applicationModule);
  void send_updateAppicationModule(const std::string& appModuleId, const  ::ApplicationModule& applicationModule);
  bool recv_updateAppicationModule();
  bool deleteAppicationModule(const std::string& appModuleId);
  void send_deleteAppicationModule(const std::string& appModuleId);
  bool recv_deleteAppicationModule();
  void addApplicationDeployment(std::string& _return, const std::string& applicationInterfaceId, const  ::ApplicationDeploymentDescription& applicationDeployment);
  void send_addApplicationDeployment(const std::string& applicationInterfaceId, const  ::ApplicationDeploymentDescription& applicationDeployment);
  void recv_addApplicationDeployment(std::string& _return);
  void listApplicationDeploymentIds(std::vector<std::string> & _return, const std::string& applicationInterfaceId);
  void send_listApplicationDeploymentIds(const std::string& applicationInterfaceId);
  void recv_listApplicationDeploymentIds(std::vector<std::string> & _return);
  void getApplicationDeployment( ::ApplicationDeploymentDescription& _return, const std::string& applicationInterfaceId, const std::string& applicationDeploymentId);
  void send_getApplicationDeployment(const std::string& applicationInterfaceId, const std::string& applicationDeploymentId);
  void recv_getApplicationDeployment( ::ApplicationDeploymentDescription& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ApplicationCatalogAPIProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ApplicationCatalogAPIIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ApplicationCatalogAPIProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_GetAPIVersion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addComputeResourceDescription(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addSSHJobSubmissionProtocol(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addGSISSHJobSubmissionProtocol(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addGlobusJobSubmissionProtocol(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addSCPDataMovementProtocol(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addGridFTPDataMovementProtocol(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_listComputeResourceDescriptions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getComputeResourceDescription(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSSHJobSubmissionProtocol(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getGSISSHJobSubmissionProtocol(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getGlobusJobSubmissionProtocol(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSCPDataMovementProtocol(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getGridFTPDataMovementProtocol(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isComputeResourceDescriptionRegistered(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getComputeResourceDescriptionFromHostName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addApplicationInterface(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_listApplicationInterfaceIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getApplicationInterface(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerAppicationModule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAppicationModule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateAppicationModule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteAppicationModule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addApplicationDeployment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_listApplicationDeploymentIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getApplicationDeployment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ApplicationCatalogAPIProcessor(boost::shared_ptr<ApplicationCatalogAPIIf> iface) :
    iface_(iface) {
    processMap_["GetAPIVersion"] = &ApplicationCatalogAPIProcessor::process_GetAPIVersion;
    processMap_["addComputeResourceDescription"] = &ApplicationCatalogAPIProcessor::process_addComputeResourceDescription;
    processMap_["addSSHJobSubmissionProtocol"] = &ApplicationCatalogAPIProcessor::process_addSSHJobSubmissionProtocol;
    processMap_["addGSISSHJobSubmissionProtocol"] = &ApplicationCatalogAPIProcessor::process_addGSISSHJobSubmissionProtocol;
    processMap_["addGlobusJobSubmissionProtocol"] = &ApplicationCatalogAPIProcessor::process_addGlobusJobSubmissionProtocol;
    processMap_["addSCPDataMovementProtocol"] = &ApplicationCatalogAPIProcessor::process_addSCPDataMovementProtocol;
    processMap_["addGridFTPDataMovementProtocol"] = &ApplicationCatalogAPIProcessor::process_addGridFTPDataMovementProtocol;
    processMap_["listComputeResourceDescriptions"] = &ApplicationCatalogAPIProcessor::process_listComputeResourceDescriptions;
    processMap_["getComputeResourceDescription"] = &ApplicationCatalogAPIProcessor::process_getComputeResourceDescription;
    processMap_["getSSHJobSubmissionProtocol"] = &ApplicationCatalogAPIProcessor::process_getSSHJobSubmissionProtocol;
    processMap_["getGSISSHJobSubmissionProtocol"] = &ApplicationCatalogAPIProcessor::process_getGSISSHJobSubmissionProtocol;
    processMap_["getGlobusJobSubmissionProtocol"] = &ApplicationCatalogAPIProcessor::process_getGlobusJobSubmissionProtocol;
    processMap_["getSCPDataMovementProtocol"] = &ApplicationCatalogAPIProcessor::process_getSCPDataMovementProtocol;
    processMap_["getGridFTPDataMovementProtocol"] = &ApplicationCatalogAPIProcessor::process_getGridFTPDataMovementProtocol;
    processMap_["isComputeResourceDescriptionRegistered"] = &ApplicationCatalogAPIProcessor::process_isComputeResourceDescriptionRegistered;
    processMap_["getComputeResourceDescriptionFromHostName"] = &ApplicationCatalogAPIProcessor::process_getComputeResourceDescriptionFromHostName;
    processMap_["addApplicationInterface"] = &ApplicationCatalogAPIProcessor::process_addApplicationInterface;
    processMap_["listApplicationInterfaceIds"] = &ApplicationCatalogAPIProcessor::process_listApplicationInterfaceIds;
    processMap_["getApplicationInterface"] = &ApplicationCatalogAPIProcessor::process_getApplicationInterface;
    processMap_["registerAppicationModule"] = &ApplicationCatalogAPIProcessor::process_registerAppicationModule;
    processMap_["getAppicationModule"] = &ApplicationCatalogAPIProcessor::process_getAppicationModule;
    processMap_["updateAppicationModule"] = &ApplicationCatalogAPIProcessor::process_updateAppicationModule;
    processMap_["deleteAppicationModule"] = &ApplicationCatalogAPIProcessor::process_deleteAppicationModule;
    processMap_["addApplicationDeployment"] = &ApplicationCatalogAPIProcessor::process_addApplicationDeployment;
    processMap_["listApplicationDeploymentIds"] = &ApplicationCatalogAPIProcessor::process_listApplicationDeploymentIds;
    processMap_["getApplicationDeployment"] = &ApplicationCatalogAPIProcessor::process_getApplicationDeployment;
  }

  virtual ~ApplicationCatalogAPIProcessor() {}
};

class ApplicationCatalogAPIProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ApplicationCatalogAPIProcessorFactory(const ::boost::shared_ptr< ApplicationCatalogAPIIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ApplicationCatalogAPIIfFactory > handlerFactory_;
};

class ApplicationCatalogAPIMultiface : virtual public ApplicationCatalogAPIIf {
 public:
  ApplicationCatalogAPIMultiface(std::vector<boost::shared_ptr<ApplicationCatalogAPIIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ApplicationCatalogAPIMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ApplicationCatalogAPIIf> > ifaces_;
  ApplicationCatalogAPIMultiface() {}
  void add(boost::shared_ptr<ApplicationCatalogAPIIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void GetAPIVersion(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAPIVersion(_return);
    }
    ifaces_[i]->GetAPIVersion(_return);
    return;
  }

  void addComputeResourceDescription(std::string& _return, const  ::ComputeResourceDescription& computeResourceDescription) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addComputeResourceDescription(_return, computeResourceDescription);
    }
    ifaces_[i]->addComputeResourceDescription(_return, computeResourceDescription);
    return;
  }

  void addSSHJobSubmissionProtocol(std::string& _return, const std::string& computeResourceId, const  ::SSHJobSubmission& jobSubmission) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addSSHJobSubmissionProtocol(_return, computeResourceId, jobSubmission);
    }
    ifaces_[i]->addSSHJobSubmissionProtocol(_return, computeResourceId, jobSubmission);
    return;
  }

  void addGSISSHJobSubmissionProtocol(std::string& _return, const std::string& computeResourceId, const  ::GSISSHJobSubmission& jobSubmission) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addGSISSHJobSubmissionProtocol(_return, computeResourceId, jobSubmission);
    }
    ifaces_[i]->addGSISSHJobSubmissionProtocol(_return, computeResourceId, jobSubmission);
    return;
  }

  void addGlobusJobSubmissionProtocol(std::string& _return, const std::string& computeResourceId, const  ::GlobusJobSubmission& jobSubmission) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addGlobusJobSubmissionProtocol(_return, computeResourceId, jobSubmission);
    }
    ifaces_[i]->addGlobusJobSubmissionProtocol(_return, computeResourceId, jobSubmission);
    return;
  }

  void addSCPDataMovementProtocol(std::string& _return, const std::string& computeResourceId, const  ::SCPDataMovement& dataMovement) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addSCPDataMovementProtocol(_return, computeResourceId, dataMovement);
    }
    ifaces_[i]->addSCPDataMovementProtocol(_return, computeResourceId, dataMovement);
    return;
  }

  void addGridFTPDataMovementProtocol(std::string& _return, const std::string& computeResourceId, const  ::GridFTPDataMovement& dataMovement) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addGridFTPDataMovementProtocol(_return, computeResourceId, dataMovement);
    }
    ifaces_[i]->addGridFTPDataMovementProtocol(_return, computeResourceId, dataMovement);
    return;
  }

  void listComputeResourceDescriptions(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->listComputeResourceDescriptions(_return);
    }
    ifaces_[i]->listComputeResourceDescriptions(_return);
    return;
  }

  void getComputeResourceDescription( ::ComputeResourceDescription& _return, const std::string& computeResourceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getComputeResourceDescription(_return, computeResourceId);
    }
    ifaces_[i]->getComputeResourceDescription(_return, computeResourceId);
    return;
  }

  void getSSHJobSubmissionProtocol( ::SSHJobSubmission& _return, const std::string& sshJobSubmissionProtocolResourceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSSHJobSubmissionProtocol(_return, sshJobSubmissionProtocolResourceId);
    }
    ifaces_[i]->getSSHJobSubmissionProtocol(_return, sshJobSubmissionProtocolResourceId);
    return;
  }

  void getGSISSHJobSubmissionProtocol( ::GSISSHJobSubmission& _return, const std::string& gsisshJobSubmissionProtocolResourceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getGSISSHJobSubmissionProtocol(_return, gsisshJobSubmissionProtocolResourceId);
    }
    ifaces_[i]->getGSISSHJobSubmissionProtocol(_return, gsisshJobSubmissionProtocolResourceId);
    return;
  }

  void getGlobusJobSubmissionProtocol( ::GlobusJobSubmission& _return, const std::string& globusJobSubmissionProtocolResourceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getGlobusJobSubmissionProtocol(_return, globusJobSubmissionProtocolResourceId);
    }
    ifaces_[i]->getGlobusJobSubmissionProtocol(_return, globusJobSubmissionProtocolResourceId);
    return;
  }

  void getSCPDataMovementProtocol( ::SCPDataMovement& _return, const std::string& scpDataMovementResourceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSCPDataMovementProtocol(_return, scpDataMovementResourceId);
    }
    ifaces_[i]->getSCPDataMovementProtocol(_return, scpDataMovementResourceId);
    return;
  }

  void getGridFTPDataMovementProtocol( ::GridFTPDataMovement& _return, const std::string& gridFTPDataMovementResourceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getGridFTPDataMovementProtocol(_return, gridFTPDataMovementResourceId);
    }
    ifaces_[i]->getGridFTPDataMovementProtocol(_return, gridFTPDataMovementResourceId);
    return;
  }

  bool isComputeResourceDescriptionRegistered(const std::string& hostName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isComputeResourceDescriptionRegistered(hostName);
    }
    return ifaces_[i]->isComputeResourceDescriptionRegistered(hostName);
  }

  void getComputeResourceDescriptionFromHostName( ::ComputeResourceDescription& _return, const std::string& hostName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getComputeResourceDescriptionFromHostName(_return, hostName);
    }
    ifaces_[i]->getComputeResourceDescriptionFromHostName(_return, hostName);
    return;
  }

  void addApplicationInterface(std::string& _return, const  ::ApplicationInterfaceDescription& applicationInterface) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addApplicationInterface(_return, applicationInterface);
    }
    ifaces_[i]->addApplicationInterface(_return, applicationInterface);
    return;
  }

  void listApplicationInterfaceIds(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->listApplicationInterfaceIds(_return);
    }
    ifaces_[i]->listApplicationInterfaceIds(_return);
    return;
  }

  void getApplicationInterface( ::ApplicationInterfaceDescription& _return, const std::string& applicationInterfaceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getApplicationInterface(_return, applicationInterfaceId);
    }
    ifaces_[i]->getApplicationInterface(_return, applicationInterfaceId);
    return;
  }

  void registerAppicationModule(std::string& _return, const  ::ApplicationModule& applicationModule, const bool publish) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerAppicationModule(_return, applicationModule, publish);
    }
    ifaces_[i]->registerAppicationModule(_return, applicationModule, publish);
    return;
  }

  void getAppicationModule( ::ApplicationModule& _return, const std::string& appModuleId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAppicationModule(_return, appModuleId);
    }
    ifaces_[i]->getAppicationModule(_return, appModuleId);
    return;
  }

  bool updateAppicationModule(const std::string& appModuleId, const  ::ApplicationModule& applicationModule) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateAppicationModule(appModuleId, applicationModule);
    }
    return ifaces_[i]->updateAppicationModule(appModuleId, applicationModule);
  }

  bool deleteAppicationModule(const std::string& appModuleId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteAppicationModule(appModuleId);
    }
    return ifaces_[i]->deleteAppicationModule(appModuleId);
  }

  void addApplicationDeployment(std::string& _return, const std::string& applicationInterfaceId, const  ::ApplicationDeploymentDescription& applicationDeployment) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addApplicationDeployment(_return, applicationInterfaceId, applicationDeployment);
    }
    ifaces_[i]->addApplicationDeployment(_return, applicationInterfaceId, applicationDeployment);
    return;
  }

  void listApplicationDeploymentIds(std::vector<std::string> & _return, const std::string& applicationInterfaceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->listApplicationDeploymentIds(_return, applicationInterfaceId);
    }
    ifaces_[i]->listApplicationDeploymentIds(_return, applicationInterfaceId);
    return;
  }

  void getApplicationDeployment( ::ApplicationDeploymentDescription& _return, const std::string& applicationInterfaceId, const std::string& applicationDeploymentId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getApplicationDeployment(_return, applicationInterfaceId, applicationDeploymentId);
    }
    ifaces_[i]->getApplicationDeployment(_return, applicationInterfaceId, applicationDeploymentId);
    return;
  }

};

}}} // namespace

#endif
