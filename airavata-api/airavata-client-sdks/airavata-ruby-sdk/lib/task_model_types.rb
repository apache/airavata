#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'airavata_commons_types'
require 'compute_resource_model_types'
require 'data_movement_models_types'
require 'application_io_models_types'
require 'status_models_types'
require 'job_model_types'


module TaskTypes
  ENV_SETUP = 0
  DATA_STAGING = 1
  JOB_SUBMISSION = 2
  ENV_CLEANUP = 3
  MONITORING = 4
  OUTPUT_FETCHING = 5
  VALUE_MAP = {0 => "ENV_SETUP", 1 => "DATA_STAGING", 2 => "JOB_SUBMISSION", 3 => "ENV_CLEANUP", 4 => "MONITORING", 5 => "OUTPUT_FETCHING"}
  VALID_VALUES = Set.new([ENV_SETUP, DATA_STAGING, JOB_SUBMISSION, ENV_CLEANUP, MONITORING, OUTPUT_FETCHING]).freeze
end

module DataStageType
  INPUT = 0
  OUPUT = 1
  ARCHIVE_OUTPUT = 2
  VALUE_MAP = {0 => "INPUT", 1 => "OUPUT", 2 => "ARCHIVE_OUTPUT"}
  VALID_VALUES = Set.new([INPUT, OUPUT, ARCHIVE_OUTPUT]).freeze
end

# TaskModel: A structure holding the generic task details.
# 
# taskDetail:
#   A friendly description of the task, usally used to communicate information to users.
# 
# subTaskModel:
#   A generic byte object for the Task developer to store internal serialized data into registry catalogs.
class TaskModel
  include ::Thrift::Struct, ::Thrift::Struct_Union
  TASKID = 1
  TASKTYPE = 2
  PARENTPROCESSID = 3
  CREATIONTIME = 4
  LASTUPDATETIME = 5
  TASKSTATUSES = 6
  TASKDETAIL = 7
  SUBTASKMODEL = 8
  TASKERRORS = 9
  JOBS = 10
  MAXRETRY = 11
  CURRENTRETRY = 12

  FIELDS = {
    TASKID => {:type => ::Thrift::Types::STRING, :name => 'taskId', :default => %q"DO_NOT_SET_AT_CLIENTS"},
    TASKTYPE => {:type => ::Thrift::Types::I32, :name => 'taskType', :enum_class => ::TaskTypes},
    PARENTPROCESSID => {:type => ::Thrift::Types::STRING, :name => 'parentProcessId'},
    CREATIONTIME => {:type => ::Thrift::Types::I64, :name => 'creationTime'},
    LASTUPDATETIME => {:type => ::Thrift::Types::I64, :name => 'lastUpdateTime'},
    TASKSTATUSES => {:type => ::Thrift::Types::LIST, :name => 'taskStatuses', :element => {:type => ::Thrift::Types::STRUCT, :class => ::TaskStatus}},
    TASKDETAIL => {:type => ::Thrift::Types::STRING, :name => 'taskDetail', :optional => true},
    SUBTASKMODEL => {:type => ::Thrift::Types::STRING, :name => 'subTaskModel', :binary => true, :optional => true},
    TASKERRORS => {:type => ::Thrift::Types::LIST, :name => 'taskErrors', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ErrorModel}, :optional => true},
    JOBS => {:type => ::Thrift::Types::LIST, :name => 'jobs', :element => {:type => ::Thrift::Types::STRUCT, :class => ::JobModel}, :optional => true},
    MAXRETRY => {:type => ::Thrift::Types::I32, :name => 'maxRetry', :optional => true},
    CURRENTRETRY => {:type => ::Thrift::Types::I32, :name => 'currentRetry', :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field taskId is unset!') unless @taskId
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field taskType is unset!') unless @taskType
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field parentProcessId is unset!') unless @parentProcessId
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field creationTime is unset!') unless @creationTime
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field lastUpdateTime is unset!') unless @lastUpdateTime
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field taskStatuses is unset!') unless @taskStatuses
    unless @taskType.nil? || ::TaskTypes::VALID_VALUES.include?(@taskType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field taskType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class DataStagingTaskModel
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SOURCE = 1
  DESTINATION = 2
  TYPE = 3
  TRANSFERSTARTTIME = 4
  TRANSFERENDTIME = 5
  TRANSFERRATE = 6
  PROCESSINPUT = 7
  PROCESSOUTPUT = 8

  FIELDS = {
    SOURCE => {:type => ::Thrift::Types::STRING, :name => 'source'},
    DESTINATION => {:type => ::Thrift::Types::STRING, :name => 'destination'},
    TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::DataStageType},
    TRANSFERSTARTTIME => {:type => ::Thrift::Types::I64, :name => 'transferStartTime', :optional => true},
    TRANSFERENDTIME => {:type => ::Thrift::Types::I64, :name => 'transferEndTime', :optional => true},
    TRANSFERRATE => {:type => ::Thrift::Types::STRING, :name => 'transferRate', :optional => true},
    PROCESSINPUT => {:type => ::Thrift::Types::STRUCT, :name => 'processInput', :class => ::InputDataObjectType, :optional => true},
    PROCESSOUTPUT => {:type => ::Thrift::Types::STRUCT, :name => 'processOutput', :class => ::OutputDataObjectType, :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field source is unset!') unless @source
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field destination is unset!') unless @destination
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field type is unset!') unless @type
    unless @type.nil? || ::DataStageType::VALID_VALUES.include?(@type)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

# EnvironmentSetupTaskModel: A structure holding the environment creation task details
# 
class EnvironmentSetupTaskModel
  include ::Thrift::Struct, ::Thrift::Struct_Union
  LOCATION = 1
  PROTOCOL = 2

  FIELDS = {
    LOCATION => {:type => ::Thrift::Types::STRING, :name => 'location'},
    PROTOCOL => {:type => ::Thrift::Types::I32, :name => 'protocol', :enum_class => ::SecurityProtocol}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field location is unset!') unless @location
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field protocol is unset!') unless @protocol
    unless @protocol.nil? || ::SecurityProtocol::VALID_VALUES.include?(@protocol)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field protocol!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class JobSubmissionTaskModel
  include ::Thrift::Struct, ::Thrift::Struct_Union
  JOBSUBMISSIONPROTOCOL = 1
  MONITORMODE = 2
  WALLTIME = 3

  FIELDS = {
    JOBSUBMISSIONPROTOCOL => {:type => ::Thrift::Types::I32, :name => 'jobSubmissionProtocol', :enum_class => ::JobSubmissionProtocol},
    MONITORMODE => {:type => ::Thrift::Types::I32, :name => 'monitorMode', :enum_class => ::MonitorMode},
    WALLTIME => {:type => ::Thrift::Types::I32, :name => 'wallTime', :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field jobSubmissionProtocol is unset!') unless @jobSubmissionProtocol
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field monitorMode is unset!') unless @monitorMode
    unless @jobSubmissionProtocol.nil? || ::JobSubmissionProtocol::VALID_VALUES.include?(@jobSubmissionProtocol)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field jobSubmissionProtocol!')
    end
    unless @monitorMode.nil? || ::MonitorMode::VALID_VALUES.include?(@monitorMode)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field monitorMode!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class MonitorTaskModel
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MONITORMODE = 1

  FIELDS = {
    MONITORMODE => {:type => ::Thrift::Types::I32, :name => 'monitorMode', :enum_class => ::MonitorMode}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field monitorMode is unset!') unless @monitorMode
    unless @monitorMode.nil? || ::MonitorMode::VALID_VALUES.include?(@monitorMode)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field monitorMode!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

