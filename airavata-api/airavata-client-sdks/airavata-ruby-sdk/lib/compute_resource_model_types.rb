#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'airavata_commons_types'
require 'parallelism_model_types'
require 'data_movement_models_types'


module ResourceJobManagerType
  FORK = 0
  PBS = 1
  SLURM = 2
  LSF = 3
  UGE = 4
  CLOUD = 5
  AIRAVATA_CUSTOM = 6
  VALUE_MAP = {0 => "FORK", 1 => "PBS", 2 => "SLURM", 3 => "LSF", 4 => "UGE", 5 => "CLOUD", 6 => "AIRAVATA_CUSTOM"}
  VALID_VALUES = Set.new([FORK, PBS, SLURM, LSF, UGE, CLOUD, AIRAVATA_CUSTOM]).freeze
end

module JobManagerCommand
  SUBMISSION = 0
  JOB_MONITORING = 1
  DELETION = 2
  CHECK_JOB = 3
  SHOW_QUEUE = 4
  SHOW_RESERVATION = 5
  SHOW_START = 6
  VALUE_MAP = {0 => "SUBMISSION", 1 => "JOB_MONITORING", 2 => "DELETION", 3 => "CHECK_JOB", 4 => "SHOW_QUEUE", 5 => "SHOW_RESERVATION", 6 => "SHOW_START"}
  VALID_VALUES = Set.new([SUBMISSION, JOB_MONITORING, DELETION, CHECK_JOB, SHOW_QUEUE, SHOW_RESERVATION, SHOW_START]).freeze
end

module FileSystems
  HOME = 0
  WORK = 1
  LOCALTMP = 2
  SCRATCH = 3
  ARCHIVE = 4
  VALUE_MAP = {0 => "HOME", 1 => "WORK", 2 => "LOCALTMP", 3 => "SCRATCH", 4 => "ARCHIVE"}
  VALID_VALUES = Set.new([HOME, WORK, LOCALTMP, SCRATCH, ARCHIVE]).freeze
end

module JobSubmissionProtocol
  LOCAL = 0
  SSH = 1
  GLOBUS = 2
  UNICORE = 3
  CLOUD = 4
  SSH_FORK = 5
  LOCAL_FORK = 6
  VALUE_MAP = {0 => "LOCAL", 1 => "SSH", 2 => "GLOBUS", 3 => "UNICORE", 4 => "CLOUD", 5 => "SSH_FORK", 6 => "LOCAL_FORK"}
  VALID_VALUES = Set.new([LOCAL, SSH, GLOBUS, UNICORE, CLOUD, SSH_FORK, LOCAL_FORK]).freeze
end

module MonitorMode
  POLL_JOB_MANAGER = 0
  CLOUD_JOB_MONITOR = 1
  JOB_EMAIL_NOTIFICATION_MONITOR = 2
  XSEDE_AMQP_SUBSCRIBE = 3
  FORK = 4
  LOCAL = 5
  VALUE_MAP = {0 => "POLL_JOB_MANAGER", 1 => "CLOUD_JOB_MONITOR", 2 => "JOB_EMAIL_NOTIFICATION_MONITOR", 3 => "XSEDE_AMQP_SUBSCRIBE", 4 => "FORK", 5 => "LOCAL"}
  VALID_VALUES = Set.new([POLL_JOB_MANAGER, CLOUD_JOB_MONITOR, JOB_EMAIL_NOTIFICATION_MONITOR, XSEDE_AMQP_SUBSCRIBE, FORK, LOCAL]).freeze
end

module DMType
  COMPUTE_RESOURCE = 0
  STORAGE_RESOURCE = 1
  VALUE_MAP = {0 => "COMPUTE_RESOURCE", 1 => "STORAGE_RESOURCE"}
  VALID_VALUES = Set.new([COMPUTE_RESOURCE, STORAGE_RESOURCE]).freeze
end

module ProviderName
  EC2 = 0
  AWSEC2 = 1
  RACKSPACE = 2
  VALUE_MAP = {0 => "EC2", 1 => "AWSEC2", 2 => "RACKSPACE"}
  VALID_VALUES = Set.new([EC2, AWSEC2, RACKSPACE]).freeze
end

# Resource Job Manager Information
# 
# resourceJobManagerType:
#  A typical HPC cluster has a single Job Manager to manage the resources.
# 
# pushMonitoringEndpoint:
#  If the job manager pushes out state changes to a database or bus, specify the service endpoint.
#   Ex: Moab Web Service, Moab MongoDB URL, AMQP (GLUE2) Broker
# 
# jobManagerBinPath:
#  Path to the Job Manager Installation Binary directory.
# 
# jobManagerCommands:
#  An enumeration of commonly used manager commands.
# 
class ResourceJobManager
  include ::Thrift::Struct, ::Thrift::Struct_Union
  RESOURCEJOBMANAGERID = 1
  RESOURCEJOBMANAGERTYPE = 2
  PUSHMONITORINGENDPOINT = 3
  JOBMANAGERBINPATH = 4
  JOBMANAGERCOMMANDS = 5
  PARALLELISMPREFIX = 6

  FIELDS = {
    RESOURCEJOBMANAGERID => {:type => ::Thrift::Types::STRING, :name => 'resourceJobManagerId', :default => %q"DO_NOT_SET_AT_CLIENTS"},
    RESOURCEJOBMANAGERTYPE => {:type => ::Thrift::Types::I32, :name => 'resourceJobManagerType', :enum_class => ::ResourceJobManagerType},
    PUSHMONITORINGENDPOINT => {:type => ::Thrift::Types::STRING, :name => 'pushMonitoringEndpoint', :optional => true},
    JOBMANAGERBINPATH => {:type => ::Thrift::Types::STRING, :name => 'jobManagerBinPath', :optional => true},
    JOBMANAGERCOMMANDS => {:type => ::Thrift::Types::MAP, :name => 'jobManagerCommands', :key => {:type => ::Thrift::Types::I32, :enum_class => ::JobManagerCommand}, :value => {:type => ::Thrift::Types::STRING}, :optional => true},
    PARALLELISMPREFIX => {:type => ::Thrift::Types::MAP, :name => 'parallelismPrefix', :key => {:type => ::Thrift::Types::I32, :enum_class => ::ApplicationParallelismType}, :value => {:type => ::Thrift::Types::STRING}, :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field resourceJobManagerId is unset!') unless @resourceJobManagerId
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field resourceJobManagerType is unset!') unless @resourceJobManagerType
    unless @resourceJobManagerType.nil? || ::ResourceJobManagerType::VALID_VALUES.include?(@resourceJobManagerType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field resourceJobManagerType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

# Batch Queue Information on SuperComputers
# 
# maxRunTime:
#  Maximum allowed run time in hours.
class BatchQueue
  include ::Thrift::Struct, ::Thrift::Struct_Union
  QUEUENAME = 1
  QUEUEDESCRIPTION = 2
  MAXRUNTIME = 3
  MAXNODES = 4
  MAXPROCESSORS = 5
  MAXJOBSINQUEUE = 6
  MAXMEMORY = 7
  CPUPERNODE = 8
  DEFAULTNODECOUNT = 9
  DEFAULTCPUCOUNT = 10
  DEFAULTWALLTIME = 11
  QUEUESPECIFICMACROS = 12
  ISDEFAULTQUEUE = 13

  FIELDS = {
    QUEUENAME => {:type => ::Thrift::Types::STRING, :name => 'queueName'},
    QUEUEDESCRIPTION => {:type => ::Thrift::Types::STRING, :name => 'queueDescription', :optional => true},
    MAXRUNTIME => {:type => ::Thrift::Types::I32, :name => 'maxRunTime', :optional => true},
    MAXNODES => {:type => ::Thrift::Types::I32, :name => 'maxNodes', :optional => true},
    MAXPROCESSORS => {:type => ::Thrift::Types::I32, :name => 'maxProcessors', :optional => true},
    MAXJOBSINQUEUE => {:type => ::Thrift::Types::I32, :name => 'maxJobsInQueue', :optional => true},
    MAXMEMORY => {:type => ::Thrift::Types::I32, :name => 'maxMemory', :optional => true},
    CPUPERNODE => {:type => ::Thrift::Types::I32, :name => 'cpuPerNode', :optional => true},
    DEFAULTNODECOUNT => {:type => ::Thrift::Types::I32, :name => 'defaultNodeCount', :optional => true},
    DEFAULTCPUCOUNT => {:type => ::Thrift::Types::I32, :name => 'defaultCPUCount', :optional => true},
    DEFAULTWALLTIME => {:type => ::Thrift::Types::I32, :name => 'defaultWalltime', :optional => true},
    QUEUESPECIFICMACROS => {:type => ::Thrift::Types::STRING, :name => 'queueSpecificMacros', :optional => true},
    ISDEFAULTQUEUE => {:type => ::Thrift::Types::BOOL, :name => 'isDefaultQueue', :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field queueName is unset!') unless @queueName
  end

  ::Thrift::Struct.generate_accessors self
end

# Locally Fork Jobs as OS processes
# 
# alternativeSSHHostName:
#  If the login to ssh is different than the hostname itself, specify it here
# 
# sshPort:
#  If a non-default port needs to used, specify it.
class LOCALSubmission
  include ::Thrift::Struct, ::Thrift::Struct_Union
  JOBSUBMISSIONINTERFACEID = 1
  RESOURCEJOBMANAGER = 2
  SECURITYPROTOCOL = 3

  FIELDS = {
    JOBSUBMISSIONINTERFACEID => {:type => ::Thrift::Types::STRING, :name => 'jobSubmissionInterfaceId', :default => %q"DO_NOT_SET_AT_CLIENTS"},
    RESOURCEJOBMANAGER => {:type => ::Thrift::Types::STRUCT, :name => 'resourceJobManager', :class => ::ResourceJobManager},
    SECURITYPROTOCOL => {:type => ::Thrift::Types::I32, :name => 'securityProtocol', :enum_class => ::SecurityProtocol}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field jobSubmissionInterfaceId is unset!') unless @jobSubmissionInterfaceId
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field resourceJobManager is unset!') unless @resourceJobManager
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field securityProtocol is unset!') unless @securityProtocol
    unless @securityProtocol.nil? || ::SecurityProtocol::VALID_VALUES.include?(@securityProtocol)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field securityProtocol!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

# Authenticate using Secured Shell
# 
# alternativeSSHHostName:
#  If the login to ssh is different than the hostname itself, specify it here
# 
# sshPort:
#  If a non-default port needs to used, specify it.
# 
# batchQueueEmailSenders:
#  If a resource always sends the monitoring from a specific address, specify the
#   full email address. If a resource sends emails from multiple addresses (
#    example: based on the submitted login node) then use the wildchar * to indicate
#    the same. Example: *@*.example.com or *@example.com
# 
class SSHJobSubmission
  include ::Thrift::Struct, ::Thrift::Struct_Union
  JOBSUBMISSIONINTERFACEID = 1
  SECURITYPROTOCOL = 2
  RESOURCEJOBMANAGER = 3
  ALTERNATIVESSHHOSTNAME = 4
  SSHPORT = 5
  MONITORMODE = 6
  BATCHQUEUEEMAILSENDERS = 7

  FIELDS = {
    JOBSUBMISSIONINTERFACEID => {:type => ::Thrift::Types::STRING, :name => 'jobSubmissionInterfaceId', :default => %q"DO_NOT_SET_AT_CLIENTS"},
    SECURITYPROTOCOL => {:type => ::Thrift::Types::I32, :name => 'securityProtocol', :enum_class => ::SecurityProtocol},
    RESOURCEJOBMANAGER => {:type => ::Thrift::Types::STRUCT, :name => 'resourceJobManager', :class => ::ResourceJobManager},
    ALTERNATIVESSHHOSTNAME => {:type => ::Thrift::Types::STRING, :name => 'alternativeSSHHostName', :optional => true},
    SSHPORT => {:type => ::Thrift::Types::I32, :name => 'sshPort', :default => 22, :optional => true},
    MONITORMODE => {:type => ::Thrift::Types::I32, :name => 'monitorMode', :optional => true, :enum_class => ::MonitorMode},
    BATCHQUEUEEMAILSENDERS => {:type => ::Thrift::Types::LIST, :name => 'batchQueueEmailSenders', :element => {:type => ::Thrift::Types::STRING}, :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field jobSubmissionInterfaceId is unset!') unless @jobSubmissionInterfaceId
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field securityProtocol is unset!') unless @securityProtocol
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field resourceJobManager is unset!') unless @resourceJobManager
    unless @securityProtocol.nil? || ::SecurityProtocol::VALID_VALUES.include?(@securityProtocol)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field securityProtocol!')
    end
    unless @monitorMode.nil? || ::MonitorMode::VALID_VALUES.include?(@monitorMode)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field monitorMode!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class GlobusJobSubmission
  include ::Thrift::Struct, ::Thrift::Struct_Union
  JOBSUBMISSIONINTERFACEID = 1
  SECURITYPROTOCOL = 2
  GLOBUSGATEKEEPERENDPOINT = 3

  FIELDS = {
    JOBSUBMISSIONINTERFACEID => {:type => ::Thrift::Types::STRING, :name => 'jobSubmissionInterfaceId', :default => %q"DO_NOT_SET_AT_CLIENTS"},
    SECURITYPROTOCOL => {:type => ::Thrift::Types::I32, :name => 'securityProtocol', :enum_class => ::SecurityProtocol},
    GLOBUSGATEKEEPERENDPOINT => {:type => ::Thrift::Types::LIST, :name => 'globusGateKeeperEndPoint', :element => {:type => ::Thrift::Types::STRING}, :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field jobSubmissionInterfaceId is unset!') unless @jobSubmissionInterfaceId
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field securityProtocol is unset!') unless @securityProtocol
    unless @securityProtocol.nil? || ::SecurityProtocol::VALID_VALUES.include?(@securityProtocol)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field securityProtocol!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

# Unicore Job Submission
# 
# unicoreEndPointURL:
#  unicoreGateway End Point. The provider will query this service to fetch required service end points.
# authenticationMode
#  The authenticationMode defines the way certificate is fetched.
class UnicoreJobSubmission
  include ::Thrift::Struct, ::Thrift::Struct_Union
  JOBSUBMISSIONINTERFACEID = 1
  SECURITYPROTOCOL = 2
  UNICOREENDPOINTURL = 3

  FIELDS = {
    JOBSUBMISSIONINTERFACEID => {:type => ::Thrift::Types::STRING, :name => 'jobSubmissionInterfaceId', :default => %q"DO_NOT_SET_AT_CLIENTS"},
    SECURITYPROTOCOL => {:type => ::Thrift::Types::I32, :name => 'securityProtocol', :enum_class => ::SecurityProtocol},
    UNICOREENDPOINTURL => {:type => ::Thrift::Types::STRING, :name => 'unicoreEndPointURL'}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field jobSubmissionInterfaceId is unset!') unless @jobSubmissionInterfaceId
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field securityProtocol is unset!') unless @securityProtocol
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field unicoreEndPointURL is unset!') unless @unicoreEndPointURL
    unless @securityProtocol.nil? || ::SecurityProtocol::VALID_VALUES.include?(@securityProtocol)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field securityProtocol!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

# Cloud Job Submission
# 
# 
class CloudJobSubmission
  include ::Thrift::Struct, ::Thrift::Struct_Union
  JOBSUBMISSIONINTERFACEID = 1
  SECURITYPROTOCOL = 2
  NODEID = 3
  EXECUTABLETYPE = 4
  PROVIDERNAME = 5
  USERACCOUNTNAME = 6

  FIELDS = {
    JOBSUBMISSIONINTERFACEID => {:type => ::Thrift::Types::STRING, :name => 'jobSubmissionInterfaceId', :default => %q"DO_NOT_SET_AT_CLIENTS"},
    SECURITYPROTOCOL => {:type => ::Thrift::Types::I32, :name => 'securityProtocol', :enum_class => ::SecurityProtocol},
    NODEID => {:type => ::Thrift::Types::STRING, :name => 'nodeId'},
    EXECUTABLETYPE => {:type => ::Thrift::Types::STRING, :name => 'executableType'},
    PROVIDERNAME => {:type => ::Thrift::Types::I32, :name => 'providerName', :enum_class => ::ProviderName},
    USERACCOUNTNAME => {:type => ::Thrift::Types::STRING, :name => 'userAccountName'}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field jobSubmissionInterfaceId is unset!') unless @jobSubmissionInterfaceId
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field securityProtocol is unset!') unless @securityProtocol
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field nodeId is unset!') unless @nodeId
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field executableType is unset!') unless @executableType
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field providerName is unset!') unless @providerName
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field userAccountName is unset!') unless @userAccountName
    unless @securityProtocol.nil? || ::SecurityProtocol::VALID_VALUES.include?(@securityProtocol)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field securityProtocol!')
    end
    unless @providerName.nil? || ::ProviderName::VALID_VALUES.include?(@providerName)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field providerName!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

# Job Submission Interfaces
# 
# jobSubmissionInterfaceId: The Job Submission Interface has to be previously registered and referenced here.
# 
# priorityOrder:
#  For resources with multiple interfaces, the priority order should be selected.
#   Lower the numerical number, higher the priority
# 
class JobSubmissionInterface
  include ::Thrift::Struct, ::Thrift::Struct_Union
  JOBSUBMISSIONINTERFACEID = 1
  JOBSUBMISSIONPROTOCOL = 2
  PRIORITYORDER = 3

  FIELDS = {
    JOBSUBMISSIONINTERFACEID => {:type => ::Thrift::Types::STRING, :name => 'jobSubmissionInterfaceId'},
    JOBSUBMISSIONPROTOCOL => {:type => ::Thrift::Types::I32, :name => 'jobSubmissionProtocol', :enum_class => ::JobSubmissionProtocol},
    PRIORITYORDER => {:type => ::Thrift::Types::I32, :name => 'priorityOrder', :default => 0}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field jobSubmissionInterfaceId is unset!') unless @jobSubmissionInterfaceId
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field jobSubmissionProtocol is unset!') unless @jobSubmissionProtocol
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field priorityOrder is unset!') unless @priorityOrder
    unless @jobSubmissionProtocol.nil? || ::JobSubmissionProtocol::VALID_VALUES.include?(@jobSubmissionProtocol)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field jobSubmissionProtocol!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

# Computational Resource Description
# 
# computeResourceId: Airavata Internal Unique Identifier to distinguish Compute Resource.
# 
# hostName:
#   Fully Qualified Host Name.
# 
# hostAliases:
#   Aliases if any.
# 
# ipAddress:
#   IP Addresses of the Resource.
# 
# resourceDescription:
#  A user friendly description of the resource.
# 
# JobSubmissionProtocols:
#  A computational resources may have one or more ways of submitting Jobs. This structure
#    will hold all available mechanisms to interact with the resource.
#  The key is the priority
# 
# DataMovementProtocol:
#  Option to specify a prefered data movement mechanism of the available options.
# 
# fileSystems:
#  Map of file systems type and the path.
# 
class ComputeResourceDescription
  include ::Thrift::Struct, ::Thrift::Struct_Union
  COMPUTERESOURCEID = 1
  HOSTNAME = 2
  HOSTALIASES = 3
  IPADDRESSES = 4
  RESOURCEDESCRIPTION = 5
  ENABLED = 6
  BATCHQUEUES = 7
  FILESYSTEMS = 8
  JOBSUBMISSIONINTERFACES = 9
  DATAMOVEMENTINTERFACES = 10
  MAXMEMORYPERNODE = 11
  GATEWAYUSAGEREPORTING = 12
  GATEWAYUSAGEMODULELOADCOMMAND = 13
  GATEWAYUSAGEEXECUTABLE = 14
  CPUSPERNODE = 15
  DEFAULTNODECOUNT = 16
  DEFAULTCPUCOUNT = 17
  DEFAULTWALLTIME = 18

  FIELDS = {
    COMPUTERESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'computeResourceId', :default => %q"DO_NOT_SET_AT_CLIENTS"},
    HOSTNAME => {:type => ::Thrift::Types::STRING, :name => 'hostName'},
    HOSTALIASES => {:type => ::Thrift::Types::LIST, :name => 'hostAliases', :element => {:type => ::Thrift::Types::STRING}, :optional => true},
    IPADDRESSES => {:type => ::Thrift::Types::LIST, :name => 'ipAddresses', :element => {:type => ::Thrift::Types::STRING}, :optional => true},
    RESOURCEDESCRIPTION => {:type => ::Thrift::Types::STRING, :name => 'resourceDescription', :optional => true},
    ENABLED => {:type => ::Thrift::Types::BOOL, :name => 'enabled', :optional => true},
    BATCHQUEUES => {:type => ::Thrift::Types::LIST, :name => 'batchQueues', :element => {:type => ::Thrift::Types::STRUCT, :class => ::BatchQueue}, :optional => true},
    FILESYSTEMS => {:type => ::Thrift::Types::MAP, :name => 'fileSystems', :key => {:type => ::Thrift::Types::I32, :enum_class => ::FileSystems}, :value => {:type => ::Thrift::Types::STRING}, :optional => true},
    JOBSUBMISSIONINTERFACES => {:type => ::Thrift::Types::LIST, :name => 'jobSubmissionInterfaces', :element => {:type => ::Thrift::Types::STRUCT, :class => ::JobSubmissionInterface}, :optional => true},
    DATAMOVEMENTINTERFACES => {:type => ::Thrift::Types::LIST, :name => 'dataMovementInterfaces', :element => {:type => ::Thrift::Types::STRUCT, :class => ::DataMovementInterface}, :optional => true},
    MAXMEMORYPERNODE => {:type => ::Thrift::Types::I32, :name => 'maxMemoryPerNode', :optional => true},
    GATEWAYUSAGEREPORTING => {:type => ::Thrift::Types::BOOL, :name => 'gatewayUsageReporting', :optional => true},
    GATEWAYUSAGEMODULELOADCOMMAND => {:type => ::Thrift::Types::STRING, :name => 'gatewayUsageModuleLoadCommand', :optional => true},
    GATEWAYUSAGEEXECUTABLE => {:type => ::Thrift::Types::STRING, :name => 'gatewayUsageExecutable', :optional => true},
    CPUSPERNODE => {:type => ::Thrift::Types::I32, :name => 'cpusPerNode', :optional => true},
    DEFAULTNODECOUNT => {:type => ::Thrift::Types::I32, :name => 'defaultNodeCount', :optional => true},
    DEFAULTCPUCOUNT => {:type => ::Thrift::Types::I32, :name => 'defaultCPUCount', :optional => true},
    DEFAULTWALLTIME => {:type => ::Thrift::Types::I32, :name => 'defaultWalltime', :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field computeResourceId is unset!') unless @computeResourceId
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field hostName is unset!') unless @hostName
  end

  ::Thrift::Struct.generate_accessors self
end

