#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'airavata_commons_types'
require 'application_io_models_types'
require 'scheduling_model_types'
require 'status_models_types'
require 'process_model_types'
require 'airavata_workflow_model_types'


module ExperimentType
  SINGLE_APPLICATION = 0
  WORKFLOW = 1
  VALUE_MAP = {0 => "SINGLE_APPLICATION", 1 => "WORKFLOW"}
  VALID_VALUES = Set.new([SINGLE_APPLICATION, WORKFLOW]).freeze
end

module ExperimentSearchFields
  EXPERIMENT_NAME = 0
  EXPERIMENT_DESC = 1
  APPLICATION_ID = 2
  FROM_DATE = 3
  TO_DATE = 4
  STATUS = 5
  PROJECT_ID = 6
  USER_NAME = 7
  JOB_ID = 8
  VALUE_MAP = {0 => "EXPERIMENT_NAME", 1 => "EXPERIMENT_DESC", 2 => "APPLICATION_ID", 3 => "FROM_DATE", 4 => "TO_DATE", 5 => "STATUS", 6 => "PROJECT_ID", 7 => "USER_NAME", 8 => "JOB_ID"}
  VALID_VALUES = Set.new([EXPERIMENT_NAME, EXPERIMENT_DESC, APPLICATION_ID, FROM_DATE, TO_DATE, STATUS, PROJECT_ID, USER_NAME, JOB_ID]).freeze
end

module ProjectSearchFields
  PROJECT_NAME = 0
  PROJECT_DESCRIPTION = 1
  VALUE_MAP = {0 => "PROJECT_NAME", 1 => "PROJECT_DESCRIPTION"}
  VALID_VALUES = Set.new([PROJECT_NAME, PROJECT_DESCRIPTION]).freeze
end

# A structure holding the experiment configuration.
# 
# 
class UserConfigurationDataModel
  include ::Thrift::Struct, ::Thrift::Struct_Union
  AIRAVATAAUTOSCHEDULE = 1
  OVERRIDEMANUALSCHEDULEDPARAMS = 2
  SHAREEXPERIMENTPUBLICLY = 3
  COMPUTATIONALRESOURCESCHEDULING = 4
  THROTTLERESOURCES = 5
  USERDN = 6
  GENERATECERT = 7
  STORAGEID = 8
  EXPERIMENTDATADIR = 9
  USEUSERCRPREF = 10
  GROUPRESOURCEPROFILEID = 11

  FIELDS = {
    AIRAVATAAUTOSCHEDULE => {:type => ::Thrift::Types::BOOL, :name => 'airavataAutoSchedule', :default => false},
    OVERRIDEMANUALSCHEDULEDPARAMS => {:type => ::Thrift::Types::BOOL, :name => 'overrideManualScheduledParams', :default => false},
    SHAREEXPERIMENTPUBLICLY => {:type => ::Thrift::Types::BOOL, :name => 'shareExperimentPublicly', :default => false, :optional => true},
    COMPUTATIONALRESOURCESCHEDULING => {:type => ::Thrift::Types::STRUCT, :name => 'computationalResourceScheduling', :class => ::ComputationalResourceSchedulingModel, :optional => true},
    THROTTLERESOURCES => {:type => ::Thrift::Types::BOOL, :name => 'throttleResources', :default => false, :optional => true},
    USERDN => {:type => ::Thrift::Types::STRING, :name => 'userDN', :optional => true},
    GENERATECERT => {:type => ::Thrift::Types::BOOL, :name => 'generateCert', :default => false, :optional => true},
    STORAGEID => {:type => ::Thrift::Types::STRING, :name => 'storageId', :optional => true},
    EXPERIMENTDATADIR => {:type => ::Thrift::Types::STRING, :name => 'experimentDataDir', :optional => true},
    USEUSERCRPREF => {:type => ::Thrift::Types::BOOL, :name => 'useUserCRPref', :optional => true},
    GROUPRESOURCEPROFILEID => {:type => ::Thrift::Types::STRING, :name => 'groupResourceProfileId', :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field airavataAutoSchedule is unset!') if @airavataAutoSchedule.nil?
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field overrideManualScheduledParams is unset!') if @overrideManualScheduledParams.nil?
  end

  ::Thrift::Struct.generate_accessors self
end

# A structure holding the experiment metadata and its child models.
# 
# userName:
#   The user name of the targeted gateway end user on whose behalf the experiment is being created.
#     the associated gateway identity can only be inferred from the security hand-shake so as to avoid
#     authorized Airavata Clients mimicking an unauthorized request. If a gateway is not registered with
#     Airavata, an authorization exception is thrown.
# 
# experimentName:
#   The name of the experiment as defined by the user. The name need not be unique as uniqueness is enforced
#      by the generated experiment id.
# 
# experimentDescription:
#    The verbose description of the experiment. This is an optional parameter.
class ExperimentModel
  include ::Thrift::Struct, ::Thrift::Struct_Union
  EXPERIMENTID = 1
  PROJECTID = 2
  GATEWAYID = 3
  EXPERIMENTTYPE = 4
  USERNAME = 5
  EXPERIMENTNAME = 6
  CREATIONTIME = 7
  DESCRIPTION = 8
  EXECUTIONID = 9
  GATEWAYEXECUTIONID = 10
  GATEWAYINSTANCEID = 11
  ENABLEEMAILNOTIFICATION = 12
  EMAILADDRESSES = 13
  USERCONFIGURATIONDATA = 14
  EXPERIMENTINPUTS = 15
  EXPERIMENTOUTPUTS = 16
  EXPERIMENTSTATUS = 17
  ERRORS = 18
  PROCESSES = 19
  WORKFLOW = 20

  FIELDS = {
    EXPERIMENTID => {:type => ::Thrift::Types::STRING, :name => 'experimentId', :default => %q"DO_NOT_SET_AT_CLIENTS"},
    PROJECTID => {:type => ::Thrift::Types::STRING, :name => 'projectId'},
    GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayId'},
    EXPERIMENTTYPE => {:type => ::Thrift::Types::I32, :name => 'experimentType', :default =>     0, :enum_class => ::ExperimentType},
    USERNAME => {:type => ::Thrift::Types::STRING, :name => 'userName'},
    EXPERIMENTNAME => {:type => ::Thrift::Types::STRING, :name => 'experimentName'},
    CREATIONTIME => {:type => ::Thrift::Types::I64, :name => 'creationTime', :optional => true},
    DESCRIPTION => {:type => ::Thrift::Types::STRING, :name => 'description', :optional => true},
    EXECUTIONID => {:type => ::Thrift::Types::STRING, :name => 'executionId', :optional => true},
    GATEWAYEXECUTIONID => {:type => ::Thrift::Types::STRING, :name => 'gatewayExecutionId', :optional => true},
    GATEWAYINSTANCEID => {:type => ::Thrift::Types::STRING, :name => 'gatewayInstanceId', :optional => true},
    ENABLEEMAILNOTIFICATION => {:type => ::Thrift::Types::BOOL, :name => 'enableEmailNotification', :optional => true},
    EMAILADDRESSES => {:type => ::Thrift::Types::LIST, :name => 'emailAddresses', :element => {:type => ::Thrift::Types::STRING}, :optional => true},
    USERCONFIGURATIONDATA => {:type => ::Thrift::Types::STRUCT, :name => 'userConfigurationData', :class => ::UserConfigurationDataModel, :optional => true},
    EXPERIMENTINPUTS => {:type => ::Thrift::Types::LIST, :name => 'experimentInputs', :element => {:type => ::Thrift::Types::STRUCT, :class => ::InputDataObjectType}, :optional => true},
    EXPERIMENTOUTPUTS => {:type => ::Thrift::Types::LIST, :name => 'experimentOutputs', :element => {:type => ::Thrift::Types::STRUCT, :class => ::OutputDataObjectType}, :optional => true},
    EXPERIMENTSTATUS => {:type => ::Thrift::Types::LIST, :name => 'experimentStatus', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ExperimentStatus}, :optional => true},
    ERRORS => {:type => ::Thrift::Types::LIST, :name => 'errors', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ErrorModel}, :optional => true},
    PROCESSES => {:type => ::Thrift::Types::LIST, :name => 'processes', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ProcessModel}, :optional => true},
    WORKFLOW => {:type => ::Thrift::Types::STRUCT, :name => 'workflow', :class => ::AiravataWorkflow, :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field experimentId is unset!') unless @experimentId
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field projectId is unset!') unless @projectId
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayId is unset!') unless @gatewayId
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field experimentType is unset!') unless @experimentType
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field userName is unset!') unless @userName
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field experimentName is unset!') unless @experimentName
    unless @experimentType.nil? || ::ExperimentType::VALID_VALUES.include?(@experimentType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field experimentType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class ExperimentSummaryModel
  include ::Thrift::Struct, ::Thrift::Struct_Union
  EXPERIMENTID = 1
  PROJECTID = 2
  GATEWAYID = 3
  CREATIONTIME = 4
  USERNAME = 5
  NAME = 6
  DESCRIPTION = 7
  EXECUTIONID = 8
  RESOURCEHOSTID = 9
  EXPERIMENTSTATUS = 10
  STATUSUPDATETIME = 12

  FIELDS = {
    EXPERIMENTID => {:type => ::Thrift::Types::STRING, :name => 'experimentId'},
    PROJECTID => {:type => ::Thrift::Types::STRING, :name => 'projectId'},
    GATEWAYID => {:type => ::Thrift::Types::STRING, :name => 'gatewayId'},
    CREATIONTIME => {:type => ::Thrift::Types::I64, :name => 'creationTime', :optional => true},
    USERNAME => {:type => ::Thrift::Types::STRING, :name => 'userName'},
    NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
    DESCRIPTION => {:type => ::Thrift::Types::STRING, :name => 'description', :optional => true},
    EXECUTIONID => {:type => ::Thrift::Types::STRING, :name => 'executionId', :optional => true},
    RESOURCEHOSTID => {:type => ::Thrift::Types::STRING, :name => 'resourceHostId', :optional => true},
    EXPERIMENTSTATUS => {:type => ::Thrift::Types::STRING, :name => 'experimentStatus', :optional => true},
    STATUSUPDATETIME => {:type => ::Thrift::Types::I64, :name => 'statusUpdateTime', :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field experimentId is unset!') unless @experimentId
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field projectId is unset!') unless @projectId
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field gatewayId is unset!') unless @gatewayId
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field userName is unset!') unless @userName
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field name is unset!') unless @name
  end

  ::Thrift::Struct.generate_accessors self
end

class ExperimentStatistics
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ALLEXPERIMENTCOUNT = 1
  COMPLETEDEXPERIMENTCOUNT = 2
  CANCELLEDEXPERIMENTCOUNT = 3
  FAILEDEXPERIMENTCOUNT = 4
  CREATEDEXPERIMENTCOUNT = 5
  RUNNINGEXPERIMENTCOUNT = 6
  ALLEXPERIMENTS = 7
  COMPLETEDEXPERIMENTS = 8
  FAILEDEXPERIMENTS = 9
  CANCELLEDEXPERIMENTS = 10
  CREATEDEXPERIMENTS = 11
  RUNNINGEXPERIMENTS = 12

  FIELDS = {
    ALLEXPERIMENTCOUNT => {:type => ::Thrift::Types::I32, :name => 'allExperimentCount'},
    COMPLETEDEXPERIMENTCOUNT => {:type => ::Thrift::Types::I32, :name => 'completedExperimentCount'},
    CANCELLEDEXPERIMENTCOUNT => {:type => ::Thrift::Types::I32, :name => 'cancelledExperimentCount', :optional => true},
    FAILEDEXPERIMENTCOUNT => {:type => ::Thrift::Types::I32, :name => 'failedExperimentCount'},
    CREATEDEXPERIMENTCOUNT => {:type => ::Thrift::Types::I32, :name => 'createdExperimentCount'},
    RUNNINGEXPERIMENTCOUNT => {:type => ::Thrift::Types::I32, :name => 'runningExperimentCount'},
    ALLEXPERIMENTS => {:type => ::Thrift::Types::LIST, :name => 'allExperiments', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ExperimentSummaryModel}},
    COMPLETEDEXPERIMENTS => {:type => ::Thrift::Types::LIST, :name => 'completedExperiments', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ExperimentSummaryModel}, :optional => true},
    FAILEDEXPERIMENTS => {:type => ::Thrift::Types::LIST, :name => 'failedExperiments', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ExperimentSummaryModel}, :optional => true},
    CANCELLEDEXPERIMENTS => {:type => ::Thrift::Types::LIST, :name => 'cancelledExperiments', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ExperimentSummaryModel}, :optional => true},
    CREATEDEXPERIMENTS => {:type => ::Thrift::Types::LIST, :name => 'createdExperiments', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ExperimentSummaryModel}, :optional => true},
    RUNNINGEXPERIMENTS => {:type => ::Thrift::Types::LIST, :name => 'runningExperiments', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ExperimentSummaryModel}, :optional => true}
  }

  def struct_fields; FIELDS; end

  def validate
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field allExperimentCount is unset!') unless @allExperimentCount
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field completedExperimentCount is unset!') unless @completedExperimentCount
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field failedExperimentCount is unset!') unless @failedExperimentCount
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field createdExperimentCount is unset!') unless @createdExperimentCount
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field runningExperimentCount is unset!') unless @runningExperimentCount
    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field allExperiments is unset!') unless @allExperiments
  end

  ::Thrift::Struct.generate_accessors self
end

